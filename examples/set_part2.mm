$( This is the Metamath database set.mm. $)

$( Metamath is a formal language and associated computer program for
   archiving, verifying, and studying mathematical proofs, created by Norman
   Dwight Megill (1950--2021).  For more information, visit
   http://us.metamath.org and
   https://github.com/metamath/set.mm, and feel free to ask questions at
   http://groups.google.com/group/metamath. $)

$( New users may want to read http://us.metamath.org/mpeuni/conventions.html to
   understand the label naming conventions used in set.mm.  See also "help
   verify markup" in the Metamath program for markup conventions. $)

$( To break this file into smaller modules, in the Metamath program type
   "MM> READ set.mm" followed by "MM> WRITE SOURCE set.mm / SPLIT".  To
   recombine, omit "/ SPLIT". $)

$( The database set.mm was created by Norman Megill on 30-Sep-1992 and has
   been continuously enriched since then (list of contributors below). $)


$( !
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
  Metamath source file for logic and set theory
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#

                           ~~ PUBLIC DOMAIN ~~
This work is waived of all rights, including copyright, according to the CC0
Public Domain Dedication.  http://creativecommons.org/publicdomain/zero/1.0/

Currently active maintainers: See the list in the CONTRIBUTING.md file.

Contributor list:

DA  David Abernethy
SA  Stefan Allan
TA  Thierry Arnoux
JA  Juha Arpiainen
JB  Jonathan Ben-Naim
GB  Gregory Bush
MC  Mario Carneiro
FC  Filip Cernatescu
PC  Paul Chapman
DF  Drahflow
GD  Georgy Dunaev
SF  Scott Fenton
JGH Jeff Hankins
AH  Anthony Hart
DH  David Harvey
CH  Chen-Pang He
JH  Jeff Hoffman
II  Igor Ieskov
AI  Asger C. Ipsen
JJ  Jerry James
SJ  Szymon Jaroszewicz
BJ  Benoit Jubin
JK  Jim Kingdon
ML  M L
WL  Wolf Lammen
GL  Gerard Lang
BL  Brendan Leahy
RL  Raph Levien
FL  Frederic Line
RFL Roy F. Longton
GM  Giovanni Mascellani
JM  Jeff Madsen
PM  Peter Mazsa
RM  Rodolfo Medina
NM  Norman Megill
DM  David Moews
MM  Mykola Mostovenko
SN  Steven Nguyen
MO  Mel L. O'Cat
OA  OpenAI
SO  Stefan O'Rear
JO  Jason Orendorff
KP  K P
JPP Jon Pennant
RP  Richard Penner
SP  Stanislas Polu
JP  Josh Purinton
RR  Rohan Ridenour
SR  Steve Rodriguez
ATS Andrew Salmon
AS  Alan Sare
ES  Eric Schmidt
GS  Glauco Siliprandi
SS  Saveliy Skresanov
JU  Jarvin Udandy
AV  Alexander van der Vekens
JV  Jannik Vierling
EW  Emmett Weisz
DAW David A. Wheeler
RW  Roger Witte
KW  Kyle Wyonch
JY  Jonathan Yan
FZ  Fan Zheng
KZ  Kunhao Zheng

HTML code for accented names:
  GL G&eacute;rard Lang
  FL Fr&eacute;d&eacute;ric Lin&eacute;
$)


$( (See 'help verify markup' for help with modularization tags.) $)
$( Begin $[ set-header.mm $] $)
$( !
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Contents of this header
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

* Quick "How To"
* Bibliography
* Metamath syntax summary
* Other notes


=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Quick "How To"
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

How to use this file under Windows 95/98/NT/2K/XP/Vista/7/10:

1. Download the program metamath.exe per the instructions on the
   Metamath home page (http://us.metamath.org) and put it in the same
   directory as this file (set.mm).
2. In Windows Explorer, double-click on metamath.exe.
3. Type "read set.mm" and press Enter.
4. Type "help" for a list of help topics, and "help demo" for some
   command examples.


=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Bibliography
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Bibliographical references are made by bracketing an identifier in a theorem's
comment, such as [RussellWhitehead].  These refer to HTML tags on the following
web pages:

  Logic and set theory - see http://us.metamath.org/mpeuni/mmset.html#bib
  Hilbert space - see http://us.metamath.org/mpeuni/mmhil.html#ref

A bracketed reference must be preceded by a theorem number, etc. and followed
by a page number.  See HELP WRITE BIBLIOGRAPHY for details.


=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Metamath syntax summary
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

The HELP LANGUAGE command in the Metamath program will give you a quick
overview of Metamath.  The official spec is found on pp. 92-95 of the
Metamath book.  The following syntax summary is provided for convenience
but may omit some details.

A Metamath database (set of one or more ASCII source files) is a sequence of
_tokens_, which are normally separated by spaces or line breaks.  The only
tokens that are built into the Metamath language are those (two-character
sequences) beginning with $, shown in the following. These tokens are called
_keywords_:

          $c ... $. - Constant declaration
          $v ... $. - Variable declaration
          $d ... $. - Disjoint (distinct) variable restriction
  <label> $f ... $. - "Floating" hypothesis (i.e. variable type declaration)
  <label> $e ... $. - "Essential" hypothesis (i.e. a logical assumption for a
                      theorem or axiom)
  <label> $a ... $. - Axiom or definition or syntax construction
  <label> $p ... $= ... $. - Theorem and its proof
          ${ ... $} - Block for defining the scope of the above statements
                      (except $a, $p which are forever active)
$)        $( ... $)
$(                  - Comments (may not be nested); see HELP LANGUAGE
                      for markup features.
          $[ ... $] - Include a file

The only "logic" Metamath uses in its proof verification algorithm is the
substitution of expressions for variables while checking for distinct variable
violations.  Everything else, including the axioms for logic, is defined in the
database.

All other tokens are user-defined, and their names are arbitrary.  There are
two kinds of user-defined tokens, called math symbols (or just symbols) and
labels.  A _symbol_ may contain any non-whitespace printable character except
"$".  A _label_ may contain only alphanumeric characters and the characters "."
(period), "-" (hyphen), and "_" (underscore).  Symbols and labels are
case-sensitive.  All labels (except in proofs) must be distinct.  A label may
not have the same name as a symbol (to simplify the coding of certain parsers
and translators).

Here is some more detail about the syntax:

  $c <symbollist> $.
      <symbollist> is a (whitespace-separated) list of distinct symbols that
      haven't been used before.
  $v <symbollist> $.
      <symbollist> is a list of distinct symbols that haven't been used yet
      in the current scope (see ${ ... $} below).
  $d <symbollist> $.
      <symbollist> is a (whitespace-separated) list of distinct symbols
      previously declared with $v in current scope.  It means that
      substitutions into these symbols may not have variables in common.
  <label> $f <symbollist> $.
      <symbollist> is a list of 2 symbols, the first of which must be
      previously declared with $c in the current scope.
  <label> $e <symbollist> $.
      <symbollist> is a list of 2 or more symbols, the first of which must be
      previously declared with $c in the current scope.
  <label> $a <symbollist> $.
      <symbollist> is a list of 2 or more symbols, the first of which must be
      previously declared with $c in the current scope.
  <label> $p <symbollist> $= <proof> $.
      <symbollist> is a list of 2 or more symbols, the first of which must be
      previously declared with $c in the current scope.  <proof> is either a
      whitespace-delimited sequence of previous labels (created by
      SAVE PROOF <label> /NORMAL) or a compressed proof (created by
      SAVE PROOF <label> /COMPRESSED).  After using SAVE PROOF, use
      WRITE SOURCE to save the database file to disk.
  ${ ... $}
      Block for scoping the above statements (except $a, $p which are forever
      active).  Currently, $c may not occur inside of a block.
$)
  $( <any text> $)
$(    Comment.  Note: <any text> may not contain adjacent "$" and ")"
      characters.  The comment opening and closing delimiters must be
      surrounded by whitespace (space, tab, CR, LF, or FF).
  $[ <filename> $]
      Insert contents of <filename> at this point.  If <filename> is current
      file or has been already been inserted, it will not be inserted again.

Inside of comments, it is recommended that labels be preceded with a tilde (~)
and math symbol tokens be enclosed in grave accents, also known as backticks
(` `). These tildes, tokens, math symbols and backticks should be surrounded by
spaces.  This way the LaTeX and HTML rendition of comments will be accurate,
and tools to globally change labels and math symbols will also change them in
comments.  Note that inside of backticks a pair of backticks is interpreted as
a single backtick.  A special comment containing $ t (with no space after the
dollar sign) defines LaTeX and HTML symbols.  See HELP LANGUAGE and HELP HTML
for other markup features in comments.

The proofs in this file are in "compressed" format for storage efficiency.  The
Metamath program reads the compressed format directly.  This format is
described in Appendix B of the Metamath book.  It is not intended to be read by
humans.  For viewing proofs you should use the various SHOW PROOF commands
described in the Metamath book (or the online HELP).

The Metamath program does not normally affect any content of this file (set.mm)
other than proofs, i.e., the text between "$=" and "$." (and some rewrapping).
All other content is user-created.  Proofs are created or modified with the
PROVE command.


=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Other notes
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

1.  It is recommended that you be familiar with Chapters 2 and 4 of the
Metamath book to understand the Metamath language.  Chapters 2, 3 and 5 explain
how to use the Metamath program.  Chapter 3 gives an informal overview of what
this source file is all about.  Appendix A gives the standard mathematical
symbols corresponding to some of the ASCII tokens used in this file.

The ASCII tokens may seem cryptic at first, even if you are familiar with set
theory, but a review of the definition summary in Chapter 3 should quickly
enable you to see the correspondence to standard mathematical notation.  To
easily find the definition of a token, search for the first occurrences of the
token surrounded by spaces.  Some odd-looking ones include "-." for "not", and
"C_" for "is a subset of".  The Metamath program "MM> HELP TEX" command
explains how to obtain a LaTeX output to see the real mathematical symbols.
Let us know if you have better suggestions for naming ASCII tokens.

2.  Theorems can be written in different forms, including "closed form",
"deduction form", and "inference form" (for details, see ~ conventions ).  For
basic theorems, all three forms are generally given, but for more advanced
theorems, we prefer to use the deduction form, since it permits to write proofs
in the "deduction style", and we do not add theorems in inference form unless
there are reasonable grounds for it (for instance, shortening sufficiently many
proofs to counterbalance their addition).

3.  On providing new definitions and theorems, the conventions provided in the
comment of ~ conventions should be obeyed.

4.  For a chronological list of changes to label names and label deletions, see
the changes-set.txt file.  This should help if you have a proof not checked
into the main repository and want to update it for recent changes.

$)

$( End $[ set-header.mm $] $)


$( Begin $[ set-main.mm $] $)
$( Begin $[ set-pred.mm $] $)

$( The following header is the first to appear in the Theorem List contents,
because higher-level headers suppress all previous same- or lower-level headers
in the same comment area between $a and $p statements.  See HELP WRITE
THEOREM_LIST for information about headers. $)


$(
###############################################################################
  CLASSICAL FIRST-ORDER LOGIC WITH EQUALITY
###############################################################################

  Logic can be defined as the "study of the principles of correct reasoning"
  (Merrilee H. Salmon's 1991 "Informal Reasoning and Informal Logic" in
  _Informal Reasoning and Education_) or as "a formal system using symbolic
  techniques and mathematical methods to establish truth-values" (the Oxford
  English Dictionary).

  This section formally defines the logic system we will use.  In particular,
  it defines symbols for declaring truthful statements, along with rules for
  deriving truthful statements from other truthful statements.  The system
  defined here is classical first-order logic with equality (the most common
  logic system used by mathematicians).

  We begin with a few housekeeping items in pre-logic, and then introduce
  propositional calculus (both its axioms and important theorems that can be
  derived from them).  Propositional calculus deals with general truths about
  well-formed formulas (wffs) regardless of how they are constructed.  This is
  followed by proofs that other axiomatizations of classical propositional
  calculus can be derived from the axioms we have chosen to use.

  We then define predicate calculus, which adds additional symbols and rules
  useful for discussing objects (beyond simply true or false).  In particular,
  it introduces the symbols ` = ` ("equals"), ` e. ` ("is a member of"), and
  ` A. ` ("for all").  The first two are called "predicates".  A predicate
  specifies a true or false relationship between its two arguments.

$)


$(
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
  Pre-logic
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#

  This section includes a few "housekeeping" mechanisms before we begin
  defining the basics of logic.

$)

  $( Declare the primitive constant symbols for propositional calculus. $)
  $c ( $.  $( Left parenthesis $)
  $c ) $.  $( Right parenthesis $)
  $c -> $.  $( Right arrow (read:  "implies") $)
  $c -. $.  $( Right handle (read:  "not") $)
  $c wff $.  $( Well-formed formula symbol (read:  "the following symbol
                sequence is a wff") $)
  $c |- $.  $( Turnstile (read:  "the following symbol sequence is provable" or
               "a proof exists for") $)

  $( Define the syntax and logical typecodes, and declare that our grammar is
     unambiguous (verifiable using the KLR parser, with compositing depth 5).
     (This $ j comment need not be read by verifiers, but is useful for parsers
     like mmj2.) $)
  $( $j
    syntax 'wff';
    syntax '|-' as 'wff';
    unambiguous 'klr 5';
  $)

  $( Declare typographical constant symbols that are not directly used
     in the formalism, but *are* symbols we find useful when
     explaining the formalism. It is much easier to consistently use
     a single typographical system when generating text. $)

  $c & $.  $( Ampersand (read:  "and-also") $)
  $c => $.  $( Double right arrow (read:  "proves") $)

  $( wff variable sequence:  ph ps ch th ta et ze si rh mu la ka $)
  $( Introduce some variable names we will use to represent well-formed
     formulas (wff's). $)
  $v ph $.  $( Greek phi $)
  $v ps $.  $( Greek psi $)
  $v ch $.  $( Greek chi $)
  $v th $.  $( Greek theta $)
  $v ta $.  $( Greek tau $)
  $v et $.  $( Greek eta $)
  $v ze $.  $( Greek zeta $)
  $v si $.  $( Greek sigma $)
  $v rh $.  $( Greek rho $)
  $v mu $.  $( Greek mu $)
  $v la $.  $( Greek lambda $)
  $v ka $.  $( Greek kappa $)

  $( Specify some variables that we will use to represent wff's.
     The fact that a variable represents a wff is relevant only to a theorem
     referring to that variable, so we may use $f hypotheses.  The symbol
     ` wff ` specifies that the variable that follows it represents a wff. $)
  $( Let variable ` ph ` be a wff. $)
  wph $f wff ph $.
  $( Let variable ` ps ` be a wff. $)
  wps $f wff ps $.
  $( Let variable ` ch ` be a wff. $)
  wch $f wff ch $.
  $( Let variable ` th ` be a wff. $)
  wth $f wff th $.
  $( Let variable ` ta ` be a wff. $)
  wta $f wff ta $.
  $( Let variable ` et ` be a wff. $)
  wet $f wff et $.
  $( Let variable ` ze ` be a wff. $)
  wze $f wff ze $.
  $( Let variable ` si ` be a wff. $)
  wsi $f wff si $.
  $( Let variable ` rh ` be a wff. $)
  wrh $f wff rh $.
  $( Let variable ` mu ` be a wff. $)
  wmu $f wff mu $.
  $( Let variable ` la ` be a wff. $)
  wla $f wff la $.
  $( Let variable ` ka ` be a wff. $)
  wka $f wff ka $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Inferences for assisting proof development
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  The inference rules in this section will normally never appear in a completed
  proof.  They can be ignored if you are using this database to assist learning
  logic - please start with the statement ~ wn instead.

$)

  ${
    idi.1 $e |- ph $.
    $( (_Note_:  This inference rule and the next one, ~ a1ii , will normally
       never appear in a completed proof.  They can be ignored if you are using
       this database to assist learning logic; please start with the statement
       ~ wn instead.)

       This inference says "if ` ph ` is true then ` ph ` is true".  This
       inference requires no axioms for its proof, and is useful as a
       copy-paste mechanism during proof development in mmj2.  It is normally
       not referenced in the final version of a proof, since it is always
       redundant.  You can remove this using the metamath-exe (Metamath
       program) Proof Assistant using the "MM-PA> MINIMIZE_WITH *" command.
       This is the inference associated with ~ id , hence its name.
       (Contributed by Alan Sare, 31-Dec-2011.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    idi $p |- ph $=
      (  ) B $.
  $}

  ${
    a1ii.1 $e |- ph $.
    a1ii.2 $e |- ps $.
    $( (_Note_:  This inference rule and the previous one, ~ idi , will
       normally never appear in a completed proof.)

       This is a technical inference to assist proof development.  It provides
       a temporary way to add an independent subproof to a proof under
       development, for later assignment to a normal proof step.

       The Metamath (Metamath-exe) program Proof Assistant requires proofs to
       be developed backwards from the conclusion with no gaps, and it has no
       mechanism that lets the user work on isolated subproofs.  This inference
       provides a workaround for this limitation.  It can be inserted at any
       point in a proof to allow an independent subproof to be developed on the
       side, for later use as part of the final proof.

       _Instructions_:  (1) Assign this inference to any unknown step in the
       proof.  Typically, the last unknown step is the most convenient, since
       "MM-PA> ASSIGN LAST" can be used.  This step will be replicated in
       hypothesis a1ii.1, from where the development of the main proof can
       continue.  (2) Develop the independent subproof backwards from
       hypothesis a1ii.2.  If desired, use a "MM-PA> LET STEP" command to
       pre-assign the conclusion of the independent subproof to a1ii.2.  (3)
       After the independent subproof is complete, use "MM-PA> IMPROVE ALL" to
       assign it automatically to an unknown step in the main proof that
       matches it.  (4) After the entire proof is complete, use "MM-PA>
       MINIMIZE_WITH *" to clean up (discard) all ~ a1ii references
       automatically.

       This inference was originally designed to assist importing partially
       completed Proof Worksheets from the mmj2 Proof Assistant GUI, but it can
       also be useful on its own.  Interestingly, no axioms are required for
       its proof.  It is the inference associated with ~ a1i .  (Contributed by
       NM, 7-Feb-2006.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    a1ii $p |- ph $=
      (  ) C $.
  $}

$(
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
  Propositional calculus
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#

  Propositional calculus deals with general truths about well-formed formulas
  (wffs) regardless of how they are constructed.  The simplest propositional
  truth is ` ( ph -> ph ) ` , which can be read "if something is true, then it
  is true" - rather trivial and obvious, but nonetheless it must be proved from
  the axioms (see theorem ~ id ).

  Our system of propositional calculus consists of three basic axioms and
  another axiom that defines the modus-ponens inference rule.  It is attributed
  to Jan Lukasiewicz (pronounced woo-kah-SHAY-vitch) and was popularized by
  Alonzo Church, who called it system P2.  (Thanks to Ted Ulrich for this
  information.)  These axioms are ~ ax-1 , ~ ax-2 , ~ ax-3 , and (for modus
  ponens) ~ ax-mp . Some closely followed texts include [Margaris] for the
  axioms and [WhiteheadRussell] for the theorems.

  The propositional calculus used here is the classical system widely used by
  mathematicians.  In particular, this logic system accepts the "law of the
  excluded middle" as proven in ~ exmid , which says that a logical statement
  is either true or not true.  This is an essential distinction of classical
  logic and is not a theorem of intuitionistic logic.

  All 194 axioms, definitions, and theorems for propositional calculus in
  _Principia Mathematica_ (specifically *1.2 through *5.75) are axioms or
  formally proven.  See the Bibliographic Cross-References at ~ mmbiblio.html
  for a complete cross-reference from sources used to its formalization in the
  Metamath Proof Explorer.

$)


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Recursively define primitive wffs for propositional calculus
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( If ` ph ` is a wff, so is ` -. ph ` or "not ` ph ` ".  Part of the
     recursive definition of a wff (well-formed formula).  In classical logic
     (which is our logic), a wff is interpreted as either true or false.  So if
     ` ph ` is true, then ` -. ph ` is false; if ` ph ` is false, then
     ` -. ph ` is true.  Traditionally, Greek letters are used to represent
     wffs, and we follow this convention.  In propositional calculus, we define
     only wffs built up from other wffs, i.e. there is no starting or "atomic"
     wff.  Later, in predicate calculus, we will extend the basic wff
     definition by including atomic wffs ( ~ weq and ~ wel ). $)
  wn $a wff -. ph $.

  $( If ` ph ` and ` ps ` are wff's, so is ` ( ph -> ps ) ` or " ` ph ` implies
     ` ps ` ".  Part of the recursive definition of a wff.  The resulting wff
     is (interpreted as) false when ` ph ` is true and ` ps ` is false; it is
     true otherwise.  Think of the truth table for an OR gate with input ` ph `
     connected through an inverter.  After we state the axioms of propositional
     calculus ( ~ ax-1 , ~ ax-2 , ~ ax-3 , and ~ ax-mp ) and define the
     biconditional ( ~ df-bi ), the constant true ` T. ` ( ~ df-tru ), and the
     constant false ` F. ` ( ~ df-fal ), we will be able to prove these truth
     table values: ` ( ( T. -> T. ) <-> T. ) ` ( ~ truimtru ),
     ` ( ( T. -> F. ) <-> F. ) ` ( ~ truimfal ), ` ( ( F. -> T. ) <-> T. ) `
     ( ~ falimtru ), and ` ( ( F. -> F. ) <-> T. ) ` ( ~ falimfal ).  These
     have straightforward meanings, for example, ` ( ( T. -> T. ) <-> T. ) `
     just means "the value of ` ( T. -> T. ) ` is ` T. ` ".

     The left-hand wff is called the antecedent, and the right-hand wff is
     called the consequent.  In the case of ` ( ph -> ( ps -> ch ) ) ` , the
     middle ` ps ` may be informally called either an antecedent or part of the
     consequent depending on context.  Contrast with ` <-> ` ( ~ df-bi ),
     ` /\ ` ( ~ df-an ), and ` \/ ` ( ~ df-or ).

     This is called "material implication" and the arrow is usually read as
     "implies".  However, material implication is not identical to the meaning
     of "implies" in natural language.  For example, the word "implies" may
     suggest a causal relationship in natural language.  Material implication
     does not require any causal relationship.  Also, note that in material
     implication, if the consequent is true then the wff is always true (even
     if the antecedent is false).  Thus, if "implies" means material
     implication, it is true that "if the moon is made of green cheese that
     implies that 5=5" (because 5=5).  Similarly, if the antecedent is false,
     the wff is always true.  Thus, it is true that, "if the moon is made of
     green cheese that implies that 5=7" (because the moon is not actually made
     of green cheese).  A contradiction implies anything ( ~ pm2.21i ).  In
     short, material implication has a very specific technical definition, and
     misunderstandings of it are sometimes called "paradoxes of logical
     implication". $)
  wi $a wff ( ph -> ps ) $.

  $( Register '-.' and '->' as primitive expressions (lacking definitions). $)
  $( $j primitive 'wn' 'wi'; $)


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  The axioms of propositional calculus
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  Propositional calculus (axioms ~ ax-1 through ~ ax-3 and rule ~ ax-mp ) can
  be thought of as asserting formulas that are universally "true" when their
  variables are replaced by any combination of "true" and "false".
  Propositional calculus was first formalized by Frege in 1879, using as his
  axioms (in addition to rule ~ ax-mp ) the wffs ~ ax-1 , ~ ax-2 , ~ pm2.04 ,
  ~ con3 , ~ notnot , and ~ notnotr .  Around 1930, Lukasiewicz simplified the
  system by eliminating the third (which follows from the first two, as you can
  see by looking at the proof of ~ pm2.04 ) and replacing the last three with
  our ~ ax-3 .  (Thanks to Ted Ulrich for this information.)

  The theorems of propositional calculus are also called _tautologies_.
  Tautologies can be proved very simply using truth tables, based on the
  true/false interpretation of propositional calculus.  To do this, we assign
  all possible combinations of true and false to the wff variables and verify
  that the result (using the rules described in ~ wi and ~ wn ) always
  evaluates to true.  This is called the _semantic_ approach.  Our approach is
  called the _syntactic_ approach, in which everything is derived from axioms.
  A metatheorem called the Completeness Theorem for Propositional Calculus
  shows that the two approaches are equivalent and even provides an algorithm
  for automatically generating syntactic proofs from a truth table.  Those
  proofs, however, tend to be long, since truth tables grow exponentially with
  the number of variables, and the much shorter proofs that we show here were
  found manually.

$)

  ${
    $( Minor premise for modus ponens. $)
    min $e |- ph $.
    $( Major premise for modus ponens. $)
    maj $e |- ( ph -> ps ) $.
    $( Rule of Modus Ponens.  The postulated inference rule of propositional
       calculus.  See e.g.  Rule 1 of [Hamilton] p. 73.  The rule says, "if
       ` ph ` is true, and ` ph ` implies ` ps ` , then ` ps ` must also be
       true".  This rule is sometimes called "detachment", since it detaches
       the minor premise from the major premise.  "Modus ponens" is short for
       "modus ponendo ponens", a Latin phrase that means "the mode that by
       affirming affirms" - remark in [Sanford] p. 39.  This rule is similar to
       the rule of modus tollens ~ mto .

       Note:  In some web page displays such as the Statement List, the
       symbols " ` & ` " and " ` => ` " informally indicate the relationship
       between the hypotheses and the assertion (conclusion), abbreviating the
       English words "and" and "implies".  They are not part of the formal
       language.  (Contributed by NM, 30-Sep-1992.) $)
    ax-mp $a |- ps $.
  $}

  $( Axiom _Simp_.  Axiom A1 of [Margaris] p. 49.  One of the 3 axioms of
     propositional calculus.  The 3 axioms are also given as Definition 2.1 of
     [Hamilton] p. 28.  This axiom is called _Simp_ or "the principle of
     simplification" in _Principia Mathematica_ (Theorem *2.02 of
     [WhiteheadRussell] p. 100) because "it enables us to pass from the joint
     assertion of ` ph ` and ` ps ` to the assertion of ` ph ` simply".  It is
     Proposition 1 of [Frege1879] p. 26, its first axiom.  (Contributed by NM,
     30-Sep-1992.) $)
  ax-1 $a |- ( ph -> ( ps -> ph ) ) $.

  $( Axiom _Frege_.  Axiom A2 of [Margaris] p. 49.  One of the 3 axioms of
     propositional calculus.  It "distributes" an antecedent over two
     consequents.  This axiom was part of Frege's original system and is known
     as _Frege_ in the literature; see Proposition 2 of [Frege1879] p. 26.  It
     is also proved as Theorem *2.77 of [WhiteheadRussell] p. 108.  The other
     direction of this axiom also turns out to be true, as demonstrated by
     ~ pm5.41 .  (Contributed by NM, 30-Sep-1992.) $)
  ax-2 $a |- ( ( ph -> ( ps -> ch ) ) -> ( ( ph -> ps ) -> ( ph -> ch ) ) ) $.

  $( Axiom _Transp_.  Axiom A3 of [Margaris] p. 49.  One of the 3 axioms of
     propositional calculus.  It swaps or "transposes" the order of the
     consequents when negation is removed.  An informal example is that the
     statement "if there are no clouds in the sky, it is not raining" implies
     the statement "if it is raining, there are clouds in the sky".  This axiom
     is called _Transp_ or "the principle of transposition" in _Principia
     Mathematica_ (Theorem *2.17 of [WhiteheadRussell] p. 103).  We will also
     use the term "contraposition" for this principle, although the reader is
     advised that in the field of philosophical logic, "contraposition" has a
     different technical meaning.  (Contributed by NM, 30-Sep-1992.)  Use its
     alias ~ con4 instead.  (New usage is discouraged.) $)
  ax-3 $a |- ( ( -. ph -> -. ps ) -> ( ps -> ph ) ) $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Logical implication
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  The results in this section are based on implication only, and avoid
  ~ ax-3 , so are intuitionistic.  The system { ~ ax-mp , ~ ax-1 , ~ ax-2 }
  axiomatizes what is sometimes called "intuitionistic implicational calculus"
  or "minimal implicational calculus".

  In an implication, the wff before the arrow is called the "antecedent" and
  the wff after the arrow is called the "consequent".

$)

  ${
    mp2.1 $e |- ph $.
    mp2.2 $e |- ps $.
    mp2.3 $e |- ( ph -> ( ps -> ch ) ) $.
    $( A double modus ponens inference.  (Contributed by NM, 5-Apr-1994.) $)
    mp2 $p |- ch $=
      ( wi ax-mp ) BCEABCGDFHH $.
  $}

  ${
    mp2b.1 $e |- ph $.
    mp2b.2 $e |- ( ph -> ps ) $.
    mp2b.3 $e |- ( ps -> ch ) $.
    $( A double modus ponens inference.  (Contributed by Mario Carneiro,
       24-Jan-2013.) $)
    mp2b $p |- ch $=
      ( ax-mp ) BCABDEGFG $.
  $}

  ${
    a1i.1 $e |- ph $.
    $( Inference introducing an antecedent.  Inference associated with ~ ax-1 .
       Its associated inference is ~ a1ii .  See ~ conventions for a definition
       of "associated inference".  (Contributed by NM, 29-Dec-1992.) $)
    a1i $p |- ( ps -> ph ) $=
      ( wi ax-1 ax-mp ) ABADCABEF $.
  $}

  ${
    2a1i.1 $e |- ph $.
    $( Inference introducing two antecedents.  Two applications of ~ a1i .
       Inference associated with ~ 2a1 .  (Contributed by Jeff Hankins,
       4-Aug-2009.) $)
    2a1i $p |- ( ps -> ( ch -> ph ) ) $=
      ( wi a1i ) CAEBACDFF $.
  $}

  ${
    mp1i.1 $e |- ph $.
    mp1i.2 $e |- ( ph -> ps ) $.
    $( Inference detaching an antecedent and introducing a new one.
       (Contributed by Stefan O'Rear, 29-Jan-2015.) $)
    mp1i $p |- ( ch -> ps ) $=
      ( ax-mp a1i ) BCABDEFG $.
  $}

  ${
    a2i.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Inference distributing an antecedent.  Inference associated with
       ~ ax-2 .  Its associated inference is ~ mpd .  (Contributed by NM,
       29-Dec-1992.) $)
    a2i $p |- ( ( ph -> ps ) -> ( ph -> ch ) ) $=
      ( wi ax-2 ax-mp ) ABCEEABEACEEDABCFG $.
  $}

  ${
    mpd.1 $e |- ( ph -> ps ) $.
    mpd.2 $e |- ( ph -> ( ps -> ch ) ) $.
    $( A modus ponens deduction.  A translation of natural deduction rule
       ` -> ` E ( ` -> ` elimination), see ~ natded .  Deduction form of
       ~ ax-mp .  Inference associated with ~ a2i .  Commuted form of ~ mpcom .
       (Contributed by NM, 29-Dec-1992.) $)
    mpd $p |- ( ph -> ch ) $=
      ( wi a2i ax-mp ) ABFACFDABCEGH $.
  $}

  ${
    imim2i.1 $e |- ( ph -> ps ) $.
    $( Inference adding common antecedents in an implication.  Inference
       associated with ~ imim2 .  Its associated inference is ~ syl .
       (Contributed by NM, 28-Dec-1992.) $)
    imim2i $p |- ( ( ch -> ph ) -> ( ch -> ps ) ) $=
      ( wi a1i a2i ) CABABECDFG $.
  $}

  ${
    $( First of 2 premises for ~ syl . $)
    syl.1 $e |- ( ph -> ps ) $.
    $( Second of 2 premises for ~ syl . $)
    syl.2 $e |- ( ps -> ch ) $.
    $( An inference version of the transitive laws for implication ~ imim2 and
       ~ imim1 (and ~ imim1i and ~ imim2i ), which Russell and Whitehead call
       "the principle of the syllogism ... because ... the syllogism in Barbara
       is derived from [[ ~ syl ]" (quote after Theorem *2.06 of
       [WhiteheadRussell] p. 101).  Some authors call this law a "hypothetical
       syllogism".  Its associated inference is ~ mp2b .

       (A bit of trivia: this is the most commonly referenced assertion in our
       database (13449 times as of 22-Jul-2021).  In second place is ~ eqid
       (9597 times), followed by ~ adantr (8861 times), ~ syl2anc (7421 times),
       ~ adantl (6403 times), and ~ simpr (5829 times).  The Metamath program
       command 'show usage' shows the number of references.)

       (Contributed by NM, 30-Sep-1992.)  (Proof shortened by Mel L. O'Cat,
       20-Oct-2011.)  (Proof shortened by Wolf Lammen, 26-Jul-2012.) $)
    syl $p |- ( ph -> ch ) $=
      ( wi a1i mpd ) ABCDBCFAEGH $.
  $}

  ${
    3syl.1 $e |- ( ph -> ps ) $.
    3syl.2 $e |- ( ps -> ch ) $.
    3syl.3 $e |- ( ch -> th ) $.
    $( Inference chaining two syllogisms ~ syl .  Inference associated with
       ~ imim12i .  (Contributed by NM, 28-Dec-1992.) $)
    3syl $p |- ( ph -> th ) $=
      ( syl ) ACDABCEFHGH $.
  $}

  ${
    4syl.1 $e |- ( ph -> ps ) $.
    4syl.2 $e |- ( ps -> ch ) $.
    4syl.3 $e |- ( ch -> th ) $.
    4syl.4 $e |- ( th -> ta ) $.
    $( Inference chaining three syllogisms ~ syl .  (Contributed by BJ,
       14-Jul-2018.)  The use of this theorem is marked "discouraged" because
       it can cause the "MINIMIZE_WITH" command to have very long run times.
       However, feel free to use "MM-PA> MINIMIZE_WITH 4syl / OVERRIDE" if you
       wish.  Remember to update the "discouraged" file if it gets used.
       (New usage is discouraged.) $)
    4syl $p |- ( ph -> ta ) $=
      ( 3syl syl ) ADEABCDFGHJIK $.
  $}

  ${
    mpi.1 $e |- ps $.
    mpi.2 $e |- ( ph -> ( ps -> ch ) ) $.
    $( A nested modus ponens inference.  Inference associated with ~ com12 .
       (Contributed by NM, 29-Dec-1992.)  (Proof shortened by Stefan Allan,
       20-Mar-2006.) $)
    mpi $p |- ( ph -> ch ) $=
      ( a1i mpd ) ABCBADFEG $.
  $}

  ${
    mpisyl.1 $e |- ( ph -> ps ) $.
    mpisyl.2 $e |- ch $.
    mpisyl.3 $e |- ( ps -> ( ch -> th ) ) $.
    $( A syllogism combined with a modus ponens inference.  (Contributed by
       Alan Sare, 25-Jul-2011.) $)
    mpisyl $p |- ( ph -> th ) $=
      ( mpi syl ) ABDEBCDFGHI $.
  $}

  $( Principle of identity.  Theorem *2.08 of [WhiteheadRussell] p. 101.  For
     another version of the proof directly from axioms, see ~ idALT .  Its
     associated inference, ~ idi , requires no axioms for its proof, contrary
     to ~ id .  Note that the second occurrences of ` ph ` in Steps 1 and 2 may
     be simultaneously replaced by any wff ` ps ` , which may ease the
     understanding of the proof.  (Contributed by NM, 29-Dec-1992.)  (Proof
     shortened by Stefan Allan, 20-Mar-2006.) $)
  id $p |- ( ph -> ph ) $=
    ( wi ax-1 mpd ) AAABZAAACAECD $.

  $( Alternate proof of ~ id .  This version is proved directly from the axioms
     for demonstration purposes.  This proof is a popular example in the
     literature and is identical, step for step, to the proofs of Theorem 1 of
     [Margaris] p. 51, Example 2.7(a) of [Hamilton] p. 31, Lemma 10.3 of
     [BellMachover] p. 36, and Lemma 1.8 of [Mendelson] p. 36.  It is also "Our
     first proof" in Hirst and Hirst's _A Primer for Logic and Proof_ p. 17
     (PDF p. 23) at ~ http://www.appstate.edu/~~hirstjl/primer/hirst.pdf .
     Note that the second occurrences of ` ph ` in Steps 1 to 4 and the sixth
     in Step 3 may be simultaneously replaced by any wff ` ps ` , which may
     ease the understanding of the proof.  For a shorter version of the proof
     that takes advantage of previously proved theorems, see ~ id .
     (Contributed by NM, 30-Sep-1992.)  (Proof modification is discouraged.)
     Use ~ id instead.  (New usage is discouraged.) $)
  idALT $p |- ( ph -> ph ) $=
    ( wi ax-1 ax-2 ax-mp ) AAABZBZFAACAFABBGFBAFCAFADEE $.

  $( Principle of identity ~ id with antecedent.  (Contributed by NM,
     26-Nov-1995.) $)
  idd $p |- ( ph -> ( ps -> ps ) ) $=
    ( wi id a1i ) BBCABDE $.

  ${
    a1d.1 $e |- ( ph -> ps ) $.
    $( Deduction introducing an embedded antecedent.  Deduction form of ~ ax-1
       and ~ a1i .  (Contributed by NM, 5-Jan-1993.)  (Proof shortened by
       Stefan Allan, 20-Mar-2006.) $)
    a1d $p |- ( ph -> ( ch -> ps ) ) $=
      ( wi ax-1 syl ) ABCBEDBCFG $.
  $}

  ${
    2a1d.1 $e |- ( ph -> ps ) $.
    $( Deduction introducing two antecedents.  Two applications of ~ a1d .
       Deduction associated with ~ 2a1 and ~ 2a1i .  (Contributed by BJ,
       10-Aug-2020.) $)
    2a1d $p |- ( ph -> ( ch -> ( th -> ps ) ) ) $=
      ( wi a1d ) ADBFCABDEGG $.
  $}

  ${
    a1i13.1 $e |- ( ps -> th ) $.
    $( Add two antecedents to a wff.  (Contributed by Jeff Hankins,
       4-Aug-2009.) $)
    a1i13 $p |- ( ph -> ( ps -> ( ch -> th ) ) ) $=
      ( wi a1d a1i ) BCDFFABDCEGH $.
  $}

  $( A double form of ~ ax-1 .  Its associated inference is ~ 2a1i .  Its
     associated deduction is ~ 2a1d .  (Contributed by BJ, 10-Aug-2020.)
     (Proof shortened by Wolf Lammen, 1-Sep-2020.) $)
  2a1 $p |- ( ph -> ( ps -> ( ch -> ph ) ) ) $=
    ( id 2a1d ) AABCADE $.

  ${
    a2d.1 $e |- ( ph -> ( ps -> ( ch -> th ) ) ) $.
    $( Deduction distributing an embedded antecedent.  Deduction form of
       ~ ax-2 .  (Contributed by NM, 23-Jun-1994.) $)
    a2d $p |- ( ph -> ( ( ps -> ch ) -> ( ps -> th ) ) ) $=
      ( wi ax-2 syl ) ABCDFFBCFBDFFEBCDGH $.
  $}

  ${
    sylcom.1 $e |- ( ph -> ( ps -> ch ) ) $.
    sylcom.2 $e |- ( ps -> ( ch -> th ) ) $.
    $( Syllogism inference with commutation of antecedents.  (Contributed by
       NM, 29-Aug-2004.)  (Proof shortened by Mel L. O'Cat, 2-Feb-2006.)
       (Proof shortened by Stefan Allan, 23-Feb-2006.) $)
    sylcom $p |- ( ph -> ( ps -> th ) ) $=
      ( wi a2i syl ) ABCGBDGEBCDFHI $.
  $}

  ${
    syl5com.1 $e |- ( ph -> ps ) $.
    syl5com.2 $e |- ( ch -> ( ps -> th ) ) $.
    $( Syllogism inference with commuted antecedents.  (Contributed by NM,
       24-May-2005.) $)
    syl5com $p |- ( ph -> ( ch -> th ) ) $=
      ( a1d sylcom ) ACBDABCEGFH $.
  $}

  ${
    com12.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Inference that swaps (commutes) antecedents in an implication.
       Inference associated with ~ pm2.04 .  Its associated inference is
       ~ mpi .  (Contributed by NM, 29-Dec-1992.)  (Proof shortened by Wolf
       Lammen, 4-Aug-2012.) $)
    com12 $p |- ( ps -> ( ph -> ch ) ) $=
      ( id syl5com ) BBACBEDF $.
  $}

  ${
    syl11.1 $e |- ( ph -> ( ps -> ch ) ) $.
    syl11.2 $e |- ( th -> ph ) $.
    $( A syllogism inference.  Commuted form of an instance of ~ syl .
       (Contributed by BJ, 25-Oct-2021.) $)
    syl11 $p |- ( ps -> ( th -> ch ) ) $=
      ( wi syl com12 ) DBCDABCGFEHI $.
  $}

  ${
    syl5.1 $e |- ( ph -> ps ) $.
    syl5.2 $e |- ( ch -> ( ps -> th ) ) $.
    $( A syllogism rule of inference.  The first premise is used to replace the
       second antecedent of the second premise.  (Contributed by NM,
       27-Dec-1992.)  (Proof shortened by Wolf Lammen, 25-May-2013.) $)
    syl5 $p |- ( ch -> ( ph -> th ) ) $=
      ( syl5com com12 ) ACDABCDEFGH $.
  $}

  ${
    syl6.1 $e |- ( ph -> ( ps -> ch ) ) $.
    syl6.2 $e |- ( ch -> th ) $.
    $( A syllogism rule of inference.  The second premise is used to replace
       the consequent of the first premise.  (Contributed by NM, 5-Jan-1993.)
       (Proof shortened by Wolf Lammen, 30-Jul-2012.) $)
    syl6 $p |- ( ph -> ( ps -> th ) ) $=
      ( wi a1i sylcom ) ABCDECDGBFHI $.
  $}

  ${
    syl56.1 $e |- ( ph -> ps ) $.
    syl56.2 $e |- ( ch -> ( ps -> th ) ) $.
    syl56.3 $e |- ( th -> ta ) $.
    $( Combine ~ syl5 and ~ syl6 .  (Contributed by NM, 14-Nov-2013.) $)
    syl56 $p |- ( ch -> ( ph -> ta ) ) $=
      ( syl6 syl5 ) ABCEFCBDEGHIJ $.
  $}

  ${
    syl6com.1 $e |- ( ph -> ( ps -> ch ) ) $.
    syl6com.2 $e |- ( ch -> th ) $.
    $( Syllogism inference with commuted antecedents.  (Contributed by NM,
       25-May-2005.) $)
    syl6com $p |- ( ps -> ( ph -> th ) ) $=
      ( syl6 com12 ) ABDABCDEFGH $.
  $}

  ${
    mpcom.1 $e |- ( ps -> ph ) $.
    mpcom.2 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Modus ponens inference with commutation of antecedents.  Commuted form
       of ~ mpd .  (Contributed by NM, 17-Mar-1996.) $)
    mpcom $p |- ( ps -> ch ) $=
      ( com12 mpd ) BACDABCEFG $.
  $}

  ${
    syli.1 $e |- ( ps -> ( ph -> ch ) ) $.
    syli.2 $e |- ( ch -> ( ph -> th ) ) $.
    $( Syllogism inference with common nested antecedent.  (Contributed by NM,
       4-Nov-2004.) $)
    syli $p |- ( ps -> ( ph -> th ) ) $=
      ( com12 sylcom ) BACDECADFGH $.
  $}

  ${
    syl2im.1 $e |- ( ph -> ps ) $.
    syl2im.2 $e |- ( ch -> th ) $.
    syl2im.3 $e |- ( ps -> ( th -> ta ) ) $.
    $( Replace two antecedents.  Implication-only version of ~ syl2an .
       (Contributed by Wolf Lammen, 14-May-2013.) $)
    syl2im $p |- ( ph -> ( ch -> ta ) ) $=
      ( wi syl5 syl ) ABCEIFCDBEGHJK $.

    $( A commuted version of ~ syl2im .  Implication-only version of
       ~ syl2anr .  (Contributed by BJ, 20-Oct-2021.) $)
    syl2imc $p |- ( ch -> ( ph -> ta ) ) $=
      ( syl2im com12 ) ACEABCDEFGHIJ $.
  $}

  $( This theorem, sometimes called "Assertion" or "Pon" (for "ponens"), can be
     thought of as a closed form of modus ponens ~ ax-mp .  Theorem *2.27 of
     [WhiteheadRussell] p. 104.  (Contributed by NM, 15-Jul-1993.) $)
  pm2.27 $p |- ( ph -> ( ( ph -> ps ) -> ps ) ) $=
    ( wi id com12 ) ABCZABFDE $.

  ${
    mpdd.1 $e |- ( ph -> ( ps -> ch ) ) $.
    mpdd.2 $e |- ( ph -> ( ps -> ( ch -> th ) ) ) $.
    $( A nested modus ponens deduction.  Double deduction associated with
       ~ ax-mp .  Deduction associated with ~ mpd .  (Contributed by NM,
       12-Dec-2004.) $)
    mpdd $p |- ( ph -> ( ps -> th ) ) $=
      ( wi a2d mpd ) ABCGBDGEABCDFHI $.
  $}

  ${
    mpid.1 $e |- ( ph -> ch ) $.
    mpid.2 $e |- ( ph -> ( ps -> ( ch -> th ) ) ) $.
    $( A nested modus ponens deduction.  Deduction associated with ~ mpi .
       (Contributed by NM, 14-Dec-2004.) $)
    mpid $p |- ( ph -> ( ps -> th ) ) $=
      ( a1d mpdd ) ABCDACBEGFH $.
  $}

  ${
    mpdi.1 $e |- ( ps -> ch ) $.
    mpdi.2 $e |- ( ph -> ( ps -> ( ch -> th ) ) ) $.
    $( A nested modus ponens deduction.  (Contributed by NM, 16-Apr-2005.)
       (Proof shortened by Mel L. O'Cat, 15-Jan-2008.) $)
    mpdi $p |- ( ph -> ( ps -> th ) ) $=
      ( wi a1i mpdd ) ABCDBCGAEHFI $.
  $}

  ${
    mpii.1 $e |- ch $.
    mpii.2 $e |- ( ph -> ( ps -> ( ch -> th ) ) ) $.
    $( A doubly nested modus ponens inference.  (Contributed by NM,
       31-Dec-1993.)  (Proof shortened by Wolf Lammen, 31-Jul-2012.) $)
    mpii $p |- ( ph -> ( ps -> th ) ) $=
      ( a1i mpdi ) ABCDCBEGFH $.
  $}

  ${
    syld.1 $e |- ( ph -> ( ps -> ch ) ) $.
    syld.2 $e |- ( ph -> ( ch -> th ) ) $.
    $( Syllogism deduction.  Deduction associated with ~ syl .  See
       ~ conventions for the meaning of "associated deduction" or "deduction
       form".  (Contributed by NM, 5-Aug-1993.)  (Proof shortened by Mel L.
       O'Cat, 19-Feb-2008.)  (Proof shortened by Wolf Lammen, 3-Aug-2012.) $)
    syld $p |- ( ph -> ( ps -> th ) ) $=
      ( wi a1d mpdd ) ABCDEACDGBFHI $.

    $( Syllogism deduction.  Commuted form of ~ syld .  (Contributed by BJ,
       25-Oct-2021.) $)
    syldc $p |- ( ps -> ( ph -> th ) ) $=
      ( syld com12 ) ABDABCDEFGH $.
  $}

  ${
    mp2d.1 $e |- ( ph -> ps ) $.
    mp2d.2 $e |- ( ph -> ch ) $.
    mp2d.3 $e |- ( ph -> ( ps -> ( ch -> th ) ) ) $.
    $( A double modus ponens deduction.  Deduction associated with ~ mp2 .
       (Contributed by NM, 23-May-2013.)  (Proof shortened by Wolf Lammen,
       23-Jul-2013.) $)
    mp2d $p |- ( ph -> th ) $=
      ( mpid mpd ) ABDEABCDFGHI $.
  $}

  ${
    a1dd.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Double deduction introducing an antecedent.  Deduction associated with
       ~ a1d .  Double deduction associated with ~ ax-1 and ~ a1i .
       (Contributed by NM, 17-Dec-2004.)  (Proof shortened by Mel L. O'Cat,
       15-Jan-2008.) $)
    a1dd $p |- ( ph -> ( ps -> ( th -> ch ) ) ) $=
      ( wi ax-1 syl6 ) ABCDCFECDGH $.
  $}

  ${
    2a1dd.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Double deduction introducing two antecedents.  Two applications of
       ~ 2a1dd .  Deduction associated with ~ 2a1d .  Double deduction
       associated with ~ 2a1 and ~ 2a1i .  (Contributed by Jeff Hankins,
       5-Aug-2009.) $)
    2a1dd $p |- ( ph -> ( ps -> ( th -> ( ta -> ch ) ) ) ) $=
      ( wi a1dd ) ABECGDABCEFHH $.
  $}

  ${
    pm2.43i.1 $e |- ( ph -> ( ph -> ps ) ) $.
    $( Inference absorbing redundant antecedent.  Inference associated with
       ~ pm2.43 .  (Contributed by NM, 10-Jan-1993.)  (Proof shortened by Mel
       L. O'Cat, 28-Nov-2008.) $)
    pm2.43i $p |- ( ph -> ps ) $=
      ( id mpd ) AABADCE $.
  $}

  ${
    pm2.43d.1 $e |- ( ph -> ( ps -> ( ps -> ch ) ) ) $.
    $( Deduction absorbing redundant antecedent.  Deduction associated with
       ~ pm2.43 and ~ pm2.43i .  (Contributed by NM, 18-Aug-1993.)  (Proof
       shortened by Mel L. O'Cat, 28-Nov-2008.) $)
    pm2.43d $p |- ( ph -> ( ps -> ch ) ) $=
      ( id mpdi ) ABBCBEDF $.
  $}

  ${
    pm2.43a.1 $e |- ( ps -> ( ph -> ( ps -> ch ) ) ) $.
    $( Inference absorbing redundant antecedent.  (Contributed by NM,
       7-Nov-1995.)  (Proof shortened by Mel L. O'Cat, 28-Nov-2008.) $)
    pm2.43a $p |- ( ps -> ( ph -> ch ) ) $=
      ( id mpid ) BABCBEDF $.
  $}

  ${
    pm2.43b.1 $e |- ( ps -> ( ph -> ( ps -> ch ) ) ) $.
    $( Inference absorbing redundant antecedent.  (Contributed by NM,
       31-Oct-1995.) $)
    pm2.43b $p |- ( ph -> ( ps -> ch ) ) $=
      ( pm2.43a com12 ) BACABCDEF $.
  $}

  $( Absorption of redundant antecedent.  Also called the "Contraction" or
     "Hilbert" axiom.  Theorem *2.43 of [WhiteheadRussell] p. 106.
     (Contributed by NM, 10-Jan-1993.)  (Proof shortened by Mel L. O'Cat,
     15-Aug-2004.) $)
  pm2.43 $p |- ( ( ph -> ( ph -> ps ) ) -> ( ph -> ps ) ) $=
    ( wi pm2.27 a2i ) AABCBABDE $.

  ${
    imim2d.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Deduction adding nested antecedents.  Deduction associated with ~ imim2
       and ~ imim2i .  (Contributed by NM, 10-Jan-1993.) $)
    imim2d $p |- ( ph -> ( ( th -> ps ) -> ( th -> ch ) ) ) $=
      ( wi a1d a2d ) ADBCABCFDEGH $.
  $}

  $( A closed form of syllogism (see ~ syl ).  Theorem *2.05 of
     [WhiteheadRussell] p. 100.  Its associated inference is ~ imim2i .  Its
     associated deduction is ~ imim2d .  An alternate proof from more basic
     results is given by ~ ax-1 followed by ~ a2d .  (Contributed by NM,
     29-Dec-1992.)  (Proof shortened by Wolf Lammen, 6-Sep-2012.) $)
  imim2 $p |- ( ( ph -> ps ) -> ( ( ch -> ph ) -> ( ch -> ps ) ) ) $=
    ( wi id imim2d ) ABDZABCGEF $.

  ${
    embantd.1 $e |- ( ph -> ps ) $.
    embantd.2 $e |- ( ph -> ( ch -> th ) ) $.
    $( Deduction embedding an antecedent.  (Contributed by Wolf Lammen,
       4-Oct-2013.) $)
    embantd $p |- ( ph -> ( ( ps -> ch ) -> th ) ) $=
      ( wi imim2d mpid ) ABCGBDEACDBFHI $.
  $}

  ${
    3syld.1 $e |- ( ph -> ( ps -> ch ) ) $.
    3syld.2 $e |- ( ph -> ( ch -> th ) ) $.
    3syld.3 $e |- ( ph -> ( th -> ta ) ) $.
    $( Triple syllogism deduction.  Deduction associated with ~ 3syld .
       (Contributed by Jeff Hankins, 4-Aug-2009.) $)
    3syld $p |- ( ph -> ( ps -> ta ) ) $=
      ( syld ) ABDEABCDFGIHI $.
  $}

  ${
    sylsyld.1 $e |- ( ph -> ps ) $.
    sylsyld.2 $e |- ( ph -> ( ch -> th ) ) $.
    sylsyld.3 $e |- ( ps -> ( th -> ta ) ) $.
    $( A double syllogism inference.  (Contributed by Alan Sare,
       20-Apr-2011.) $)
    sylsyld $p |- ( ph -> ( ch -> ta ) ) $=
      ( wi syl syld ) ACDEGABDEIFHJK $.
  $}

  ${
    imim12i.1 $e |- ( ph -> ps ) $.
    imim12i.2 $e |- ( ch -> th ) $.
    $( Inference joining two implications.  Inference associated with
       ~ imim12 .  Its associated inference is ~ 3syl .  (Contributed by NM,
       12-Mar-1993.)  (Proof shortened by Mel L. O'Cat, 29-Oct-2011.) $)
    imim12i $p |- ( ( ps -> ch ) -> ( ph -> th ) ) $=
      ( wi imim2i syl5 ) ABBCGDECDBFHI $.
  $}

  ${
    imim1i.1 $e |- ( ph -> ps ) $.
    $( Inference adding common consequents in an implication, thereby
       interchanging the original antecedent and consequent.  Inference
       associated with ~ imim1 .  Its associated inference is ~ syl .
       (Contributed by NM, 28-Dec-1992.)  (Proof shortened by Wolf Lammen,
       4-Aug-2012.) $)
    imim1i $p |- ( ( ps -> ch ) -> ( ph -> ch ) ) $=
      ( id imim12i ) ABCCDCEF $.
  $}

  ${
    imim3i.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Inference adding three nested antecedents.  (Contributed by NM,
       19-Dec-2006.) $)
    imim3i $p |- ( ( th -> ph ) -> ( ( th -> ps ) -> ( th -> ch ) ) ) $=
      ( wi imim2i a2d ) DAFDBCABCFDEGH $.
  $}

  ${
    sylc.1 $e |- ( ph -> ps ) $.
    sylc.2 $e |- ( ph -> ch ) $.
    sylc.3 $e |- ( ps -> ( ch -> th ) ) $.
    $( A syllogism inference combined with contraction.  (Contributed by NM,
       4-May-1994.)  (Revised by NM, 13-Jul-2013.) $)
    sylc $p |- ( ph -> th ) $=
      ( syl2im pm2.43i ) ADABACDEFGHI $.
  $}

  ${
    syl3c.1 $e |- ( ph -> ps ) $.
    syl3c.2 $e |- ( ph -> ch ) $.
    syl3c.3 $e |- ( ph -> th ) $.
    syl3c.4 $e |- ( ps -> ( ch -> ( th -> ta ) ) ) $.
    $( A syllogism inference combined with contraction.  (Contributed by Alan
       Sare, 7-Jul-2011.) $)
    syl3c $p |- ( ph -> ta ) $=
      ( wi sylc mpd ) ADEHABCDEJFGIKL $.
  $}

  ${
    syl6mpi.1 $e |- ( ph -> ( ps -> ch ) ) $.
    syl6mpi.2 $e |- th $.
    syl6mpi.3 $e |- ( ch -> ( th -> ta ) ) $.
    $( A syllogism inference.  (Contributed by Alan Sare, 8-Jul-2011.)  (Proof
       shortened by Wolf Lammen, 13-Sep-2012.) $)
    syl6mpi $p |- ( ph -> ( ps -> ta ) ) $=
      ( mpi syl6 ) ABCEFCDEGHIJ $.
  $}

  ${
    mpsyl.1 $e |- ph $.
    mpsyl.2 $e |- ( ps -> ch ) $.
    mpsyl.3 $e |- ( ph -> ( ch -> th ) ) $.
    $( Modus ponens combined with a syllogism inference.  (Contributed by Alan
       Sare, 20-Apr-2011.) $)
    mpsyl $p |- ( ps -> th ) $=
      ( a1i sylc ) BACDABEHFGI $.
  $}

  ${
    mpsylsyld.1 $e |- ph $.
    mpsylsyld.2 $e |- ( ps -> ( ch -> th ) ) $.
    mpsylsyld.3 $e |- ( ph -> ( th -> ta ) ) $.
    $( Modus ponens combined with a double syllogism inference.  (Contributed
       by Alan Sare, 22-Jul-2012.) $)
    mpsylsyld $p |- ( ps -> ( ch -> ta ) ) $=
      ( a1i sylsyld ) BACDEABFIGHJ $.
  $}

  ${
    syl6c.1 $e |- ( ph -> ( ps -> ch ) ) $.
    syl6c.2 $e |- ( ph -> ( ps -> th ) ) $.
    syl6c.3 $e |- ( ch -> ( th -> ta ) ) $.
    $( Inference combining ~ syl6 with contraction.  (Contributed by Alan Sare,
       2-May-2011.) $)
    syl6c $p |- ( ph -> ( ps -> ta ) ) $=
      ( wi syl6 mpdd ) ABDEGABCDEIFHJK $.
  $}

  ${
    syl6ci.1 $e |- ( ph -> ( ps -> ch ) ) $.
    syl6ci.2 $e |- ( ph -> th ) $.
    syl6ci.3 $e |- ( ch -> ( th -> ta ) ) $.
    $( A syllogism inference combined with contraction.  (Contributed by Alan
       Sare, 18-Mar-2012.) $)
    syl6ci $p |- ( ph -> ( ps -> ta ) ) $=
      ( a1d syl6c ) ABCDEFADBGIHJ $.
  $}

  ${
    syldd.1 $e |- ( ph -> ( ps -> ( ch -> th ) ) ) $.
    syldd.2 $e |- ( ph -> ( ps -> ( th -> ta ) ) ) $.
    $( Nested syllogism deduction.  Deduction associated with ~ syld .  Double
       deduction associated with ~ syl .  (Contributed by NM, 12-Dec-2004.)
       (Proof shortened by Wolf Lammen, 11-May-2013.) $)
    syldd $p |- ( ph -> ( ps -> ( ch -> ta ) ) ) $=
      ( wi imim2 syl6c ) ABDEHCDHCEHGFDECIJ $.
  $}

  ${
    syl5d.1 $e |- ( ph -> ( ps -> ch ) ) $.
    syl5d.2 $e |- ( ph -> ( th -> ( ch -> ta ) ) ) $.
    $( A nested syllogism deduction.  Deduction associated with ~ syl5 .
       (Contributed by NM, 14-May-1993.)  (Proof shortened by Josh Purinton,
       29-Dec-2000.)  (Proof shortened by Mel L. O'Cat, 2-Feb-2006.) $)
    syl5d $p |- ( ph -> ( th -> ( ps -> ta ) ) ) $=
      ( wi a1d syldd ) ADBCEABCHDFIGJ $.
  $}

  ${
    syl7.1 $e |- ( ph -> ps ) $.
    syl7.2 $e |- ( ch -> ( th -> ( ps -> ta ) ) ) $.
    $( A syllogism rule of inference.  The first premise is used to replace the
       third antecedent of the second premise.  (Contributed by NM,
       12-Jan-1993.)  (Proof shortened by Wolf Lammen, 3-Aug-2012.) $)
    syl7 $p |- ( ch -> ( th -> ( ph -> ta ) ) ) $=
      ( wi a1i syl5d ) CABDEABHCFIGJ $.
  $}

  ${
    syl6d.1 $e |- ( ph -> ( ps -> ( ch -> th ) ) ) $.
    syl6d.2 $e |- ( ph -> ( th -> ta ) ) $.
    $( A nested syllogism deduction.  Deduction associated with ~ syl6 .
       (Contributed by NM, 11-May-1993.)  (Proof shortened by Josh Purinton,
       29-Dec-2000.)  (Proof shortened by Mel L. O'Cat, 2-Feb-2006.) $)
    syl6d $p |- ( ph -> ( ps -> ( ch -> ta ) ) ) $=
      ( wi a1d syldd ) ABCDEFADEHBGIJ $.
  $}

  ${
    syl8.1 $e |- ( ph -> ( ps -> ( ch -> th ) ) ) $.
    syl8.2 $e |- ( th -> ta ) $.
    $( A syllogism rule of inference.  The second premise is used to replace
       the consequent of the first premise.  (Contributed by NM, 1-Aug-1994.)
       (Proof shortened by Wolf Lammen, 3-Aug-2012.) $)
    syl8 $p |- ( ph -> ( ps -> ( ch -> ta ) ) ) $=
      ( wi a1i syl6d ) ABCDEFDEHAGIJ $.
  $}

  ${
    syl9.1 $e |- ( ph -> ( ps -> ch ) ) $.
    syl9.2 $e |- ( th -> ( ch -> ta ) ) $.
    $( A nested syllogism inference with different antecedents.  (Contributed
       by NM, 13-May-1993.)  (Proof shortened by Josh Purinton,
       29-Dec-2000.) $)
    syl9 $p |- ( ph -> ( th -> ( ps -> ta ) ) ) $=
      ( wi a1i syl5d ) ABCDEFDCEHHAGIJ $.
  $}

  ${
    syl9r.1 $e |- ( ph -> ( ps -> ch ) ) $.
    syl9r.2 $e |- ( th -> ( ch -> ta ) ) $.
    $( A nested syllogism inference with different antecedents.  (Contributed
       by NM, 14-May-1993.) $)
    syl9r $p |- ( th -> ( ph -> ( ps -> ta ) ) ) $=
      ( wi syl9 com12 ) ADBEHABCDEFGIJ $.
  $}

  ${
    syl10.1 $e |- ( ph -> ( ps -> ch ) ) $.
    syl10.2 $e |- ( ph -> ( ps -> ( th -> ta ) ) ) $.
    syl10.3 $e |- ( ch -> ( ta -> et ) ) $.
    $( A nested syllogism inference.  (Contributed by Alan Sare,
       17-Jul-2011.) $)
    syl10 $p |- ( ph -> ( ps -> ( th -> et ) ) ) $=
      ( wi syl6 syldd ) ABDEFHABCEFJGIKL $.
  $}

  ${
    a1ddd.1 $e |- ( ph -> ( ps -> ( ch -> ta ) ) ) $.
    $( Triple deduction introducing an antecedent to a wff.  Deduction
       associated with ~ a1dd .  Double deduction associated with ~ a1d .
       Triple deduction associated with ~ ax-1 and ~ a1i .  (Contributed by
       Jeff Hankins, 4-Aug-2009.) $)
    a1ddd $p |- ( ph -> ( ps -> ( ch -> ( th -> ta ) ) ) ) $=
      ( wi ax-1 syl8 ) ABCEDEGFEDHI $.
  $}

  ${
    imim12d.1 $e |- ( ph -> ( ps -> ch ) ) $.
    imim12d.2 $e |- ( ph -> ( th -> ta ) ) $.
    $( Deduction combining antecedents and consequents.  Deduction associated
       with ~ imim12 and ~ imim12i .  (Contributed by NM, 7-Aug-1994.)  (Proof
       shortened by Mel L. O'Cat, 30-Oct-2011.) $)
    imim12d $p |- ( ph -> ( ( ch -> th ) -> ( ps -> ta ) ) ) $=
      ( wi imim2d syl5d ) ABCCDHEFADECGIJ $.
  $}

  ${
    imim1d.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Deduction adding nested consequents.  Deduction associated with ~ imim1
       and ~ imim1i .  (Contributed by NM, 3-Apr-1994.)  (Proof shortened by
       Wolf Lammen, 12-Sep-2012.) $)
    imim1d $p |- ( ph -> ( ( ch -> th ) -> ( ps -> th ) ) ) $=
      ( idd imim12d ) ABCDDEADFG $.
  $}

  $( A closed form of syllogism (see ~ syl ).  Theorem *2.06 of
     [WhiteheadRussell] p. 100.  Its associated inference is ~ imim1i .
     (Contributed by NM, 29-Dec-1992.)  (Proof shortened by Wolf Lammen,
     25-May-2013.) $)
  imim1 $p |- ( ( ph -> ps ) -> ( ( ps -> ch ) -> ( ph -> ch ) ) ) $=
    ( wi id imim1d ) ABDZABCGEF $.

  $( Theorem *2.83 of [WhiteheadRussell] p. 108.  Closed form of ~ syld .
     (Contributed by NM, 3-Jan-2005.) $)
  pm2.83 $p |- ( ( ph -> ( ps -> ch ) )
      -> ( ( ph -> ( ch -> th ) ) -> ( ph -> ( ps -> th ) ) ) ) $=
    ( wi imim1 imim3i ) BCECDEBDEABCDFG $.

  $( Over minimal implicational calculus, Peirce's axiom ~ peirce implies an
     axiom sometimes called "Roll",
     ` ( ( ( ph -> ps ) -> ch ) -> ( ( ch -> ph ) -> ph ) ) ` , of which
     ~ looinv is a special instance.  The converse also holds: substitute
     ` ( ph -> ps ) ` for ` ch ` in Roll and use ~ id and ~ ax-mp .
     (Contributed by BJ, 15-Jun-2021.) $)
  peirceroll $p |- ( ( ( ( ph -> ps ) -> ph ) -> ph )
                   -> ( ( ( ph -> ps ) -> ch ) -> ( ( ch -> ph ) -> ph ) ) ) $=
    ( wi imim1 imim2 syl5 ) ABDZCDCADZHADZDJADIADHCAEJAIFG $.

  ${
    com3.1 $e |- ( ph -> ( ps -> ( ch -> th ) ) ) $.
    $( Commutation of antecedents.  Swap 2nd and 3rd.  Deduction associated
       with ~ com12 .  (Contributed by NM, 27-Dec-1992.)  (Proof shortened by
       Wolf Lammen, 4-Aug-2012.) $)
    com23 $p |- ( ph -> ( ch -> ( ps -> th ) ) ) $=
      ( wi pm2.27 syl9 ) ABCDFCDECDGH $.

    $( Commutation of antecedents.  Rotate right.  (Contributed by NM,
       25-Apr-1994.) $)
    com3r $p |- ( ch -> ( ph -> ( ps -> th ) ) ) $=
      ( wi com23 com12 ) ACBDFABCDEGH $.

    $( Commutation of antecedents.  Swap 1st and 3rd.  (Contributed by NM,
       25-Apr-1994.)  (Proof shortened by Wolf Lammen, 28-Jul-2012.) $)
    com13 $p |- ( ch -> ( ps -> ( ph -> th ) ) ) $=
      ( com3r com23 ) CABDABCDEFG $.

    $( Commutation of antecedents.  Rotate left.  (Contributed by NM,
       25-Apr-1994.)  (Proof shortened by Wolf Lammen, 28-Jul-2012.) $)
    com3l $p |- ( ps -> ( ch -> ( ph -> th ) ) ) $=
      ( com3r ) CABDABCDEFF $.
  $}

  $( Swap antecedents.  Theorem *2.04 of [WhiteheadRussell] p. 100.  This was
     the third axiom in Frege's logic system, specifically Proposition 8 of
     [Frege1879] p. 35.  Its associated inference is ~ com12 .  (Contributed by
     NM, 27-Dec-1992.)  (Proof shortened by Wolf Lammen, 12-Sep-2012.) $)
  pm2.04 $p |- ( ( ph -> ( ps -> ch ) ) -> ( ps -> ( ph -> ch ) ) ) $=
    ( wi id com23 ) ABCDDZABCGEF $.

  ${
    com4.1 $e |- ( ph -> ( ps -> ( ch -> ( th -> ta ) ) ) ) $.
    $( Commutation of antecedents.  Swap 3rd and 4th.  Deduction associated
       with ~ com23 .  Double deduction associated with ~ com12 .  (Contributed
       by NM, 25-Apr-1994.) $)
    com34 $p |- ( ph -> ( ps -> ( th -> ( ch -> ta ) ) ) ) $=
      ( wi pm2.04 syl6 ) ABCDEGGDCEGGFCDEHI $.

    $( Commutation of antecedents.  Rotate left.  (Contributed by NM,
       25-Apr-1994.)  (Proof shortened by Mel L. O'Cat, 15-Aug-2004.) $)
    com4l $p |- ( ps -> ( ch -> ( th -> ( ph -> ta ) ) ) ) $=
      ( wi com3l com34 ) BCADEABCDEGFHI $.

    $( Commutation of antecedents.  Rotate twice.  (Contributed by NM,
       25-Apr-1994.) $)
    com4t $p |- ( ch -> ( th -> ( ph -> ( ps -> ta ) ) ) ) $=
      ( com4l ) BCDAEABCDEFGG $.

    $( Commutation of antecedents.  Rotate right.  (Contributed by NM,
       25-Apr-1994.) $)
    com4r $p |- ( th -> ( ph -> ( ps -> ( ch -> ta ) ) ) ) $=
      ( com4t com4l ) CDABEABCDEFGH $.

    $( Commutation of antecedents.  Swap 2nd and 4th.  Deduction associated
       with ~ com13 .  (Contributed by NM, 25-Apr-1994.)  (Proof shortened by
       Wolf Lammen, 28-Jul-2012.) $)
    com24 $p |- ( ph -> ( th -> ( ch -> ( ps -> ta ) ) ) ) $=
      ( wi com4t com13 ) CDABEGABCDEFHI $.

    $( Commutation of antecedents.  Swap 1st and 4th.  (Contributed by NM,
       25-Apr-1994.)  (Proof shortened by Wolf Lammen, 28-Jul-2012.) $)
    com14 $p |- ( th -> ( ps -> ( ch -> ( ph -> ta ) ) ) ) $=
      ( wi com4l com3r ) BCDAEGABCDEFHI $.
  $}

  ${
    com5.1 $e |- ( ph -> ( ps -> ( ch -> ( th -> ( ta -> et ) ) ) ) ) $.
    $( Commutation of antecedents.  Swap 4th and 5th.  Deduction associated
       with ~ com34 .  Double deduction associated with ~ com23 .  Triple
       deduction associated with ~ com12 .  (Contributed by Jeff Hankins,
       28-Jun-2009.) $)
    com45 $p |- ( ph -> ( ps -> ( ch -> ( ta -> ( th -> et ) ) ) ) ) $=
      ( wi pm2.04 syl8 ) ABCDEFHHEDFHHGDEFIJ $.

    $( Commutation of antecedents.  Swap 3rd and 5th.  Deduction associated
       with ~ com24 .  Double deduction associated with ~ com13 .  (Contributed
       by Jeff Hankins, 28-Jun-2009.) $)
    com35 $p |- ( ph -> ( ps -> ( ta -> ( th -> ( ch -> et ) ) ) ) ) $=
      ( wi com34 com45 ) ABDECFHABDCEFABCDEFHGIJI $.

    $( Commutation of antecedents.  Swap 2nd and 5th.  Deduction associated
       with ~ com14 .  (Contributed by Jeff Hankins, 28-Jun-2009.) $)
    com25 $p |- ( ph -> ( ta -> ( ch -> ( th -> ( ps -> et ) ) ) ) ) $=
      ( wi com24 com45 ) ADCEBFHADCBEFABCDEFHGIJI $.

    $( Commutation of antecedents.  Rotate left.  (Contributed by Jeff Hankins,
       28-Jun-2009.)  (Proof shortened by Wolf Lammen, 29-Jul-2012.) $)
    com5l $p |- ( ps -> ( ch -> ( th -> ( ta -> ( ph -> et ) ) ) ) ) $=
      ( wi com4l com45 ) BCDAEFABCDEFHGIJ $.

    $( Commutation of antecedents.  Swap 1st and 5th.  (Contributed by Jeff
       Hankins, 28-Jun-2009.)  (Proof shortened by Wolf Lammen,
       29-Jul-2012.) $)
    com15 $p |- ( ta -> ( ps -> ( ch -> ( th -> ( ph -> et ) ) ) ) ) $=
      ( wi com5l com4r ) BCDEAFHABCDEFGIJ $.

    $( Commutation of antecedents.  Rotate left twice.  (Contributed by Jeff
       Hankins, 28-Jun-2009.) $)
    com52l $p |- ( ch -> ( th -> ( ta -> ( ph -> ( ps -> et ) ) ) ) ) $=
      ( com5l ) BCDEAFABCDEFGHH $.

    $( Commutation of antecedents.  Rotate right twice.  (Contributed by Jeff
       Hankins, 28-Jun-2009.) $)
    com52r $p |- ( th -> ( ta -> ( ph -> ( ps -> ( ch -> et ) ) ) ) ) $=
      ( com52l com5l ) CDEABFABCDEFGHI $.

    $( Commutation of antecedents.  Rotate right.  (Contributed by Wolf Lammen,
       29-Jul-2012.) $)
    com5r $p |- ( ta -> ( ph -> ( ps -> ( ch -> ( th -> et ) ) ) ) ) $=
      ( com52l ) CDEABFABCDEFGHH $.
  $}

  $( Closed form of ~ imim12i and of ~ 3syl .  (Contributed by BJ,
     16-Jul-2019.) $)
  imim12 $p |- ( ( ph -> ps ) ->
                      ( ( ch -> th ) -> ( ( ps -> ch ) -> ( ph -> th ) ) ) ) $=
    ( wi imim2 com13 imim2i com24 ) ABEABCEZCDEZDBJKDEEAKJBDCDBFGHI $.

  $( Elimination of a nested antecedent.  Sometimes called "Syll-Simp" since it
     is a syllogism applied to ~ ax-1 ("Simplification").  (Contributed by Wolf
     Lammen, 9-May-2013.) $)
  jarr $p |- ( ( ( ph -> ps ) -> ch ) -> ( ps -> ch ) ) $=
    ( wi ax-1 imim1i ) BABDCBAEF $.

  ${
    jarri.1 $e |- ( ( ph -> ps ) -> ch ) $.
    $( Inference associated with ~ jarr .  Partial converse of ~ ja (the other
       partial converse being ~ jarli ).  (Contributed by Wolf Lammen,
       20-Sep-2013.) $)
    jarri $p |- ( ps -> ch ) $=
      ( wi ax-1 syl ) BABECBAFDG $.
  $}

  ${
    pm2.86d.1 $e |- ( ph -> ( ( ps -> ch ) -> ( ps -> th ) ) ) $.
    $( Deduction associated with ~ pm2.86 .  (Contributed by NM, 29-Jun-1995.)
       (Proof shortened by Wolf Lammen, 3-Apr-2013.) $)
    pm2.86d $p |- ( ph -> ( ps -> ( ch -> th ) ) ) $=
      ( wi ax-1 syl5 com23 ) ACBDCBCFABDFCBGEHI $.
  $}

  $( Converse of axiom ~ ax-2 .  Theorem *2.86 of [WhiteheadRussell] p. 108.
     (Contributed by NM, 25-Apr-1994.)  (Proof shortened by Wolf Lammen,
     3-Apr-2013.) $)
  pm2.86 $p |- ( ( ( ph -> ps ) -> ( ph -> ch ) ) ->
                                                    ( ph -> ( ps -> ch ) ) ) $=
    ( wi id pm2.86d ) ABDACDDZABCGEF $.

  ${
    pm2.86i.1 $e |- ( ( ph -> ps ) -> ( ph -> ch ) ) $.
    $( Inference associated with ~ pm2.86 .  (Contributed by NM, 5-Aug-1993.)
       (Proof shortened by Wolf Lammen, 3-Apr-2013.) $)
    pm2.86i $p |- ( ph -> ( ps -> ch ) ) $=
      ( wi jarri com12 ) BACABACEDFG $.
  $}

  $( The Linearity Axiom of the infinite-valued sentential logic (L-infinity)
     of Lukasiewicz.  See ~ loowoz for an alternate axiom.  (Contributed by Mel
     L. O'Cat, 12-Aug-2004.) $)
  loolin $p |- ( ( ( ph -> ps ) -> ( ps -> ph ) ) -> ( ps -> ph ) ) $=
    ( wi jarr pm2.43d ) ABCBACZCBAABFDE $.

  $( An alternate for the Linearity Axiom of the infinite-valued sentential
     logic (L-infinity) of Lukasiewicz ~ loolin , due to Barbara Wozniakowska,
     _Reports on Mathematical Logic_ 10, 129-137 (1978).  (Contributed by Mel
     L. O'Cat, 8-Aug-2004.) $)
  loowoz $p |- ( ( ( ph -> ps ) -> ( ph -> ch ) )
      -> ( ( ps -> ph ) -> ( ps -> ch ) ) ) $=
    ( wi jarr a2d ) ABDACDZDBACABGEF $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Logical negation
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  This section makes our first use of the third axiom of propositional
  calculus, ~ ax-3 .  It introduces logical negation.

$)

  $( Alias for ~ ax-3 to be used instead of it for labeling consistency.  Its
     associated inference is ~ con4i and its associated deduction is ~ con4d .
     (Contributed by BJ, 24-Dec-2020.) $)
  con4 $p |- ( ( -. ph -> -. ps ) -> ( ps -> ph ) ) $=
    ( ax-3 ) ABC $.

  ${
    con4i.1 $e |- ( -. ph -> -. ps ) $.
    $( Inference associated with ~ con4 .  Its associated inference is ~ mt4 .

       Remark: this can also be proved using ~ notnot followed by ~ nsyl2 ,
       giving a shorter proof but depending on more axioms (namely, ~ ax-1 and
       ~ ax-2 ).  (Contributed by NM, 29-Dec-1992.) $)
    con4i $p |- ( ps -> ph ) $=
      ( wn wi con4 ax-mp ) ADBDEBAECABFG $.
  $}

  $( $j usage 'con4i' avoids 'ax-1' 'ax-2'; $)

  ${
    con4d.1 $e |- ( ph -> ( -. ps -> -. ch ) ) $.
    $( Deduction associated with ~ con4 .  (Contributed by NM, 26-Mar-1995.) $)
    con4d $p |- ( ph -> ( ch -> ps ) ) $=
      ( wn wi con4 syl ) ABECEFCBFDBCGH $.
  $}

  ${
    mt4.1 $e |- ph $.
    mt4.2 $e |- ( -. ps -> -. ph ) $.
    $( The rule of modus tollens.  Inference associated with ~ con4i .
       (Contributed by Wolf Lammen, 12-May-2013.) $)
    mt4 $p |- ps $=
      ( con4i ax-mp ) ABCBADEF $.
  $}

  ${
    pm2.21i.1 $e |- -. ph $.
    $( A contradiction implies anything.  Inference associated with ~ pm2.21 .
       Its associated inference is ~ pm2.24ii .  (Contributed by NM,
       16-Sep-1993.) $)
    pm2.21i $p |- ( ph -> ps ) $=
      ( wn a1i con4i ) BAADBDCEF $.
  $}

  ${
    pm2.24ii.1 $e |- ph $.
    pm2.24ii.2 $e |- -. ph $.
    $( A contradiction implies anything.  Inference associated with ~ pm2.21i
       and ~ pm2.24i .  (Contributed by NM, 27-Feb-2008.) $)
    pm2.24ii $p |- ps $=
      ( pm2.21i ax-mp ) ABCABDEF $.
  $}

  $( $j usage 'pm2.24ii' avoids 'ax-2'; $)

  ${
    pm2.21d.1 $e |- ( ph -> -. ps ) $.
    $( A contradiction implies anything.  Deduction associated with ~ pm2.21 .
       (Contributed by NM, 10-Feb-1996.) $)
    pm2.21d $p |- ( ph -> ( ps -> ch ) ) $=
      ( wn a1d con4d ) ACBABECEDFG $.
  $}

  ${
    pm2.21ddALT.1 $e |- ( ph -> ps ) $.
    pm2.21ddALT.2 $e |- ( ph -> -. ps ) $.
    $( Alternate proof of ~ pm2.21dd .  (Contributed by Mario Carneiro,
       9-Feb-2017.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    pm2.21ddALT $p |- ( ph -> ch ) $=
      ( pm2.21d mpd ) ABCDABCEFG $.
  $}

  $( From a wff and its negation, anything follows.  Theorem *2.21 of
     [WhiteheadRussell] p. 104.  Also called the Duns Scotus law.  Its commuted
     form is ~ pm2.24 and its associated inference is ~ pm2.21i .  (Contributed
     by NM, 29-Dec-1992.)  (Proof shortened by Wolf Lammen, 14-Sep-2012.) $)
  pm2.21 $p |- ( -. ph -> ( ph -> ps ) ) $=
    ( wn id pm2.21d ) ACZABFDE $.

  $( Theorem *2.24 of [WhiteheadRussell] p. 104.  Its associated inference is
     ~ pm2.24i .  Commuted form of ~ pm2.21 .  (Contributed by NM,
     3-Jan-2005.) $)
  pm2.24 $p |- ( ph -> ( -. ph -> ps ) ) $=
    ( wn pm2.21 com12 ) ACABABDE $.

  $( Elimination of a nested antecedent.  (Contributed by Wolf Lammen,
     10-May-2013.) $)
  jarl $p |- ( ( ( ph -> ps ) -> ch ) -> ( -. ph -> ch ) ) $=
    ( wn wi pm2.21 imim1i ) ADABECABFG $.

  ${
    jarli.1 $e |- ( ( ph -> ps ) -> ch ) $.
    $( Inference associated with ~ jarl .  Partial converse of ~ ja (the other
       partial converse being ~ jarri ).  (Contributed by Wolf Lammen,
       4-Oct-2013.) $)
    jarli $p |- ( -. ph -> ch ) $=
      ( wn wi pm2.21 syl ) AEABFCABGDH $.
  $}

  $( Clavius's law, or "consequentia mirabilis" ("admirable consequence").  If
     a formula is implied by its negation, then it is true.  Can be used in
     proofs by contradiction.  Theorem *2.18 of [WhiteheadRussell] p. 103.  See
     also the weak Clavius law ~ pm2.01 .  (Contributed by NM, 29-Dec-1992.) $)
  pm2.18 $p |- ( ( -. ph -> ph ) -> ph ) $=
    ( wn wi pm2.21 a2i con4d pm2.43i ) ABZACZAIAIHAIBZAJDEFG $.

  ${
    pm2.18i.1 $e |- ( -. ph -> ph ) $.
    $( Inference associated with the Clavius law ~ pm2.18 .  (Contributed by
       BJ, 30-Mar-2020.) $)
    pm2.18i $p |- ph $=
      ( wn wi pm2.18 ax-mp ) ACADABAEF $.
  $}

  ${
    pm2.18d.1 $e |- ( ph -> ( -. ps -> ps ) ) $.
    $( Deduction form of the Clavius law ~ pm2.18 .  (Contributed by FL,
       12-Jul-2009.)  (Proof shortened by Andrew Salmon, 7-May-2011.) $)
    pm2.18d $p |- ( ph -> ps ) $=
      ( wn wi pm2.18 syl ) ABDBEBCBFG $.
  $}

  $( Double negation elimination.  Converse of ~ notnot and one implication of
     ~ notnotb .  Theorem *2.14 of [WhiteheadRussell] p. 102.  This was the
     fifth axiom of Frege, specifically Proposition 31 of [Frege1879] p. 44.
     In classical logic (our logic) this is always true.  In intuitionistic
     logic this is not always true, and formulas for which it is true are
     called "stable".  (Contributed by NM, 29-Dec-1992.)  (Proof shortened by
     David Harvey, 5-Sep-1999.)  (Proof shortened by Josh Purinton,
     29-Dec-2000.) $)
  notnotr $p |- ( -. -. ph -> ph ) $=
    ( wn pm2.18 jarli ) ABAAACD $.

  ${
    notnotri.1 $e |- -. -. ph $.
    $( Inference associated with ~ notnotr .  For a shorter proof using
       ~ ax-2 , see ~ notnotriALT .  (Contributed by NM, 27-Feb-2008.)  (Proof
       shortened by Wolf Lammen, 15-Jul-2021.)  Remove dependency on ~ ax-2 .
       (Revised by Steven Nguyen, 27-Dec-2022.) $)
    notnotri $p |- ph $=
      ( wn pm2.21i mt4 ) ACZCZABFGCBDE $.

    $( $j usage 'notnotri' avoids 'ax-2'; $)

    $( Alternate proof of ~ notnotri .  Inference associated with ~ notnotr .

       Remark: the proof via ~ notnotr and ~ ax-mp also has three essential
       steps, but has a total number of steps equal to 8, instead of the
       present 7, because it has to construct the formula ` ph ` twice and the
       formula ` -. -. ph ` once, whereas the present proof has to construct
       the formula ` ph ` twice and the formula ` -. ph ` once, and therefore
       makes only one use of ~ wn instead of two.  This can be checked by
       running the Metamath command "MM> SHOW PROOF notnotri / NORMAL".
       (Contributed by NM, 27-Feb-2008.)  (Proof shortened by Wolf Lammen,
       15-Jul-2021.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    notnotriALT $p |- ph $=
      ( wn pm2.21i pm2.18i ) AACABDE $.
  $}

  ${
    notnotrd.1 $e |- ( ph -> -. -. ps ) $.
    $( Deduction associated with ~ notnotr and ~ notnotri .  Double negation
       elimination rule.  A translation of the natural deduction rule ` -. -. `
       C , ` _G |- -. -. ps => _G |- ps ` ; see ~ natded .  This is Definition
       NNC in [Pfenning] p. 17.  This rule is valid in classical logic (our
       logic), but not in intuitionistic logic.  (Contributed by DAW,
       8-Feb-2017.) $)
    notnotrd $p |- ( ph -> ps ) $=
      ( wn notnotr syl ) ABDDBCBEF $.
  $}

  ${
    con2d.1 $e |- ( ph -> ( ps -> -. ch ) ) $.
    $( A contraposition deduction.  (Contributed by NM, 19-Aug-1993.) $)
    con2d $p |- ( ph -> ( ch -> -. ps ) ) $=
      ( wn notnotr syl5 con4d ) ABEZCIEBACEBFDGH $.
  $}

  $( Contraposition.  Theorem *2.03 of [WhiteheadRussell] p. 100.  (Contributed
     by NM, 29-Dec-1992.)  (Proof shortened by Wolf Lammen, 12-Feb-2013.) $)
  con2 $p |- ( ( ph -> -. ps ) -> ( ps -> -. ph ) ) $=
    ( wn wi id con2d ) ABCDZABGEF $.

  ${
    mt2d.1 $e |- ( ph -> ch ) $.
    mt2d.2 $e |- ( ph -> ( ps -> -. ch ) ) $.
    $( Modus tollens deduction.  (Contributed by NM, 4-Jul-1994.) $)
    mt2d $p |- ( ph -> -. ps ) $=
      ( wn con2d mpd ) ACBFDABCEGH $.
  $}

  ${
    mt2i.1 $e |- ch $.
    mt2i.2 $e |- ( ph -> ( ps -> -. ch ) ) $.
    $( Modus tollens inference.  (Contributed by NM, 26-Mar-1995.)  (Proof
       shortened by Wolf Lammen, 15-Sep-2012.) $)
    mt2i $p |- ( ph -> -. ps ) $=
      ( a1i mt2d ) ABCCADFEG $.
  $}

  ${
    nsyl3.1 $e |- ( ph -> -. ps ) $.
    nsyl3.2 $e |- ( ch -> ps ) $.
    $( A negated syllogism inference.  (Contributed by NM, 1-Dec-1995.) $)
    nsyl3 $p |- ( ch -> -. ph ) $=
      ( wn wi a1i mt2d ) CABEABFGCDHI $.
  $}

  ${
    con2i.a $e |- ( ph -> -. ps ) $.
    $( A contraposition inference.  Its associated inference is ~ mt2 .
       (Contributed by NM, 10-Jan-1993.)  (Proof shortened by Mel L. O'Cat,
       28-Nov-2008.)  (Proof shortened by Wolf Lammen, 13-Jun-2013.) $)
    con2i $p |- ( ps -> -. ph ) $=
      ( id nsyl3 ) ABBCBDE $.
  $}

  ${
    nsyl.1 $e |- ( ph -> -. ps ) $.
    nsyl.2 $e |- ( ch -> ps ) $.
    $( A negated syllogism inference.  (Contributed by NM, 31-Dec-1993.)
       (Proof shortened by Wolf Lammen, 2-Mar-2013.) $)
    nsyl $p |- ( ph -> -. ch ) $=
      ( nsyl3 con2i ) CAABCDEFG $.
  $}

  $( Double negation introduction.  Converse of ~ notnotr and one implication
     of ~ notnotb .  Theorem *2.12 of [WhiteheadRussell] p. 101.  This was the
     sixth axiom of Frege, specifically Proposition 41 of [Frege1879] p. 47.
     (Contributed by NM, 28-Dec-1992.)  (Proof shortened by Wolf Lammen,
     2-Mar-2013.) $)
  notnot $p |- ( ph -> -. -. ph ) $=
    ( wn id con2i ) ABZAECD $.

  ${
    notnoti.1 $e |- ph $.
    $( Inference associated with ~ notnot .  (Contributed by NM,
       27-Feb-2008.) $)
    notnoti $p |- -. -. ph $=
      ( wn notnot ax-mp ) AACCBADE $.
  $}

  ${
    notnotd.1 $e |- ( ph -> ps ) $.
    $( Deduction associated with ~ notnot and ~ notnoti .  (Contributed by
       Jarvin Udandy, 2-Sep-2016.)  Avoid biconditional.  (Revised by Wolf
       Lammen, 27-Mar-2021.) $)
    notnotd $p |- ( ph -> -. -. ps ) $=
      ( wn notnot syl ) ABBDDCBEF $.
  $}

  ${
    con1d.1 $e |- ( ph -> ( -. ps -> ch ) ) $.
    $( A contraposition deduction.  (Contributed by NM, 27-Dec-1992.) $)
    con1d $p |- ( ph -> ( -. ch -> ps ) ) $=
      ( wn notnot syl6 con4d ) ABCEZABECIEDCFGH $.
  $}

  ${
    mt3d.1 $e |- ( ph -> -. ch ) $.
    mt3d.2 $e |- ( ph -> ( -. ps -> ch ) ) $.
    $( Modus tollens deduction.  (Contributed by NM, 26-Mar-1995.) $)
    mt3d $p |- ( ph -> ps ) $=
      ( wn con1d mpd ) ACFBDABCEGH $.
  $}

  ${
    mt3i.1 $e |- -. ch $.
    mt3i.2 $e |- ( ph -> ( -. ps -> ch ) ) $.
    $( Modus tollens inference.  (Contributed by NM, 26-Mar-1995.)  (Proof
       shortened by Wolf Lammen, 15-Sep-2012.) $)
    mt3i $p |- ( ph -> ps ) $=
      ( wn a1i mt3d ) ABCCFADGEH $.
  $}

  ${
    nsyl2.1 $e |- ( ph -> -. ps ) $.
    nsyl2.2 $e |- ( -. ch -> ps ) $.
    $( A negated syllogism inference.  (Contributed by NM, 26-Jun-1994.) $)
    nsyl2 $p |- ( ph -> ch ) $=
      ( wn wi a1i mt3d ) ACBDCFBGAEHI $.
  $}

  $( Contraposition.  Theorem *2.15 of [WhiteheadRussell] p. 102.  Its
     associated inference is ~ con1i .  (Contributed by NM, 29-Dec-1992.)
     (Proof shortened by Wolf Lammen, 12-Feb-2013.) $)
  con1 $p |- ( ( -. ph -> ps ) -> ( -. ps -> ph ) ) $=
    ( wn wi id con1d ) ACBDZABGEF $.

  ${
    con1i.1 $e |- ( -. ph -> ps ) $.
    $( A contraposition inference.  Inference associated with ~ con1 .  Its
       associated inference is ~ mt3 .  (Contributed by NM, 3-Jan-1993.)
       (Proof shortened by Mel L. O'Cat, 28-Nov-2008.)  (Proof shortened by
       Wolf Lammen, 19-Jun-2013.) $)
    con1i $p |- ( -. ps -> ph ) $=
      ( wn id nsyl2 ) BDZBAGECF $.
  $}

  ${
    pm2.24i.1 $e |- ph $.
    $( Inference associated with ~ pm2.24 .  Its associated inference is
       ~ pm2.24ii .  (Contributed by NM, 20-Aug-2001.) $)
    pm2.24i $p |- ( -. ph -> ps ) $=
      ( wn a1i con1i ) BAABDCEF $.
  $}

  ${
    pm2.24d.1 $e |- ( ph -> ps ) $.
    $( Deduction form of ~ pm2.24 .  (Contributed by NM, 30-Jan-2006.) $)
    pm2.24d $p |- ( ph -> ( -. ps -> ch ) ) $=
      ( wn a1d con1d ) ACBABCEDFG $.
  $}

  ${
    con3d.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( A contraposition deduction.  Deduction form of ~ con3 .  (Contributed by
       NM, 10-Jan-1993.) $)
    con3d $p |- ( ph -> ( -. ch -> -. ps ) ) $=
      ( wn notnotr syl5 con1d ) ABEZCIEBACBFDGH $.
  $}

  $( Contraposition.  Theorem *2.16 of [WhiteheadRussell] p. 103.  This was the
     fourth axiom of Frege, specifically Proposition 28 of [Frege1879] p. 43.
     Its associated inference is ~ con3i .  (Contributed by NM, 29-Dec-1992.)
     (Proof shortened by Wolf Lammen, 13-Feb-2013.) $)
  con3 $p |- ( ( ph -> ps ) -> ( -. ps -> -. ph ) ) $=
    ( wi id con3d ) ABCZABFDE $.

  ${
    con3i.a $e |- ( ph -> ps ) $.
    $( A contraposition inference.  Inference associated with ~ con3 .  Its
       associated inference is ~ mto .  (Contributed by NM, 3-Jan-1993.)
       (Proof shortened by Wolf Lammen, 20-Jun-2013.) $)
    con3i $p |- ( -. ps -> -. ph ) $=
      ( wn id nsyl ) BDZBAGECF $.
  $}

  ${
    con3rr3.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Rotate through consequent right.  (Contributed by Wolf Lammen,
       3-Nov-2013.) $)
    con3rr3 $p |- ( -. ch -> ( ph -> -. ps ) ) $=
      ( wn con3d com12 ) ACEBEABCDFG $.
  $}

  ${
    mt4d.1 $e |- ( ph -> ps ) $.
    mt4d.2 $e |- ( ph -> ( -. ch -> -. ps ) ) $.
    $( Modus tollens deduction.  Deduction form of ~ mt4 .  (Contributed by NM,
       9-Jun-2006.) $)
    mt4d $p |- ( ph -> ch ) $=
      ( con4d mpd ) ABCDACBEFG $.
  $}

  ${
    mt4i.1 $e |- ch $.
    mt4i.2 $e |- ( ph -> ( -. ps -> -. ch ) ) $.
    $( Modus tollens inference.  (Contributed by Wolf Lammen, 12-May-2013.) $)
    mt4i $p |- ( ph -> ps ) $=
      ( a1i mt4d ) ACBCADFEG $.
  $}

  ${
    nsyld.1 $e |- ( ph -> ( ps -> -. ch ) ) $.
    nsyld.2 $e |- ( ph -> ( ta -> ch ) ) $.
    $( A negated syllogism deduction.  (Contributed by NM, 9-Apr-2005.) $)
    nsyld $p |- ( ph -> ( ps -> -. ta ) ) $=
      ( wn con3d syld ) ABCGDGEADCFHI $.
  $}

  ${
    nsyli.1 $e |- ( ph -> ( ps -> ch ) ) $.
    nsyli.2 $e |- ( th -> -. ch ) $.
    $( A negated syllogism inference.  (Contributed by NM, 3-May-1994.) $)
    nsyli $p |- ( ph -> ( th -> -. ps ) ) $=
      ( wn con3d syl5 ) DCGABGFABCEHI $.
  $}

  ${
    nsyl4.1 $e |- ( ph -> ps ) $.
    nsyl4.2 $e |- ( -. ph -> ch ) $.
    $( A negated syllogism inference.  (Contributed by NM, 15-Feb-1996.) $)
    nsyl4 $p |- ( -. ch -> ps ) $=
      ( wn con1i syl ) CFABACEGDH $.
  $}

  $( Theorem *3.2 of [WhiteheadRussell] p. 111, expressed with primitive
     connectives (see ~ pm3.2 ).  (Contributed by NM, 29-Dec-1992.)  (Proof
     shortened by Josh Purinton, 29-Dec-2000.) $)
  pm3.2im $p |- ( ph -> ( ps -> -. ( ph -> -. ps ) ) ) $=
    ( wn wi pm2.27 con2d ) AABCZDBAGEF $.

  $( Theorem 8 of [Margaris] p. 60.  (Contributed by NM, 5-Aug-1993.)  (Proof
     shortened by Josh Purinton, 29-Dec-2000.) $)
  mth8 $p |- ( ph -> ( -. ps -> -. ( ph -> ps ) ) ) $=
    ( wi pm2.27 con3d ) AABCBABDE $.

  ${
    jc.1 $e |- ( ph -> ps ) $.
    jc.2 $e |- ( ph -> ch ) $.
    $( Deduction joining the consequents of two premises.  A deduction
       associated with ~ pm3.2im .  (Contributed by NM, 28-Dec-1992.) $)
    jc $p |- ( ph -> -. ( ps -> -. ch ) ) $=
      ( wn wi pm3.2im sylc ) ABCBCFGFDEBCHI $.
  $}

  ${
    impi.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( An importation inference.  (Contributed by NM, 29-Dec-1992.)  (Proof
       shortened by Wolf Lammen, 20-Jul-2013.) $)
    impi $p |- ( -. ( ph -> -. ps ) -> ch ) $=
      ( wn wi con3rr3 con1i ) CABEFABCDGH $.
  $}

  ${
    expi.1 $e |- ( -. ( ph -> -. ps ) -> ch ) $.
    $( An exportation inference.  (Contributed by NM, 29-Dec-1992.)  (Proof
       shortened by Mel L. O'Cat, 28-Nov-2008.) $)
    expi $p |- ( ph -> ( ps -> ch ) ) $=
      ( wn wi pm3.2im syl6 ) ABABEFECABGDH $.
  $}

  $( Simplification.  Similar to Theorem *3.27 (Simp) of [WhiteheadRussell]
     p. 112.  (Contributed by NM, 3-Jan-1993.)  (Proof shortened by Wolf
     Lammen, 13-Nov-2012.) $)
  simprim $p |- ( -. ( ph -> -. ps ) -> ps ) $=
    ( idd impi ) ABBABCD $.

  $( Simplification.  Similar to Theorem *3.26 (Simp) of [WhiteheadRussell]
     p. 112.  (Contributed by NM, 3-Jan-1993.)  (Proof shortened by Wolf
     Lammen, 21-Jul-2012.) $)
  simplim $p |- ( -. ( ph -> ps ) -> ph ) $=
    ( wi pm2.21 con1i ) AABCABDE $.

  $( Theorem *2.5 of [WhiteheadRussell] p. 107.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 9-Oct-2012.) $)
  pm2.5 $p |- ( -. ( ph -> ps ) -> ( -. ph -> ps ) ) $=
    ( wi wn simplim pm2.24d ) ABCDABABEF $.

  $( Theorem *2.51 of [WhiteheadRussell] p. 107.  (Contributed by NM,
     3-Jan-2005.) $)
  pm2.51 $p |- ( -. ( ph -> ps ) -> ( ph -> -. ps ) ) $=
    ( wi wn ax-1 con3i a1d ) ABCZDBDABHBAEFG $.

  $( Theorem *2.521 of [WhiteheadRussell] p. 107.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 8-Oct-2012.) $)
  pm2.521 $p |- ( -. ( ph -> ps ) -> ( ps -> ph ) ) $=
    ( wi wn simplim a1d ) ABCDABABEF $.

  $( Theorem *2.52 of [WhiteheadRussell] p. 107.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 8-Oct-2012.) $)
  pm2.52 $p |- ( -. ( ph -> ps ) -> ( -. ph -> -. ps ) ) $=
    ( wi wn pm2.521 con3d ) ABCDBAABEF $.

  $( Exportation theorem ~ ex expressed with primitive connectives.
     (Contributed by NM, 28-Dec-1992.) $)
  expt $p |- ( ( -. ( ph -> -. ps ) -> ch ) -> ( ph -> ( ps -> ch ) ) ) $=
    ( wn wi pm3.2im imim1d com12 ) AABDEDZCEBCEABICABFGH $.

  $( Importation theorem ~ imp expressed with primitive connectives.
     (Contributed by NM, 25-Apr-1994.)  (Proof shortened by Wolf Lammen,
     20-Jul-2013.) $)
  impt $p |- ( ( ph -> ( ps -> ch ) ) -> ( -. ( ph -> -. ps ) -> ch ) ) $=
    ( wi wn simprim simplim imim1i mpdi ) ABCDZDABEZDEZBCABFLAJAKGHI $.

  ${
    pm2.61d.1 $e |- ( ph -> ( ps -> ch ) ) $.
    pm2.61d.2 $e |- ( ph -> ( -. ps -> ch ) ) $.
    $( Deduction eliminating an antecedent.  (Contributed by NM, 27-Apr-1994.)
       (Proof shortened by Wolf Lammen, 12-Sep-2013.) $)
    pm2.61d $p |- ( ph -> ch ) $=
      ( wn con1d syld pm2.18d ) ACACFBCABCEGDHI $.
  $}

  ${
    pm2.61d1.1 $e |- ( ph -> ( ps -> ch ) ) $.
    pm2.61d1.2 $e |- ( -. ps -> ch ) $.
    $( Inference eliminating an antecedent.  (Contributed by NM,
       15-Jul-2005.) $)
    pm2.61d1 $p |- ( ph -> ch ) $=
      ( wn wi a1i pm2.61d ) ABCDBFCGAEHI $.
  $}

  ${
    pm2.61d2.1 $e |- ( ph -> ( -. ps -> ch ) ) $.
    pm2.61d2.2 $e |- ( ps -> ch ) $.
    $( Inference eliminating an antecedent.  (Contributed by NM,
       18-Aug-1993.) $)
    pm2.61d2 $p |- ( ph -> ch ) $=
      ( wi a1i pm2.61d ) ABCBCFAEGDH $.
  $}

  ${
    ja.1 $e |- ( -. ph -> ch ) $.
    ja.2 $e |- ( ps -> ch ) $.
    $( Inference joining the antecedents of two premises.  For partial
       converses, see ~ jarri and ~ jarli .  (Contributed by NM, 24-Jan-1993.)
       (Proof shortened by Mel L. O'Cat, 19-Feb-2008.) $)
    ja $p |- ( ( ph -> ps ) -> ch ) $=
      ( wi imim2i pm2.61d1 ) ABFACBCAEGDH $.
  $}

  ${
    jad.1 $e |- ( ph -> ( -. ps -> th ) ) $.
    jad.2 $e |- ( ph -> ( ch -> th ) ) $.
    $( Deduction form of ~ ja .  (Contributed by Scott Fenton, 13-Dec-2010.)
       (Proof shortened by Andrew Salmon, 17-Sep-2011.) $)
    jad $p |- ( ph -> ( ( ps -> ch ) -> th ) ) $=
      ( wi wn com12 ja ) BCGADBCADGABHDEIACDFIJI $.
  $}

  ${
    pm2.61i.1 $e |- ( ph -> ps ) $.
    pm2.61i.2 $e |- ( -. ph -> ps ) $.
    $( Inference eliminating an antecedent.  (Contributed by NM, 5-Apr-1994.)
       (Proof shortened by Wolf Lammen, 12-Sep-2013.) $)
    pm2.61i $p |- ps $=
      ( wi id ja ax-mp ) AAEBAFAABDCGH $.
  $}

  ${
    pm2.61ii.1 $e |- ( -. ph -> ( -. ps -> ch ) ) $.
    pm2.61ii.2 $e |- ( ph -> ch ) $.
    pm2.61ii.3 $e |- ( ps -> ch ) $.
    $( Inference eliminating two antecedents.  (Contributed by NM, 4-Jan-1993.)
       (Proof shortened by Josh Purinton, 29-Dec-2000.) $)
    pm2.61ii $p |- ch $=
      ( wn pm2.61d2 pm2.61i ) ACEAGBCDFHI $.
  $}

  ${
    pm2.61nii.1 $e |- ( ph -> ( ps -> ch ) ) $.
    pm2.61nii.2 $e |- ( -. ph -> ch ) $.
    pm2.61nii.3 $e |- ( -. ps -> ch ) $.
    $( Inference eliminating two antecedents.  (Contributed by NM,
       13-Jul-2005.)  (Proof shortened by Andrew Salmon, 25-May-2011.)  (Proof
       shortened by Wolf Lammen, 13-Nov-2012.) $)
    pm2.61nii $p |- ch $=
      ( pm2.61d1 pm2.61i ) ACABCDFGEH $.
  $}

  ${
    pm2.61iii.1 $e |- ( -. ph -> ( -. ps -> ( -. ch -> th ) ) ) $.
    pm2.61iii.2 $e |- ( ph -> th ) $.
    pm2.61iii.3 $e |- ( ps -> th ) $.
    pm2.61iii.4 $e |- ( ch -> th ) $.
    $( Inference eliminating three antecedents.  (Contributed by NM,
       2-Jan-2002.)  (Proof shortened by Wolf Lammen, 22-Sep-2013.) $)
    pm2.61iii $p |- th $=
      ( wn wi a1d pm2.61ii pm2.61i ) CDHABCIZDJEADNFKBDNGKLM $.
  $}

  $( Weak Clavius law.  If a formula implies its negation, then it is false.  A
     form of "reductio ad absurdum", which can be used in proofs by
     contradiction.  Theorem *2.01 of [WhiteheadRussell] p. 100.  Provable in
     minimal calculus, contrary to the Clavius law ~ pm2.18 .  (Contributed by
     NM, 18-Aug-1993.)  (Proof shortened by Mel L. O'Cat, 21-Nov-2008.)  (Proof
     shortened by Wolf Lammen, 31-Oct-2012.) $)
  pm2.01 $p |- ( ( ph -> -. ph ) -> -. ph ) $=
    ( wn id ja ) AABZEECZFD $.

  ${
    pm2.01d.1 $e |- ( ph -> ( ps -> -. ps ) ) $.
    $( Deduction based on reductio ad absurdum.  (Contributed by NM,
       18-Aug-1993.)  (Proof shortened by Wolf Lammen, 5-Mar-2013.) $)
    pm2.01d $p |- ( ph -> -. ps ) $=
      ( wn id pm2.61d1 ) ABBDZCGEF $.
  $}

  $( Theorem *2.6 of [WhiteheadRussell] p. 107.  (Contributed by NM,
     3-Jan-2005.) $)
  pm2.6 $p |- ( ( -. ph -> ps ) -> ( ( ph -> ps ) -> ps ) ) $=
    ( wn wi id idd jad ) ACBDZABBHEHBFG $.

  $( Theorem *2.61 of [WhiteheadRussell] p. 107.  Useful for eliminating an
     antecedent.  (Contributed by NM, 4-Jan-1993.)  (Proof shortened by Wolf
     Lammen, 22-Sep-2013.) $)
  pm2.61 $p |- ( ( ph -> ps ) -> ( ( -. ph -> ps ) -> ps ) ) $=
    ( wn wi pm2.6 com12 ) ACBDABDBABEF $.

  $( Theorem *2.65 of [WhiteheadRussell] p. 107.  Proof by contradiction.
     (Contributed by NM, 21-Jun-1993.)  (Proof shortened by Wolf Lammen,
     8-Mar-2013.) $)
  pm2.65 $p |- ( ( ph -> ps ) -> ( ( ph -> -. ps ) -> -. ph ) ) $=
    ( wi wn idd con3 jad ) ABCZABDADZHIEABFG $.

  ${
    pm2.65i.1 $e |- ( ph -> ps ) $.
    pm2.65i.2 $e |- ( ph -> -. ps ) $.
    $( Inference for proof by contradiction.  (Contributed by NM, 18-May-1994.)
       (Proof shortened by Wolf Lammen, 11-Sep-2013.) $)
    pm2.65i $p |- -. ph $=
      ( wn con2i con3i pm2.61i ) BAEABDFABCGH $.
  $}

  ${
    pm2.21dd.1 $e |- ( ph -> ps ) $.
    pm2.21dd.2 $e |- ( ph -> -. ps ) $.
    $( A contradiction implies anything.  Deduction from ~ pm2.21 .
       (Contributed by Mario Carneiro, 9-Feb-2017.)  (Proof shortened by Wolf
       Lammen, 22-Jul-2019.) $)
    pm2.21dd $p |- ( ph -> ch ) $=
      ( pm2.65i pm2.21i ) ACABDEFG $.
  $}

  ${
    pm2.65d.1 $e |- ( ph -> ( ps -> ch ) ) $.
    pm2.65d.2 $e |- ( ph -> ( ps -> -. ch ) ) $.
    $( Deduction for proof by contradiction.  (Contributed by NM, 26-Jun-1994.)
       (Proof shortened by Wolf Lammen, 26-May-2013.) $)
    pm2.65d $p |- ( ph -> -. ps ) $=
      ( nsyld pm2.01d ) ABABCBEDFG $.
  $}

  ${
    mto.1 $e |- -. ps $.
    mto.2 $e |- ( ph -> ps ) $.
    $( The rule of modus tollens.  The rule says, "if ` ps ` is not true, and
       ` ph ` implies ` ps ` , then ` ph ` must also be not true".  Modus
       tollens is short for "modus tollendo tollens", a Latin phrase that means
       "the mode that by denying denies" - remark in [Sanford] p. 39.  It is
       also called denying the consequent.  Modus tollens is closely related to
       modus ponens ~ ax-mp .  Note that this rule is also valid in
       intuitionistic logic.  Inference associated with ~ con3i .  (Contributed
       by NM, 19-Aug-1993.)  (Proof shortened by Wolf Lammen, 11-Sep-2013.) $)
    mto $p |- -. ph $=
      ( wn a1i pm2.65i ) ABDBEACFG $.
  $}

  ${
    mtod.1 $e |- ( ph -> -. ch ) $.
    mtod.2 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Modus tollens deduction.  (Contributed by NM, 3-Apr-1994.)  (Proof
       shortened by Wolf Lammen, 11-Sep-2013.) $)
    mtod $p |- ( ph -> -. ps ) $=
      ( wn a1d pm2.65d ) ABCEACFBDGH $.
  $}

  ${
    mtoi.1 $e |- -. ch $.
    mtoi.2 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Modus tollens inference.  (Contributed by NM, 5-Jul-1994.)  (Proof
       shortened by Wolf Lammen, 15-Sep-2012.) $)
    mtoi $p |- ( ph -> -. ps ) $=
      ( wn a1i mtod ) ABCCFADGEH $.
  $}

  ${
    mt2.1 $e |- ps $.
    mt2.2 $e |- ( ph -> -. ps ) $.
    $( A rule similar to modus tollens.  Inference associated with ~ con2i .
       (Contributed by NM, 19-Aug-1993.)  (Proof shortened by Wolf Lammen,
       10-Sep-2013.) $)
    mt2 $p |- -. ph $=
      ( a1i pm2.65i ) ABBACEDF $.
  $}

  ${
    mt3.1 $e |- -. ps $.
    mt3.2 $e |- ( -. ph -> ps ) $.
    $( A rule similar to modus tollens.  Inference associated with ~ con1i .
       (Contributed by NM, 18-May-1994.)  (Proof shortened by Wolf Lammen,
       11-Sep-2013.) $)
    mt3 $p |- ph $=
      ( wn mto notnotri ) AAEBCDFG $.
  $}

  $( Peirce's axiom.  A non-intuitionistic implication-only statement.  Added
     to intuitionistic (implicational) propositional calculus, it gives
     classical (implicational) propositional calculus.  For another
     non-intuitionistic positive statement, see ~ curryax .  (Contributed by
     NM, 29-Dec-1992.)  (Proof shortened by Wolf Lammen, 9-Oct-2012.) $)
  peirce $p |- ( ( ( ph -> ps ) -> ph ) -> ph ) $=
    ( wi simplim id ja ) ABCAAABDAEF $.

  $( The Inversion Axiom of the infinite-valued sentential logic (L-infinity)
     of Lukasiewicz.  Using ~ dfor2 , we can see that this essentially
     expresses "disjunction commutes".  Theorem *2.69 of [WhiteheadRussell]
     p. 108.  It is a special instance of the axiom "Roll", see ~ peirceroll .
     (Contributed by NM, 12-Aug-2004.) $)
  looinv $p |- ( ( ( ph -> ps ) -> ps ) -> ( ( ps -> ph ) -> ph ) ) $=
    ( wi imim1 peirce syl6 ) ABCZBCBACGACAGBADABEF $.

  $( A self-implication (see ~ id ) does not imply its own negation.  The
     justification theorem ~ bijust is one of its instances.  (Contributed by
     NM, 11-May-1999.)  (Proof shortened by Josh Purinton, 29-Dec-2000.)
     Extract ~ bijust0 from proof of ~ bijust .  (Revised by BJ,
     19-Mar-2020.) $)
  bijust0 $p |- -. ( ( ph -> ph ) -> -. ( ph -> ph ) ) $=
    ( wi wn id pm2.01 mt2 ) AABZGCBGADGEF $.

  $( Theorem used to justify the definition of the biconditional ~ df-bi .
     Instance of ~ bijust0 .  (Contributed by NM, 11-May-1999.) $)
  bijust $p |- -. ( ( -. ( ( ph -> ps ) -> -. ( ps -> ph ) )
                   -> -. ( ( ph -> ps ) -> -. ( ps -> ph ) ) )
              -> -. ( -. ( ( ph -> ps ) -> -. ( ps -> ph ) )
                   -> -. ( ( ph -> ps ) -> -. ( ps -> ph ) ) ) ) $=
    ( wi wn bijust0 ) ABCBACDCDE $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Logical equivalence
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  The definition ~ df-bi in this section is our first definition, which
  introduces and defines the biconditional connective ` <-> ` used to denote
  logical equivalence.  We define a wff of the form ` ( ph <-> ps ) ` as an
  abbreviation for ` -. ( ( ph -> ps ) -> -. ( ps -> ph ) ) ` .

  Unlike most traditional developments, we have chosen not to have a separate
  symbol such as "Df." to mean "is defined as".  Instead, we will later use the
  biconditional connective for this purpose ( ~ df-an is its first use), as it
  allows us to use logic to manipulate definitions directly.  This greatly
  simplifies many proofs since it eliminates the need for a separate mechanism
  for introducing and eliminating definitions.

  A note on definitions: definitions are required to be eliminable (that is, a
  theorem stated in terms of the defined symbol can also be stated without it)
  and conservative (that is, a theorem whose statement does not contain the
  defined symbol can be proved without using that definition).  This means that
  a definition does not increase the expressive power nor the deductive power,
  respectively, of a theory.  On the other hand, definitions are often useful
  to write shorter proofs, so in (i)set.mm we will generally not try to avoid
  them.  This is why, for instance, some theorems which do not contain
  disjunction in their statement are placed after the section on disjunction
  because a shorter proof using disjunction is possible.

$)

  $( Declare the biconditional connective. $)
  $c <-> $.  $( Bidirectional arrow (read:  "if and only if" or
                "is logically equivalent to") $)

  $( Extend wff definition to include the biconditional connective. $)
  wb $a wff ( ph <-> ps ) $.

  $( Define the biconditional (logical "iff" or "if and only if").

     The definition ~ df-bi in this section is our first definition, which
     introduces and defines the biconditional connective ` <-> ` .  We define a
     wff of the form ` ( ph <-> ps ) ` as an abbreviation for
     ` -. ( ( ph -> ps ) -> -. ( ps -> ph ) ) ` .

     Unlike most traditional developments, we have chosen not to have a
     separate symbol such as "Df." to mean "is defined as".  Instead, we will
     later use the biconditional connective for this purpose ( ~ df-or is its
     first use), as it allows us to use logic to manipulate definitions
     directly.  This greatly simplifies many proofs since it eliminates the
     need for a separate mechanism for introducing and eliminating definitions.
     Of course, we cannot use this mechanism to define the biconditional
     itself, since it hasn't been introduced yet.  Instead, we use a more
     general form of definition, described as follows.

     In its most general form, a definition is simply an assertion that
     introduces a new symbol (or a new combination of existing symbols, as in
     ~ df-3an ) that is eliminable and does not strengthen the existing
     language.  The latter requirement means that the set of provable
     statements not containing the new symbol (or new combination) should
     remain exactly the same after the definition is introduced.  Our
     definition of the biconditional may look unusual compared to most
     definitions, but it strictly satisfies these requirements.

     The justification for our definition is that if we mechanically replace
     ` ( ph <-> ps ) ` (the definiendum i.e. the thing being defined) with
     ` -. ( ( ph -> ps ) -> -. ( ps -> ph ) ) ` (the definiens i.e. the
     defining expression) in the definition, the definition becomes the
     previously proved theorem ~ bijust .  It is impossible to use ~ df-bi to
     prove any statement expressed in the original language that can't be
     proved from the original axioms, because if we simply replace each
     instance of ~ df-bi in the proof with the corresponding ~ bijust instance,
     we will end up with a proof from the original axioms.

     Note that from Metamath's point of view, a definition is just another
     axiom - i.e. an assertion we claim to be true - but from our high level
     point of view, we are not strengthening the language.  To indicate this
     fact, we prefix definition labels with "df-" instead of "ax-".  (This
     prefixing is an informal convention that means nothing to the Metamath
     proof verifier; it is just a naming convention for human readability.)

     After we define the constant true ` T. ` ( ~ df-tru ) and the constant
     false ` F. ` ( ~ df-fal ), we will be able to prove these truth table
     values: ` ( ( T. <-> T. ) <-> T. ) ` ( ~ trubitru ),
     ` ( ( T. <-> F. ) <-> F. ) ` ( ~ trubifal ), ` ( ( F. <-> T. ) <-> F. ) `
     ( ~ falbitru ), and ` ( ( F. <-> F. ) <-> T. ) ` ( ~ falbifal ).

     See ~ dfbi1 , ~ dfbi2 , and ~ dfbi3 for theorems suggesting typical
     textbook definitions of ` <-> ` , showing that our definition has the
     properties we expect.  Theorem ~ dfbi1 is particularly useful if we want
     to eliminate ` <-> ` from an expression to convert it to primitives.
     Theorem ~ dfbi shows this definition rewritten in an abbreviated form
     after conjunction is introduced, for easier understanding.

     Contrast with ` \/ ` ( ~ df-or ), ` -> ` ( ~ wi ), ` -/\ ` ( ~ df-nan ),
     and ` \/_ ` ( ~ df-xor ).  In some sense ` <-> ` returns true if two truth
     values are equal; ` = ` ( ~ df-cleq ) returns true if two classes are
     equal.  (Contributed by NM, 27-Dec-1992.) $)
  df-bi $a |- -. ( ( ( ph <-> ps ) -> -. ( ( ph -> ps ) -> -. ( ps -> ph ) ) )
        -> -. ( -. ( ( ph -> ps ) -> -. ( ps -> ph ) ) -> ( ph <-> ps ) ) ) $.

  $( $j justification 'bijust' for 'df-bi'; $)

  $( Property of the biconditional connective.  (Contributed by NM,
     11-May-1999.) $)
  impbi $p |- ( ( ph -> ps ) -> ( ( ps -> ph ) -> ( ph <-> ps ) ) ) $=
    ( wi wb wn df-bi simprim ax-mp expi ) ABCZBACZABDZLJKECEZCZMLCZECEOABFNOGHI
    $.

  ${
    impbii.1 $e |- ( ph -> ps ) $.
    impbii.2 $e |- ( ps -> ph ) $.
    $( Infer an equivalence from an implication and its converse.  Inference
       associated with ~ impbi .  (Contributed by NM, 29-Dec-1992.) $)
    impbii $p |- ( ph <-> ps ) $=
      ( wi wb impbi mp2 ) ABEBAEABFCDABGH $.
  $}

  ${
    impbidd.1 $e |- ( ph -> ( ps -> ( ch -> th ) ) ) $.
    impbidd.2 $e |- ( ph -> ( ps -> ( th -> ch ) ) ) $.
    $( Deduce an equivalence from two implications.  Double deduction
       associated with ~ impbi and ~ impbii .  Deduction associated with
       ~ impbid .  (Contributed by Rodolfo Medina, 12-Oct-2010.) $)
    impbidd $p |- ( ph -> ( ps -> ( ch <-> th ) ) ) $=
      ( wi wb impbi syl6c ) ABCDGDCGCDHEFCDIJ $.
  $}

  ${
    impbid21d.1 $e |- ( ps -> ( ch -> th ) ) $.
    impbid21d.2 $e |- ( ph -> ( th -> ch ) ) $.
    $( Deduce an equivalence from two implications.  (Contributed by Wolf
       Lammen, 12-May-2013.) $)
    impbid21d $p |- ( ph -> ( ps -> ( ch <-> th ) ) ) $=
      ( wi a1i a1d impbidd ) ABCDBCDGGAEHADCGBFIJ $.
  $}

  ${
    impbid.1 $e |- ( ph -> ( ps -> ch ) ) $.
    impbid.2 $e |- ( ph -> ( ch -> ps ) ) $.
    $( Deduce an equivalence from two implications.  Deduction associated with
       ~ impbi and ~ impbii .  (Contributed by NM, 24-Jan-1993.)  Revised to
       prove it from ~ impbid21d .  (Revised by Wolf Lammen, 3-Nov-2012.) $)
    impbid $p |- ( ph -> ( ps <-> ch ) ) $=
      ( wb impbid21d pm2.43i ) ABCFAABCDEGH $.
  $}

  $( Relate the biconditional connective to primitive connectives.  See
     ~ dfbi1ALT for an unusual version proved directly from axioms.
     (Contributed by NM, 29-Dec-1992.) $)
  dfbi1 $p |- ( ( ph <-> ps ) <-> -. ( ( ph -> ps ) -> -. ( ps -> ph ) ) ) $=
    ( wb wi wn df-bi simplim ax-mp impbi impi impbii ) ABCZABDZBADZEDEZLODZOLDE
    ZDEPABFPQGHMNLABIJK $.

  $( Alternate proof of ~ dfbi1 .  This proof, discovered by Gregory Bush on
     8-Mar-2004, has several curious properties.  First, it has only 17 steps
     directly from the axioms and ~ df-bi , compared to over 800 steps were the
     proof of ~ dfbi1 expanded into axioms.  Second, step 2 demands only the
     property of "true"; any axiom (or theorem) could be used.  It might be
     thought, therefore, that it is in some sense redundant, but in fact no
     proof is shorter than this (measured by number of steps).  Third, it
     illustrates how intermediate steps can "blow up" in size even in short
     proofs.  Fourth, the compressed proof is only 182 bytes (or 17 bytes in
     D-proof notation), but the generated web page is over 200kB with
     intermediate steps that are essentially incomprehensible to humans (other
     than Gregory Bush).  If there were an obfuscated code contest for proofs,
     this would be a contender.  This "blowing up" and incomprehensibility of
     the intermediate steps vividly demonstrate the advantages of using many
     layered intermediate theorems, since each theorem is easier to understand.
     (Contributed by Gregory Bush, 10-Mar-2004.)  (New usage is discouraged.)
     (Proof modification is discouraged.) $)
  dfbi1ALT $p |-
                ( ( ph <-> ps ) <-> -. ( ( ph -> ps ) -> -. ( ps -> ph ) ) ) $=
    ( wch wth wb wi wn df-bi ax-1 ax-mp ax-3 ax-2 ) ABEZABFBAFGFGZFNMFGFGZMNEZA
    BHCDCFFZOPFZCDIRGZQGZFZQRFSPOFZSFZFZUASUBISUCTFZFZUDUAFUEUFTGZUCGZFZUEUHUIM
    NHUHUGIJTUCKJUESIJSUCTLJJRQKJJJ $.

  $( Property of the biconditional connective.  (Contributed by NM,
     11-May-1999.) $)
  biimp $p |- ( ( ph <-> ps ) -> ( ph -> ps ) ) $=
    ( wb wi wn df-bi simplim ax-mp syl ) ABCZABDZBADEZDEZKJMDZMJDEZDENABFNOGHKL
    GI $.

  ${
    biimpi.1 $e |- ( ph <-> ps ) $.
    $( Infer an implication from a logical equivalence.  Inference associated
       with ~ biimp .  (Contributed by NM, 29-Dec-1992.) $)
    biimpi $p |- ( ph -> ps ) $=
      ( wb wi biimp ax-mp ) ABDABECABFG $.
  $}

  ${
    sylbi.1 $e |- ( ph <-> ps ) $.
    sylbi.2 $e |- ( ps -> ch ) $.
    $( A mixed syllogism inference from a biconditional and an implication.
       Useful for substituting an antecedent with a definition.  (Contributed
       by NM, 3-Jan-1993.) $)
    sylbi $p |- ( ph -> ch ) $=
      ( biimpi syl ) ABCABDFEG $.
  $}

  ${
    sylib.1 $e |- ( ph -> ps ) $.
    sylib.2 $e |- ( ps <-> ch ) $.
    $( A mixed syllogism inference from an implication and a biconditional.
       (Contributed by NM, 3-Jan-1993.) $)
    sylib $p |- ( ph -> ch ) $=
      ( biimpi syl ) ABCDBCEFG $.
  $}

  ${
    sylbb.1 $e |- ( ph <-> ps ) $.
    sylbb.2 $e |- ( ps <-> ch ) $.
    $( A mixed syllogism inference from two biconditionals.  (Contributed by
       BJ, 30-Mar-2019.) $)
    sylbb $p |- ( ph -> ch ) $=
      ( biimpi sylbi ) ABCDBCEFG $.
  $}

  $( Property of the biconditional connective.  (Contributed by NM,
     11-May-1999.)  (Proof shortened by Wolf Lammen, 11-Nov-2012.) $)
  biimpr $p |- ( ( ph <-> ps ) -> ( ps -> ph ) ) $=
    ( wb wi wn dfbi1 simprim sylbi ) ABCABDZBADZEDEJABFIJGH $.

  $( Commutative law for the biconditional.  (Contributed by Wolf Lammen,
     10-Nov-2012.) $)
  bicom1 $p |- ( ( ph <-> ps ) -> ( ps <-> ph ) ) $=
    ( wb biimpr biimp impbid ) ABCBAABDABEF $.

  $( Commutative law for the biconditional.  Theorem *4.21 of
     [WhiteheadRussell] p. 117.  (Contributed by NM, 11-May-1993.) $)
  bicom $p |- ( ( ph <-> ps ) <-> ( ps <-> ph ) ) $=
    ( wb bicom1 impbii ) ABCBACABDBADE $.

  ${
    bicomd.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Commute two sides of a biconditional in a deduction.  (Contributed by
       NM, 14-May-1993.) $)
    bicomd $p |- ( ph -> ( ch <-> ps ) ) $=
      ( wb bicom sylib ) ABCECBEDBCFG $.
  $}

  ${
    bicomi.1 $e |- ( ph <-> ps ) $.
    $( Inference from commutative law for logical equivalence.  (Contributed by
       NM, 3-Jan-1993.) $)
    bicomi $p |- ( ps <-> ph ) $=
      ( wb bicom1 ax-mp ) ABDBADCABEF $.
  $}

  ${
    impbid1.1 $e |- ( ph -> ( ps -> ch ) ) $.
    impbid1.2 $e |- ( ch -> ps ) $.
    $( Infer an equivalence from two implications.  (Contributed by NM,
       6-Mar-2007.) $)
    impbid1 $p |- ( ph -> ( ps <-> ch ) ) $=
      ( wi a1i impbid ) ABCDCBFAEGH $.
  $}

  ${
    impbid2.1 $e |- ( ps -> ch ) $.
    impbid2.2 $e |- ( ph -> ( ch -> ps ) ) $.
    $( Infer an equivalence from two implications.  (Contributed by NM,
       6-Mar-2007.)  (Proof shortened by Wolf Lammen, 27-Sep-2013.) $)
    impbid2 $p |- ( ph -> ( ps <-> ch ) ) $=
      ( impbid1 bicomd ) ACBACBEDFG $.
  $}

  ${
    impcon4bid.1 $e |- ( ph -> ( ps -> ch ) ) $.
    impcon4bid.2 $e |- ( ph -> ( -. ps -> -. ch ) ) $.
    $( A variation on ~ impbid with contraposition.  (Contributed by Jeff
       Hankins, 3-Jul-2009.) $)
    impcon4bid $p |- ( ph -> ( ps <-> ch ) ) $=
      ( con4d impbid ) ABCDABCEFG $.
  $}

  ${
    biimpri.1 $e |- ( ph <-> ps ) $.
    $( Infer a converse implication from a logical equivalence.  Inference
       associated with ~ biimpr .  (Contributed by NM, 29-Dec-1992.)  (Proof
       shortened by Wolf Lammen, 16-Sep-2013.) $)
    biimpri $p |- ( ps -> ph ) $=
      ( bicomi biimpi ) BAABCDE $.
  $}

  ${
    biimpd.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Deduce an implication from a logical equivalence.  Deduction associated
       with ~ biimp and ~ biimpi .  (Contributed by NM, 11-Jan-1993.) $)
    biimpd $p |- ( ph -> ( ps -> ch ) ) $=
      ( wb wi biimp syl ) ABCEBCFDBCGH $.
  $}

  ${
    mpbi.min $e |- ph $.
    mpbi.maj $e |- ( ph <-> ps ) $.
    $( An inference from a biconditional, related to modus ponens.
       (Contributed by NM, 11-May-1993.) $)
    mpbi $p |- ps $=
      ( biimpi ax-mp ) ABCABDEF $.
  $}

  ${
    mpbir.min $e |- ps $.
    mpbir.maj $e |- ( ph <-> ps ) $.
    $( An inference from a biconditional, related to modus ponens.
       (Contributed by NM, 28-Dec-1992.) $)
    mpbir $p |- ph $=
      ( biimpri ax-mp ) BACABDEF $.
  $}

  ${
    mpbid.min $e |- ( ph -> ps ) $.
    mpbid.maj $e |- ( ph -> ( ps <-> ch ) ) $.
    $( A deduction from a biconditional, related to modus ponens.  (Contributed
       by NM, 21-Jun-1993.) $)
    mpbid $p |- ( ph -> ch ) $=
      ( biimpd mpd ) ABCDABCEFG $.
  $}

  ${
    mpbii.min $e |- ps $.
    mpbii.maj $e |- ( ph -> ( ps <-> ch ) ) $.
    $( An inference from a nested biconditional, related to modus ponens.
       (Contributed by NM, 16-May-1993.)  (Proof shortened by Wolf Lammen,
       25-Oct-2012.) $)
    mpbii $p |- ( ph -> ch ) $=
      ( a1i mpbid ) ABCBADFEG $.
  $}

  ${
    sylibr.1 $e |- ( ph -> ps ) $.
    sylibr.2 $e |- ( ch <-> ps ) $.
    $( A mixed syllogism inference from an implication and a biconditional.
       Useful for substituting a consequent with a definition.  (Contributed by
       NM, 3-Jan-1993.) $)
    sylibr $p |- ( ph -> ch ) $=
      ( biimpri syl ) ABCDCBEFG $.
  $}

  ${
    sylbir.1 $e |- ( ps <-> ph ) $.
    sylbir.2 $e |- ( ps -> ch ) $.
    $( A mixed syllogism inference from a biconditional and an implication.
       (Contributed by NM, 3-Jan-1993.) $)
    sylbir $p |- ( ph -> ch ) $=
      ( biimpri syl ) ABCBADFEG $.
  $}

  ${
    sylbbr.1 $e |- ( ph <-> ps ) $.
    sylbbr.2 $e |- ( ps <-> ch ) $.
    $( A mixed syllogism inference from two biconditionals.

       Note on the various syllogism-like statements in set.mm.  The
       hypothetical syllogism ~ syl infers an implication from two implications
       (and there are ~ 3syl and ~ 4syl for chaining more inferences).  There
       are four inferences inferring an implication from one implication and
       one biconditional: ~ sylbi , ~ sylib , ~ sylbir , ~ sylibr ; four
       inferences inferring an implication from two biconditionals: ~ sylbb ,
       ~ sylbbr , ~ sylbb1 , ~ sylbb2 ; four inferences inferring a
       biconditional from two biconditionals: ~ bitri , ~ bitr2i , ~ bitr3i ,
       ~ bitr4i (and more for chaining more biconditionals).  There are also
       closed forms and deduction versions of these, like, among many others,
       ~ syld , ~ syl5 , ~ syl6 , ~ mpbid , ~ bitrd , ~ syl5bb , ~ syl6bb and
       variants.  (Contributed by BJ, 21-Apr-2019.) $)
    sylbbr $p |- ( ch -> ph ) $=
      ( biimpri sylibr ) CBABCEFDG $.
  $}

  ${
    sylbb1.1 $e |- ( ph <-> ps ) $.
    sylbb1.2 $e |- ( ph <-> ch ) $.
    $( A mixed syllogism inference from two biconditionals.  (Contributed by
       BJ, 21-Apr-2019.) $)
    sylbb1 $p |- ( ps -> ch ) $=
      ( biimpri sylib ) BACABDFEG $.
  $}

  ${
    sylbb2.1 $e |- ( ph <-> ps ) $.
    sylbb2.2 $e |- ( ch <-> ps ) $.
    $( A mixed syllogism inference from two biconditionals.  (Contributed by
       BJ, 21-Apr-2019.) $)
    sylbb2 $p |- ( ph -> ch ) $=
      ( biimpri sylbi ) ABCDCBEFG $.
  $}

  ${
    sylibd.1 $e |- ( ph -> ( ps -> ch ) ) $.
    sylibd.2 $e |- ( ph -> ( ch <-> th ) ) $.
    $( A syllogism deduction.  (Contributed by NM, 3-Aug-1994.) $)
    sylibd $p |- ( ph -> ( ps -> th ) ) $=
      ( biimpd syld ) ABCDEACDFGH $.
  $}

  ${
    sylbid.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    sylbid.2 $e |- ( ph -> ( ch -> th ) ) $.
    $( A syllogism deduction.  (Contributed by NM, 3-Aug-1994.) $)
    sylbid $p |- ( ph -> ( ps -> th ) ) $=
      ( biimpd syld ) ABCDABCEGFH $.
  $}

  ${
    mpbidi.min $e |- ( th -> ( ph -> ps ) ) $.
    mpbidi.maj $e |- ( ph -> ( ps <-> ch ) ) $.
    $( A deduction from a biconditional, related to modus ponens.  (Contributed
       by NM, 9-Aug-1994.) $)
    mpbidi $p |- ( th -> ( ph -> ch ) ) $=
      ( biimpd sylcom ) DABCEABCFGH $.
  $}

  ${
    syl5bi.1 $e |- ( ph <-> ps ) $.
    syl5bi.2 $e |- ( ch -> ( ps -> th ) ) $.
    $( A mixed syllogism inference from a nested implication and a
       biconditional.  Useful for substituting an embedded antecedent with a
       definition.  (Contributed by NM, 12-Jan-1993.) $)
    syl5bi $p |- ( ch -> ( ph -> th ) ) $=
      ( biimpi syl5 ) ABCDABEGFH $.
  $}

  ${
    syl5bir.1 $e |- ( ps <-> ph ) $.
    syl5bir.2 $e |- ( ch -> ( ps -> th ) ) $.
    $( A mixed syllogism inference from a nested implication and a
       biconditional.  (Contributed by NM, 21-Jun-1993.) $)
    syl5bir $p |- ( ch -> ( ph -> th ) ) $=
      ( biimpri syl5 ) ABCDBAEGFH $.
  $}

  ${
    syl5ib.1 $e |- ( ph -> ps ) $.
    syl5ib.2 $e |- ( ch -> ( ps <-> th ) ) $.
    $( A mixed syllogism inference.  (Contributed by NM, 12-Jan-1993.) $)
    syl5ib $p |- ( ch -> ( ph -> th ) ) $=
      ( biimpd syl5 ) ABCDECBDFGH $.

    $( A mixed syllogism inference.  (Contributed by NM, 19-Jun-2007.) $)
    syl5ibcom $p |- ( ph -> ( ch -> th ) ) $=
      ( syl5ib com12 ) CADABCDEFGH $.
  $}

  ${
    syl5ibr.1 $e |- ( ph -> th ) $.
    syl5ibr.2 $e |- ( ch -> ( ps <-> th ) ) $.
    $( A mixed syllogism inference.  (Contributed by NM, 3-Apr-1994.) $)
    syl5ibr $p |- ( ch -> ( ph -> ps ) ) $=
      ( bicomd syl5ib ) ADCBECBDFGH $.

    $( A mixed syllogism inference.  (Contributed by NM, 20-Jun-2007.) $)
    syl5ibrcom $p |- ( ph -> ( ch -> ps ) ) $=
      ( syl5ibr com12 ) CABABCDEFGH $.
  $}

  ${
    biimprd.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Deduce a converse implication from a logical equivalence.  Deduction
       associated with ~ biimpr and ~ biimpri .  (Contributed by NM,
       11-Jan-1993.)  (Proof shortened by Wolf Lammen, 22-Sep-2013.) $)
    biimprd $p |- ( ph -> ( ch -> ps ) ) $=
      ( id syl5ibr ) CBACCEDF $.
  $}

  ${
    biimpcd.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Deduce a commuted implication from a logical equivalence.  (Contributed
       by NM, 3-May-1994.)  (Proof shortened by Wolf Lammen, 22-Sep-2013.) $)
    biimpcd $p |- ( ps -> ( ph -> ch ) ) $=
      ( id syl5ibcom ) BBACBEDF $.

    $( Deduce a converse commuted implication from a logical equivalence.
       (Contributed by NM, 3-May-1994.)  (Proof shortened by Wolf Lammen,
       20-Dec-2013.) $)
    biimprcd $p |- ( ch -> ( ph -> ps ) ) $=
      ( id syl5ibrcom ) CBACCEDF $.
  $}

  ${
    syl6ib.1 $e |- ( ph -> ( ps -> ch ) ) $.
    syl6ib.2 $e |- ( ch <-> th ) $.
    $( A mixed syllogism inference from a nested implication and a
       biconditional.  (Contributed by NM, 21-Jun-1993.) $)
    syl6ib $p |- ( ph -> ( ps -> th ) ) $=
      ( biimpi syl6 ) ABCDECDFGH $.
  $}

  ${
    syl6ibr.1 $e |- ( ph -> ( ps -> ch ) ) $.
    syl6ibr.2 $e |- ( th <-> ch ) $.
    $( A mixed syllogism inference from a nested implication and a
       biconditional.  Useful for substituting an embedded consequent with a
       definition.  (Contributed by NM, 10-Jan-1993.) $)
    syl6ibr $p |- ( ph -> ( ps -> th ) ) $=
      ( biimpri syl6 ) ABCDEDCFGH $.
  $}

  ${
    syl6bi.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    syl6bi.2 $e |- ( ch -> th ) $.
    $( A mixed syllogism inference.  (Contributed by NM, 2-Jan-1994.) $)
    syl6bi $p |- ( ph -> ( ps -> th ) ) $=
      ( biimpd syl6 ) ABCDABCEGFH $.
  $}

  ${
    syl6bir.1 $e |- ( ph -> ( ch <-> ps ) ) $.
    syl6bir.2 $e |- ( ch -> th ) $.
    $( A mixed syllogism inference.  (Contributed by NM, 18-May-1994.) $)
    syl6bir $p |- ( ph -> ( ps -> th ) ) $=
      ( biimprd syl6 ) ABCDACBEGFH $.
  $}

  ${
    syl7bi.1 $e |- ( ph <-> ps ) $.
    syl7bi.2 $e |- ( ch -> ( th -> ( ps -> ta ) ) ) $.
    $( A mixed syllogism inference from a doubly nested implication and a
       biconditional.  (Contributed by NM, 14-May-1993.) $)
    syl7bi $p |- ( ch -> ( th -> ( ph -> ta ) ) ) $=
      ( biimpi syl7 ) ABCDEABFHGI $.
  $}

  ${
    syl8ib.1 $e |- ( ph -> ( ps -> ( ch -> th ) ) ) $.
    syl8ib.2 $e |- ( th <-> ta ) $.
    $( A syllogism rule of inference.  The second premise is used to replace
       the consequent of the first premise.  (Contributed by NM,
       1-Aug-1994.) $)
    syl8ib $p |- ( ph -> ( ps -> ( ch -> ta ) ) ) $=
      ( biimpi syl8 ) ABCDEFDEGHI $.
  $}

  ${
    mpbird.min $e |- ( ph -> ch ) $.
    mpbird.maj $e |- ( ph -> ( ps <-> ch ) ) $.
    $( A deduction from a biconditional, related to modus ponens.  (Contributed
       by NM, 5-Aug-1993.) $)
    mpbird $p |- ( ph -> ps ) $=
      ( biimprd mpd ) ACBDABCEFG $.
  $}

  ${
    mpbiri.min $e |- ch $.
    mpbiri.maj $e |- ( ph -> ( ps <-> ch ) ) $.
    $( An inference from a nested biconditional, related to modus ponens.
       (Contributed by NM, 21-Jun-1993.)  (Proof shortened by Wolf Lammen,
       25-Oct-2012.) $)
    mpbiri $p |- ( ph -> ps ) $=
      ( a1i mpbird ) ABCCADFEG $.
  $}

  ${
    sylibrd.1 $e |- ( ph -> ( ps -> ch ) ) $.
    sylibrd.2 $e |- ( ph -> ( th <-> ch ) ) $.
    $( A syllogism deduction.  (Contributed by NM, 3-Aug-1994.) $)
    sylibrd $p |- ( ph -> ( ps -> th ) ) $=
      ( biimprd syld ) ABCDEADCFGH $.
  $}

  ${
    sylbird.1 $e |- ( ph -> ( ch <-> ps ) ) $.
    sylbird.2 $e |- ( ph -> ( ch -> th ) ) $.
    $( A syllogism deduction.  (Contributed by NM, 3-Aug-1994.) $)
    sylbird $p |- ( ph -> ( ps -> th ) ) $=
      ( biimprd syld ) ABCDACBEGFH $.
  $}

  $( Principle of identity for logical equivalence.  Theorem *4.2 of
     [WhiteheadRussell] p. 117.  This is part of Frege's eighth axiom per
     Proposition 54 of [Frege1879] p. 50; see also ~ eqid .  (Contributed by
     NM, 2-Jun-1993.) $)
  biid $p |- ( ph <-> ph ) $=
    ( id impbii ) AAABZDC $.

  $( Principle of identity with antecedent.  (Contributed by NM,
     25-Nov-1995.) $)
  biidd $p |- ( ph -> ( ps <-> ps ) ) $=
    ( wb biid a1i ) BBCABDE $.

  $( Two propositions are equivalent if they are both true.  Closed form of
     ~ 2th .  Equivalent to a ~ biimp -like version of the xor-connective.
     This theorem stays true, no matter how you permute its operands.  This is
     evident from its sharper version ` ( ph <-> ( ps <-> ( ph <-> ps ) ) ) ` .
     (Contributed by Wolf Lammen, 12-May-2013.) $)
  pm5.1im $p |- ( ph -> ( ps -> ( ph <-> ps ) ) ) $=
    ( ax-1 impbid21d ) ABABBACABCD $.

  ${
    2th.1 $e |- ph $.
    2th.2 $e |- ps $.
    $( Two truths are equivalent.  (Contributed by NM, 18-Aug-1993.) $)
    2th $p |- ( ph <-> ps ) $=
      ( a1i impbii ) ABBADEABCEF $.
  $}

  ${
    2thd.1 $e |- ( ph -> ps ) $.
    2thd.2 $e |- ( ph -> ch ) $.
    $( Two truths are equivalent.  Deduction form.  (Contributed by NM,
       3-Jun-2012.) $)
    2thd $p |- ( ph -> ( ps <-> ch ) ) $=
      ( wb pm5.1im sylc ) ABCBCFDEBCGH $.
  $}

  $( Two self-implications (see ~ id ) are equivalent.  This theorem, rather
     trivial in our axiomatization, is (the biconditional form of) a standard
     axiom for monothetic BCI logic.  This is the most general theorem of which
     ~ trujust is an instance.  Relatedly, this would be the justification
     theorem if the definition of ` T. ` were ~ dftru2 .  (Contributed by BJ,
     7-Sep-2022.) $)
  monothetic $p |- ( ( ph -> ph ) <-> ( ps -> ps ) ) $=
    ( wi id 2th ) AACBBCADBDE $.

  ${
    ibi.1 $e |- ( ph -> ( ph <-> ps ) ) $.
    $( Inference that converts a biconditional implied by one of its arguments,
       into an implication.  (Contributed by NM, 17-Oct-2003.) $)
    ibi $p |- ( ph -> ps ) $=
      ( biimpd pm2.43i ) ABAABCDE $.
  $}

  ${
    ibir.1 $e |- ( ph -> ( ps <-> ph ) ) $.
    $( Inference that converts a biconditional implied by one of its arguments,
       into an implication.  (Contributed by NM, 22-Jul-2004.) $)
    ibir $p |- ( ph -> ps ) $=
      ( bicomd ibi ) ABABACDE $.
  $}

  ${
    ibd.1 $e |- ( ph -> ( ps -> ( ps <-> ch ) ) ) $.
    $( Deduction that converts a biconditional implied by one of its arguments,
       into an implication.  Deduction associated with ~ ibi .  (Contributed by
       NM, 26-Jun-2004.) $)
    ibd $p |- ( ph -> ( ps -> ch ) ) $=
      ( wb biimp syli ) BABCECDBCFG $.
  $}

  $( Distribution of implication over biconditional.  Theorem *5.74 of
     [WhiteheadRussell] p. 126.  (Contributed by NM, 1-Aug-1994.)  (Proof
     shortened by Wolf Lammen, 11-Apr-2013.) $)
  pm5.74 $p |- ( ( ph -> ( ps <-> ch ) ) <->
               ( ( ph -> ps ) <-> ( ph -> ch ) ) ) $=
    ( wb wi biimp imim3i biimpr impbid pm2.86d impbidd impbii ) ABCDZEZABEZACEZ
    DZNOPMBCABCFGMCBABCHGIQABCQABCOPFJQACBOPHJKL $.

  ${
    pm5.74i.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Distribution of implication over biconditional (inference form).
       (Contributed by NM, 1-Aug-1994.) $)
    pm5.74i $p |- ( ( ph -> ps ) <-> ( ph -> ch ) ) $=
      ( wb wi pm5.74 mpbi ) ABCEFABFACFEDABCGH $.
  $}

  ${
    pm5.74ri.1 $e |- ( ( ph -> ps ) <-> ( ph -> ch ) ) $.
    $( Distribution of implication over biconditional (reverse inference form).
       (Contributed by NM, 1-Aug-1994.) $)
    pm5.74ri $p |- ( ph -> ( ps <-> ch ) ) $=
      ( wb wi pm5.74 mpbir ) ABCEFABFACFEDABCGH $.
  $}

  ${
    pm5.74d.1 $e |- ( ph -> ( ps -> ( ch <-> th ) ) ) $.
    $( Distribution of implication over biconditional (deduction form).
       (Contributed by NM, 21-Mar-1996.) $)
    pm5.74d $p |- ( ph -> ( ( ps -> ch ) <-> ( ps -> th ) ) ) $=
      ( wb wi pm5.74 sylib ) ABCDFGBCGBDGFEBCDHI $.
  $}

  ${
    pm5.74rd.1 $e |- ( ph -> ( ( ps -> ch ) <-> ( ps -> th ) ) ) $.
    $( Distribution of implication over biconditional (deduction form).
       (Contributed by NM, 19-Mar-1997.) $)
    pm5.74rd $p |- ( ph -> ( ps -> ( ch <-> th ) ) ) $=
      ( wi wb pm5.74 sylibr ) ABCFBDFGBCDGFEBCDHI $.
  $}

  ${
    bitri.1 $e |- ( ph <-> ps ) $.
    bitri.2 $e |- ( ps <-> ch ) $.
    $( An inference from transitive law for logical equivalence.  (Contributed
       by NM, 3-Jan-1993.)  (Proof shortened by Wolf Lammen, 13-Oct-2012.) $)
    bitri $p |- ( ph <-> ch ) $=
      ( sylbb sylbbr impbii ) ACABCDEFABCDEGH $.
  $}

  ${
    bitr2i.1 $e |- ( ph <-> ps ) $.
    bitr2i.2 $e |- ( ps <-> ch ) $.
    $( An inference from transitive law for logical equivalence.  (Contributed
       by NM, 12-Mar-1993.) $)
    bitr2i $p |- ( ch <-> ph ) $=
      ( bitri bicomi ) ACABCDEFG $.
  $}

  ${
    bitr3i.1 $e |- ( ps <-> ph ) $.
    bitr3i.2 $e |- ( ps <-> ch ) $.
    $( An inference from transitive law for logical equivalence.  (Contributed
       by NM, 2-Jun-1993.) $)
    bitr3i $p |- ( ph <-> ch ) $=
      ( bicomi bitri ) ABCBADFEG $.
  $}

  ${
    bitr4i.1 $e |- ( ph <-> ps ) $.
    bitr4i.2 $e |- ( ch <-> ps ) $.
    $( An inference from transitive law for logical equivalence.  (Contributed
       by NM, 3-Jan-1993.) $)
    bitr4i $p |- ( ph <-> ch ) $=
      ( bicomi bitri ) ABCDCBEFG $.
  $}

  $( Register '<->' as an equality for its type (wff). $)
  $( $j
    equality 'wb' from 'biid' 'bicomi' 'bitri';
    definition 'dfbi1' for 'wb';
  $)

  ${
    bitrd.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    bitrd.2 $e |- ( ph -> ( ch <-> th ) ) $.
    $( Deduction form of ~ bitri .  (Contributed by NM, 12-Mar-1993.)  (Proof
       shortened by Wolf Lammen, 14-Apr-2013.) $)
    bitrd $p |- ( ph -> ( ps <-> th ) ) $=
      ( wi pm5.74i bitri pm5.74ri ) ABDABGACGADGABCEHACDFHIJ $.
  $}

  ${
    bitr2d.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    bitr2d.2 $e |- ( ph -> ( ch <-> th ) ) $.
    $( Deduction form of ~ bitr2i .  (Contributed by NM, 9-Jun-2004.) $)
    bitr2d $p |- ( ph -> ( th <-> ps ) ) $=
      ( bitrd bicomd ) ABDABCDEFGH $.
  $}

  ${
    bitr3d.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    bitr3d.2 $e |- ( ph -> ( ps <-> th ) ) $.
    $( Deduction form of ~ bitr3i .  (Contributed by NM, 14-May-1993.) $)
    bitr3d $p |- ( ph -> ( ch <-> th ) ) $=
      ( bicomd bitrd ) ACBDABCEGFH $.
  $}

  ${
    bitr4d.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    bitr4d.2 $e |- ( ph -> ( th <-> ch ) ) $.
    $( Deduction form of ~ bitr4i .  (Contributed by NM, 30-Jun-1993.) $)
    bitr4d $p |- ( ph -> ( ps <-> th ) ) $=
      ( bicomd bitrd ) ABCDEADCFGH $.
  $}

  ${
    syl5bb.1 $e |- ( ph <-> ps ) $.
    syl5bb.2 $e |- ( ch -> ( ps <-> th ) ) $.
    $( A syllogism inference from two biconditionals.  (Contributed by NM,
       12-Mar-1993.) $)
    syl5bb $p |- ( ch -> ( ph <-> th ) ) $=
      ( wb a1i bitrd ) CABDABGCEHFI $.
  $}

  ${
    syl5rbb.1 $e |- ( ph <-> ps ) $.
    syl5rbb.2 $e |- ( ch -> ( ps <-> th ) ) $.
    $( A syllogism inference from two biconditionals.  (Contributed by NM,
       1-Aug-1993.) $)
    syl5rbb $p |- ( ch -> ( th <-> ph ) ) $=
      ( syl5bb bicomd ) CADABCDEFGH $.
  $}

  ${
    syl5bbr.1 $e |- ( ps <-> ph ) $.
    syl5bbr.2 $e |- ( ch -> ( ps <-> th ) ) $.
    $( A syllogism inference from two biconditionals.  (Contributed by NM,
       5-Aug-1993.) $)
    syl5bbr $p |- ( ch -> ( ph <-> th ) ) $=
      ( bicomi syl5bb ) ABCDBAEGFH $.
  $}

  ${
    syl5rbbr.1 $e |- ( ps <-> ph ) $.
    syl5rbbr.2 $e |- ( ch -> ( ps <-> th ) ) $.
    $( A syllogism inference from two biconditionals.  (Contributed by NM,
       25-Nov-1994.) $)
    syl5rbbr $p |- ( ch -> ( th <-> ph ) ) $=
      ( bicomi syl5rbb ) ABCDBAEGFH $.
  $}

  ${
    syl6bb.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    syl6bb.2 $e |- ( ch <-> th ) $.
    $( A syllogism inference from two biconditionals.  (Contributed by NM,
       12-Mar-1993.) $)
    syl6bb $p |- ( ph -> ( ps <-> th ) ) $=
      ( wb a1i bitrd ) ABCDECDGAFHI $.
  $}

  ${
    syl6rbb.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    syl6rbb.2 $e |- ( ch <-> th ) $.
    $( A syllogism inference from two biconditionals.  (Contributed by NM,
       5-Aug-1993.) $)
    syl6rbb $p |- ( ph -> ( th <-> ps ) ) $=
      ( syl6bb bicomd ) ABDABCDEFGH $.
  $}

  ${
    syl6bbr.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    syl6bbr.2 $e |- ( th <-> ch ) $.
    $( A syllogism inference from two biconditionals.  (Contributed by NM,
       12-Mar-1993.) $)
    syl6bbr $p |- ( ph -> ( ps <-> th ) ) $=
      ( bicomi syl6bb ) ABCDEDCFGH $.
  $}

  ${
    syl6rbbr.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    syl6rbbr.2 $e |- ( th <-> ch ) $.
    $( A syllogism inference from two biconditionals.  (Contributed by NM,
       25-Nov-1994.) $)
    syl6rbbr $p |- ( ph -> ( th <-> ps ) ) $=
      ( bicomi syl6rbb ) ABCDEDCFGH $.
  $}

  ${
    3imtr3.1 $e |- ( ph -> ps ) $.
    3imtr3.2 $e |- ( ph <-> ch ) $.
    3imtr3.3 $e |- ( ps <-> th ) $.
    $( A mixed syllogism inference, useful for removing a definition from both
       sides of an implication.  (Contributed by NM, 10-Aug-1994.) $)
    3imtr3i $p |- ( ch -> th ) $=
      ( sylbir sylib ) CBDCABFEHGI $.
  $}

  ${
    3imtr4.1 $e |- ( ph -> ps ) $.
    3imtr4.2 $e |- ( ch <-> ph ) $.
    3imtr4.3 $e |- ( th <-> ps ) $.
    $( A mixed syllogism inference, useful for applying a definition to both
       sides of an implication.  (Contributed by NM, 3-Jan-1993.) $)
    3imtr4i $p |- ( ch -> th ) $=
      ( sylbi sylibr ) CBDCABFEHGI $.
  $}

  ${
    3imtr3d.1 $e |- ( ph -> ( ps -> ch ) ) $.
    3imtr3d.2 $e |- ( ph -> ( ps <-> th ) ) $.
    3imtr3d.3 $e |- ( ph -> ( ch <-> ta ) ) $.
    $( More general version of ~ 3imtr3i .  Useful for converting conditional
       definitions in a formula.  (Contributed by NM, 8-Apr-1996.) $)
    3imtr3d $p |- ( ph -> ( th -> ta ) ) $=
      ( sylibd sylbird ) ADBEGABCEFHIJ $.
  $}

  ${
    3imtr4d.1 $e |- ( ph -> ( ps -> ch ) ) $.
    3imtr4d.2 $e |- ( ph -> ( th <-> ps ) ) $.
    3imtr4d.3 $e |- ( ph -> ( ta <-> ch ) ) $.
    $( More general version of ~ 3imtr4i .  Useful for converting conditional
       definitions in a formula.  (Contributed by NM, 26-Oct-1995.) $)
    3imtr4d $p |- ( ph -> ( th -> ta ) ) $=
      ( sylibrd sylbid ) ADBEGABCEFHIJ $.
  $}

  ${
    3imtr3g.1 $e |- ( ph -> ( ps -> ch ) ) $.
    3imtr3g.2 $e |- ( ps <-> th ) $.
    3imtr3g.3 $e |- ( ch <-> ta ) $.
    $( More general version of ~ 3imtr3i .  Useful for converting definitions
       in a formula.  (Contributed by NM, 20-May-1996.)  (Proof shortened by
       Wolf Lammen, 20-Dec-2013.) $)
    3imtr3g $p |- ( ph -> ( th -> ta ) ) $=
      ( syl5bir syl6ib ) ADCEDBACGFIHJ $.
  $}

  ${
    3imtr4g.1 $e |- ( ph -> ( ps -> ch ) ) $.
    3imtr4g.2 $e |- ( th <-> ps ) $.
    3imtr4g.3 $e |- ( ta <-> ch ) $.
    $( More general version of ~ 3imtr4i .  Useful for converting definitions
       in a formula.  (Contributed by NM, 20-May-1996.)  (Proof shortened by
       Wolf Lammen, 20-Dec-2013.) $)
    3imtr4g $p |- ( ph -> ( th -> ta ) ) $=
      ( syl5bi syl6ibr ) ADCEDBACGFIHJ $.
  $}

  ${
    3bitri.1 $e |- ( ph <-> ps ) $.
    3bitri.2 $e |- ( ps <-> ch ) $.
    3bitri.3 $e |- ( ch <-> th ) $.
    $( A chained inference from transitive law for logical equivalence.
       (Contributed by NM, 3-Jan-1993.) $)
    3bitri $p |- ( ph <-> th ) $=
      ( bitri ) ABDEBCDFGHH $.

    $( A chained inference from transitive law for logical equivalence.
       (Contributed by NM, 4-Aug-2006.) $)
    3bitrri $p |- ( th <-> ph ) $=
      ( bitr2i bitr3i ) DCAGABCEFHI $.
  $}

  ${
    3bitr2i.1 $e |- ( ph <-> ps ) $.
    3bitr2i.2 $e |- ( ch <-> ps ) $.
    3bitr2i.3 $e |- ( ch <-> th ) $.
    $( A chained inference from transitive law for logical equivalence.
       (Contributed by NM, 4-Aug-2006.) $)
    3bitr2i $p |- ( ph <-> th ) $=
      ( bitr4i bitri ) ACDABCEFHGI $.

    $( A chained inference from transitive law for logical equivalence.
       (Contributed by NM, 4-Aug-2006.) $)
    3bitr2ri $p |- ( th <-> ph ) $=
      ( bitr4i bitr2i ) ACDABCEFHGI $.
  $}

  ${
    3bitr3i.1 $e |- ( ph <-> ps ) $.
    3bitr3i.2 $e |- ( ph <-> ch ) $.
    3bitr3i.3 $e |- ( ps <-> th ) $.
    $( A chained inference from transitive law for logical equivalence.
       (Contributed by NM, 19-Aug-1993.) $)
    3bitr3i $p |- ( ch <-> th ) $=
      ( bitr3i bitri ) CBDCABFEHGI $.

    $( A chained inference from transitive law for logical equivalence.
       (Contributed by NM, 21-Jun-1993.) $)
    3bitr3ri $p |- ( th <-> ch ) $=
      ( bitr3i ) DBCGBACEFHH $.
  $}

  ${
    3bitr4i.1 $e |- ( ph <-> ps ) $.
    3bitr4i.2 $e |- ( ch <-> ph ) $.
    3bitr4i.3 $e |- ( th <-> ps ) $.
    $( A chained inference from transitive law for logical equivalence.  This
       inference is frequently used to apply a definition to both sides of a
       logical equivalence.  (Contributed by NM, 3-Jan-1993.) $)
    3bitr4i $p |- ( ch <-> th ) $=
      ( bitr4i bitri ) CADFABDEGHI $.

    $( A chained inference from transitive law for logical equivalence.
       (Contributed by NM, 2-Sep-1995.) $)
    3bitr4ri $p |- ( th <-> ch ) $=
      ( bitr4i bitr2i ) CADFABDEGHI $.
  $}

  ${
    3bitrd.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    3bitrd.2 $e |- ( ph -> ( ch <-> th ) ) $.
    3bitrd.3 $e |- ( ph -> ( th <-> ta ) ) $.
    $( Deduction from transitivity of biconditional.  (Contributed by NM,
       13-Aug-1999.) $)
    3bitrd $p |- ( ph -> ( ps <-> ta ) ) $=
      ( bitrd ) ABDEABCDFGIHI $.

    $( Deduction from transitivity of biconditional.  (Contributed by NM,
       4-Aug-2006.) $)
    3bitrrd $p |- ( ph -> ( ta <-> ps ) ) $=
      ( bitr2d bitr3d ) ADEBHABCDFGIJ $.
  $}

  ${
    3bitr2d.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    3bitr2d.2 $e |- ( ph -> ( th <-> ch ) ) $.
    3bitr2d.3 $e |- ( ph -> ( th <-> ta ) ) $.
    $( Deduction from transitivity of biconditional.  (Contributed by NM,
       4-Aug-2006.) $)
    3bitr2d $p |- ( ph -> ( ps <-> ta ) ) $=
      ( bitr4d bitrd ) ABDEABCDFGIHJ $.

    $( Deduction from transitivity of biconditional.  (Contributed by NM,
       4-Aug-2006.) $)
    3bitr2rd $p |- ( ph -> ( ta <-> ps ) ) $=
      ( bitr4d bitr2d ) ABDEABCDFGIHJ $.
  $}

  ${
    3bitr3d.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    3bitr3d.2 $e |- ( ph -> ( ps <-> th ) ) $.
    3bitr3d.3 $e |- ( ph -> ( ch <-> ta ) ) $.
    $( Deduction from transitivity of biconditional.  Useful for converting
       conditional definitions in a formula.  (Contributed by NM,
       24-Apr-1996.) $)
    3bitr3d $p |- ( ph -> ( th <-> ta ) ) $=
      ( bitr3d bitrd ) ADCEABDCGFIHJ $.

    $( Deduction from transitivity of biconditional.  (Contributed by NM,
       4-Aug-2006.) $)
    3bitr3rd $p |- ( ph -> ( ta <-> th ) ) $=
      ( bitr3d ) ACEDHABCDFGII $.
  $}

  ${
    3bitr4d.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    3bitr4d.2 $e |- ( ph -> ( th <-> ps ) ) $.
    3bitr4d.3 $e |- ( ph -> ( ta <-> ch ) ) $.
    $( Deduction from transitivity of biconditional.  Useful for converting
       conditional definitions in a formula.  (Contributed by NM,
       18-Oct-1995.) $)
    3bitr4d $p |- ( ph -> ( th <-> ta ) ) $=
      ( bitr4d bitrd ) ADBEGABCEFHIJ $.

    $( Deduction from transitivity of biconditional.  (Contributed by NM,
       4-Aug-2006.) $)
    3bitr4rd $p |- ( ph -> ( ta <-> th ) ) $=
      ( bitr4d ) AEBDAECBHFIGI $.
  $}

  ${
    3bitr3g.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    3bitr3g.2 $e |- ( ps <-> th ) $.
    3bitr3g.3 $e |- ( ch <-> ta ) $.
    $( More general version of ~ 3bitr3i .  Useful for converting definitions
       in a formula.  (Contributed by NM, 4-Jun-1995.) $)
    3bitr3g $p |- ( ph -> ( th <-> ta ) ) $=
      ( syl5bbr syl6bb ) ADCEDBACGFIHJ $.
  $}

  ${
    3bitr4g.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    3bitr4g.2 $e |- ( th <-> ps ) $.
    3bitr4g.3 $e |- ( ta <-> ch ) $.
    $( More general version of ~ 3bitr4i .  Useful for converting definitions
       in a formula.  (Contributed by NM, 11-May-1993.) $)
    3bitr4g $p |- ( ph -> ( th <-> ta ) ) $=
      ( syl5bb syl6bbr ) ADCEDBACGFIHJ $.
  $}

  $( Double negation.  Theorem *4.13 of [WhiteheadRussell] p. 117.
     (Contributed by NM, 3-Jan-1993.) $)
  notnotb $p |- ( ph <-> -. -. ph ) $=
    ( wn notnot notnotr impbii ) AABBACADE $.

  $( A biconditional form of contraposition.  Theorem *4.1 of
     [WhiteheadRussell] p. 116.  (Contributed by NM, 11-May-1993.) $)
  con34b $p |- ( ( ph -> ps ) <-> ( -. ps -> -. ph ) ) $=
    ( wi wn con3 con4 impbii ) ABCBDADCABEBAFG $.

  ${
    con4bid.1 $e |- ( ph -> ( -. ps <-> -. ch ) ) $.
    $( A contraposition deduction.  (Contributed by NM, 21-May-1994.) $)
    con4bid $p |- ( ph -> ( ps <-> ch ) ) $=
      ( wn biimprd con4d biimpd impcon4bid ) ABCACBABEZCEZDFGAJKDHI $.
  $}

  ${
    notbid.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Deduction negating both sides of a logical equivalence.  (Contributed by
       NM, 21-May-1994.) $)
    notbid $p |- ( ph -> ( -. ps <-> -. ch ) ) $=
      ( wn notnotb 3bitr3g con4bid ) ABEZCEZABCIEJEDBFCFGH $.
  $}

  $( Contraposition.  Theorem *4.11 of [WhiteheadRussell] p. 117.  (Contributed
     by NM, 21-May-1994.)  (Proof shortened by Wolf Lammen, 12-Jun-2013.) $)
  notbi $p |- ( ( ph <-> ps ) <-> ( -. ph <-> -. ps ) ) $=
    ( wb wn id notbid con4bid impbii ) ABCZADBDCZIABIEFJABJEGH $.

  ${
    notbii.1 $e |- ( ph <-> ps ) $.
    $( Negate both sides of a logical equivalence.  (Contributed by NM,
       3-Jan-1993.)  (Proof shortened by Wolf Lammen, 19-May-2013.) $)
    notbii $p |- ( -. ph <-> -. ps ) $=
      ( wb wn notbi mpbi ) ABDAEBEDCABFG $.

    $( Theorem notbii is the congruence law for negation. $)
    $( $j congruence 'notbii'; $)
  $}

  ${
    con4bii.1 $e |- ( -. ph <-> -. ps ) $.
    $( A contraposition inference.  (Contributed by NM, 21-May-1994.) $)
    con4bii $p |- ( ph <-> ps ) $=
      ( wb wn notbi mpbir ) ABDAEBEDCABFG $.
  $}

  ${
    mtbi.1 $e |- -. ph $.
    mtbi.2 $e |- ( ph <-> ps ) $.
    $( An inference from a biconditional, related to modus tollens.
       (Contributed by NM, 15-Nov-1994.)  (Proof shortened by Wolf Lammen,
       25-Oct-2012.) $)
    mtbi $p |- -. ps $=
      ( biimpri mto ) BACABDEF $.
  $}

  ${
    mtbir.1 $e |- -. ps $.
    mtbir.2 $e |- ( ph <-> ps ) $.
    $( An inference from a biconditional, related to modus tollens.
       (Contributed by NM, 15-Nov-1994.)  (Proof shortened by Wolf Lammen,
       14-Oct-2012.) $)
    mtbir $p |- -. ph $=
      ( bicomi mtbi ) BACABDEF $.
  $}

  ${
    mtbid.min $e |- ( ph -> -. ps ) $.
    mtbid.maj $e |- ( ph -> ( ps <-> ch ) ) $.
    $( A deduction from a biconditional, similar to modus tollens.
       (Contributed by NM, 26-Nov-1995.) $)
    mtbid $p |- ( ph -> -. ch ) $=
      ( biimprd mtod ) ACBDABCEFG $.
  $}

  ${
    mtbird.min $e |- ( ph -> -. ch ) $.
    mtbird.maj $e |- ( ph -> ( ps <-> ch ) ) $.
    $( A deduction from a biconditional, similar to modus tollens.
       (Contributed by NM, 10-May-1994.) $)
    mtbird $p |- ( ph -> -. ps ) $=
      ( biimpd mtod ) ABCDABCEFG $.
  $}

  ${
    mtbii.min $e |- -. ps $.
    mtbii.maj $e |- ( ph -> ( ps <-> ch ) ) $.
    $( An inference from a biconditional, similar to modus tollens.
       (Contributed by NM, 27-Nov-1995.) $)
    mtbii $p |- ( ph -> -. ch ) $=
      ( biimprd mtoi ) ACBDABCEFG $.
  $}

  ${
    mtbiri.min $e |- -. ch $.
    mtbiri.maj $e |- ( ph -> ( ps <-> ch ) ) $.
    $( An inference from a biconditional, similar to modus tollens.
       (Contributed by NM, 24-Aug-1995.) $)
    mtbiri $p |- ( ph -> -. ps ) $=
      ( biimpd mtoi ) ABCDABCEFG $.
  $}

  ${
    sylnib.1 $e |- ( ph -> -. ps ) $.
    sylnib.2 $e |- ( ps <-> ch ) $.
    $( A mixed syllogism inference from an implication and a biconditional.
       (Contributed by Wolf Lammen, 16-Dec-2013.) $)
    sylnib $p |- ( ph -> -. ch ) $=
      ( wb a1i mtbid ) ABCDBCFAEGH $.
  $}

  ${
    sylnibr.1 $e |- ( ph -> -. ps ) $.
    sylnibr.2 $e |- ( ch <-> ps ) $.
    $( A mixed syllogism inference from an implication and a biconditional.
       Useful for substituting a consequent with a definition.  (Contributed by
       Wolf Lammen, 16-Dec-2013.) $)
    sylnibr $p |- ( ph -> -. ch ) $=
      ( bicomi sylnib ) ABCDCBEFG $.
  $}

  ${
    sylnbi.1 $e |- ( ph <-> ps ) $.
    sylnbi.2 $e |- ( -. ps -> ch ) $.
    $( A mixed syllogism inference from a biconditional and an implication.
       Useful for substituting an antecedent with a definition.  (Contributed
       by Wolf Lammen, 16-Dec-2013.) $)
    sylnbi $p |- ( -. ph -> ch ) $=
      ( wn notbii sylbi ) AFBFCABDGEH $.
  $}

  ${
    sylnbir.1 $e |- ( ps <-> ph ) $.
    sylnbir.2 $e |- ( -. ps -> ch ) $.
    $( A mixed syllogism inference from a biconditional and an implication.
       (Contributed by Wolf Lammen, 16-Dec-2013.) $)
    sylnbir $p |- ( -. ph -> ch ) $=
      ( bicomi sylnbi ) ABCBADFEG $.
  $}

  ${
    xchnxbi.1 $e |- ( -. ph <-> ps ) $.
    xchnxbi.2 $e |- ( ph <-> ch ) $.
    $( Replacement of a subexpression by an equivalent one.  (Contributed by
       Wolf Lammen, 27-Sep-2014.) $)
    xchnxbi $p |- ( -. ch <-> ps ) $=
      ( wn notbii bitr3i ) CFAFBACEGDH $.
  $}

  ${
    xchnxbir.1 $e |- ( -. ph <-> ps ) $.
    xchnxbir.2 $e |- ( ch <-> ph ) $.
    $( Replacement of a subexpression by an equivalent one.  (Contributed by
       Wolf Lammen, 27-Sep-2014.) $)
    xchnxbir $p |- ( -. ch <-> ps ) $=
      ( bicomi xchnxbi ) ABCDCAEFG $.
  $}

  ${
    xchbinx.1 $e |- ( ph <-> -. ps ) $.
    xchbinx.2 $e |- ( ps <-> ch ) $.
    $( Replacement of a subexpression by an equivalent one.  (Contributed by
       Wolf Lammen, 27-Sep-2014.) $)
    xchbinx $p |- ( ph <-> -. ch ) $=
      ( wn notbii bitri ) ABFCFDBCEGH $.
  $}

  ${
    xchbinxr.1 $e |- ( ph <-> -. ps ) $.
    xchbinxr.2 $e |- ( ch <-> ps ) $.
    $( Replacement of a subexpression by an equivalent one.  (Contributed by
       Wolf Lammen, 27-Sep-2014.) $)
    xchbinxr $p |- ( ph <-> -. ch ) $=
      ( bicomi xchbinx ) ABCDCBEFG $.
  $}

  ${
    imbi2i.1 $e |- ( ph <-> ps ) $.
    $( Introduce an antecedent to both sides of a logical equivalence.  This
       and the next three rules are useful for building up wff's around a
       definition, in order to make use of the definition.  (Contributed by NM,
       3-Jan-1993.)  (Proof shortened by Wolf Lammen, 6-Feb-2013.) $)
    imbi2i $p |- ( ( ch -> ph ) <-> ( ch -> ps ) ) $=
      ( wb a1i pm5.74i ) CABABECDFG $.
  $}

  ${
    bibi2i.1 $e |- ( ph <-> ps ) $.
    $( Inference adding a biconditional to the left in an equivalence.
       (Contributed by NM, 26-May-1993.)  (Proof shortened by Andrew Salmon,
       7-May-2011.)  (Proof shortened by Wolf Lammen, 16-May-2013.) $)
    bibi2i $p |- ( ( ch <-> ph ) <-> ( ch <-> ps ) ) $=
      ( wb id syl6bb syl6bbr impbii ) CAEZCBEZJCABJFDGKCBAKFDHI $.

    $( Inference adding a biconditional to the right in an equivalence.
       (Contributed by NM, 26-May-1993.) $)
    bibi1i $p |- ( ( ph <-> ch ) <-> ( ps <-> ch ) ) $=
      ( wb bicom bibi2i 3bitri ) ACECAECBEBCEACFABCDGCBFH $.

    ${
      bibi12i.2 $e |- ( ch <-> th ) $.
      $( The equivalence of two equivalences.  (Contributed by NM,
         26-May-1993.) $)
      bibi12i $p |- ( ( ph <-> ch ) <-> ( ps <-> th ) ) $=
        ( wb bibi2i bibi1i bitri ) ACGADGBDGCDAFHABDEIJ $.
    $}
  $}

  ${
    imbid.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Deduction adding an antecedent to both sides of a logical equivalence.
       (Contributed by NM, 11-May-1993.) $)
    imbi2d $p |- ( ph -> ( ( th -> ps ) <-> ( th -> ch ) ) ) $=
      ( wb a1d pm5.74d ) ADBCABCFDEGH $.

    $( Deduction adding a consequent to both sides of a logical equivalence.
       (Contributed by NM, 11-May-1993.)  (Proof shortened by Wolf Lammen,
       17-Sep-2013.) $)
    imbi1d $p |- ( ph -> ( ( ps -> th ) <-> ( ch -> th ) ) ) $=
      ( wi biimprd imim1d biimpd impbid ) ABDFCDFACBDABCEGHABCDABCEIHJ $.

    $( Deduction adding a biconditional to the left in an equivalence.
       (Contributed by NM, 11-May-1993.)  (Proof shortened by Wolf Lammen,
       19-May-2013.) $)
    bibi2d $p |- ( ph -> ( ( th <-> ps ) <-> ( th <-> ch ) ) ) $=
      ( wb wi pm5.74i bibi2i pm5.74 3bitr4i pm5.74ri ) ADBFZDCFZADGZABGZFOACGZF
      AMGANGPQOABCEHIADBJADCJKL $.

    $( Deduction adding a biconditional to the right in an equivalence.
       (Contributed by NM, 11-May-1993.) $)
    bibi1d $p |- ( ph -> ( ( ps <-> th ) <-> ( ch <-> th ) ) ) $=
      ( wb bibi2d bicom 3bitr4g ) ADBFDCFBDFCDFABCDEGBDHCDHI $.
  $}

  ${
    imbi12d.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    imbi12d.2 $e |- ( ph -> ( th <-> ta ) ) $.
    $( Deduction joining two equivalences to form equivalence of implications.
       (Contributed by NM, 16-May-1993.) $)
    imbi12d $p |- ( ph -> ( ( ps -> th ) <-> ( ch -> ta ) ) ) $=
      ( wi imbi1d imbi2d bitrd ) ABDHCDHCEHABCDFIADECGJK $.

    $( Deduction joining two equivalences to form equivalence of
       biconditionals.  (Contributed by NM, 26-May-1993.) $)
    bibi12d $p |- ( ph -> ( ( ps <-> th ) <-> ( ch <-> ta ) ) ) $=
      ( wb bibi1d bibi2d bitrd ) ABDHCDHCEHABCDFIADECGJK $.
  $}

  $( Closed form of ~ imbi12i .  Was automatically derived from its "Virtual
     Deduction" version and the Metamath program "MM-PA> MINIMIZE_WITH *"
     command.  (Contributed by Alan Sare, 18-Mar-2012.) $)
  imbi12 $p |- ( ( ph <-> ps ) ->
                    ( ( ch <-> th ) -> ( ( ph -> ch ) <-> ( ps -> th ) ) ) ) $=
    ( wb wi wn simplim simprim imbi12d expi ) ABEZCDEZACFBDFELMGZFGABCDLNHLMIJK
    $.

  $( Theorem *4.84 of [WhiteheadRussell] p. 122.  (Contributed by NM,
     3-Jan-2005.) $)
  imbi1 $p |- ( ( ph <-> ps ) -> ( ( ph -> ch ) <-> ( ps -> ch ) ) ) $=
    ( wb id imbi1d ) ABDZABCGEF $.

  $( Theorem *4.85 of [WhiteheadRussell] p. 122.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 19-May-2013.) $)
  imbi2 $p |- ( ( ph <-> ps ) -> ( ( ch -> ph ) <-> ( ch -> ps ) ) ) $=
    ( wb id imbi2d ) ABDZABCGEF $.

  ${
    imbi1i.1 $e |- ( ph <-> ps ) $.
    $( Introduce a consequent to both sides of a logical equivalence.
       (Contributed by NM, 3-Jan-1993.)  (Proof shortened by Wolf Lammen,
       17-Sep-2013.) $)
    imbi1i $p |- ( ( ph -> ch ) <-> ( ps -> ch ) ) $=
      ( wb wi imbi1 ax-mp ) ABEACFBCFEDABCGH $.
  $}

  ${
    imbi12i.1 $e |- ( ph <-> ps ) $.
    imbi12i.2 $e |- ( ch <-> th ) $.
    $( Join two logical equivalences to form equivalence of implications.
       (Contributed by NM, 1-Aug-1993.) $)
    imbi12i $p |- ( ( ph -> ch ) <-> ( ps -> th ) ) $=
      ( wb wi imbi12 mp2 ) ABGCDGACHBDHGEFABCDIJ $.

    $( Theorem imbi12i is the congruence law for implication. $)
    $( $j congruence 'imbi12i'; $)
  $}

  $( Theorem *4.86 of [WhiteheadRussell] p. 122.  (Contributed by NM,
     3-Jan-2005.) $)
  bibi1 $p |- ( ( ph <-> ps ) -> ( ( ph <-> ch ) <-> ( ps <-> ch ) ) ) $=
    ( wb id bibi1d ) ABDZABCGEF $.

  $( Closed nested implication form of ~ bitr3i .  Derived automatically from
     ~ bitr3VD .  (Contributed by Alan Sare, 31-Dec-2011.) $)
  bitr3 $p |- ( ( ph <-> ps ) -> ( ( ph <-> ch ) -> ( ps <-> ch ) ) ) $=
    ( wb bibi1 biimpd ) ABDACDBCDABCEF $.

  $( Contraposition.  Theorem *4.12 of [WhiteheadRussell] p. 117.  (Contributed
     by NM, 15-Apr-1995.)  (Proof shortened by Wolf Lammen, 3-Jan-2013.) $)
  con2bi $p |- ( ( ph <-> -. ps ) <-> ( ps <-> -. ph ) ) $=
    ( wn wb notbi notnotb bibi2i bicom 3bitr2i ) ABCZDACZJCZDKBDBKDAJEBLKBFGKBH
    I $.

  ${
    con2bid.1 $e |- ( ph -> ( ps <-> -. ch ) ) $.
    $( A contraposition deduction.  (Contributed by NM, 15-Apr-1995.) $)
    con2bid $p |- ( ph -> ( ch <-> -. ps ) ) $=
      ( wn wb con2bi sylibr ) ABCEFCBEFDCBGH $.
  $}

  ${
    con1bid.1 $e |- ( ph -> ( -. ps <-> ch ) ) $.
    $( A contraposition deduction.  (Contributed by NM, 9-Oct-1999.) $)
    con1bid $p |- ( ph -> ( -. ch <-> ps ) ) $=
      ( wn bicomd con2bid ) ABCEACBABECDFGF $.
  $}

  ${
    con1bii.1 $e |- ( -. ph <-> ps ) $.
    $( A contraposition inference.  (Contributed by NM, 12-Mar-1993.)  (Proof
       shortened by Wolf Lammen, 13-Oct-2012.) $)
    con1bii $p |- ( -. ps <-> ph ) $=
      ( wn notnotb xchbinx bicomi ) ABDAADBAECFG $.
  $}

  ${
    con2bii.1 $e |- ( ph <-> -. ps ) $.
    $( A contraposition inference.  (Contributed by NM, 12-Mar-1993.) $)
    con2bii $p |- ( ps <-> -. ph ) $=
      ( wn bicomi con1bii ) ADBBAABDCEFE $.
  $}

  $( Contraposition.  Bidirectional version of ~ con1 .  (Contributed by NM,
     3-Jan-1993.) $)
  con1b $p |- ( ( -. ph -> ps ) <-> ( -. ps -> ph ) ) $=
    ( wn wi con1 impbii ) ACBDBCADABEBAEF $.

  $( Contraposition.  Bidirectional version of ~ con2 .  (Contributed by NM,
     12-Mar-1993.) $)
  con2b $p |- ( ( ph -> -. ps ) <-> ( ps -> -. ph ) ) $=
    ( wn wi con2 impbii ) ABCDBACDABEBAEF $.

  $( A wff is equivalent to itself with true antecedent.  (Contributed by NM,
     28-Jan-1996.) $)
  biimt $p |- ( ph -> ( ps <-> ( ph -> ps ) ) ) $=
    ( wi ax-1 pm2.27 impbid2 ) ABABCBADABEF $.

  $( Theorem *5.5 of [WhiteheadRussell] p. 125.  (Contributed by NM,
     3-Jan-2005.) $)
  pm5.5 $p |- ( ph -> ( ( ph -> ps ) <-> ps ) ) $=
    ( wi biimt bicomd ) ABABCABDE $.

  ${
    a1bi.1 $e |- ph $.
    $( Inference introducing a theorem as an antecedent.  (Contributed by NM,
       5-Aug-1993.)  (Proof shortened by Wolf Lammen, 11-Nov-2012.) $)
    a1bi $p |- ( ps <-> ( ph -> ps ) ) $=
      ( wi wb biimt ax-mp ) ABABDECABFG $.
  $}

  ${
    mt2bi.1 $e |- ph $.
    $( A false consequent falsifies an antecedent.  (Contributed by NM,
       19-Aug-1993.)  (Proof shortened by Wolf Lammen, 12-Nov-2012.) $)
    mt2bi $p |- ( -. ps <-> ( ps -> -. ph ) ) $=
      ( wn wi a1bi con2b bitri ) BDZAIEBADEAICFABGH $.
  $}

  $( Modus-tollens-like theorem.  (Contributed by NM, 7-Apr-2001.)  (Proof
     shortened by Wolf Lammen, 12-Nov-2012.) $)
  mtt $p |- ( -. ph -> ( -. ps <-> ( ps -> ph ) ) ) $=
    ( wn wi biimt con34b syl6bbr ) ACZBCZHIDBADHIEBAFG $.

  $( If a proposition is false, then implying it is equivalent to being false.
     One of four theorems that can be used to simplify an implication
     ` ( ph -> ps ) ` , the other ones being ~ ax-1 (true consequent), ~ pm2.21
     (false antecedent), ~ pm5.5 (true antecedent).  (Contributed by Mario
     Carneiro, 26-Apr-2019.)  (Proof shortened by Wolf Lammen, 26-May-2019.) $)
  imnot $p |- ( -. ps -> ( ( ph -> ps ) <-> -. ph ) ) $=
    ( wn wi mtt bicomd ) BCACABDBAEF $.

  $( Theorem *5.501 of [WhiteheadRussell] p. 125.  (Contributed by NM,
     3-Jan-2005.) $)
  pm5.501 $p |- ( ph -> ( ps <-> ( ph <-> ps ) ) ) $=
    ( wb pm5.1im biimp com12 impbid ) ABABCZABDHABABEFG $.

  $( Implication in terms of implication and biconditional.  (Contributed by
     NM, 31-Mar-1994.)  (Proof shortened by Wolf Lammen, 24-Jan-2013.) $)
  ibib $p |- ( ( ph -> ps ) <-> ( ph -> ( ph <-> ps ) ) ) $=
    ( wb pm5.501 pm5.74i ) ABABCABDE $.

  $( Implication in terms of implication and biconditional.  (Contributed by
     NM, 29-Apr-2005.)  (Proof shortened by Wolf Lammen, 21-Dec-2013.) $)
  ibibr $p |- ( ( ph -> ps ) <-> ( ph -> ( ps <-> ph ) ) ) $=
    ( wb pm5.501 bicom syl6bb pm5.74i ) ABBACZABABCHABDABEFG $.

  ${
    tbt.1 $e |- ph $.
    $( A wff is equivalent to its equivalence with a truth.  (Contributed by
       NM, 18-Aug-1993.)  (Proof shortened by Andrew Salmon, 13-May-2011.) $)
    tbt $p |- ( ps <-> ( ps <-> ph ) ) $=
      ( wb ibibr pm5.74ri ax-mp ) ABBADZDCABHABEFG $.
  $}

  $( The negation of a wff is equivalent to the wff's equivalence to falsehood.
     (Contributed by Juha Arpiainen, 19-Jan-2006.)  (Proof shortened by Wolf
     Lammen, 28-Jan-2013.) $)
  nbn2 $p |- ( -. ph -> ( -. ps <-> ( ph <-> ps ) ) ) $=
    ( wn wb pm5.501 notbi syl6bbr ) ACZBCZHIDABDHIEABFG $.

  $( Transfer negation via an equivalence.  (Contributed by NM, 3-Oct-2007.)
     (Proof shortened by Wolf Lammen, 28-Jan-2013.) $)
  bibif $p |- ( -. ps -> ( ( ph <-> ps ) <-> -. ph ) ) $=
    ( wn wb nbn2 bicom syl6rbb ) BCACBADABDBAEBAFG $.

  ${
    nbn.1 $e |- -. ph $.
    $( The negation of a wff is equivalent to the wff's equivalence to
       falsehood.  (Contributed by NM, 21-Jun-1993.)  (Proof shortened by Wolf
       Lammen, 3-Oct-2013.) $)
    nbn $p |- ( -. ps <-> ( ps <-> ph ) ) $=
      ( wb wn bibif ax-mp bicomi ) BADZBEZAEIJDCBAFGH $.
  $}

  ${
    nbn3.1 $e |- ph $.
    $( Transfer falsehood via equivalence.  (Contributed by NM,
       11-Sep-2006.) $)
    nbn3 $p |- ( -. ps <-> ( ps <-> -. ph ) ) $=
      ( wn notnoti nbn ) ADBACEF $.
  $}

  $( Two propositions are equivalent if they are both false.  Closed form of
     ~ 2false .  Equivalent to a ~ biimpr -like version of the xor-connective.
     (Contributed by Wolf Lammen, 13-May-2013.) $)
  pm5.21im $p |- ( -. ph -> ( -. ps -> ( ph <-> ps ) ) ) $=
    ( wn wb nbn2 biimpd ) ACBCABDABEF $.

  ${
    2false.1 $e |- -. ph $.
    2false.2 $e |- -. ps $.
    $( Two falsehoods are equivalent.  (Contributed by NM, 4-Apr-2005.)  (Proof
       shortened by Wolf Lammen, 19-May-2013.) $)
    2false $p |- ( ph <-> ps ) $=
      ( wn 2th con4bii ) ABAEBECDFG $.
  $}

  ${
    2falsed.1 $e |- ( ph -> -. ps ) $.
    2falsed.2 $e |- ( ph -> -. ch ) $.
    $( Two falsehoods are equivalent (deduction form).  (Contributed by NM,
       11-Oct-2013.) $)
    2falsed $p |- ( ph -> ( ps <-> ch ) ) $=
      ( pm2.21d impbid ) ABCABCDFACBEFG $.
  $}

  ${
    pm5.21ni.1 $e |- ( ph -> ps ) $.
    pm5.21ni.2 $e |- ( ch -> ps ) $.
    $( Two propositions implying a false one are equivalent.  (Contributed by
       NM, 16-Feb-1996.)  (Proof shortened by Wolf Lammen, 19-May-2013.) $)
    pm5.21ni $p |- ( -. ps -> ( ph <-> ch ) ) $=
      ( wn con3i 2falsed ) BFACABDGCBEGH $.

    ${
      pm5.21nii.3 $e |- ( ps -> ( ph <-> ch ) ) $.
      $( Eliminate an antecedent implied by each side of a biconditional.
         (Contributed by NM, 21-May-1999.) $)
      pm5.21nii $p |- ( ph <-> ch ) $=
        ( wb pm5.21ni pm2.61i ) BACGFABCDEHI $.
    $}
  $}

  ${
    pm5.21ndd.1 $e |- ( ph -> ( ch -> ps ) ) $.
    pm5.21ndd.2 $e |- ( ph -> ( th -> ps ) ) $.
    pm5.21ndd.3 $e |- ( ph -> ( ps -> ( ch <-> th ) ) ) $.
    $( Eliminate an antecedent implied by each side of a biconditional,
       deduction version.  (Contributed by Paul Chapman, 21-Nov-2012.)  (Proof
       shortened by Wolf Lammen, 6-Oct-2013.) $)
    pm5.21ndd $p |- ( ph -> ( ch <-> th ) ) $=
      ( wb wn con3d pm5.21im syl6c pm2.61d ) ABCDHZGABICIDINACBEJADBFJCDKLM $.
  $}

  ${
    bija.1 $e |- ( ph -> ( ps -> ch ) ) $.
    bija.2 $e |- ( -. ph -> ( -. ps -> ch ) ) $.
    $( Combine antecedents into a single biconditional.  This inference,
       reminiscent of ~ ja , is reversible:  The hypotheses can be deduced from
       the conclusion alone (see ~ pm5.1im and ~ pm5.21im ).  (Contributed by
       Wolf Lammen, 13-May-2013.) $)
    bija $p |- ( ( ph <-> ps ) -> ch ) $=
      ( wb biimpr syli wn biimp con3d pm2.61d ) ABFZBCBMACABGDHBIMAICMABABJKEHL
      $.
  $}

  $( Theorem *5.18 of [WhiteheadRussell] p. 124.  This theorem says that
     logical equivalence is the same as negated "exclusive or".  (Contributed
     by NM, 28-Jun-2002.)  (Proof shortened by Andrew Salmon, 20-Jun-2011.)
     (Proof shortened by Wolf Lammen, 15-Oct-2013.) $)
  pm5.18 $p |- ( ( ph <-> ps ) <-> -. ( ph <-> -. ps ) ) $=
    ( wb wn pm5.501 con1bid bitr2d nbn2 pm2.61i ) AABCZABDZCZDZCAMBJABLAKEFABEG
    ADZMKJNKLAKHFABHGI $.

  $( Two ways to express "exclusive or".  (Contributed by NM, 1-Jan-2006.) $)
  xor3 $p |- ( -. ( ph <-> ps ) <-> ( ph <-> -. ps ) ) $=
    ( wn wb pm5.18 con2bii bicomi ) ABCDZABDZCIHABEFG $.

  $( Move negation outside of biconditional.  Compare Theorem *5.18 of
     [WhiteheadRussell] p. 124.  (Contributed by NM, 27-Jun-2002.)  (Proof
     shortened by Wolf Lammen, 20-Sep-2013.) $)
  nbbn $p |- ( ( -. ph <-> ps ) <-> -. ( ph <-> ps ) ) $=
    ( wb wn xor3 con2bi bicom 3bitrri ) ABCDABDCBADZCIBCABEABFBIGH $.

  $( Associative law for the biconditional.  An axiom of system DS in Vladimir
     Lifschitz, "On calculational proofs", Annals of Pure and Applied Logic,
     113:207-224, 2002,
     ~ http://www.cs.utexas.edu/users/ai-lab/pub-view.php?PubID=26805 .
     Interestingly, this law was not included in _Principia Mathematica_ but
     was apparently first noted by Jan Lukasiewicz circa 1923.  (Contributed by
     NM, 8-Jan-2005.)  (Proof shortened by Juha Arpiainen, 19-Jan-2006.)
     (Proof shortened by Wolf Lammen, 21-Sep-2013.) $)
  biass $p |- ( ( ( ph <-> ps ) <-> ch ) <-> ( ph <-> ( ps <-> ch ) ) ) $=
    ( wb pm5.501 bibi1d bitr3d wn nbbn nbn2 syl5bbr pm2.61i ) AABDZCDZABCDZDZDA
    ONPABMCABEFAOEGAHZOHZNPRBHZCDQNBCIQSMCABJFKAOJGL $.

  $( Lukasiewicz's shortest axiom for equivalential calculus.  Storrs McCall,
     ed., _Polish Logic 1920-1939_ (Oxford, 1967), p. 96.  (Contributed by NM,
     10-Jan-2005.) $)
  biluk $p |- ( ( ph <-> ps ) <-> ( ( ch <-> ps ) <-> ( ph <-> ch ) ) ) $=
    ( wb bicom bibi1i biass bitri mpbi bitr4i ) ABDZCBACDZDZDZCBDLDKCDZMDKNDOBA
    DZCDMKPCABEFBACGHKCMGICBLGJ $.

  $( Theorem *5.19 of [WhiteheadRussell] p. 124.  (Contributed by NM,
     3-Jan-2005.) $)
  pm5.19 $p |- -. ( ph <-> -. ph ) $=
    ( wb wn biid pm5.18 mpbi ) AABAACBCADAAEF $.

  $( Logical equivalence of commuted antecedents.  Part of Theorem *4.87 of
     [WhiteheadRussell] p. 122.  (Contributed by NM, 11-May-1993.) $)
  bi2.04 $p |- ( ( ph -> ( ps -> ch ) ) <-> ( ps -> ( ph -> ch ) ) ) $=
    ( wi pm2.04 impbii ) ABCDDBACDDABCEBACEF $.

  $( Antecedent absorption implication.  Theorem *5.4 of [WhiteheadRussell]
     p. 125.  (Contributed by NM, 5-Aug-1993.) $)
  pm5.4 $p |- ( ( ph -> ( ph -> ps ) ) <-> ( ph -> ps ) ) $=
    ( wi pm2.43 ax-1 impbii ) AABCZCGABDGAEF $.

  $( Distributive law for implication.  Compare Theorem *5.41 of
     [WhiteheadRussell] p. 125.  (Contributed by NM, 5-Aug-1993.) $)
  imdi $p |- ( ( ph -> ( ps -> ch ) ) <->
               ( ( ph -> ps ) -> ( ph -> ch ) ) ) $=
    ( wi ax-2 pm2.86 impbii ) ABCDDABDACDDABCEABCFG $.

  $( Theorem *5.41 of [WhiteheadRussell] p. 125.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 12-Oct-2012.) $)
  pm5.41 $p |- ( ( ( ph -> ps ) -> ( ph -> ch ) ) <->
                ( ph -> ( ps -> ch ) ) ) $=
    ( wi imdi bicomi ) ABCDDABDACDDABCEF $.

  $( Theorem *4.8 of [WhiteheadRussell] p. 122.  (Contributed by NM,
     3-Jan-2005.) $)
  pm4.8 $p |- ( ( ph -> -. ph ) <-> -. ph ) $=
    ( wn wi pm2.01 ax-1 impbii ) AABZCGADGAEF $.

  $( A formula is equivalent to its negation implying it.  Theorem *4.81 of
     [WhiteheadRussell] p. 122.  Note that the second step, using ~ pm2.24 ,
     could also use ~ ax-1 .  (Contributed by NM, 3-Jan-2005.) $)
  pm4.81 $p |- ( ( -. ph -> ph ) <-> ph ) $=
    ( wn wi pm2.18 pm2.24 impbii ) ABACAADAAEF $.

  $( Simplify an implication between two implications when the antecedent of
     the first is a consequence of the antecedent of the second.  The reverse
     form is useful in producing the successor step in induction proofs.
     (Contributed by Paul Chapman, 22-Jun-2011.)  (Proof shortened by Wolf
     Lammen, 14-Sep-2013.) $)
  imim21b $p |- ( ( ps -> ph ) ->
           ( ( ( ph -> ch ) -> ( ps -> th ) ) <-> ( ps -> ( ch -> th ) ) ) ) $=
    ( wi bi2.04 wb pm5.5 imbi1d imim2i pm5.74d syl5bb ) ACEZBDEEBMDEZEBAEZBCDEZ
    EMBDFOBNPANPGBAMCDACHIJKL $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Logical conjunction
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  This section defines conjunction of two formulas, denoted by infix " ` /\ ` "
  and read "and".  It is defined in terms of implication and negation, which is
  possible in classical logic (but not in intuitionistic logic: see iset.mm).

  After the definition, we briefly introduce conversion of simple expressions
  to and from conjunction.  Two simple operations called importation ( ~ imp )
  and exportation ( ~ ex ) follow.  In the propositions-as-types
  interpretation, they correspond to uncurrying and currying respectively. They
  are foundational for this section.  Most of the theorems proved here trace
  back to them, mostly indirectly, in a layered fashion, where more complex
  expressions are built from simpler ones.  Here are some of these successive
  layers:
  importation and exportation,
  commutativity and associativity laws,
  adding antecedents and simplifying,
  conjunction of consequents,
  syllogisms,
  etc.

  As indicated in the "note on definitions" in the section comment for logical
  equivalence, some theorems containing only implication, negation and
  conjunction are placed in the section after disjunction since theirs proofs
  use disjunction (although this is not required since definitions are
  conservative, see said section comment).

$)

  $( Declare connective for conjunction ("and"). $)
  $c /\ $.  $( Wedge (read:  "and") $)

  $( Extend wff definition to include conjunction ("and"). $)
  wa $a wff ( ph /\ ps ) $.

  $( Define conjunction (logical "and").  Definition of [Margaris] p. 49.  When
     both the left and right operand are true, the result is true; when either
     is false, the result is false.  For example, it is true that
     ` ( 2 = 2 /\ 3 = 3 ) ` .  After we define the constant true ` T. `
     ( ~ df-tru ) and the constant false ` F. ` ( ~ df-fal ), we will be able
     to prove these truth table values: ` ( ( T. /\ T. ) <-> T. ) `
     ( ~ truantru ), ` ( ( T. /\ F. ) <-> F. ) ` ( ~ truanfal ),
     ` ( ( F. /\ T. ) <-> F. ) ` ( ~ falantru ), and
     ` ( ( F. /\ F. ) <-> F. ) ` ( ~ falanfal ).

     This is our first use of the biconditional connective in a definition; we
     use the biconditional connective in place of the traditional "<=def=>",
     which means the same thing, except that we can manipulate the
     biconditional connective directly in proofs rather than having to rely on
     an informal definition substitution rule.  Note that if we mechanically
     substitute ` -. ( ph -> -. ps ) ` for ` ( ph /\ ps ) ` , we end up with an
     instance of previously proved theorem ~ biid .  This is the justification
     for the definition, along with the fact that it introduces a new symbol
     ` /\ ` .  Contrast with ` \/ ` ( ~ df-or ), ` -> ` ( ~ wi ), ` -/\ `
     ( ~ df-nan ), and ` \/_ ` ( ~ df-xor ).  (Contributed by NM,
     5-Jan-1993.) $)
  df-an $a |- ( ( ph /\ ps ) <-> -. ( ph -> -. ps ) ) $.

  $( Theorem *4.63 of [WhiteheadRussell] p. 120.  (Contributed by NM,
     3-Jan-2005.) $)
  pm4.63 $p |- ( -. ( ph -> -. ps ) <-> ( ph /\ ps ) ) $=
    ( wa wn wi df-an bicomi ) ABCABDEDABFG $.

  $( Theorem *4.67 of [WhiteheadRussell] p. 120.  (Contributed by NM,
     3-Jan-2005.) $)
  pm4.67 $p |- ( -. ( -. ph -> -. ps ) <-> ( -. ph /\ ps ) ) $=
    ( wn pm4.63 ) ACBD $.

  $( Express an implication in terms of a negated conjunction.  (Contributed by
     NM, 9-Apr-1994.) $)
  imnan $p |- ( ( ph -> -. ps ) <-> -. ( ph /\ ps ) ) $=
    ( wa wn wi df-an con2bii ) ABCABDEABFG $.

  ${
    imnani.1 $e |- -. ( ph /\ ps ) $.
    $( Infer an implication from a negated conjunction.  (Contributed by Mario
       Carneiro, 28-Sep-2015.) $)
    imnani $p |- ( ph -> -. ps ) $=
      ( wn wi wa imnan mpbir ) ABDEABFDCABGH $.
  $}

  $( Implication in terms of conjunction and negation.  Theorem 3.4(27) of
     [Stoll] p. 176.  (Contributed by NM, 12-Mar-1993.)  (Proof shortened by
     Wolf Lammen, 30-Oct-2012.) $)
  iman $p |- ( ( ph -> ps ) <-> -. ( ph /\ -. ps ) ) $=
    ( wi wn wa notnotb imbi2i imnan bitri ) ABCABDZDZCAJEDBKABFGAJHI $.

  $( Law of noncontradiction.  Theorem *3.24 of [WhiteheadRussell] p. 111 (who
     call it the "law of contradiction").  (Contributed by NM, 16-Sep-1993.)
     (Proof shortened by Wolf Lammen, 24-Nov-2012.) $)
  pm3.24 $p |- -. ( ph /\ -. ph ) $=
    ( wi wn wa id iman mpbi ) AABAACDCAEAAFG $.

  $( Express a conjunction in terms of a negated implication.  (Contributed by
     NM, 2-Aug-1994.) $)
  annim $p |- ( ( ph /\ -. ps ) <-> -. ( ph -> ps ) ) $=
    ( wi wn wa iman con2bii ) ABCABDEABFG $.

  $( Theorem *4.61 of [WhiteheadRussell] p. 120.  (Contributed by NM,
     3-Jan-2005.) $)
  pm4.61 $p |- ( -. ( ph -> ps ) <-> ( ph /\ -. ps ) ) $=
    ( wn wa wi annim bicomi ) ABCDABECABFG $.

  $( Theorem *4.65 of [WhiteheadRussell] p. 120.  (Contributed by NM,
     3-Jan-2005.) $)
  pm4.65 $p |- ( -. ( -. ph -> ps ) <-> ( -. ph /\ -. ps ) ) $=
    ( wn pm4.61 ) ACBD $.

  ${
    imp.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Importation inference.  (Contributed by NM, 3-Jan-1993.)  (Proof
       shortened by Eric Schmidt, 22-Dec-2006.) $)
    imp $p |- ( ( ph /\ ps ) -> ch ) $=
      ( wa wn wi df-an impi sylbi ) ABEABFGFCABHABCDIJ $.

    $( Importation inference with commuted antecedents.  (Contributed by NM,
       25-May-2005.) $)
    impcom $p |- ( ( ps /\ ph ) -> ch ) $=
      ( com12 imp ) BACABCDEF $.
  $}

  ${
    con3dimp.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Variant of ~ con3d with importation.  (Contributed by Jonathan Ben-Naim,
       3-Jun-2011.) $)
    con3dimp $p |- ( ( ph /\ -. ch ) -> -. ps ) $=
      ( wn con3d imp ) ACEBEABCDFG $.
  $}

  ${
    mpnanrd.1 $e |- ( ph -> ps ) $.
    mpnanrd.2 $e |- ( ph -> -. ( ps /\ ch ) ) $.
    $( Eliminate the right side of a negated conjunction in an implication.
       (Contributed by ML, 17-Oct-2020.) $)
    mpnanrd $p |- ( ph -> -. ch ) $=
      ( wn wa wi imnan sylibr mpd ) ABCFZDABCGFBLHEBCIJK $.
  $}

  ${
    impd.1 $e |- ( ph -> ( ps -> ( ch -> th ) ) ) $.
    $( Importation deduction.  (Contributed by NM, 31-Mar-1994.) $)
    impd $p |- ( ph -> ( ( ps /\ ch ) -> th ) ) $=
      ( wa wi com3l imp com12 ) BCFADBCADGABCDEHIJ $.

    $( Importation deduction with commuted antecedents.  (Contributed by Peter
       Mazsa, 24-Sep-2022.)  (Proof shortened by Wolf Lammen, 22-Oct-2022.) $)
    impcomd $p |- ( ph -> ( ( ch /\ ps ) -> th ) ) $=
      ( com23 impd ) ACBDABCDEFG $.

    $( Obsolete version of ~ impcomd as of 22-Oct-2022.  (Contributed by Peter
       Mazsa, 24-Sep-2022.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    impcomdOLD $p |- ( ph -> ( ( ch /\ ps ) -> th ) ) $=
      ( wa wi com3l impcom com12 ) CBFADBCADGABCDEHIJ $.
  $}

  ${
    ex.1 $e |- ( ( ph /\ ps ) -> ch ) $.
    $( Exportation inference.  (This theorem used to be labeled "exp" but was
       changed to "ex" so as not to conflict with the math token "exp", per the
       June 2006 Metamath spec change.)  A translation of natural deduction
       rule ` -> ` I ( ` -> ` introduction), see ~ natded .  (Contributed by
       NM, 3-Jan-1993.)  (Proof shortened by Eric Schmidt, 22-Dec-2006.) $)
    ex $p |- ( ph -> ( ps -> ch ) ) $=
      ( wn wi wa df-an sylbir expi ) ABCABEFEABGCABHDIJ $.

    $( Exportation inference with commuted antecedents.  (Contributed by NM,
       25-May-2005.) $)
    expcom $p |- ( ps -> ( ph -> ch ) ) $=
      ( ex com12 ) ABCABCDEF $.
  $}

  ${
    expd.1 $e |- ( ph -> ( ( ps /\ ch ) -> th ) ) $.
    $( Commuted form of ~ expd .  (Contributed by Alan Sare, 18-Mar-2012.)
       Shorten ~ expd .  (Revised, 28-Jul-2022.) $)
    expdcom $p |- ( ps -> ( ch -> ( ph -> th ) ) ) $=
      ( wi wa com12 ex ) BCADFABCGDEHI $.

    $( Exportation deduction.  (Contributed by NM, 20-Aug-1993.)  (Proof
       shortened by Wolf Lammen, 28-Jul-2022.) $)
    expd $p |- ( ph -> ( ps -> ( ch -> th ) ) ) $=
      ( expdcom com3r ) BCADABCDEFG $.
  $}

  ${
    expcomd.1 $e |- ( ph -> ( ( ps /\ ch ) -> th ) ) $.
    $( Deduction form of ~ expcom .  (Contributed by Alan Sare,
       22-Jul-2012.) $)
    expcomd $p |- ( ph -> ( ch -> ( ps -> th ) ) ) $=
      ( expd com23 ) ABCDABCDEFG $.
  $}

  ${
    imp31.1 $e |- ( ph -> ( ps -> ( ch -> th ) ) ) $.
    $( An importation inference.  (Contributed by NM, 26-Apr-1994.) $)
    imp31 $p |- ( ( ( ph /\ ps ) /\ ch ) -> th ) $=
      ( wa wi imp ) ABFCDABCDGEHH $.

    $( An importation inference.  (Contributed by NM, 26-Apr-1994.) $)
    imp32 $p |- ( ( ph /\ ( ps /\ ch ) ) -> th ) $=
      ( wa impd imp ) ABCFDABCDEGH $.
  $}

  ${
    exp31.1 $e |- ( ( ( ph /\ ps ) /\ ch ) -> th ) $.
    $( An exportation inference.  (Contributed by NM, 26-Apr-1994.) $)
    exp31 $p |- ( ph -> ( ps -> ( ch -> th ) ) ) $=
      ( wi wa ex ) ABCDFABGCDEHH $.
  $}

  ${
    exp32.1 $e |- ( ( ph /\ ( ps /\ ch ) ) -> th ) $.
    $( An exportation inference.  (Contributed by NM, 26-Apr-1994.) $)
    exp32 $p |- ( ph -> ( ps -> ( ch -> th ) ) ) $=
      ( wa ex expd ) ABCDABCFDEGH $.
  $}

  ${
    imp4.1 $e |- ( ph -> ( ps -> ( ch -> ( th -> ta ) ) ) ) $.
    $( An importation inference.  (Contributed by NM, 26-Apr-1994.)  Shorten
       ~ imp4a .  (Revised by Wolf Lammen, 19-Jul-2021.) $)
    imp4b $p |- ( ( ph /\ ps ) -> ( ( ch /\ th ) -> ta ) ) $=
      ( wa wi imp impd ) ABGCDEABCDEHHFIJ $.

    $( An importation inference.  (Contributed by NM, 26-Apr-1994.)  (Proof
       shortened by Wolf Lammen, 19-Jul-2021.) $)
    imp4a $p |- ( ph -> ( ps -> ( ( ch /\ th ) -> ta ) ) ) $=
      ( wa wi imp4b ex ) ABCDGEHABCDEFIJ $.

    $( An importation inference.  (Contributed by NM, 26-Apr-1994.) $)
    imp4c $p |- ( ph -> ( ( ( ps /\ ch ) /\ th ) -> ta ) ) $=
      ( wa wi impd ) ABCGDEABCDEHFII $.

    $( An importation inference.  (Contributed by NM, 26-Apr-1994.) $)
    imp4d $p |- ( ph -> ( ( ps /\ ( ch /\ th ) ) -> ta ) ) $=
      ( wa imp4a impd ) ABCDGEABCDEFHI $.

    $( An importation inference.  (Contributed by NM, 26-Apr-1994.) $)
    imp41 $p |- ( ( ( ( ph /\ ps ) /\ ch ) /\ th ) -> ta ) $=
      ( wa wi imp imp31 ) ABGCDEABCDEHHFIJ $.

    $( An importation inference.  (Contributed by NM, 26-Apr-1994.) $)
    imp42 $p |- ( ( ( ph /\ ( ps /\ ch ) ) /\ th ) -> ta ) $=
      ( wa wi imp32 imp ) ABCGGDEABCDEHFIJ $.

    $( An importation inference.  (Contributed by NM, 26-Apr-1994.) $)
    imp43 $p |- ( ( ( ph /\ ps ) /\ ( ch /\ th ) ) -> ta ) $=
      ( wa imp4b imp ) ABGCDGEABCDEFHI $.

    $( An importation inference.  (Contributed by NM, 26-Apr-1994.) $)
    imp44 $p |- ( ( ph /\ ( ( ps /\ ch ) /\ th ) ) -> ta ) $=
      ( wa imp4c imp ) ABCGDGEABCDEFHI $.

    $( An importation inference.  (Contributed by NM, 26-Apr-1994.) $)
    imp45 $p |- ( ( ph /\ ( ps /\ ( ch /\ th ) ) ) -> ta ) $=
      ( wa imp4d imp ) ABCDGGEABCDEFHI $.
  $}

  ${
    exp4b.1 $e |- ( ( ph /\ ps ) -> ( ( ch /\ th ) -> ta ) ) $.
    $( An exportation inference.  (Contributed by NM, 26-Apr-1994.)  (Proof
       shortened by Wolf Lammen, 23-Nov-2012.)  Shorten ~ exp4a .  (Revised by
       Wolf Lammen, 20-Jul-2021.) $)
    exp4b $p |- ( ph -> ( ps -> ( ch -> ( th -> ta ) ) ) ) $=
      ( wi wa expd ex ) ABCDEGGABHCDEFIJ $.
  $}

  ${
    exp4a.1 $e |- ( ph -> ( ps -> ( ( ch /\ th ) -> ta ) ) ) $.
    $( An exportation inference.  (Contributed by NM, 26-Apr-1994.)  (Proof
       shortened by Wolf Lammen, 20-Jul-2021.) $)
    exp4a $p |- ( ph -> ( ps -> ( ch -> ( th -> ta ) ) ) ) $=
      ( wa wi imp exp4b ) ABCDEABCDGEHFIJ $.
  $}

  ${
    exp4c.1 $e |- ( ph -> ( ( ( ps /\ ch ) /\ th ) -> ta ) ) $.
    $( An exportation inference.  (Contributed by NM, 26-Apr-1994.) $)
    exp4c $p |- ( ph -> ( ps -> ( ch -> ( th -> ta ) ) ) ) $=
      ( wi wa expd ) ABCDEGABCHDEFII $.
  $}

  ${
    exp4d.1 $e |- ( ph -> ( ( ps /\ ( ch /\ th ) ) -> ta ) ) $.
    $( An exportation inference.  (Contributed by NM, 26-Apr-1994.) $)
    exp4d $p |- ( ph -> ( ps -> ( ch -> ( th -> ta ) ) ) ) $=
      ( wa expd exp4a ) ABCDEABCDGEFHI $.
  $}

  ${
    exp41.1 $e |- ( ( ( ( ph /\ ps ) /\ ch ) /\ th ) -> ta ) $.
    $( An exportation inference.  (Contributed by NM, 26-Apr-1994.) $)
    exp41 $p |- ( ph -> ( ps -> ( ch -> ( th -> ta ) ) ) ) $=
      ( wi wa ex exp31 ) ABCDEGABHCHDEFIJ $.
  $}

  ${
    exp42.1 $e |- ( ( ( ph /\ ( ps /\ ch ) ) /\ th ) -> ta ) $.
    $( An exportation inference.  (Contributed by NM, 26-Apr-1994.) $)
    exp42 $p |- ( ph -> ( ps -> ( ch -> ( th -> ta ) ) ) ) $=
      ( wi wa exp31 expd ) ABCDEGABCHDEFIJ $.
  $}

  ${
    exp43.1 $e |- ( ( ( ph /\ ps ) /\ ( ch /\ th ) ) -> ta ) $.
    $( An exportation inference.  (Contributed by NM, 26-Apr-1994.) $)
    exp43 $p |- ( ph -> ( ps -> ( ch -> ( th -> ta ) ) ) ) $=
      ( wa ex exp4b ) ABCDEABGCDGEFHI $.
  $}

  ${
    exp44.1 $e |- ( ( ph /\ ( ( ps /\ ch ) /\ th ) ) -> ta ) $.
    $( An exportation inference.  (Contributed by NM, 26-Apr-1994.) $)
    exp44 $p |- ( ph -> ( ps -> ( ch -> ( th -> ta ) ) ) ) $=
      ( wi wa exp32 expd ) ABCDEGABCHDEFIJ $.
  $}

  ${
    exp45.1 $e |- ( ( ph /\ ( ps /\ ( ch /\ th ) ) ) -> ta ) $.
    $( An exportation inference.  (Contributed by NM, 26-Apr-1994.) $)
    exp45 $p |- ( ph -> ( ps -> ( ch -> ( th -> ta ) ) ) ) $=
      ( wa exp32 exp4a ) ABCDEABCDGEFHI $.
  $}

  ${
    imp5.1 $e |- ( ph -> ( ps -> ( ch -> ( th -> ( ta -> et ) ) ) ) ) $.
    $( An importation inference.  (Contributed by Jeff Hankins, 7-Jul-2009.) $)
    imp5d $p |- ( ( ( ph /\ ps ) /\ ch ) -> ( ( th /\ ta ) -> et ) ) $=
      ( wa wi imp31 impd ) ABHCHDEFABCDEFIIGJK $.

    $( An importation inference.  (Contributed by Jeff Hankins, 7-Jul-2009.)
       (Proof shortened by Wolf Lammen, 2-Aug-2022.) $)
    imp5a $p |- ( ph -> ( ps -> ( ch -> ( ( th /\ ta ) -> et ) ) ) ) $=
      ( wa wi imp5d exp31 ) ABCDEHFIABCDEFGJK $.

    $( An importation inference.  (Contributed by Jeff Hankins, 7-Jul-2009.) $)
    imp5g $p |- ( ( ph /\ ps ) -> ( ( ( ch /\ th ) /\ ta ) -> et ) ) $=
      ( wa wi imp imp4c ) ABHCDEFABCDEFIIIGJK $.

    $( An importation inference.  (Contributed by Jeff Hankins, 7-Jul-2009.) $)
    imp55 $p |- ( ( ( ph /\ ( ps /\ ( ch /\ th ) ) ) /\ ta ) -> et ) $=
      ( wa wi imp4a imp42 ) ABCDHEFABCDEFIGJK $.

    $( An importation inference.  (Contributed by Jeff Hankins, 7-Jul-2009.) $)
    imp511 $p |- ( ( ph /\ ( ( ps /\ ( ch /\ th ) ) /\ ta ) ) -> et ) $=
      ( wa wi imp4a imp44 ) ABCDHEFABCDEFIGJK $.
  $}

  ${
    exp5c.1 $e |- ( ph -> ( ( ps /\ ch ) -> ( ( th /\ ta ) -> et ) ) ) $.
    $( An exportation inference.  (Contributed by Jeff Hankins, 7-Jul-2009.) $)
    exp5c $p |- ( ph -> ( ps -> ( ch -> ( th -> ( ta -> et ) ) ) ) ) $=
      ( wi wa exp4a expd ) ABCDEFHHABCIDEFGJK $.
  $}

  ${
    exp5j.1 $e |- ( ph -> ( ( ( ( ps /\ ch ) /\ th ) /\ ta ) -> et ) ) $.
    $( An exportation inference.  (Contributed by Jeff Hankins, 7-Jul-2009.) $)
    exp5j $p |- ( ph -> ( ps -> ( ch -> ( th -> ( ta -> et ) ) ) ) ) $=
      ( wi wa expd exp4c ) ABCDEFHABCIDIEFGJK $.
  $}

  ${
    exp5l.1 $e |- ( ph -> ( ( ( ps /\ ch ) /\ ( th /\ ta ) ) -> et ) ) $.
    $( An exportation inference.  (Contributed by Jeff Hankins, 7-Jul-2009.) $)
    exp5l $p |- ( ph -> ( ps -> ( ch -> ( th -> ( ta -> et ) ) ) ) ) $=
      ( wa expd exp5c ) ABCDEFABCHDEHFGIJ $.
  $}

  ${
    exp53.1 $e |- ( ( ( ( ph /\ ps ) /\ ( ch /\ th ) ) /\ ta ) -> et ) $.
    $( An exportation inference.  (Contributed by Jeff Hankins,
       30-Aug-2009.) $)
    exp53 $p |- ( ph -> ( ps -> ( ch -> ( th -> ( ta -> et ) ) ) ) ) $=
      ( wi wa ex exp43 ) ABCDEFHABICDIIEFGJK $.
  $}

  $( Theorem *3.3 (Exp) of [WhiteheadRussell] p. 112.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 24-Mar-2013.) $)
  pm3.3 $p |- ( ( ( ph /\ ps ) -> ch ) -> ( ph -> ( ps -> ch ) ) ) $=
    ( wa wi id expd ) ABDCEZABCHFG $.

  $( Theorem *3.31 (Imp) of [WhiteheadRussell] p. 112.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 24-Mar-2013.) $)
  pm3.31 $p |- ( ( ph -> ( ps -> ch ) ) -> ( ( ph /\ ps ) -> ch ) ) $=
    ( wi id impd ) ABCDDZABCGEF $.

  $( Import-export theorem.  Part of Theorem *4.87 of [WhiteheadRussell]
     p. 122.  (Contributed by NM, 10-Jan-1993.)  (Proof shortened by Wolf
     Lammen, 24-Mar-2013.) $)
  impexp $p |- ( ( ( ph /\ ps ) -> ch ) <-> ( ph -> ( ps -> ch ) ) ) $=
    ( wa wi pm3.3 pm3.31 impbii ) ABDCEABCEEABCFABCGH $.

  ${
    impancom.1 $e |- ( ( ph /\ ps ) -> ( ch -> th ) ) $.
    $( Mixed importation/commutation inference.  (Contributed by NM,
       22-Jun-2013.) $)
    impancom $p |- ( ( ph /\ ch ) -> ( ps -> th ) ) $=
      ( wi ex com23 imp ) ACBDFABCDABCDFEGHI $.
  $}

  ${
    expdimp.1 $e |- ( ph -> ( ( ps /\ ch ) -> th ) ) $.
    $( A deduction version of exportation, followed by importation.
       (Contributed by NM, 6-Sep-2008.) $)
    expdimp $p |- ( ( ph /\ ps ) -> ( ch -> th ) ) $=
      ( wi expd imp ) ABCDFABCDEGH $.
  $}

  ${
    expimpd.1 $e |- ( ( ph /\ ps ) -> ( ch -> th ) ) $.
    $( Exportation followed by a deduction version of importation.
       (Contributed by NM, 6-Sep-2008.) $)
    expimpd $p |- ( ph -> ( ( ps /\ ch ) -> th ) ) $=
      ( wi ex impd ) ABCDABCDFEGH $.
  $}

  ${
    impr.1 $e |- ( ( ph /\ ps ) -> ( ch -> th ) ) $.
    $( Import a wff into a right conjunct.  (Contributed by Jeff Hankins,
       30-Aug-2009.) $)
    impr $p |- ( ( ph /\ ( ps /\ ch ) ) -> th ) $=
      ( wi ex imp32 ) ABCDABCDFEGH $.
  $}

  ${
    impl.1 $e |- ( ph -> ( ( ps /\ ch ) -> th ) ) $.
    $( Export a wff from a left conjunct.  (Contributed by Mario Carneiro,
       9-Jul-2014.) $)
    impl $p |- ( ( ( ph /\ ps ) /\ ch ) -> th ) $=
      ( expd imp31 ) ABCDABCDEFG $.
  $}

  ${
    expr.1 $e |- ( ( ph /\ ( ps /\ ch ) ) -> th ) $.
    $( Export a wff from a right conjunct.  (Contributed by Jeff Hankins,
       30-Aug-2009.) $)
    expr $p |- ( ( ph /\ ps ) -> ( ch -> th ) ) $=
      ( wi exp32 imp ) ABCDFABCDEGH $.
  $}

  ${
    expl.1 $e |- ( ( ( ph /\ ps ) /\ ch ) -> th ) $.
    $( Export a wff from a left conjunct.  (Contributed by Jeff Hankins,
       28-Aug-2009.) $)
    expl $p |- ( ph -> ( ( ps /\ ch ) -> th ) ) $=
      ( exp31 impd ) ABCDABCDEFG $.
  $}

  ${
    ancoms.1 $e |- ( ( ph /\ ps ) -> ch ) $.
    $( Inference commuting conjunction in antecedent.  (Contributed by NM,
       21-Apr-1994.) $)
    ancoms $p |- ( ( ps /\ ph ) -> ch ) $=
      ( expcom imp ) BACABCDEF $.
  $}

  $( Theorem *3.22 of [WhiteheadRussell] p. 111.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 13-Nov-2012.) $)
  pm3.22 $p |- ( ( ph /\ ps ) -> ( ps /\ ph ) ) $=
    ( wa id ancoms ) BABACZFDE $.

  $( Commutative law for conjunction.  Theorem *4.3 of [WhiteheadRussell]
     p. 118.  (Contributed by NM, 25-Jun-1998.)  (Proof shortened by Wolf
     Lammen, 4-Nov-2012.) $)
  ancom $p |- ( ( ph /\ ps ) <-> ( ps /\ ph ) ) $=
    ( wa pm3.22 impbii ) ABCBACABDBADE $.

  ${
    ancomd.1 $e |- ( ph -> ( ps /\ ch ) ) $.
    $( Commutation of conjuncts in consequent.  (Contributed by Jeff Hankins,
       14-Aug-2009.) $)
    ancomd $p |- ( ph -> ( ch /\ ps ) ) $=
      ( wa ancom sylib ) ABCECBEDBCFG $.
  $}

  ${
    biancomi.1 $e |- ( ph <-> ( ch /\ ps ) ) $.
    $( Commuting conjunction in a biconditional.  (Contributed by Peter Mazsa,
       17-Jun-2018.) $)
    biancomi $p |- ( ph <-> ( ps /\ ch ) ) $=
      ( wa ancom bitr4i ) ACBEBCEDBCFG $.
  $}

  ${
    biancomd.1 $e |- ( ph -> ( ps <-> ( th /\ ch ) ) ) $.
    $( Commuting conjunction in a biconditional, deduction form.  (Contributed
       by Peter Mazsa, 3-Oct-2018.) $)
    biancomd $p |- ( ph -> ( ps <-> ( ch /\ th ) ) ) $=
      ( wa ancom syl6bb ) ABDCFCDFEDCGH $.
  $}

  $( Closed form of ~ ancoms .  (Contributed by Alan Sare, 31-Dec-2011.) $)
  ancomst $p |- ( ( ( ph /\ ps ) -> ch ) <-> ( ( ps /\ ph ) -> ch ) ) $=
    ( wa ancom imbi1i ) ABDBADCABEF $.

  ${
    ancomsd.1 $e |- ( ph -> ( ( ps /\ ch ) -> th ) ) $.
    $( Deduction commuting conjunction in antecedent.  (Contributed by NM,
       12-Dec-2004.) $)
    ancomsd $p |- ( ph -> ( ( ch /\ ps ) -> th ) ) $=
      ( wa ancom syl5bi ) CBFBCFADCBGEH $.
  $}

  ${
    anasss.1 $e |- ( ( ( ph /\ ps ) /\ ch ) -> th ) $.
    $( Associative law for conjunction applied to antecedent (eliminates
       syllogism).  (Contributed by NM, 15-Nov-2002.) $)
    anasss $p |- ( ( ph /\ ( ps /\ ch ) ) -> th ) $=
      ( exp31 imp32 ) ABCDABCDEFG $.
  $}

  ${
    anassrs.1 $e |- ( ( ph /\ ( ps /\ ch ) ) -> th ) $.
    $( Associative law for conjunction applied to antecedent (eliminates
       syllogism).  (Contributed by NM, 15-Nov-2002.) $)
    anassrs $p |- ( ( ( ph /\ ps ) /\ ch ) -> th ) $=
      ( exp32 imp31 ) ABCDABCDEFG $.
  $}

  $( Associative law for conjunction.  Theorem *4.32 of [WhiteheadRussell]
     p. 118.  (Contributed by NM, 21-Jun-1993.)  (Proof shortened by Wolf
     Lammen, 24-Nov-2012.) $)
  anass $p |- ( ( ( ph /\ ps ) /\ ch ) <-> ( ph /\ ( ps /\ ch ) ) ) $=
    ( wa id anassrs anasss impbii ) ABDCDZABCDDZABCJJEFABCIIEGH $.

  $( Join antecedents with conjunction ("conjunction introduction").  Theorem
     *3.2 of [WhiteheadRussell] p. 111.  Its associated inference is ~ pm3.2i
     and its associated deduction is ~ jca (and the double deduction is
     ~ jcad ).  See ~ pm3.2im for a version using only implication and
     negation.  (Contributed by NM, 5-Jan-1993.)  (Proof shortened by Wolf
     Lammen, 12-Nov-2012.) $)
  pm3.2 $p |- ( ph -> ( ps -> ( ph /\ ps ) ) ) $=
    ( wa id ex ) ABABCZFDE $.

  ${
    pm3.2i.1 $e |- ph $.
    pm3.2i.2 $e |- ps $.
    $( Infer conjunction of premises.  Inference associated with ~ pm3.2 .  Its
       associated deduction is ~ jca (and the double deduction is ~ jcad ).
       (Contributed by NM, 21-Jun-1993.) $)
    pm3.2i $p |- ( ph /\ ps ) $=
      ( wa pm3.2 mp2 ) ABABECDABFG $.
  $}

  $( Join antecedents with conjunction.  Theorem *3.21 of [WhiteheadRussell]
     p. 111.  (Contributed by NM, 5-Aug-1993.) $)
  pm3.21 $p |- ( ph -> ( ps -> ( ps /\ ph ) ) ) $=
    ( wa id expcom ) BABACZFDE $.

  $( Nested conjunction of antecedents.  (Contributed by NM, 4-Jan-1993.) $)
  pm3.43i $p |- ( ( ph -> ps )
      -> ( ( ph -> ch ) -> ( ph -> ( ps /\ ch ) ) ) ) $=
    ( wa pm3.2 imim3i ) BCBCDABCEF $.

  $( Theorem *3.43 (Comp) of [WhiteheadRussell] p. 113.  (Contributed by NM,
     3-Jan-2005.) $)
  pm3.43 $p |- ( ( ( ph -> ps ) /\ ( ph -> ch ) )
      -> ( ph -> ( ps /\ ch ) ) ) $=
    ( wi wa pm3.43i imp ) ABDACDABCEDABCFG $.

  $( A theorem similar to the standard definition of the biconditional.
     Definition of [Margaris] p. 49.  (Contributed by NM, 24-Jan-1993.) $)
  dfbi2 $p |- ( ( ph <-> ps ) <-> ( ( ph -> ps ) /\ ( ps -> ph ) ) ) $=
    ( wb wi wn wa dfbi1 df-an bitr4i ) ABCABDZBADZEDEJKFABGJKHI $.

  $( Definition ~ df-bi rewritten in an abbreviated form to help intuitive
     understanding of that definition.  Note that it is a conjunction of two
     implications; one which asserts properties that follow from the
     biconditional and one which asserts properties that imply the
     biconditional.  (Contributed by NM, 15-Aug-2008.) $)
  dfbi $p |- ( ( ( ph <-> ps ) -> ( ( ph -> ps ) /\ ( ps -> ph ) ) )
        /\ ( ( ( ph -> ps ) /\ ( ps -> ph ) ) -> ( ph <-> ps ) ) ) $=
    ( wb wi wa dfbi2 biimpi biimpri pm3.2i ) ABCZABDBADEZDKJDJKABFZGJKLHI $.

  ${
    biimpa.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Importation inference from a logical equivalence.  (Contributed by NM,
       3-May-1994.) $)
    biimpa $p |- ( ( ph /\ ps ) -> ch ) $=
      ( biimpd imp ) ABCABCDEF $.

    $( Importation inference from a logical equivalence.  (Contributed by NM,
       3-May-1994.) $)
    biimpar $p |- ( ( ph /\ ch ) -> ps ) $=
      ( biimprd imp ) ACBABCDEF $.

    $( Importation inference from a logical equivalence.  (Contributed by NM,
       3-May-1994.) $)
    biimpac $p |- ( ( ps /\ ph ) -> ch ) $=
      ( biimpcd imp ) BACABCDEF $.

    $( Importation inference from a logical equivalence.  (Contributed by NM,
       3-May-1994.) $)
    biimparc $p |- ( ( ch /\ ph ) -> ps ) $=
      ( biimprcd imp ) CABABCDEF $.
  $}

  ${
    adantr.1 $e |- ( ph -> ps ) $.
    $( Inference adding a conjunct to the right of an antecedent.  (Contributed
       by NM, 30-Aug-1993.) $)
    adantr $p |- ( ( ph /\ ch ) -> ps ) $=
      ( a1d imp ) ACBABCDEF $.
  $}

  ${
    adantl.1 $e |- ( ph -> ps ) $.
    $( Inference adding a conjunct to the left of an antecedent.  (Contributed
       by NM, 30-Aug-1993.)  (Proof shortened by Wolf Lammen, 23-Nov-2012.) $)
    adantl $p |- ( ( ch /\ ph ) -> ps ) $=
      ( adantr ancoms ) ACBABCDEF $.
  $}

  $( Elimination of a conjunct.  Theorem *3.26 (Simp) of [WhiteheadRussell]
     p. 112.  (Contributed by NM, 3-Jan-1993.)  (Proof shortened by Wolf
     Lammen, 14-Jun-2022.) $)
  simpl $p |- ( ( ph /\ ps ) -> ph ) $=
    ( id adantr ) AABACD $.

  ${
    simpli.1 $e |- ( ph /\ ps ) $.
    $( Inference eliminating a conjunct.  (Contributed by NM, 15-Jun-1994.) $)
    simpli $p |- ph $=
      ( wa simpl ax-mp ) ABDACABEF $.
  $}

  $( Elimination of a conjunct.  Theorem *3.27 (Simp) of [WhiteheadRussell]
     p. 112.  (Contributed by NM, 3-Jan-1993.)  (Proof shortened by Wolf
     Lammen, 14-Jun-2022.) $)
  simpr $p |- ( ( ph /\ ps ) -> ps ) $=
    ( id adantl ) BBABCD $.

  ${
    simpri.1 $e |- ( ph /\ ps ) $.
    $( Inference eliminating a conjunct.  (Contributed by NM, 15-Jun-1994.) $)
    simpri $p |- ps $=
      ( wa simpr ax-mp ) ABDBCABEF $.
  $}

  ${
    intnan.1 $e |- -. ph $.
    $( Introduction of conjunct inside of a contradiction.  (Contributed by NM,
       16-Sep-1993.) $)
    intnan $p |- -. ( ps /\ ph ) $=
      ( wa simpr mto ) BADACBAEF $.

    $( Introduction of conjunct inside of a contradiction.  (Contributed by NM,
       3-Apr-1995.) $)
    intnanr $p |- -. ( ph /\ ps ) $=
      ( wa simpl mto ) ABDACABEF $.
  $}

  ${
    intnand.1 $e |- ( ph -> -. ps ) $.
    $( Introduction of conjunct inside of a contradiction.  (Contributed by NM,
       10-Jul-2005.) $)
    intnand $p |- ( ph -> -. ( ch /\ ps ) ) $=
      ( wa simpr nsyl ) ABCBEDCBFG $.

    $( Introduction of conjunct inside of a contradiction.  (Contributed by NM,
       10-Jul-2005.) $)
    intnanrd $p |- ( ph -> -. ( ps /\ ch ) ) $=
      ( wa simpl nsyl ) ABBCEDBCFG $.
  $}

  ${
    adantld.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Deduction adding a conjunct to the left of an antecedent.  (Contributed
       by NM, 4-May-1994.)  (Proof shortened by Wolf Lammen, 20-Dec-2012.) $)
    adantld $p |- ( ph -> ( ( th /\ ps ) -> ch ) ) $=
      ( wa simpr syl5 ) DBFBACDBGEH $.
  $}

  ${
    adantrd.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Deduction adding a conjunct to the right of an antecedent.  (Contributed
       by NM, 4-May-1994.) $)
    adantrd $p |- ( ph -> ( ( ps /\ th ) -> ch ) ) $=
      ( wa simpl syl5 ) BDFBACBDGEH $.
  $}

  $( Theorem *3.41 of [WhiteheadRussell] p. 113.  (Contributed by NM,
     3-Jan-2005.) $)
  pm3.41 $p |- ( ( ph -> ch ) -> ( ( ph /\ ps ) -> ch ) ) $=
    ( wa simpl imim1i ) ABDACABEF $.

  $( Theorem *3.42 of [WhiteheadRussell] p. 113.  (Contributed by NM,
     3-Jan-2005.) $)
  pm3.42 $p |- ( ( ps -> ch ) -> ( ( ph /\ ps ) -> ch ) ) $=
    ( wa simpr imim1i ) ABDBCABEF $.

  ${
    simpld.1 $e |- ( ph -> ( ps /\ ch ) ) $.
    $( Deduction eliminating a conjunct.  A translation of natural deduction
       rule ` /\ ` EL ( ` /\ ` elimination left), see ~ natded .  (Contributed
       by NM, 26-May-1993.) $)
    simpld $p |- ( ph -> ps ) $=
      ( wa simpl syl ) ABCEBDBCFG $.
  $}

  ${
    simprd.1 $e |- ( ph -> ( ps /\ ch ) ) $.
    $( Deduction eliminating a conjunct.  (Contributed by NM, 14-May-1993.)  A
       translation of natural deduction rule ` /\ ` ER ( ` /\ ` elimination
       right), see ~ natded .  (Proof shortened by Wolf Lammen, 3-Oct-2013.) $)
    simprd $p |- ( ph -> ch ) $=
      ( ancomd simpld ) ACBABCDEF $.
  $}

  ${
    simprbi.1 $e |- ( ph <-> ( ps /\ ch ) ) $.
    $( Deduction eliminating a conjunct.  (Contributed by NM, 27-May-1998.) $)
    simprbi $p |- ( ph -> ch ) $=
      ( wa biimpi simprd ) ABCABCEDFG $.
  $}

  ${
    simplbi.1 $e |- ( ph <-> ( ps /\ ch ) ) $.
    $( Deduction eliminating a conjunct.  (Contributed by NM, 27-May-1998.) $)
    simplbi $p |- ( ph -> ps ) $=
      ( wa biimpi simpld ) ABCABCEDFG $.
  $}

  ${
    pm3.26bda.1 $e |- ( ph -> ( ps <-> ( ch /\ th ) ) ) $.
    $( Deduction eliminating a conjunct.  (Contributed by NM, 22-Oct-2007.) $)
    simprbda $p |- ( ( ph /\ ps ) -> ch ) $=
      ( wa biimpa simpld ) ABFCDABCDFEGH $.

    $( Deduction eliminating a conjunct.  (Contributed by NM, 22-Oct-2007.) $)
    simplbda $p |- ( ( ph /\ ps ) -> th ) $=
      ( wa biimpa simprd ) ABFCDABCDFEGH $.
  $}

  ${
    simplbi2.1 $e |- ( ph <-> ( ps /\ ch ) ) $.
    $( Deduction eliminating a conjunct.  (Contributed by Alan Sare,
       31-Dec-2011.) $)
    simplbi2 $p |- ( ps -> ( ch -> ph ) ) $=
      ( wa biimpri ex ) BCAABCEDFG $.
  $}

  $( Closed form of ~ simplbi2com .  (Contributed by Alan Sare,
     22-Jul-2012.) $)
  simplbi2comt $p |- ( ( ph <-> ( ps /\ ch ) ) -> ( ch -> ( ps -> ph ) ) ) $=
    ( wa wb biimpr expcomd ) ABCDZEBCAAHFG $.

  ${
    simplbi2com.1 $e |- ( ph <-> ( ps /\ ch ) ) $.
    $( A deduction eliminating a conjunct, similar to ~ simplbi2 .
       (Contributed by Alan Sare, 22-Jul-2012.)  (Proof shortened by Wolf
       Lammen, 10-Nov-2012.) $)
    simplbi2com $p |- ( ch -> ( ps -> ph ) ) $=
      ( simplbi2 com12 ) BCAABCDEF $.
  $}

  ${
    simpl2im.1 $e |- ( ph -> ( ps /\ ch ) ) $.
    simpl2im.2 $e |- ( ch -> th ) $.
    $( Implication from an eliminated conjunct implied by the antecedent.
       (Contributed by BJ/AV, 5-Apr-2021.)  (Proof shortened by Wolf Lammen,
       26-Mar-2022.) $)
    simpl2im $p |- ( ph -> th ) $=
      ( simprd syl ) ACDABCEGFH $.
  $}

  ${
    simplbiim.1 $e |- ( ph <-> ( ps /\ ch ) ) $.
    simplbiim.2 $e |- ( ch -> th ) $.
    $( Implication from an eliminated conjunct equivalent to the antecedent.
       (Contributed by Jonathan Ben-Naim, 3-Jun-2011.)  (Proof shortened by
       Wolf Lammen, 26-Mar-2022.) $)
    simplbiim $p |- ( ph -> th ) $=
      ( simprbi syl ) ACDABCEGFH $.
  $}

  ${
    impel.1 $e |- ( ph -> ( ps -> ch ) ) $.
    impel.2 $e |- ( th -> ps ) $.
    $( An inference for implication elimination.  (Contributed by Giovanni
       Mascellani, 23-May-2019.)  (Proof shortened by Wolf Lammen,
       2-Sep-2020.) $)
    impel $p |- ( ( ph /\ th ) -> ch ) $=
      ( syl5 imp ) ADCDBACFEGH $.
  $}

  ${
    mpan9.1 $e |- ( ph -> ps ) $.
    mpan9.2 $e |- ( ch -> ( ps -> th ) ) $.
    $( Modus ponens conjoining dissimilar antecedents.  (Contributed by NM,
       1-Feb-2008.)  (Proof shortened by Andrew Salmon, 7-May-2011.) $)
    mpan9 $p |- ( ( ph /\ ch ) -> th ) $=
      ( syl5 impcom ) CADABCDEFGH $.
  $}

  ${
    sylan9.1 $e |- ( ph -> ( ps -> ch ) ) $.
    sylan9.2 $e |- ( th -> ( ch -> ta ) ) $.
    $( Nested syllogism inference conjoining dissimilar antecedents.
       (Contributed by NM, 14-May-1993.)  (Proof shortened by Andrew Salmon,
       7-May-2011.) $)
    sylan9 $p |- ( ( ph /\ th ) -> ( ps -> ta ) ) $=
      ( wi syl9 imp ) ADBEHABCDEFGIJ $.
  $}

  ${
    sylan9r.1 $e |- ( ph -> ( ps -> ch ) ) $.
    sylan9r.2 $e |- ( th -> ( ch -> ta ) ) $.
    $( Nested syllogism inference conjoining dissimilar antecedents.
       (Contributed by NM, 14-May-1993.) $)
    sylan9r $p |- ( ( th /\ ph ) -> ( ps -> ta ) ) $=
      ( wi syl9r imp ) DABEHABCDEFGIJ $.
  $}

  ${
    sylan9bb.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    sylan9bb.2 $e |- ( th -> ( ch <-> ta ) ) $.
    $( Nested syllogism inference conjoining dissimilar antecedents.
       (Contributed by NM, 4-Mar-1995.) $)
    sylan9bb $p |- ( ( ph /\ th ) -> ( ps <-> ta ) ) $=
      ( wa wb adantr adantl bitrd ) ADHBCEABCIDFJDCEIAGKL $.
  $}

  ${
    sylan9bbr.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    sylan9bbr.2 $e |- ( th -> ( ch <-> ta ) ) $.
    $( Nested syllogism inference conjoining dissimilar antecedents.
       (Contributed by NM, 4-Mar-1995.) $)
    sylan9bbr $p |- ( ( th /\ ph ) -> ( ps <-> ta ) ) $=
      ( wb sylan9bb ancoms ) ADBEHABCDEFGIJ $.
  $}

  ${
    jca.1 $e |- ( ph -> ps ) $.
    jca.2 $e |- ( ph -> ch ) $.
    $( Deduce conjunction of the consequents of two implications ("join
       consequents with 'and'").  Deduction form of ~ pm3.2 and ~ pm3.2i .  Its
       associated deduction is ~ jcad .  Equivalent to the natural deduction
       rule ` /\ ` I ( ` /\ ` introduction), see ~ natded .  (Contributed by
       NM, 3-Jan-1993.)  (Proof shortened by Wolf Lammen, 25-Oct-2012.) $)
    jca $p |- ( ph -> ( ps /\ ch ) ) $=
      ( wa pm3.2 sylc ) ABCBCFDEBCGH $.
  $}

  ${
    jcad.1 $e |- ( ph -> ( ps -> ch ) ) $.
    jcad.2 $e |- ( ph -> ( ps -> th ) ) $.
    $( Deduction conjoining the consequents of two implications.  Deduction
       form of ~ jca and double deduction form of ~ pm3.2 and ~ pm3.2i .
       (Contributed by NM, 15-Jul-1993.)  (Proof shortened by Wolf Lammen,
       23-Jul-2013.) $)
    jcad $p |- ( ph -> ( ps -> ( ch /\ th ) ) ) $=
      ( wa pm3.2 syl6c ) ABCDCDGEFCDHI $.
  $}

  ${
    jca2.1 $e |- ( ph -> ( ps -> ch ) ) $.
    jca2.2 $e |- ( ps -> th ) $.
    $( Inference conjoining the consequents of two implications.  (Contributed
       by Rodolfo Medina, 12-Oct-2010.) $)
    jca2 $p |- ( ph -> ( ps -> ( ch /\ th ) ) ) $=
      ( wi a1i jcad ) ABCDEBDGAFHI $.
  $}

  ${
    jca31.1 $e |- ( ph -> ps ) $.
    jca31.2 $e |- ( ph -> ch ) $.
    jca31.3 $e |- ( ph -> th ) $.
    $( Join three consequents.  (Contributed by Jeff Hankins, 1-Aug-2009.) $)
    jca31 $p |- ( ph -> ( ( ps /\ ch ) /\ th ) ) $=
      ( wa jca ) ABCHDABCEFIGI $.

    $( Join three consequents.  (Contributed by FL, 1-Aug-2009.) $)
    jca32 $p |- ( ph -> ( ps /\ ( ch /\ th ) ) ) $=
      ( wa jca ) ABCDHEACDFGII $.
  $}

  ${
    jcai.1 $e |- ( ph -> ps ) $.
    jcai.2 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Deduction replacing implication with conjunction.  (Contributed by NM,
       15-Jul-1993.) $)
    jcai $p |- ( ph -> ( ps /\ ch ) ) $=
      ( mpd jca ) ABCDABCDEFG $.
  $}

  $( Distributive law for implication over conjunction.  Compare Theorem *4.76
     of [WhiteheadRussell] p. 121.  (Contributed by NM, 3-Apr-1994.)  (Proof
     shortened by Wolf Lammen, 27-Nov-2013.) $)
  jcab $p |- ( ( ph -> ( ps /\ ch ) )
      <-> ( ( ph -> ps ) /\ ( ph -> ch ) ) ) $=
    ( wa wi simpl imim2i simpr jca pm3.43 impbii ) ABCDZEZABEZACEZDMNOLBABCFGLC
    ABCHGIABCJK $.

  $( Theorem *4.76 of [WhiteheadRussell] p. 121.  (Contributed by NM,
     3-Jan-2005.) $)
  pm4.76 $p |- ( ( ( ph -> ps ) /\ ( ph -> ch ) ) <->
                ( ph -> ( ps /\ ch ) ) ) $=
    ( wa wi jcab bicomi ) ABCDEABEACEDABCFG $.

  ${
    jctil.1 $e |- ( ph -> ps ) $.
    jctil.2 $e |- ch $.
    $( Inference conjoining a theorem to left of consequent in an implication.
       (Contributed by NM, 31-Dec-1993.) $)
    jctil $p |- ( ph -> ( ch /\ ps ) ) $=
      ( a1i jca ) ACBCAEFDG $.

    $( Inference conjoining a theorem to right of consequent in an implication.
       (Contributed by NM, 31-Dec-1993.) $)
    jctir $p |- ( ph -> ( ps /\ ch ) ) $=
      ( a1i jca ) ABCDCAEFG $.
  $}

  ${
    jccir.1 $e |- ( ph -> ps ) $.
    jccir.2 $e |- ( ps -> ch ) $.
    $( Inference conjoining a consequent of a consequent to the right of the
       consequent in an implication.  See also ~ ex-natded5.3i .  (Contributed
       by Mario Carneiro, 9-Feb-2017.)  (Revised by AV, 20-Aug-2019.) $)
    jccir $p |- ( ph -> ( ps /\ ch ) ) $=
      ( syl jca ) ABCDABCDEFG $.

    $( Inference conjoining a consequent of a consequent to the left of the
       consequent in an implication.  Remark:  One can also prove this theorem
       using ~ syl and ~ jca (as done in ~ jccir ), which would be 4 bytes
       shorter, but one step longer than the current proof.
       (Proof modification is discouraged.)  (Contributed by AV,
       20-Aug-2019.) $)
    jccil $p |- ( ph -> ( ch /\ ps ) ) $=
      ( jccir ancomd ) ABCABCDEFG $.
  $}

  ${
    jctl.1 $e |- ps $.
    $( Inference conjoining a theorem to the left of a consequent.
       (Contributed by NM, 31-Dec-1993.)  (Proof shortened by Wolf Lammen,
       24-Oct-2012.) $)
    jctl $p |- ( ph -> ( ps /\ ph ) ) $=
      ( id jctil ) AABADCE $.

    $( Inference conjoining a theorem to the right of a consequent.
       (Contributed by NM, 18-Aug-1993.)  (Proof shortened by Wolf Lammen,
       24-Oct-2012.) $)
    jctr $p |- ( ph -> ( ph /\ ps ) ) $=
      ( id jctir ) AABADCE $.
  $}

  ${
    jctild.1 $e |- ( ph -> ( ps -> ch ) ) $.
    jctild.2 $e |- ( ph -> th ) $.
    $( Deduction conjoining a theorem to left of consequent in an implication.
       (Contributed by NM, 21-Apr-2005.) $)
    jctild $p |- ( ph -> ( ps -> ( th /\ ch ) ) ) $=
      ( a1d jcad ) ABDCADBFGEH $.
  $}

  ${
    jctird.1 $e |- ( ph -> ( ps -> ch ) ) $.
    jctird.2 $e |- ( ph -> th ) $.
    $( Deduction conjoining a theorem to right of consequent in an implication.
       (Contributed by NM, 21-Apr-2005.) $)
    jctird $p |- ( ph -> ( ps -> ( ch /\ th ) ) ) $=
      ( a1d jcad ) ABCDEADBFGH $.
  $}

  $( Introduction of antecedent as conjunct.  Theorem *4.73 of
     [WhiteheadRussell] p. 121.  (Contributed by NM, 30-Mar-1994.) $)
  iba $p |- ( ph -> ( ps <-> ( ps /\ ph ) ) ) $=
    ( wa pm3.21 simpl impbid1 ) ABBACABDBAEF $.

  $( Introduction of antecedent as conjunct.  (Contributed by NM,
     5-Dec-1995.) $)
  ibar $p |- ( ph -> ( ps <-> ( ph /\ ps ) ) ) $=
    ( wa pm3.2 simpr impbid1 ) ABABCABDABEF $.

  ${
    biantru.1 $e |- ph $.
    $( A wff is equivalent to its conjunction with truth.  (Contributed by NM,
       26-May-1993.) $)
    biantru $p |- ( ps <-> ( ps /\ ph ) ) $=
      ( wa wb iba ax-mp ) ABBADECABFG $.
  $}

  ${
    biantrur.1 $e |- ph $.
    $( A wff is equivalent to its conjunction with truth.  (Contributed by NM,
       3-Aug-1994.) $)
    biantrur $p |- ( ps <-> ( ph /\ ps ) ) $=
      ( wa wb ibar ax-mp ) ABABDECABFG $.
  $}

  ${
    biantrud.1 $e |- ( ph -> ps ) $.
    $( A wff is equivalent to its conjunction with truth.  (Contributed by NM,
       2-Aug-1994.)  (Proof shortened by Wolf Lammen, 23-Oct-2013.) $)
    biantrud $p |- ( ph -> ( ch <-> ( ch /\ ps ) ) ) $=
      ( wa wb iba syl ) ABCCBEFDBCGH $.

    $( A wff is equivalent to its conjunction with truth.  (Contributed by NM,
       1-May-1995.)  (Proof shortened by Andrew Salmon, 7-May-2011.) $)
    biantrurd $p |- ( ph -> ( ch <-> ( ps /\ ch ) ) ) $=
      ( wa wb ibar syl ) ABCBCEFDBCGH $.
  $}

  ${
    bianfi.1 $e |- -. ph $.
    $( A wff conjoined with falsehood is false.  (Contributed by NM,
       21-Jun-1993.)  (Proof shortened by Wolf Lammen, 26-Nov-2012.) $)
    bianfi $p |- ( ph <-> ( ps /\ ph ) ) $=
      ( wa intnan 2false ) ABADCABCEF $.
  $}

  ${
    bianfd.1 $e |- ( ph -> -. ps ) $.
    $( A wff conjoined with falsehood is false.  (Contributed by NM,
       27-Mar-1995.)  (Proof shortened by Wolf Lammen, 5-Nov-2013.) $)
    bianfd $p |- ( ph -> ( ps <-> ( ps /\ ch ) ) ) $=
      ( wa intnanrd 2falsed ) ABBCEDABCDFG $.
  $}

  ${
    baib.1 $e |- ( ph <-> ( ps /\ ch ) ) $.
    $( Move conjunction outside of biconditional.  (Contributed by NM,
       13-May-1999.) $)
    baib $p |- ( ps -> ( ph <-> ch ) ) $=
      ( wa ibar syl6rbbr ) BCBCEABCFDG $.

    $( Move conjunction outside of biconditional.  (Contributed by NM,
       11-Jul-1994.) $)
    baibr $p |- ( ps -> ( ch <-> ph ) ) $=
      ( baib bicomd ) BACABCDEF $.

    $( Move conjunction outside of biconditional.  (Contributed by Mario
       Carneiro, 11-Sep-2015.)  (Proof shortened by Wolf Lammen,
       19-Jan-2020.) $)
    rbaibr $p |- ( ch -> ( ps <-> ph ) ) $=
      ( wa iba syl6bbr ) CBBCEACBFDG $.

    $( Move conjunction outside of biconditional.  (Contributed by Mario
       Carneiro, 11-Sep-2015.)  (Proof shortened by Wolf Lammen,
       19-Jan-2020.) $)
    rbaib $p |- ( ch -> ( ph <-> ps ) ) $=
      ( rbaibr bicomd ) CBAABCDEF $.
  $}

  ${
    baibd.1 $e |- ( ph -> ( ps <-> ( ch /\ th ) ) ) $.
    $( Move conjunction outside of biconditional.  (Contributed by Mario
       Carneiro, 11-Sep-2015.) $)
    baibd $p |- ( ( ph /\ ch ) -> ( ps <-> th ) ) $=
      ( wa ibar bicomd sylan9bb ) ABCDFZCDECDJCDGHI $.

    $( Move conjunction outside of biconditional.  (Contributed by Mario
       Carneiro, 11-Sep-2015.) $)
    rbaibd $p |- ( ( ph /\ th ) -> ( ps <-> ch ) ) $=
      ( wa iba bicomd sylan9bb ) ABCDFZDCEDCJDCGHI $.
  $}

  ${
    bianabs.1 $e |- ( ph -> ( ps <-> ( ph /\ ch ) ) ) $.
    $( Absorb a hypothesis into the second member of a biconditional.
       (Contributed by FL, 15-Feb-2007.) $)
    bianabs $p |- ( ph -> ( ps <-> ch ) ) $=
      ( wa ibar bitr4d ) ABACECDACFG $.
  $}

  $( Theorem *5.44 of [WhiteheadRussell] p. 125.  (Contributed by NM,
     3-Jan-2005.) $)
  pm5.44 $p |- ( ( ph -> ps ) -> ( ( ph -> ch ) <->
                ( ph -> ( ps /\ ch ) ) ) ) $=
    ( wa wi jcab baibr ) ABCDEABEACEABCFG $.

  $( Theorem *5.42 of [WhiteheadRussell] p. 125.  (Contributed by NM,
     3-Jan-2005.) $)
  pm5.42 $p |- ( ( ph -> ( ps -> ch ) ) <->
                ( ph -> ( ps -> ( ph /\ ch ) ) ) ) $=
    ( wi wa ibar imbi2d pm5.74i ) ABCDBACEZDACIBACFGH $.

  $( Conjoin antecedent to left of consequent.  (Contributed by NM,
     15-Aug-1994.) $)
  ancl $p |- ( ( ph -> ps ) -> ( ph -> ( ph /\ ps ) ) ) $=
    ( wa pm3.2 a2i ) ABABCABDE $.

  $( Conjoin antecedent to left of consequent.  Theorem *4.7 of
     [WhiteheadRussell] p. 120.  (Contributed by NM, 25-Jul-1999.)  (Proof
     shortened by Wolf Lammen, 24-Mar-2013.) $)
  anclb $p |- ( ( ph -> ps ) <-> ( ph -> ( ph /\ ps ) ) ) $=
    ( wa ibar pm5.74i ) ABABCABDE $.

  $( Conjoin antecedent to right of consequent.  (Contributed by NM,
     15-Aug-1994.) $)
  ancr $p |- ( ( ph -> ps ) -> ( ph -> ( ps /\ ph ) ) ) $=
    ( wa pm3.21 a2i ) ABBACABDE $.

  $( Conjoin antecedent to right of consequent.  (Contributed by NM,
     25-Jul-1999.)  (Proof shortened by Wolf Lammen, 24-Mar-2013.) $)
  ancrb $p |- ( ( ph -> ps ) <-> ( ph -> ( ps /\ ph ) ) ) $=
    ( wa iba pm5.74i ) ABBACABDE $.

  ${
    ancli.1 $e |- ( ph -> ps ) $.
    $( Deduction conjoining antecedent to left of consequent.  (Contributed by
       NM, 12-Aug-1993.) $)
    ancli $p |- ( ph -> ( ph /\ ps ) ) $=
      ( id jca ) AABADCE $.
  $}

  ${
    ancri.1 $e |- ( ph -> ps ) $.
    $( Deduction conjoining antecedent to right of consequent.  (Contributed by
       NM, 15-Aug-1994.) $)
    ancri $p |- ( ph -> ( ps /\ ph ) ) $=
      ( id jca ) ABACADE $.
  $}

  ${
    ancld.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Deduction conjoining antecedent to left of consequent in nested
       implication.  (Contributed by NM, 15-Aug-1994.)  (Proof shortened by
       Wolf Lammen, 1-Nov-2012.) $)
    ancld $p |- ( ph -> ( ps -> ( ps /\ ch ) ) ) $=
      ( idd jcad ) ABBCABEDF $.
  $}

  ${
    ancrd.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Deduction conjoining antecedent to right of consequent in nested
       implication.  (Contributed by NM, 15-Aug-1994.)  (Proof shortened by
       Wolf Lammen, 1-Nov-2012.) $)
    ancrd $p |- ( ph -> ( ps -> ( ch /\ ps ) ) ) $=
      ( idd jcad ) ABCBDABEF $.
  $}

  ${
    impac.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Importation with conjunction in consequent.  (Contributed by NM,
       9-Aug-1994.) $)
    impac $p |- ( ( ph /\ ps ) -> ( ch /\ ps ) ) $=
      ( wa ancrd imp ) ABCBEABCDFG $.
  $}

  $( Conjoin antecedent to left of consequent in nested implication.
     (Contributed by NM, 10-Aug-1994.)  (Proof shortened by Wolf Lammen,
     14-Jul-2013.) $)
  anc2l $p |- ( ( ph -> ( ps -> ch ) ) -> ( ph -> ( ps -> ( ph /\ ch ) ) ) ) $=
    ( wi wa pm5.42 biimpi ) ABCDDABACEDDABCFG $.

  $( Conjoin antecedent to right of consequent in nested implication.
     (Contributed by NM, 15-Aug-1994.) $)
  anc2r $p |- ( ( ph -> ( ps -> ch ) ) -> ( ph -> ( ps -> ( ch /\ ph ) ) ) ) $=
    ( wi wa pm3.21 imim2d a2i ) ABCDBCAEZDACIBACFGH $.

  ${
    anc2li.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Deduction conjoining antecedent to left of consequent in nested
       implication.  (Contributed by NM, 10-Aug-1994.)  (Proof shortened by
       Wolf Lammen, 7-Dec-2012.) $)
    anc2li $p |- ( ph -> ( ps -> ( ph /\ ch ) ) ) $=
      ( id jctild ) ABCADAEF $.
  $}

  ${
    anc2ri.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Deduction conjoining antecedent to right of consequent in nested
       implication.  (Contributed by NM, 15-Aug-1994.)  (Proof shortened by
       Wolf Lammen, 7-Dec-2012.) $)
    anc2ri $p |- ( ph -> ( ps -> ( ch /\ ph ) ) ) $=
      ( id jctird ) ABCADAEF $.
  $}

  $( Implication in terms of biconditional and conjunction.  Theorem *4.71 of
     [WhiteheadRussell] p. 120.  (Contributed by NM, 21-Jun-1993.)  (Proof
     shortened by Wolf Lammen, 2-Dec-2012.) $)
  pm4.71 $p |- ( ( ph -> ps ) <-> ( ph <-> ( ph /\ ps ) ) ) $=
    ( wa wi wb simpl biantru anclb dfbi2 3bitr4i ) AABCZDZLKADZCABDAKEMLABFGABH
    AKIJ $.

  $( Implication in terms of biconditional and conjunction.  Theorem *4.71 of
     [WhiteheadRussell] p. 120 (with conjunct reversed).  (Contributed by NM,
     25-Jul-1999.) $)
  pm4.71r $p |- ( ( ph -> ps ) <-> ( ph <-> ( ps /\ ph ) ) ) $=
    ( wi wa wb pm4.71 ancom bibi2i bitri ) ABCAABDZEABADZEABFJKAABGHI $.

  ${
    pm4.71i.1 $e |- ( ph -> ps ) $.
    $( Inference converting an implication to a biconditional with conjunction.
       Inference from Theorem *4.71 of [WhiteheadRussell] p. 120.  (Contributed
       by NM, 4-Jan-2004.) $)
    pm4.71i $p |- ( ph <-> ( ph /\ ps ) ) $=
      ( wi wa wb pm4.71 mpbi ) ABDAABEFCABGH $.
  $}

  ${
    pm4.71ri.1 $e |- ( ph -> ps ) $.
    $( Inference converting an implication to a biconditional with conjunction.
       Inference from Theorem *4.71 of [WhiteheadRussell] p. 120 (with conjunct
       reversed).  (Contributed by NM, 1-Dec-2003.) $)
    pm4.71ri $p |- ( ph <-> ( ps /\ ph ) ) $=
      ( wi wa wb pm4.71r mpbi ) ABDABAEFCABGH $.
  $}

  ${
    pm4.71rd.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Deduction converting an implication to a biconditional with conjunction.
       Deduction from Theorem *4.71 of [WhiteheadRussell] p. 120.  (Contributed
       by Mario Carneiro, 25-Dec-2016.) $)
    pm4.71d $p |- ( ph -> ( ps <-> ( ps /\ ch ) ) ) $=
      ( wi wa wb pm4.71 sylib ) ABCEBBCFGDBCHI $.

    $( Deduction converting an implication to a biconditional with conjunction.
       Deduction from Theorem *4.71 of [WhiteheadRussell] p. 120.  (Contributed
       by NM, 10-Feb-2005.) $)
    pm4.71rd $p |- ( ph -> ( ps <-> ( ch /\ ps ) ) ) $=
      ( wi wa wb pm4.71r sylib ) ABCEBCBFGDBCHI $.
  $}

  $( Theorem *4.24 of [WhiteheadRussell] p. 117.  (Contributed by NM,
     11-May-1993.) $)
  pm4.24 $p |- ( ph <-> ( ph /\ ph ) ) $=
    ( id pm4.71i ) AAABC $.

  $( Idempotent law for conjunction.  (Contributed by NM, 8-Jan-2004.)  (Proof
     shortened by Wolf Lammen, 14-Mar-2014.) $)
  anidm $p |- ( ( ph /\ ph ) <-> ph ) $=
    ( wa pm4.24 bicomi ) AAABACD $.

  $( Conjunction idempotence with antecedent.  (Contributed by Roy F. Longton,
     8-Aug-2005.) $)
  anidmdbi $p |- ( ( ph -> ( ps /\ ps ) ) <-> ( ph -> ps ) ) $=
    ( wa anidm imbi2i ) BBCBABDE $.

  ${
    anidms.1 $e |- ( ( ph /\ ph ) -> ps ) $.
    $( Inference from idempotent law for conjunction.  (Contributed by NM,
       15-Jun-1994.) $)
    anidms $p |- ( ph -> ps ) $=
      ( ex pm2.43i ) ABAABCDE $.
  $}

  $( Distribution of implication with conjunction.  (Contributed by NM,
     31-May-1999.)  (Proof shortened by Wolf Lammen, 6-Dec-2012.) $)
  imdistan $p |- ( ( ph -> ( ps -> ch ) ) <->
                ( ( ph /\ ps ) -> ( ph /\ ch ) ) ) $=
    ( wi wa pm5.42 impexp bitr4i ) ABCDDABACEZDDABEIDABCFABIGH $.

  ${
    imdistani.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Distribution of implication with conjunction.  (Contributed by NM,
       1-Aug-1994.) $)
    imdistani $p |- ( ( ph /\ ps ) -> ( ph /\ ch ) ) $=
      ( wa anc2li imp ) ABACEABCDFG $.
  $}

  ${
    imdistanri.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Distribution of implication with conjunction.  (Contributed by NM,
       8-Jan-2002.) $)
    imdistanri $p |- ( ( ps /\ ph ) -> ( ch /\ ph ) ) $=
      ( com12 impac ) BACABCDEF $.
  $}

  ${
    imdistand.1 $e |- ( ph -> ( ps -> ( ch -> th ) ) ) $.
    $( Distribution of implication with conjunction (deduction form).
       (Contributed by NM, 27-Aug-2004.) $)
    imdistand $p |- ( ph -> ( ( ps /\ ch ) -> ( ps /\ th ) ) ) $=
      ( wi wa imdistan sylib ) ABCDFFBCGBDGFEBCDHI $.
  $}

  ${
    imdistanda.1 $e |- ( ( ph /\ ps ) -> ( ch -> th ) ) $.
    $( Distribution of implication with conjunction (deduction version with
       conjoined antecedent).  (Contributed by Jeff Madsen, 19-Jun-2011.) $)
    imdistanda $p |- ( ph -> ( ( ps /\ ch ) -> ( ps /\ th ) ) ) $=
      ( wi ex imdistand ) ABCDABCDFEGH $.
  $}

  $( Theorem *5.3 of [WhiteheadRussell] p. 125.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Andrew Salmon, 7-May-2011.) $)
  pm5.3 $p |- ( ( ( ph /\ ps ) -> ch ) <->
               ( ( ph /\ ps ) -> ( ph /\ ch ) ) ) $=
    ( wa wi impexp imdistan bitri ) ABDZCEABCEEIACDEABCFABCGH $.

  $( Distribution of implication over biconditional.  Theorem *5.32 of
     [WhiteheadRussell] p. 125.  (Contributed by NM, 1-Aug-1994.) $)
  pm5.32 $p |- ( ( ph -> ( ps <-> ch ) ) <->
               ( ( ph /\ ps ) <-> ( ph /\ ch ) ) ) $=
    ( wb wi wn wa notbi imbi2i pm5.74 3bitri df-an bibi12i bitr4i ) ABCDZEZABFZ
    EZFZACFZEZFZDZABGZACGZDPAQTDZERUADUCOUFABCHIAQTJRUAHKUDSUEUBABLACLMN $.

  ${
    pm5.32i.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Distribution of implication over biconditional (inference form).
       (Contributed by NM, 1-Aug-1994.) $)
    pm5.32i $p |- ( ( ph /\ ps ) <-> ( ph /\ ch ) ) $=
      ( wb wi wa pm5.32 mpbi ) ABCEFABGACGEDABCHI $.

    $( Distribution of implication over biconditional (inference form).
       (Contributed by NM, 12-Mar-1995.) $)
    pm5.32ri $p |- ( ( ps /\ ph ) <-> ( ch /\ ph ) ) $=
      ( wa pm5.32i ancom 3bitr4i ) ABEACEBAECAEABCDFBAGCAGH $.
  $}

  ${
    pm5.32d.1 $e |- ( ph -> ( ps -> ( ch <-> th ) ) ) $.
    $( Distribution of implication over biconditional (deduction form).
       (Contributed by NM, 29-Oct-1996.) $)
    pm5.32d $p |- ( ph -> ( ( ps /\ ch ) <-> ( ps /\ th ) ) ) $=
      ( wb wi wa pm5.32 sylib ) ABCDFGBCHBDHFEBCDIJ $.

    $( Distribution of implication over biconditional (deduction form).
       (Contributed by NM, 25-Dec-2004.) $)
    pm5.32rd $p |- ( ph -> ( ( ch /\ ps ) <-> ( th /\ ps ) ) ) $=
      ( wa pm5.32d ancom 3bitr4g ) ABCFBDFCBFDBFABCDEGCBHDBHI $.
  $}

  ${
    pm5.32da.1 $e |- ( ( ph /\ ps ) -> ( ch <-> th ) ) $.
    $( Distribution of implication over biconditional (deduction form).
       (Contributed by NM, 9-Dec-2006.) $)
    pm5.32da $p |- ( ph -> ( ( ps /\ ch ) <-> ( ps /\ th ) ) ) $=
      ( wb ex pm5.32d ) ABCDABCDFEGH $.
  $}

  ${
    sylan.1 $e |- ( ph -> ps ) $.
    sylan.2 $e |- ( ( ps /\ ch ) -> th ) $.
    $( A syllogism inference.  (Contributed by NM, 21-Apr-1994.)  (Proof
       shortened by Wolf Lammen, 22-Nov-2012.) $)
    sylan $p |- ( ( ph /\ ch ) -> th ) $=
      ( expcom mpan9 ) ABCDEBCDFGH $.
  $}

  ${
    sylanb.1 $e |- ( ph <-> ps ) $.
    sylanb.2 $e |- ( ( ps /\ ch ) -> th ) $.
    $( A syllogism inference.  (Contributed by NM, 18-May-1994.) $)
    sylanb $p |- ( ( ph /\ ch ) -> th ) $=
      ( biimpi sylan ) ABCDABEGFH $.
  $}

  ${
    sylanbr.1 $e |- ( ps <-> ph ) $.
    sylanbr.2 $e |- ( ( ps /\ ch ) -> th ) $.
    $( A syllogism inference.  (Contributed by NM, 18-May-1994.) $)
    sylanbr $p |- ( ( ph /\ ch ) -> th ) $=
      ( biimpri sylan ) ABCDBAEGFH $.
  $}

  ${
    sylanbrc.1 $e |- ( ph -> ps ) $.
    sylanbrc.2 $e |- ( ph -> ch ) $.
    sylanbrc.3 $e |- ( th <-> ( ps /\ ch ) ) $.
    $( Syllogism inference.  (Contributed by Jeff Madsen, 2-Sep-2009.) $)
    sylanbrc $p |- ( ph -> th ) $=
      ( wa jca sylibr ) ABCHDABCEFIGJ $.
  $}

  ${
    syl2anc.1 $e |- ( ph -> ps ) $.
    syl2anc.2 $e |- ( ph -> ch ) $.
    syl2anc.3 $e |- ( ( ps /\ ch ) -> th ) $.
    $( Syllogism inference combined with contraction.  (Contributed by NM,
       16-Mar-2012.) $)
    syl2anc $p |- ( ph -> th ) $=
      ( ex sylc ) ABCDEFBCDGHI $.
  $}

  ${
    sylancl.1 $e |- ( ph -> ps ) $.
    sylancl.2 $e |- ch $.
    sylancl.3 $e |- ( ( ps /\ ch ) -> th ) $.
    $( Syllogism inference combined with modus ponens.  (Contributed by Jeff
       Madsen, 2-Sep-2009.) $)
    sylancl $p |- ( ph -> th ) $=
      ( a1i syl2anc ) ABCDECAFHGI $.
  $}

  ${
    sylancr.1 $e |- ps $.
    sylancr.2 $e |- ( ph -> ch ) $.
    sylancr.3 $e |- ( ( ps /\ ch ) -> th ) $.
    $( Syllogism inference combined with modus ponens.  (Contributed by Jeff
       Madsen, 2-Sep-2009.) $)
    sylancr $p |- ( ph -> th ) $=
      ( a1i syl2anc ) ABCDBAEHFGI $.
  $}

  ${
    sylancom.1 $e |- ( ( ph /\ ps ) -> ch ) $.
    sylancom.2 $e |- ( ( ch /\ ps ) -> th ) $.
    $( Syllogism inference with commutation of antecedents.  (Contributed by
       NM, 2-Jul-2008.) $)
    sylancom $p |- ( ( ph /\ ps ) -> th ) $=
      ( wa simpr syl2anc ) ABGCBDEABHFI $.
  $}

  ${
    sylanblc.1 $e |- ( ph -> ps ) $.
    sylanblc.2 $e |- ch $.
    sylanblc.3 $e |- ( ( ps /\ ch ) <-> th ) $.
    $( Syllogism inference combined with a biconditional.  (Contributed by BJ,
       25-Apr-2019.) $)
    sylanblc $p |- ( ph -> th ) $=
      ( wa biimpi sylancl ) ABCDEFBCHDGIJ $.
  $}

  ${
    sylanblrc.1 $e |- ( ph -> ps ) $.
    sylanblrc.2 $e |- ch $.
    sylanblrc.3 $e |- ( th <-> ( ps /\ ch ) ) $.
    $( Syllogism inference combined with a biconditional.  (Contributed by BJ,
       25-Apr-2019.) $)
    sylanblrc $p |- ( ph -> th ) $=
      ( wa biimpri sylancl ) ABCDEFDBCHGIJ $.
  $}

  ${
    syldan.1 $e |- ( ( ph /\ ps ) -> ch ) $.
    syldan.2 $e |- ( ( ph /\ ch ) -> th ) $.
    $( A syllogism deduction with conjoined antecedents.  (Contributed by NM,
       24-Feb-2005.)  (Proof shortened by Wolf Lammen, 6-Apr-2013.) $)
    syldan $p |- ( ( ph /\ ps ) -> th ) $=
      ( wa expcom adantrd mpcom ) CABGDECADBACDFHIJ $.
  $}

  ${
    sylan2.1 $e |- ( ph -> ch ) $.
    sylan2.2 $e |- ( ( ps /\ ch ) -> th ) $.
    $( A syllogism inference.  (Contributed by NM, 21-Apr-1994.)  (Proof
       shortened by Wolf Lammen, 22-Nov-2012.) $)
    sylan2 $p |- ( ( ps /\ ph ) -> th ) $=
      ( adantl syldan ) BACDACBEGFH $.
  $}

  ${
    sylan2b.1 $e |- ( ph <-> ch ) $.
    sylan2b.2 $e |- ( ( ps /\ ch ) -> th ) $.
    $( A syllogism inference.  (Contributed by NM, 21-Apr-1994.) $)
    sylan2b $p |- ( ( ps /\ ph ) -> th ) $=
      ( biimpi sylan2 ) ABCDACEGFH $.
  $}

  ${
    sylan2br.1 $e |- ( ch <-> ph ) $.
    sylan2br.2 $e |- ( ( ps /\ ch ) -> th ) $.
    $( A syllogism inference.  (Contributed by NM, 21-Apr-1994.) $)
    sylan2br $p |- ( ( ps /\ ph ) -> th ) $=
      ( biimpri sylan2 ) ABCDCAEGFH $.
  $}

  ${
    syl2an.1 $e |- ( ph -> ps ) $.
    syl2an.2 $e |- ( ta -> ch ) $.
    syl2an.3 $e |- ( ( ps /\ ch ) -> th ) $.
    $( A double syllogism inference.  For an implication-only version, see
       ~ syl2im .  (Contributed by NM, 31-Jan-1997.) $)
    syl2an $p |- ( ( ph /\ ta ) -> th ) $=
      ( sylan sylan2 ) EACDGABCDFHIJ $.

    $( A double syllogism inference.  For an implication-only version, see
       ~ syl2imc .  (Contributed by NM, 17-Sep-2013.) $)
    syl2anr $p |- ( ( ta /\ ph ) -> th ) $=
      ( syl2an ancoms ) AEDABCDEFGHIJ $.
  $}

  ${
    syl2anb.1 $e |- ( ph <-> ps ) $.
    syl2anb.2 $e |- ( ta <-> ch ) $.
    syl2anb.3 $e |- ( ( ps /\ ch ) -> th ) $.
    $( A double syllogism inference.  (Contributed by NM, 29-Jul-1999.) $)
    syl2anb $p |- ( ( ph /\ ta ) -> th ) $=
      ( sylanb sylan2b ) EACDGABCDFHIJ $.
  $}

  ${
    syl2anbr.1 $e |- ( ps <-> ph ) $.
    syl2anbr.2 $e |- ( ch <-> ta ) $.
    syl2anbr.3 $e |- ( ( ps /\ ch ) -> th ) $.
    $( A double syllogism inference.  (Contributed by NM, 29-Jul-1999.) $)
    syl2anbr $p |- ( ( ph /\ ta ) -> th ) $=
      ( sylanbr sylan2br ) EACDGABCDFHIJ $.
  $}

  ${
    sylancb.1 $e |- ( ph <-> ps ) $.
    sylancb.2 $e |- ( ph <-> ch ) $.
    sylancb.3 $e |- ( ( ps /\ ch ) -> th ) $.
    $( A syllogism inference combined with contraction.  (Contributed by NM,
       3-Sep-2004.) $)
    sylancb $p |- ( ph -> th ) $=
      ( syl2anb anidms ) ADABCDAEFGHI $.
  $}

  ${
    sylancbr.1 $e |- ( ps <-> ph ) $.
    sylancbr.2 $e |- ( ch <-> ph ) $.
    sylancbr.3 $e |- ( ( ps /\ ch ) -> th ) $.
    $( A syllogism inference combined with contraction.  (Contributed by NM,
       3-Sep-2004.) $)
    sylancbr $p |- ( ph -> th ) $=
      ( syl2anbr anidms ) ADABCDAEFGHI $.
  $}

  ${
    syldanl.1 $e |- ( ( ph /\ ps ) -> ch ) $.
    syldanl.2 $e |- ( ( ( ph /\ ch ) /\ th ) -> ta ) $.
    $( A syllogism deduction with conjoined antecedents.  (Contributed by Jeff
       Madsen, 20-Jun-2011.) $)
    syldanl $p |- ( ( ( ph /\ ps ) /\ th ) -> ta ) $=
      ( wa ex imdistani sylan ) ABHACHDEABCABCFIJGK $.
  $}

  ${
    syland.1 $e |- ( ph -> ( ps -> ch ) ) $.
    syland.2 $e |- ( ph -> ( ( ch /\ th ) -> ta ) ) $.
    $( A syllogism deduction.  (Contributed by NM, 15-Dec-2004.) $)
    syland $p |- ( ph -> ( ( ps /\ th ) -> ta ) ) $=
      ( wi expd syld impd ) ABDEABCDEHFACDEGIJK $.
  $}

  ${
    sylani.1 $e |- ( ph -> ch ) $.
    sylani.2 $e |- ( ps -> ( ( ch /\ th ) -> ta ) ) $.
    $( A syllogism inference.  (Contributed by NM, 2-May-1996.) $)
    sylani $p |- ( ps -> ( ( ph /\ th ) -> ta ) ) $=
      ( wi a1i syland ) BACDEACHBFIGJ $.
  $}

  ${
    sylan2d.1 $e |- ( ph -> ( ps -> ch ) ) $.
    sylan2d.2 $e |- ( ph -> ( ( th /\ ch ) -> ta ) ) $.
    $( A syllogism deduction.  (Contributed by NM, 15-Dec-2004.) $)
    sylan2d $p |- ( ph -> ( ( th /\ ps ) -> ta ) ) $=
      ( ancomsd syland ) ABDEABCDEFADCEGHIH $.
  $}

  ${
    sylan2i.1 $e |- ( ph -> th ) $.
    sylan2i.2 $e |- ( ps -> ( ( ch /\ th ) -> ta ) ) $.
    $( A syllogism inference.  (Contributed by NM, 1-Aug-1994.) $)
    sylan2i $p |- ( ps -> ( ( ch /\ ph ) -> ta ) ) $=
      ( wi a1i sylan2d ) BADCEADHBFIGJ $.
  $}

  ${
    syl2ani.1 $e |- ( ph -> ch ) $.
    syl2ani.2 $e |- ( et -> th ) $.
    syl2ani.3 $e |- ( ps -> ( ( ch /\ th ) -> ta ) ) $.
    $( A syllogism inference.  (Contributed by NM, 3-Aug-1999.) $)
    syl2ani $p |- ( ps -> ( ( ph /\ et ) -> ta ) ) $=
      ( sylan2i sylani ) ABCFEGFBCDEHIJK $.
  $}

  ${
    syl2and.1 $e |- ( ph -> ( ps -> ch ) ) $.
    syl2and.2 $e |- ( ph -> ( th -> ta ) ) $.
    syl2and.3 $e |- ( ph -> ( ( ch /\ ta ) -> et ) ) $.
    $( A syllogism deduction.  (Contributed by NM, 15-Dec-2004.) $)
    syl2and $p |- ( ph -> ( ( ps /\ th ) -> et ) ) $=
      ( sylan2d syland ) ABCDFGADECFHIJK $.
  $}

  ${
    anim12d.1 $e |- ( ph -> ( ps -> ch ) ) $.
    anim12d.2 $e |- ( ph -> ( th -> ta ) ) $.
    $( Conjoin antecedents and consequents in a deduction.  (Contributed by NM,
       3-Apr-1994.)  (Proof shortened by Wolf Lammen, 18-Dec-2013.) $)
    anim12d $p |- ( ph -> ( ( ps /\ th ) -> ( ch /\ ta ) ) ) $=
      ( wa idd syl2and ) ABCDECEHZFGAKIJ $.
  $}

  ${
    anim12d1.1 $e |- ( ph -> ( ps -> ch ) ) $.
    anim12d1.2 $e |- ( th -> ta ) $.
    $( Variant of ~ anim12d where the second implication does not depend on the
       antecedent.  (Contributed by Rodolfo Medina, 12-Oct-2010.) $)
    anim12d1 $p |- ( ph -> ( ( ps /\ th ) -> ( ch /\ ta ) ) ) $=
      ( wi a1i anim12d ) ABCDEFDEHAGIJ $.
  $}

  ${
    anim1d.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Add a conjunct to right of antecedent and consequent in a deduction.
       (Contributed by NM, 3-Apr-1994.) $)
    anim1d $p |- ( ph -> ( ( ps /\ th ) -> ( ch /\ th ) ) ) $=
      ( idd anim12d ) ABCDDEADFG $.

    $( Add a conjunct to left of antecedent and consequent in a deduction.
       (Contributed by NM, 14-May-1993.) $)
    anim2d $p |- ( ph -> ( ( th /\ ps ) -> ( th /\ ch ) ) ) $=
      ( idd anim12d ) ADDBCADFEG $.
  $}

  ${
    anim12i.1 $e |- ( ph -> ps ) $.
    anim12i.2 $e |- ( ch -> th ) $.
    $( Conjoin antecedents and consequents of two premises.  (Contributed by
       NM, 3-Jan-1993.)  (Proof shortened by Wolf Lammen, 14-Dec-2013.) $)
    anim12i $p |- ( ( ph /\ ch ) -> ( ps /\ th ) ) $=
      ( wa id syl2an ) ABDBDGZCEFJHI $.

    $( Variant of ~ anim12i with commutation.  (Contributed by Jonathan
       Ben-Naim, 3-Jun-2011.) $)
    anim12ci $p |- ( ( ph /\ ch ) -> ( th /\ ps ) ) $=
      ( wa anim12i ancoms ) CADBGCDABFEHI $.
  $}

  ${
    anim1i.1 $e |- ( ph -> ps ) $.
    $( Introduce conjunct to both sides of an implication.  (Contributed by NM,
       5-Aug-1993.) $)
    anim1i $p |- ( ( ph /\ ch ) -> ( ps /\ ch ) ) $=
      ( id anim12i ) ABCCDCEF $.

    $( Introduce conjunct to both sides of an implication.  (Contributed by
       Peter Mazsa, 24-Sep-2022.) $)
    anim1ci $p |- ( ( ph /\ ch ) -> ( ch /\ ps ) ) $=
      ( id anim12ci ) ABCCDCEF $.

    $( Introduce conjunct to both sides of an implication.  (Contributed by NM,
       3-Jan-1993.) $)
    anim2i $p |- ( ( ch /\ ph ) -> ( ch /\ ps ) ) $=
      ( id anim12i ) CCABCEDF $.
  $}

  ${
    anim12ii.1 $e |- ( ph -> ( ps -> ch ) ) $.
    anim12ii.2 $e |- ( th -> ( ps -> ta ) ) $.
    $( Conjoin antecedents and consequents in a deduction.  (Contributed by NM,
       11-Nov-2007.)  (Proof shortened by Wolf Lammen, 19-Jul-2013.) $)
    anim12ii $p |- ( ( ph /\ th ) -> ( ps -> ( ch /\ ta ) ) ) $=
      ( wa wi adantr adantl jcad ) ADHBCEABCIDFJDBEIAGKL $.
  $}

  ${
    anim12dan.1 $e |- ( ( ph /\ ps ) -> ch ) $.
    anim12dan.2 $e |- ( ( ph /\ th ) -> ta ) $.
    $( Conjoin antecedents and consequents in a deduction.  (Contributed by
       Mario Carneiro, 12-May-2014.) $)
    anim12dan $p |- ( ( ph /\ ( ps /\ th ) ) -> ( ch /\ ta ) ) $=
      ( wa ex anim12d imp ) ABDHCEHABCDEABCFIADEGIJK $.
  $}

  ${
    im2an9.1 $e |- ( ph -> ( ps -> ch ) ) $.
    im2an9.2 $e |- ( th -> ( ta -> et ) ) $.
    $( Deduction joining nested implications to form implication of
       conjunctions.  (Contributed by NM, 29-Feb-1996.) $)
    im2anan9 $p |- ( ( ph /\ th ) -> ( ( ps /\ ta ) -> ( ch /\ et ) ) ) $=
      ( wa wi adantr adantl anim12d ) ADIBCEFABCJDGKDEFJAHLM $.

    $( Deduction joining nested implications to form implication of
       conjunctions.  (Contributed by NM, 29-Feb-1996.) $)
    im2anan9r $p |- ( ( th /\ ph ) -> ( ( ps /\ ta ) -> ( ch /\ et ) ) ) $=
      ( wa wi im2anan9 ancoms ) ADBEICFIJABCDEFGHKL $.
  $}

  $( Theorem *3.45 (Fact) of [WhiteheadRussell] p. 113.  (Contributed by NM,
     3-Jan-2005.) $)
  pm3.45 $p |- ( ( ph -> ps ) -> ( ( ph /\ ch ) -> ( ps /\ ch ) ) ) $=
    ( wi id anim1d ) ABDZABCGEF $.

  ${
    anbi.1 $e |- ( ph <-> ps ) $.
    $( Introduce a left conjunct to both sides of a logical equivalence.
       (Contributed by NM, 3-Jan-1993.)  (Proof shortened by Wolf Lammen,
       16-Nov-2013.) $)
    anbi2i $p |- ( ( ch /\ ph ) <-> ( ch /\ ps ) ) $=
      ( wb a1i pm5.32i ) CABABECDFG $.

    $( Introduce a right conjunct to both sides of a logical equivalence.
       (Contributed by NM, 12-Mar-1993.)  (Proof shortened by Wolf Lammen,
       16-Nov-2013.) $)
    anbi1i $p |- ( ( ph /\ ch ) <-> ( ps /\ ch ) ) $=
      ( wb a1i pm5.32ri ) CABABECDFG $.

    $( Variant of ~ anbi2i with commutation.  (Contributed by Jonathan
       Ben-Naim, 3-Jun-2011.)  (Proof shortened by Andrew Salmon,
       14-Jun-2011.) $)
    anbi2ci $p |- ( ( ph /\ ch ) <-> ( ch /\ ps ) ) $=
      ( wa anbi1i biancomi ) ACECBABCDFG $.

    $( Variant of ~ anbi1i with commutation.  (Contributed by Peter Mazsa,
       7-Mar-2020.) $)
    anbi1ci $p |- ( ( ch /\ ph ) <-> ( ps /\ ch ) ) $=
      ( wa anbi2i biancomi ) CAEBCABCDFG $.
  $}

  ${
    anbi12.1 $e |- ( ph <-> ps ) $.
    anbi12.2 $e |- ( ch <-> th ) $.
    $( Conjoin both sides of two equivalences.  (Contributed by NM,
       12-Mar-1993.) $)
    anbi12i $p |- ( ( ph /\ ch ) <-> ( ps /\ th ) ) $=
      ( wa anbi1i anbi2i bitri ) ACGBCGBDGABCEHCDBFIJ $.

    $( Variant of ~ anbi12i with commutation.  (Contributed by Jonathan
       Ben-Naim, 3-Jun-2011.) $)
    anbi12ci $p |- ( ( ph /\ ch ) <-> ( th /\ ps ) ) $=
      ( wa anbi12i biancomi ) ACGDBABCDEFHI $.
  $}

  ${
    anbid.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Deduction adding a left conjunct to both sides of a logical equivalence.
       (Contributed by NM, 11-May-1993.)  (Proof shortened by Wolf Lammen,
       16-Nov-2013.) $)
    anbi2d $p |- ( ph -> ( ( th /\ ps ) <-> ( th /\ ch ) ) ) $=
      ( wb a1d pm5.32d ) ADBCABCFDEGH $.

    $( Deduction adding a right conjunct to both sides of a logical
       equivalence.  (Contributed by NM, 11-May-1993.)  (Proof shortened by
       Wolf Lammen, 16-Nov-2013.) $)
    anbi1d $p |- ( ph -> ( ( ps /\ th ) <-> ( ch /\ th ) ) ) $=
      ( wb a1d pm5.32rd ) ADBCABCFDEGH $.
  $}

  ${
    anbi12d.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    anbi12d.2 $e |- ( ph -> ( th <-> ta ) ) $.
    $( Deduction joining two equivalences to form equivalence of conjunctions.
       (Contributed by NM, 26-May-1993.) $)
    anbi12d $p |- ( ph -> ( ( ps /\ th ) <-> ( ch /\ ta ) ) ) $=
      ( wa anbi1d anbi2d bitrd ) ABDHCDHCEHABCDFIADECGJK $.
  $}

  $( Introduce a right conjunct to both sides of a logical equivalence.
     Theorem *4.36 of [WhiteheadRussell] p. 118.  (Contributed by NM,
     3-Jan-2005.) $)
  anbi1 $p |- ( ( ph <-> ps ) -> ( ( ph /\ ch ) <-> ( ps /\ ch ) ) ) $=
    ( wb id anbi1d ) ABDZABCGEF $.

  $( Introduce a left conjunct to both sides of a logical equivalence.
     (Contributed by NM, 16-Nov-2013.) $)
  anbi2 $p |- ( ( ph <-> ps ) -> ( ( ch /\ ph ) <-> ( ch /\ ps ) ) ) $=
    ( wb id anbi2d ) ABDZABCGEF $.

  ${
    anbi1cd.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Introduce a proposition as left conjunct on the left-hand side and right
       conjunct on the right-hand side of an equivalence.  Deduction form.
       (Contributed by Peter Mazsa, 22-May-2021.) $)
    anbi1cd $p |- ( ph -> ( ( th /\ ps ) <-> ( ch /\ th ) ) ) $=
      ( wb wa anbi2 biancomd syl ) ABCFZDBGZCDGFEKLCDBCDHIJ $.
  $}

  $( Theorem *4.38 of [WhiteheadRussell] p. 118.  (Contributed by NM,
     3-Jan-2005.) $)
  pm4.38 $p |- ( ( ( ph <-> ch ) /\ ( ps <-> th ) ) ->
                ( ( ph /\ ps ) <-> ( ch /\ th ) ) ) $=
    ( wb wa simpl simpr anbi12d ) ACEZBDEZFACBDJKGJKHI $.

  ${
    bi2an9.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    bi2an9.2 $e |- ( th -> ( ta <-> et ) ) $.
    $( Deduction joining two equivalences to form equivalence of conjunctions.
       (Contributed by NM, 31-Jul-1995.) $)
    bi2anan9 $p |- ( ( ph /\ th ) -> ( ( ps /\ ta ) <-> ( ch /\ et ) ) ) $=
      ( wa anbi1d anbi2d sylan9bb ) ABEICEIDCFIABCEGJDEFCHKL $.

    $( Deduction joining two equivalences to form equivalence of conjunctions.
       (Contributed by NM, 19-Feb-1996.) $)
    bi2anan9r $p |- ( ( th /\ ph ) -> ( ( ps /\ ta ) <-> ( ch /\ et ) ) ) $=
      ( wa wb bi2anan9 ancoms ) ADBEICFIJABCDEFGHKL $.

    $( Deduction joining two biconditionals with different antecedents.
       (Contributed by NM, 12-May-2004.) $)
    bi2bian9 $p |- ( ( ph /\ th ) -> ( ( ps <-> ta ) <-> ( ch <-> et ) ) ) $=
      ( wa wb adantr adantl bibi12d ) ADIBCEFABCJDGKDEFJAHLM $.
  $}

  ${
    bianass.1 $e |- ( ph <-> ( ps /\ ch ) ) $.
    $( An inference to merge two lists of conjuncts.  (Contributed by Giovanni
       Mascellani, 23-May-2019.) $)
    bianass $p |- ( ( et /\ ph ) <-> ( ( et /\ ps ) /\ ch ) ) $=
      ( wa anbi2i anass bitr4i ) DAFDBCFZFDBFCFAJDEGDBCHI $.

    $( An inference to merge two lists of conjuncts.  (Contributed by Peter
       Mazsa, 24-Sep-2022.) $)
    bianassc $p |- ( ( et /\ ph ) <-> ( ( ps /\ et ) /\ ch ) ) $=
      ( wa bianass ancom anbi1i bitri ) DAFDBFZCFBDFZCFABCDEGKLCDBHIJ $.
  $}

  $( Swap two conjuncts.  (Contributed by Peter Mazsa, 18-Sep-2022.) $)
  an21 $p |- ( ( ( ph /\ ps ) /\ ch ) <-> ( ps /\ ( ph /\ ch ) ) ) $=
    ( wa ancom anbi1i anass bitri ) ABDZCDBADZCDBACDDIJCABEFBACGH $.

  $( Swap two conjuncts.  Note that the first digit (1) in the label refers to
     the outer conjunct position, and the next digit (2) to the inner conjunct
     position.  (Contributed by NM, 12-Mar-1995.)  (Proof shortened by Peter
     Mazsa, 18-Sep-2022.) $)
  an12 $p |- ( ( ph /\ ( ps /\ ch ) ) <-> ( ps /\ ( ph /\ ch ) ) ) $=
    ( wa anass an21 bitr3i ) ABCDDABDCDBACDDABCEABCFG $.

  $( A rearrangement of conjuncts.  (Contributed by NM, 12-Mar-1995.)  (Proof
     shortened by Wolf Lammen, 25-Dec-2012.) $)
  an32 $p |- ( ( ( ph /\ ps ) /\ ch ) <-> ( ( ph /\ ch ) /\ ps ) ) $=
    ( wa anass an12 ancom 3bitri ) ABDCDABCDDBACDZDIBDABCEABCFBIGH $.

  $( A rearrangement of conjuncts.  (Contributed by NM, 24-Jun-2012.)  (Proof
     shortened by Wolf Lammen, 31-Dec-2012.) $)
  an13 $p |- ( ( ph /\ ( ps /\ ch ) ) <-> ( ch /\ ( ps /\ ph ) ) ) $=
    ( wa an12 anass ancom 3bitr2i ) ABCDDBACDDBADZCDCIDABCEBACFICGH $.

  $( A rearrangement of conjuncts.  (Contributed by NM, 24-Jun-2012.)  (Proof
     shortened by Wolf Lammen, 31-Dec-2012.) $)
  an31 $p |- ( ( ( ph /\ ps ) /\ ch ) <-> ( ( ch /\ ps ) /\ ph ) ) $=
    ( wa an13 anass 3bitr4i ) ABCDDCBADDABDCDCBDADABCEABCFCBAFG $.

  ${
    an12s.1 $e |- ( ( ph /\ ( ps /\ ch ) ) -> th ) $.
    $( Swap two conjuncts in antecedent.  The label suffix "s" means that
       ~ an12 is combined with ~ syl (or a variant).  (Contributed by NM,
       13-Mar-1996.) $)
    an12s $p |- ( ( ps /\ ( ph /\ ch ) ) -> th ) $=
      ( wa an12 sylbi ) BACFFABCFFDBACGEH $.

    $( Inference commuting a nested conjunction in antecedent.  (Contributed by
       NM, 24-May-2006.)  (Proof shortened by Wolf Lammen, 24-Nov-2012.) $)
    ancom2s $p |- ( ( ph /\ ( ch /\ ps ) ) -> th ) $=
      ( wa pm3.22 sylan2 ) CBFABCFDCBGEH $.

    $( Swap two conjuncts in antecedent.  (Contributed by NM, 31-May-2006.) $)
    an13s $p |- ( ( ch /\ ( ps /\ ph ) ) -> th ) $=
      ( exp32 com13 imp32 ) CBADABCDABCDEFGH $.
  $}

  ${
    an32s.1 $e |- ( ( ( ph /\ ps ) /\ ch ) -> th ) $.
    $( Swap two conjuncts in antecedent.  (Contributed by NM, 13-Mar-1996.) $)
    an32s $p |- ( ( ( ph /\ ch ) /\ ps ) -> th ) $=
      ( wa an32 sylbi ) ACFBFABFCFDACBGEH $.

    $( Inference commuting a nested conjunction in antecedent.  (Contributed by
       NM, 24-May-2006.)  (Proof shortened by Wolf Lammen, 24-Nov-2012.) $)
    ancom1s $p |- ( ( ( ps /\ ph ) /\ ch ) -> th ) $=
      ( wa pm3.22 sylan ) BAFABFCDBAGEH $.

    $( Swap two conjuncts in antecedent.  (Contributed by NM, 31-May-2006.) $)
    an31s $p |- ( ( ( ch /\ ps ) /\ ph ) -> th ) $=
      ( exp31 com13 imp31 ) CBADABCDABCDEFGH $.
  $}

  ${
    anass1rs.1 $e |- ( ( ph /\ ( ps /\ ch ) ) -> th ) $.
    $( Commutative-associative law for conjunction in an antecedent.
       (Contributed by Jeff Madsen, 19-Jun-2011.) $)
    anass1rs $p |- ( ( ( ph /\ ch ) /\ ps ) -> th ) $=
      ( anassrs an32s ) ABCDABCDEFG $.
  $}

  $( Rearrangement of 4 conjuncts.  (Contributed by NM, 10-Jul-1994.) $)
  an4 $p |- ( ( ( ph /\ ps ) /\ ( ch /\ th ) ) <->
              ( ( ph /\ ch ) /\ ( ps /\ th ) ) ) $=
    ( wa an12 anbi2i anass 3bitr4i ) ABCDEZEZEACBDEZEZEABEJEACELEKMABCDFGABJHAC
    LHI $.

  $( Rearrangement of 4 conjuncts.  (Contributed by NM, 7-Feb-1996.) $)
  an42 $p |- ( ( ( ph /\ ps ) /\ ( ch /\ th ) ) <->
                 ( ( ph /\ ch ) /\ ( th /\ ps ) ) ) $=
    ( wa an4 ancom anbi2i bitri ) ABECDEEACEZBDEZEJDBEZEABCDFKLJBDGHI $.

  $( Rearrangement of 4 conjuncts.  (Contributed by Rodolfo Medina,
     24-Sep-2010.)  (Proof shortened by Andrew Salmon, 29-Jun-2011.) $)
  an43 $p |- ( ( ( ph /\ ps ) /\ ( ch /\ th ) ) <->
               ( ( ph /\ th ) /\ ( ps /\ ch ) ) ) $=
    ( wa an42 bicomi ) ADEBCEEABECDEEADBCFG $.

  $( A rearrangement of conjuncts.  (Contributed by Rodolfo Medina,
     25-Sep-2010.) $)
  an3 $p |- ( ( ( ph /\ ps ) /\ ( ch /\ th ) ) -> ( ph /\ th ) ) $=
    ( wa an43 simplbi ) ABECDEEADEBCEABCDFG $.

  ${
    an4s.1 $e |- ( ( ( ph /\ ps ) /\ ( ch /\ th ) ) -> ta ) $.
    $( Inference rearranging 4 conjuncts in antecedent.  (Contributed by NM,
       10-Aug-1995.) $)
    an4s $p |- ( ( ( ph /\ ch ) /\ ( ps /\ th ) ) -> ta ) $=
      ( wa an4 sylbi ) ACGBDGGABGCDGGEACBDHFI $.
  $}

  ${
    an41r3s.1 $e |- ( ( ( ph /\ ps ) /\ ( ch /\ th ) ) -> ta ) $.
    $( Inference rearranging 4 conjuncts in antecedent.  (Contributed by NM,
       10-Aug-1995.) $)
    an42s $p |- ( ( ( ph /\ ch ) /\ ( th /\ ps ) ) -> ta ) $=
      ( wa an4s ancom2s ) ACGBDEABCDEFHI $.
  $}

  $( Absorption into embedded conjunct.  (Contributed by NM, 4-Sep-1995.)
     (Proof shortened by Wolf Lammen, 16-Nov-2013.) $)
  anabs1 $p |- ( ( ( ph /\ ps ) /\ ph ) <-> ( ph /\ ps ) ) $=
    ( wa simpl pm4.71i bicomi ) ABCZGACGAABDEF $.

  $( Absorption into embedded conjunct.  (Contributed by NM, 20-Jul-1996.)
     (Proof shortened by Wolf Lammen, 9-Dec-2012.) $)
  anabs5 $p |- ( ( ph /\ ( ph /\ ps ) ) <-> ( ph /\ ps ) ) $=
    ( wa ibar bicomd pm5.32i ) AABCZBABGABDEF $.

  $( Absorption into embedded conjunct.  (Contributed by NM, 20-Jul-1996.)
     (Proof shortened by Wolf Lammen, 17-Nov-2013.) $)
  anabs7 $p |- ( ( ps /\ ( ph /\ ps ) ) <-> ( ph /\ ps ) ) $=
    ( wa simpr pm4.71ri bicomi ) ABCZBGCGBABDEF $.

  ${
    anabsan.1 $e |- ( ( ( ph /\ ph ) /\ ps ) -> ch ) $.
    $( Absorption of antecedent with conjunction.  (Contributed by NM,
       24-Mar-1996.) $)
    anabsan $p |- ( ( ph /\ ps ) -> ch ) $=
      ( wa pm4.24 sylanb ) AAAEBCAFDG $.
  $}

  ${
    anabss1.1 $e |- ( ( ( ph /\ ps ) /\ ph ) -> ch ) $.
    $( Absorption of antecedent into conjunction.  (Contributed by NM,
       20-Jul-1996.)  (Proof shortened by Wolf Lammen, 31-Dec-2012.) $)
    anabss1 $p |- ( ( ph /\ ps ) -> ch ) $=
      ( an32s anabsan ) ABCABACDEF $.
  $}

  ${
    anabss4.1 $e |- ( ( ( ps /\ ph ) /\ ps ) -> ch ) $.
    $( Absorption of antecedent into conjunction.  (Contributed by NM,
       20-Jul-1996.) $)
    anabss4 $p |- ( ( ph /\ ps ) -> ch ) $=
      ( anabss1 ancoms ) BACBACDEF $.
  $}

  ${
    anabss5.1 $e |- ( ( ph /\ ( ph /\ ps ) ) -> ch ) $.
    $( Absorption of antecedent into conjunction.  (Contributed by NM,
       10-May-1994.)  (Proof shortened by Wolf Lammen, 1-Jan-2013.) $)
    anabss5 $p |- ( ( ph /\ ps ) -> ch ) $=
      ( anassrs anabsan ) ABCAABCDEF $.
  $}

  ${
    anabsi5.1 $e |- ( ph -> ( ( ph /\ ps ) -> ch ) ) $.
    $( Absorption of antecedent into conjunction.  (Contributed by NM,
       11-Jun-1995.)  (Proof shortened by Wolf Lammen, 18-Nov-2013.) $)
    anabsi5 $p |- ( ( ph /\ ps ) -> ch ) $=
      ( wa imp anabss5 ) ABCAABECDFG $.
  $}

  ${
    anabsi6.1 $e |- ( ph -> ( ( ps /\ ph ) -> ch ) ) $.
    $( Absorption of antecedent into conjunction.  (Contributed by NM,
       14-Aug-2000.) $)
    anabsi6 $p |- ( ( ph /\ ps ) -> ch ) $=
      ( ancomsd anabsi5 ) ABCABACDEF $.
  $}

  ${
    anabsi7.1 $e |- ( ps -> ( ( ph /\ ps ) -> ch ) ) $.
    $( Absorption of antecedent into conjunction.  (Contributed by NM,
       20-Jul-1996.)  (Proof shortened by Wolf Lammen, 18-Nov-2013.) $)
    anabsi7 $p |- ( ( ph /\ ps ) -> ch ) $=
      ( anabsi6 ancoms ) BACBACDEF $.
  $}

  ${
    anabsi8.1 $e |- ( ps -> ( ( ps /\ ph ) -> ch ) ) $.
    $( Absorption of antecedent into conjunction.  (Contributed by NM,
       26-Sep-1999.) $)
    anabsi8 $p |- ( ( ph /\ ps ) -> ch ) $=
      ( anabsi5 ancoms ) BACBACDEF $.
  $}

  ${
    anabss7.1 $e |- ( ( ps /\ ( ph /\ ps ) ) -> ch ) $.
    $( Absorption of antecedent into conjunction.  (Contributed by NM,
       20-Jul-1996.)  (Proof shortened by Wolf Lammen, 19-Nov-2013.) $)
    anabss7 $p |- ( ( ph /\ ps ) -> ch ) $=
      ( anassrs anabss4 ) ABCBABCDEF $.
  $}

  ${
    anabsan2.1 $e |- ( ( ph /\ ( ps /\ ps ) ) -> ch ) $.
    $( Absorption of antecedent with conjunction.  (Contributed by NM,
       10-May-2004.) $)
    anabsan2 $p |- ( ( ph /\ ps ) -> ch ) $=
      ( an12s anabss7 ) ABCABBCDEF $.
  $}

  ${
    anabss3.1 $e |- ( ( ( ph /\ ps ) /\ ps ) -> ch ) $.
    $( Absorption of antecedent into conjunction.  (Contributed by NM,
       20-Jul-1996.)  (Proof shortened by Wolf Lammen, 1-Jan-2013.) $)
    anabss3 $p |- ( ( ph /\ ps ) -> ch ) $=
      ( anasss anabsan2 ) ABCABBCDEF $.
  $}

  $( Distribution of conjunction over conjunction.  (Contributed by NM,
     14-Aug-1995.) $)
  anandi $p |- ( ( ph /\ ( ps /\ ch ) ) <->
               ( ( ph /\ ps ) /\ ( ph /\ ch ) ) ) $=
    ( wa anidm anbi1i an4 bitr3i ) ABCDZDAADZIDABDACDDJAIAEFAABCGH $.

  $( Distribution of conjunction over conjunction.  (Contributed by NM,
     24-Aug-1995.) $)
  anandir $p |- ( ( ( ph /\ ps ) /\ ch ) <->
               ( ( ph /\ ch ) /\ ( ps /\ ch ) ) ) $=
    ( wa anidm anbi2i an4 bitr3i ) ABDZCDICCDZDACDBCDDJCICEFABCCGH $.

  ${
    anandis.1 $e |- ( ( ( ph /\ ps ) /\ ( ph /\ ch ) ) -> ta ) $.
    $( Inference that undistributes conjunction in the antecedent.
       (Contributed by NM, 7-Jun-2004.) $)
    anandis $p |- ( ( ph /\ ( ps /\ ch ) ) -> ta ) $=
      ( wa an4s anabsan ) ABCFDABACDEGH $.
  $}

  ${
    anandirs.1 $e |- ( ( ( ph /\ ch ) /\ ( ps /\ ch ) ) -> ta ) $.
    $( Inference that undistributes conjunction in the antecedent.
       (Contributed by NM, 7-Jun-2004.) $)
    anandirs $p |- ( ( ( ph /\ ps ) /\ ch ) -> ta ) $=
      ( wa an4s anabsan2 ) ABFCDACBCDEGH $.
  $}

  ${
    sylanl1.1 $e |- ( ph -> ps ) $.
    sylanl1.2 $e |- ( ( ( ps /\ ch ) /\ th ) -> ta ) $.
    $( A syllogism inference.  (Contributed by NM, 10-Mar-2005.) $)
    sylanl1 $p |- ( ( ( ph /\ ch ) /\ th ) -> ta ) $=
      ( wa anim1i sylan ) ACHBCHDEABCFIGJ $.
  $}

  ${
    sylanl2.1 $e |- ( ph -> ch ) $.
    sylanl2.2 $e |- ( ( ( ps /\ ch ) /\ th ) -> ta ) $.
    $( A syllogism inference.  (Contributed by NM, 1-Jan-2005.) $)
    sylanl2 $p |- ( ( ( ps /\ ph ) /\ th ) -> ta ) $=
      ( wa anim2i sylan ) BAHBCHDEACBFIGJ $.
  $}

  ${
    sylanr1.1 $e |- ( ph -> ch ) $.
    sylanr1.2 $e |- ( ( ps /\ ( ch /\ th ) ) -> ta ) $.
    $( A syllogism inference.  (Contributed by NM, 9-Apr-2005.) $)
    sylanr1 $p |- ( ( ps /\ ( ph /\ th ) ) -> ta ) $=
      ( wa anim1i sylan2 ) ADHBCDHEACDFIGJ $.
  $}

  ${
    sylanr2.1 $e |- ( ph -> th ) $.
    sylanr2.2 $e |- ( ( ps /\ ( ch /\ th ) ) -> ta ) $.
    $( A syllogism inference.  (Contributed by NM, 9-Apr-2005.) $)
    sylanr2 $p |- ( ( ps /\ ( ch /\ ph ) ) -> ta ) $=
      ( wa anim2i sylan2 ) CAHBCDHEADCFIGJ $.
  $}

  ${
    syl6an.1 $e |- ( ph -> ps ) $.
    syl6an.2 $e |- ( ph -> ( ch -> th ) ) $.
    syl6an.3 $e |- ( ( ps /\ th ) -> ta ) $.
    $( A syllogism deduction combined with conjoining antecedents.
       (Contributed by Alan Sare, 28-Oct-2011.) $)
    syl6an $p |- ( ph -> ( ch -> ta ) ) $=
      ( wa jctild syl6 ) ACBDIEACDBGFJHK $.
  $}

  ${
    syl2an2r.1 $e |- ( ph -> ps ) $.
    syl2an2r.2 $e |- ( ( ph /\ ch ) -> th ) $.
    syl2an2r.3 $e |- ( ( ps /\ th ) -> ta ) $.
    $( ~ syl2anr with antecedents in standard conjunction form.  (Contributed
       by Alan Sare, 27-Aug-2016.)  (Proof shortened by Wolf Lammen,
       28-Mar-2022.) $)
    syl2an2r $p |- ( ( ph /\ ch ) -> ta ) $=
      ( sylan syldan ) ACDEGABDEFHIJ $.
  $}

  ${
    syl2an2.1 $e |- ( ph -> ps ) $.
    syl2an2.2 $e |- ( ( ch /\ ph ) -> th ) $.
    syl2an2.3 $e |- ( ( ps /\ th ) -> ta ) $.
    $( ~ syl2an with antecedents in standard conjunction form.  (Contributed by
       Alan Sare, 27-Aug-2016.) $)
    syl2an2 $p |- ( ( ch /\ ph ) -> ta ) $=
      ( wa syl2an anabss7 ) CAEABDECAIFGHJK $.
  $}

  ${
    mpdan.1 $e |- ( ph -> ps ) $.
    mpdan.2 $e |- ( ( ph /\ ps ) -> ch ) $.
    $( An inference based on modus ponens.  (Contributed by NM, 23-May-1999.)
       (Proof shortened by Wolf Lammen, 22-Nov-2012.) $)
    mpdan $p |- ( ph -> ch ) $=
      ( id syl2anc ) AABCAFDEG $.
  $}

  ${
    mpancom.1 $e |- ( ps -> ph ) $.
    mpancom.2 $e |- ( ( ph /\ ps ) -> ch ) $.
    $( An inference based on modus ponens with commutation of antecedents.
       (Contributed by NM, 28-Oct-2003.)  (Proof shortened by Wolf Lammen,
       7-Apr-2013.) $)
    mpancom $p |- ( ps -> ch ) $=
      ( id syl2anc ) BABCDBFEG $.
  $}

  ${
    mpidan.1 $e |- ( ph -> ch ) $.
    mpidan.2 $e |- ( ( ( ph /\ ps ) /\ ch ) -> th ) $.
    $( A deduction which "stacks" a hypothesis.  (Contributed by Stanislas
       Polu, 9-Mar-2020.)  (Proof shortened by Wolf Lammen, 28-Mar-2021.) $)
    mpidan $p |- ( ( ph /\ ps ) -> th ) $=
      ( wa adantr mpdan ) ABGCDACBEHFI $.
  $}

  ${
    mpan.1 $e |- ph $.
    mpan.2 $e |- ( ( ph /\ ps ) -> ch ) $.
    $( An inference based on modus ponens.  (Contributed by NM, 30-Aug-1993.)
       (Proof shortened by Wolf Lammen, 7-Apr-2013.) $)
    mpan $p |- ( ps -> ch ) $=
      ( a1i mpancom ) ABCABDFEG $.
  $}

  ${
    mpan2.1 $e |- ps $.
    mpan2.2 $e |- ( ( ph /\ ps ) -> ch ) $.
    $( An inference based on modus ponens.  (Contributed by NM, 16-Sep-1993.)
       (Proof shortened by Wolf Lammen, 19-Nov-2012.) $)
    mpan2 $p |- ( ph -> ch ) $=
      ( a1i mpdan ) ABCBADFEG $.
  $}

  ${
    mp2an.1 $e |- ph $.
    mp2an.2 $e |- ps $.
    mp2an.3 $e |- ( ( ph /\ ps ) -> ch ) $.
    $( An inference based on modus ponens.  (Contributed by NM,
       13-Apr-1995.) $)
    mp2an $p |- ch $=
      ( mpan ax-mp ) BCEABCDFGH $.
  $}

  ${
    mp4an.1 $e |- ph $.
    mp4an.2 $e |- ps $.
    mp4an.3 $e |- ch $.
    mp4an.4 $e |- th $.
    mp4an.5 $e |- ( ( ( ph /\ ps ) /\ ( ch /\ th ) ) -> ta ) $.
    $( An inference based on modus ponens.  (Contributed by Jeff Madsen,
       15-Jun-2010.) $)
    mp4an $p |- ta $=
      ( wa pm3.2i mp2an ) ABKCDKEABFGLCDHILJM $.
  $}

  ${
    mpan2d.1 $e |- ( ph -> ch ) $.
    mpan2d.2 $e |- ( ph -> ( ( ps /\ ch ) -> th ) ) $.
    $( A deduction based on modus ponens.  (Contributed by NM, 12-Dec-2004.) $)
    mpan2d $p |- ( ph -> ( ps -> th ) ) $=
      ( expd mpid ) ABCDEABCDFGH $.
  $}

  ${
    mpand.1 $e |- ( ph -> ps ) $.
    mpand.2 $e |- ( ph -> ( ( ps /\ ch ) -> th ) ) $.
    $( A deduction based on modus ponens.  (Contributed by NM, 12-Dec-2004.)
       (Proof shortened by Wolf Lammen, 7-Apr-2013.) $)
    mpand $p |- ( ph -> ( ch -> th ) ) $=
      ( ancomsd mpan2d ) ACBDEABCDFGH $.
  $}

  ${
    mpani.1 $e |- ps $.
    mpani.2 $e |- ( ph -> ( ( ps /\ ch ) -> th ) ) $.
    $( An inference based on modus ponens.  (Contributed by NM, 10-Apr-1994.)
       (Proof shortened by Wolf Lammen, 19-Nov-2012.) $)
    mpani $p |- ( ph -> ( ch -> th ) ) $=
      ( a1i mpand ) ABCDBAEGFH $.
  $}

  ${
    mpan2i.1 $e |- ch $.
    mpan2i.2 $e |- ( ph -> ( ( ps /\ ch ) -> th ) ) $.
    $( An inference based on modus ponens.  (Contributed by NM, 10-Apr-1994.)
       (Proof shortened by Wolf Lammen, 19-Nov-2012.) $)
    mpan2i $p |- ( ph -> ( ps -> th ) ) $=
      ( a1i mpan2d ) ABCDCAEGFH $.
  $}

  ${
    mp2ani.1 $e |- ps $.
    mp2ani.2 $e |- ch $.
    mp2ani.3 $e |- ( ph -> ( ( ps /\ ch ) -> th ) ) $.
    $( An inference based on modus ponens.  (Contributed by NM,
       12-Dec-2004.) $)
    mp2ani $p |- ( ph -> th ) $=
      ( mpani mpi ) ACDFABCDEGHI $.
  $}

  ${
    mp2and.1 $e |- ( ph -> ps ) $.
    mp2and.2 $e |- ( ph -> ch ) $.
    mp2and.3 $e |- ( ph -> ( ( ps /\ ch ) -> th ) ) $.
    $( A deduction based on modus ponens.  (Contributed by NM, 12-Dec-2004.) $)
    mp2and $p |- ( ph -> th ) $=
      ( mpand mpd ) ACDFABCDEGHI $.
  $}

  ${
    mpanl1.1 $e |- ph $.
    mpanl1.2 $e |- ( ( ( ph /\ ps ) /\ ch ) -> th ) $.
    $( An inference based on modus ponens.  (Contributed by NM, 16-Aug-1994.)
       (Proof shortened by Wolf Lammen, 7-Apr-2013.) $)
    mpanl1 $p |- ( ( ps /\ ch ) -> th ) $=
      ( wa jctl sylan ) BABGCDBAEHFI $.
  $}

  ${
    mpanl2.1 $e |- ps $.
    mpanl2.2 $e |- ( ( ( ph /\ ps ) /\ ch ) -> th ) $.
    $( An inference based on modus ponens.  (Contributed by NM, 16-Aug-1994.)
       (Proof shortened by Andrew Salmon, 7-May-2011.) $)
    mpanl2 $p |- ( ( ph /\ ch ) -> th ) $=
      ( wa jctr sylan ) AABGCDABEHFI $.
  $}

  ${
    mpanl12.1 $e |- ph $.
    mpanl12.2 $e |- ps $.
    mpanl12.3 $e |- ( ( ( ph /\ ps ) /\ ch ) -> th ) $.
    $( An inference based on modus ponens.  (Contributed by NM,
       13-Jul-2005.) $)
    mpanl12 $p |- ( ch -> th ) $=
      ( mpanl1 mpan ) BCDFABCDEGHI $.
  $}

  ${
    mpanr1.1 $e |- ps $.
    mpanr1.2 $e |- ( ( ph /\ ( ps /\ ch ) ) -> th ) $.
    $( An inference based on modus ponens.  (Contributed by NM, 3-May-1994.)
       (Proof shortened by Andrew Salmon, 7-May-2011.) $)
    mpanr1 $p |- ( ( ph /\ ch ) -> th ) $=
      ( anassrs mpanl2 ) ABCDEABCDFGH $.
  $}

  ${
    mpanr2.1 $e |- ch $.
    mpanr2.2 $e |- ( ( ph /\ ( ps /\ ch ) ) -> th ) $.
    $( An inference based on modus ponens.  (Contributed by NM, 3-May-1994.)
       (Proof shortened by Andrew Salmon, 7-May-2011.)  (Proof shortened by
       Wolf Lammen, 7-Apr-2013.) $)
    mpanr2 $p |- ( ( ph /\ ps ) -> th ) $=
      ( wa jctr sylan2 ) BABCGDBCEHFI $.
  $}

  ${
    mpanr12.1 $e |- ps $.
    mpanr12.2 $e |- ch $.
    mpanr12.3 $e |- ( ( ph /\ ( ps /\ ch ) ) -> th ) $.
    $( An inference based on modus ponens.  (Contributed by NM,
       24-Jul-2009.) $)
    mpanr12 $p |- ( ph -> th ) $=
      ( mpanr1 mpan2 ) ACDFABCDEGHI $.
  $}

  ${
    mpanlr1.1 $e |- ps $.
    mpanlr1.2 $e |- ( ( ( ph /\ ( ps /\ ch ) ) /\ th ) -> ta ) $.
    $( An inference based on modus ponens.  (Contributed by NM, 30-Dec-2004.)
       (Proof shortened by Wolf Lammen, 7-Apr-2013.) $)
    mpanlr1 $p |- ( ( ( ph /\ ch ) /\ th ) -> ta ) $=
      ( wa jctl sylanl2 ) CABCHDECBFIGJ $.
  $}

  ${
    mpbirand.1 $e |- ( ph -> ch ) $.
    mpbirand.2 $e |- ( ph -> ( ps <-> ( ch /\ th ) ) ) $.
    $( Detach truth from conjunction in biconditional.  (Contributed by Glauco
       Siliprandi, 3-Mar-2021.) $)
    mpbirand $p |- ( ph -> ( ps <-> th ) ) $=
      ( wa biantrurd bitr4d ) ABCDGDFACDEHI $.
  $}

  ${
    mpbiran2d.1 $e |- ( ph -> th ) $.
    mpbiran2d.2 $e |- ( ph -> ( ps <-> ( ch /\ th ) ) ) $.
    $( Detach truth from conjunction in biconditional.  Deduction form.
       (Contributed by Peter Mazsa, 24-Sep-2022.) $)
    mpbiran2d $p |- ( ph -> ( ps <-> ch ) ) $=
      ( wa biantrud bitr4d ) ABCDGCFADCEHI $.
  $}

  ${
    mpbiran.1 $e |- ps $.
    mpbiran.2 $e |- ( ph <-> ( ps /\ ch ) ) $.
    $( Detach truth from conjunction in biconditional.  (Contributed by NM,
       27-Feb-1996.) $)
    mpbiran $p |- ( ph <-> ch ) $=
      ( wa biantrur bitr4i ) ABCFCEBCDGH $.
  $}

  ${
    mpbiran2.1 $e |- ch $.
    mpbiran2.2 $e |- ( ph <-> ( ps /\ ch ) ) $.
    $( Detach truth from conjunction in biconditional.  (Contributed by NM,
       22-Feb-1996.) $)
    mpbiran2 $p |- ( ph <-> ps ) $=
      ( wa biantru bitr4i ) ABCFBECBDGH $.
  $}

  ${
    mpbir2an.1 $e |- ps $.
    mpbir2an.2 $e |- ch $.
    mpbiran2an.1 $e |- ( ph <-> ( ps /\ ch ) ) $.
    $( Detach a conjunction of truths in a biconditional.  (Contributed by NM,
       10-May-2005.) $)
    mpbir2an $p |- ph $=
      ( mpbiran mpbir ) ACEABCDFGH $.
  $}

  ${
    mpbi2and.1 $e |- ( ph -> ps ) $.
    mpbi2and.2 $e |- ( ph -> ch ) $.
    mpbi2and.3 $e |- ( ph -> ( ( ps /\ ch ) <-> th ) ) $.
    $( Detach a conjunction of truths in a biconditional.  (Contributed by NM,
       6-Nov-2011.)  (Proof shortened by Wolf Lammen, 24-Nov-2012.) $)
    mpbi2and $p |- ( ph -> th ) $=
      ( wa jca mpbid ) ABCHDABCEFIGJ $.
  $}

  ${
    mpbir2and.1 $e |- ( ph -> ch ) $.
    mpbir2and.2 $e |- ( ph -> th ) $.
    mpbir2and.3 $e |- ( ph -> ( ps <-> ( ch /\ th ) ) ) $.
    $( Detach a conjunction of truths in a biconditional.  (Contributed by NM,
       6-Nov-2011.)  (Proof shortened by Wolf Lammen, 24-Nov-2012.) $)
    mpbir2and $p |- ( ph -> ps ) $=
      ( wa jca mpbird ) ABCDHACDEFIGJ $.
  $}

  ${
    adant2.1 $e |- ( ( ph /\ ps ) -> ch ) $.
    $( Deduction adding a conjunct to antecedent.  (Contributed by NM,
       4-May-1994.)  (Proof shortened by Wolf Lammen, 24-Nov-2012.) $)
    adantll $p |- ( ( ( th /\ ph ) /\ ps ) -> ch ) $=
      ( wa simpr sylan ) DAFABCDAGEH $.

    $( Deduction adding a conjunct to antecedent.  (Contributed by NM,
       4-May-1994.)  (Proof shortened by Wolf Lammen, 24-Nov-2012.) $)
    adantlr $p |- ( ( ( ph /\ th ) /\ ps ) -> ch ) $=
      ( wa simpl sylan ) ADFABCADGEH $.

    $( Deduction adding a conjunct to antecedent.  (Contributed by NM,
       4-May-1994.)  (Proof shortened by Wolf Lammen, 24-Nov-2012.) $)
    adantrl $p |- ( ( ph /\ ( th /\ ps ) ) -> ch ) $=
      ( wa simpr sylan2 ) DBFABCDBGEH $.

    $( Deduction adding a conjunct to antecedent.  (Contributed by NM,
       4-May-1994.)  (Proof shortened by Wolf Lammen, 24-Nov-2012.) $)
    adantrr $p |- ( ( ph /\ ( ps /\ th ) ) -> ch ) $=
      ( wa simpl sylan2 ) BDFABCBDGEH $.
  $}

  ${
    adantl2.1 $e |- ( ( ( ph /\ ps ) /\ ch ) -> th ) $.
    $( Deduction adding a conjunct to antecedent.  (Contributed by NM,
       26-Dec-2004.)  (Proof shortened by Wolf Lammen, 2-Dec-2012.) $)
    adantlll $p |- ( ( ( ( ta /\ ph ) /\ ps ) /\ ch ) -> th ) $=
      ( wa simpr sylanl1 ) EAGABCDEAHFI $.

    $( Deduction adding a conjunct to antecedent.  (Contributed by NM,
       26-Dec-2004.)  (Proof shortened by Wolf Lammen, 4-Dec-2012.) $)
    adantllr $p |- ( ( ( ( ph /\ ta ) /\ ps ) /\ ch ) -> th ) $=
      ( wa simpl sylanl1 ) AEGABCDAEHFI $.

    $( Deduction adding a conjunct to antecedent.  (Contributed by NM,
       26-Dec-2004.)  (Proof shortened by Wolf Lammen, 4-Dec-2012.) $)
    adantlrl $p |- ( ( ( ph /\ ( ta /\ ps ) ) /\ ch ) -> th ) $=
      ( wa simpr sylanl2 ) EBGABCDEBHFI $.

    $( Deduction adding a conjunct to antecedent.  (Contributed by NM,
       26-Dec-2004.)  (Proof shortened by Wolf Lammen, 4-Dec-2012.) $)
    adantlrr $p |- ( ( ( ph /\ ( ps /\ ta ) ) /\ ch ) -> th ) $=
      ( wa simpl sylanl2 ) BEGABCDBEHFI $.
  $}

  ${
    adantr2.1 $e |- ( ( ph /\ ( ps /\ ch ) ) -> th ) $.
    $( Deduction adding a conjunct to antecedent.  (Contributed by NM,
       26-Dec-2004.)  (Proof shortened by Wolf Lammen, 4-Dec-2012.) $)
    adantrll $p |- ( ( ph /\ ( ( ta /\ ps ) /\ ch ) ) -> th ) $=
      ( wa simpr sylanr1 ) EBGABCDEBHFI $.

    $( Deduction adding a conjunct to antecedent.  (Contributed by NM,
       26-Dec-2004.)  (Proof shortened by Wolf Lammen, 4-Dec-2012.) $)
    adantrlr $p |- ( ( ph /\ ( ( ps /\ ta ) /\ ch ) ) -> th ) $=
      ( wa simpl sylanr1 ) BEGABCDBEHFI $.

    $( Deduction adding a conjunct to antecedent.  (Contributed by NM,
       26-Dec-2004.)  (Proof shortened by Wolf Lammen, 4-Dec-2012.) $)
    adantrrl $p |- ( ( ph /\ ( ps /\ ( ta /\ ch ) ) ) -> th ) $=
      ( wa simpr sylanr2 ) ECGABCDECHFI $.

    $( Deduction adding a conjunct to antecedent.  (Contributed by NM,
       26-Dec-2004.)  (Proof shortened by Wolf Lammen, 4-Dec-2012.) $)
    adantrrr $p |- ( ( ph /\ ( ps /\ ( ch /\ ta ) ) ) -> th ) $=
      ( wa simpl sylanr2 ) CEGABCDCEHFI $.
  $}

  ${
    ad2ant.1 $e |- ( ph -> ps ) $.
    $( Deduction adding two conjuncts to antecedent.  (Contributed by NM,
       19-Oct-1999.)  (Proof shortened by Wolf Lammen, 20-Nov-2012.) $)
    ad2antrr $p |- ( ( ( ph /\ ch ) /\ th ) -> ps ) $=
      ( adantr adantlr ) ADBCABDEFG $.

    $( Deduction adding two conjuncts to antecedent.  (Contributed by NM,
       19-Oct-1999.)  (Proof shortened by Wolf Lammen, 20-Nov-2012.) $)
    ad2antlr $p |- ( ( ( ch /\ ph ) /\ th ) -> ps ) $=
      ( adantr adantll ) ADBCABDEFG $.

    $( Deduction adding two conjuncts to antecedent.  (Contributed by NM,
       19-Oct-1999.) $)
    ad2antrl $p |- ( ( ch /\ ( ph /\ th ) ) -> ps ) $=
      ( wa adantr adantl ) ADFBCABDEGH $.

    $( Deduction adding conjuncts to antecedent.  (Contributed by NM,
       19-Oct-1999.) $)
    ad2antll $p |- ( ( ch /\ ( th /\ ph ) ) -> ps ) $=
      ( wa adantl ) DAFBCABDEGG $.

    $( Deduction adding three conjuncts to antecedent.  (Contributed by NM,
       28-Jul-2012.) $)
    ad3antrrr $p |- ( ( ( ( ph /\ ch ) /\ th ) /\ ta ) -> ps ) $=
      ( wa adantr ad2antrr ) ACGBDEABCFHI $.

    $( Deduction adding three conjuncts to antecedent.  (Contributed by Mario
       Carneiro, 5-Jan-2017.)  (Proof shortened by Wolf Lammen, 5-Apr-2022.) $)
    ad3antlr $p |- ( ( ( ( ch /\ ph ) /\ th ) /\ ta ) -> ps ) $=
      ( wa adantl ad2antrr ) CAGBDEABCFHI $.

    $( Deduction adding 4 conjuncts to antecedent.  (Contributed by Mario
       Carneiro, 4-Jan-2017.)  (Proof shortened by Wolf Lammen, 5-Apr-2022.) $)
    ad4antr $p |- ( ( ( ( ( ph /\ ch ) /\ th ) /\ ta ) /\ et ) -> ps ) $=
      ( wa adantr ad3antrrr ) ACHBDEFABCGIJ $.

    $( Deduction adding 4 conjuncts to antecedent.  (Contributed by Mario
       Carneiro, 5-Jan-2017.)  (Proof shortened by Wolf Lammen, 5-Apr-2022.) $)
    ad4antlr $p |- ( ( ( ( ( ch /\ ph ) /\ th ) /\ ta ) /\ et ) -> ps ) $=
      ( wa adantl ad3antrrr ) CAHBDEFABCGIJ $.

    $( Deduction adding 5 conjuncts to antecedent.  (Contributed by Mario
       Carneiro, 4-Jan-2017.)  (Proof shortened by Wolf Lammen, 5-Apr-2022.) $)
    ad5antr $p |- ( ( ( ( ( ( ph /\ ch ) /\ th ) /\ ta ) /\ et )
      /\ ze ) -> ps ) $=
      ( wa adantr ad4antr ) ACIBDEFGABCHJK $.

    $( Deduction adding 5 conjuncts to antecedent.  (Contributed by Mario
       Carneiro, 5-Jan-2017.)  (Proof shortened by Wolf Lammen, 5-Apr-2022.) $)
    ad5antlr $p |- ( ( ( ( ( ( ch /\ ph ) /\ th ) /\ ta ) /\ et )
      /\ ze ) -> ps ) $=
      ( wa adantl ad4antr ) CAIBDEFGABCHJK $.

    $( Deduction adding 6 conjuncts to antecedent.  (Contributed by Mario
       Carneiro, 4-Jan-2017.)  (Proof shortened by Wolf Lammen, 5-Apr-2022.) $)
    ad6antr $p |- ( ( ( ( ( ( ( ph /\ ch ) /\ th ) /\ ta ) /\ et )
      /\ ze ) /\ si ) -> ps ) $=
      ( wa adantr ad5antr ) ACJBDEFGHABCIKL $.

    $( Deduction adding 6 conjuncts to antecedent.  (Contributed by Mario
       Carneiro, 5-Jan-2017.)  (Proof shortened by Wolf Lammen, 5-Apr-2022.) $)
    ad6antlr $p |- ( ( ( ( ( ( ( ch /\ ph ) /\ th ) /\ ta ) /\ et )
      /\ ze ) /\ si ) -> ps ) $=
      ( wa adantl ad5antr ) CAJBDEFGHABCIKL $.

    $( Deduction adding 7 conjuncts to antecedent.  (Contributed by Mario
       Carneiro, 4-Jan-2017.)  (Proof shortened by Wolf Lammen, 5-Apr-2022.) $)
    ad7antr $p |- ( ( ( ( ( ( ( ( ph /\ ch ) /\ th ) /\ ta ) /\ et )
      /\ ze ) /\ si ) /\ rh ) -> ps ) $=
      ( wa adantr ad6antr ) ACKBDEFGHIABCJLM $.

    $( Deduction adding 7 conjuncts to antecedent.  (Contributed by Mario
       Carneiro, 5-Jan-2017.)  (Proof shortened by Wolf Lammen, 5-Apr-2022.) $)
    ad7antlr $p |- ( ( ( ( ( ( ( ( ch /\ ph ) /\ th ) /\ ta ) /\ et )
      /\ ze ) /\ si ) /\ rh ) -> ps ) $=
      ( wa adantl ad6antr ) CAKBDEFGHIABCJLM $.

    $( Deduction adding 8 conjuncts to antecedent.  (Contributed by Mario
       Carneiro, 4-Jan-2017.)  (Proof shortened by Wolf Lammen, 5-Apr-2022.) $)
    ad8antr $p |- ( ( ( ( ( ( ( ( ( ph /\ ch ) /\ th ) /\ ta ) /\ et )
      /\ ze ) /\ si ) /\ rh ) /\ mu ) -> ps ) $=
      ( wa adantr ad7antr ) ACLBDEFGHIJABCKMN $.

    $( Deduction adding 8 conjuncts to antecedent.  (Contributed by Mario
       Carneiro, 5-Jan-2017.)  (Proof shortened by Wolf Lammen, 5-Apr-2022.) $)
    ad8antlr $p |- ( ( ( ( ( ( ( ( ( ch /\ ph ) /\ th ) /\ ta ) /\ et )
      /\ ze ) /\ si ) /\ rh ) /\ mu ) -> ps ) $=
      ( wa adantl ad7antr ) CALBDEFGHIJABCKMN $.

    $( Deduction adding 9 conjuncts to antecedent.  (Contributed by Mario
       Carneiro, 4-Jan-2017.)  (Proof shortened by Wolf Lammen, 5-Apr-2022.) $)
    ad9antr $p |- ( ( ( ( ( ( ( ( ( ( ph /\ ch ) /\ th ) /\ ta ) /\ et )
      /\ ze ) /\ si ) /\ rh ) /\ mu ) /\ la ) -> ps ) $=
      ( wa adantr ad8antr ) ACMBDEFGHIJKABCLNO $.

    $( Deduction adding 9 conjuncts to antecedent.  (Contributed by Mario
       Carneiro, 5-Jan-2017.)  (Proof shortened by Wolf Lammen, 5-Apr-2022.) $)
    ad9antlr $p |- ( ( ( ( ( ( ( ( ( ( ch /\ ph ) /\ th ) /\ ta ) /\ et )
      /\ ze ) /\ si ) /\ rh ) /\ mu ) /\ la ) -> ps ) $=
      ( wa adantl ad8antr ) CAMBDEFGHIJKABCLNO $.

    $( Deduction adding 10 conjuncts to antecedent.  (Contributed by Mario
       Carneiro, 4-Jan-2017.)  (Proof shortened by Wolf Lammen, 5-Apr-2022.) $)
    ad10antr $p |- ( ( ( ( ( ( ( ( ( ( ( ph /\ ch ) /\ th ) /\ ta ) /\ et )
      /\ ze ) /\ si ) /\ rh ) /\ mu ) /\ la ) /\ ka ) -> ps ) $=
      ( wa adantr ad9antr ) ACNBDEFGHIJKLABCMOP $.

    $( Deduction adding 10 conjuncts to antecedent.  (Contributed by Mario
       Carneiro, 5-Jan-2017.)  (Proof shortened by Wolf Lammen, 5-Apr-2022.) $)
    ad10antlr $p |- ( ( ( ( ( ( ( ( ( ( ( ch /\ ph ) /\ th ) /\ ta ) /\ et )
      /\ ze ) /\ si ) /\ rh ) /\ mu ) /\ la ) /\ ka ) -> ps ) $=
      ( wa adantl ad9antr ) CANBDEFGHIJKLABCMOP $.
  $}

  ${
    ad2ant2.1 $e |- ( ( ph /\ ps ) -> ch ) $.
    $( Deduction adding two conjuncts to antecedent.  (Contributed by NM,
       8-Jan-2006.) $)
    ad2ant2l $p |- ( ( ( th /\ ph ) /\ ( ta /\ ps ) ) -> ch ) $=
      ( wa adantrl adantll ) AEBGCDABCEFHI $.

    $( Deduction adding two conjuncts to antecedent.  (Contributed by NM,
       8-Jan-2006.) $)
    ad2ant2r $p |- ( ( ( ph /\ th ) /\ ( ps /\ ta ) ) -> ch ) $=
      ( wa adantrr adantlr ) ABEGCDABCEFHI $.

    $( Deduction adding two conjuncts to antecedent.  (Contributed by NM,
       23-Nov-2007.) $)
    ad2ant2lr $p |- ( ( ( th /\ ph ) /\ ( ps /\ ta ) ) -> ch ) $=
      ( wa adantrr adantll ) ABEGCDABCEFHI $.

    $( Deduction adding two conjuncts to antecedent.  (Contributed by NM,
       24-Nov-2007.) $)
    ad2ant2rl $p |- ( ( ( ph /\ th ) /\ ( ta /\ ps ) ) -> ch ) $=
      ( wa adantrl adantlr ) AEBGCDABCEFHI $.
  $}

  ${
    adantl3r.1 $e |- ( ( ( ( ph /\ ps ) /\ ch ) /\ th ) -> ta ) $.
    $( Deduction adding 1 conjunct to antecedent.  (Contributed by Alan Sare,
       17-Oct-2017.) $)
    adantl3r $p |- ( ( ( ( ( ph /\ et ) /\ ps ) /\ ch ) /\ th ) -> ta ) $=
      ( wa wi ex adantllr imp ) AFHBHCHDEABCDEIFABHCHDEGJKL $.
  $}

  ${
    ad4ant2.1 $e |- ( ( ph /\ ps ) -> ch ) $.
    $( Deduction adding conjuncts to antecedent.  (Contributed by Alan Sare,
       17-Oct-2017.)  (Proof shortened by Wolf Lammen, 14-Apr-2022.) $)
    ad4ant13 $p |- ( ( ( ( ph /\ th ) /\ ps ) /\ ta ) -> ch ) $=
      ( wa adantlr adantr ) ADGBGCEABCDFHI $.

    $( Deduction adding conjuncts to antecedent.  (Contributed by Alan Sare,
       17-Oct-2017.)  (Proof shortened by Wolf Lammen, 14-Apr-2022.) $)
    ad4ant14 $p |- ( ( ( ( ph /\ th ) /\ ta ) /\ ps ) -> ch ) $=
      ( wa adantlr ) ADGBCEABCDFHH $.

    $( Deduction adding conjuncts to antecedent.  (Contributed by Alan Sare,
       17-Oct-2017.)  (Proof shortened by Wolf Lammen, 14-Apr-2022.) $)
    ad4ant23 $p |- ( ( ( ( th /\ ph ) /\ ps ) /\ ta ) -> ch ) $=
      ( wa adantll adantr ) DAGBGCEABCDFHI $.

    $( Deduction adding conjuncts to antecedent.  (Contributed by Alan Sare,
       17-Oct-2017.)  (Proof shortened by Wolf Lammen, 14-Apr-2022.) $)
    ad4ant24 $p |- ( ( ( ( th /\ ph ) /\ ta ) /\ ps ) -> ch ) $=
      ( wa adantll adantlr ) DAGBCEABCDFHI $.
  $}

  ${
    adantl4r.1 $e |- ( ( ( ( ( ph /\ si ) /\ rh ) /\ mu ) /\ la ) -> ka ) $.
    $( Deduction adding 1 conjunct to antecedent.  (Contributed by Thierry
       Arnoux, 11-Feb-2018.) $)
    adantl4r $p |- ( ( ( ( ( ( ph /\ ze ) /\ si ) /\ rh ) /\ mu ) /\ la )
      -> ka ) $=
      ( wa wi ex adantl3r imp ) ABICIDIEIFGACDEFGJBACIDIEIFGHKLM $.
  $}

  ${
    ad5ant2.1 $e |- ( ( ph /\ ps ) -> ch ) $.
    $( Deduction adding conjuncts to antecedent.  (Contributed by Alan Sare,
       17-Oct-2017.) $)
    ad5ant12 $p |- ( ( ( ( ( ph /\ ps ) /\ th ) /\ ta ) /\ et ) -> ch ) $=
      ( wa ad3antrrr ) ABHCDEFGI $.

    $( Deduction adding conjuncts to antecedent.  (Contributed by Alan Sare,
       17-Oct-2017.)  (Proof shortened by Wolf Lammen, 14-Apr-2022.) $)
    ad5ant13 $p |- ( ( ( ( ( ph /\ th ) /\ ps ) /\ ta ) /\ et ) -> ch ) $=
      ( wa adantlr ad2antrr ) ADHBHCEFABCDGIJ $.

    $( Deduction adding conjuncts to antecedent.  (Contributed by Alan Sare,
       17-Oct-2017.)  (Proof shortened by Wolf Lammen, 14-Apr-2022.) $)
    ad5ant14 $p |- ( ( ( ( ( ph /\ th ) /\ ta ) /\ ps ) /\ et ) -> ch ) $=
      ( wa adantlr ad4ant13 ) ADHBCEFABCDGIJ $.

    $( Deduction adding conjuncts to antecedent.  (Contributed by Alan Sare,
       17-Oct-2017.)  (Proof shortened by Wolf Lammen, 14-Apr-2022.) $)
    ad5ant15 $p |- ( ( ( ( ( ph /\ th ) /\ ta ) /\ et ) /\ ps ) -> ch ) $=
      ( wa adantlr ad4ant14 ) ADHBCEFABCDGIJ $.

    $( Deduction adding conjuncts to antecedent.  (Contributed by Alan Sare,
       17-Oct-2017.)  (Proof shortened by Wolf Lammen, 14-Apr-2022.) $)
    ad5ant23 $p |- ( ( ( ( ( th /\ ph ) /\ ps ) /\ ta ) /\ et ) -> ch ) $=
      ( wa adantll ad2antrr ) DAHBHCEFABCDGIJ $.

    $( Deduction adding conjuncts to antecedent.  (Contributed by Alan Sare,
       17-Oct-2017.)  (Proof shortened by Wolf Lammen, 14-Apr-2022.) $)
    ad5ant24 $p |- ( ( ( ( ( th /\ ph ) /\ ta ) /\ ps ) /\ et ) -> ch ) $=
      ( wa adantll ad4ant13 ) DAHBCEFABCDGIJ $.

    $( Deduction adding conjuncts to antecedent.  (Contributed by Alan Sare,
       17-Oct-2017.)  (Proof shortened by Wolf Lammen, 14-Apr-2022.) $)
    ad5ant25 $p |- ( ( ( ( ( th /\ ph ) /\ ta ) /\ et ) /\ ps ) -> ch ) $=
      ( wa adantll ad4ant14 ) DAHBCEFABCDGIJ $.
  $}

  ${
    adantl5r.1 $e |- ( ( ( ( ( ( ph /\ ze ) /\ si ) /\ rh ) /\ mu ) /\ la )
      -> ka ) $.
    $( Deduction adding 1 conjunct to antecedent.  (Contributed by Thierry
       Arnoux, 11-Feb-2018.) $)
    adantl5r $p |- ( ( ( ( ( ( ( ph /\ et ) /\ ze ) /\ si ) /\ rh ) /\ mu )
      /\ la ) -> ka ) $=
      ( wa wi ex adantl4r imp ) ABJCJDJEJFJGHABCDEFGHKACJDJEJFJGHILMN $.
  $}

  ${
    adantl6r.1 $e |- ( ( ( ( ( ( ( ph /\ et ) /\ ze ) /\ si ) /\ rh ) /\ mu )
      /\ la ) -> ka ) $.
    $( Deduction adding 1 conjunct to antecedent.  (Contributed by Thierry
       Arnoux, 11-Feb-2018.) $)
    adantl6r $p |- ( ( ( ( ( ( ( ( ph /\ ta ) /\ et ) /\ ze ) /\ si ) /\ rh )
      /\ mu ) /\ la ) -> ka ) $=
      ( wa wi ex adantl5r imp ) ABKCKDKEKFKGKHIABCDEFGHILACKDKEKFKGKHIJMNO $.
  $}

  $( Theorem *3.33 (Syll) of [WhiteheadRussell] p. 112.  (Contributed by NM,
     3-Jan-2005.) $)
  pm3.33 $p |- ( ( ( ph -> ps ) /\ ( ps -> ch ) ) -> ( ph -> ch ) ) $=
    ( wi imim1 imp ) ABDBCDACDABCEF $.

  $( Theorem *3.34 (Syll) of [WhiteheadRussell] p. 112.  (Contributed by NM,
     3-Jan-2005.) $)
  pm3.34 $p |- ( ( ( ps -> ch ) /\ ( ph -> ps ) ) -> ( ph -> ch ) ) $=
    ( wi imim2 imp ) BCDABDACDBCAEF $.

  $( Simplification of a conjunction.  (Contributed by NM, 18-Mar-2007.) $)
  simpll $p |- ( ( ( ph /\ ps ) /\ ch ) -> ph ) $=
    ( id ad2antrr ) AABCADE $.

  ${
    simplld.1 $e |- ( ph -> ( ( ps /\ ch ) /\ th ) ) $.
    $( Deduction form of ~ simpll , eliminating a double conjunct.
       (Contributed by Glauco Siliprandi, 11-Dec-2019.) $)
    simplld $p |- ( ph -> ps ) $=
      ( wa simpld ) ABCABCFDEGG $.
  $}

  $( Simplification of a conjunction.  (Contributed by NM, 20-Mar-2007.) $)
  simplr $p |- ( ( ( ph /\ ps ) /\ ch ) -> ps ) $=
    ( id ad2antlr ) BBACBDE $.

  ${
    simplrd.1 $e |- ( ph -> ( ( ps /\ ch ) /\ th ) ) $.
    $( Deduction eliminating a double conjunct.  (Contributed by Glauco
       Siliprandi, 11-Dec-2019.) $)
    simplrd $p |- ( ph -> ch ) $=
      ( wa simpld simprd ) ABCABCFDEGH $.
  $}

  $( Simplification of a conjunction.  (Contributed by NM, 21-Mar-2007.) $)
  simprl $p |- ( ( ph /\ ( ps /\ ch ) ) -> ps ) $=
    ( id ad2antrl ) BBACBDE $.

  ${
    simprld.1 $e |- ( ph -> ( ps /\ ( ch /\ th ) ) ) $.
    $( Deduction eliminating a double conjunct.  (Contributed by Glauco
       Siliprandi, 11-Dec-2019.) $)
    simprld $p |- ( ph -> ch ) $=
      ( wa simprd simpld ) ACDABCDFEGH $.
  $}

  $( Simplification of a conjunction.  (Contributed by NM, 21-Mar-2007.) $)
  simprr $p |- ( ( ph /\ ( ps /\ ch ) ) -> ch ) $=
    ( id ad2antll ) CCABCDE $.

  ${
    simprrd.1 $e |- ( ph -> ( ps /\ ( ch /\ th ) ) ) $.
    $( Deduction form of ~ simprr , eliminating a double conjunct.
       (Contributed by Glauco Siliprandi, 11-Dec-2019.) $)
    simprrd $p |- ( ph -> th ) $=
      ( wa simprd ) ACDABCDFEGG $.
  $}

  $( Simplification of a conjunction.  (Contributed by Jeff Hankins,
     28-Jul-2009.)  (Proof shortened by Wolf Lammen, 6-Apr-2022.) $)
  simplll $p |- ( ( ( ( ph /\ ps ) /\ ch ) /\ th ) -> ph ) $=
    ( id ad3antrrr ) AABCDAEF $.

  $( Simplification of a conjunction.  (Contributed by Jeff Hankins,
     28-Jul-2009.)  (Proof shortened by Wolf Lammen, 6-Apr-2022.) $)
  simpllr $p |- ( ( ( ( ph /\ ps ) /\ ch ) /\ th ) -> ps ) $=
    ( id ad3antlr ) BBACDBEF $.

  $( Simplification of a conjunction.  (Contributed by Jeff Hankins,
     28-Jul-2009.) $)
  simplrl $p |- ( ( ( ph /\ ( ps /\ ch ) ) /\ th ) -> ps ) $=
    ( wa simpl ad2antlr ) BCEBADBCFG $.

  $( Simplification of a conjunction.  (Contributed by Jeff Hankins,
     28-Jul-2009.) $)
  simplrr $p |- ( ( ( ph /\ ( ps /\ ch ) ) /\ th ) -> ch ) $=
    ( wa simpr ad2antlr ) BCECADBCFG $.

  $( Simplification of a conjunction.  (Contributed by Jeff Hankins,
     28-Jul-2009.) $)
  simprll $p |- ( ( ph /\ ( ( ps /\ ch ) /\ th ) ) -> ps ) $=
    ( wa simpl ad2antrl ) BCEBADBCFG $.

  $( Simplification of a conjunction.  (Contributed by Jeff Hankins,
     28-Jul-2009.) $)
  simprlr $p |- ( ( ph /\ ( ( ps /\ ch ) /\ th ) ) -> ch ) $=
    ( wa simpr ad2antrl ) BCECADBCFG $.

  $( Simplification of a conjunction.  (Contributed by Jeff Hankins,
     28-Jul-2009.) $)
  simprrl $p |- ( ( ph /\ ( ps /\ ( ch /\ th ) ) ) -> ch ) $=
    ( wa simpl ad2antll ) CDECABCDFG $.

  $( Simplification of a conjunction.  (Contributed by Jeff Hankins,
     28-Jul-2009.) $)
  simprrr $p |- ( ( ph /\ ( ps /\ ( ch /\ th ) ) ) -> th ) $=
    ( wa simpr ad2antll ) CDEDABCDFG $.

  $( Simplification of a conjunction.  (Contributed by Mario Carneiro,
     4-Jan-2017.)  (Proof shortened by Wolf Lammen, 24-May-2022.) $)
  simp-4l $p |- ( ( ( ( ( ph /\ ps ) /\ ch ) /\ th ) /\ ta ) -> ph ) $=
    ( id ad4antr ) AABCDEAFG $.

  $( Simplification of a conjunction.  (Contributed by Mario Carneiro,
     4-Jan-2017.)  (Proof shortened by Wolf Lammen, 24-May-2022.) $)
  simp-4r $p |- ( ( ( ( ( ph /\ ps ) /\ ch ) /\ th ) /\ ta ) -> ps ) $=
    ( simpr ad5ant12 ) ABBCDEABFG $.

  $( Simplification of a conjunction.  (Contributed by Mario Carneiro,
     4-Jan-2017.)  (Proof shortened by Wolf Lammen, 24-May-2022.) $)
  simp-5l $p |- ( ( ( ( ( ( ph /\ ps ) /\ ch ) /\ th ) /\ ta )
    /\ et ) -> ph ) $=
    ( id ad5antr ) AABCDEFAGH $.

  $( Simplification of a conjunction.  (Contributed by Mario Carneiro,
     4-Jan-2017.)  (Proof shortened by Wolf Lammen, 24-May-2022.) $)
  simp-5r $p |- ( ( ( ( ( ( ph /\ ps ) /\ ch ) /\ th ) /\ ta )
    /\ et ) -> ps ) $=
    ( wa simpr ad4antr ) ABGBCDEFABHI $.

  $( Simplification of a conjunction.  (Contributed by Mario Carneiro,
     4-Jan-2017.)  (Proof shortened by Wolf Lammen, 24-May-2022.) $)
  simp-6l $p |- ( ( ( ( ( ( ( ph /\ ps ) /\ ch ) /\ th ) /\ ta )
    /\ et ) /\ ze ) -> ph ) $=
    ( id ad6antr ) AABCDEFGAHI $.

  $( Simplification of a conjunction.  (Contributed by Mario Carneiro,
     4-Jan-2017.)  (Proof shortened by Wolf Lammen, 24-May-2022.) $)
  simp-6r $p |- ( ( ( ( ( ( ( ph /\ ps ) /\ ch ) /\ th ) /\ ta )
    /\ et ) /\ ze ) -> ps ) $=
    ( wa simpr ad5antr ) ABHBCDEFGABIJ $.

  $( Simplification of a conjunction.  (Contributed by Mario Carneiro,
     4-Jan-2017.)  (Proof shortened by Wolf Lammen, 24-May-2022.) $)
  simp-7l $p |- ( ( ( ( ( ( ( ( ph /\ ps ) /\ ch ) /\ th ) /\ ta )
    /\ et ) /\ ze ) /\ si ) -> ph ) $=
    ( id ad7antr ) AABCDEFGHAIJ $.

  $( Simplification of a conjunction.  (Contributed by Mario Carneiro,
     4-Jan-2017.)  (Proof shortened by Wolf Lammen, 24-May-2022.) $)
  simp-7r $p |- ( ( ( ( ( ( ( ( ph /\ ps ) /\ ch ) /\ th ) /\ ta )
    /\ et ) /\ ze ) /\ si ) -> ps ) $=
    ( wa simpr ad6antr ) ABIBCDEFGHABJK $.

  $( Simplification of a conjunction.  (Contributed by Mario Carneiro,
     4-Jan-2017.)  (Proof shortened by Wolf Lammen, 24-May-2022.) $)
  simp-8l $p |- ( ( ( ( ( ( ( ( ( ph /\ ps ) /\ ch ) /\ th ) /\ ta )
    /\ et ) /\ ze ) /\ si ) /\ rh ) -> ph ) $=
    ( id ad8antr ) AABCDEFGHIAJK $.

  $( Simplification of a conjunction.  (Contributed by Mario Carneiro,
     4-Jan-2017.)  (Proof shortened by Wolf Lammen, 24-May-2022.) $)
  simp-8r $p |- ( ( ( ( ( ( ( ( ( ph /\ ps ) /\ ch ) /\ th ) /\ ta )
    /\ et ) /\ ze ) /\ si ) /\ rh ) -> ps ) $=
    ( wa simpr ad7antr ) ABJBCDEFGHIABKL $.

  $( Simplification of a conjunction.  (Contributed by Mario Carneiro,
     4-Jan-2017.)  (Proof shortened by Wolf Lammen, 24-May-2022.) $)
  simp-9l $p |- ( ( ( ( ( ( ( ( ( ( ph /\ ps ) /\ ch ) /\ th ) /\ ta )
    /\ et ) /\ ze ) /\ si ) /\ rh ) /\ mu ) -> ph ) $=
    ( id ad9antr ) AABCDEFGHIJAKL $.

  $( Simplification of a conjunction.  (Contributed by Mario Carneiro,
     4-Jan-2017.)  (Proof shortened by Wolf Lammen, 24-May-2022.) $)
  simp-9r $p |- ( ( ( ( ( ( ( ( ( ( ph /\ ps ) /\ ch ) /\ th ) /\ ta )
    /\ et ) /\ ze ) /\ si ) /\ rh ) /\ mu ) -> ps ) $=
    ( wa simpr ad8antr ) ABKBCDEFGHIJABLM $.

  $( Simplification of a conjunction.  (Contributed by Mario Carneiro,
     4-Jan-2017.)  (Proof shortened by Wolf Lammen, 24-May-2022.) $)
  simp-10l $p |- ( ( ( ( ( ( ( ( ( ( ( ph /\ ps ) /\ ch ) /\ th ) /\ ta )
    /\ et ) /\ ze ) /\ si ) /\ rh ) /\ mu ) /\ la ) -> ph ) $=
    ( id ad10antr ) AABCDEFGHIJKALM $.

  $( Simplification of a conjunction.  (Contributed by Mario Carneiro,
     4-Jan-2017.)  (Proof shortened by Wolf Lammen, 24-May-2022.) $)
  simp-10r $p |- ( ( ( ( ( ( ( ( ( ( ( ph /\ ps ) /\ ch ) /\ th ) /\ ta )
    /\ et ) /\ ze ) /\ si ) /\ rh ) /\ mu ) /\ la ) -> ps ) $=
    ( wa simpr ad9antr ) ABLBCDEFGHIJKABMN $.

  $( Simplification of a conjunction.  (Contributed by Mario Carneiro,
     4-Jan-2017.)  (Proof shortened by Wolf Lammen, 24-May-2022.) $)
  simp-11l $p |- ( ( ( ( ( ( ( ( ( ( ( ( ph /\ ps ) /\ ch ) /\ th ) /\ ta )
    /\ et ) /\ ze ) /\ si ) /\ rh ) /\ mu ) /\ la ) /\ ka ) -> ph ) $=
    ( wa simpl ad10antr ) ABMACDEFGHIJKLABNO $.

  $( Simplification of a conjunction.  (Contributed by Mario Carneiro,
     4-Jan-2017.)  (Proof shortened by Wolf Lammen, 24-May-2022.) $)
  simp-11r $p |- ( ( ( ( ( ( ( ( ( ( ( ( ph /\ ps ) /\ ch ) /\ th ) /\ ta )
    /\ et ) /\ ze ) /\ si ) /\ rh ) /\ mu ) /\ la ) /\ ka ) -> ps ) $=
    ( wa simpr ad10antr ) ABMBCDEFGHIJKLABNO $.

$( Restating theorems using conjunction. $)

  ${
    pm2.01da.1 $e |- ( ( ph /\ ps ) -> -. ps ) $.
    $( Deduction based on reductio ad absurdum.  See ~ pm2.01 .  (Contributed
       by Mario Carneiro, 9-Feb-2017.) $)
    pm2.01da $p |- ( ph -> -. ps ) $=
      ( wn ex pm2.01d ) ABABBDCEF $.
  $}

  ${
    pm2.18da.1 $e |- ( ( ph /\ -. ps ) -> ps ) $.
    $( Deduction based on reductio ad absurdum.  See ~ pm2.18 .  (Contributed
       by Mario Carneiro, 9-Feb-2017.) $)
    pm2.18da $p |- ( ph -> ps ) $=
      ( wn ex pm2.18d ) ABABDBCEF $.
  $}

  ${
    impbida.1 $e |- ( ( ph /\ ps ) -> ch ) $.
    impbida.2 $e |- ( ( ph /\ ch ) -> ps ) $.
    $( Deduce an equivalence from two implications.  Variant of ~ impbid .
       (Contributed by NM, 17-Feb-2007.) $)
    impbida $p |- ( ph -> ( ps <-> ch ) ) $=
      ( ex impbid ) ABCABCDFACBEFG $.
  $}

  ${
    pm5.21nd.1 $e |- ( ( ph /\ ps ) -> th ) $.
    pm5.21nd.2 $e |- ( ( ph /\ ch ) -> th ) $.
    pm5.21nd.3 $e |- ( th -> ( ps <-> ch ) ) $.
    $( Eliminate an antecedent implied by each side of a biconditional.
       Variant of ~ pm5.21ndd .  (Contributed by NM, 20-Nov-2005.)  (Proof
       shortened by Wolf Lammen, 4-Nov-2013.) $)
    pm5.21nd $p |- ( ph -> ( ps <-> ch ) ) $=
      ( ex wb wi a1i pm5.21ndd ) ADBCABDEHACDFHDBCIJAGKL $.

  $}

  $( Conjunctive detachment.  Theorem *3.35 of [WhiteheadRussell] p. 112.
     Variant of ~ pm2.27 .  (Contributed by NM, 14-Dec-2002.) $)
  pm3.35 $p |- ( ( ph /\ ( ph -> ps ) ) -> ps ) $=
    ( wi pm2.27 imp ) AABCBABDE $.

  ${
    pm5.74da.1 $e |- ( ( ph /\ ps ) -> ( ch <-> th ) ) $.
    $( Distribution of implication over biconditional (deduction form).
       Variant of ~ pm5.74d .  (Contributed by NM, 4-May-2007.) $)
    pm5.74da $p |- ( ph -> ( ( ps -> ch ) <-> ( ps -> th ) ) ) $=
      ( wb ex pm5.74d ) ABCDABCDFEGH $.
  $}

  $( Theorem *4.22 of [WhiteheadRussell] p. 117. ~ bitri in closed form.
     (Contributed by NM, 3-Jan-2005.) $)
  bitr $p |- ( ( ( ph <-> ps ) /\ ( ps <-> ch ) ) -> ( ph <-> ch ) ) $=
    ( wb bibi1 biimpar ) ABDACDBCDABCEF $.

  $( A transitive law of equivalence.  Compare Theorem *4.22 of
     [WhiteheadRussell] p. 117.  (Contributed by NM, 18-Aug-1993.) $)
  biantr $p |- ( ( ( ph <-> ps ) /\ ( ch <-> ps ) ) -> ( ph <-> ch ) ) $=
    ( wb id bibi2d biimparc ) CBDZACDABDHCBAHEFG $.

  $( Theorem *4.14 of [WhiteheadRussell] p. 117.  Related to ~ con34b .
     (Contributed by NM, 3-Jan-2005.)  (Proof shortened by Wolf Lammen,
     23-Oct-2012.) $)
  pm4.14 $p |- ( ( ( ph /\ ps ) -> ch ) <-> ( ( ph /\ -. ch ) -> -. ps ) ) $=
    ( wi wn wa con34b imbi2i impexp 3bitr4i ) ABCDZDACEZBEZDZDABFCDALFMDKNABCGH
    ABCIALMIJ $.

  $( Theorem *3.37 (Transp) of [WhiteheadRussell] p. 112.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 23-Oct-2012.) $)
  pm3.37 $p |- ( ( ( ph /\ ps ) -> ch ) -> ( ( ph /\ -. ch ) -> -. ps ) ) $=
    ( wa wi wn pm4.14 biimpi ) ABDCEACFDBFEABCGH $.

  $( Conjoin antecedents and consequents of two premises.  This is the closed
     theorem form of ~ anim12d .  Theorem *3.47 of [WhiteheadRussell] p. 113.
     It was proved by Leibniz, and it evidently pleased him enough to call it
     _praeclarum theorema_ (splendid theorem).  (Contributed by NM,
     12-Aug-1993.)  (Proof shortened by Wolf Lammen, 7-Apr-2013.) $)
  prth $p |- ( ( ( ph -> ps ) /\ ( ch -> th ) )
       -> ( ( ph /\ ch ) -> ( ps /\ th ) ) ) $=
    ( wi wa simpl simpr anim12d ) ABEZCDEZFABCDJKGJKHI $.

$( Replacing conjunction. $)

  $( Conjunction implies implication.  Theorem *3.4 of [WhiteheadRussell]
     p. 113.  (Contributed by NM, 31-Jul-1995.) $)
  pm3.4 $p |- ( ( ph /\ ps ) -> ( ph -> ps ) ) $=
    ( wa simpr a1d ) ABCBAABDE $.

  ${
    exbiri.1 $e |- ( ( ph /\ ps ) -> ( ch <-> th ) ) $.
    $( Inference form of ~ exbir .  This proof is ~ exbiriVD automatically
       translated and minimized.  (Contributed by Alan Sare, 31-Dec-2011.)
       (Proof shortened by Wolf Lammen, 27-Jan-2013.) $)
    exbiri $p |- ( ph -> ( ps -> ( th -> ch ) ) ) $=
      ( wa biimpar exp31 ) ABDCABFCDEGH $.
  $}

$( Contradiction using conjunction. $)

  ${
    pm2.61ian.1 $e |- ( ( ph /\ ps ) -> ch ) $.
    pm2.61ian.2 $e |- ( ( -. ph /\ ps ) -> ch ) $.
    $( Elimination of an antecedent.  (Contributed by NM, 1-Jan-2005.) $)
    pm2.61ian $p |- ( ps -> ch ) $=
      ( wi ex wn pm2.61i ) ABCFABCDGAHBCEGI $.
  $}

  ${
    pm2.61dan.1 $e |- ( ( ph /\ ps ) -> ch ) $.
    pm2.61dan.2 $e |- ( ( ph /\ -. ps ) -> ch ) $.
    $( Elimination of an antecedent.  (Contributed by NM, 1-Jan-2005.) $)
    pm2.61dan $p |- ( ph -> ch ) $=
      ( ex wn pm2.61d ) ABCABCDFABGCEFH $.
  $}

  ${
    pm2.61ddan.1 $e |- ( ( ph /\ ps ) -> th ) $.
    pm2.61ddan.2 $e |- ( ( ph /\ ch ) -> th ) $.
    pm2.61ddan.3 $e |- ( ( ph /\ ( -. ps /\ -. ch ) ) -> th ) $.
    $( Elimination of two antecedents.  (Contributed by NM, 9-Jul-2013.) $)
    pm2.61ddan $p |- ( ph -> th ) $=
      ( wn wa adantlr anassrs pm2.61dan ) ABDEABHZICDACDMFJAMCHDGKLL $.
  $}

  ${
    pm2.61dda.1 $e |- ( ( ph /\ -. ps ) -> th ) $.
    pm2.61dda.2 $e |- ( ( ph /\ -. ch ) -> th ) $.
    pm2.61dda.3 $e |- ( ( ph /\ ( ps /\ ch ) ) -> th ) $.
    $( Elimination of two antecedents.  (Contributed by NM, 9-Jul-2013.) $)
    pm2.61dda $p |- ( ph -> th ) $=
      ( wa anassrs wn adantlr pm2.61dan ) ABDABHCDABCDGIACJDBFKLEL $.
  $}

  ${
    mtand.1 $e |- ( ph -> -. ch ) $.
    mtand.2 $e |- ( ( ph /\ ps ) -> ch ) $.
    $( A modus tollens deduction.  (Contributed by Jeff Hankins,
       19-Aug-2009.) $)
    mtand $p |- ( ph -> -. ps ) $=
      ( ex mtod ) ABCDABCEFG $.
  $}

  ${
    pm2.65da.1 $e |- ( ( ph /\ ps ) -> ch ) $.
    pm2.65da.2 $e |- ( ( ph /\ ps ) -> -. ch ) $.
    $( Deduction for proof by contradiction.  (Contributed by NM,
       12-Jun-2014.) $)
    pm2.65da $p |- ( ph -> -. ps ) $=
      ( ex wn pm2.65d ) ABCABCDFABCGEFH $.
  $}

  ${
    condan.1 $e |- ( ( ph /\ -. ps ) -> ch ) $.
    condan.2 $e |- ( ( ph /\ -. ps ) -> -. ch ) $.
    $( Proof by contradiction.  (Contributed by NM, 9-Feb-2006.)  (Proof
       shortened by Wolf Lammen, 19-Jun-2014.) $)
    condan $p |- ( ph -> ps ) $=
      ( wn pm2.65da notnotrd ) ABABFCDEGH $.
  $}

$( Relation of conjunction to bi-conditional. $)

  $( An implication is equivalent to the equivalence of some implied
     equivalence and some other equivalence involving a conjunction.  A utility
     lemma as illustrated in ~ biadanii and ~ elelb .  (Contributed by BJ,
     4-Mar-2023.)  (Proof shortened by Wolf Lammen, 8-Mar-2023.) $)
  biadan $p |- ( ( ph -> ps ) <->
                   ( ( ps -> ( ph <-> ch ) ) <-> ( ph <-> ( ps /\ ch ) ) ) ) $=
    ( wi wa wb pm4.71r bicom pm5.32 bibi12i biluk 3bitr4ri 3bitri ) ABDABAEZFNA
    FZBACFDZABCEZFZFZABGANHRPFQAFZNQFZFSORTPUAAQHBACIJPRHNAQKLM $.

  $( Obsolete version of ~ biadan as of 8-Mar-2023.  (Contributed by BJ,
     4-Mar-2023.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  biadanOLD $p |- ( ( ph -> ps ) <->
                   ( ( ps -> ( ph <-> ch ) ) <-> ( ph <-> ( ps /\ ch ) ) ) ) $=
    ( wi wa wb pm5.32 bicom bitri biass mpbir pm4.71r bitr4i bibi2i 3bitri mpbi
    ) ABDZABCEZFZBACFDZFZTSFTRFZQAFZFZQUAFZUBBAEZUCUBUFFTRUFFZFTUFRFUGBACGUFRHI
    TRUFJKUCUFFQAUFFFABLQAUFJKMUDUCUBFQAUBFZFUEUBUCHQAUBJUHUAQUHARTFZFUAUBUIATR
    HNARTJMNOPSTHI $.

  ${
    biadani.1 $e |- ( ph -> ps ) $.
    $( Inference associated with ~ biadan .  (Contributed by BJ,
       4-Mar-2023.) $)
    biadani $p |- ( ( ps -> ( ph <-> ch ) ) <-> ( ph <-> ( ps /\ ch ) ) ) $=
      ( wi wb wa biadan mpbi ) ABEBACFEABCGFFDABCHI $.

    $( Alternate proof of ~ biadani not using ~ biadan .  (Contributed by BJ,
       4-Mar-2023.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    biadaniALT $p |- ( ( ps -> ( ph <-> ch ) ) <-> ( ph <-> ( ps /\ ch ) ) ) $=
      ( wb wi wa pm5.32 pm4.71ri bibi1i bitr4i ) BACEFBAGZBCGZEAMEBACHALMABDIJK
      $.

    biadanii.2 $e |- ( ps -> ( ph <-> ch ) ) $.
    $( Inference associated with ~ biadani .  Add a conjunction to an
       equivalence.  (Contributed by Jeff Madsen, 20-Jun-2011.)  (Proof
       shortened by BJ, 4-Mar-2023.) $)
    biadanii $p |- ( ph <-> ( ps /\ ch ) ) $=
      ( wb wi wa biadani mpbi ) BACFGABCHFEABCDIJ $.

    $( Obsolete proof of ~ biadanii as of 4-Mar-2023.  (Contributed by Jeff
       Madsen, 20-Jun-2011.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    biadan2OLD $p |- ( ph <-> ( ps /\ ch ) ) $=
      ( wa pm4.71ri pm5.32i bitri ) ABAFBCFABDGBACEHI $.
  $}

  $( Two propositions are equivalent if they are both true.  Theorem *5.1 of
     [WhiteheadRussell] p. 123.  (Contributed by NM, 21-May-1994.) $)
  pm5.1 $p |- ( ( ph /\ ps ) -> ( ph <-> ps ) ) $=
    ( wb pm5.501 biimpa ) ABABCABDE $.

  $( Two propositions are equivalent if they are both false.  Theorem *5.21 of
     [WhiteheadRussell] p. 124.  (Contributed by NM, 21-May-1994.) $)
  pm5.21 $p |- ( ( -. ph /\ -. ps ) -> ( ph <-> ps ) ) $=
    ( wn wb pm5.21im imp ) ACBCABDABEF $.

  $( Theorem *5.35 of [WhiteheadRussell] p. 125.  Closed form of ~ 2thd .
     (Contributed by NM, 3-Jan-2005.) $)
  pm5.35 $p |- ( ( ( ph -> ps ) /\ ( ph -> ch ) ) ->
                ( ph -> ( ps <-> ch ) ) ) $=
    ( wi wa pm5.1 pm5.74rd ) ABDZACDZEABCHIFG $.

  $( Introduce one conjunct as an antecedent to the other.  "abai" stands for
     "and, biconditional, and, implication".  (Contributed by NM, 12-Aug-1993.)
     (Proof shortened by Wolf Lammen, 7-Dec-2012.) $)
  abai $p |- ( ( ph /\ ps ) <-> ( ph /\ ( ph -> ps ) ) ) $=
    ( wi biimt pm5.32i ) ABABCABDE $.

  $( Conjunction with implication.  Compare Theorem *4.45 of [WhiteheadRussell]
     p. 119.  (Contributed by NM, 17-May-1998.) $)
  pm4.45im $p |- ( ph <-> ( ph /\ ( ps -> ph ) ) ) $=
    ( wi ax-1 pm4.71i ) ABACABDE $.

$( Moving subexpressions in/out of a conjunction. $)

  $( Theorem to move a conjunct in and out of a negation.  (Contributed by NM,
     9-Nov-2003.) $)
  nan $p |- ( ( ph -> -. ( ps /\ ch ) ) <-> ( ( ph /\ ps ) -> -. ch ) ) $=
    ( wa wn wi impexp imnan imbi2i bitr2i ) ABDCEZFABKFZFABCDEZFABKGLMABCHIJ $.

  $( Theorem *5.31 of [WhiteheadRussell] p. 125.  (Contributed by NM,
     3-Jan-2005.) $)
  pm5.31 $p |- ( ( ch /\ ( ph -> ps ) ) -> ( ph -> ( ps /\ ch ) ) ) $=
    ( wi wa pm3.21 imim2d imp ) CABDABCEZDCBIACBFGH $.

  $( Variant of ~ pm5.31 .  (Contributed by Rodolfo Medina, 15-Oct-2010.) $)
  pm5.31r $p |- ( ( ch /\ ( ph -> ps ) ) -> ( ph -> ( ch /\ ps ) ) ) $=
    ( wi wa pm3.2 imim2d imp ) CABDACBEZDCBIACBFGH $.

  $( Theorem *4.15 of [WhiteheadRussell] p. 117.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 18-Nov-2012.) $)
  pm4.15 $p |- ( ( ( ph /\ ps ) -> -. ch ) <-> ( ( ps /\ ch ) -> -. ph ) ) $=
    ( wa wn wi con2b nan bitr2i ) BCDZAEFAJEFABDCEFJAGABCHI $.

  $( Theorem *5.36 of [WhiteheadRussell] p. 125.  (Contributed by NM,
     3-Jan-2005.) $)
  pm5.36 $p |- ( ( ph /\ ( ph <-> ps ) ) <-> ( ps /\ ( ph <-> ps ) ) ) $=
    ( wb id pm5.32ri ) ABCZABFDE $.

$( Absorption in conjunction. $)

  $( A conjunction with a negated conjunction.  (Contributed by AV,
     8-Mar-2022.)  (Proof shortened by Wolf Lammen, 1-Apr-2022.) $)
  annotanannot $p |- ( ( ph /\ -. ( ph /\ ps ) ) <-> ( ph /\ -. ps ) ) $=
    ( wa wn ibar bicomd notbid pm5.32i ) AABCZDBDAIBABIABEFGH $.

  $( Theorem *5.33 of [WhiteheadRussell] p. 125.  (Contributed by NM,
     3-Jan-2005.) $)
  pm5.33 $p |- ( ( ph /\ ( ps -> ch ) ) <->
                ( ph /\ ( ( ph /\ ps ) -> ch ) ) ) $=
    ( wi wa ibar imbi1d pm5.32i ) ABCDABEZCDABICABFGH $.

$( Miscellaneous theorems using conjunction. $)

  ${
    syl12anc.1 $e |- ( ph -> ps ) $.
    syl12anc.2 $e |- ( ph -> ch ) $.
    syl12anc.3 $e |- ( ph -> th ) $.
    ${
      syl12anc.4 $e |- ( ( ps /\ ( ch /\ th ) ) -> ta ) $.
      $( Syllogism combined with contraction.  (Contributed by Jeff Hankins,
         1-Aug-2009.) $)
      syl12anc $p |- ( ph -> ta ) $=
        ( wa jca32 syl ) ABCDJJEABCDFGHKIL $.
    $}

    ${
      syl21anc.4 $e |- ( ( ( ps /\ ch ) /\ th ) -> ta ) $.
      $( Syllogism combined with contraction.  (Contributed by Jeff Hankins,
         1-Aug-2009.) $)
      syl21anc $p |- ( ph -> ta ) $=
        ( wa jca31 syl ) ABCJDJEABCDFGHKIL $.
    $}

    ${
      syl22anc.4 $e |- ( ph -> ta ) $.
      syl22anc.5 $e |- ( ( ( ps /\ ch ) /\ ( th /\ ta ) ) -> et ) $.
      $( Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) $)
      syl22anc $p |- ( ph -> et ) $=
        ( wa jca syl12anc ) ABCLDEFABCGHMIJKN $.
    $}

  $}

  ${
    syl1111anc.1 $e |- ( ph -> ps ) $.
    syl1111anc.2 $e |- ( ph -> ch ) $.
    syl1111anc.3 $e |- ( ph -> th ) $.
    syl1111anc.4 $e |- ( ph -> ta ) $.
    syl1111anc.5 $e |- ( ( ( ( ps /\ ch ) /\ th ) /\ ta ) -> et ) $.
    $( Four-hypothesis elimination deduction for an assertion with a singleton
       virtual hypothesis collection.  Similar to ~ syl112anc except the
       unification theorem uses left-nested conjunction.  (Contributed by Alan
       Sare, 17-Oct-2017.) $)
    syl1111anc $p |- ( ph -> et ) $=
      ( wi exp41 syl3c mpd ) AEFJABCDEFLGHIBCDEFKMNO $.
  $}

  ${
    mpsyl4anc.1 $e |- ph $.
    mpsyl4anc.2 $e |- ps $.
    mpsyl4anc.3 $e |- ch $.
    mpsyl4anc.4 $e |- ( th -> ta ) $.
    mpsyl4anc.5 $e |- ( ( ( ( ph /\ ps ) /\ ch ) /\ ta ) -> et ) $.
    $( An elimination deduction.  (Contributed by Alan Sare, 17-Oct-2017.) $)
    mpsyl4anc $p |- ( th -> et ) $=
      ( wi exp41 mp2 mpsyl ) CDEFIJABCEFLLGHABCEFKMNO $.
  $}

  $( Theorem *4.87 of [WhiteheadRussell] p. 122.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Eric Schmidt, 26-Oct-2006.) $)
  pm4.87 $p |- ( ( ( ( ( ph /\ ps ) -> ch ) <-> ( ph -> ( ps -> ch ) ) ) /\
                ( ( ph -> ( ps -> ch ) ) <-> ( ps -> ( ph -> ch ) ) ) ) /\
                ( ( ps -> ( ph -> ch ) ) <-> ( ( ps /\ ph ) -> ch ) ) ) $=
    ( wa wi wb impexp bi2.04 pm3.2i bicomi ) ABDCEABCEEZFZKBACEEZFZDMBADCEZFLNA
    BCGABCHIOMBACGJI $.

  $( Removal of conjunct from one side of an equivalence.  (Contributed by NM,
     21-Jun-1993.) $)
  bimsc1 $p |- ( ( ( ph -> ps ) /\ ( ch <-> ( ps /\ ph ) ) )
               -> ( ch <-> ph ) ) $=
    ( wi wa wb simpr ancr impbid2 bibi2d biimpa ) ABDZCBAEZFCAFLMACLMABAGABHIJK
    $.

  ${
    a2and.1 $e |- ( ph -> ( ( ps /\ rh ) -> ( ta -> th ) ) ) $.
    a2and.2 $e |- ( ph -> ( ( ps /\ rh ) -> ch ) ) $.
    $( Deduction distributing a conjunction as embedded antecedent.
       (Contributed by AV, 25-Oct-2019.)  (Proof shortened by Wolf Lammen,
       19-Jan-2020.) $)
    a2and $p |- ( ph -> ( ( ( ps /\ ch ) -> ta )
                            -> ( ( ps /\ rh ) -> th ) ) ) $=
      ( wa wi expd imdistand imp embantd ex com23 ) ABFIZBCIZEJZDAQSDJAQIREDAQR
      ABFCABFCHKLMAQEDJGMNOP $.
  $}

  ${
    animpimp2impd.1 $e |- ( ( ps /\ ph ) -> ( ch -> ( th -> et ) ) ) $.
    animpimp2impd.2 $e |- ( ( ps /\ ( ph /\ th ) ) -> ( et -> ta ) ) $.
    $( Deduction deriving nested implications from conjunctions.  (Contributed
       by AV, 21-Aug-2022.) $)
    animpimp2impd $p |- ( ph -> ( ( ps -> ch ) -> ( ps -> ( th -> ta ) ) ) ) $=
      ( wi wa expr a2d syld expcom ) ABCDEIZBACOIBAJZCDFIOGPDFEBADFEIHKLMNL $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Logical disjunction
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  This section defines disjunction of two formulas, denoted by infix " ` \/ ` "
  and read "or".  It is defined in terms of implication and negation, which is
  possible in classical logic (but not in intuitionistic logic: see iset.mm).
  This section contains only theorems proved without ~ df-an (theorems that are
  proved using ~ df-an are deferred to the next section).  Basic theorems that
  help simplifying and applying disjunction are ~ olc , ~ orc , and ~ orcom .

  As mentioned in the "note on definitions" in the section comment for logical
  equivalence, all theorems in this and the previous section can be stated in
  terms of implication and negation only.  Additionally, in classical logic
  (but not in intuitionistic logic: see iset.mm), it is also possible to
  translate conjunction into disjunction and conversely via the De Morgan law
  ~ anor : conjunction and disjunction are dual connectives.  Either is
  sufficient to develop all propositional calculus of the logic (together with
  implication and negation).  In practice, conjunction is more efficient, its
  big advantage being the possibility to use it to group antecedents in a
  convenient way, using ~ imp and ~ ex as noted in the previous section.

  An illustration of the conservativity of ~ df-an is given by ~ orim12dALT ,
  which is an alternate proof of ~ orim12d not using ~ df-an .

$)

  $( Declare connectives for disjunction ("or"). $)
  $c \/ $.  $( Vee (read:  "or") $)

  $( Extend wff definition to include disjunction ("or"). $)
  wo $a wff ( ph \/ ps ) $.

  $( Define disjunction (logical "or").  Definition of [Margaris] p. 49.  When
     the left operand, right operand, or both are true, the result is true;
     when both sides are false, the result is false.  For example, it is true
     that ` ( 2 = 3 \/ 4 = 4 ) ` ( ~ ex-or ).  After we define the constant
     true ` T. ` ( ~ df-tru ) and the constant false ` F. ` ( ~ df-fal ), we
     will be able to prove these truth table values:
     ` ( ( T. \/ T. ) <-> T. ) ` ( ~ truortru ), ` ( ( T. \/ F. ) <-> T. ) `
     ( ~ truorfal ), ` ( ( F. \/ T. ) <-> T. ) ` ( ~ falortru ), and
     ` ( ( F. \/ F. ) <-> F. ) ` ( ~ falorfal ).

     Contrast with ` /\ ` ( ~ df-an ), ` -> ` ( ~ wi ), ` -/\ ` ( ~ df-nan ),
     and ` \/_ ` ( ~ df-xor ).  (Contributed by NM, 27-Dec-1992.) $)
  df-or $a |- ( ( ph \/ ps ) <-> ( -. ph -> ps ) ) $.

  $( Theorem *4.64 of [WhiteheadRussell] p. 120.  (Contributed by NM,
     3-Jan-2005.) $)
  pm4.64 $p |- ( ( -. ph -> ps ) <-> ( ph \/ ps ) ) $=
    ( wo wn wi df-or bicomi ) ABCADBEABFG $.

  $( Theorem *4.66 of [WhiteheadRussell] p. 120.  (Contributed by NM,
     3-Jan-2005.) $)
  pm4.66 $p |- ( ( -. ph -> -. ps ) <-> ( ph \/ -. ps ) ) $=
    ( wn pm4.64 ) ABCD $.

  $( Theorem *2.53 of [WhiteheadRussell] p. 107.  (Contributed by NM,
     3-Jan-2005.) $)
  pm2.53 $p |- ( ( ph \/ ps ) -> ( -. ph -> ps ) ) $=
    ( wo wn wi df-or biimpi ) ABCADBEABFG $.

  $( Theorem *2.54 of [WhiteheadRussell] p. 107.  (Contributed by NM,
     3-Jan-2005.) $)
  pm2.54 $p |- ( ( -. ph -> ps ) -> ( ph \/ ps ) ) $=
    ( wo wn wi df-or biimpri ) ABCADBEABFG $.

  $( Implication in terms of disjunction.  Theorem *4.6 of [WhiteheadRussell]
     p. 120.  (Contributed by NM, 3-Jan-1993.) $)
  imor $p |- ( ( ph -> ps ) <-> ( -. ph \/ ps ) ) $=
    ( wi wn wo notnotb imbi1i df-or bitr4i ) ABCADZDZBCJBEAKBAFGJBHI $.

  ${
    imori.1 $e |- ( ph -> ps ) $.
    $( Infer disjunction from implication.  (Contributed by NM,
       12-Mar-2012.) $)
    imori $p |- ( -. ph \/ ps ) $=
      ( wi wn wo imor mpbi ) ABDAEBFCABGH $.
  $}

  ${
    imorri.1 $e |- ( -. ph \/ ps ) $.
    $( Infer implication from disjunction.  (Contributed by Jonathan Ben-Naim,
       3-Jun-2011.) $)
    imorri $p |- ( ph -> ps ) $=
      ( wi wn wo imor mpbir ) ABDAEBFCABGH $.
  $}

  $( Theorem *4.62 of [WhiteheadRussell] p. 120.  (Contributed by NM,
     3-Jan-2005.) $)
  pm4.62 $p |- ( ( ph -> -. ps ) <-> ( -. ph \/ -. ps ) ) $=
    ( wn imor ) ABCD $.

  ${
    jaoi.1 $e |- ( ph -> ps ) $.
    jaoi.2 $e |- ( ch -> ps ) $.
    $( Inference disjoining the antecedents of two implications.  (Contributed
       by NM, 5-Apr-1994.) $)
    jaoi $p |- ( ( ph \/ ch ) -> ps ) $=
      ( wo wn pm2.53 syl6 pm2.61d2 ) ACFZABKAGCBACHEIDJ $.
  $}

  ${
    jao1i.1 $e |- ( ps -> ( ch -> ph ) ) $.
    $( Add a disjunct in the antecedent of an implication.  (Contributed by
       Rodolfo Medina, 24-Sep-2010.) $)
    jao1i $p |- ( ( ph \/ ps ) -> ( ch -> ph ) ) $=
      ( wi ax-1 jaoi ) ACAEBACFDG $.
  $}

  ${
    jaod.1 $e |- ( ph -> ( ps -> ch ) ) $.
    jaod.2 $e |- ( ph -> ( th -> ch ) ) $.
    $( Deduction disjoining the antecedents of two implications.  (Contributed
       by NM, 18-Aug-1994.) $)
    jaod $p |- ( ph -> ( ( ps \/ th ) -> ch ) ) $=
      ( wo wi com12 jaoi ) BDGACBACHDABCEIADCFIJI $.

    jaod.3 $e |- ( ph -> ( ps \/ th ) ) $.
    $( Eliminate a disjunction in a deduction.  (Contributed by Mario Carneiro,
       29-May-2016.) $)
    mpjaod $p |- ( ph -> ch ) $=
      ( wo jaod mpd ) ABDHCGABCDEFIJ $.
  $}

  ${
    ori.1 $e |- ( ph \/ ps ) $.
    $( Infer implication from disjunction.  (Contributed by NM,
       11-Jun-1994.) $)
    ori $p |- ( -. ph -> ps ) $=
      ( wo wn wi df-or mpbi ) ABDAEBFCABGH $.
  $}

  ${
    orri.1 $e |- ( -. ph -> ps ) $.
    $( Infer disjunction from implication.  (Contributed by NM,
       11-Jun-1994.) $)
    orri $p |- ( ph \/ ps ) $=
      ( wo wn wi df-or mpbir ) ABDAEBFCABGH $.
  $}

  ${
    orrd.1 $e |- ( ph -> ( -. ps -> ch ) ) $.
    $( Deduce disjunction from implication.  (Contributed by NM,
       27-Nov-1995.) $)
    orrd $p |- ( ph -> ( ps \/ ch ) ) $=
      ( wn wi wo pm2.54 syl ) ABECFBCGDBCHI $.
  $}

  ${
    ord.1 $e |- ( ph -> ( ps \/ ch ) ) $.
    $( Deduce implication from disjunction.  (Contributed by NM,
       18-May-1994.) $)
    ord $p |- ( ph -> ( -. ps -> ch ) ) $=
      ( wo wn wi df-or sylib ) ABCEBFCGDBCHI $.
  $}

  ${
    orci.1 $e |- ph $.
    $( Deduction introducing a disjunct.  (Contributed by NM, 19-Jan-2008.)
       (Proof shortened by Wolf Lammen, 14-Nov-2012.) $)
    orci $p |- ( ph \/ ps ) $=
      ( pm2.24i orri ) ABABCDE $.

    $( Deduction introducing a disjunct.  (Contributed by NM, 19-Jan-2008.)
       (Proof shortened by Wolf Lammen, 14-Nov-2012.) $)
    olci $p |- ( ps \/ ph ) $=
      ( wn a1i orri ) BAABDCEF $.
  $}

  $( Introduction of a disjunct.  Theorem *2.2 of [WhiteheadRussell] p. 104.
     (Contributed by NM, 30-Aug-1993.) $)
  orc $p |- ( ph -> ( ph \/ ps ) ) $=
    ( pm2.24 orrd ) AABABCD $.

  $( Introduction of a disjunct.  Axiom *1.3 of [WhiteheadRussell] p. 96.
     (Contributed by NM, 30-Aug-1993.) $)
  olc $p |- ( ph -> ( ps \/ ph ) ) $=
    ( wn ax-1 orrd ) ABAABCDE $.

  $( Axiom *1.4 of [WhiteheadRussell] p. 96.  (Contributed by NM,
     3-Jan-2005.) $)
  pm1.4 $p |- ( ( ph \/ ps ) -> ( ps \/ ph ) ) $=
    ( wo olc orc jaoi ) ABACBABDBAEF $.

  $( Commutative law for disjunction.  Theorem *4.31 of [WhiteheadRussell]
     p. 118.  (Contributed by NM, 3-Jan-1993.)  (Proof shortened by Wolf
     Lammen, 15-Nov-2012.) $)
  orcom $p |- ( ( ph \/ ps ) <-> ( ps \/ ph ) ) $=
    ( wo pm1.4 impbii ) ABCBACABDBADE $.

  ${
    orcomd.1 $e |- ( ph -> ( ps \/ ch ) ) $.
    $( Commutation of disjuncts in consequent.  (Contributed by NM,
       2-Dec-2010.) $)
    orcomd $p |- ( ph -> ( ch \/ ps ) ) $=
      ( wo orcom sylib ) ABCECBEDBCFG $.
  $}

  ${
    orcoms.1 $e |- ( ( ph \/ ps ) -> ch ) $.
    $( Commutation of disjuncts in antecedent.  (Contributed by NM,
       2-Dec-2012.) $)
    orcoms $p |- ( ( ps \/ ph ) -> ch ) $=
      ( wo pm1.4 syl ) BAEABECBAFDG $.
  $}

  ${
    orcd.1 $e |- ( ph -> ps ) $.
    $( Deduction introducing a disjunct.  A translation of natural deduction
       rule ` \/ ` IR ( ` \/ ` insertion right), see ~ natded .  (Contributed
       by NM, 20-Sep-2007.) $)
    orcd $p |- ( ph -> ( ps \/ ch ) ) $=
      ( wo orc syl ) ABBCEDBCFG $.

    $( Deduction introducing a disjunct.  A translation of natural deduction
       rule ` \/ ` IL ( ` \/ ` insertion left), see ~ natded .  (Contributed by
       NM, 11-Apr-2008.)  (Proof shortened by Wolf Lammen, 3-Oct-2013.) $)
    olcd $p |- ( ph -> ( ch \/ ps ) ) $=
      ( orcd orcomd ) ABCABCDEF $.
  $}

  ${
    orcs.1 $e |- ( ( ph \/ ps ) -> ch ) $.
    $( Deduction eliminating disjunct. _Notational convention_:  We sometimes
       suffix with "s" the label of an inference that manipulates an
       antecedent, leaving the consequent unchanged.  The "s" means that the
       inference eliminates the need for a syllogism ( ~ syl ) -type inference
       in a proof.  (Contributed by NM, 21-Jun-1994.) $)
    orcs $p |- ( ph -> ch ) $=
      ( wo orc syl ) AABECABFDG $.
  $}

  ${
    olcs.1 $e |- ( ( ph \/ ps ) -> ch ) $.
    $( Deduction eliminating disjunct.  (Contributed by NM, 21-Jun-1994.)
       (Proof shortened by Wolf Lammen, 3-Oct-2013.) $)
    olcs $p |- ( ps -> ch ) $=
      ( orcoms orcs ) BACABCDEF $.
  $}

  ${
    mtord.1 $e |- ( ph -> -. ch ) $.
    mtord.2 $e |- ( ph -> -. th ) $.
    mtord.3 $e |- ( ph -> ( ps -> ( ch \/ th ) ) ) $.
    $( A modus tollens deduction involving disjunction.  (Contributed by Jeff
       Hankins, 15-Jul-2009.) $)
    mtord $p |- ( ph -> -. ps ) $=
      ( wn wo wi df-or syl6ib mpid mtod ) ABDFABCHZDEABCDIODJGCDKLMN $.
  $}

  ${
    pm3.2ni.1 $e |- -. ph $.
    pm3.2ni.2 $e |- -. ps $.
    $( Infer negated disjunction of negated premises.  (Contributed by NM,
       4-Apr-1995.) $)
    pm3.2ni $p |- -. ( ph \/ ps ) $=
      ( wo id pm2.21i jaoi mto ) ABEACAABAFBADGHI $.
  $}

  $( Theorem *2.45 of [WhiteheadRussell] p. 106.  (Contributed by NM,
     3-Jan-2005.) $)
  pm2.45 $p |- ( -. ( ph \/ ps ) -> -. ph ) $=
    ( wo orc con3i ) AABCABDE $.

  $( Theorem *2.46 of [WhiteheadRussell] p. 106.  (Contributed by NM,
     3-Jan-2005.) $)
  pm2.46 $p |- ( -. ( ph \/ ps ) -> -. ps ) $=
    ( wo olc con3i ) BABCBADE $.

  $( Theorem *2.47 of [WhiteheadRussell] p. 107.  (Contributed by NM,
     3-Jan-2005.) $)
  pm2.47 $p |- ( -. ( ph \/ ps ) -> ( -. ph \/ ps ) ) $=
    ( wo wn pm2.45 orcd ) ABCDADBABEF $.

  $( Theorem *2.48 of [WhiteheadRussell] p. 107.  (Contributed by NM,
     3-Jan-2005.) $)
  pm2.48 $p |- ( -. ( ph \/ ps ) -> ( ph \/ -. ps ) ) $=
    ( wo wn pm2.46 olcd ) ABCDBDAABEF $.

  $( Theorem *2.49 of [WhiteheadRussell] p. 107.  (Contributed by NM,
     3-Jan-2005.) $)
  pm2.49 $p |- ( -. ( ph \/ ps ) -> ( -. ph \/ -. ps ) ) $=
    ( wo wn pm2.46 olcd ) ABCDBDADABEF $.

  $( If neither of two propositions is true, then these propositions are
     equivalent.  (Contributed by BJ, 26-Apr-2019.) $)
  norbi $p |- ( -. ( ph \/ ps ) -> ( ph <-> ps ) ) $=
    ( wo orc olc pm5.21ni ) AABCBABDBAEF $.

  $( If two propositions are not equivalent, then at least one is true.
     (Contributed by BJ, 19-Apr-2019.)  (Proof shortened by Wolf Lammen,
     19-Jan-2020.) $)
  nbior $p |- ( -. ( ph <-> ps ) -> ( ph \/ ps ) ) $=
    ( wo wb norbi con1i ) ABCABDABEF $.

  $( Elimination of disjunction by denial of a disjunct.  Theorem *2.55 of
     [WhiteheadRussell] p. 107.  (Contributed by NM, 12-Aug-1994.)  (Proof
     shortened by Wolf Lammen, 21-Jul-2012.) $)
  orel1 $p |- ( -. ph -> ( ( ph \/ ps ) -> ps ) ) $=
    ( wo wn pm2.53 com12 ) ABCADBABEF $.

  $( Theorem *2.25 of [WhiteheadRussell] p. 104.  (Contributed by NM,
     3-Jan-2005.) $)
  pm2.25 $p |- ( ph \/ ( ( ph \/ ps ) -> ps ) ) $=
    ( wo wi orel1 orri ) AABCBDABEF $.

  $( Elimination of disjunction by denial of a disjunct.  Theorem *2.56 of
     [WhiteheadRussell] p. 107.  (Contributed by NM, 12-Aug-1994.)  (Proof
     shortened by Wolf Lammen, 5-Apr-2013.) $)
  orel2 $p |- ( -. ph -> ( ( ps \/ ph ) -> ps ) ) $=
    ( wn idd pm2.21 jaod ) ACZBBAGBDABEF $.

  $( Slight generalization of Theorem *2.67 of [WhiteheadRussell] p. 107.
     (Contributed by NM, 3-Jan-2005.) $)
  pm2.67-2 $p |- ( ( ( ph \/ ch ) -> ps ) -> ( ph -> ps ) ) $=
    ( wo orc imim1i ) AACDBACEF $.

  $( Theorem *2.67 of [WhiteheadRussell] p. 107.  (Contributed by NM,
     3-Jan-2005.) $)
  pm2.67 $p |- ( ( ( ph \/ ps ) -> ps ) -> ( ph -> ps ) ) $=
    ( pm2.67-2 ) ABBC $.

  $( A non-intuitionistic positive statement, sometimes called a paradox of
     material implication.  Sometimes called Curry's axiom.  Similar to ~ exmid
     but positive.  For another non-intuitionistic positive statement, see
     ~ peirce .  (Contributed by BJ, 4-Apr-2021.) $)
  curryax $p |- ( ph \/ ( ph -> ps ) ) $=
    ( wi pm2.21 orri ) AABCABDE $.

  $( Law of excluded middle, also called the principle of _tertium non datur_.
     Theorem *2.11 of [WhiteheadRussell] p. 101.  It says that something is
     either true or not true; there are no in-between values of truth.  This is
     an essential distinction of our classical logic and is not a theorem of
     intuitionistic logic.  In intuitionistic logic, if this statement is true
     for some ` ph ` , then ` ph ` is decidable.  (Contributed by NM,
     29-Dec-1992.) $)
  exmid $p |- ( ph \/ -. ph ) $=
    ( wn id orri ) AABZECD $.

  $( Law of excluded middle in a context.  (Contributed by Mario Carneiro,
     9-Feb-2017.) $)
  exmidd $p |- ( ph -> ( ps \/ -. ps ) ) $=
    ( wn wo exmid a1i ) BBCDABEF $.

  $( Theorem *2.1 of [WhiteheadRussell] p. 101.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 23-Nov-2012.) $)
  pm2.1 $p |- ( -. ph \/ ph ) $=
    ( id imori ) AAABC $.

  $( Theorem *2.13 of [WhiteheadRussell] p. 101.  (Contributed by NM,
     3-Jan-2005.) $)
  pm2.13 $p |- ( ph \/ -. -. -. ph ) $=
    ( wn notnot orri ) AABZBBECD $.

  $( Theorem *2.621 of [WhiteheadRussell] p. 107.  (Contributed by NM,
     3-Jan-2005.) $)
  pm2.621 $p |- ( ( ph -> ps ) -> ( ( ph \/ ps ) -> ps ) ) $=
    ( wi id idd jaod ) ABCZABBGDGBEF $.

  $( Theorem *2.62 of [WhiteheadRussell] p. 107.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 13-Dec-2013.) $)
  pm2.62 $p |- ( ( ph \/ ps ) -> ( ( ph -> ps ) -> ps ) ) $=
    ( wi wo pm2.621 com12 ) ABCABDBABEF $.

  $( Theorem *2.68 of [WhiteheadRussell] p. 108.  (Contributed by NM,
     3-Jan-2005.) $)
  pm2.68 $p |- ( ( ( ph -> ps ) -> ps ) -> ( ph \/ ps ) ) $=
    ( wi jarl orrd ) ABCBCABABBDE $.

  $( Logical 'or' expressed in terms of implication only.  Theorem *5.25 of
     [WhiteheadRussell] p. 124.  (Contributed by NM, 12-Aug-2004.)  (Proof
     shortened by Wolf Lammen, 20-Oct-2012.) $)
  dfor2 $p |- ( ( ph \/ ps ) <-> ( ( ph -> ps ) -> ps ) ) $=
    ( wo wi pm2.62 pm2.68 impbii ) ABCABDBDABEABFG $.

  $( Theorem *2.07 of [WhiteheadRussell] p. 101.  (Contributed by NM,
     3-Jan-2005.) $)
  pm2.07 $p |- ( ph -> ( ph \/ ph ) ) $=
    ( olc ) AAB $.

  $( Axiom *1.2 of [WhiteheadRussell] p. 96, which they call "Taut".
     (Contributed by NM, 3-Jan-2005.) $)
  pm1.2 $p |- ( ( ph \/ ph ) -> ph ) $=
    ( id jaoi ) AAAABZDC $.

  $( Idempotent law for disjunction.  Theorem *4.25 of [WhiteheadRussell]
     p. 117.  (Contributed by NM, 11-May-1993.)  (Proof shortened by Andrew
     Salmon, 16-Apr-2011.)  (Proof shortened by Wolf Lammen, 10-Mar-2013.) $)
  oridm $p |- ( ( ph \/ ph ) <-> ph ) $=
    ( wo pm1.2 pm2.07 impbii ) AABAACADE $.

  $( Theorem *4.25 of [WhiteheadRussell] p. 117.  (Contributed by NM,
     3-Jan-2005.) $)
  pm4.25 $p |- ( ph <-> ( ph \/ ph ) ) $=
    ( wo oridm bicomi ) AABAACD $.

  $( Theorem *2.4 of [WhiteheadRussell] p. 106.  (Contributed by NM,
     3-Jan-2005.) $)
  pm2.4 $p |- ( ( ph \/ ( ph \/ ps ) ) -> ( ph \/ ps ) ) $=
    ( wo orc id jaoi ) AABCZGABDGEF $.

  $( Theorem *2.41 of [WhiteheadRussell] p. 106.  (Contributed by NM,
     3-Jan-2005.) $)
  pm2.41 $p |- ( ( ps \/ ( ph \/ ps ) ) -> ( ph \/ ps ) ) $=
    ( wo olc id jaoi ) BABCZGBADGEF $.

  ${
    orim12i.1 $e |- ( ph -> ps ) $.
    orim12i.2 $e |- ( ch -> th ) $.
    $( Disjoin antecedents and consequents of two premises.  (Contributed by
       NM, 6-Jun-1994.)  (Proof shortened by Wolf Lammen, 25-Jul-2012.) $)
    orim12i $p |- ( ( ph \/ ch ) -> ( ps \/ th ) ) $=
      ( wo orcd olcd jaoi ) ABDGCABDEHCDBFIJ $.
  $}

  ${
    orim1i.1 $e |- ( ph -> ps ) $.
    $( Introduce disjunct to both sides of an implication.  (Contributed by NM,
       6-Jun-1994.) $)
    orim1i $p |- ( ( ph \/ ch ) -> ( ps \/ ch ) ) $=
      ( id orim12i ) ABCCDCEF $.

    $( Introduce disjunct to both sides of an implication.  (Contributed by NM,
       6-Jun-1994.) $)
    orim2i $p |- ( ( ch \/ ph ) -> ( ch \/ ps ) ) $=
      ( id orim12i ) CCABCEDF $.
  $}

  ${
    orim12dALT.1 $e |- ( ph -> ( ps -> ch ) ) $.
    orim12dALT.2 $e |- ( ph -> ( th -> ta ) ) $.
    $( Alternate proof of ~ orim12d which does not depend on ~ df-an .  This is
       an illustration of the conservativity of definitions (definitions do not
       permit to prove additional theorems whose statements do not contain the
       defined symbol).  (Contributed by Wolf Lammen, 8-Aug-2022.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    orim12dALT $p |- ( ph -> ( ( ps \/ th ) -> ( ch \/ ta ) ) ) $=
      ( wo wn wi pm2.53 con3d imim12d pm2.54 syl56 ) BDHBIZDJACIZEJCEHBDKAQPDEA
      BCFLGMCENO $.
  $}

  ${
    orbi2i.1 $e |- ( ph <-> ps ) $.
    $( Inference adding a left disjunct to both sides of a logical equivalence.
       (Contributed by NM, 3-Jan-1993.)  (Proof shortened by Wolf Lammen,
       12-Dec-2012.) $)
    orbi2i $p |- ( ( ch \/ ph ) <-> ( ch \/ ps ) ) $=
      ( wo biimpi orim2i biimpri impbii ) CAECBEABCABDFGBACABDHGI $.

    $( Inference adding a right disjunct to both sides of a logical
       equivalence.  (Contributed by NM, 3-Jan-1993.) $)
    orbi1i $p |- ( ( ph \/ ch ) <-> ( ps \/ ch ) ) $=
      ( wo orcom orbi2i 3bitri ) ACECAECBEBCEACFABCDGCBFH $.
  $}

  ${
    orbi12i.1 $e |- ( ph <-> ps ) $.
    orbi12i.2 $e |- ( ch <-> th ) $.
    $( Infer the disjunction of two equivalences.  (Contributed by NM,
       3-Jan-1993.) $)
    orbi12i $p |- ( ( ph \/ ch ) <-> ( ps \/ th ) ) $=
      ( wo orbi2i orbi1i bitri ) ACGADGBDGCDAFHABDEIJ $.
  $}

  ${
    bid.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Deduction adding a left disjunct to both sides of a logical equivalence.
       (Contributed by NM, 21-Jun-1993.) $)
    orbi2d $p |- ( ph -> ( ( th \/ ps ) <-> ( th \/ ch ) ) ) $=
      ( wn wi wo imbi2d df-or 3bitr4g ) ADFZBGLCGDBHDCHABCLEIDBJDCJK $.

    $( Deduction adding a right disjunct to both sides of a logical
       equivalence.  (Contributed by NM, 21-Jun-1993.) $)
    orbi1d $p |- ( ph -> ( ( ps \/ th ) <-> ( ch \/ th ) ) ) $=
      ( wo orbi2d orcom 3bitr4g ) ADBFDCFBDFCDFABCDEGBDHCDHI $.
  $}

  $( Theorem *4.37 of [WhiteheadRussell] p. 118.  (Contributed by NM,
     3-Jan-2005.) $)
  orbi1 $p |- ( ( ph <-> ps ) -> ( ( ph \/ ch ) <-> ( ps \/ ch ) ) ) $=
    ( wb id orbi1d ) ABDZABCGEF $.

  ${
    bi12d.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    bi12d.2 $e |- ( ph -> ( th <-> ta ) ) $.
    $( Deduction joining two equivalences to form equivalence of disjunctions.
       (Contributed by NM, 21-Jun-1993.) $)
    orbi12d $p |- ( ph -> ( ( ps \/ th ) <-> ( ch \/ ta ) ) ) $=
      ( wo orbi1d orbi2d bitrd ) ABDHCDHCEHABCDFIADECGJK $.
  $}

  $( Axiom *1.5 (Assoc) of [WhiteheadRussell] p. 96.  (Contributed by NM,
     3-Jan-2005.) $)
  pm1.5 $p |- ( ( ph \/ ( ps \/ ch ) ) -> ( ps \/ ( ph \/ ch ) ) ) $=
    ( wo orc olcd olc orim2i jaoi ) ABACDZDBCDAJBACEFCJBCAGHI $.

  $( Swap two disjuncts.  (Contributed by NM, 5-Aug-1993.)  (Proof shortened by
     Wolf Lammen, 14-Nov-2012.) $)
  or12 $p |- ( ( ph \/ ( ps \/ ch ) ) <-> ( ps \/ ( ph \/ ch ) ) ) $=
    ( wo pm1.5 impbii ) ABCDDBACDDABCEBACEF $.

  $( Associative law for disjunction.  Theorem *4.33 of [WhiteheadRussell]
     p. 118.  (Contributed by NM, 5-Aug-1993.)  (Proof shortened by Andrew
     Salmon, 26-Jun-2011.) $)
  orass $p |- ( ( ( ph \/ ps ) \/ ch ) <-> ( ph \/ ( ps \/ ch ) ) ) $=
    ( wo orcom or12 orbi2i 3bitri ) ABDZCDCIDACBDZDABCDZDICECABFJKACBEGH $.

  $( Theorem *2.31 of [WhiteheadRussell] p. 104.  (Contributed by NM,
     3-Jan-2005.) $)
  pm2.31 $p |- ( ( ph \/ ( ps \/ ch ) ) -> ( ( ph \/ ps ) \/ ch ) ) $=
    ( wo orass biimpri ) ABDCDABCDDABCEF $.

  $( Theorem *2.32 of [WhiteheadRussell] p. 105.  (Contributed by NM,
     3-Jan-2005.) $)
  pm2.32 $p |- ( ( ( ph \/ ps ) \/ ch ) -> ( ph \/ ( ps \/ ch ) ) ) $=
    ( wo orass biimpi ) ABDCDABCDDABCEF $.

  $( Theorem *2.3 of [WhiteheadRussell] p. 104.  (Contributed by NM,
     3-Jan-2005.) $)
  pm2.3 $p |- ( ( ph \/ ( ps \/ ch ) ) -> ( ph \/ ( ch \/ ps ) ) ) $=
    ( wo pm1.4 orim2i ) BCDCBDABCEF $.

  $( A rearrangement of disjuncts.  (Contributed by NM, 18-Oct-1995.)  (Proof
     shortened by Andrew Salmon, 26-Jun-2011.) $)
  or32 $p |- ( ( ( ph \/ ps ) \/ ch ) <-> ( ( ph \/ ch ) \/ ps ) ) $=
    ( wo orass or12 orcom 3bitri ) ABDCDABCDDBACDZDIBDABCEABCFBIGH $.

  $( Rearrangement of 4 disjuncts.  (Contributed by NM, 12-Aug-1994.) $)
  or4 $p |- ( ( ( ph \/ ps ) \/ ( ch \/ th ) ) <->
                ( ( ph \/ ch ) \/ ( ps \/ th ) ) ) $=
    ( wo or12 orbi2i orass 3bitr4i ) ABCDEZEZEACBDEZEZEABEJEACELEKMABCDFGABJHAC
    LHI $.

  $( Rearrangement of 4 disjuncts.  (Contributed by NM, 10-Jan-2005.) $)
  or42 $p |- ( ( ( ph \/ ps ) \/ ( ch \/ th ) ) <->
                 ( ( ph \/ ch ) \/ ( th \/ ps ) ) ) $=
    ( wo or4 orcom orbi2i bitri ) ABECDEEACEZBDEZEJDBEZEABCDFKLJBDGHI $.

  $( Distribution of disjunction over disjunction.  (Contributed by NM,
     25-Feb-1995.) $)
  orordi $p |- ( ( ph \/ ( ps \/ ch ) ) <->
               ( ( ph \/ ps ) \/ ( ph \/ ch ) ) ) $=
    ( wo oridm orbi1i or4 bitr3i ) ABCDZDAADZIDABDACDDJAIAEFAABCGH $.

  $( Distribution of disjunction over disjunction.  (Contributed by NM,
     25-Feb-1995.) $)
  orordir $p |- ( ( ( ph \/ ps ) \/ ch ) <->
               ( ( ph \/ ch ) \/ ( ps \/ ch ) ) ) $=
    ( wo oridm orbi2i or4 bitr3i ) ABDZCDICCDZDACDBCDDJCICEFABCCGH $.

  $( Disjunction distributes over implication.  (Contributed by Wolf Lammen,
     5-Jan-2013.) $)
  orimdi $p |- ( ( ph \/ ( ps -> ch ) )
        <-> ( ( ph \/ ps ) -> ( ph \/ ch ) ) ) $=
    ( wn wi wo imdi df-or imbi12i 3bitr4i ) ADZBCEZEKBEZKCEZEALFABFZACFZEKBCGAL
    HOMPNABHACHIJ $.

  $( Theorem *2.76 of [WhiteheadRussell] p. 108.  (Contributed by NM,
     3-Jan-2005.) $)
  pm2.76 $p |- ( ( ph \/ ( ps -> ch ) )
      -> ( ( ph \/ ps ) -> ( ph \/ ch ) ) ) $=
    ( wi wo orimdi biimpi ) ABCDEABEACEDABCFG $.

  $( Theorem *2.85 of [WhiteheadRussell] p. 108.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 5-Jan-2013.) $)
  pm2.85 $p |- ( ( ( ph \/ ps ) -> ( ph \/ ch ) )
      -> ( ph \/ ( ps -> ch ) ) ) $=
    ( wi wo orimdi biimpri ) ABCDEABEACEDABCFG $.

  $( Theorem *2.75 of [WhiteheadRussell] p. 108.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 4-Jan-2013.) $)
  pm2.75 $p |- ( ( ph \/ ps )
       -> ( ( ph \/ ( ps -> ch ) ) -> ( ph \/ ch ) ) ) $=
    ( wi wo pm2.76 com12 ) ABCDEABEACEABCFG $.

  $( Implication distributes over disjunction.  Theorem *4.78 of
     [WhiteheadRussell] p. 121.  (Contributed by NM, 3-Jan-2005.)  (Proof
     shortened by Wolf Lammen, 19-Nov-2012.) $)
  pm4.78 $p |- ( ( ( ph -> ps ) \/ ( ph -> ch ) ) <->
                ( ph -> ( ps \/ ch ) ) ) $=
    ( wn wo wi orordi imor orbi12i 3bitr4ri ) ADZBCEZEKBEZKCEZEALFABFZACFZEKBCG
    ALHOMPNABHACHIJ $.

  $( A wff disjoined with truth is true.  (Contributed by NM, 23-May-1999.) $)
  biort $p |- ( ph -> ( ph <-> ( ph \/ ps ) ) ) $=
    ( wo orc ax-1 impbid2 ) AAABCZABDAGEF $.

  $( A wff is equivalent to its disjunction with falsehood.  Theorem *4.74 of
     [WhiteheadRussell] p. 121.  (Contributed by NM, 23-Mar-1995.)  (Proof
     shortened by Wolf Lammen, 18-Nov-2012.) $)
  biorf $p |- ( -. ph -> ( ps <-> ( ph \/ ps ) ) ) $=
    ( wn wo olc orel1 impbid2 ) ACBABDBAEABFG $.

  $( A wff is equivalent to its negated disjunction with falsehood.
     (Contributed by NM, 9-Jul-2012.) $)
  biortn $p |- ( ph -> ( ps <-> ( -. ph \/ ps ) ) ) $=
    ( wn wo wb notnot biorf syl ) AACZCBIBDEAFIBGH $.

  ${
    biorfi.1 $e |- -. ph $.
    $( A wff is equivalent to its disjunction with falsehood.  (Contributed by
       NM, 23-Mar-1995.)  (Proof shortened by Wolf Lammen, 16-Jul-2021.) $)
    biorfi $p |- ( ps <-> ( ps \/ ph ) ) $=
      ( wo orc wn wi orel2 ax-mp impbii ) BBADZBAEAFKBGCABHIJ $.
  $}

  $( Rewriting implication based theorems using disjunction. $)

  $( Theorem *2.26 of [WhiteheadRussell] p. 104.  See ~ pm2.27 .  (Contributed
     by NM, 3-Jan-2005.)  (Proof shortened by Wolf Lammen, 23-Nov-2012.) $)
  pm2.26 $p |- ( -. ph \/ ( ( ph -> ps ) -> ps ) ) $=
    ( wi pm2.27 imori ) AABCBCABDE $.

  $( Contradiction and disjunction. $)

  $( Theorem *2.63 of [WhiteheadRussell] p. 107.  (Contributed by NM,
     3-Jan-2005.) $)
  pm2.63 $p |- ( ( ph \/ ps ) -> ( ( -. ph \/ ps ) -> ps ) ) $=
    ( wo wn pm2.53 idd jaod ) ABCZADBBABEHBFG $.

  $( Theorem *2.64 of [WhiteheadRussell] p. 107.  (Contributed by NM,
     3-Jan-2005.) $)
  pm2.64 $p |- ( ( ph \/ ps ) -> ( ( ph \/ -. ps ) -> ph ) ) $=
    ( wn wo orel2 jao1i com12 ) ABCZDABDZAAHIBAEFG $.

  $( Theorem *2.42 of [WhiteheadRussell] p. 106.  (Contributed by NM,
     3-Jan-2005.) $)
  pm2.42 $p |- ( ( -. ph \/ ( ph -> ps ) ) -> ( ph -> ps ) ) $=
    ( wn wi pm2.21 id jaoi ) ACABDZHABEHFG $.

$(  Some expressions connecting implication and disjunction. $)

  $( Theorem *5.11 of [WhiteheadRussell] p. 123.  See ~ pm2.5 .  (Contributed
     by NM, 3-Jan-2005.) $)
  pm5.11 $p |- ( ( ph -> ps ) \/ ( -. ph -> ps ) ) $=
    ( wi wn pm2.5 orri ) ABCADBCABEF $.

  $( Theorem *5.12 of [WhiteheadRussell] p. 123.  (Contributed by NM,
     3-Jan-2005.) $)
  pm5.12 $p |- ( ( ph -> ps ) \/ ( ph -> -. ps ) ) $=
    ( wi wn pm2.51 orri ) ABCABDCABEF $.

  $( Theorem *5.14 of [WhiteheadRussell] p. 123.  (Contributed by NM,
     3-Jan-2005.) $)
  pm5.14 $p |- ( ( ph -> ps ) \/ ( ps -> ch ) ) $=
    ( wi wn ax-1 con3i pm2.21d orri ) ABDZBCDJEBCBJBAFGHI $.

  $( Theorem *5.13 of [WhiteheadRussell] p. 123.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 14-Nov-2012.) $)
  pm5.13 $p |- ( ( ph -> ps ) \/ ( ps -> ph ) ) $=
    ( pm5.14 ) ABAC $.

  $( Theorem *5.55 of [WhiteheadRussell] p. 125.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 20-Jan-2013.) $)
  pm5.55 $p |- ( ( ( ph \/ ps ) <-> ph ) \/ ( ( ph \/ ps ) <-> ps ) ) $=
    ( wo wb biort bicomd wn biorf nsyl4 con1i orri ) ABCZADZLBDZNMAMNAALABEFAGB
    LABHFIJK $.

  $( Implication in terms of biconditional and disjunction.  Theorem *4.72 of
     [WhiteheadRussell] p. 121.  (Contributed by NM, 30-Aug-1993.)  (Proof
     shortened by Wolf Lammen, 30-Jan-2013.) $)
  pm4.72 $p |- ( ( ph -> ps ) <-> ( ps <-> ( ph \/ ps ) ) ) $=
    ( wi wo wb olc pm2.621 impbid2 orc biimpr syl5 impbii ) ABCZBABDZEZMBNBAFAB
    GHANOBABIBNJKL $.

  $( Simplify an implication between implications.  (Contributed by Paul
     Chapman, 17-Nov-2012.)  (Proof shortened by Wolf Lammen, 3-Apr-2013.) $)
  imimorb $p |- ( ( ( ps -> ch ) -> ( ph -> ch ) ) <->
                  ( ph -> ( ps \/ ch ) ) ) $=
    ( wi wo bi2.04 dfor2 imbi2i bitr4i ) BCDZACDDAJCDZDABCEZDJACFLKABCGHI $.

  $( Absorption of disjunction into equivalence.  (Contributed by NM,
     6-Aug-1995.)  (Proof shortened by Wolf Lammen, 3-Nov-2013.) $)
  oibabs $p |- ( ( ( ph \/ ps ) -> ( ph <-> ps ) ) <-> ( ph <-> ps ) ) $=
    ( wo wb wi norbi id ja ax-1 impbii ) ABCZABDZELKLLABFLGHLKIJ $.

  $( Disjunction distributes over the biconditional.  An axiom of system DS in
     Vladimir Lifschitz, "On calculational proofs" (1998),
     ~ http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.25.3384 .
     (Contributed by NM, 8-Jan-2005.)  (Proof shortened by Wolf Lammen,
     4-Feb-2013.) $)
  orbidi $p |- ( ( ph \/ ( ps <-> ch ) ) <->
                ( ( ph \/ ps ) <-> ( ph \/ ch ) ) ) $=
    ( wn wb wi wo pm5.74 df-or bibi12i 3bitr4i ) ADZBCEZFLBFZLCFZEAMGABGZACGZEL
    BCHAMIPNQOABIACIJK $.

  $( Disjunction distributes over the biconditional.  Theorem *5.7 of
     [WhiteheadRussell] p. 125.  This theorem is similar to ~ orbidi .
     (Contributed by Roy F. Longton, 21-Jun-2005.) $)
  pm5.7 $p |- ( ( ( ph \/ ch ) <-> ( ps \/ ch ) ) <->
               ( ch \/ ( ph <-> ps ) ) ) $=
    ( wb wo orbidi orcom bibi12i bitr2i ) CABDECAEZCBEZDACEZBCEZDCABFJLKMCAGCBG
    HI $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Mixed connectives
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  This section gathers theorems of propositional calculus which use (either in
  their statement or proof) mixed connectives (at least conjunction and
  disjunction).

  As noted in the "note on definitions" in the section comment for logical
  equivalence, some theorem statements may contain for instance only
  conjunction or only disjunction, but both definitions are used in their
  proofs to make them shorter (this is exemplified in ~ orim12d versus
  ~ orim12dALT ).  These theorems are mostly grouped at the beginning of this
  section.

  The family of theorems starting with ~ animorl focus on the relation between
  conjunction and disjunction and can be seen as the starting point of mixed
  connectives in statements.  This sectioning is not rigorously true, since for
  instance the section begins with ~ jaao and related theorems.

$)

  ${
    jaao.1 $e |- ( ph -> ( ps -> ch ) ) $.
    jaao.2 $e |- ( th -> ( ta -> ch ) ) $.
    $( Inference conjoining and disjoining the antecedents of two implications.
       (Contributed by NM, 30-Sep-1999.) $)
    jaao $p |- ( ( ph /\ th ) -> ( ( ps \/ ta ) -> ch ) ) $=
      ( wa wi adantr adantl jaod ) ADHBCEABCIDFJDECIAGKL $.

    $( Inference disjoining and conjoining the antecedents of two implications.
       (Contributed by Stefan Allan, 1-Nov-2008.) $)
    jaoa $p |- ( ( ph \/ th ) -> ( ( ps /\ ta ) -> ch ) ) $=
      ( wa wi adantrd adantld jaoi ) ABEHCIDABCEFJDECBGKL $.
  $}

  ${
    jaoian.1 $e |- ( ( ph /\ ps ) -> ch ) $.
    jaoian.2 $e |- ( ( th /\ ps ) -> ch ) $.
    $( Inference disjoining the antecedents of two implications.  (Contributed
       by NM, 23-Oct-2005.) $)
    jaoian $p |- ( ( ( ph \/ th ) /\ ps ) -> ch ) $=
      ( wo wi ex jaoi imp ) ADGBCABCHDABCEIDBCFIJK $.
  $}

  ${
    jaodan.1 $e |- ( ( ph /\ ps ) -> ch ) $.
    jaodan.2 $e |- ( ( ph /\ th ) -> ch ) $.
    $( Deduction disjoining the antecedents of two implications.  (Contributed
       by NM, 14-Oct-2005.) $)
    jaodan $p |- ( ( ph /\ ( ps \/ th ) ) -> ch ) $=
      ( wo ex jaod imp ) ABDGCABCDABCEHADCFHIJ $.

    jaodan.3 $e |- ( ph -> ( ps \/ th ) ) $.
    $( Eliminate a disjunction in a deduction.  A translation of natural
       deduction rule ` \/ ` E ( ` \/ ` elimination), see ~ natded .
       (Contributed by Mario Carneiro, 29-May-2016.) $)
    mpjaodan $p |- ( ph -> ch ) $=
      ( wo jaodan mpdan ) ABDHCGABCDEFIJ $.
  $}

  $( Theorem *3.44 of [WhiteheadRussell] p. 113.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 3-Oct-2013.) $)
  pm3.44 $p |- ( ( ( ps -> ph ) /\ ( ch -> ph ) )
      -> ( ( ps \/ ch ) -> ph ) ) $=
    ( wi id jaao ) BADZBACADZCGEHEF $.

  $( Disjunction of antecedents.  Compare Theorem *3.44 of [WhiteheadRussell]
     p. 113.  (Contributed by NM, 5-Apr-1994.)  (Proof shortened by Wolf
     Lammen, 4-Apr-2013.) $)
  jao $p |- ( ( ph -> ps ) -> ( ( ch -> ps ) -> ( ( ph \/ ch ) -> ps ) ) ) $=
    ( wi wo pm3.44 ex ) ABDCBDACEBDBACFG $.

  $( Disjunction of antecedents.  Compare Theorem *4.77 of [WhiteheadRussell]
     p. 121.  (Contributed by NM, 30-May-1994.)  (Proof shortened by Wolf
     Lammen, 9-Dec-2012.) $)
  jaob $p |- ( ( ( ph \/ ch ) -> ps ) <-> ( ( ph -> ps ) /\ ( ch -> ps ) ) ) $=
    ( wo wi wa pm2.67-2 olc imim1i jca pm3.44 impbii ) ACDZBEZABEZCBEZFNOPABCGC
    MBCAHIJBACKL $.

  $( Theorem *4.77 of [WhiteheadRussell] p. 121.  (Contributed by NM,
     3-Jan-2005.) $)
  pm4.77 $p |- ( ( ( ps -> ph ) /\ ( ch -> ph ) ) <->
                ( ( ps \/ ch ) -> ph ) ) $=
    ( wo wi wa jaob bicomi ) BCDAEBAECAEFBACGH $.

  $( Theorem *3.48 of [WhiteheadRussell] p. 114.  (Contributed by NM,
     28-Jan-1997.) $)
  pm3.48 $p |- ( ( ( ph -> ps ) /\ ( ch -> th ) )
      -> ( ( ph \/ ch ) -> ( ps \/ th ) ) ) $=
    ( wi wo orc imim2i olc jaao ) ABEABDFZCDECBKABDGHDKCDBIHJ $.

  ${
    orim12d.1 $e |- ( ph -> ( ps -> ch ) ) $.
    orim12d.2 $e |- ( ph -> ( th -> ta ) ) $.
    $( Disjoin antecedents and consequents in a deduction.  See ~ orim12dALT
       for a proof which does not depend on ~ df-an .  (Contributed by NM,
       10-May-1994.) $)
    orim12d $p |- ( ph -> ( ( ps \/ th ) -> ( ch \/ ta ) ) ) $=
      ( wi wo pm3.48 syl2anc ) ABCHDEHBDICEIHFGBCDEJK $.
  $}

  ${
    orim1d.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Disjoin antecedents and consequents in a deduction.  (Contributed by NM,
       23-Apr-1995.) $)
    orim1d $p |- ( ph -> ( ( ps \/ th ) -> ( ch \/ th ) ) ) $=
      ( idd orim12d ) ABCDDEADFG $.

    $( Disjoin antecedents and consequents in a deduction.  (Contributed by NM,
       23-Apr-1995.) $)
    orim2d $p |- ( ph -> ( ( th \/ ps ) -> ( th \/ ch ) ) ) $=
      ( idd orim12d ) ADDBCADFEG $.
  $}

  $( Axiom *1.6 (Sum) of [WhiteheadRussell] p. 97.  (Contributed by NM,
     3-Jan-2005.) $)
  orim2 $p |- ( ( ps -> ch ) -> ( ( ph \/ ps ) -> ( ph \/ ch ) ) ) $=
    ( wi id orim2d ) BCDZBCAGEF $.

  $( Theorem *2.38 of [WhiteheadRussell] p. 105.  (Contributed by NM,
     6-Mar-2008.) $)
  pm2.38 $p |- ( ( ps -> ch ) -> ( ( ps \/ ph ) -> ( ch \/ ph ) ) ) $=
    ( wi id orim1d ) BCDZBCAGEF $.

  $( Theorem *2.36 of [WhiteheadRussell] p. 105.  (Contributed by NM,
     6-Mar-2008.) $)
  pm2.36 $p |- ( ( ps -> ch ) -> ( ( ph \/ ps ) -> ( ch \/ ph ) ) ) $=
    ( wo wi pm1.4 pm2.38 syl5 ) ABDBADBCECADABFABCGH $.

  $( Theorem *2.37 of [WhiteheadRussell] p. 105.  (Contributed by NM,
     6-Mar-2008.) $)
  pm2.37 $p |- ( ( ps -> ch ) -> ( ( ps \/ ph ) -> ( ph \/ ch ) ) ) $=
    ( wi wo pm2.38 pm1.4 syl6 ) BCDBAECAEACEABCFCAGH $.

  $( Theorem *2.81 of [WhiteheadRussell] p. 108.  (Contributed by NM,
     3-Jan-2005.) $)
  pm2.81 $p |- ( ( ps -> ( ch -> th ) )
      -> ( ( ph \/ ps ) -> ( ( ph \/ ch ) -> ( ph \/ th ) ) ) ) $=
    ( wi wo orim2 pm2.76 syl6 ) BCDEZEABFAJFACFADFEABJGACDHI $.

  $( Theorem *2.8 of [WhiteheadRussell] p. 108.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 5-Jan-2013.) $)
  pm2.8 $p |- ( ( ph \/ ps ) -> ( ( -. ps \/ ch ) -> ( ph \/ ch ) ) ) $=
    ( wo wn pm2.53 con1d orim1d ) ABDZBEACIABABFGH $.

  $( Theorem *2.73 of [WhiteheadRussell] p. 108.  (Contributed by NM,
     3-Jan-2005.) $)
  pm2.73 $p |- ( ( ph -> ps )
       -> ( ( ( ph \/ ps ) \/ ch ) -> ( ps \/ ch ) ) ) $=
    ( wi wo pm2.621 orim1d ) ABDABEBCABFG $.

  $( Theorem *2.74 of [WhiteheadRussell] p. 108.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Andrew Salmon, 7-May-2011.) $)
  pm2.74 $p |- ( ( ps -> ph )
      -> ( ( ( ph \/ ps ) \/ ch ) -> ( ph \/ ch ) ) ) $=
    ( wi wo orel2 ax-1 ja orim1d ) BADABEZACBAJADBAFAJGHI $.

  $( Theorem *2.82 of [WhiteheadRussell] p. 108.  (Contributed by NM,
     3-Jan-2005.) $)
  pm2.82 $p |- ( ( ( ph \/ ps ) \/ ch ) -> ( ( ( ph \/ -. ch ) \/ th )
      -> ( ( ph \/ ps ) \/ th ) ) ) $=
    ( wo wn pm2.24 orim2d jao1i orim1d ) ABEZCEACFZEZKDKCMCLBACBGHIJ $.

  $( Theorem *4.39 of [WhiteheadRussell] p. 118.  (Contributed by NM,
     3-Jan-2005.) $)
  pm4.39 $p |- ( ( ( ph <-> ch ) /\ ( ps <-> th ) ) ->
                ( ( ph \/ ps ) <-> ( ch \/ th ) ) ) $=
    ( wb wa simpl simpr orbi12d ) ACEZBDEZFACBDJKGJKHI $.

  $( Conjunction implies disjunction with one common formula (1/4).
     (Contributed by BJ, 4-Oct-2019.) $)
  animorl $p |- ( ( ph /\ ps ) -> ( ph \/ ch ) ) $=
    ( wa simpl orcd ) ABDACABEF $.

  $( Conjunction implies disjunction with one common formula (2/4).
     (Contributed by BJ, 4-Oct-2019.) $)
  animorr $p |- ( ( ph /\ ps ) -> ( ch \/ ps ) ) $=
    ( wa simpr olcd ) ABDBCABEF $.

  $( Conjunction implies disjunction with one common formula (3/4).
     (Contributed by BJ, 4-Oct-2019.) $)
  animorlr $p |- ( ( ph /\ ps ) -> ( ch \/ ph ) ) $=
    ( wa simpl olcd ) ABDACABEF $.

  $( Conjunction implies disjunction with one common formula (4/4).
     (Contributed by BJ, 4-Oct-2019.) $)
  animorrl $p |- ( ( ph /\ ps ) -> ( ps \/ ch ) ) $=
    ( wa simpr orcd ) ABDBCABEF $.

  $( Negated conjunction in terms of disjunction (De Morgan's law).  Theorem
     *4.51 of [WhiteheadRussell] p. 120.  (Contributed by NM, 14-May-1993.)
     (Proof shortened by Andrew Salmon, 13-May-2011.) $)
  ianor $p |- ( -. ( ph /\ ps ) <-> ( -. ph \/ -. ps ) ) $=
    ( wa wn wi wo imnan pm4.62 bitr3i ) ABCDABDZEADJFABGABHI $.

  $( Conjunction in terms of disjunction (De Morgan's law).  Theorem *4.5 of
     [WhiteheadRussell] p. 120.  (Contributed by NM, 3-Jan-1993.)  (Proof
     shortened by Wolf Lammen, 3-Nov-2012.) $)
  anor $p |- ( ( ph /\ ps ) <-> -. ( -. ph \/ -. ps ) ) $=
    ( wn wo wa ianor bicomi con2bii ) ACBCDZABEZJCIABFGH $.

  $( Negated disjunction in terms of conjunction (De Morgan's law).  Compare
     Theorem *4.56 of [WhiteheadRussell] p. 120.  (Contributed by NM,
     3-Jan-1993.)  (Proof shortened by Andrew Salmon, 7-May-2011.) $)
  ioran $p |- ( -. ( ph \/ ps ) <-> ( -. ph /\ -. ps ) ) $=
    ( wn wi wa wo pm4.65 pm4.64 xchnxbi ) ACZBDJBCEABFABGABHI $.

  $( Theorem *4.52 of [WhiteheadRussell] p. 120.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 5-Nov-2012.) $)
  pm4.52 $p |- ( ( ph /\ -. ps ) <-> -. ( -. ph \/ ps ) ) $=
    ( wn wa wi wo annim imor xchbinx ) ABCDABEACBFABGABHI $.

  $( Theorem *4.53 of [WhiteheadRussell] p. 120.  (Contributed by NM,
     3-Jan-2005.) $)
  pm4.53 $p |- ( -. ( ph /\ -. ps ) <-> ( -. ph \/ ps ) ) $=
    ( wn wo wa pm4.52 con2bii bicomi ) ACBDZABCEZCJIABFGH $.

  $( Theorem *4.54 of [WhiteheadRussell] p. 120.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 5-Nov-2012.) $)
  pm4.54 $p |- ( ( -. ph /\ ps ) <-> -. ( ph \/ -. ps ) ) $=
    ( wn wa wi wo df-an pm4.66 xchbinx ) ACZBDJBCZEAKFJBGABHI $.

  $( Theorem *4.55 of [WhiteheadRussell] p. 120.  (Contributed by NM,
     3-Jan-2005.) $)
  pm4.55 $p |- ( -. ( -. ph /\ ps ) <-> ( ph \/ -. ps ) ) $=
    ( wn wo wa pm4.54 con2bii bicomi ) ABCDZACBEZCJIABFGH $.

  $( Theorem *4.56 of [WhiteheadRussell] p. 120.  (Contributed by NM,
     3-Jan-2005.) $)
  pm4.56 $p |- ( ( -. ph /\ -. ps ) <-> -. ( ph \/ ps ) ) $=
    ( wo wn wa ioran bicomi ) ABCDADBDEABFG $.

  $( Disjunction in terms of conjunction (De Morgan's law).  Compare Theorem
     *4.57 of [WhiteheadRussell] p. 120.  (Contributed by NM, 3-Jan-1993.)
     (Proof shortened by Andrew Salmon, 7-May-2011.) $)
  oran $p |- ( ( ph \/ ps ) <-> -. ( -. ph /\ -. ps ) ) $=
    ( wn wa wo pm4.56 con2bii ) ACBCDABEABFG $.

  $( Theorem *4.57 of [WhiteheadRussell] p. 120.  (Contributed by NM,
     3-Jan-2005.) $)
  pm4.57 $p |- ( -. ( -. ph /\ -. ps ) <-> ( ph \/ ps ) ) $=
    ( wo wn wa oran bicomi ) ABCADBDEDABFG $.

  $( Theorem *3.1 of [WhiteheadRussell] p. 111.  (Contributed by NM,
     3-Jan-2005.) $)
  pm3.1 $p |- ( ( ph /\ ps ) -> -. ( -. ph \/ -. ps ) ) $=
    ( wa wn wo anor biimpi ) ABCADBDEDABFG $.

  $( Theorem *3.11 of [WhiteheadRussell] p. 111.  (Contributed by NM,
     3-Jan-2005.) $)
  pm3.11 $p |- ( -. ( -. ph \/ -. ps ) -> ( ph /\ ps ) ) $=
    ( wa wn wo anor biimpri ) ABCADBDEDABFG $.

  $( Theorem *3.12 of [WhiteheadRussell] p. 111.  (Contributed by NM,
     3-Jan-2005.) $)
  pm3.12 $p |- ( ( -. ph \/ -. ps ) \/ ( ph /\ ps ) ) $=
    ( wn wo wa pm3.11 orri ) ACBCDABEABFG $.

  $( Theorem *3.13 of [WhiteheadRussell] p. 111.  (Contributed by NM,
     3-Jan-2005.) $)
  pm3.13 $p |- ( -. ( ph /\ ps ) -> ( -. ph \/ -. ps ) ) $=
    ( wn wo wa pm3.11 con1i ) ACBCDABEABFG $.

  $( Theorem *3.14 of [WhiteheadRussell] p. 111.  (Contributed by NM,
     3-Jan-2005.) $)
  pm3.14 $p |- ( ( -. ph \/ -. ps ) -> -. ( ph /\ ps ) ) $=
    ( wa wn wo pm3.1 con2i ) ABCADBDEABFG $.

  $( Theorem *4.44 of [WhiteheadRussell] p. 119.  (Contributed by NM,
     3-Jan-2005.) $)
  pm4.44 $p |- ( ph <-> ( ph \/ ( ph /\ ps ) ) ) $=
    ( wa wo orc id simpl jaoi impbii ) AAABCZDAJEAAJAFABGHI $.

  $( Theorem *4.45 of [WhiteheadRussell] p. 119.  (Contributed by NM,
     3-Jan-2005.) $)
  pm4.45 $p |- ( ph <-> ( ph /\ ( ph \/ ps ) ) ) $=
    ( wo orc pm4.71i ) AABCABDE $.

  $( Absorption of redundant internal disjunct.  Compare Theorem *4.45 of
     [WhiteheadRussell] p. 119.  (Contributed by NM, 21-Jun-1993.)  (Proof
     shortened by Wolf Lammen, 28-Feb-2014.) $)
  orabs $p |- ( ph <-> ( ( ph \/ ps ) /\ ph ) ) $=
    ( wo orc pm4.71ri ) AABCABDE $.

  $( Absorb a disjunct into a conjunct.  (Contributed by Roy F. Longton,
     23-Jun-2005.)  (Proof shortened by Wolf Lammen, 10-Nov-2013.) $)
  oranabs $p |- ( ( ( ph \/ -. ps ) /\ ps ) <-> ( ph /\ ps ) ) $=
    ( wn wo biortn orcom syl6rbb pm5.32ri ) BABCZDZABAIADJBAEIAFGH $.

  $( Theorem *5.61 of [WhiteheadRussell] p. 125.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 30-Jun-2013.) $)
  pm5.61 $p |- ( ( ( ph \/ ps ) /\ -. ps ) <-> ( ph /\ -. ps ) ) $=
    ( wn wo biorf orcom syl6rbb pm5.32ri ) BCZABDZAIABADJBAEBAFGH $.

  $( Conjunction in antecedent versus disjunction in consequent.  Theorem *5.6
     of [WhiteheadRussell] p. 125.  (Contributed by NM, 8-Jun-1994.) $)
  pm5.6 $p |- ( ( ( ph /\ -. ps ) -> ch ) <-> ( ph -> ( ps \/ ch ) ) ) $=
    ( wn wa wi wo impexp df-or imbi2i bitr4i ) ABDZECFALCFZFABCGZFALCHNMABCIJK
    $.

  ${
    orcanai.1 $e |- ( ph -> ( ps \/ ch ) ) $.
    $( Change disjunction in consequent to conjunction in antecedent.
       (Contributed by NM, 8-Jun-1994.) $)
    orcanai $p |- ( ( ph /\ -. ps ) -> ch ) $=
      ( wn ord imp ) ABECABCDFG $.
  $}

  $( Theorem *4.79 of [WhiteheadRussell] p. 121.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 27-Jun-2013.) $)
  pm4.79 $p |- ( ( ( ps -> ph ) \/ ( ch -> ph ) ) <->
                ( ( ps /\ ch ) -> ph ) ) $=
    ( wi wo wa id jaoa wn simplim pm3.3 syl5 orrd impbii ) BADZCADZEBCFADZOBAPC
    OGPGHQOPOIBQPBAJBCAKLMN $.

  $( Theorem *5.53 of [WhiteheadRussell] p. 125.  (Contributed by NM,
     3-Jan-2005.) $)
  pm5.53 $p |- ( ( ( ( ph \/ ps ) \/ ch ) -> th ) <->
                ( ( ( ph -> th ) /\ ( ps -> th ) ) /\ ( ch -> th ) ) ) $=
    ( wo wi wa jaob anbi1i bitri ) ABEZCEDFKDFZCDFZGADFBDFGZMGKDCHLNMADBHIJ $.

  $( Distributive law for disjunction.  Theorem *4.41 of [WhiteheadRussell]
     p. 119.  (Contributed by NM, 5-Jan-1993.)  (Proof shortened by Andrew
     Salmon, 7-May-2011.)  (Proof shortened by Wolf Lammen, 28-Nov-2013.) $)
  ordi $p |- ( ( ph \/ ( ps /\ ch ) ) <-> ( ( ph \/ ps ) /\ ( ph \/ ch ) ) ) $=
    ( wn wa wi wo jcab df-or anbi12i 3bitr4i ) ADZBCEZFLBFZLCFZEAMGABGZACGZELBC
    HAMIPNQOABIACIJK $.

  $( Distributive law for disjunction.  (Contributed by NM, 12-Aug-1994.) $)
  ordir $p |- ( ( ( ph /\ ps ) \/ ch ) <->
              ( ( ph \/ ch ) /\ ( ps \/ ch ) ) ) $=
    ( wa wo ordi orcom anbi12i 3bitr4i ) CABDZECAEZCBEZDJCEACEZBCEZDCABFJCGMKNL
    ACGBCGHI $.

  $( Distributive law for conjunction.  Theorem *4.4 of [WhiteheadRussell]
     p. 118.  (Contributed by NM, 21-Jun-1993.)  (Proof shortened by Wolf
     Lammen, 5-Jan-2013.) $)
  andi $p |- ( ( ph /\ ( ps \/ ch ) ) <-> ( ( ph /\ ps ) \/ ( ph /\ ch ) ) ) $=
    ( wo wa orc olc jaodan anim2i jaoi impbii ) ABCDZEZABEZACEZDZABPCNOFONGHNMO
    BLABCFICLACBGIJK $.

  $( Distributive law for conjunction.  (Contributed by NM, 12-Aug-1994.) $)
  andir $p |- ( ( ( ph \/ ps ) /\ ch ) <->
              ( ( ph /\ ch ) \/ ( ps /\ ch ) ) ) $=
    ( wo wa andi ancom orbi12i 3bitr4i ) CABDZECAEZCBEZDJCEACEZBCEZDCABFJCGMKNL
    ACGBCGHI $.

  $( Double distributive law for disjunction.  (Contributed by NM,
     12-Aug-1994.) $)
  orddi $p |- ( ( ( ph /\ ps ) \/ ( ch /\ th ) ) <->
              ( ( ( ph \/ ch ) /\ ( ph \/ th ) ) /\
              ( ( ps \/ ch ) /\ ( ps \/ th ) ) ) ) $=
    ( wa wo ordir ordi anbi12i bitri ) ABECDEZFAKFZBKFZEACFADFEZBCFBDFEZEABKGLN
    MOACDHBCDHIJ $.

  $( Double distributive law for conjunction.  (Contributed by NM,
     12-Aug-1994.) $)
  anddi $p |- ( ( ( ph \/ ps ) /\ ( ch \/ th ) ) <->
              ( ( ( ph /\ ch ) \/ ( ph /\ th ) ) \/
              ( ( ps /\ ch ) \/ ( ps /\ th ) ) ) ) $=
    ( wo wa andir andi orbi12i bitri ) ABECDEZFAKFZBKFZEACFADFEZBCFBDFEZEABKGLN
    MOACDHBCDHIJ $.

$( Theorems relating XOR to conjunction or disjunction. $)

  $( Theorem *5.17 of [WhiteheadRussell] p. 124.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 3-Jan-2013.) $)
  pm5.17 $p |- ( ( ( ph \/ ps ) /\ -. ( ph /\ ps ) ) <-> ( ph <-> -. ps ) ) $=
    ( wn wb wi wa wo bicom dfbi2 orcom df-or bitr2i imnan anbi12i 3bitrri ) ABC
    ZDPADPAEZAPEZFABGZABFCZFAPHPAIQSRTSBAGQABJBAKLABMNO $.

  $( Theorem *5.15 of [WhiteheadRussell] p. 124.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 15-Oct-2013.) $)
  pm5.15 $p |- ( ( ph <-> ps ) \/ ( ph <-> -. ps ) ) $=
    ( wb wn xor3 biimpi orri ) ABCZABDCZHDIABEFG $.

  $( Theorem *5.16 of [WhiteheadRussell] p. 124.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 17-Oct-2013.) $)
  pm5.16 $p |- -. ( ( ph <-> ps ) /\ ( ph <-> -. ps ) ) $=
    ( wb wn wi wa pm5.18 biimpi imnan mpbi ) ABCZABDCZDZEKLFDKMABGHKLIJ $.

  $( Two ways to express exclusive disjunction ( ~ df-xor ).  Theorem *5.22 of
     [WhiteheadRussell] p. 124.  (Contributed by NM, 3-Jan-2005.)  (Proof
     shortened by Wolf Lammen, 22-Jan-2013.) $)
  xor $p |- ( -. ( ph <-> ps ) <->
                ( ( ph /\ -. ps ) \/ ( ps /\ -. ph ) ) ) $=
    ( wn wa wo wb wi iman anbi12i dfbi2 ioran 3bitr4ri con1bii ) ABCDZBACDZEZAB
    FZABGZBAGZDNCZOCZDQPCRTSUAABHBAHIABJNOKLM $.

  $( Two ways to express "exclusive or".  (Contributed by NM, 3-Jan-2005.)
     (Proof shortened by Wolf Lammen, 24-Jan-2013.) $)
  nbi2 $p |- ( -. ( ph <-> ps ) <-> ( ( ph \/ ps ) /\ -. ( ph /\ ps ) ) ) $=
    ( wb wn wo wa xor3 pm5.17 bitr4i ) ABCDABDCABEABFDFABGABHI $.

  $( Conjunction distributes over exclusive-or, using ` -. ( ph <-> ps ) ` to
     express exclusive-or.  This is one way to interpret the distributive law
     of multiplication over addition in modulo 2 arithmetic.  This is not
     necessarily true in intuitionistic logic, though ~ anxordi does hold in
     it.  (Contributed by NM, 3-Oct-2008.) $)
  xordi $p |- ( ( ph /\ -. ( ps <-> ch ) ) <->
                -. ( ( ph /\ ps ) <-> ( ph /\ ch ) ) ) $=
    ( wb wn wa wi annim pm5.32 xchbinx ) ABCDZEFAKGABFACFDAKHABCIJ $.

  $( Theorem *5.54 of [WhiteheadRussell] p. 125.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 7-Nov-2013.) $)
  pm5.54 $p |- ( ( ( ph /\ ps ) <-> ph ) \/ ( ( ph /\ ps ) <-> ps ) ) $=
    ( wa wb iba bicomd adantl pm5.21ni orri ) ABCZADZJBDJKBBKABAJBAEFZGLHI $.

  $( Theorem *5.62 of [WhiteheadRussell] p. 125.  (Contributed by Roy F.
     Longton, 21-Jun-2005.) $)
  pm5.62 $p |- ( ( ( ph /\ ps ) \/ -. ps ) <-> ( ph \/ -. ps ) ) $=
    ( wa wn wo exmid ordir mpbiran2 ) ABCBDZEAIEBIEBFABIGH $.

  $( Theorem *5.63 of [WhiteheadRussell] p. 125.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 25-Dec-2012.) $)
  pm5.63 $p |- ( ( ph \/ ps ) <-> ( ph \/ ( -. ph /\ ps ) ) ) $=
    ( wn wa wo exmid ordi mpbiran bicomi ) AACZBDEZABEZKAJELAFAJBGHI $.

  ${
    niabn.1 $e |- ph $.
    $( Miscellaneous inference relating falsehoods.  (Contributed by NM,
       31-Mar-1994.) $)
    niabn $p |- ( -. ps -> ( ( ch /\ ps ) <-> -. ph ) ) $=
      ( wa wn simpr pm2.24i pm5.21ni ) CBEBAFCBGABDHI $.
  $}

  ${
    ninba.1 $e |- ph $.
    $( Miscellaneous inference relating falsehoods.  (Contributed by NM,
       31-Mar-1994.) $)
    ninba $p |- ( -. ps -> ( -. ph <-> ( ch /\ ps ) ) ) $=
      ( wn wa niabn bicomd ) BECBFAEABCDGH $.
  $}

  $( Theorem *4.43 of [WhiteheadRussell] p. 119.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 26-Nov-2012.) $)
  pm4.43 $p |- ( ph <-> ( ( ph \/ ps ) /\ ( ph \/ -. ps ) ) ) $=
    ( wn wa wo pm3.24 biorfi ordi bitri ) AABBCZDZEABEAJEDKABFGABJHI $.

  $( Theorem *4.82 of [WhiteheadRussell] p. 122.  (Contributed by NM,
     3-Jan-2005.) $)
  pm4.82 $p |- ( ( ( ph -> ps ) /\ ( ph -> -. ps ) ) <-> -. ph ) $=
    ( wi wn wa pm2.65 imp pm2.21 jca impbii ) ABCZABDZCZEADZKMNABFGNKMABHALHIJ
    $.

  $( Theorem *4.83 of [WhiteheadRussell] p. 122.  (Contributed by NM,
     3-Jan-2005.) $)
  pm4.83 $p |- ( ( ( ph -> ps ) /\ ( -. ph -> ps ) ) <-> ps ) $=
    ( wn wo wi wa exmid a1bi jaob bitr2i ) BAACZDZBEABEKBEFLBAGHABKIJ $.

  $( Negation inferred from embedded conjunct.  (Contributed by NM,
     20-Aug-1993.)  (Proof shortened by Wolf Lammen, 25-Nov-2012.) $)
  pclem6 $p |- ( ( ph <-> ( ps /\ -. ph ) ) -> -. ps ) $=
    ( wn wa wb ibar nbbn sylib con2i ) BABACZDZEZBJKELCBJFAKGHI $.

  $( Dijkstra-Scholten's Golden Rule for calculational proofs.  (Contributed by
     NM, 10-Jan-2005.) $)
  bigolden $p |- ( ( ( ph /\ ps ) <-> ph ) <-> ( ps <-> ( ph \/ ps ) ) ) $=
    ( wi wa wb wo pm4.71 pm4.72 bicom 3bitr3ri ) ABCAABDZEBABFEKAEABGABHAKIJ $.

  $( Theorem *5.71 of [WhiteheadRussell] p. 125.  (Contributed by Roy F.
     Longton, 23-Jun-2005.) $)
  pm5.71 $p |- ( ( ps -> -. ch ) -> ( ( ( ph \/ ps ) /\ ch ) <->
                ( ph /\ ch ) ) ) $=
    ( wn wo wa wb orel2 orc impbid1 anbi1d pm2.21 pm5.32rd ja ) BCDZABEZCFACFGB
    DZPACQPABAHABIJKOCPACPAGLMN $.

  $( Theorem *5.75 of [WhiteheadRussell] p. 126.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Andrew Salmon, 7-May-2011.)  (Proof
     shortened by Wolf Lammen, 23-Dec-2012.)  (Proof shortened by Kyle Wyonch,
     12-Feb-2021.) $)
  pm5.75 $p |- ( ( ( ch -> -. ps ) /\ ( ph <-> ( ps \/ ch ) ) )
      -> ( ( ph /\ -. ps ) <-> ch ) ) $=
    ( wo wb wn wa wi anbi1 biorf bicomd pm5.32ri syl6bb pm4.71 biimpi sylan9bbr
    ) ABCDZEZABFZGZCSGZCSHZCRTQSGUAAQSISQCSCQBCJKLMUBCUAUBCUAECSNOKP $.

  ${
    ecase2d.1 $e |- ( ph -> ps ) $.
    ecase2d.2 $e |- ( ph -> -. ( ps /\ ch ) ) $.
    ecase2d.3 $e |- ( ph -> -. ( ps /\ th ) ) $.
    ecase2d.4 $e |- ( ph -> ( ta \/ ( ch \/ th ) ) ) $.
    $( Deduction for elimination by cases.  (Contributed by NM, 21-Apr-1994.)
       (Proof shortened by Wolf Lammen, 22-Dec-2012.) $)
    ecase2d $p |- ( ph -> ta ) $=
      ( wo idd wa pm2.21d mpand jaod mpjaod ) AEECDJAEKACEDABCEFABCLEGMNABDEFAB
      DLEHMNOIP $.
  $}

  ${
    ecase3.1 $e |- ( ph -> ch ) $.
    ecase3.2 $e |- ( ps -> ch ) $.
    ecase3.3 $e |- ( -. ( ph \/ ps ) -> ch ) $.
    $( Inference for elimination by cases.  (Contributed by NM, 23-Mar-1995.)
       (Proof shortened by Wolf Lammen, 26-Nov-2012.) $)
    ecase3 $p |- ch $=
      ( wo jaoi pm2.61i ) ABGCACBDEHFI $.
  $}

  ${
    ecase.1 $e |- ( -. ph -> ch ) $.
    ecase.2 $e |- ( -. ps -> ch ) $.
    ecase.3 $e |- ( ( ph /\ ps ) -> ch ) $.
    $( Inference for elimination by cases.  (Contributed by NM,
       13-Jul-2005.) $)
    ecase $p |- ch $=
      ( ex pm2.61nii ) ABCABCFGDEH $.
  $}

  ${
    ecase3d.1 $e |- ( ph -> ( ps -> th ) ) $.
    ecase3d.2 $e |- ( ph -> ( ch -> th ) ) $.
    ecase3d.3 $e |- ( ph -> ( -. ( ps \/ ch ) -> th ) ) $.
    $( Deduction for elimination by cases.  (Contributed by NM, 2-May-1996.)
       (Proof shortened by Andrew Salmon, 7-May-2011.) $)
    ecase3d $p |- ( ph -> th ) $=
      ( wo jaod pm2.61d ) ABCHDABDCEFIGJ $.
  $}

  ${
    ecased.1 $e |- ( ph -> ( -. ps -> th ) ) $.
    ecased.2 $e |- ( ph -> ( -. ch -> th ) ) $.
    ecased.3 $e |- ( ph -> ( ( ps /\ ch ) -> th ) ) $.
    $( Deduction for elimination by cases.  (Contributed by NM, 8-Oct-2012.) $)
    ecased $p |- ( ph -> th ) $=
      ( wn wo wa pm3.11 syl5 ecase3d ) ABHZCHZDEFNOIHBCJADBCKGLM $.
  $}

  ${
    ecase3ad.1 $e |- ( ph -> ( ps -> th ) ) $.
    ecase3ad.2 $e |- ( ph -> ( ch -> th ) ) $.
    ecase3ad.3 $e |- ( ph -> ( ( -. ps /\ -. ch ) -> th ) ) $.
    $( Deduction for elimination by cases.  (Contributed by NM,
       24-May-2013.) $)
    ecase3ad $p |- ( ph -> th ) $=
      ( wn notnotr syl5 ecased ) ABHZCHZDLHBADBIEJMHCADCIFJGK $.
  $}

  ${
    ccase.1 $e |- ( ( ph /\ ps ) -> ta ) $.
    ccase.2 $e |- ( ( ch /\ ps ) -> ta ) $.
    ccase.3 $e |- ( ( ph /\ th ) -> ta ) $.
    ccase.4 $e |- ( ( ch /\ th ) -> ta ) $.
    $( Inference for combining cases.  (Contributed by NM, 29-Jul-1999.)
       (Proof shortened by Wolf Lammen, 6-Jan-2013.) $)
    ccase $p |- ( ( ( ph \/ ch ) /\ ( ps \/ th ) ) -> ta ) $=
      ( wo jaoian jaodan ) ACJBEDABECFGKADECHIKL $.
  $}

  ${
    ccased.1 $e |- ( ph -> ( ( ps /\ ch ) -> et ) ) $.
    ccased.2 $e |- ( ph -> ( ( th /\ ch ) -> et ) ) $.
    ccased.3 $e |- ( ph -> ( ( ps /\ ta ) -> et ) ) $.
    ccased.4 $e |- ( ph -> ( ( th /\ ta ) -> et ) ) $.
    $( Deduction for combining cases.  (Contributed by NM, 9-May-2004.) $)
    ccased $p |- ( ph -> ( ( ( ps \/ th ) /\ ( ch \/ ta ) ) -> et ) ) $=
      ( wo wa wi com12 ccase ) BDKCEKLAFBCDEAFMABCLFGNADCLFHNABELFINADELFJNON
      $.
  $}

  ${
    ccase2.1 $e |- ( ( ph /\ ps ) -> ta ) $.
    ccase2.2 $e |- ( ch -> ta ) $.
    ccase2.3 $e |- ( th -> ta ) $.
    $( Inference for combining cases.  (Contributed by NM, 29-Jul-1999.) $)
    ccase2 $p |- ( ( ( ph \/ ch ) /\ ( ps \/ th ) ) -> ta ) $=
      ( adantr adantl ccase ) ABCDEFCEBGIDEAHJDECHJK $.
  $}

  ${
    4cases.1 $e |- ( ( ph /\ ps ) -> ch ) $.
    4cases.2 $e |- ( ( ph /\ -. ps ) -> ch ) $.
    4cases.3 $e |- ( ( -. ph /\ ps ) -> ch ) $.
    4cases.4 $e |- ( ( -. ph /\ -. ps ) -> ch ) $.
    $( Inference eliminating two antecedents from the four possible cases that
       result from their true/false combinations.  (Contributed by NM,
       25-Oct-2003.) $)
    4cases $p |- ch $=
      ( pm2.61ian wn pm2.61i ) BCABCDFHABICEGHJ $.
  $}

  ${
    4casesdan.1 $e |- ( ( ph /\ ( ps /\ ch ) ) -> th ) $.
    4casesdan.2 $e |- ( ( ph /\ ( ps /\ -. ch ) ) -> th ) $.
    4casesdan.3 $e |- ( ( ph /\ ( -. ps /\ ch ) ) -> th ) $.
    4casesdan.4 $e |- ( ( ph /\ ( -. ps /\ -. ch ) ) -> th ) $.
    $( Deduction eliminating two antecedents from the four possible cases that
       result from their true/false combinations.  (Contributed by NM,
       19-Mar-2013.) $)
    4casesdan $p |- ( ph -> th ) $=
      ( wi wa expcom wn 4cases ) BCADIABCJDEKABCLZJDFKABLZCJDGKAONJDHKM $.
  $}

  ${
    cases.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    cases.2 $e |- ( -. ph -> ( ps <-> th ) ) $.
    $( Case disjunction according to the value of ` ph ` .  (Contributed by NM,
       25-Apr-2019.) $)
    cases $p |- ( ps <-> ( ( ph /\ ch ) \/ ( -. ph /\ th ) ) ) $=
      ( wn wo wa exmid biantrur andir pm5.32i orbi12i 3bitri ) BAAGZHZBIABIZPBI
      ZHACIZPDIZHQBAJKAPBLRTSUAABCEMPBDFMNO $.
  $}

  $( Lemma for an alternate version of weak deduction theorem.  (Contributed by
     NM, 2-Apr-1994.)  (Proof shortened by Andrew Salmon, 7-May-2011.)  (Proof
     shortened by Wolf Lammen, 4-Dec-2012.) $)
  dedlem0a $p |- ( ph -> ( ps <-> ( ( ch -> ph ) -> ( ps /\ ph ) ) ) ) $=
    ( wa wi iba wb biimt jarri bitrd ) ABBADZCAEZKEZABFCAKMGLKHIJ $.

  $( Lemma for an alternate version of weak deduction theorem.  (Contributed by
     NM, 2-Apr-1994.) $)
  dedlem0b $p |- ( -. ph -> ( ps <-> ( ( ps -> ph ) -> ( ch /\ ph ) ) ) ) $=
    ( wn wi wa pm2.21 imim2d com23 simpr imim12i con1d com12 impbid ) ADZBBAEZC
    AFZEZOPBQOAQBAQGHIROBRBABDPQABAGCAJKLMN $.

  $( Lemma for weak deduction theorem.  See also ~ ifptru .  (Contributed by
     NM, 26-Jun-2002.)  (Proof shortened by Andrew Salmon, 7-May-2011.) $)
  dedlema $p |- ( ph -> ( ps <-> ( ( ps /\ ph ) \/ ( ch /\ -. ph ) ) ) ) $=
    ( wa wn wo orc expcom wi simpl a1i pm2.24 adantld jaod impbid ) ABBADZCAEZD
    ZFZBASPRGHAPBRPBIABAJKAQBCABLMNO $.

  $( Lemma for weak deduction theorem.  See also ~ ifpfal .  (Contributed by
     NM, 15-May-1999.)  (Proof shortened by Andrew Salmon, 7-May-2011.) $)
  dedlemb $p |- ( -. ph -> ( ch <-> ( ( ps /\ ph ) \/ ( ch /\ -. ph ) ) ) ) $=
    ( wn wa wo olc expcom pm2.21 adantld wi simpl a1i jaod impbid ) ADZCBAEZCPE
    ZFZCPSRQGHPQCRPACBACIJRCKPCPLMNO $.

  $( Case disjunction according to the value of ` ph ` .  (Contributed by BJ,
     6-Apr-2019.)  (Proof shortened by Wolf Lammen, 28-Feb-2022.) $)
  cases2 $p |- ( ( ( ph /\ ps ) \/ ( -. ph /\ ch ) )
                                   <-> ( ( ph -> ps ) /\ ( -. ph -> ch ) ) ) $=
    ( wa wn wo wi pm4.83 dedlema pm5.74i dedlemb anbi12i ancom orbi12i 3bitr4ri
    ) ABADZCAEZDZFZGZQSGZDSABGZQCGZDABDZQCDZFASHUBTUCUAABSABCIJQCSABCKJLUDPUERA
    BMQCMNO $.

  $( Alternate proof of ~ cases2 , not using ~ dedlema or ~ dedlemb .
     (Contributed by BJ, 6-Apr-2019.)  (Proof shortened by Wolf Lammen,
     2-Jan-2020.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  cases2ALT $p |- ( ( ( ph /\ ps ) \/ ( -. ph /\ ch ) )
                                   <-> ( ( ph -> ps ) /\ ( -. ph -> ch ) ) ) $=
    ( wa wn wo wi pm3.4 pm2.24 adantr pm2.21 jaoi pm2.27 imdistani orcd adantrr
    jca olcd adantrl pm2.61ian impbii ) ABDZAEZCDZFZABGZUCCGZDZUBUHUDUBUFUGABHA
    UGBACIJQUDUFUGUCUFCABKJUCCHQLAUHUEAUFUEUGAUFDUBUDAUFBABMNOPUCUGUEUFUCUGDUDU
    BUCUGCUCCMNRSTUA $.

  $( An alternate definition of the biconditional.  Theorem *5.23 of
     [WhiteheadRussell] p. 124.  (Contributed by NM, 27-Jun-2002.)  (Proof
     shortened by Wolf Lammen, 3-Nov-2013.)  (Proof shortened by NM,
     29-Oct-2021.) $)
  dfbi3 $p |- ( ( ph <-> ps ) <-> ( ( ph /\ ps ) \/ ( -. ph /\ -. ps ) ) ) $=
    ( wi wa wn wb wo con34b anbi2i dfbi2 cases2 3bitr4i ) ABCZBACZDMAEZBEZCZDAB
    FABDOPDGNQMBAHIABJABPKL $.

  $( Theorem *5.24 of [WhiteheadRussell] p. 124.  (Contributed by NM,
     3-Jan-2005.) $)
  pm5.24 $p |- ( -. ( ( ph /\ ps ) \/ ( -. ph /\ -. ps ) ) <->
                ( ( ph /\ -. ps ) \/ ( ps /\ -. ph ) ) ) $=
    ( wb wn wa wo xor dfbi3 xchnxbi ) ABCABDZEBADZEFABEKJEFABGABHI $.

  $( The disjunction of the four possible combinations of two wffs and their
     negations is always true.  A four-way excluded middle (see ~ exmid ).
     (Contributed by David Abernethy, 28-Jan-2014.)  (Proof shortened by NM,
     29-Oct-2021.) $)
  4exmid $p |- ( ( ( ph /\ ps ) \/ ( -. ph /\ -. ps ) )
              \/ ( ( ph /\ -. ps ) \/ ( ps /\ -. ph ) ) ) $=
    ( wa wn wo pm5.24 biimpi orri ) ABCADZBDZCEZAJCBICEZKDLABFGH $.

  $( The consensus theorem.  This theorem and its dual (with ` \/ ` and ` /\ `
     interchanged) are commonly used in computer logic design to eliminate
     redundant terms from Boolean expressions.  Specifically, we prove that the
     term ` ( ps /\ ch ) ` on the left-hand side is redundant.  (Contributed by
     NM, 16-May-2003.)  (Proof shortened by Andrew Salmon, 13-May-2011.)
     (Proof shortened by Wolf Lammen, 20-Jan-2013.) $)
  consensus $p |- ( ( ( ( ph /\ ps ) \/ ( -. ph /\ ch ) ) \/ ( ps /\ ch ) ) <->
                      ( ( ph /\ ps ) \/ ( -. ph /\ ch ) ) ) $=
    ( wa wn wo id orc adantrr olc adantrl pm2.61ian jaoi impbii ) ABDZAEZCDZFZB
    CDZFRRRSRGASRABRCOQHIPCRBQOJKLMRSHN $.

  $( Theorem *4.42 of [WhiteheadRussell] p. 119.  See also ~ ifpid .
     (Contributed by Roy F. Longton, 21-Jun-2005.) $)
  pm4.42 $p |- ( ph <-> ( ( ph /\ ps ) \/ ( ph /\ -. ps ) ) ) $=
    ( wa wn wo wb dedlema dedlemb pm2.61i ) BAABCABDCEFBAAGBAAHI $.

  ${
    prlem1.1 $e |- ( ph -> ( et <-> ch ) ) $.
    prlem1.2 $e |- ( ps -> -. th ) $.
    $( A specialized lemma for set theory (to derive the Axiom of Pairing).
       (Contributed by NM, 18-Oct-1995.)  (Proof shortened by Andrew Salmon,
       13-May-2011.)  (Proof shortened by Wolf Lammen, 5-Jan-2013.) $)
    prlem1 $p |- ( ph -> ( ps ->
                  ( ( ( ps /\ ch ) \/ ( th /\ ta ) ) -> et ) ) ) $=
      ( wa wo wi biimprd adantld pm2.21d adantrd jaao ex ) ABBCIZDEIZJFKARFBSAC
      FBAFCGLMBDFEBDFHNOPQ $.
  $}

  $( A specialized lemma for set theory (to derive the Axiom of Pairing).
     (Contributed by NM, 21-Jun-1993.)  (Proof shortened by Andrew Salmon,
     13-May-2011.)  (Proof shortened by Wolf Lammen, 9-Dec-2012.) $)
  prlem2 $p |- ( ( ( ph /\ ps ) \/ ( ch /\ th ) ) <->
              ( ( ph \/ ch ) /\ ( ( ph /\ ps ) \/ ( ch /\ th ) ) ) ) $=
    ( wa wo simpl orim12i pm4.71ri ) ABEZCDEZFACFJAKCABGCDGHI $.

  ${
    oplem1.1 $e |- ( ph -> ( ps \/ ch ) ) $.
    oplem1.2 $e |- ( ph -> ( th \/ ta ) ) $.
    oplem1.3 $e |- ( ps <-> th ) $.
    oplem1.4 $e |- ( ch -> ( th <-> ta ) ) $.
    $( A specialized lemma for set theory (ordered pair theorem).  (Contributed
       by NM, 18-Oct-1995.)  (Proof shortened by Wolf Lammen, 8-Dec-2012.) $)
    oplem1 $p |- ( ph -> ps ) $=
      ( wn wa notbii ord syl5bir jcad biimpar syl6 pm2.18d sylibr ) ADBADADJZCE
      KDATCETBJACBDHLABCFMNADEGMOCDEIPQRHS $.
  $}

  $( A single axiom for Boolean algebra known as DN_1.  See McCune, Veroff,
     Fitelson, Harris, Feist, Wos, _Short single axioms for Boolean algebra_,
     Journal of Automated Reasoning, 29(1):1--16, 2002.
     ( ~ https://www.cs.unm.edu/~~mccune/papers/basax/v12.pdf ).  (Contributed
     by Jeff Hankins, 3-Jul-2009.)  (Proof shortened by Andrew Salmon,
     13-May-2011.)  (Proof shortened by Wolf Lammen, 6-Jan-2013.) $)
  dn1 $p |- ( -. ( -. ( -. ( ph \/ ps ) \/ ch ) \/
            -. ( ph \/ -. ( -. ch \/ -. ( ch \/ th ) ) ) ) <-> ch ) $=
    ( wo wn wa wi pm2.45 imnan mpbi biorfi orcom ordir bitri pm4.45 anor orbi2i
    anbi2i 3bitrri ) CABEFZCEZACEZGZUBACFCDEZFEFZEZGUBFUGFEFCCUAAGZEZUDUHCUAAFH
    UHFABIUAAJKLUIUHCEUDCUHMUAACNOOUCUGUBCUFACCUEGUFCDPCUEQORSUBUGQT $.

  $( A closed form of ~ mpbir , analogous to ~ pm2.27 (assertion).
     (Contributed by Jonathan Ben-Naim, 3-Jun-2011.)  (Proof shortened by Roger
     Witte, 17-Aug-2020.) $)
  bianir $p |- ( ( ph /\ ( ps <-> ph ) ) -> ps ) $=
    ( wb biimpr impcom ) BACABBADE $.

  ${
    jaoi2.1 $e |- ( ( ph \/ ( -. ph /\ ch ) ) -> ps ) $.
    $( Inference removing a negated conjunct in a disjunction of an antecedent
       if this conjunct is part of the disjunction.  (Contributed by Alexander
       van der Vekens, 3-Nov-2017.)  (Proof shortened by Wolf Lammen,
       21-Sep-2018.) $)
    jaoi2 $p |- ( ( ph \/ ch ) -> ps ) $=
      ( wo wn wa pm5.63 sylbi ) ACEAAFCGEBACHDI $.
  $}

  ${
    jaoi3.1 $e |- ( ph -> ps ) $.
    jaoi3.2 $e |- ( ( -. ph /\ ch ) -> ps ) $.
    $( Inference separating a disjunct of an antecedent.  (Contributed by
       Alexander van der Vekens, 25-May-2018.) $)
    jaoi3 $p |- ( ( ph \/ ch ) -> ps ) $=
      ( wn wa jaoi jaoi2 ) ABCABAFCGDEHI $.
  $}

  $( Selecting one statement from a disjunction if one of the disjuncted
     statements is false.  (Contributed by AV, 6-Sep-2018.)  (Proof shortened
     by AV, 13-Oct-2018.)  (Proof shortened by Wolf Lammen, 19-Jan-2020.) $)
  ornld $p |- ( ph -> ( ( ( ph -> ( th \/ ta ) ) /\ -. th ) -> ta ) ) $=
    ( wo wi wn wa pm3.35 ord expimpd ) AABCDZEZBFCALGBCAKHIJ $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  The conditional operator for propositions
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  This subsection introduces the conditional operator for propositions, denoted
  by ` if- ( ph , ps , ch ) ` (see ~ df-ifp ).  It is the analogue for
  propositions of the conditional operator for classes, denoted by
  ` if ( ph , A , B ) ` (see ~ df-if ).

$)

  $( Comma.  Also used later for adders, pairs, tuples, etc. $)
  $c , $.

  $( Symbol for the conditional operator for propositions. $)
  $c if- $.

  $( Extend class notation to include the conditional operator for
     propositions. $)
  wif $a wff if- ( ph , ps , ch ) $.

  $( Definition of the conditional operator for propositions.  The expression
     ` if- ( ph , ps , ch ) ` is read "if ` ph ` then ` ps ` else ` ch ` ".
     See ~ dfifp2 , ~ dfifp3 , ~ dfifp4 , ~ dfifp5 , ~ dfifp6 and ~ dfifp7 for
     alternate definitions.

     This definition (in the form of ~ dfifp2 ) appears in Section II.24 of
     [Church] p. 129 (Definition D12 page 132), where it is called "conditioned
     disjunction".  Church's ` [ ps , ph , ch ] ` corresponds to our
     ` if- ( ph , ps , ch ) ` (note the permutation of the first two
     variables).

     This form was chosen as the definition rather than ~ dfifp2 for
     compatibility with intuitionistic logic development: with this form, it is
     clear that ` if- ( ph , ps , ch ) ` implies decidability of ` ph ` , which
     is most often what is wanted.

     Church uses the conditional operator as an intermediate step to prove
     completeness of some systems of connectives.  The first result is that the
     system ` { if- , T. , F. } ` is complete: for the induction step, consider
     a formula of n+1 variables; single out one variable, say ` ph ` ; when one
     sets ` ph ` to True (resp.  False), then what remains is a formula of n
     variables, so by the induction hypothesis it is equivalent to a formula
     using only the connectives ` if- , T. , F. ` , say ` ps ` (resp. ` ch ` );
     therefore, the formula ` if- ( ph , ps , ch ) ` is equivalent to the
     initial formula of n+1 variables.  Now, since ` { -> , -. } ` and similar
     systems suffice to express the connectives ` if- , T. , F. ` , they are
     also complete.

     (Contributed by BJ, 22-Jun-2019.) $)
  df-ifp $a |-
            ( if- ( ph , ps , ch ) <-> ( ( ph /\ ps ) \/ ( -. ph /\ ch ) ) ) $.

  $( Alternate definition of the conditional operator for propositions.  The
     value of ` if- ( ph , ps , ch ) ` is "if ` ph ` then ` ps ` , and if not
     ` ph ` then ` ch ` ".  This version of the definition uses only primitive
     symbols ( ` -> , -. , A. ` ).  This is the definition used in Section
     II.24 of [Church] p. 129 (Definition D12 page 132) (see comment of
     ~ df-ifp ).  (Contributed by BJ, 22-Jun-2019.) $)
  dfifp2 $p |-
            ( if- ( ph , ps , ch ) <-> ( ( ph -> ps ) /\ ( -. ph -> ch ) ) ) $=
    ( wif wa wn wo wi df-ifp cases2 bitri ) ABCDABEAFZCEGABHLCHEABCIABCJK $.

  $( Alternate definition of the conditional operator for propositions.
     (Contributed by BJ, 30-Sep-2019.) $)
  dfifp3 $p |- ( if- ( ph , ps , ch ) <-> ( ( ph -> ps ) /\ ( ph \/ ch ) ) ) $=
    ( wif wi wn wa wo dfifp2 pm4.64 anbi2i bitri ) ABCDABEZAFCEZGMACHZGABCINOMA
    CJKL $.

  $( Alternate definition of the conditional operator for propositions.
     (Contributed by BJ, 30-Sep-2019.) $)
  dfifp4 $p |-
            ( if- ( ph , ps , ch ) <-> ( ( -. ph \/ ps ) /\ ( ph \/ ch ) ) ) $=
    ( wif wi wo wa wn dfifp3 imor anbi1i bitri ) ABCDABEZACFZGAHBFZNGABCIMONABJ
    KL $.

  $( Alternate definition of the conditional operator for propositions.
     (Contributed by BJ, 2-Oct-2019.) $)
  dfifp5 $p |-
         ( if- ( ph , ps , ch ) <-> ( ( -. ph \/ ps ) /\ ( -. ph -> ch ) ) ) $=
    ( wif wi wn wa wo dfifp2 imor anbi1i bitri ) ABCDABEZAFZCEZGNBHZOGABCIMPOAB
    JKL $.

  $( Alternate definition of the conditional operator for propositions.
     (Contributed by BJ, 2-Oct-2019.) $)
  dfifp6 $p |-
            ( if- ( ph , ps , ch ) <-> ( ( ph /\ ps ) \/ -. ( ch -> ph ) ) ) $=
    ( wif wa wn wo wi df-ifp ancom annim bitri orbi2i ) ABCDABEZAFZCEZGNCAHFZGA
    BCIPQNPCOEQOCJCAKLML $.

  $( Alternate definition of the conditional operator for propositions.
     (Contributed by BJ, 2-Oct-2019.) $)
  dfifp7 $p |- ( if- ( ph , ps , ch ) <-> ( ( ch -> ph ) -> ( ph /\ ps ) ) ) $=
    ( wa wi wn wo wif orcom dfifp6 imor 3bitr4i ) ABDZCAEZFZGOMGABCHNMEMOIABCJN
    MKL $.

  $( The conditional operator is implied by the conjunction of its possible
     outputs.  Dual statement of ~ ifpor .  (Contributed by BJ,
     30-Sep-2019.) $)
  anifp $p |- ( ( ps /\ ch ) -> if- ( ph , ps , ch ) ) $=
    ( wa wn wo wif olc anim12i dfifp4 sylibr ) BCDAEZBFZACFZDABCGBMCNBLHCAHIABC
    JK $.

  $( The conditional operator implies the disjunction of its possible outputs.
     Dual statement of ~ anifp .  (Contributed by BJ, 1-Oct-2019.) $)
  ifpor $p |- ( if- ( ph , ps , ch ) -> ( ps \/ ch ) ) $=
    ( wif wa wn wo df-ifp simpr orim12i sylbi ) ABCDABEZAFZCEZGBCGABCHLBNCABIMC
    IJK $.

  $( Conditional operator for the negation of a proposition.  (Contributed by
     BJ, 30-Sep-2019.) $)
  ifpn $p |- ( if- ( ph , ps , ch ) <-> if- ( -. ph , ch , ps ) ) $=
    ( wi wn wa wif notnotb imbi1i anbi2ci dfifp2 3bitr4i ) ABDZAEZCDZFONEZBDZFA
    BCGNCBGMQOAPBAHIJABCKNCBKL $.

  $( Value of the conditional operator for propositions when its first argument
     is true.  Analogue for propositions of ~ iftrue .  This is essentially
     ~ dedlema .  (Contributed by BJ, 20-Sep-2019.)  (Proof shortened by Wolf
     Lammen, 10-Jul-2020.) $)
  ifptru $p |- ( ph -> ( if- ( ph , ps , ch ) <-> ps ) ) $=
    ( wi wif biimt wo wa orc biantrud dfifp3 syl6bbr bitr2d ) ABABDZABCEZABFANN
    ACGZHOAPNACIJABCKLM $.

  $( Value of the conditional operator for propositions when its first argument
     is false.  Analogue for propositions of ~ iffalse .  This is essentially
     ~ dedlemb .  (Contributed by BJ, 20-Sep-2019.)  (Proof shortened by Wolf
     Lammen, 25-Jun-2020.) $)
  ifpfal $p |- ( -. ph -> ( if- ( ph , ps , ch ) <-> ch ) ) $=
    ( wif wn ifpn ifptru syl5bb ) ABCDAEZCBDICABCFICBGH $.

  $( Value of the conditional operator for propositions when the same
     proposition is returned in either case.  Analogue for propositions of
     ~ ifid .  This is essentially ~ pm4.42 .  (Contributed by BJ,
     20-Sep-2019.) $)
  ifpid $p |- ( if- ( ph , ps , ps ) <-> ps ) $=
    ( wif wb ifptru ifpfal pm2.61i ) AABBCBDABBEABBFG $.

  ${
    casesifp.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    casesifp.2 $e |- ( -. ph -> ( ps <-> th ) ) $.
    $( Version of ~ cases expressed using ` if- ` .  Case disjunction according
       to the value of ` ph ` .  One can see this as a proof that the two
       hypotheses characterize the conditional operator for propositions.  For
       the converses, see ~ ifptru and ~ ifpfal .  (Contributed by BJ,
       20-Sep-2019.) $)
    casesifp $p |- ( ps <-> if- ( ph , ch , th ) ) $=
      ( wa wn wo wif cases df-ifp bitr4i ) BACGAHDGIACDJABCDEFKACDLM $.
  $}

  ${
    ifpbi123d.1 $e |- ( ph -> ( ps <-> ta ) ) $.
    ifpbi123d.2 $e |- ( ph -> ( ch <-> et ) ) $.
    ifpbi123d.3 $e |- ( ph -> ( th <-> ze ) ) $.
    $( Equality deduction for conditional operator for propositions.
       (Contributed by AV, 30-Dec-2020.) $)
    ifpbi123d $p |- ( ph -> ( if- ( ps , ch , th )
                              <-> if- ( ta , et , ze ) ) ) $=
      ( wa wn wo wif anbi12d notbid orbi12d df-ifp 3bitr4g ) ABCKZBLZDKZMEFKZEL
      ZGKZMBCDNEFGNATUCUBUEABECFHIOAUAUDDGABEHPJOQBCDREFGRS $.
  $}

  ${
    ifpimpda.1 $e |- ( ( ph /\ ps ) -> ch ) $.
    ifpimpda.2 $e |- ( ( ph /\ -. ps ) -> th ) $.
    $( Separation of the values of the conditional operator for propositions.
       (Contributed by AV, 30-Dec-2020.)  (Proof shortened by Wolf Lammen,
       27-Feb-2021.) $)
    ifpimpda $p |- ( ph -> if- ( ps , ch , th ) ) $=
      ( wi wn wif ex dfifp2 sylanbrc ) ABCGBHZDGBCDIABCEJAMDFJBCDKL $.
  $}

  ${
    1fpid3.1 $e |- ( ( ph /\ ps ) -> ch ) $.
    $( The value of the conditional operator for propositions is its third
       argument if the first and second argument imply the third argument.
       (Contributed by AV, 4-Apr-2021.) $)
    1fpid3 $p |- ( if- ( ph , ps , ch ) -> ch ) $=
      ( wif wa wn wo df-ifp simpr jaoi sylbi ) ABCEABFZAGZCFZHCABCIMCODNCJKL $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  The weak deduction theorem for propositional calculus
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  This subsection contains a few results related to the weak deduction theorem
  in propositional calculus.  For the weak deduction theorem in set theory, see
  the section beginning with ~ dedth .  For more information on the weak
  deduction theorem, see the Weak Deduction Theorem page ~ mmdeduction.html .

$)

  ${
    elimh.1 $e |- ( ( if- ( ch , ph , ps ) <-> ph ) -> ( ta <-> ch ) ) $.
    elimh.2 $e |- ( ( if- ( ch , ph , ps ) <-> ps ) -> ( ta <-> th ) ) $.
    elimh.3 $e |- th $.
    $( Hypothesis builder for the weak deduction theorem.  For more
       information, see the Weak Deduction Theorem page ~ mmdeduction.html .
       (Contributed by NM, 26-Jun-2002.)  Revised to use the conditional
       operator.  (Revised by BJ, 30-Sep-2019.)  Commute consequent.  (Revised
       by Steven Nguyen, 27-Apr-2023.) $)
    elimh $p |- ta $=
      ( wif wb ifptru syl ibir wn ifpfal mpbiri pm2.61i ) CECECCABIZAJECJCABKFL
      MCNZEDHSRBJEDJCABOGLPQ $.
  $}

  ${
    elimhOLD.1 $e |- ( ( if- ( ch , ph , ps ) <-> ph ) -> ( ch <-> ta ) ) $.
    elimhOLD.2 $e |- ( ( if- ( ch , ph , ps ) <-> ps ) -> ( th <-> ta ) ) $.
    elimhOLD.3 $e |- th $.
    $( Obsolete version of ~ elimh as of 27-Apr-2023.  Hypothesis builder for
       the weak deduction theorem.  For more information, see the Weak
       Deduction Theorem page ~ mmdeduction.html .  (Contributed by NM,
       26-Jun-2002.)  Revised to use the conditional operator.  (Revised by BJ,
       30-Sep-2019.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    elimhOLD $p |- ta $=
      ( wif wb ifptru syl ibi wn ifpfal mpbii pm2.61i ) CECECCABIZAJCEJCABKFLMC
      NZDEHSRBJDEJCABOGLPQ $.
  $}

  ${
    dedt.1 $e |- ( ( if- ( ch , ph , ps ) <-> ph ) -> ( ta <-> th ) ) $.
    dedt.2 $e |- ta $.
    $( The weak deduction theorem.  For more information, see the Weak
       Deduction Theorem page ~ mmdeduction.html .  (Contributed by NM,
       26-Jun-2002.)  Revised to use the conditional operator.  (Revised by BJ,
       30-Sep-2019.)  Commute consequent.  (Revised by Steven Nguyen,
       27-Apr-2023.) $)
    dedt $p |- ( ch -> th ) $=
      ( wif wb ifptru mpbii syl ) CCABHAIZDCABJMEDGFKL $.
  $}

  ${
    dedtOLD.1 $e |- ( ( if- ( ch , ph , ps ) <-> ph ) -> ( th <-> ta ) ) $.
    dedtOLD.2 $e |- ta $.
    $( Obsolete version of ~ dedt as of 27-Apr-2023.  The weak deduction
       theorem.  For more information, see the Weak Deduction Theorem page
       ~ mmdeduction.html .  (Contributed by NM, 26-Jun-2002.)  Revised to use
       the conditional operator.  (Revised by BJ, 30-Sep-2019.)
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    dedtOLD $p |- ( ch -> th ) $=
      ( wif wb ifptru mpbiri syl ) CCABHAIZDCABJMDEGFKL $.
  $}

  $( Proof of ~ con3 from its associated inference ~ con3i that illustrates the
     use of the weak deduction theorem ~ dedt .  (Contributed by NM,
     27-Jun-2002.)  Revised to use the conditional operator.  (Revised by BJ,
     30-Sep-2019.)  Revised ~ dedt and ~ elimh .  (Revised by Steven Nguyen,
     27-Apr-2023.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  con3ALT $p |- ( ( ph -> ps ) -> ( -. ps -> -. ph ) ) $=
    ( wi wn wif wb id notbid imbi1d imbi2 elimh con3i dedt ) BAABCZBDZADZCNBAEZ
    DZPCQBFZROPSQBSGHIAQBANAACAQCQBAJQAAJAGKLM $.

  $( Obsolete version of ~ con3ALT as of 27-Apr-2023.  Proof of ~ con3 from its
     associated inference ~ con3i that illustrates the use of the weak
     deduction theorem ~ dedt .  (Contributed by NM, 27-Jun-2002.)  Revised to
     use the conditional operator.  (Revised by BJ, 30-Sep-2019.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  con3ALTOLD $p |- ( ( ph -> ps ) -> ( -. ps -> -. ph ) ) $=
    ( wi wn wif wb bicom1 notbid imbi1d imbi2d id elimhOLD con3i dedtOLD ) BAAB
    CZBDZADZCOBAEZDZQCRBFZPSQTBRRBGZHIARBAOAACARCTBRAUAJRAFARARAGJAKLMN $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Abbreviated conjunction and disjunction of three wff's
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Extend wff definition to include three-way disjunction ('or'). $)
  w3o $a wff ( ph \/ ps \/ ch ) $.
  $( Extend wff definition to include three-way conjunction ('and'). $)
  w3a $a wff ( ph /\ ps /\ ch ) $.

  $( These abbreviations help eliminate parentheses to aid readability. $)

  $( Define disjunction ('or') of three wff's.  Definition *2.33 of
     [WhiteheadRussell] p. 105.  This abbreviation reduces the number of
     parentheses and emphasizes that the order of bracketing is not important
     by virtue of the associative law ~ orass .  (Contributed by NM,
     8-Apr-1994.) $)
  df-3or $a |- ( ( ph \/ ps \/ ch ) <-> ( ( ph \/ ps ) \/ ch ) ) $.

  $( Define conjunction ('and') of three wff's.  Definition *4.34 of
     [WhiteheadRussell] p. 118.  This abbreviation reduces the number of
     parentheses and emphasizes that the order of bracketing is not important
     by virtue of the associative law ~ anass .  (Contributed by NM,
     8-Apr-1994.) $)
  df-3an $a |- ( ( ph /\ ps /\ ch ) <-> ( ( ph /\ ps ) /\ ch ) ) $.

  $( Associative law for triple disjunction.  (Contributed by NM,
     8-Apr-1994.) $)
  3orass $p |- ( ( ph \/ ps \/ ch ) <-> ( ph \/ ( ps \/ ch ) ) ) $=
    ( w3o wo df-3or orass bitri ) ABCDABECEABCEEABCFABCGH $.

  $( Partial elimination of a triple disjunction by denial of a disjunct.
     (Contributed by Scott Fenton, 26-Mar-2011.) $)
  3orel1 $p |- ( -. ph -> ( ( ph \/ ps \/ ch ) -> ( ps \/ ch ) ) ) $=
    ( w3o wo wn 3orass orel1 syl5bi ) ABCDABCEZEAFJABCGAJHI $.

  $( Rotation law for triple disjunction.  (Contributed by NM, 4-Apr-1995.) $)
  3orrot $p |- ( ( ph \/ ps \/ ch ) <-> ( ps \/ ch \/ ph ) ) $=
    ( wo w3o orcom 3orass df-3or 3bitr4i ) ABCDZDJADABCEBCAEAJFABCGBCAHI $.

  $( Commutation law for triple disjunction.  (Contributed by Mario Carneiro,
     4-Sep-2016.) $)
  3orcoma $p |- ( ( ph \/ ps \/ ch ) <-> ( ps \/ ph \/ ch ) ) $=
    ( wo w3o or12 3orass 3bitr4i ) ABCDDBACDDABCEBACEABCFABCGBACGH $.

  $( Commutation law for triple disjunction.  (Contributed by Scott Fenton,
     20-Apr-2011.)  (Proof shortened by Wolf Lammen, 8-Apr-2022.) $)
  3orcomb $p |- ( ( ph \/ ps \/ ch ) <-> ( ph \/ ch \/ ps ) ) $=
    ( w3o 3orcoma 3orrot bitri ) ABCDBACDACBDABCEBACFG $.

  $( Associative law for triple conjunction.  (Contributed by NM,
     8-Apr-1994.) $)
  3anass $p |- ( ( ph /\ ps /\ ch ) <-> ( ph /\ ( ps /\ ch ) ) ) $=
    ( w3a wa df-3an anass bitri ) ABCDABECEABCEEABCFABCGH $.

  $( Convert triple conjunction to conjunction, then commute.  (Contributed by
     Jonathan Ben-Naim, 3-Jun-2011.)  (Proof shortened by Andrew Salmon,
     14-Jun-2011.)  (Revised to shorten ~ 3ancoma by Wolf Lammen,
     5-Jun-2022.) $)
  3anan12 $p |- ( ( ph /\ ps /\ ch ) <-> ( ps /\ ( ph /\ ch ) ) ) $=
    ( w3a wa 3anass an12 bitri ) ABCDABCEEBACEEABCFABCGH $.

  $( Convert triple conjunction to conjunction, then commute.  (Contributed by
     Jonathan Ben-Naim, 3-Jun-2011.) $)
  3anan32 $p |- ( ( ph /\ ps /\ ch ) <-> ( ( ph /\ ch ) /\ ps ) ) $=
    ( w3a wa df-3an an32 bitri ) ABCDABECEACEBEABCFABCGH $.

  $( Commutation law for triple conjunction.  (Contributed by NM, 21-Apr-1994.)
     (Proof shortened by Wolf Lammen, 5-Jun-2022.) $)
  3ancoma $p |- ( ( ph /\ ps /\ ch ) <-> ( ps /\ ph /\ ch ) ) $=
    ( w3a wa 3anan12 3anass bitr4i ) ABCDBACEEBACDABCFBACGH $.

  $( Commutation law for triple conjunction.  (Contributed by NM, 21-Apr-1994.)
     (Revised to shorten ~ 3anrot by Wolf Lammen, 9-Jun-2022.) $)
  3ancomb $p |- ( ( ph /\ ps /\ ch ) <-> ( ph /\ ch /\ ps ) ) $=
    ( w3a wa df-3an 3anan32 bitr4i ) ABCDABECEACBDABCFACBGH $.

  $( Rotation law for triple conjunction.  (Contributed by NM, 8-Apr-1994.)
     (Proof shortened by Wolf Lammen, 9-Jun-2022.) $)
  3anrot $p |- ( ( ph /\ ps /\ ch ) <-> ( ps /\ ch /\ ph ) ) $=
    ( w3a 3ancoma 3ancomb bitri ) ABCDBACDBCADABCEBACFG $.

  $( Reversal law for triple conjunction.  (Contributed by NM, 21-Apr-1994.) $)
  3anrev $p |- ( ( ph /\ ps /\ ch ) <-> ( ch /\ ps /\ ph ) ) $=
    ( w3a 3ancoma 3anrot bitr4i ) ABCDBACDCBADABCECBAFG $.

  $( Distribution of triple conjunction over conjunction.  (Contributed by
     David A. Wheeler, 4-Nov-2018.) $)
  anandi3 $p |- ( ( ph /\ ps /\ ch ) <-> ( ( ph /\ ps ) /\ ( ph /\ ch ) ) ) $=
    ( w3a wa 3anass anandi bitri ) ABCDABCEEABEACEEABCFABCGH $.

  $( Distribution of triple conjunction over conjunction.  (Contributed by
     David A. Wheeler, 4-Nov-2018.) $)
  anandi3r $p |- ( ( ph /\ ps /\ ch ) <-> ( ( ph /\ ps ) /\ ( ch /\ ps ) ) ) $=
    ( w3a wa 3anan32 anandir bitri ) ABCDACEBEABECBEEABCFACBGH $.

  $( Associative law for four conjunctions with a triple conjunction.
     (Contributed by Alexander van der Vekens, 24-Jun-2018.) $)
  3an4anass $p |- ( ( ( ph /\ ps /\ ch ) /\ th )
                    <-> ( ( ph /\ ps ) /\ ( ch /\ th ) ) ) $=
    ( w3a wa df-3an anbi1i anass bitri ) ABCEZDFABFZCFZDFLCDFFKMDABCGHLCDIJ $.

  $( Negated triple disjunction as triple conjunction.  (Contributed by Scott
     Fenton, 19-Apr-2011.) $)
  3ioran $p |- ( -. ( ph \/ ps \/ ch ) <-> ( -. ph /\ -. ps /\ -. ch ) ) $=
    ( wo wn wa w3o w3a ioran anbi1i df-3or xchnxbir df-3an 3bitr4i ) ABDZEZCEZF
    ZAEZBEZFZQFABCGZESTQHPUAQABIJOCDRUBOCIABCKLSTQMN $.

  $( Negated triple conjunction expressed in terms of triple disjunction.
     (Contributed by Jeff Hankins, 15-Aug-2009.)  (Proof shortened by Andrew
     Salmon, 13-May-2011.)  (Revised by Wolf Lammen, 8-Apr-2022.) $)
  3ianor $p |- ( -. ( ph /\ ps /\ ch ) <-> ( -. ph \/ -. ps \/ -. ch ) ) $=
    ( wa wn wo w3a w3o ianor orbi1i df-3an xchnxbir df-3or 3bitr4i ) ABDZEZCEZF
    ZAEZBEZFZQFABCGZESTQHPUAQABIJOCDRUBOCIABCKLSTQMN $.

  $( Triple conjunction expressed in terms of triple disjunction.  (Contributed
     by Jeff Hankins, 15-Aug-2009.)  (Proof shortened by Wolf Lammen,
     8-Apr-2022.) $)
  3anor $p |- ( ( ph /\ ps /\ ch ) <-> -. ( -. ph \/ -. ps \/ -. ch ) ) $=
    ( wn w3o w3a 3ianor con1bii bicomi ) ADBDCDEZDABCFZKJABCGHI $.

  $( Triple disjunction in terms of triple conjunction.  (Contributed by NM,
     8-Oct-2012.) $)
  3oran $p |- ( ( ph \/ ps \/ ch ) <-> -. ( -. ph /\ -. ps /\ -. ch ) ) $=
    ( wn w3a w3o 3ioran con1bii bicomi ) ADBDCDEZDABCFZKJABCGHI $.

  ${
    3impa.1 $e |- ( ( ( ph /\ ps ) /\ ch ) -> th ) $.
    $( Importation from double to triple conjunction.  (Contributed by NM,
       20-Aug-1995.)  (Revised to shorten ~ 3imp by Wolf Lammen,
       20-Jun-2022.) $)
    3impa $p |- ( ( ph /\ ps /\ ch ) -> th ) $=
      ( w3a wa df-3an sylbi ) ABCFABGCGDABCHEI $.
  $}

  ${
    3imp.1 $e |- ( ph -> ( ps -> ( ch -> th ) ) ) $.
    $( Importation inference.  (Contributed by NM, 8-Apr-1994.)  (Proof
       shortened by Wolf Lammen, 20-Jun-2022.) $)
    3imp $p |- ( ( ph /\ ps /\ ch ) -> th ) $=
      ( imp31 3impa ) ABCDABCDEFG $.

    $( The importation inference ~ 3imp with commutation of the first and third
       conjuncts of the assertion relative to the hypothesis.  (Contributed by
       Alan Sare, 11-Sep-2016.) $)
    3imp31 $p |- ( ( ch /\ ps /\ ph ) -> th ) $=
      ( com13 3imp ) CBADABCDEFG $.

    $( Importation inference.  (Contributed by Alan Sare, 17-Oct-2017.) $)
    3imp231 $p |- ( ( ps /\ ch /\ ph ) -> th ) $=
      ( com3l 3imp ) BCADABCDEFG $.

    $( The importation inference ~ 3imp with commutation of the first and
       second conjuncts of the assertion relative to the hypothesis.
       (Contributed by Alan Sare, 11-Sep-2016.)  (Revised to shorten ~ 3com12
       by Wolf Lammen, 23-Jun-2022.) $)
    3imp21 $p |- ( ( ps /\ ph /\ ch ) -> th ) $=
      ( com13 3imp231 ) CBADABCDEFG $.
  $}

  ${
    3impb.1 $e |- ( ( ph /\ ( ps /\ ch ) ) -> th ) $.
    $( Importation from double to triple conjunction.  (Contributed by NM,
       20-Aug-1995.) $)
    3impb $p |- ( ( ph /\ ps /\ ch ) -> th ) $=
      ( exp32 3imp ) ABCDABCDEFG $.
  $}

  ${
    3impib.1 $e |- ( ph -> ( ( ps /\ ch ) -> th ) ) $.
    $( Importation to triple conjunction.  (Contributed by NM, 13-Jun-2006.) $)
    3impib $p |- ( ( ph /\ ps /\ ch ) -> th ) $=
      ( expd 3imp ) ABCDABCDEFG $.
  $}

  ${
    3impia.1 $e |- ( ( ph /\ ps ) -> ( ch -> th ) ) $.
    $( Importation to triple conjunction.  (Contributed by NM, 13-Jun-2006.)
       (Proof shortened by Wolf Lammen, 21-Jun-2022.) $)
    3impia $p |- ( ( ph /\ ps /\ ch ) -> th ) $=
      ( expimpd 3impib ) ABCDABCDEFG $.
  $}

  ${
    3exp.1 $e |- ( ( ph /\ ps /\ ch ) -> th ) $.
    $( Exportation from triple to double conjunction.  (Contributed by NM,
       20-Aug-1995.)  (Revised to shorten ~ 3exp and ~ pm3.2an3 by Wolf Lammen,
       22-Jun-2022.) $)
    3expa $p |- ( ( ( ph /\ ps ) /\ ch ) -> th ) $=
      ( wa w3a df-3an sylbir ) ABFCFABCGDABCHEI $.

    $( Exportation inference.  (Contributed by NM, 30-May-1994.)  (Proof
       shortened by Wolf Lammen, 22-Jun-2022.) $)
    3exp $p |- ( ph -> ( ps -> ( ch -> th ) ) ) $=
      ( 3expa exp31 ) ABCDABCDEFG $.

    $( Exportation from triple to double conjunction.  (Contributed by NM,
       20-Aug-1995.) $)
    3expb $p |- ( ( ph /\ ( ps /\ ch ) ) -> th ) $=
      ( 3exp imp32 ) ABCDABCDEFG $.

    $( Exportation from triple conjunction.  (Contributed by NM, 19-May-2007.)
       (Proof shortened by Wolf Lammen, 22-Jun-2022.) $)
    3expia $p |- ( ( ph /\ ps ) -> ( ch -> th ) ) $=
      ( 3expb expr ) ABCDABCDEFG $.

    $( Exportation from triple conjunction.  (Contributed by NM,
       19-May-2007.) $)
    3expib $p |- ( ph -> ( ( ps /\ ch ) -> th ) ) $=
      ( 3exp impd ) ABCDABCDEFG $.

    $( Commutation in antecedent.  Swap 1st and 2nd.  (Contributed by NM,
       28-Jan-1996.)  (Proof shortened by Andrew Salmon, 13-May-2011.)  (Proof
       shortened by Wolf Lammen, 22-Jun-2022.) $)
    3com12 $p |- ( ( ps /\ ph /\ ch ) -> th ) $=
      ( 3exp 3imp21 ) ABCDABCDEFG $.

    $( Commutation in antecedent.  Swap 1st and 3rd.  (Contributed by NM,
       28-Jan-1996.)  (Proof shortened by Wolf Lammen, 22-Jun-2022.) $)
    3com13 $p |- ( ( ch /\ ps /\ ph ) -> th ) $=
      ( 3exp 3imp31 ) ABCDABCDEFG $.

    $( Commutation in antecedent.  Rotate right.  (Contributed by NM,
       28-Jan-1996.)  (Revised by Wolf Lammen, 9-Apr-2022.) $)
    3comr $p |- ( ( ch /\ ph /\ ps ) -> th ) $=
      ( 3com12 3com13 ) BACDABCDEFG $.

    $( Commutation in antecedent.  Swap 2nd and 3rd.  (Contributed by NM,
       28-Jan-1996.)  (Proof shortened by Wolf Lammen, 9-Apr-2022.) $)
    3com23 $p |- ( ( ph /\ ch /\ ps ) -> th ) $=
      ( 3comr 3com12 ) CABDABCDEFG $.

    $( Commutation in antecedent.  Rotate left.  (Contributed by NM,
       28-Jan-1996.) $)
    3coml $p |- ( ( ps /\ ch /\ ph ) -> th ) $=
      ( 3com23 3com13 ) ACBDABCDEFG $.
  $}

  ${
    3jca.1 $e |- ( ph -> ps ) $.
    3jca.2 $e |- ( ph -> ch ) $.
    3jca.3 $e |- ( ph -> th ) $.
    $( Join consequents with conjunction.  (Contributed by NM, 9-Apr-1994.) $)
    3jca $p |- ( ph -> ( ps /\ ch /\ th ) ) $=
      ( wa w3a jca31 df-3an sylibr ) ABCHDHBCDIABCDEFGJBCDKL $.
  $}

  ${
    3jcad.1 $e |- ( ph -> ( ps -> ch ) ) $.
    3jcad.2 $e |- ( ph -> ( ps -> th ) ) $.
    3jcad.3 $e |- ( ph -> ( ps -> ta ) ) $.
    $( Deduction conjoining the consequents of three implications.
       (Contributed by NM, 25-Sep-2005.) $)
    3jcad $p |- ( ph -> ( ps -> ( ch /\ th /\ ta ) ) ) $=
      ( w3a wa imp 3jca ex ) ABCDEIABJCDEABCFKABDGKABEHKLM $.
  $}

  ${
    3adant.1 $e |- ( ( ph /\ ps ) -> ch ) $.
    $( Deduction adding a conjunct to antecedent.  (Contributed by NM,
       16-Jul-1995.)  (Proof shortened by Wolf Lammen, 21-Jun-2022.) $)
    3adant1 $p |- ( ( th /\ ph /\ ps ) -> ch ) $=
      ( adantll 3impa ) DABCABCDEFG $.

    $( Deduction adding a conjunct to antecedent.  (Contributed by NM,
       16-Jul-1995.) $)
    3adant2 $p |- ( ( ph /\ th /\ ps ) -> ch ) $=
      ( adantlr 3impa ) ADBCABCDEFG $.

    $( Deduction adding a conjunct to antecedent.  (Contributed by NM,
       16-Jul-1995.)  (Proof shortened by Wolf Lammen, 21-Jun-2022.) $)
    3adant3 $p |- ( ( ph /\ ps /\ th ) -> ch ) $=
      ( adantrr 3impb ) ABDCABCDEFG $.
  $}

  ${
    3ad2ant.1 $e |- ( ph -> ch ) $.
    $( Deduction adding conjuncts to an antecedent.  (Contributed by NM,
       21-Apr-2005.) $)
    3ad2ant1 $p |- ( ( ph /\ ps /\ th ) -> ch ) $=
      ( adantr 3adant2 ) ADCBACDEFG $.

    $( Deduction adding conjuncts to an antecedent.  (Contributed by NM,
       21-Apr-2005.) $)
    3ad2ant2 $p |- ( ( ps /\ ph /\ th ) -> ch ) $=
      ( adantr 3adant1 ) ADCBACDEFG $.

    $( Deduction adding conjuncts to an antecedent.  (Contributed by NM,
       21-Apr-2005.) $)
    3ad2ant3 $p |- ( ( ps /\ th /\ ph ) -> ch ) $=
      ( adantl 3adant1 ) DACBACDEFG $.
  $}

  $( Simplification of triple conjunction.  (Contributed by NM, 21-Apr-1994.)
     (Proof shortened by Wolf Lammen, 22-Jun-2022.) $)
  simp1 $p |- ( ( ph /\ ps /\ ch ) -> ph ) $=
    ( id 3ad2ant1 ) ABACADE $.

  $( Simplification of triple conjunction.  (Contributed by NM, 21-Apr-1994.)
     (Proof shortened by Wolf Lammen, 22-Jun-2022.) $)
  simp2 $p |- ( ( ph /\ ps /\ ch ) -> ps ) $=
    ( id 3ad2ant2 ) BABCBDE $.

  $( Simplification of triple conjunction.  (Contributed by NM, 21-Apr-1994.)
     (Proof shortened by Wolf Lammen, 22-Jun-2022.) $)
  simp3 $p |- ( ( ph /\ ps /\ ch ) -> ch ) $=
    ( id 3ad2ant3 ) CACBCDE $.

  ${
    3simp1i.1 $e |- ( ph /\ ps /\ ch ) $.
    $( Infer a conjunct from a triple conjunction.  (Contributed by NM,
       19-Apr-2005.) $)
    simp1i $p |- ph $=
      ( w3a simp1 ax-mp ) ABCEADABCFG $.

    $( Infer a conjunct from a triple conjunction.  (Contributed by NM,
       19-Apr-2005.) $)
    simp2i $p |- ps $=
      ( w3a simp2 ax-mp ) ABCEBDABCFG $.

    $( Infer a conjunct from a triple conjunction.  (Contributed by NM,
       19-Apr-2005.) $)
    simp3i $p |- ch $=
      ( w3a simp3 ax-mp ) ABCECDABCFG $.
  $}

  ${
    3simp1d.1 $e |- ( ph -> ( ps /\ ch /\ th ) ) $.
    $( Deduce a conjunct from a triple conjunction.  (Contributed by NM,
       4-Sep-2005.) $)
    simp1d $p |- ( ph -> ps ) $=
      ( w3a simp1 syl ) ABCDFBEBCDGH $.

    $( Deduce a conjunct from a triple conjunction.  (Contributed by NM,
       4-Sep-2005.) $)
    simp2d $p |- ( ph -> ch ) $=
      ( w3a simp2 syl ) ABCDFCEBCDGH $.

    $( Deduce a conjunct from a triple conjunction.  (Contributed by NM,
       4-Sep-2005.) $)
    simp3d $p |- ( ph -> th ) $=
      ( w3a simp3 syl ) ABCDFDEBCDGH $.
  $}

  ${
    3simp1bi.1 $e |- ( ph <-> ( ps /\ ch /\ th ) ) $.
    $( Deduce a conjunct from a triple conjunction.  (Contributed by Jonathan
       Ben-Naim, 3-Jun-2011.) $)
    simp1bi $p |- ( ph -> ps ) $=
      ( w3a biimpi simp1d ) ABCDABCDFEGH $.

    $( Deduce a conjunct from a triple conjunction.  (Contributed by Jonathan
       Ben-Naim, 3-Jun-2011.) $)
    simp2bi $p |- ( ph -> ch ) $=
      ( w3a biimpi simp2d ) ABCDABCDFEGH $.

    $( Deduce a conjunct from a triple conjunction.  (Contributed by Jonathan
       Ben-Naim, 3-Jun-2011.) $)
    simp3bi $p |- ( ph -> th ) $=
      ( w3a biimpi simp3d ) ABCDABCDFEGH $.
  $}

  $( Simplification of triple conjunction.  (Contributed by NM, 21-Apr-1994.)
     (Proof shortened by Wolf Lammen, 21-Jun-2022.) $)
  3simpa $p |- ( ( ph /\ ps /\ ch ) -> ( ph /\ ps ) ) $=
    ( wa id 3adant3 ) ABABDZCGEF $.

  $( Simplification of triple conjunction.  (Contributed by NM, 21-Apr-1994.)
     (Proof shortened by Wolf Lammen, 21-Jun-2022.) $)
  3simpb $p |- ( ( ph /\ ps /\ ch ) -> ( ph /\ ch ) ) $=
    ( wa id 3adant2 ) ACACDZBGEF $.

  $( Simplification of triple conjunction.  (Contributed by NM, 21-Apr-1994.)
     (Proof shortened by Andrew Salmon, 13-May-2011.)  (Proof shortened by Wolf
     Lammen, 21-Jun-2022.) $)
  3simpc $p |- ( ( ph /\ ps /\ ch ) -> ( ps /\ ch ) ) $=
    ( wa id 3adant1 ) BCBCDZAGEF $.

  ${
    3anim123i.1 $e |- ( ph -> ps ) $.
    3anim123i.2 $e |- ( ch -> th ) $.
    3anim123i.3 $e |- ( ta -> et ) $.
    $( Join antecedents and consequents with conjunction.  (Contributed by NM,
       8-Apr-1994.) $)
    3anim123i $p |- ( ( ph /\ ch /\ ta ) -> ( ps /\ th /\ et ) ) $=
      ( w3a 3ad2ant1 3ad2ant2 3ad2ant3 3jca ) ACEJBDFACBEGKCADEHLEAFCIMN $.
  $}

  ${
    3animi.1 $e |- ( ph -> ps ) $.
    $( Add two conjuncts to antecedent and consequent.  (Contributed by Jeff
       Hankins, 16-Aug-2009.) $)
    3anim1i $p |- ( ( ph /\ ch /\ th ) -> ( ps /\ ch /\ th ) ) $=
      ( id 3anim123i ) ABCCDDECFDFG $.

    $( Add two conjuncts to antecedent and consequent.  (Contributed by AV,
       21-Nov-2019.) $)
    3anim2i $p |- ( ( ch /\ ph /\ th ) -> ( ch /\ ps /\ th ) ) $=
      ( id 3anim123i ) CCABDDCFEDFG $.

    $( Add two conjuncts to antecedent and consequent.  (Contributed by Jeff
       Hankins, 19-Aug-2009.) $)
    3anim3i $p |- ( ( ch /\ th /\ ph ) -> ( ch /\ th /\ ps ) ) $=
      ( id 3anim123i ) CCDDABCFDFEG $.
  $}

  ${
    bi3.1 $e |- ( ph <-> ps ) $.
    bi3.2 $e |- ( ch <-> th ) $.
    bi3.3 $e |- ( ta <-> et ) $.
    $( Join 3 biconditionals with conjunction.  (Contributed by NM,
       21-Apr-1994.) $)
    3anbi123i $p |- ( ( ph /\ ch /\ ta ) <-> ( ps /\ th /\ et ) ) $=
      ( wa w3a anbi12i df-3an 3bitr4i ) ACJZEJBDJZFJACEKBDFKOPEFABCDGHLILACEMBD
      FMN $.

    $( Join 3 biconditionals with disjunction.  (Contributed by NM,
       17-May-1994.) $)
    3orbi123i $p |- ( ( ph \/ ch \/ ta ) <-> ( ps \/ th \/ et ) ) $=
      ( wo w3o orbi12i df-3or 3bitr4i ) ACJZEJBDJZFJACEKBDFKOPEFABCDGHLILACEMBD
      FMN $.
  $}

  ${
    3anbi1i.1 $e |- ( ph <-> ps ) $.
    $( Inference adding two conjuncts to each side of a biconditional.
       (Contributed by NM, 8-Sep-2006.) $)
    3anbi1i $p |- ( ( ph /\ ch /\ th ) <-> ( ps /\ ch /\ th ) ) $=
      ( biid 3anbi123i ) ABCCDDECFDFG $.

    $( Inference adding two conjuncts to each side of a biconditional.
       (Contributed by NM, 8-Sep-2006.) $)
    3anbi2i $p |- ( ( ch /\ ph /\ th ) <-> ( ch /\ ps /\ th ) ) $=
      ( biid 3anbi123i ) CCABDDCFEDFG $.

    $( Inference adding two conjuncts to each side of a biconditional.
       (Contributed by NM, 8-Sep-2006.) $)
    3anbi3i $p |- ( ( ch /\ th /\ ph ) <-> ( ch /\ th /\ ps ) ) $=
      ( biid 3anbi123i ) CCDDABCFDFEG $.
  $}

  ${
    syl3an.1 $e |- ( ph -> ps ) $.
    syl3an.2 $e |- ( ch -> th ) $.
    syl3an.3 $e |- ( ta -> et ) $.
    syl3an.4 $e |- ( ( ps /\ th /\ et ) -> ze ) $.
    $( A triple syllogism inference.  (Contributed by NM, 13-May-2004.) $)
    syl3an $p |- ( ( ph /\ ch /\ ta ) -> ze ) $=
      ( w3a 3anim123i syl ) ACELBDFLGABCDEFHIJMKN $.
  $}

  ${
    syl3anb.1 $e |- ( ph <-> ps ) $.
    syl3anb.2 $e |- ( ch <-> th ) $.
    syl3anb.3 $e |- ( ta <-> et ) $.
    syl3anb.4 $e |- ( ( ps /\ th /\ et ) -> ze ) $.
    $( A triple syllogism inference.  (Contributed by NM, 15-Oct-2005.) $)
    syl3anb $p |- ( ( ph /\ ch /\ ta ) -> ze ) $=
      ( w3a 3anbi123i sylbi ) ACELBDFLGABCDEFHIJMKN $.
  $}

  ${
    syl3anbr.1 $e |- ( ps <-> ph ) $.
    syl3anbr.2 $e |- ( th <-> ch ) $.
    syl3anbr.3 $e |- ( et <-> ta ) $.
    syl3anbr.4 $e |- ( ( ps /\ th /\ et ) -> ze ) $.
    $( A triple syllogism inference.  (Contributed by NM, 29-Dec-2011.) $)
    syl3anbr $p |- ( ( ph /\ ch /\ ta ) -> ze ) $=
      ( bicomi syl3anb ) ABCDEFGBAHLDCILFEJLKM $.
  $}

  ${
    syl3an1.1 $e |- ( ph -> ps ) $.
    syl3an1.2 $e |- ( ( ps /\ ch /\ th ) -> ta ) $.
    $( A syllogism inference.  (Contributed by NM, 22-Aug-1995.) $)
    syl3an1 $p |- ( ( ph /\ ch /\ th ) -> ta ) $=
      ( w3a 3anim1i syl ) ACDHBCDHEABCDFIGJ $.
  $}

  ${
    syl3an2.1 $e |- ( ph -> ch ) $.
    syl3an2.2 $e |- ( ( ps /\ ch /\ th ) -> ta ) $.
    $( A syllogism inference.  (Contributed by NM, 22-Aug-1995.)  (Proof
       shortened by Wolf Lammen, 26-Jun-2022.) $)
    syl3an2 $p |- ( ( ps /\ ph /\ th ) -> ta ) $=
      ( w3a 3anim2i syl ) BADHBCDHEACBDFIGJ $.
  $}

  ${
    syl3an3.1 $e |- ( ph -> th ) $.
    syl3an3.2 $e |- ( ( ps /\ ch /\ th ) -> ta ) $.
    $( A syllogism inference.  (Contributed by NM, 22-Aug-1995.)  (Proof
       shortened by Wolf Lammen, 26-Jun-2022.) $)
    syl3an3 $p |- ( ( ps /\ ch /\ ph ) -> ta ) $=
      ( w3a 3anim3i syl ) BCAHBCDHEADBCFIGJ $.
  $}

  ${
    3adantl.1 $e |- ( ( ( ph /\ ps ) /\ ch ) -> th ) $.
    $( Deduction adding a conjunct to antecedent.  (Contributed by NM,
       24-Feb-2005.) $)
    3adantl1 $p |- ( ( ( ta /\ ph /\ ps ) /\ ch ) -> th ) $=
      ( w3a wa 3simpc sylan ) EABGABHCDEABIFJ $.

    $( Deduction adding a conjunct to antecedent.  (Contributed by NM,
       24-Feb-2005.) $)
    3adantl2 $p |- ( ( ( ph /\ ta /\ ps ) /\ ch ) -> th ) $=
      ( w3a wa 3simpb sylan ) AEBGABHCDAEBIFJ $.

    $( Deduction adding a conjunct to antecedent.  (Contributed by NM,
       24-Feb-2005.) $)
    3adantl3 $p |- ( ( ( ph /\ ps /\ ta ) /\ ch ) -> th ) $=
      ( w3a wa 3simpa sylan ) ABEGABHCDABEIFJ $.
  $}

  ${
    3adantr.1 $e |- ( ( ph /\ ( ps /\ ch ) ) -> th ) $.
    $( Deduction adding a conjunct to antecedent.  (Contributed by NM,
       27-Apr-2005.) $)
    3adantr1 $p |- ( ( ph /\ ( ta /\ ps /\ ch ) ) -> th ) $=
      ( w3a wa 3simpc sylan2 ) EBCGABCHDEBCIFJ $.

    $( Deduction adding a conjunct to antecedent.  (Contributed by NM,
       27-Apr-2005.) $)
    3adantr2 $p |- ( ( ph /\ ( ps /\ ta /\ ch ) ) -> th ) $=
      ( w3a wa 3simpb sylan2 ) BECGABCHDBECIFJ $.

    $( Deduction adding a conjunct to antecedent.  (Contributed by NM,
       27-Apr-2005.) $)
    3adantr3 $p |- ( ( ph /\ ( ps /\ ch /\ ta ) ) -> th ) $=
      ( w3a wa 3simpa sylan2 ) BCEGABCHDBCEIFJ $.
  $}

  ${
    ad4ant3.1 $e |- ( ( ph /\ ps /\ ch ) -> th ) $.
    $( Deduction adding conjuncts to antecedent.  (Contributed by Alan Sare,
       17-Oct-2017.)  (Proof shortened by Wolf Lammen, 14-Apr-2022.) $)
    ad4ant123 $p |- ( ( ( ( ph /\ ps ) /\ ch ) /\ ta ) -> th ) $=
      ( wa 3expa adantr ) ABGCGDEABCDFHI $.

    $( Deduction adding conjuncts to antecedent.  (Contributed by Alan Sare,
       17-Oct-2017.)  (Proof shortened by Wolf Lammen, 14-Apr-2022.) $)
    ad4ant124 $p |- ( ( ( ( ph /\ ps ) /\ ta ) /\ ch ) -> th ) $=
      ( wa 3expa adantlr ) ABGCDEABCDFHI $.

    $( Deduction adding conjuncts to antecedent.  (Contributed by Alan Sare,
       17-Oct-2017.)  (Proof shortened by Wolf Lammen, 14-Apr-2022.) $)
    ad4ant134 $p |- ( ( ( ( ph /\ ta ) /\ ps ) /\ ch ) -> th ) $=
      ( 3expa adantllr ) ABCDEABCDFGH $.

    $( Deduction adding conjuncts to antecedent.  (Contributed by Alan Sare,
       17-Oct-2017.)  (Proof shortened by Wolf Lammen, 14-Apr-2022.) $)
    ad4ant234 $p |- ( ( ( ( ta /\ ph ) /\ ps ) /\ ch ) -> th ) $=
      ( 3expa adantlll ) ABCDEABCDFGH $.

    $( Deduction adding a conjunct to antecedent.  (Contributed by NM,
       8-Jan-2006.)  (Proof shortened by Wolf Lammen, 23-Jun-2022.) $)
    3adant1l $p |- ( ( ( ta /\ ph ) /\ ps /\ ch ) -> th ) $=
      ( wa simpr syl3an1 ) EAGABCDEAHFI $.

    $( Deduction adding a conjunct to antecedent.  (Contributed by NM,
       8-Jan-2006.)  (Proof shortened by Wolf Lammen, 23-Jun-2022.) $)
    3adant1r $p |- ( ( ( ph /\ ta ) /\ ps /\ ch ) -> th ) $=
      ( wa simpl syl3an1 ) AEGABCDAEHFI $.

    $( Deduction adding a conjunct to antecedent.  (Contributed by NM,
       8-Jan-2006.)  (Proof shortened by Wolf Lammen, 25-Jun-2022.) $)
    3adant2l $p |- ( ( ph /\ ( ta /\ ps ) /\ ch ) -> th ) $=
      ( wa simpr syl3an2 ) EBGABCDEBHFI $.

    $( Deduction adding a conjunct to antecedent.  (Contributed by NM,
       8-Jan-2006.)  (Proof shortened by Wolf Lammen, 25-Jun-2022.) $)
    3adant2r $p |- ( ( ph /\ ( ps /\ ta ) /\ ch ) -> th ) $=
      ( wa simpl syl3an2 ) BEGABCDBEHFI $.

    $( Deduction adding a conjunct to antecedent.  (Contributed by NM,
       8-Jan-2006.)  (Proof shortened by Wolf Lammen, 25-Jun-2022.) $)
    3adant3l $p |- ( ( ph /\ ps /\ ( ta /\ ch ) ) -> th ) $=
      ( wa simpr syl3an3 ) ECGABCDECHFI $.

    $( Deduction adding a conjunct to antecedent.  (Contributed by NM,
       8-Jan-2006.)  (Proof shortened by Wolf Lammen, 25-Jun-2022.) $)
    3adant3r $p |- ( ( ph /\ ps /\ ( ch /\ ta ) ) -> th ) $=
      ( wa simpl syl3an3 ) CEGABCDCEHFI $.

    $( Deduction adding a conjunct to antecedent.  (Contributed by NM,
       16-Feb-2008.) $)
    3adant3r1 $p |- ( ( ph /\ ( ta /\ ps /\ ch ) ) -> th ) $=
      ( 3expb 3adantr1 ) ABCDEABCDFGH $.

    $( Deduction adding a conjunct to antecedent.  (Contributed by NM,
       17-Feb-2008.) $)
    3adant3r2 $p |- ( ( ph /\ ( ps /\ ta /\ ch ) ) -> th ) $=
      ( 3expb 3adantr2 ) ABCDEABCDFGH $.

    $( Deduction adding a conjunct to antecedent.  (Contributed by NM,
       18-Feb-2008.) $)
    3adant3r3 $p |- ( ( ph /\ ( ps /\ ch /\ ta ) ) -> th ) $=
      ( 3expb 3adantr3 ) ABCDEABCDFGH $.
  $}

  ${
    3ad2antl.1 $e |- ( ( ph /\ ch ) -> th ) $.
    $( Deduction adding conjuncts to antecedent.  (Contributed by NM,
       4-Aug-2007.) $)
    3ad2antl1 $p |- ( ( ( ph /\ ps /\ ta ) /\ ch ) -> th ) $=
      ( adantlr 3adantl2 ) AECDBACDEFGH $.

    $( Deduction adding conjuncts to antecedent.  (Contributed by NM,
       4-Aug-2007.) $)
    3ad2antl2 $p |- ( ( ( ps /\ ph /\ ta ) /\ ch ) -> th ) $=
      ( adantlr 3adantl1 ) AECDBACDEFGH $.

    $( Deduction adding conjuncts to antecedent.  (Contributed by NM,
       4-Aug-2007.) $)
    3ad2antl3 $p |- ( ( ( ps /\ ta /\ ph ) /\ ch ) -> th ) $=
      ( adantll 3adantl1 ) EACDBACDEFGH $.

    $( Deduction adding conjuncts to antecedent.  (Contributed by NM,
       25-Dec-2007.) $)
    3ad2antr1 $p |- ( ( ph /\ ( ch /\ ps /\ ta ) ) -> th ) $=
      ( adantrr 3adantr3 ) ACBDEACDBFGH $.

    $( Deduction adding conjuncts to antecedent.  (Contributed by NM,
       27-Dec-2007.) $)
    3ad2antr2 $p |- ( ( ph /\ ( ps /\ ch /\ ta ) ) -> th ) $=
      ( adantrl 3adantr3 ) ABCDEACDBFGH $.

    $( Deduction adding conjuncts to antecedent.  (Contributed by NM,
       30-Dec-2007.) $)
    3ad2antr3 $p |- ( ( ph /\ ( ps /\ ta /\ ch ) ) -> th ) $=
      ( adantrl 3adantr1 ) AECDBACDEFGH $.
  $}

  $( Simplification of conjunction.  (Contributed by Jeff Hankins,
     17-Nov-2009.)  (Proof shortened by Wolf Lammen, 23-Jun-2022.) $)
  simpl1 $p |- ( ( ( ph /\ ps /\ ch ) /\ th ) -> ph ) $=
    ( simpl 3ad2antl1 ) ABDACADEF $.

  $( Simplification of conjunction.  (Contributed by Jeff Hankins,
     17-Nov-2009.)  (Proof shortened by Wolf Lammen, 23-Jun-2022.) $)
  simpl2 $p |- ( ( ( ph /\ ps /\ ch ) /\ th ) -> ps ) $=
    ( simpl 3ad2antl2 ) BADBCBDEF $.

  $( Simplification of conjunction.  (Contributed by Jeff Hankins,
     17-Nov-2009.)  (Proof shortened by Wolf Lammen, 23-Jun-2022.) $)
  simpl3 $p |- ( ( ( ph /\ ps /\ ch ) /\ th ) -> ch ) $=
    ( simpl 3ad2antl3 ) CADCBCDEF $.

  $( Simplification of conjunction.  (Contributed by Jeff Hankins,
     17-Nov-2009.)  (Proof shortened by Wolf Lammen, 23-Jun-2022.) $)
  simpr1 $p |- ( ( ph /\ ( ps /\ ch /\ th ) ) -> ps ) $=
    ( simpr 3ad2antr1 ) ACBBDABEF $.

  $( Simplification of conjunction.  (Contributed by Jeff Hankins,
     17-Nov-2009.)  (Proof shortened by Wolf Lammen, 23-Jun-2022.) $)
  simpr2 $p |- ( ( ph /\ ( ps /\ ch /\ th ) ) -> ch ) $=
    ( simpr 3ad2antr2 ) ABCCDACEF $.

  $( Simplification of conjunction.  (Contributed by Jeff Hankins,
     17-Nov-2009.)  (Proof shortened by Wolf Lammen, 23-Jun-2022.) $)
  simpr3 $p |- ( ( ph /\ ( ps /\ ch /\ th ) ) -> th ) $=
    ( simpr 3ad2antr3 ) ABDDCADEF $.

  $( Simplification of triple conjunction.  (Contributed by NM, 9-Nov-2011.) $)
  simp1l $p |- ( ( ( ph /\ ps ) /\ ch /\ th ) -> ph ) $=
    ( wa simpl 3ad2ant1 ) ABECADABFG $.

  $( Simplification of triple conjunction.  (Contributed by NM, 9-Nov-2011.) $)
  simp1r $p |- ( ( ( ph /\ ps ) /\ ch /\ th ) -> ps ) $=
    ( wa simpr 3ad2ant1 ) ABECBDABFG $.

  $( Simplification of triple conjunction.  (Contributed by NM, 9-Nov-2011.) $)
  simp2l $p |- ( ( ph /\ ( ps /\ ch ) /\ th ) -> ps ) $=
    ( wa simpl 3ad2ant2 ) BCEABDBCFG $.

  $( Simplification of triple conjunction.  (Contributed by NM, 9-Nov-2011.) $)
  simp2r $p |- ( ( ph /\ ( ps /\ ch ) /\ th ) -> ch ) $=
    ( wa simpr 3ad2ant2 ) BCEACDBCFG $.

  $( Simplification of triple conjunction.  (Contributed by NM, 9-Nov-2011.) $)
  simp3l $p |- ( ( ph /\ ps /\ ( ch /\ th ) ) -> ch ) $=
    ( wa simpl 3ad2ant3 ) CDEACBCDFG $.

  $( Simplification of triple conjunction.  (Contributed by NM, 9-Nov-2011.) $)
  simp3r $p |- ( ( ph /\ ps /\ ( ch /\ th ) ) -> th ) $=
    ( wa simpr 3ad2ant3 ) CDEADBCDFG $.

  $( Simplification of doubly triple conjunction.  (Contributed by NM,
     17-Nov-2011.) $)
  simp11 $p |- ( ( ( ph /\ ps /\ ch ) /\ th /\ ta ) -> ph ) $=
    ( w3a simp1 3ad2ant1 ) ABCFDAEABCGH $.

  $( Simplification of doubly triple conjunction.  (Contributed by NM,
     17-Nov-2011.) $)
  simp12 $p |- ( ( ( ph /\ ps /\ ch ) /\ th /\ ta ) -> ps ) $=
    ( w3a simp2 3ad2ant1 ) ABCFDBEABCGH $.

  $( Simplification of doubly triple conjunction.  (Contributed by NM,
     17-Nov-2011.) $)
  simp13 $p |- ( ( ( ph /\ ps /\ ch ) /\ th /\ ta ) -> ch ) $=
    ( w3a simp3 3ad2ant1 ) ABCFDCEABCGH $.

  $( Simplification of doubly triple conjunction.  (Contributed by NM,
     17-Nov-2011.) $)
  simp21 $p |- ( ( ph /\ ( ps /\ ch /\ th ) /\ ta ) -> ps ) $=
    ( w3a simp1 3ad2ant2 ) BCDFABEBCDGH $.

  $( Simplification of doubly triple conjunction.  (Contributed by NM,
     17-Nov-2011.) $)
  simp22 $p |- ( ( ph /\ ( ps /\ ch /\ th ) /\ ta ) -> ch ) $=
    ( w3a simp2 3ad2ant2 ) BCDFACEBCDGH $.

  $( Simplification of doubly triple conjunction.  (Contributed by NM,
     17-Nov-2011.) $)
  simp23 $p |- ( ( ph /\ ( ps /\ ch /\ th ) /\ ta ) -> th ) $=
    ( w3a simp3 3ad2ant2 ) BCDFADEBCDGH $.

  $( Simplification of doubly triple conjunction.  (Contributed by NM,
     17-Nov-2011.) $)
  simp31 $p |- ( ( ph /\ ps /\ ( ch /\ th /\ ta ) ) -> ch ) $=
    ( w3a simp1 3ad2ant3 ) CDEFACBCDEGH $.

  $( Simplification of doubly triple conjunction.  (Contributed by NM,
     17-Nov-2011.) $)
  simp32 $p |- ( ( ph /\ ps /\ ( ch /\ th /\ ta ) ) -> th ) $=
    ( w3a simp2 3ad2ant3 ) CDEFADBCDEGH $.

  $( Simplification of doubly triple conjunction.  (Contributed by NM,
     17-Nov-2011.) $)
  simp33 $p |- ( ( ph /\ ps /\ ( ch /\ th /\ ta ) ) -> ta ) $=
    ( w3a simp3 3ad2ant3 ) CDEFAEBCDEGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 23-Jun-2022.) $)
  simpll1 $p |- ( ( ( ( ph /\ ps /\ ch ) /\ th ) /\ ta ) -> ph ) $=
    ( w3a simp1 ad2antrr ) ABCFADEABCGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 23-Jun-2022.) $)
  simpll2 $p |- ( ( ( ( ph /\ ps /\ ch ) /\ th ) /\ ta ) -> ps ) $=
    ( w3a simp2 ad2antrr ) ABCFBDEABCGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 23-Jun-2022.) $)
  simpll3 $p |- ( ( ( ( ph /\ ps /\ ch ) /\ th ) /\ ta ) -> ch ) $=
    ( w3a simp3 ad2antrr ) ABCFCDEABCGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 23-Jun-2022.) $)
  simplr1 $p |- ( ( ( th /\ ( ph /\ ps /\ ch ) ) /\ ta ) -> ph ) $=
    ( w3a simp1 ad2antlr ) ABCFADEABCGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 23-Jun-2022.) $)
  simplr2 $p |- ( ( ( th /\ ( ph /\ ps /\ ch ) ) /\ ta ) -> ps ) $=
    ( w3a simp2 ad2antlr ) ABCFBDEABCGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 23-Jun-2022.) $)
  simplr3 $p |- ( ( ( th /\ ( ph /\ ps /\ ch ) ) /\ ta ) -> ch ) $=
    ( w3a simp3 ad2antlr ) ABCFCDEABCGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 23-Jun-2022.) $)
  simprl1 $p |- ( ( ta /\ ( ( ph /\ ps /\ ch ) /\ th ) ) -> ph ) $=
    ( w3a simp1 ad2antrl ) ABCFAEDABCGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 23-Jun-2022.) $)
  simprl2 $p |- ( ( ta /\ ( ( ph /\ ps /\ ch ) /\ th ) ) -> ps ) $=
    ( w3a simp2 ad2antrl ) ABCFBEDABCGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 23-Jun-2022.) $)
  simprl3 $p |- ( ( ta /\ ( ( ph /\ ps /\ ch ) /\ th ) ) -> ch ) $=
    ( w3a simp3 ad2antrl ) ABCFCEDABCGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 23-Jun-2022.) $)
  simprr1 $p |- ( ( ta /\ ( th /\ ( ph /\ ps /\ ch ) ) ) -> ph ) $=
    ( w3a simp1 ad2antll ) ABCFAEDABCGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 23-Jun-2022.) $)
  simprr2 $p |- ( ( ta /\ ( th /\ ( ph /\ ps /\ ch ) ) ) -> ps ) $=
    ( w3a simp2 ad2antll ) ABCFBEDABCGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 23-Jun-2022.) $)
  simprr3 $p |- ( ( ta /\ ( th /\ ( ph /\ ps /\ ch ) ) ) -> ch ) $=
    ( w3a simp3 ad2antll ) ABCFCEDABCGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 23-Jun-2022.) $)
  simpl1l $p |- ( ( ( ( ph /\ ps ) /\ ch /\ th ) /\ ta ) -> ph ) $=
    ( wa simpll 3ad2antl1 ) ABFCEADABEGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 23-Jun-2022.) $)
  simpl1r $p |- ( ( ( ( ph /\ ps ) /\ ch /\ th ) /\ ta ) -> ps ) $=
    ( wa simplr 3ad2antl1 ) ABFCEBDABEGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 23-Jun-2022.) $)
  simpl2l $p |- ( ( ( ch /\ ( ph /\ ps ) /\ th ) /\ ta ) -> ph ) $=
    ( wa simpll 3ad2antl2 ) ABFCEADABEGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 23-Jun-2022.) $)
  simpl2r $p |- ( ( ( ch /\ ( ph /\ ps ) /\ th ) /\ ta ) -> ps ) $=
    ( wa simplr 3ad2antl2 ) ABFCEBDABEGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 23-Jun-2022.) $)
  simpl3l $p |- ( ( ( ch /\ th /\ ( ph /\ ps ) ) /\ ta ) -> ph ) $=
    ( wa simpll 3ad2antl3 ) ABFCEADABEGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 23-Jun-2022.) $)
  simpl3r $p |- ( ( ( ch /\ th /\ ( ph /\ ps ) ) /\ ta ) -> ps ) $=
    ( wa simplr 3ad2antl3 ) ABFCEBDABEGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 24-Jun-2022.) $)
  simpr1l $p |- ( ( ta /\ ( ( ph /\ ps ) /\ ch /\ th ) ) -> ph ) $=
    ( wa simprl 3ad2antr1 ) ECABFADEABGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 24-Jun-2022.) $)
  simpr1r $p |- ( ( ta /\ ( ( ph /\ ps ) /\ ch /\ th ) ) -> ps ) $=
    ( wa simprr 3ad2antr1 ) ECABFBDEABGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 24-Jun-2022.) $)
  simpr2l $p |- ( ( ta /\ ( ch /\ ( ph /\ ps ) /\ th ) ) -> ph ) $=
    ( wa simprl 3ad2antr2 ) ECABFADEABGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 24-Jun-2022.) $)
  simpr2r $p |- ( ( ta /\ ( ch /\ ( ph /\ ps ) /\ th ) ) -> ps ) $=
    ( wa simprr 3ad2antr2 ) ECABFBDEABGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 24-Jun-2022.) $)
  simpr3l $p |- ( ( ta /\ ( ch /\ th /\ ( ph /\ ps ) ) ) -> ph ) $=
    ( wa simprl 3ad2antr3 ) ECABFADEABGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 24-Jun-2022.) $)
  simpr3r $p |- ( ( ta /\ ( ch /\ th /\ ( ph /\ ps ) ) ) -> ps ) $=
    ( wa simprr 3ad2antr3 ) ECABFBDEABGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp1ll $p |- ( ( ( ( ph /\ ps ) /\ ch ) /\ th /\ ta ) -> ph ) $=
    ( wa simpll 3ad2ant1 ) ABFCFDAEABCGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp1lr $p |- ( ( ( ( ph /\ ps ) /\ ch ) /\ th /\ ta ) -> ps ) $=
    ( wa simplr 3ad2ant1 ) ABFCFDBEABCGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp1rl $p |- ( ( ( ch /\ ( ph /\ ps ) ) /\ th /\ ta ) -> ph ) $=
    ( wa simprl 3ad2ant1 ) CABFFDAECABGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp1rr $p |- ( ( ( ch /\ ( ph /\ ps ) ) /\ th /\ ta ) -> ps ) $=
    ( wa simprr 3ad2ant1 ) CABFFDBECABGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp2ll $p |- ( ( th /\ ( ( ph /\ ps ) /\ ch ) /\ ta ) -> ph ) $=
    ( wa simpll 3ad2ant2 ) ABFCFDAEABCGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp2lr $p |- ( ( th /\ ( ( ph /\ ps ) /\ ch ) /\ ta ) -> ps ) $=
    ( wa simplr 3ad2ant2 ) ABFCFDBEABCGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp2rl $p |- ( ( th /\ ( ch /\ ( ph /\ ps ) ) /\ ta ) -> ph ) $=
    ( wa simprl 3ad2ant2 ) CABFFDAECABGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp2rr $p |- ( ( th /\ ( ch /\ ( ph /\ ps ) ) /\ ta ) -> ps ) $=
    ( wa simprr 3ad2ant2 ) CABFFDBECABGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp3ll $p |- ( ( th /\ ta /\ ( ( ph /\ ps ) /\ ch ) ) -> ph ) $=
    ( wa simpll 3ad2ant3 ) ABFCFDAEABCGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp3lr $p |- ( ( th /\ ta /\ ( ( ph /\ ps ) /\ ch ) ) -> ps ) $=
    ( wa simplr 3ad2ant3 ) ABFCFDBEABCGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp3rl $p |- ( ( th /\ ta /\ ( ch /\ ( ph /\ ps ) ) ) -> ph ) $=
    ( wa simprl 3ad2ant3 ) CABFFDAECABGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp3rr $p |- ( ( th /\ ta /\ ( ch /\ ( ph /\ ps ) ) ) -> ps ) $=
    ( wa simprr 3ad2ant3 ) CABFFDBECABGH $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 24-Jun-2022.) $)
  simpl11 $p |- ( ( ( ( ph /\ ps /\ ch ) /\ th /\ ta ) /\ et ) -> ph ) $=
    ( w3a simpl1 3ad2antl1 ) ABCGDFAEABCFHI $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 24-Jun-2022.) $)
  simpl12 $p |- ( ( ( ( ph /\ ps /\ ch ) /\ th /\ ta ) /\ et ) -> ps ) $=
    ( w3a simpl2 3ad2antl1 ) ABCGDFBEABCFHI $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 24-Jun-2022.) $)
  simpl13 $p |- ( ( ( ( ph /\ ps /\ ch ) /\ th /\ ta ) /\ et ) -> ch ) $=
    ( w3a simpl3 3ad2antl1 ) ABCGDFCEABCFHI $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 24-Jun-2022.) $)
  simpl21 $p |- ( ( ( th /\ ( ph /\ ps /\ ch ) /\ ta ) /\ et ) -> ph ) $=
    ( w3a simpl1 3ad2antl2 ) ABCGDFAEABCFHI $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 24-Jun-2022.) $)
  simpl22 $p |- ( ( ( th /\ ( ph /\ ps /\ ch ) /\ ta ) /\ et ) -> ps ) $=
    ( w3a simpl2 3ad2antl2 ) ABCGDFBEABCFHI $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 24-Jun-2022.) $)
  simpl23 $p |- ( ( ( th /\ ( ph /\ ps /\ ch ) /\ ta ) /\ et ) -> ch ) $=
    ( w3a simpl3 3ad2antl2 ) ABCGDFCEABCFHI $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 24-Jun-2022.) $)
  simpl31 $p |- ( ( ( th /\ ta /\ ( ph /\ ps /\ ch ) ) /\ et ) -> ph ) $=
    ( w3a simpl1 3ad2antl3 ) ABCGDFAEABCFHI $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 24-Jun-2022.) $)
  simpl32 $p |- ( ( ( th /\ ta /\ ( ph /\ ps /\ ch ) ) /\ et ) -> ps ) $=
    ( w3a simpl2 3ad2antl3 ) ABCGDFBEABCFHI $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 24-Jun-2022.) $)
  simpl33 $p |- ( ( ( th /\ ta /\ ( ph /\ ps /\ ch ) ) /\ et ) -> ch ) $=
    ( w3a simpl3 3ad2antl3 ) ABCGDFCEABCFHI $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 24-Jun-2022.) $)
  simpr11 $p |- ( ( et /\ ( ( ph /\ ps /\ ch ) /\ th /\ ta ) ) -> ph ) $=
    ( w3a simpr1 3ad2antr1 ) FDABCGAEFABCHI $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 24-Jun-2022.) $)
  simpr12 $p |- ( ( et /\ ( ( ph /\ ps /\ ch ) /\ th /\ ta ) ) -> ps ) $=
    ( w3a simpr2 3ad2antr1 ) FDABCGBEFABCHI $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 24-Jun-2022.) $)
  simpr13 $p |- ( ( et /\ ( ( ph /\ ps /\ ch ) /\ th /\ ta ) ) -> ch ) $=
    ( w3a simpr3 3ad2antr1 ) FDABCGCEFABCHI $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 24-Jun-2022.) $)
  simpr21 $p |- ( ( et /\ ( th /\ ( ph /\ ps /\ ch ) /\ ta ) ) -> ph ) $=
    ( w3a simpr1 3ad2antr2 ) FDABCGAEFABCHI $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 24-Jun-2022.) $)
  simpr22 $p |- ( ( et /\ ( th /\ ( ph /\ ps /\ ch ) /\ ta ) ) -> ps ) $=
    ( w3a simpr2 3ad2antr2 ) FDABCGBEFABCHI $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 24-Jun-2022.) $)
  simpr23 $p |- ( ( et /\ ( th /\ ( ph /\ ps /\ ch ) /\ ta ) ) -> ch ) $=
    ( w3a simpr3 3ad2antr2 ) FDABCGCEFABCHI $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 24-Jun-2022.) $)
  simpr31 $p |- ( ( et /\ ( th /\ ta /\ ( ph /\ ps /\ ch ) ) ) -> ph ) $=
    ( w3a simpr1 3ad2antr3 ) FDABCGAEFABCHI $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 24-Jun-2022.) $)
  simpr32 $p |- ( ( et /\ ( th /\ ta /\ ( ph /\ ps /\ ch ) ) ) -> ps ) $=
    ( w3a simpr2 3ad2antr3 ) FDABCGBEFABCHI $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.)  (Proof
     shortened by Wolf Lammen, 24-Jun-2022.) $)
  simpr33 $p |- ( ( et /\ ( th /\ ta /\ ( ph /\ ps /\ ch ) ) ) -> ch ) $=
    ( w3a simpr3 3ad2antr3 ) FDABCGCEFABCHI $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp1l1 $p |- ( ( ( ( ph /\ ps /\ ch ) /\ th ) /\ ta /\ et ) -> ph ) $=
    ( w3a wa simpl1 3ad2ant1 ) ABCGDHEAFABCDIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp1l2 $p |- ( ( ( ( ph /\ ps /\ ch ) /\ th ) /\ ta /\ et ) -> ps ) $=
    ( w3a wa simpl2 3ad2ant1 ) ABCGDHEBFABCDIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp1l3 $p |- ( ( ( ( ph /\ ps /\ ch ) /\ th ) /\ ta /\ et ) -> ch ) $=
    ( w3a wa simpl3 3ad2ant1 ) ABCGDHECFABCDIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp1r1 $p |- ( ( ( th /\ ( ph /\ ps /\ ch ) ) /\ ta /\ et ) -> ph ) $=
    ( w3a wa simpr1 3ad2ant1 ) DABCGHEAFDABCIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp1r2 $p |- ( ( ( th /\ ( ph /\ ps /\ ch ) ) /\ ta /\ et ) -> ps ) $=
    ( w3a wa simpr2 3ad2ant1 ) DABCGHEBFDABCIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp1r3 $p |- ( ( ( th /\ ( ph /\ ps /\ ch ) ) /\ ta /\ et ) -> ch ) $=
    ( w3a wa simpr3 3ad2ant1 ) DABCGHECFDABCIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp2l1 $p |- ( ( ta /\ ( ( ph /\ ps /\ ch ) /\ th ) /\ et ) -> ph ) $=
    ( w3a wa simpl1 3ad2ant2 ) ABCGDHEAFABCDIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp2l2 $p |- ( ( ta /\ ( ( ph /\ ps /\ ch ) /\ th ) /\ et ) -> ps ) $=
    ( w3a wa simpl2 3ad2ant2 ) ABCGDHEBFABCDIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp2l3 $p |- ( ( ta /\ ( ( ph /\ ps /\ ch ) /\ th ) /\ et ) -> ch ) $=
    ( w3a wa simpl3 3ad2ant2 ) ABCGDHECFABCDIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp2r1 $p |- ( ( ta /\ ( th /\ ( ph /\ ps /\ ch ) ) /\ et ) -> ph ) $=
    ( w3a wa simpr1 3ad2ant2 ) DABCGHEAFDABCIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp2r2 $p |- ( ( ta /\ ( th /\ ( ph /\ ps /\ ch ) ) /\ et ) -> ps ) $=
    ( w3a wa simpr2 3ad2ant2 ) DABCGHEBFDABCIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp2r3 $p |- ( ( ta /\ ( th /\ ( ph /\ ps /\ ch ) ) /\ et ) -> ch ) $=
    ( w3a wa simpr3 3ad2ant2 ) DABCGHECFDABCIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp3l1 $p |- ( ( ta /\ et /\ ( ( ph /\ ps /\ ch ) /\ th ) ) -> ph ) $=
    ( w3a wa simpl1 3ad2ant3 ) ABCGDHEAFABCDIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp3l2 $p |- ( ( ta /\ et /\ ( ( ph /\ ps /\ ch ) /\ th ) ) -> ps ) $=
    ( w3a wa simpl2 3ad2ant3 ) ABCGDHEBFABCDIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp3l3 $p |- ( ( ta /\ et /\ ( ( ph /\ ps /\ ch ) /\ th ) ) -> ch ) $=
    ( w3a wa simpl3 3ad2ant3 ) ABCGDHECFABCDIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp3r1 $p |- ( ( ta /\ et /\ ( th /\ ( ph /\ ps /\ ch ) ) ) -> ph ) $=
    ( w3a wa simpr1 3ad2ant3 ) DABCGHEAFDABCIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp3r2 $p |- ( ( ta /\ et /\ ( th /\ ( ph /\ ps /\ ch ) ) ) -> ps ) $=
    ( w3a wa simpr2 3ad2ant3 ) DABCGHEBFDABCIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp3r3 $p |- ( ( ta /\ et /\ ( th /\ ( ph /\ ps /\ ch ) ) ) -> ch ) $=
    ( w3a wa simpr3 3ad2ant3 ) DABCGHECFDABCIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp11l $p |- ( ( ( ( ph /\ ps ) /\ ch /\ th ) /\ ta /\ et ) -> ph ) $=
    ( wa w3a simp1l 3ad2ant1 ) ABGCDHEAFABCDIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp11r $p |- ( ( ( ( ph /\ ps ) /\ ch /\ th ) /\ ta /\ et ) -> ps ) $=
    ( wa w3a simp1r 3ad2ant1 ) ABGCDHEBFABCDIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp12l $p |- ( ( ( ch /\ ( ph /\ ps ) /\ th ) /\ ta /\ et ) -> ph ) $=
    ( wa w3a simp2l 3ad2ant1 ) CABGDHEAFCABDIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp12r $p |- ( ( ( ch /\ ( ph /\ ps ) /\ th ) /\ ta /\ et ) -> ps ) $=
    ( wa w3a simp2r 3ad2ant1 ) CABGDHEBFCABDIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp13l $p |- ( ( ( ch /\ th /\ ( ph /\ ps ) ) /\ ta /\ et ) -> ph ) $=
    ( wa w3a simp3l 3ad2ant1 ) CDABGHEAFCDABIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp13r $p |- ( ( ( ch /\ th /\ ( ph /\ ps ) ) /\ ta /\ et ) -> ps ) $=
    ( wa w3a simp3r 3ad2ant1 ) CDABGHEBFCDABIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp21l $p |- ( ( ta /\ ( ( ph /\ ps ) /\ ch /\ th ) /\ et ) -> ph ) $=
    ( wa w3a simp1l 3ad2ant2 ) ABGCDHEAFABCDIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp21r $p |- ( ( ta /\ ( ( ph /\ ps ) /\ ch /\ th ) /\ et ) -> ps ) $=
    ( wa w3a simp1r 3ad2ant2 ) ABGCDHEBFABCDIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp22l $p |- ( ( ta /\ ( ch /\ ( ph /\ ps ) /\ th ) /\ et ) -> ph ) $=
    ( wa w3a simp2l 3ad2ant2 ) CABGDHEAFCABDIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp22r $p |- ( ( ta /\ ( ch /\ ( ph /\ ps ) /\ th ) /\ et ) -> ps ) $=
    ( wa w3a simp2r 3ad2ant2 ) CABGDHEBFCABDIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp23l $p |- ( ( ta /\ ( ch /\ th /\ ( ph /\ ps ) ) /\ et ) -> ph ) $=
    ( wa w3a simp3l 3ad2ant2 ) CDABGHEAFCDABIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp23r $p |- ( ( ta /\ ( ch /\ th /\ ( ph /\ ps ) ) /\ et ) -> ps ) $=
    ( wa w3a simp3r 3ad2ant2 ) CDABGHEBFCDABIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp31l $p |- ( ( ta /\ et /\ ( ( ph /\ ps ) /\ ch /\ th ) ) -> ph ) $=
    ( wa w3a simp1l 3ad2ant3 ) ABGCDHEAFABCDIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp31r $p |- ( ( ta /\ et /\ ( ( ph /\ ps ) /\ ch /\ th ) ) -> ps ) $=
    ( wa w3a simp1r 3ad2ant3 ) ABGCDHEBFABCDIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp32l $p |- ( ( ta /\ et /\ ( ch /\ ( ph /\ ps ) /\ th ) ) -> ph ) $=
    ( wa w3a simp2l 3ad2ant3 ) CABGDHEAFCABDIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp32r $p |- ( ( ta /\ et /\ ( ch /\ ( ph /\ ps ) /\ th ) ) -> ps ) $=
    ( wa w3a simp2r 3ad2ant3 ) CABGDHEBFCABDIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp33l $p |- ( ( ta /\ et /\ ( ch /\ th /\ ( ph /\ ps ) ) ) -> ph ) $=
    ( wa w3a simp3l 3ad2ant3 ) CDABGHEAFCDABIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp33r $p |- ( ( ta /\ et /\ ( ch /\ th /\ ( ph /\ ps ) ) ) -> ps ) $=
    ( wa w3a simp3r 3ad2ant3 ) CDABGHEBFCDABIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp111 $p |- ( ( ( ( ph /\ ps /\ ch ) /\ th /\ ta ) /\ et /\ ze ) -> ph ) $=
    ( w3a simp11 3ad2ant1 ) ABCHDEHFAGABCDEIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp112 $p |- ( ( ( ( ph /\ ps /\ ch ) /\ th /\ ta ) /\ et /\ ze ) -> ps ) $=
    ( w3a simp12 3ad2ant1 ) ABCHDEHFBGABCDEIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp113 $p |- ( ( ( ( ph /\ ps /\ ch ) /\ th /\ ta ) /\ et /\ ze ) -> ch ) $=
    ( w3a simp13 3ad2ant1 ) ABCHDEHFCGABCDEIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp121 $p |- ( ( ( th /\ ( ph /\ ps /\ ch ) /\ ta ) /\ et /\ ze ) -> ph ) $=
    ( w3a simp21 3ad2ant1 ) DABCHEHFAGDABCEIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp122 $p |- ( ( ( th /\ ( ph /\ ps /\ ch ) /\ ta ) /\ et /\ ze ) -> ps ) $=
    ( w3a simp22 3ad2ant1 ) DABCHEHFBGDABCEIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp123 $p |- ( ( ( th /\ ( ph /\ ps /\ ch ) /\ ta ) /\ et /\ ze ) -> ch ) $=
    ( w3a simp23 3ad2ant1 ) DABCHEHFCGDABCEIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp131 $p |- ( ( ( th /\ ta /\ ( ph /\ ps /\ ch ) ) /\ et /\ ze ) -> ph ) $=
    ( w3a simp31 3ad2ant1 ) DEABCHHFAGDEABCIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp132 $p |- ( ( ( th /\ ta /\ ( ph /\ ps /\ ch ) ) /\ et /\ ze ) -> ps ) $=
    ( w3a simp32 3ad2ant1 ) DEABCHHFBGDEABCIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp133 $p |- ( ( ( th /\ ta /\ ( ph /\ ps /\ ch ) ) /\ et /\ ze ) -> ch ) $=
    ( w3a simp33 3ad2ant1 ) DEABCHHFCGDEABCIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp211 $p |- ( ( et /\ ( ( ph /\ ps /\ ch ) /\ th /\ ta ) /\ ze ) -> ph ) $=
    ( w3a simp11 3ad2ant2 ) ABCHDEHFAGABCDEIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp212 $p |- ( ( et /\ ( ( ph /\ ps /\ ch ) /\ th /\ ta ) /\ ze ) -> ps ) $=
    ( w3a simp12 3ad2ant2 ) ABCHDEHFBGABCDEIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp213 $p |- ( ( et /\ ( ( ph /\ ps /\ ch ) /\ th /\ ta ) /\ ze ) -> ch ) $=
    ( w3a simp13 3ad2ant2 ) ABCHDEHFCGABCDEIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp221 $p |- ( ( et /\ ( th /\ ( ph /\ ps /\ ch ) /\ ta ) /\ ze ) -> ph ) $=
    ( w3a simp21 3ad2ant2 ) DABCHEHFAGDABCEIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp222 $p |- ( ( et /\ ( th /\ ( ph /\ ps /\ ch ) /\ ta ) /\ ze ) -> ps ) $=
    ( w3a simp22 3ad2ant2 ) DABCHEHFBGDABCEIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp223 $p |- ( ( et /\ ( th /\ ( ph /\ ps /\ ch ) /\ ta ) /\ ze ) -> ch ) $=
    ( w3a simp23 3ad2ant2 ) DABCHEHFCGDABCEIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp231 $p |- ( ( et /\ ( th /\ ta /\ ( ph /\ ps /\ ch ) ) /\ ze ) -> ph ) $=
    ( w3a simp31 3ad2ant2 ) DEABCHHFAGDEABCIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp232 $p |- ( ( et /\ ( th /\ ta /\ ( ph /\ ps /\ ch ) ) /\ ze ) -> ps ) $=
    ( w3a simp32 3ad2ant2 ) DEABCHHFBGDEABCIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp233 $p |- ( ( et /\ ( th /\ ta /\ ( ph /\ ps /\ ch ) ) /\ ze ) -> ch ) $=
    ( w3a simp33 3ad2ant2 ) DEABCHHFCGDEABCIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp311 $p |- ( ( et /\ ze /\ ( ( ph /\ ps /\ ch ) /\ th /\ ta ) ) -> ph ) $=
    ( w3a simp11 3ad2ant3 ) ABCHDEHFAGABCDEIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp312 $p |- ( ( et /\ ze /\ ( ( ph /\ ps /\ ch ) /\ th /\ ta ) ) -> ps ) $=
    ( w3a simp12 3ad2ant3 ) ABCHDEHFBGABCDEIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp313 $p |- ( ( et /\ ze /\ ( ( ph /\ ps /\ ch ) /\ th /\ ta ) ) -> ch ) $=
    ( w3a simp13 3ad2ant3 ) ABCHDEHFCGABCDEIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp321 $p |- ( ( et /\ ze /\ ( th /\ ( ph /\ ps /\ ch ) /\ ta ) ) -> ph ) $=
    ( w3a simp21 3ad2ant3 ) DABCHEHFAGDABCEIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp322 $p |- ( ( et /\ ze /\ ( th /\ ( ph /\ ps /\ ch ) /\ ta ) ) -> ps ) $=
    ( w3a simp22 3ad2ant3 ) DABCHEHFBGDABCEIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp323 $p |- ( ( et /\ ze /\ ( th /\ ( ph /\ ps /\ ch ) /\ ta ) ) -> ch ) $=
    ( w3a simp23 3ad2ant3 ) DABCHEHFCGDABCEIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp331 $p |- ( ( et /\ ze /\ ( th /\ ta /\ ( ph /\ ps /\ ch ) ) ) -> ph ) $=
    ( w3a simp31 3ad2ant3 ) DEABCHHFAGDEABCIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp332 $p |- ( ( et /\ ze /\ ( th /\ ta /\ ( ph /\ ps /\ ch ) ) ) -> ps ) $=
    ( w3a simp32 3ad2ant3 ) DEABCHHFBGDEABCIJ $.

  $( Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) $)
  simp333 $p |- ( ( et /\ ze /\ ( th /\ ta /\ ( ph /\ ps /\ ch ) ) ) -> ch ) $=
    ( w3a simp33 3ad2ant3 ) DEABCHHFCGDEABCIJ $.

  ${
    3anibar.1 $e |- ( ( ph /\ ps /\ ch ) -> ( th <-> ( ch /\ ta ) ) ) $.
    $( Remove a hypothesis from the second member of a biimplication.
       (Contributed by FL, 22-Jul-2008.) $)
    3anibar $p |- ( ( ph /\ ps /\ ch ) -> ( th <-> ta ) ) $=
      ( w3a simp3 mpbirand ) ABCGDCEABCHFI $.
  $}

  $( Introduction in triple disjunction.  (Contributed by NM, 4-Apr-1995.) $)
  3mix1 $p |- ( ph -> ( ph \/ ps \/ ch ) ) $=
    ( wo w3o orc 3orass sylibr ) AABCDZDABCEAIFABCGH $.

  $( Introduction in triple disjunction.  (Contributed by NM, 4-Apr-1995.) $)
  3mix2 $p |- ( ph -> ( ps \/ ph \/ ch ) ) $=
    ( w3o 3mix1 3orrot sylibr ) AACBDBACDACBEBACFG $.

  $( Introduction in triple disjunction.  (Contributed by NM, 4-Apr-1995.) $)
  3mix3 $p |- ( ph -> ( ps \/ ch \/ ph ) ) $=
    ( w3o 3mix1 3orrot sylib ) AABCDBCADABCEABCFG $.

  ${
    3mixi.1 $e |- ph $.
    $( Introduction in triple disjunction.  (Contributed by Mario Carneiro,
       6-Oct-2014.) $)
    3mix1i $p |- ( ph \/ ps \/ ch ) $=
      ( w3o 3mix1 ax-mp ) AABCEDABCFG $.

    $( Introduction in triple disjunction.  (Contributed by Mario Carneiro,
       6-Oct-2014.) $)
    3mix2i $p |- ( ps \/ ph \/ ch ) $=
      ( w3o 3mix2 ax-mp ) ABACEDABCFG $.

    $( Introduction in triple disjunction.  (Contributed by Mario Carneiro,
       6-Oct-2014.) $)
    3mix3i $p |- ( ps \/ ch \/ ph ) $=
      ( w3o 3mix3 ax-mp ) ABCAEDABCFG $.
  $}

  ${
    3mixd.1 $e |- ( ph -> ps ) $.
    $( Deduction introducing triple disjunction.  (Contributed by Scott Fenton,
       8-Jun-2011.) $)
    3mix1d $p |- ( ph -> ( ps \/ ch \/ th ) ) $=
      ( w3o 3mix1 syl ) ABBCDFEBCDGH $.

    $( Deduction introducing triple disjunction.  (Contributed by Scott Fenton,
       8-Jun-2011.) $)
    3mix2d $p |- ( ph -> ( ch \/ ps \/ th ) ) $=
      ( w3o 3mix2 syl ) ABCBDFEBCDGH $.

    $( Deduction introducing triple disjunction.  (Contributed by Scott Fenton,
       8-Jun-2011.) $)
    3mix3d $p |- ( ph -> ( ch \/ th \/ ps ) ) $=
      ( w3o 3mix3 syl ) ABCDBFEBCDGH $.
  $}

  ${
    3pm3.2i.1 $e |- ph $.
    3pm3.2i.2 $e |- ps $.
    3pm3.2i.3 $e |- ch $.
    $( Infer conjunction of premises.  (Contributed by NM, 10-Feb-1995.) $)
    3pm3.2i $p |- ( ph /\ ps /\ ch ) $=
      ( w3a wa pm3.2i df-3an mpbir2an ) ABCGABHCABDEIFABCJK $.
  $}

  $( Version of ~ pm3.2 for a triple conjunction.  (Contributed by Alan Sare,
     24-Oct-2011.)  (Proof shortened by Kyle Wyonch, 24-Apr-2021.)  (Proof
     shortened by Wolf Lammen, 21-Jun-2022.) $)
  pm3.2an3 $p |- ( ph -> ( ps -> ( ch -> ( ph /\ ps /\ ch ) ) ) ) $=
    ( w3a id 3exp ) ABCABCDZGEF $.

  ${
    mpbir3an.1 $e |- ps $.
    mpbir3an.2 $e |- ch $.
    mpbir3an.3 $e |- th $.
    mpbir3an.4 $e |- ( ph <-> ( ps /\ ch /\ th ) ) $.
    $( Detach a conjunction of truths in a biconditional.  (Contributed by NM,
       16-Sep-2011.) $)
    mpbir3an $p |- ph $=
      ( w3a 3pm3.2i mpbir ) ABCDIBCDEFGJHK $.
  $}

  ${
    mpbir3and.1 $e |- ( ph -> ch ) $.
    mpbir3and.2 $e |- ( ph -> th ) $.
    mpbir3and.3 $e |- ( ph -> ta ) $.
    mpbir3and.4 $e |- ( ph -> ( ps <-> ( ch /\ th /\ ta ) ) ) $.
    $( Detach a conjunction of truths in a biconditional.  (Contributed by
       Mario Carneiro, 11-May-2014.)  (Revised by Mario Carneiro,
       9-Jan-2015.) $)
    mpbir3and $p |- ( ph -> ps ) $=
      ( w3a 3jca mpbird ) ABCDEJACDEFGHKIL $.
  $}

  ${
    syl3anbrc.1 $e |- ( ph -> ps ) $.
    syl3anbrc.2 $e |- ( ph -> ch ) $.
    syl3anbrc.3 $e |- ( ph -> th ) $.
    syl3anbrc.4 $e |- ( ta <-> ( ps /\ ch /\ th ) ) $.
    $( Syllogism inference.  (Contributed by Mario Carneiro, 11-May-2014.) $)
    syl3anbrc $p |- ( ph -> ta ) $=
      ( w3a 3jca sylibr ) ABCDJEABCDFGHKIL $.
  $}

  ${
    syl21anbrc.1 $e |- ( ph -> ps ) $.
    syl21anbrc.2 $e |- ( ph -> ch ) $.
    syl21anbrc.3 $e |- ( ph -> th ) $.
    syl21anbrc.4 $e |- ( ta <-> ( ( ps /\ ch ) /\ th ) ) $.
    $( Syllogism inference.  (Contributed by Peter Mazsa, 18-Sep-2022.) $)
    syl21anbrc $p |- ( ph -> ta ) $=
      ( wa jca31 sylibr ) ABCJDJEABCDFGHKIL $.
  $}

  ${
    3imp3i2an.1 $e |- ( ( ph /\ ps /\ ch ) -> th ) $.
    3imp3i2an.2 $e |- ( ( ph /\ ch ) -> ta ) $.
    3imp3i2an.3 $e |- ( ( th /\ ta ) -> et ) $.
    $( An elimination deduction.  (Contributed by Alan Sare, 17-Oct-2017.)
       (Proof shortened by Wolf Lammen, 13-Apr-2022.) $)
    3imp3i2an $p |- ( ( ph /\ ps /\ ch ) -> et ) $=
      ( w3a 3adant2 syl2anc ) ABCJDEFGACEBHKIL $.
  $}

  ${
    ex3.1 $e |- ( ( ( ( ph /\ ps ) /\ ch ) /\ th ) -> ta ) $.
    $( Apply ~ ex to a hypothesis with a 3-right-nested conjunction antecedent,
       with the antecedent of the assertion being a triple conjunction rather
       than a 2-right-nested conjunction.  (Contributed by Alan Sare,
       22-Apr-2018.) $)
    ex3 $p |- ( ( ph /\ ps /\ ch ) -> ( th -> ta ) ) $=
      ( wi wa ex 3impa ) ABCDEGABHCHDEFIJ $.
  $}

  ${
    3imp1.1 $e |- ( ph -> ( ps -> ( ch -> ( th -> ta ) ) ) ) $.
    $( Importation to left triple conjunction.  (Contributed by NM,
       24-Feb-2005.) $)
    3imp1 $p |- ( ( ( ph /\ ps /\ ch ) /\ th ) -> ta ) $=
      ( w3a wi 3imp imp ) ABCGDEABCDEHFIJ $.

    $( Importation deduction for triple conjunction.  (Contributed by NM,
       26-Oct-2006.) $)
    3impd $p |- ( ph -> ( ( ps /\ ch /\ th ) -> ta ) ) $=
      ( w3a wi com4l 3imp com12 ) BCDGAEBCDAEHABCDEFIJK $.

    $( Importation to right triple conjunction.  (Contributed by NM,
       26-Oct-2006.) $)
    3imp2 $p |- ( ( ph /\ ( ps /\ ch /\ th ) ) -> ta ) $=
      ( w3a 3impd imp ) ABCDGEABCDEFHI $.
  $}

  ${
    3impdi.1 $e |- ( ( ( ph /\ ps ) /\ ( ph /\ ch ) ) -> th ) $.
    $( Importation inference (undistribute conjunction).  (Contributed by NM,
       14-Aug-1995.) $)
    3impdi $p |- ( ( ph /\ ps /\ ch ) -> th ) $=
      ( anandis 3impb ) ABCDABCDEFG $.
  $}

  ${
    3impdir.1 $e |- ( ( ( ph /\ ps ) /\ ( ch /\ ps ) ) -> th ) $.
    $( Importation inference (undistribute conjunction).  (Contributed by NM,
       20-Aug-1995.) $)
    3impdir $p |- ( ( ph /\ ch /\ ps ) -> th ) $=
      ( anandirs 3impa ) ACBDACBDEFG $.
  $}

  ${
    3exp1.1 $e |- ( ( ( ph /\ ps /\ ch ) /\ th ) -> ta ) $.
    $( Exportation from left triple conjunction.  (Contributed by NM,
       24-Feb-2005.) $)
    3exp1 $p |- ( ph -> ( ps -> ( ch -> ( th -> ta ) ) ) ) $=
      ( wi w3a ex 3exp ) ABCDEGABCHDEFIJ $.
  $}

  ${
    3expd.1 $e |- ( ph -> ( ( ps /\ ch /\ th ) -> ta ) ) $.
    $( Exportation deduction for triple conjunction.  (Contributed by NM,
       26-Oct-2006.) $)
    3expd $p |- ( ph -> ( ps -> ( ch -> ( th -> ta ) ) ) ) $=
      ( wi w3a com12 3exp com4r ) BCDAEBCDAEGABCDHEFIJK $.
  $}

  ${
    3exp2.1 $e |- ( ( ph /\ ( ps /\ ch /\ th ) ) -> ta ) $.
    $( Exportation from right triple conjunction.  (Contributed by NM,
       26-Oct-2006.) $)
    3exp2 $p |- ( ph -> ( ps -> ( ch -> ( th -> ta ) ) ) ) $=
      ( w3a ex 3expd ) ABCDEABCDGEFHI $.
  $}

  ${
    exp5o.1 $e |- ( ( ph /\ ps /\ ch ) -> ( ( th /\ ta ) -> et ) ) $.
    $( A triple exportation inference.  (Contributed by Jeff Hankins,
       8-Jul-2009.) $)
    exp5o $p |- ( ph -> ( ps -> ( ch -> ( th -> ( ta -> et ) ) ) ) ) $=
      ( wi w3a expd 3exp ) ABCDEFHHABCIDEFGJK $.
  $}

  ${
    exp516.1 $e |- ( ( ( ph /\ ( ps /\ ch /\ th ) ) /\ ta ) -> et ) $.
    $( A triple exportation inference.  (Contributed by Jeff Hankins,
       8-Jul-2009.) $)
    exp516 $p |- ( ph -> ( ps -> ( ch -> ( th -> ( ta -> et ) ) ) ) ) $=
      ( wi w3a exp31 3expd ) ABCDEFHABCDIEFGJK $.
  $}

  ${
    exp520.1 $e |- ( ( ( ph /\ ps /\ ch ) /\ ( th /\ ta ) ) -> et ) $.
    $( A triple exportation inference.  (Contributed by Jeff Hankins,
       8-Jul-2009.) $)
    exp520 $p |- ( ph -> ( ps -> ( ch -> ( th -> ( ta -> et ) ) ) ) ) $=
      ( w3a wa ex exp5o ) ABCDEFABCHDEIFGJK $.
  $}

  $( Version of ~ impexp for a triple conjunction.  (Contributed by Alan Sare,
     31-Dec-2011.) $)
  3impexp $p |- ( ( ( ph /\ ps /\ ch ) -> th ) <->
                ( ph -> ( ps -> ( ch -> th ) ) ) ) $=
    ( w3a wi id 3expd 3impd impbii ) ABCEDFZABCDFFFZKABCDKGHLABCDLGIJ $.

  ${
    3an1rs.1 $e |- ( ( ( ph /\ ps /\ ch ) /\ th ) -> ta ) $.
    $( Swap conjuncts.  (Contributed by NM, 16-Dec-2007.)  (Proof shortened by
       Wolf Lammen, 14-Apr-2022.) $)
    3an1rs $p |- ( ( ( ph /\ ps /\ th ) /\ ch ) -> ta ) $=
      ( 3exp1 com34 3imp1 ) ABDCEABCDEABCDEFGHI $.
  $}

  ${
    3anassrs.1 $e |- ( ( ph /\ ( ps /\ ch /\ th ) ) -> ta ) $.
    $( Associative law for conjunction applied to antecedent (eliminates
       syllogism).  (Contributed by Mario Carneiro, 4-Jan-2017.) $)
    3anassrs $p |- ( ( ( ( ph /\ ps ) /\ ch ) /\ th ) -> ta ) $=
      ( 3exp2 imp41 ) ABCDEABCDEFGH $.
  $}

  ${
    ad5ant.1 $e |- ( ( ph /\ ps /\ ch ) -> th ) $.
    $( Deduction adding conjuncts to antecedent.  (Contributed by Alan Sare,
       17-Oct-2017.)  (Proof shortened by Wolf Lammen, 14-Apr-2022.) $)
    ad5ant245 $p |- ( ( ( ( ( ta /\ ph ) /\ et ) /\ ps ) /\ ch ) -> th ) $=
      ( wa 3adant1l ad4ant134 ) EAHBCDFABCDEGIJ $.

    $( Deduction adding conjuncts to antecedent.  (Contributed by Alan Sare,
       17-Oct-2017.)  (Proof shortened by Wolf Lammen, 14-Apr-2022.) $)
    ad5ant234 $p |- ( ( ( ( ( ta /\ ph ) /\ ps ) /\ ch ) /\ et ) -> th ) $=
      ( wa ad4ant234 adantr ) EAHBHCHDFABCDEGIJ $.

    $( Deduction adding conjuncts to antecedent.  (Contributed by Alan Sare,
       17-Oct-2017.)  (Proof shortened by Wolf Lammen, 14-Apr-2022.) $)
    ad5ant235 $p |- ( ( ( ( ( ta /\ ph ) /\ ps ) /\ et ) /\ ch ) -> th ) $=
      ( wa ad4ant234 adantlr ) EAHBHCDFABCDEGIJ $.

    $( Deduction adding conjuncts to antecedent.  (Contributed by Alan Sare,
       17-Oct-2017.)  (Proof shortened by Wolf Lammen, 23-Jun-2022.) $)
    ad5ant123 $p |- ( ( ( ( ( ph /\ ps ) /\ ch ) /\ ta ) /\ et ) -> th ) $=
      ( wa 3expa ad2antrr ) ABHCHDEFABCDGIJ $.

    $( Deduction adding conjuncts to antecedent.  (Contributed by Alan Sare,
       17-Oct-2017.)  (Proof shortened by Wolf Lammen, 23-Jun-2022.) $)
    ad5ant124 $p |- ( ( ( ( ( ph /\ ps ) /\ ta ) /\ ch ) /\ et ) -> th ) $=
      ( wa ad4ant124 adantr ) ABHEHCHDFABCDEGIJ $.

    $( Deduction adding conjuncts to antecedent.  (Contributed by Alan Sare,
       17-Oct-2017.)  (Proof shortened by Wolf Lammen, 23-Jun-2022.) $)
    ad5ant125 $p |- ( ( ( ( ( ph /\ ps ) /\ ta ) /\ et ) /\ ch ) -> th ) $=
      ( wa wi 3expia 2a1d imp41 ) ABHZEFCDMCDIEFABCDGJKL $.

    $( Deduction adding conjuncts to antecedent.  (Contributed by Alan Sare,
       17-Oct-2017.)  (Proof shortened by Wolf Lammen, 23-Jun-2022.) $)
    ad5ant134 $p |- ( ( ( ( ( ph /\ ta ) /\ ps ) /\ ch ) /\ et ) -> th ) $=
      ( wa ad4ant134 adantr ) AEHBHCHDFABCDEGIJ $.

    $( Deduction adding conjuncts to antecedent.  (Contributed by Alan Sare,
       17-Oct-2017.)  (Proof shortened by Wolf Lammen, 23-Jun-2022.) $)
    ad5ant135 $p |- ( ( ( ( ( ph /\ ta ) /\ ps ) /\ et ) /\ ch ) -> th ) $=
      ( wa ad4ant134 adantlr ) AEHBHCDFABCDEGIJ $.

    $( Deduction adding conjuncts to antecedent.  (Contributed by Alan Sare,
       17-Oct-2017.)  (Proof shortened by Wolf Lammen, 23-Jun-2022.) $)
    ad5ant145 $p |- ( ( ( ( ( ph /\ ta ) /\ et ) /\ ps ) /\ ch ) -> th ) $=
      ( wa ad4ant134 adantllr ) AEHBCDFABCDEGIJ $.
  $}

  ${
    ad5ant2345.1 $e |- ( ( ( ( ph /\ ps ) /\ ch ) /\ th ) -> ta ) $.
    $( Deduction adding conjuncts to antecedent.  (Contributed by Alan Sare,
       17-Oct-2017.) $)
    ad5ant2345 $p |- ( ( ( ( ( et /\ ph ) /\ ps ) /\ ch ) /\ th ) -> ta ) $=
      ( wa wi exp41 adantl imp41 ) FAHBCDEABCDEIIIFABCDEGJKL $.
  $}

  ${
    syl3anc.1 $e |- ( ph -> ps ) $.
    syl3anc.2 $e |- ( ph -> ch ) $.
    syl3anc.3 $e |- ( ph -> th ) $.
    ${
      syl3anc.4 $e |- ( ( ps /\ ch /\ th ) -> ta ) $.
      $( Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) $)
      syl3anc $p |- ( ph -> ta ) $=
        ( w3a 3jca syl ) ABCDJEABCDFGHKIL $.
    $}

    syl3Xanc.4 $e |- ( ph -> ta ) $.
    ${
      syl13anc.5 $e |- ( ( ps /\ ( ch /\ th /\ ta ) ) -> et ) $.
      $( Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) $)
      syl13anc $p |- ( ph -> et ) $=
        ( w3a 3jca syl2anc ) ABCDELFGACDEHIJMKN $.
    $}

    ${
      syl31anc.5 $e |- ( ( ( ps /\ ch /\ th ) /\ ta ) -> et ) $.
      $( Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) $)
      syl31anc $p |- ( ph -> et ) $=
        ( w3a 3jca syl2anc ) ABCDLEFABCDGHIMJKN $.
    $}

    ${
      syl112anc.5 $e |- ( ( ps /\ ch /\ ( th /\ ta ) ) -> et ) $.
      $( Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) $)
      syl112anc $p |- ( ph -> et ) $=
        ( wa jca syl3anc ) ABCDELFGHADEIJMKN $.
    $}

    ${
      syl121anc.5 $e |- ( ( ps /\ ( ch /\ th ) /\ ta ) -> et ) $.
      $( Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) $)
      syl121anc $p |- ( ph -> et ) $=
        ( wa jca syl3anc ) ABCDLEFGACDHIMJKN $.
    $}

    ${
      syl211anc.5 $e |- ( ( ( ps /\ ch ) /\ th /\ ta ) -> et ) $.
      $( Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) $)
      syl211anc $p |- ( ph -> et ) $=
        ( wa jca syl3anc ) ABCLDEFABCGHMIJKN $.
    $}

    syl23anc.5 $e |- ( ph -> et ) $.
    ${
      syl23anc.6 $e |- ( ( ( ps /\ ch ) /\ ( th /\ ta /\ et ) ) -> ze ) $.
      $( Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) $)
      syl23anc $p |- ( ph -> ze ) $=
        ( wa jca syl13anc ) ABCNDEFGABCHIOJKLMP $.
    $}

    ${
      syl32anc.6 $e |- ( ( ( ps /\ ch /\ th ) /\ ( ta /\ et ) ) -> ze ) $.
      $( Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) $)
      syl32anc $p |- ( ph -> ze ) $=
        ( wa jca syl31anc ) ABCDEFNGHIJAEFKLOMP $.
    $}

    ${
      syl122anc.6 $e |- ( ( ps /\ ( ch /\ th ) /\ ( ta /\ et ) ) -> ze ) $.
      $( Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) $)
      syl122anc $p |- ( ph -> ze ) $=
        ( wa jca syl121anc ) ABCDEFNGHIJAEFKLOMP $.
    $}

    ${
      syl212anc.6 $e |- ( ( ( ps /\ ch ) /\ th /\ ( ta /\ et ) ) -> ze ) $.
      $( Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) $)
      syl212anc $p |- ( ph -> ze ) $=
        ( wa jca syl211anc ) ABCDEFNGHIJAEFKLOMP $.
    $}

    ${
      syl221anc.6 $e |- ( ( ( ps /\ ch ) /\ ( th /\ ta ) /\ et ) -> ze ) $.
      $( Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) $)
      syl221anc $p |- ( ph -> ze ) $=
        ( wa jca syl211anc ) ABCDENFGHIADEJKOLMP $.
    $}

    ${
      syl113anc.6 $e |- ( ( ps /\ ch /\ ( th /\ ta /\ et ) ) -> ze ) $.
      $( Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) $)
      syl113anc $p |- ( ph -> ze ) $=
        ( w3a 3jca syl3anc ) ABCDEFNGHIADEFJKLOMP $.
    $}

    ${
      syl131anc.6 $e |- ( ( ps /\ ( ch /\ th /\ ta ) /\ et ) -> ze ) $.
      $( Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) $)
      syl131anc $p |- ( ph -> ze ) $=
        ( w3a 3jca syl3anc ) ABCDENFGHACDEIJKOLMP $.
    $}

    ${
      syl311anc.6 $e |- ( ( ( ps /\ ch /\ th ) /\ ta /\ et ) -> ze ) $.
      $( Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) $)
      syl311anc $p |- ( ph -> ze ) $=
        ( w3a 3jca syl3anc ) ABCDNEFGABCDHIJOKLMP $.
    $}

    syl33anc.6 $e |- ( ph -> ze ) $.
    ${
      syl33anc.7 $e |- ( ( ( ps /\ ch /\ th ) /\ ( ta /\ et /\ ze ) )
           -> si ) $.
      $( Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) $)
      syl33anc $p |- ( ph -> si ) $=
        ( w3a 3jca syl13anc ) ABCDPEFGHABCDIJKQLMNOR $.
    $}

    ${
      syl222anc.7 $e |- ( ( ( ps /\ ch ) /\ ( th /\ ta ) /\ ( et /\ ze ) )
           -> si ) $.
      $( Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) $)
      syl222anc $p |- ( ph -> si ) $=
        ( wa jca syl221anc ) ABCDEFGPHIJKLAFGMNQOR $.
    $}

    ${
      syl123anc.7 $e |- ( ( ps /\ ( ch /\ th ) /\ ( ta /\ et /\ ze ) )
           -> si ) $.
      $( Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) $)
      syl123anc $p |- ( ph -> si ) $=
        ( wa jca syl113anc ) ABCDPEFGHIACDJKQLMNOR $.
    $}

    ${
      syl132anc.7 $e |- ( ( ps /\ ( ch /\ th /\ ta ) /\ ( et /\ ze ) )
           -> si ) $.
      $( Syllogism combined with contraction.  (Contributed by NM,
         11-Jul-2012.) $)
      syl132anc $p |- ( ph -> si ) $=
        ( wa jca syl131anc ) ABCDEFGPHIJKLAFGMNQOR $.
    $}

    ${
      syl213anc.7 $e |- ( ( ( ps /\ ch ) /\ th /\ ( ta /\ et /\ ze ) )
           -> si ) $.
      $( Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) $)
      syl213anc $p |- ( ph -> si ) $=
        ( wa jca syl113anc ) ABCPDEFGHABCIJQKLMNOR $.
    $}

    ${
      syl231anc.7 $e |- ( ( ( ps /\ ch ) /\ ( th /\ ta /\ et ) /\ ze )
           -> si ) $.
      $( Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) $)
      syl231anc $p |- ( ph -> si ) $=
        ( wa jca syl131anc ) ABCPDEFGHABCIJQKLMNOR $.
    $}

    ${
      syl312anc.7 $e |- ( ( ( ps /\ ch /\ th ) /\ ta /\ ( et /\ ze ) )
           -> si ) $.
      $( Syllogism combined with contraction.  (Contributed by NM,
         11-Jul-2012.) $)
      syl312anc $p |- ( ph -> si ) $=
        ( wa jca syl311anc ) ABCDEFGPHIJKLAFGMNQOR $.
    $}

    ${
      syl321anc.7 $e |- ( ( ( ps /\ ch /\ th ) /\ ( ta /\ et ) /\ ze )
           -> si ) $.
      $( Syllogism combined with contraction.  (Contributed by NM,
         11-Jul-2012.) $)
      syl321anc $p |- ( ph -> si ) $=
        ( wa jca syl311anc ) ABCDEFPGHIJKAEFLMQNOR $.
    $}

    syl133anc.7 $e |- ( ph -> si ) $.
    ${
      syl133anc.8 $e |- ( ( ps /\ ( ch /\ th /\ ta ) /\ ( et /\ ze /\ si ) )
           -> rh ) $.
      $( Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) $)
      syl133anc $p |- ( ph -> rh ) $=
        ( w3a 3jca syl131anc ) ABCDEFGHRIJKLMAFGHNOPSQT $.
    $}

    ${
      syl313anc.8 $e |- ( ( ( ps /\ ch /\ th ) /\ ta /\ ( et /\ ze /\ si ) )
           -> rh ) $.
      $( Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) $)
      syl313anc $p |- ( ph -> rh ) $=
        ( w3a 3jca syl311anc ) ABCDEFGHRIJKLMAFGHNOPSQT $.
    $}

    ${
      syl331anc.8 $e |- ( ( ( ps /\ ch /\ th ) /\ ( ta /\ et /\ ze ) /\ si )
           -> rh ) $.
      $( Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) $)
      syl331anc $p |- ( ph -> rh ) $=
        ( w3a 3jca syl311anc ) ABCDEFGRHIJKLAEFGMNOSPQT $.
    $}

    ${
      syl223anc.8 $e |- ( ( ( ps /\ ch ) /\ ( th /\ ta ) /\ ( et /\ ze /\ si )
          ) -> rh ) $.
      $( Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) $)
      syl223anc $p |- ( ph -> rh ) $=
        ( wa jca syl213anc ) ABCDERFGHIJKADELMSNOPQT $.
    $}

    ${
      syl232anc.8 $e |- ( ( ( ps /\ ch ) /\ ( th /\ ta /\ et ) /\ ( ze /\ si )
          ) -> rh ) $.
      $( Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) $)
      syl232anc $p |- ( ph -> rh ) $=
        ( wa jca syl231anc ) ABCDEFGHRIJKLMNAGHOPSQT $.
    $}

    ${
      syl322anc.8 $e |- ( ( ( ps /\ ch /\ th ) /\ ( ta /\ et ) /\ ( ze /\ si )
          ) -> rh ) $.
      $( Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) $)
      syl322anc $p |- ( ph -> rh ) $=
        ( wa jca syl321anc ) ABCDEFGHRIJKLMNAGHOPSQT $.
    $}

    syl233anc.8 $e |- ( ph -> rh ) $.
    ${
      syl233anc.9 $e |- ( ( ( ps /\ ch ) /\ ( th /\ ta /\ et ) /\ ( ze /\ si /\
          rh ) ) -> mu ) $.
      $( Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) $)
      syl233anc $p |- ( ph -> mu ) $=
        ( wa jca syl133anc ) ABCTDEFGHIJABCKLUAMNOPQRSUB $.
    $}

    ${
      syl323anc.9 $e |- ( ( ( ps /\ ch /\ th ) /\ ( ta /\ et ) /\ ( ze /\ si /\
          rh ) ) -> mu ) $.
      $( Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) $)
      syl323anc $p |- ( ph -> mu ) $=
        ( wa jca syl313anc ) ABCDEFTGHIJKLMAEFNOUAPQRSUB $.
    $}

    ${
      syl332anc.9 $e |- ( ( ( ps /\ ch /\ th ) /\ ( ta /\ et /\ ze ) /\ ( si /\
          rh ) ) -> mu ) $.
      $( Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) $)
      syl332anc $p |- ( ph -> mu ) $=
        ( wa jca syl331anc ) ABCDEFGHITJKLMNOPAHIQRUASUB $.
    $}

    syl333anc.9 $e |- ( ph -> mu ) $.
    ${
      syl333anc.10 $e |- ( ( ( ps /\ ch /\ th ) /\ ( ta /\ et /\ ze )
          /\ ( si /\ rh /\ mu ) ) -> la ) $.
      $( A syllogism inference combined with contraction.  (Contributed by NM,
         10-Mar-2012.) $)
      syl333anc $p |- ( ph -> la ) $=
        ( w3a 3jca syl331anc ) ABCDEFGHIJUBKLMNOPQAHIJRSTUCUAUD $.
    $}
  $}

  ${
    syl3an1b.1 $e |- ( ph <-> ps ) $.
    syl3an1b.2 $e |- ( ( ps /\ ch /\ th ) -> ta ) $.
    $( A syllogism inference.  (Contributed by NM, 22-Aug-1995.) $)
    syl3an1b $p |- ( ( ph /\ ch /\ th ) -> ta ) $=
      ( biimpi syl3an1 ) ABCDEABFHGI $.
  $}

  ${
    syl3an2b.1 $e |- ( ph <-> ch ) $.
    syl3an2b.2 $e |- ( ( ps /\ ch /\ th ) -> ta ) $.
    $( A syllogism inference.  (Contributed by NM, 22-Aug-1995.) $)
    syl3an2b $p |- ( ( ps /\ ph /\ th ) -> ta ) $=
      ( biimpi syl3an2 ) ABCDEACFHGI $.
  $}

  ${
    syl3an3b.1 $e |- ( ph <-> th ) $.
    syl3an3b.2 $e |- ( ( ps /\ ch /\ th ) -> ta ) $.
    $( A syllogism inference.  (Contributed by NM, 22-Aug-1995.) $)
    syl3an3b $p |- ( ( ps /\ ch /\ ph ) -> ta ) $=
      ( biimpi syl3an3 ) ABCDEADFHGI $.
  $}

  ${
    syl3an1br.1 $e |- ( ps <-> ph ) $.
    syl3an1br.2 $e |- ( ( ps /\ ch /\ th ) -> ta ) $.
    $( A syllogism inference.  (Contributed by NM, 22-Aug-1995.) $)
    syl3an1br $p |- ( ( ph /\ ch /\ th ) -> ta ) $=
      ( biimpri syl3an1 ) ABCDEBAFHGI $.
  $}

  ${
    syl3an2br.1 $e |- ( ch <-> ph ) $.
    syl3an2br.2 $e |- ( ( ps /\ ch /\ th ) -> ta ) $.
    $( A syllogism inference.  (Contributed by NM, 22-Aug-1995.) $)
    syl3an2br $p |- ( ( ps /\ ph /\ th ) -> ta ) $=
      ( biimpri syl3an2 ) ABCDECAFHGI $.
  $}

  ${
    syl3an3br.1 $e |- ( th <-> ph ) $.
    syl3an3br.2 $e |- ( ( ps /\ ch /\ th ) -> ta ) $.
    $( A syllogism inference.  (Contributed by NM, 22-Aug-1995.) $)
    syl3an3br $p |- ( ( ps /\ ch /\ ph ) -> ta ) $=
      ( biimpri syl3an3 ) ABCDEDAFHGI $.
  $}

  ${
    syld3an3.1 $e |- ( ( ph /\ ps /\ ch ) -> th ) $.
    syld3an3.2 $e |- ( ( ph /\ ps /\ th ) -> ta ) $.
    $( A syllogism inference.  (Contributed by NM, 20-May-2007.) $)
    syld3an3 $p |- ( ( ph /\ ps /\ ch ) -> ta ) $=
      ( w3a simp1 simp2 syl3anc ) ABCHABDEABCIABCJFGK $.
  $}

  ${
    syld3an1.1 $e |- ( ( ch /\ ps /\ th ) -> ph ) $.
    syld3an1.2 $e |- ( ( ph /\ ps /\ th ) -> ta ) $.
    $( A syllogism inference.  (Contributed by NM, 7-Jul-2008.)  (Proof
       shortened by Wolf Lammen, 26-Jun-2022.) $)
    syld3an1 $p |- ( ( ch /\ ps /\ th ) -> ta ) $=
      ( w3a simp2 simp3 syl3anc ) CBDHABDEFCBDICBDJGK $.
  $}

  ${
    syld3an2.1 $e |- ( ( ph /\ ch /\ th ) -> ps ) $.
    syld3an2.2 $e |- ( ( ph /\ ps /\ th ) -> ta ) $.
    $( A syllogism inference.  (Contributed by NM, 20-May-2007.) $)
    syld3an2 $p |- ( ( ph /\ ch /\ th ) -> ta ) $=
      ( w3a simp1 simp3 syl3anc ) ACDHABDEACDIFACDJGK $.
  $}

  ${
    syl3anl1.1 $e |- ( ph -> ps ) $.
    syl3anl1.2 $e |- ( ( ( ps /\ ch /\ th ) /\ ta ) -> et ) $.
    $( A syllogism inference.  (Contributed by NM, 24-Feb-2005.) $)
    syl3anl1 $p |- ( ( ( ph /\ ch /\ th ) /\ ta ) -> et ) $=
      ( w3a 3anim1i sylan ) ACDIBCDIEFABCDGJHK $.
  $}

  ${
    syl3anl2.1 $e |- ( ph -> ch ) $.
    syl3anl2.2 $e |- ( ( ( ps /\ ch /\ th ) /\ ta ) -> et ) $.
    $( A syllogism inference.  (Contributed by NM, 24-Feb-2005.)  (Proof
       shortened by Wolf Lammen, 27-Jun-2022.) $)
    syl3anl2 $p |- ( ( ( ps /\ ph /\ th ) /\ ta ) -> et ) $=
      ( w3a 3anim2i sylan ) BADIBCDIEFACBDGJHK $.
  $}

  ${
    syl3anl3.1 $e |- ( ph -> th ) $.
    syl3anl3.2 $e |- ( ( ( ps /\ ch /\ th ) /\ ta ) -> et ) $.
    $( A syllogism inference.  (Contributed by NM, 24-Feb-2005.) $)
    syl3anl3 $p |- ( ( ( ps /\ ch /\ ph ) /\ ta ) -> et ) $=
      ( w3a 3anim3i sylan ) BCAIBCDIEFADBCGJHK $.
  $}

  ${
    syl3anl.1 $e |- ( ph -> ps ) $.
    syl3anl.2 $e |- ( ch -> th ) $.
    syl3anl.3 $e |- ( ta -> et ) $.
    syl3anl.4 $e |- ( ( ( ps /\ th /\ et ) /\ ze ) -> si ) $.
    $( A triple syllogism inference.  (Contributed by NM, 24-Dec-2006.) $)
    syl3anl $p |- ( ( ( ph /\ ch /\ ta ) /\ ze ) -> si ) $=
      ( w3a 3anim123i sylan ) ACEMBDFMGHABCDEFIJKNLO $.
  $}

  ${
    syl3anr1.1 $e |- ( ph -> ps ) $.
    syl3anr1.2 $e |- ( ( ch /\ ( ps /\ th /\ ta ) ) -> et ) $.
    $( A syllogism inference.  (Contributed by NM, 31-Jul-2007.) $)
    syl3anr1 $p |- ( ( ch /\ ( ph /\ th /\ ta ) ) -> et ) $=
      ( w3a 3anim1i sylan2 ) ADEICBDEIFABDEGJHK $.
  $}

  ${
    syl3anr2.1 $e |- ( ph -> th ) $.
    syl3anr2.2 $e |- ( ( ch /\ ( ps /\ th /\ ta ) ) -> et ) $.
    $( A syllogism inference.  (Contributed by NM, 1-Aug-2007.)  (Proof
       shortened by Wolf Lammen, 27-Jun-2022.) $)
    syl3anr2 $p |- ( ( ch /\ ( ps /\ ph /\ ta ) ) -> et ) $=
      ( w3a 3anim2i sylan2 ) BAEICBDEIFADBEGJHK $.
  $}

  ${
    syl3anr3.1 $e |- ( ph -> ta ) $.
    syl3anr3.2 $e |- ( ( ch /\ ( ps /\ th /\ ta ) ) -> et ) $.
    $( A syllogism inference.  (Contributed by NM, 23-Aug-2007.) $)
    syl3anr3 $p |- ( ( ch /\ ( ps /\ th /\ ph ) ) -> et ) $=
      ( w3a 3anim3i sylan2 ) BDAICBDEIFAEBDGJHK $.
  $}

  ${
    3anidm12.1 $e |- ( ( ph /\ ph /\ ps ) -> ch ) $.
    $( Inference from idempotent law for conjunction.  (Contributed by NM,
       7-Mar-2008.) $)
    3anidm12 $p |- ( ( ph /\ ps ) -> ch ) $=
      ( 3expib anabsi5 ) ABCAABCDEF $.
  $}

  ${
    3anidm13.1 $e |- ( ( ph /\ ps /\ ph ) -> ch ) $.
    $( Inference from idempotent law for conjunction.  (Contributed by NM,
       7-Mar-2008.) $)
    3anidm13 $p |- ( ( ph /\ ps ) -> ch ) $=
      ( 3com23 3anidm12 ) ABCABACDEF $.
  $}

  ${
    3anidm23.1 $e |- ( ( ph /\ ps /\ ps ) -> ch ) $.
    $( Inference from idempotent law for conjunction.  (Contributed by NM,
       1-Feb-2007.) $)
    3anidm23 $p |- ( ( ph /\ ps ) -> ch ) $=
      ( 3expa anabss3 ) ABCABBCDEF $.
  $}

  ${
    syl2an3an.1 $e |- ( ph -> ps ) $.
    syl2an3an.2 $e |- ( ph -> ch ) $.
    syl2an3an.3 $e |- ( th -> ta ) $.
    syl2an3an.4 $e |- ( ( ps /\ ch /\ ta ) -> et ) $.
    $( ~ syl3an with antecedents in standard conjunction form.  (Contributed by
       Alan Sare, 31-Aug-2016.) $)
    syl2an3an $p |- ( ( ph /\ th ) -> et ) $=
      ( syl3an 3anidm12 ) ADFABACDEFGHIJKL $.
  $}

  ${
    syl2an23an.1 $e |- ( ph -> ps ) $.
    syl2an23an.2 $e |- ( ph -> ch ) $.
    syl2an23an.3 $e |- ( ( th /\ ph ) -> ta ) $.
    syl2an23an.4 $e |- ( ( ps /\ ch /\ ta ) -> et ) $.
    $( Deduction related to ~ syl3an with antecedents in standard conjunction
       form.  (Contributed by Alan Sare, 31-Aug-2016.)  (Proof shortened by
       Wolf Lammen, 28-Jun-2022.) $)
    syl2an23an $p |- ( ( th /\ ph ) -> et ) $=
      ( wa syl2an3an anabss7 ) DAFABCDAKEFGHIJLM $.
  $}

  ${
    3ori.1 $e |- ( ph \/ ps \/ ch ) $.
    $( Infer implication from triple disjunction.  (Contributed by NM,
       26-Sep-2006.) $)
    3ori $p |- ( ( -. ph /\ -. ps ) -> ch ) $=
      ( wn wa wo ioran w3o df-3or mpbi ori sylbir ) AEBEFABGZECABHNCABCINCGDABC
      JKLM $.
  $}

  $( Disjunction of three antecedents.  (Contributed by NM, 8-Apr-1994.) $)
  3jao $p |- ( ( ( ph -> ps ) /\ ( ch -> ps ) /\ ( th -> ps ) ) ->
              ( ( ph \/ ch \/ th ) -> ps ) ) $=
    ( wi w3o wo jao df-3or syl7bi syl6 3imp ) ABEZCBEZDBEZACDFZBEZMNACGZBEZOQEA
    BCHPRDGSOBACDIRBDHJKL $.

  $( Disjunction of three antecedents.  (Contributed by NM, 13-Sep-2011.) $)
  3jaob $p |- ( ( ( ph \/ ch \/ th ) -> ps ) <->
              ( ( ph -> ps ) /\ ( ch -> ps ) /\ ( th -> ps ) ) ) $=
    ( w3o wi w3a 3mix1 imim1i 3mix2 3mix3 3jca 3jao impbii ) ACDEZBFZABFZCBFZDB
    FZGPQRSAOBACDHICOBCADJIDOBDACKILABCDMN $.

  ${
    3jaoi.1 $e |- ( ph -> ps ) $.
    3jaoi.2 $e |- ( ch -> ps ) $.
    3jaoi.3 $e |- ( th -> ps ) $.
    $( Disjunction of three antecedents (inference).  (Contributed by NM,
       12-Sep-1995.) $)
    3jaoi $p |- ( ( ph \/ ch \/ th ) -> ps ) $=
      ( wi w3a w3o 3pm3.2i 3jao ax-mp ) ABHZCBHZDBHZIACDJBHNOPEFGKABCDLM $.
  $}

  ${
    3jaod.1 $e |- ( ph -> ( ps -> ch ) ) $.
    3jaod.2 $e |- ( ph -> ( th -> ch ) ) $.
    3jaod.3 $e |- ( ph -> ( ta -> ch ) ) $.
    $( Disjunction of three antecedents (deduction).  (Contributed by NM,
       14-Oct-2005.) $)
    3jaod $p |- ( ph -> ( ( ps \/ th \/ ta ) -> ch ) ) $=
      ( wi w3o 3jao syl3anc ) ABCIDCIECIBDEJCIFGHBCDEKL $.
  $}

  ${
    3jaoian.1 $e |- ( ( ph /\ ps ) -> ch ) $.
    3jaoian.2 $e |- ( ( th /\ ps ) -> ch ) $.
    3jaoian.3 $e |- ( ( ta /\ ps ) -> ch ) $.
    $( Disjunction of three antecedents (inference).  (Contributed by NM,
       14-Oct-2005.) $)
    3jaoian $p |- ( ( ( ph \/ th \/ ta ) /\ ps ) -> ch ) $=
      ( w3o wi ex 3jaoi imp ) ADEIBCABCJDEABCFKDBCGKEBCHKLM $.
  $}

  ${
    3jaodan.1 $e |- ( ( ph /\ ps ) -> ch ) $.
    3jaodan.2 $e |- ( ( ph /\ th ) -> ch ) $.
    3jaodan.3 $e |- ( ( ph /\ ta ) -> ch ) $.
    $( Disjunction of three antecedents (deduction).  (Contributed by NM,
       14-Oct-2005.) $)
    3jaodan $p |- ( ( ph /\ ( ps \/ th \/ ta ) ) -> ch ) $=
      ( w3o ex 3jaod imp ) ABDEICABCDEABCFJADCGJAECHJKL $.
  $}

  ${
    mpjao3dan.1 $e |- ( ( ph /\ ps ) -> ch ) $.
    mpjao3dan.2 $e |- ( ( ph /\ th ) -> ch ) $.
    mpjao3dan.3 $e |- ( ( ph /\ ta ) -> ch ) $.
    mpjao3dan.4 $e |- ( ph -> ( ps \/ th \/ ta ) ) $.
    $( Eliminate a three-way disjunction in a deduction.  (Contributed by
       Thierry Arnoux, 13-Apr-2018.) $)
    mpjao3dan $p |- ( ph -> ch ) $=
      ( wo jaodan w3o df-3or sylib mpjaodan ) ABDJZCEABCDFGKHABDELPEJIBDEMNO $.
  $}

  ${
    3jaao.1 $e |- ( ph -> ( ps -> ch ) ) $.
    3jaao.2 $e |- ( th -> ( ta -> ch ) ) $.
    3jaao.3 $e |- ( et -> ( ze -> ch ) ) $.
    $( Inference conjoining and disjoining the antecedents of three
       implications.  (Contributed by Jeff Hankins, 15-Aug-2009.)  (Proof
       shortened by Andrew Salmon, 13-May-2011.) $)
    3jaao $p |- ( ( ph /\ th /\ et ) -> ( ( ps \/ ta \/ ze ) -> ch ) ) $=
      ( w3a wi 3ad2ant1 3ad2ant2 3ad2ant3 3jaod ) ADFKBCEGADBCLFHMDAECLFINFAGCL
      DJOP $.
  $}

  ${
    syl3an9b.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    syl3an9b.2 $e |- ( th -> ( ch <-> ta ) ) $.
    syl3an9b.3 $e |- ( et -> ( ta <-> ze ) ) $.
    $( Nested syllogism inference conjoining 3 dissimilar antecedents.
       (Contributed by NM, 1-May-1995.) $)
    syl3an9b $p |- ( ( ph /\ th /\ et ) -> ( ps <-> ze ) ) $=
      ( wb wa sylan9bb 3impa ) ADFBGKADLBEFGABCDEHIMJMN $.
  $}

  ${
    bi3d.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    bi3d.2 $e |- ( ph -> ( th <-> ta ) ) $.
    bi3d.3 $e |- ( ph -> ( et <-> ze ) ) $.
    $( Deduction joining 3 equivalences to form equivalence of disjunctions.
       (Contributed by NM, 20-Apr-1994.) $)
    3orbi123d $p |- ( ph -> ( ( ps \/ th \/ et ) <-> ( ch \/ ta \/ ze ) ) ) $=
      ( wo w3o orbi12d df-3or 3bitr4g ) ABDKZFKCEKZGKBDFLCEGLAPQFGABCDEHIMJMBDF
      NCEGNO $.

    $( Deduction joining 3 equivalences to form equivalence of conjunctions.
       (Contributed by NM, 22-Apr-1994.) $)
    3anbi123d $p |- ( ph -> ( ( ps /\ th /\ et ) <-> ( ch /\ ta /\ ze ) ) ) $=
      ( wa w3a anbi12d df-3an 3bitr4g ) ABDKZFKCEKZGKBDFLCEGLAPQFGABCDEHIMJMBDF
      NCEGNO $.
  $}

  ${
    3anbi12d.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    3anbi12d.2 $e |- ( ph -> ( th <-> ta ) ) $.
    $( Deduction conjoining and adding a conjunct to equivalences.
       (Contributed by NM, 8-Sep-2006.) $)
    3anbi12d $p |- ( ph -> ( ( ps /\ th /\ et ) <-> ( ch /\ ta /\ et ) ) ) $=
      ( biidd 3anbi123d ) ABCDEFFGHAFIJ $.

    $( Deduction conjoining and adding a conjunct to equivalences.
       (Contributed by NM, 8-Sep-2006.) $)
    3anbi13d $p |- ( ph -> ( ( ps /\ et /\ th ) <-> ( ch /\ et /\ ta ) ) ) $=
      ( biidd 3anbi123d ) ABCFFDEGAFIHJ $.

    $( Deduction conjoining and adding a conjunct to equivalences.
       (Contributed by NM, 8-Sep-2006.) $)
    3anbi23d $p |- ( ph -> ( ( et /\ ps /\ th ) <-> ( et /\ ch /\ ta ) ) ) $=
      ( biidd 3anbi123d ) AFFBCDEAFIGHJ $.
  $}

  ${
    3anbi1d.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Deduction adding conjuncts to an equivalence.  (Contributed by NM,
       8-Sep-2006.) $)
    3anbi1d $p |- ( ph -> ( ( ps /\ th /\ ta ) <-> ( ch /\ th /\ ta ) ) ) $=
      ( biidd 3anbi12d ) ABCDDEFADGH $.

    $( Deduction adding conjuncts to an equivalence.  (Contributed by NM,
       8-Sep-2006.) $)
    3anbi2d $p |- ( ph -> ( ( th /\ ps /\ ta ) <-> ( th /\ ch /\ ta ) ) ) $=
      ( biidd 3anbi12d ) ADDBCEADGFH $.

    $( Deduction adding conjuncts to an equivalence.  (Contributed by NM,
       8-Sep-2006.) $)
    3anbi3d $p |- ( ph -> ( ( th /\ ta /\ ps ) <-> ( th /\ ta /\ ch ) ) ) $=
      ( biidd 3anbi13d ) ADDBCEADGFH $.
  $}

  ${
    3anim123d.1 $e |- ( ph -> ( ps -> ch ) ) $.
    3anim123d.2 $e |- ( ph -> ( th -> ta ) ) $.
    3anim123d.3 $e |- ( ph -> ( et -> ze ) ) $.
    $( Deduction joining 3 implications to form implication of conjunctions.
       (Contributed by NM, 24-Feb-2005.) $)
    3anim123d $p |- ( ph -> ( ( ps /\ th /\ et ) -> ( ch /\ ta /\ ze ) ) ) $=
      ( wa w3a anim12d df-3an 3imtr4g ) ABDKZFKCEKZGKBDFLCEGLAPQFGABCDEHIMJMBDF
      NCEGNO $.

    $( Deduction joining 3 implications to form implication of disjunctions.
       (Contributed by NM, 4-Apr-1997.) $)
    3orim123d $p |- ( ph -> ( ( ps \/ th \/ et ) -> ( ch \/ ta \/ ze ) ) ) $=
      ( wo w3o orim12d df-3or 3imtr4g ) ABDKZFKCEKZGKBDFLCEGLAPQFGABCDEHIMJMBDF
      NCEGNO $.
  $}

  $( Rearrangement of 6 conjuncts.  (Contributed by NM, 13-Mar-1995.) $)
  an6 $p |- ( ( ( ph /\ ps /\ ch ) /\ ( th /\ ta /\ et ) ) <->
              ( ( ph /\ th ) /\ ( ps /\ ta ) /\ ( ch /\ et ) ) ) $=
    ( wa w3a an4 anbi1i bitri df-3an anbi12i 3bitr4i ) ABGZCGZDEGZFGZGZADGZBEGZ
    GZCFGZGZABCHZDEFHZGTUAUCHSOQGZUCGUDOCQFIUGUBUCABDEIJKUEPUFRABCLDEFLMTUAUCLN
    $.

  $( Analogue of ~ an4 for triple conjunction.  (Contributed by Scott Fenton,
     16-Mar-2011.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
  3an6 $p |- ( ( ( ph /\ ps ) /\ ( ch /\ th ) /\ ( ta /\ et ) ) <->
                ( ( ph /\ ch /\ ta ) /\ ( ps /\ th /\ et ) ) ) $=
    ( w3a wa an6 bicomi ) ACEGBDFGHABHCDHEFHGACEBDFIJ $.

  $( Analogue of ~ or4 for triple conjunction.  (Contributed by Scott Fenton,
     16-Mar-2011.) $)
  3or6 $p |- ( ( ( ph \/ ps ) \/ ( ch \/ th ) \/ ( ta \/ et ) ) <->
                ( ( ph \/ ch \/ ta ) \/ ( ps \/ th \/ et ) ) ) $=
    ( wo w3o or4 orbi1i bitr2i df-3or orbi12i 3bitr4i ) ABGZCDGZGZEFGZGZACGZEGZ
    BDGZFGZGZOPRHACEHZBDFHZGUDTUBGZRGSTEUBFIUGQRACBDIJKOPRLUEUAUFUCACELBDFLMN
    $.

  ${
    mp3an1.1 $e |- ph $.
    mp3an1.2 $e |- ( ( ph /\ ps /\ ch ) -> th ) $.
    $( An inference based on modus ponens.  (Contributed by NM,
       21-Nov-1994.) $)
    mp3an1 $p |- ( ( ps /\ ch ) -> th ) $=
      ( wa 3expb mpan ) ABCGDEABCDFHI $.
  $}

  ${
    mp3an2.1 $e |- ps $.
    mp3an2.2 $e |- ( ( ph /\ ps /\ ch ) -> th ) $.
    $( An inference based on modus ponens.  (Contributed by NM,
       21-Nov-1994.) $)
    mp3an2 $p |- ( ( ph /\ ch ) -> th ) $=
      ( 3expa mpanl2 ) ABCDEABCDFGH $.
  $}

  ${
    mp3an3.1 $e |- ch $.
    mp3an3.2 $e |- ( ( ph /\ ps /\ ch ) -> th ) $.
    $( An inference based on modus ponens.  (Contributed by NM,
       21-Nov-1994.) $)
    mp3an3 $p |- ( ( ph /\ ps ) -> th ) $=
      ( wa 3expia mpi ) ABGCDEABCDFHI $.
  $}

  ${
    mp3an12.1 $e |- ph $.
    mp3an12.2 $e |- ps $.
    mp3an12.3 $e |- ( ( ph /\ ps /\ ch ) -> th ) $.
    $( An inference based on modus ponens.  (Contributed by NM,
       13-Jul-2005.) $)
    mp3an12 $p |- ( ch -> th ) $=
      ( mp3an1 mpan ) BCDFABCDEGHI $.
  $}

  ${
    mp3an13.1 $e |- ph $.
    mp3an13.2 $e |- ch $.
    mp3an13.3 $e |- ( ( ph /\ ps /\ ch ) -> th ) $.
    $( An inference based on modus ponens.  (Contributed by NM,
       14-Jul-2005.) $)
    mp3an13 $p |- ( ps -> th ) $=
      ( mp3an3 mpan ) ABDEABCDFGHI $.
  $}

  ${
    mp3an23.1 $e |- ps $.
    mp3an23.2 $e |- ch $.
    mp3an23.3 $e |- ( ( ph /\ ps /\ ch ) -> th ) $.
    $( An inference based on modus ponens.  (Contributed by NM,
       14-Jul-2005.) $)
    mp3an23 $p |- ( ph -> th ) $=
      ( mp3an3 mpan2 ) ABDEABCDFGHI $.
  $}

  ${
    mp3an1i.1 $e |- ps $.
    mp3an1i.2 $e |- ( ph -> ( ( ps /\ ch /\ th ) -> ta ) ) $.
    $( An inference based on modus ponens.  (Contributed by NM, 5-Jul-2005.) $)
    mp3an1i $p |- ( ph -> ( ( ch /\ th ) -> ta ) ) $=
      ( wa wi w3a com12 mp3an1 ) CDHAEBCDAEIFABCDJEGKLK $.
  $}

  ${
    mp3anl1.1 $e |- ph $.
    mp3anl1.2 $e |- ( ( ( ph /\ ps /\ ch ) /\ th ) -> ta ) $.
    $( An inference based on modus ponens.  (Contributed by NM,
       24-Feb-2005.) $)
    mp3anl1 $p |- ( ( ( ps /\ ch ) /\ th ) -> ta ) $=
      ( wa wi w3a ex mp3an1 imp ) BCHDEABCDEIFABCJDEGKLM $.
  $}

  ${
    mp3anl2.1 $e |- ps $.
    mp3anl2.2 $e |- ( ( ( ph /\ ps /\ ch ) /\ th ) -> ta ) $.
    $( An inference based on modus ponens.  (Contributed by NM,
       24-Feb-2005.) $)
    mp3anl2 $p |- ( ( ( ph /\ ch ) /\ th ) -> ta ) $=
      ( wa wi w3a ex mp3an2 imp ) ACHDEABCDEIFABCJDEGKLM $.
  $}

  ${
    mp3anl3.1 $e |- ch $.
    mp3anl3.2 $e |- ( ( ( ph /\ ps /\ ch ) /\ th ) -> ta ) $.
    $( An inference based on modus ponens.  (Contributed by NM,
       24-Feb-2005.) $)
    mp3anl3 $p |- ( ( ( ph /\ ps ) /\ th ) -> ta ) $=
      ( wa wi w3a ex mp3an3 imp ) ABHDEABCDEIFABCJDEGKLM $.
  $}

  ${
    mp3anr1.1 $e |- ps $.
    mp3anr1.2 $e |- ( ( ph /\ ( ps /\ ch /\ th ) ) -> ta ) $.
    $( An inference based on modus ponens.  (Contributed by NM, 4-Nov-2006.) $)
    mp3anr1 $p |- ( ( ph /\ ( ch /\ th ) ) -> ta ) $=
      ( wa w3a ancoms mp3anl1 ) CDHAEBCDAEFABCDIEGJKJ $.
  $}

  ${
    mp3anr2.1 $e |- ch $.
    mp3anr2.2 $e |- ( ( ph /\ ( ps /\ ch /\ th ) ) -> ta ) $.
    $( An inference based on modus ponens.  (Contributed by NM,
       24-Nov-2006.) $)
    mp3anr2 $p |- ( ( ph /\ ( ps /\ th ) ) -> ta ) $=
      ( wa w3a ancoms mp3anl2 ) BDHAEBCDAEFABCDIEGJKJ $.
  $}

  ${
    mp3anr3.1 $e |- th $.
    mp3anr3.2 $e |- ( ( ph /\ ( ps /\ ch /\ th ) ) -> ta ) $.
    $( An inference based on modus ponens.  (Contributed by NM,
       19-Oct-2007.) $)
    mp3anr3 $p |- ( ( ph /\ ( ps /\ ch ) ) -> ta ) $=
      ( wa w3a ancoms mp3anl3 ) BCHAEBCDAEFABCDIEGJKJ $.
  $}

  ${
    mp3an.1 $e |- ph $.
    mp3an.2 $e |- ps $.
    mp3an.3 $e |- ch $.
    mp3an.4 $e |- ( ( ph /\ ps /\ ch ) -> th ) $.
    $( An inference based on modus ponens.  (Contributed by NM,
       14-May-1999.) $)
    mp3an $p |- th $=
      ( mp3an1 mp2an ) BCDFGABCDEHIJ $.
  $}

  ${
    mpd3an3.2 $e |- ( ( ph /\ ps ) -> ch ) $.
    mpd3an3.3 $e |- ( ( ph /\ ps /\ ch ) -> th ) $.
    $( An inference based on modus ponens.  (Contributed by NM, 8-Nov-2007.) $)
    mpd3an3 $p |- ( ( ph /\ ps ) -> th ) $=
      ( wa 3expa mpdan ) ABGCDEABCDFHI $.
  $}

  ${
    mpd3an23.1 $e |- ( ph -> ps ) $.
    mpd3an23.2 $e |- ( ph -> ch ) $.
    mpd3an23.3 $e |- ( ( ph /\ ps /\ ch ) -> th ) $.
    $( An inference based on modus ponens.  (Contributed by NM, 4-Dec-2006.) $)
    mpd3an23 $p |- ( ph -> th ) $=
      ( id syl3anc ) AABCDAHEFGI $.
  $}

  ${
    mp3and.1 $e |- ( ph -> ps ) $.
    mp3and.2 $e |- ( ph -> ch ) $.
    mp3and.3 $e |- ( ph -> th ) $.
    mp3and.4 $e |- ( ph -> ( ( ps /\ ch /\ th ) -> ta ) ) $.
    $( A deduction based on modus ponens.  (Contributed by Mario Carneiro,
       24-Dec-2016.) $)
    mp3and $p |- ( ph -> ta ) $=
      ( w3a 3jca mpd ) ABCDJEABCDFGHKIL $.
  $}

  ${
    mp3an12i.1 $e |- ph $.
    mp3an12i.2 $e |- ps $.
    mp3an12i.3 $e |- ( ch -> th ) $.
    mp3an12i.4 $e |- ( ( ph /\ ps /\ th ) -> ta ) $.
    $( ~ mp3an with antecedents in standard conjunction form and with one
       hypothesis an implication.  (Contributed by Alan Sare, 28-Aug-2016.) $)
    mp3an12i $p |- ( ch -> ta ) $=
      ( mp3an12 syl ) CDEHABDEFGIJK $.
  $}

  ${
    mp3an2i.1 $e |- ph $.
    mp3an2i.2 $e |- ( ps -> ch ) $.
    mp3an2i.3 $e |- ( ps -> th ) $.
    mp3an2i.4 $e |- ( ( ph /\ ch /\ th ) -> ta ) $.
    $( ~ mp3an with antecedents in standard conjunction form and with two
       hypotheses which are implications.  (Contributed by Alan Sare,
       28-Aug-2016.) $)
    mp3an2i $p |- ( ps -> ta ) $=
      ( mp3an1 syl2anc ) BCDEGHACDEFIJK $.
  $}

  ${
    mp3an3an.1 $e |- ph $.
    mp3an3an.2 $e |- ( ps -> ch ) $.
    mp3an3an.3 $e |- ( th -> ta ) $.
    mp3an3an.4 $e |- ( ( ph /\ ch /\ ta ) -> et ) $.
    $( ~ mp3an with antecedents in standard conjunction form and with two
       hypotheses which are implications.  (Contributed by Alan Sare,
       28-Aug-2016.) $)
    mp3an3an $p |- ( ( ps /\ th ) -> et ) $=
      ( mp3an1 syl2an ) BCEFDHIACEFGJKL $.
  $}

  ${
    mp3an2ani.1 $e |- ph $.
    mp3an2ani.2 $e |- ( ps -> ch ) $.
    mp3an2ani.3 $e |- ( ( ps /\ th ) -> ta ) $.
    mp3an2ani.4 $e |- ( ( ph /\ ch /\ ta ) -> et ) $.
    $( An elimination deduction.  (Contributed by Alan Sare, 17-Oct-2017.) $)
    mp3an2ani $p |- ( ( ps /\ th ) -> et ) $=
      ( wa mp3an3an anabss5 ) BDFABCBDKEFGHIJLM $.
  $}

  ${
    biimp3a.1 $e |- ( ( ph /\ ps ) -> ( ch <-> th ) ) $.
    $( Infer implication from a logical equivalence.  Similar to ~ biimpa .
       (Contributed by NM, 4-Sep-2005.) $)
    biimp3a $p |- ( ( ph /\ ps /\ ch ) -> th ) $=
      ( wa biimpa 3impa ) ABCDABFCDEGH $.

    $( Infer implication from a logical equivalence.  Similar to ~ biimpar .
       (Contributed by NM, 2-Jan-2009.) $)
    biimp3ar $p |- ( ( ph /\ ps /\ th ) -> ch ) $=
      ( exbiri 3imp ) ABDCABCDEFG $.
  $}

  ${
    3anandis.1 $e |- ( ( ( ph /\ ps ) /\ ( ph /\ ch ) /\ ( ph /\ th ) )
                      -> ta ) $.
    $( Inference that undistributes a triple conjunction in the antecedent.
       (Contributed by NM, 18-Apr-2007.) $)
    3anandis $p |- ( ( ph /\ ( ps /\ ch /\ th ) ) -> ta ) $=
      ( w3a wa simpl simpr1 simpr2 simpr3 syl222anc ) ABCDGZHABACADEANIZABCDJOA
      BCDKOABCDLFM $.
  $}

  ${
    3anandirs.1 $e |- ( ( ( ph /\ th ) /\ ( ps /\ th ) /\ ( ch /\ th ) )
                      -> ta ) $.
    $( Inference that undistributes a triple conjunction in the antecedent.
       (Contributed by NM, 25-Jul-2006.) $)
    3anandirs $p |- ( ( ( ph /\ ps /\ ch ) /\ th ) -> ta ) $=
      ( w3a wa simpl1 simpr simpl2 simpl3 syl222anc ) ABCGZDHADBDCDEABCDINDJZAB
      CDKOABCDLOFM $.
  $}

  ${
    ecase23d.1 $e |- ( ph -> -. ch ) $.
    ecase23d.2 $e |- ( ph -> -. th ) $.
    ecase23d.3 $e |- ( ph -> ( ps \/ ch \/ th ) ) $.
    $( Deduction for elimination by cases.  (Contributed by NM,
       22-Apr-1994.) $)
    ecase23d $p |- ( ph -> ps ) $=
      ( wo wn ioran sylanbrc w3o 3orass sylib ord mt3d ) ABCDHZACIDIQIEFCDJKABQ
      ABCDLBQHGBCDMNOP $.
  $}

  ${
    3ecase.1 $e |- ( -. ph -> th ) $.
    3ecase.2 $e |- ( -. ps -> th ) $.
    3ecase.3 $e |- ( -. ch -> th ) $.
    3ecase.4 $e |- ( ( ph /\ ps /\ ch ) -> th ) $.
    $( Inference for elimination by cases.  (Contributed by NM,
       13-Jul-2005.) $)
    3ecase $p |- th $=
      ( wi 3exp wn 2a1d pm2.61i pm2.61nii ) BCDABCDIIABCDHJAKDBCELMFGN $.
  $}

  ${
    3biorfd.1 $e |- ( ph -> -. th ) $.
    $( A disjunction is equivalent to a threefold disjunction with single
       falsehood, analogous to ~ biorf .  (Contributed by Alexander van der
       Vekens, 8-Sep-2017.) $)
    3bior1fd $p |- ( ph -> ( ( ch \/ ps ) <-> ( th \/ ch \/ ps ) ) ) $=
      ( wo w3o wn wb biorf syl 3orass syl6bbr ) ACBFZDNFZDCBGADHNOIEDNJKDCBLM
      $.

    $( A disjunction is equivalent to a threefold disjunction with single
       falsehood of a conjunction.  (Contributed by Alexander van der Vekens,
       8-Sep-2017.) $)
    3bior1fand $p |- ( ph -> ( ( ch \/ ps )
                       <-> ( ( th /\ ta ) \/ ch \/ ps ) ) ) $=
      ( wa intnanrd 3bior1fd ) ABCDEGADEFHI $.

    3biorfd.2 $e |- ( ph -> -. ch ) $.
    $( A wff is equivalent to its threefold disjunction with double falsehood,
       analogous to ~ biorf .  (Contributed by Alexander van der Vekens,
       8-Sep-2017.) $)
    3bior2fd $p |- ( ph -> ( ps <-> ( th \/ ch \/ ps ) ) ) $=
      ( wo w3o wn wb biorf syl 3bior1fd bitrd ) ABCBGZDCBHACIBOJFCBKLABCDEMN $.
  $}

  ${
    3biantd.1 $e |- ( ph -> th ) $.
    $( A conjunction is equivalent to a threefold conjunction with single
       truth, analogous to ~ biantrud .  (Contributed by Alexander van der
       Vekens, 26-Sep-2017.) $)
    3biant1d $p |- ( ph -> ( ( ch /\ ps ) <-> ( th /\ ch /\ ps ) ) ) $=
      ( wa w3a biantrurd 3anass syl6bbr ) ACBFZDKFDCBGADKEHDCBIJ $.
  $}

  ${
    intn3and.1 $e |- ( ph -> -. ps ) $.
    $( Introduction of a triple conjunct inside a contradiction.  (Contributed
       by FL, 27-Dec-2007.)  (Proof shortened by Andrew Salmon,
       26-Jun-2011.) $)
    intn3an1d $p |- ( ph -> -. ( ps /\ ch /\ th ) ) $=
      ( w3a simp1 nsyl ) ABBCDFEBCDGH $.

    $( Introduction of a triple conjunct inside a contradiction.  (Contributed
       by FL, 27-Dec-2007.)  (Proof shortened by Andrew Salmon,
       26-Jun-2011.) $)
    intn3an2d $p |- ( ph -> -. ( ch /\ ps /\ th ) ) $=
      ( w3a simp2 nsyl ) ABCBDFECBDGH $.

    $( Introduction of a triple conjunct inside a contradiction.  (Contributed
       by FL, 27-Dec-2007.)  (Proof shortened by Andrew Salmon,
       26-Jun-2011.) $)
    intn3an3d $p |- ( ph -> -. ( ch /\ th /\ ps ) ) $=
      ( w3a simp3 nsyl ) ABCDBFECDBGH $.
  $}

  $( Distribution of conjunction over threefold conjunction.  (Contributed by
     Thierry Arnoux, 8-Apr-2019.) $)
  an3andi $p |- ( ( ph /\ ( ps /\ ch /\ th ) ) <->
               ( ( ph /\ ps ) /\ ( ph /\ ch ) /\ ( ph /\ th ) ) ) $=
    ( w3a wa df-3an anbi2i anandi anbi1i 3bitri bitr4i ) ABCDEZFZABFZACFZFZADFZ
    FZOPRENABCFZDFZFATFZRFSMUAABCDGHATDIUBQRABCIJKOPRGL $.

  $( Rearrange a 9-fold conjunction.  (Contributed by Thierry Arnoux,
     14-Apr-2019.) $)
  an33rean $p |- (
        ( ( ph /\ ps /\ ch ) /\ ( th /\ ta /\ et ) /\ ( ze /\ si /\ rh ) ) <->
    ( ( ph /\ ta /\ rh ) /\ ( ( ps /\ th ) /\ ( et /\ si ) /\ ( ch /\ ze ) ) )
    ) $=
    ( w3a wa 3anass 3anan12 3an6 an4 anbi2i 3bitr4i anbi1i df-3an 3bitri 3anrev
    bitri 3anbi123i 3ancomb ) ABCJZDEFJZGHIJZJABCKZKZEDFKZKZIHGKZKZJAEIJZUHUJUL
    JZKUNBDKZFHKCGKJZKUEUIUFUKUGUMABCLDEFMUGIHGJUMGHIUAIHGLUBUCAUHEUJIULNUOUQUN
    UOUHDHKZFGKZJZUPCHKZUSJZUQUHUJULKZKUHURUSKZKUOUTVCVDUHDFHGOPUHUJULLUHURUSLQ
    UHURKZUSKUPVAKZUSKUTVBVEVFUSBCDHORUHURUSSUPVAUSSQBCFJZDHGJZKBFCJZVHKVBUQVGV
    IVHBCFUDRBDCHFGNBDFHCGNQTPT $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Logical "nand" (Sheffer stroke)
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Declare connective for alternative denial ("nand"). $)
  $c -/\ $.  $( Overlined "wedge" (read:  "nand") $)

  $( Extend wff definition to include alternative denial ("nand"). $)
  wnan $a wff ( ph -/\ ps ) $.

  $( Define incompatibility, or alternative denial ("not-and" or "nand").  This
     is also called the Sheffer stroke, represented by a vertical bar, but we
     use a different symbol to avoid ambiguity with other uses of the vertical
     bar.  In the second edition of Principia Mathematica (1927), Russell and
     Whitehead used the Sheffer stroke and suggested it as a replacement for
     the "or" and "not" operations of the first edition.  However, in practice,
     "or" and "not" are more widely used.  After we define the constant true
     ` T. ` ( ~ df-tru ) and the constant false ` F. ` ( ~ df-fal ), we will be
     able to prove these truth table values: ` ( ( T. -/\ T. ) <-> F. ) `
     ( ~ trunantru ), ` ( ( T. -/\ F. ) <-> T. ) ` ( ~ trunanfal ),
     ` ( ( F. -/\ T. ) <-> T. ) ` ( ~ falnantru ), and
     ` ( ( F. -/\ F. ) <-> T. ) ` ( ~ falnanfal ).  Contrast with ` /\ `
     ( ~ df-an ), ` \/ ` ( ~ df-or ), ` -> ` ( ~ wi ), and ` \/_ `
     ( ~ df-xor ).  (Contributed by Jeff Hoffman, 19-Nov-2007.) $)
  df-nan $a |- ( ( ph -/\ ps ) <-> -. ( ph /\ ps ) ) $.

  $( Conjunction in terms of alternative denial.  (Contributed by Mario
     Carneiro, 9-May-2015.) $)
  nanan $p |- ( ( ph /\ ps ) <-> -. ( ph -/\ ps ) ) $=
    ( wnan wa df-nan con2bii ) ABCABDABEF $.

  $( Alternative denial in terms of our primitive connectives (implication and
     negation).  (Contributed by WL, 26-Jun-2020.) $)
  nanimn $p |- ( ( ph -/\ ps ) <-> ( ph -> -. ps ) ) $=
    ( wnan wa wn wi df-nan imnan bitr4i ) ABCABDEABEFABGABHI $.

  $( Alternative denial in terms of disjunction and negation.  This explains
     the name "alternative denial".  (Contributed by BJ, 19-Oct-2022.) $)
  nanor $p |- ( ( ph -/\ ps ) <-> ( -. ph \/ -. ps ) ) $=
    ( wnan wa wn wo df-nan ianor bitri ) ABCABDEAEBEFABGABHI $.

  $( Alternative denial is commutative.  Remark: alternative denial is not
     associative, see ~ nanass .  (Contributed by Mario Carneiro, 9-May-2015.)
     (Proof shortened by Wolf Lammen, 26-Jun-2020.) $)
  nancom $p |- ( ( ph -/\ ps ) <-> ( ps -/\ ph ) ) $=
    ( wn wi wnan con2b nanimn 3bitr4i ) ABCDBACDABEBAEABFABGBAGH $.

  $( Obsolete proof of ~ nancom as of 19-Oct-2022.  (Contributed by Mario
     Carneiro, 9-May-2015.)  (Proof shortened by Wolf Lammen, 7-Mar-2020.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  nancomOLD $p |- ( ( ph -/\ ps ) <-> ( ps -/\ ph ) ) $=
    ( wnan wa wn df-nan ancom xchbinx bitr4i ) ABCZBADZEBACJABDKABFABGHBAFI $.

  $( Nested alternative denials.  (Contributed by Jeff Hoffman, 19-Nov-2007.)
     (Proof shortened by Wolf Lammen, 26-Jun-2020.) $)
  nannan $p |- ( ( ph -/\ ( ps -/\ ch ) ) <-> ( ph -> ( ps /\ ch ) ) ) $=
    ( wnan wn wi wa nanimn nanan imbi2i bitr4i ) ABCDZDALEZFABCGZFALHNMABCIJK
    $.

  $( Obsolete proof of ~ nannan as of 19-Oct-2022.  (Contributed by Jeff
     Hoffman, 19-Nov-2007.)  (Proof shortened by Wolf Lammen, 7-Mar-2020.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  nannanOLD $p |- ( ( ph -/\ ( ps -/\ ch ) ) <-> ( ph -> ( ps /\ ch ) ) ) $=
    ( wnan wn wi wa imnan nanan imbi2i df-nan 3bitr4ri ) ABCDZEZFAMGEABCGZFAMDA
    MHONABCIJAMKL $.

  $( Implication in terms of alternative denial.  (Contributed by Jeff Hoffman,
     19-Nov-2007.) $)
  nanim $p |- ( ( ph -> ps ) <-> ( ph -/\ ( ps -/\ ps ) ) ) $=
    ( wnan wa wi nannan anidmdbi bitr2i ) ABBCCABBDEABEABBFABGH $.

  $( Negation in terms of alternative denial.  (Contributed by Jeff Hoffman,
     19-Nov-2007.)  (Revised by Wolf Lammen, 26-Jun-2020.) $)
  nannot $p |- ( -. ph <-> ( ph -/\ ph ) ) $=
    ( wnan wn wi nanimn pm4.8 bitr2i ) AABAACZDHAAEAFG $.

  $( Obsolete proof of ~ nannot as of 19-Oct-2022.  (Contributed by Jeff
     Hoffman, 19-Nov-2007.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  nannotOLD $p |- ( -. ps <-> ( ps -/\ ps ) ) $=
    ( wnan wn wa df-nan anidm xchbinx bicomi ) AABZACIAADAAAEAFGH $.

  $( Biconditional in terms of alternative denial.  (Contributed by Jeff
     Hoffman, 19-Nov-2007.)  (Proof shortened by Wolf Lammen, 27-Jun-2020.) $)
  nanbi $p |- ( ( ph <-> ps ) <->
          ( ( ph -/\ ps ) -/\ ( ( ph -/\ ph ) -/\ ( ps -/\ ps ) ) ) ) $=
    ( wb wnan wa wi wn dfbi3 df-nan bicomi nannot anbi12i imbi12i 3bitri nannan
    wo df-or bitr4i ) ABCZABDZAADZBBDZEZFZTUAUBDDSABEZAGZBGZEZPUEGZUHFUDABHUEUH
    QUITUHUCTUIABIJUFUAUGUBAKBKLMNTUAUBOR $.

  $( Introduce a right anti-conjunct to both sides of a logical equivalence.
     (Contributed by Anthony Hart, 1-Sep-2011.)  (Proof shortened by Wolf
     Lammen, 27-Jun-2020.) $)
  nanbi1 $p |- ( ( ph <-> ps ) -> ( ( ph -/\ ch ) <-> ( ps -/\ ch ) ) ) $=
    ( wb wn wi wnan imbi1 nanimn 3bitr4g ) ABDACEZFBKFACGBCGABKHACIBCIJ $.

  $( Obsolete proof of ~ nanbi1 as of 19-Oct-2022.  (Contributed by Anthony
     Hart, 1-Sep-2011.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  nanbi1OLD $p |- ( ( ph <-> ps ) -> ( ( ph -/\ ch ) <-> ( ps -/\ ch ) ) ) $=
    ( wb wa wn wnan anbi1 notbid df-nan 3bitr4g ) ABDZACEZFBCEZFACGBCGLMNABCHIA
    CJBCJK $.

  $( Introduce a left anti-conjunct to both sides of a logical equivalence.
     (Contributed by Anthony Hart, 1-Sep-2011.)  (Proof shortened by SF,
     2-Jan-2018.) $)
  nanbi2 $p |- ( ( ph <-> ps ) -> ( ( ch -/\ ph ) <-> ( ch -/\ ps ) ) ) $=
    ( wb wnan nanbi1 nancom 3bitr4g ) ABDACEBCECAECBEABCFCAGCBGH $.

  $( Join two logical equivalences with anti-conjunction.  (Contributed by SF,
     2-Jan-2018.) $)
  nanbi12 $p |- ( ( ( ph <-> ps ) /\ ( ch <-> th ) ) ->
                                       ( ( ph -/\ ch ) <-> ( ps -/\ th ) ) ) $=
    ( wb wnan nanbi1 nanbi2 sylan9bb ) ABEACFBCFCDEBDFABCGCDBHI $.

  ${
    nanbii.1 $e |- ( ph <-> ps ) $.
    $( Introduce a right anti-conjunct to both sides of a logical equivalence.
       (Contributed by SF, 2-Jan-2018.) $)
    nanbi1i $p |- ( ( ph -/\ ch ) <-> ( ps -/\ ch ) ) $=
      ( wb wnan nanbi1 ax-mp ) ABEACFBCFEDABCGH $.

    $( Introduce a left anti-conjunct to both sides of a logical equivalence.
       (Contributed by SF, 2-Jan-2018.) $)
    nanbi2i $p |- ( ( ch -/\ ph ) <-> ( ch -/\ ps ) ) $=
      ( wb wnan nanbi2 ax-mp ) ABECAFCBFEDABCGH $.

    nanbi12i.2 $e |- ( ch <-> th ) $.
    $( Join two logical equivalences with anti-conjunction.  (Contributed by
       SF, 2-Jan-2018.) $)
    nanbi12i $p |- ( ( ph -/\ ch ) <-> ( ps -/\ th ) ) $=
      ( wb wnan nanbi12 mp2an ) ABGCDGACHBDHGEFABCDIJ $.
  $}

  ${
    nanbid.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Introduce a right anti-conjunct to both sides of a logical equivalence.
       (Contributed by SF, 2-Jan-2018.) $)
    nanbi1d $p |- ( ph -> ( ( ps -/\ th ) <-> ( ch -/\ th ) ) ) $=
      ( wb wnan nanbi1 syl ) ABCFBDGCDGFEBCDHI $.

    $( Introduce a left anti-conjunct to both sides of a logical equivalence.
       (Contributed by SF, 2-Jan-2018.) $)
    nanbi2d $p |- ( ph -> ( ( th -/\ ps ) <-> ( th -/\ ch ) ) ) $=
      ( wb wnan nanbi2 syl ) ABCFDBGDCGFEBCDHI $.

    nanbi12d.2 $e |- ( ph -> ( th <-> ta ) ) $.
    $( Join two logical equivalences with anti-conjunction.  (Contributed by
       Scott Fenton, 2-Jan-2018.) $)
    nanbi12d $p |- ( ph -> ( ( ps -/\ th ) <-> ( ch -/\ ta ) ) ) $=
      ( wb wnan nanbi12 syl2anc ) ABCHDEHBDICEIHFGBCDEJK $.
  $}

  $( A characterization of when an expression involving alternative denials
     associates.  Remark: alternative denial is commutative, see ~ nancom .
     (Contributed by Richard Penner, 29-Feb-2020.)  (Proof shortened by Wolf
     Lammen, 23-Oct-2022.) $)
  nanass $p |- ( ( ph <-> ch ) <->
                 ( ( ( ph -/\ ps ) -/\ ch ) <-> ( ph -/\ ( ps -/\ ch ) ) ) ) $=
    ( wb bicom1 nanbi2 nanbi12d wa wi nannan simpr imim2i sylbi wn nanan sylbir
    wnan simpl nancom bitri impbid21d pm5.1im syl2imc impbii nanbi2i bibi1i
    bija ) ACDZCBAQZQZABCQZQZDZABQZCQZULDUHUMUHCAUIUKACEACBFGUJULUHUJULACULABCH
    ZIACIABCJUPCABCKLMUJCBAHZICAICBAJUQACBAKLMUAULNZAUJNZCUHURAUKHAAUKOAUKRPUSC
    UIHCCUIOCUIRPACUBUCUGUDUJUOULUJCUNQUOUIUNCBASUECUNSTUFT $.

  $( Obsolete proof of ~ nanass as of 23-Oct-2022.  (Contributed by Richard
     Penner, 29-Feb-2020.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  nanassOLD $p |- ( ( ph <-> ch ) <->
                 ( ( ( ph -/\ ps ) -/\ ch ) <-> ( ph -/\ ( ps -/\ ch ) ) ) ) $=
    ( wb wnan wa wi nannan simpr imim2i sylbi wn wo notbii pm4.61 anbi2i 3bitri
    ianor nancom bitri bicom1 nanbi2 nanbi12d impbid21d ancoms ad2ant2r syl2anb
    pm5.1 ex bija impbii nanbi2i bibi1i ) ACDZCBAEZEZABCEZEZDZABEZCEZURDUNUSUNC
    AUOUQACUAACBUBUCUPURUNUPURACURABCFZGZACGABCHZVBCABCIJKUPCBAFZGZCAGCBAHZVEAC
    BAIJKUDUPLZURLZUNVHCBLZALMZFZAVJCLMZFZUNVIVHVFLCVELZFVLUPVFVGNCVEOVOVKCBARP
    QVIVCLAVBLZFVNURVCVDNAVBOVPVMABCRPQCAUNVKVMACUNACUHUEUFUGUIUJUKUPVAURUPCUTE
    VAUOUTCBASULCUTSTUMT $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Logical "xor"
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Declare connective for exclusive disjunction ("xor"). $)
  $c \/_ $.  $( Underlined "vee" (read:  "xor") $)

  $( Extend wff definition to include exclusive disjunction ("xor"). $)
  wxo $a wff ( ph \/_ ps ) $.

  $( Define exclusive disjunction (logical "xor").  Return true if either the
     left or right, but not both, are true.  After we define the constant true
     ` T. ` ( ~ df-tru ) and the constant false ` F. ` ( ~ df-fal ), we will be
     able to prove these truth table values: ` ( ( T. \/_ T. ) <-> F. ) `
     ( ~ truxortru ), ` ( ( T. \/_ F. ) <-> T. ) ` ( ~ truxorfal ),
     ` ( ( F. \/_ T. ) <-> T. ) ` ( ~ falxortru ), and
     ` ( ( F. \/_ F. ) <-> F. ) ` ( ~ falxorfal ).  Contrast with ` /\ `
     ( ~ df-an ), ` \/ ` ( ~ df-or ), ` -> ` ( ~ wi ), and ` -/\ `
     ( ~ df-nan ).  (Contributed by FL, 22-Nov-2010.) $)
  df-xor $a |- ( ( ph \/_ ps ) <-> -. ( ph <-> ps ) ) $.

  $( Two ways to write XNOR. (Contributed by Mario Carneiro, 4-Sep-2016.) $)
  xnor $p |- ( ( ph <-> ps ) <-> -. ( ph \/_ ps ) ) $=
    ( wxo wb df-xor con2bii ) ABCABDABEF $.

  $( The connector ` \/_ ` is commutative.  (Contributed by Mario Carneiro,
     4-Sep-2016.) $)
  xorcom $p |- ( ( ph \/_ ps ) <-> ( ps \/_ ph ) ) $=
    ( wb wn wxo bicom notbii df-xor 3bitr4i ) ABCZDBACZDABEBAEJKABFGABHBAHI $.

  $( The connector ` \/_ ` is associative.  (Contributed by FL, 22-Nov-2010.)
     (Proof shortened by Andrew Salmon, 8-Jun-2011.)  (Proof shortened by Wolf
     Lammen, 20-Jun-2020.) $)
  xorass $p |- ( ( ( ph \/_ ps ) \/_ ch ) <-> ( ph \/_ ( ps \/_ ch ) ) ) $=
    ( wxo wb xor3 biass xnor bibi1i bibi2i 3bitr3i nbbn 3bitr2ri df-xor 3bitr4i
    wn ) ABDZCEPZABCDZEPZQCDASDTASPZEZQPZCEZRASFABEZCEABCEZEUDUBABCGUEUCCABHIUF
    UAABCHJKQCLMQCNASNO $.

  $( This tautology shows that xor is really exclusive.  (Contributed by FL,
     22-Nov-2010.) $)
  excxor $p |- ( ( ph \/_ ps ) <-> ( ( ph /\ -. ps ) \/ ( -. ph /\ ps ) ) ) $=
    ( wxo wb wn wa wo df-xor xor ancom orbi2i 3bitri ) ABCABDEABEFZBAEZFZGMNBFZ
    GABHABIOPMBNJKL $.

  $( Two ways to express "exclusive or".  (Contributed by Mario Carneiro,
     4-Sep-2016.) $)
  xor2 $p |- ( ( ph \/_ ps ) <-> ( ( ph \/ ps ) /\ -. ( ph /\ ps ) ) ) $=
    ( wxo wb wn wo wa df-xor nbi2 bitri ) ABCABDEABFABGEGABHABIJ $.

  $( XOR implies OR. (Contributed by BJ, 19-Apr-2019.) $)
  xoror $p |- ( ( ph \/_ ps ) -> ( ph \/ ps ) ) $=
    ( wxo wo wa wn xor2 simplbi ) ABCABDABEFABGH $.

  $( XOR implies NAND. (Contributed by BJ, 19-Apr-2019.) $)
  xornan $p |- ( ( ph \/_ ps ) -> -. ( ph /\ ps ) ) $=
    ( wxo wo wa wn xor2 simprbi ) ABCABDABEFABGH $.

  $( XOR implies NAND (written with the ` -/\ ` connector).  (Contributed by
     BJ, 19-Apr-2019.) $)
  xornan2 $p |- ( ( ph \/_ ps ) -> ( ph -/\ ps ) ) $=
    ( wxo wa wn wnan xornan df-nan sylibr ) ABCABDEABFABGABHI $.

  $( The connector ` \/_ ` is negated under negation of one argument.
     (Contributed by Mario Carneiro, 4-Sep-2016.)  (Proof shortened by Wolf
     Lammen, 27-Jun-2020.) $)
  xorneg2 $p |- ( ( ph \/_ -. ps ) <-> -. ( ph \/_ ps ) ) $=
    ( wn wxo wb df-xor pm5.18 xnor 3bitr2i ) ABCZDAJECABEABDCAJFABGABHI $.

  $( The connector ` \/_ ` is negated under negation of one argument.
     (Contributed by Mario Carneiro, 4-Sep-2016.)  (Proof shortened by Wolf
     Lammen, 27-Jun-2020.) $)
  xorneg1 $p |- ( ( -. ph \/_ ps ) <-> -. ( ph \/_ ps ) ) $=
    ( wn wxo xorcom xorneg2 xchbinx bitri ) ACZBDBIDZABDZCIBEJBADKBAFBAEGH $.

  $( The connector ` \/_ ` is unchanged under negation of both arguments.
     (Contributed by Mario Carneiro, 4-Sep-2016.) $)
  xorneg $p |- ( ( -. ph \/_ -. ps ) <-> ( ph \/_ ps ) ) $=
    ( wn wxo xorneg1 xorneg2 con2bii bitr4i ) ACBCZDAIDZCABDZAIEJKABFGH $.

  ${
    xorbi12.1 $e |- ( ph <-> ps ) $.
    xorbi12.2 $e |- ( ch <-> th ) $.
    $( Equality property for XOR. (Contributed by Mario Carneiro,
       4-Sep-2016.) $)
    xorbi12i $p |- ( ( ph \/_ ch ) <-> ( ps \/_ th ) ) $=
      ( wb wn wxo bibi12i notbii df-xor 3bitr4i ) ACGZHBDGZHACIBDINOABCDEFJKACL
      BDLM $.
  $}

  ${
    xor12d.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    xor12d.2 $e |- ( ph -> ( th <-> ta ) ) $.
    $( Equality property for XOR. (Contributed by Mario Carneiro,
       4-Sep-2016.) $)
    xorbi12d $p |- ( ph -> ( ( ps \/_ th ) <-> ( ch \/_ ta ) ) ) $=
      ( wb wn wxo bibi12d notbid df-xor 3bitr4g ) ABDHZICEHZIBDJCEJAOPABCDEFGKL
      BDMCEMN $.
  $}

  $( Conjunction distributes over exclusive-or.  In intuitionistic logic this
     assertion is also true, even though ~ xordi does not necessarily hold, in
     part because the usual definition of xor is subtly different in
     intuitionistic logic.  (Contributed by David A. Wheeler, 7-Oct-2018.) $)
  anxordi $p |- ( ( ph /\ ( ps \/_ ch ) ) <->
      ( ( ph /\ ps ) \/_ ( ph /\ ch ) ) ) $=
    ( wb wn wa wxo xordi df-xor anbi2i 3bitr4i ) ABCDEZFABFZACFZDEABCGZFMNGABCH
    OLABCIJMNIK $.

  $( Exclusive-or variant of the law of the excluded middle ( ~ exmid ).  This
     statement is ancient, going back to at least Stoic logic.  This statement
     does not necessarily hold in intuitionistic logic.  (Contributed by David
     A. Wheeler, 23-Feb-2019.) $)
  xorexmid $p |- ( ph \/_ -. ph ) $=
    ( wn wxo wb pm5.19 df-xor mpbir ) AABZCAHDBAEAHFG $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  True and false constants
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)


$(
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
  Universal quantifier for use by df-tru
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-

  Even though it isn't ordinarily part of propositional calculus, the universal
  quantifier ` A. ` is introduced here so that the soundness of definition
  ~ df-tru can be checked by the same algorithm that is used for predicate
  calculus.  Its first real use is in definition ~ df-ex in the predicate
  calculus section below.  For those who want propositional calculus to be
  self-contained i.e. to use wff variables only, the alternate definition
  ~ dftru2 may be adopted and this subsection moved down to the start of the
  subsection with ~ wex below.  However, the use of ~ dftru2 as a definition
  requires a more elaborate definition checking algorithm that we prefer to
  avoid.

$)

  $( Declare new symbols needed for predicate calculus. $)
  $c A. $.  $( "inverted A" universal quantifier (read:  "for all") $)
  $c setvar $.  $( Individual variable type (read:  "the following is an
                   individual (set) variable" $)

  $( Add 'setvar' as a typecode for bound variables. $)
  $( $j syntax 'setvar'; bound 'setvar'; $)

  ${
    $v x $.
    $( Let ` x ` be an individual variable (temporary declaration). $)
    vx.wal $f setvar x $.
    $( Extend wff definition to include the universal quantifier ("for all").
       ` A. x ph ` is read " ` ph ` (phi) is true for all ` x ` ".  Typically,
       in its final application ` ph ` would be replaced with a wff containing
       a (free) occurrence of the variable ` x ` , for example ` x = y ` .  In
       a universe with a finite number of objects, "for all" is equivalent to a
       big conjunction (AND) with one wff for each possible case of ` x ` .
       When the universe is infinite (as with set theory), such a
       propositional-calculus equivalent is not possible because an infinitely
       long formula has no meaning, but conceptually the idea is the same. $)
    wal $a wff A. x ph $.
  $}


$(
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
  Equality predicate for use by df-tru
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-

  Even though it isn't ordinarily part of propositional calculus, the equality
  predicate ` = ` is introduced here so that the soundness of definition
  ~ df-tru can be checked by the same algorithm as is used for predicate
  calculus.  Its first real use is in theorem ~ weq in the predicate calculus
  section below.  For those who want propositional calculus to be
  self-contained i.e. to use wff variables only, the alternate definition
  ~ dftru2 may be adopted and this subsection moved down to just above ~ weq
  below.  However, the use of ~ dftru2 as a definition requires a more
  elaborate definition checking algorithm that we prefer to avoid.

$)

  $c class $.

  $( Add 'class' as a typecode. $)
  $( $j syntax 'class'; $)

  ${
    $v x $.
    $( Let ` x ` be an individual variable (temporary declaration). $)
    vx.cv $f setvar x $.
    $( This syntax construction states that a variable ` x ` , which has been
       declared to be a setvar variable by $f statement vx, is also a class
       expression.  This can be justified informally as follows.  We know that
       the class builder ` { y | y e. x } ` is a class by ~ cab .  Since (when
       ` y ` is distinct from ` x ` ) we have ` x = { y | y e. x } ` by
       ~ cvjust , we can argue that the syntax " ` class x ` " can be viewed as
       an abbreviation for " ` class { y | y e. x } ` ".  See the discussion
       under the definition of class in [Jech] p. 4 showing that "Every set can
       be considered to be a class".

       While it is tempting and perhaps occasionally useful to view ~ cv as a
       "type conversion" from a setvar variable to a class variable, keep in
       mind that ~ cv is intrinsically no different from any other
       class-building syntax such as ~ cab , ~ cun , or ~ c0 .

       For a general discussion of the theory of classes and the role of ~ cv ,
       see ~ mmset.html#class .

       (The description above applies to set theory, not predicate calculus.
       The purpose of introducing ` class x ` here, and not in set theory where
       it belongs, is to allow us to express, i.e., "prove", the ~ weq of
       predicate calculus from the ~ wceq of set theory, so that we do not
       overload the ` = ` connective with two syntax definitions.  This is done
       to prevent ambiguity that would complicate some Metamath parsers.) $)
    cv $a class x $.
  $}

  $( Declare the equality predicate symbol. $)
  $c = $.  $( Equal sign (read:  'is equal to') $)

  ${
    $v A $.
    $v B $.
    $( Temporary declarations of ` A ` and ` B ` . $)
    cA.wceq $f class A $.
    cB.wceq $f class B $.
    $( Extend wff definition to include class equality.

       For a general discussion of the theory of classes, see
       ~ mmset.html#class .

       (The purpose of introducing ` wff A = B ` here, and not in set theory
       where it belongs, is to allow us to express, i.e., "prove", the ~ weq of
       predicate calculus in terms of the ~ wceq of set theory, so that we do
       not "overload" the ` = ` connective with two syntax definitions.  This
       is done to prevent ambiguity that would complicate some Metamath
       parsers.  For example, some parsers - although not the Metamath program
       - stumble on the fact that the ` = ` in ` x = y ` could be the ` = ` of
       either ~ weq or ~ wceq , although mathematically it makes no difference.
       The class variables ` A ` and ` B ` are introduced temporarily for the
       purpose of this definition but otherwise not used in predicate calculus.
       See ~ df-cleq for more information on the set theory usage of
       ~ wceq .) $)
    wceq $a wff A = B $.
  $}


$(
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
  The true constant
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
$)

  $c T. $.  $( Symbol for the true constant. $)

  $( The constant ` T. ` is a wff. $)
  wtru $a wff T. $.

  ${
    $v x $.
    $v y $.
    $( Temporary declarations of ` x ` and ` y ` for local use by ~ df-tru .
       These will be redeclared globally in the predicate calculus section. $)
    vx.tru $f setvar x $.
    vy.tru $f setvar y $.
    $( Soundness justification theorem for ~ df-tru .  Instance of
       ~ monothetic .  (Contributed by Mario Carneiro, 17-Nov-2013.)  (Revised
       by NM, 11-Jul-2019.) $)
    trujust $p |- ( ( A. x x = x -> A. x x = x )
                <-> ( A. y y = y -> A. y y = y ) ) $=
      ( cv wceq wal monothetic ) ACZGDAEBCZHDBEF $.

    $( Obsolete proof of ~ trujust as of 7-Sep-2022.  (Contributed by Mario
       Carneiro, 17-Nov-2013.)  (Revised by NM, 11-Jul-2019.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    trujustOLD $p |- ( ( A. x x = x -> A. x x = x )
              <-> ( A. y y = y -> A. y y = y ) ) $=
      ( cv wceq wal wi id 2th ) ACZIDAEZJFBCZKDBEZLFJGLGH $.

    $( Definition of the truth value "true", or "verum", denoted by ` T. ` .
       In this definition, an instance of ~ id is used as the definiens,
       although any tautology, such as an axiom, can be used in its place.
       This particular instance of ~ id was chosen so this definition can be
       checked by the same algorithm that is used for predicate calculus.  This
       definition should be referenced directly only by ~ tru , and other
       proofs should use ~ tru instead of this definition, since there are many
       alternate ways to define ` T. ` .  (Contributed by Anthony Hart,
       13-Oct-2010.)  (Revised by NM, 11-Jul-2019.)  Use ~ tru instead.
       (New usage is discouraged.) $)
    df-tru $a |- ( T. <-> ( A. x x = x -> A. x x = x ) ) $.

    $( The truth value ` T. ` is provable.  (Contributed by Anthony Hart,
       13-Oct-2010.) $)
    tru $p |- T. $=
      ( vx.tru wtru cv wceq wal wi id df-tru mpbir ) BACZJDAEZKFKGAHI $.
  $}

  $( An alternate definition of "true" (see comment of ~ df-tru ).  The
     associated justification theorem is ~ monothetic .  (Contributed by
     Anthony Hart, 13-Oct-2010.)  (Revised by BJ, 12-Jul-2019.)  Use ~ tru
     instead.  (New usage is discouraged.) $)
  dftru2 $p |- ( T. <-> ( ph -> ph ) ) $=
    ( wtru wi tru id 2th ) BAACDAEF $.

  $( A proposition is equivalent to it being implied by ` T. ` .  Closed form
     of ~ mptru .  Dual of ~ dfnot .  It is to ~ tbtru what ~ a1bi is to
     ~ tbt .  (Contributed by BJ, 26-Oct-2019.) $)
  trut $p |- ( ph <-> ( T. -> ph ) ) $=
    ( wtru tru a1bi ) BACD $.

  ${
    mptru.1 $e |- ( T. -> ph ) $.
    $( Eliminate ` T. ` as an antecedent.  A proposition implied by ` T. ` is
       true.  This is modus ponens ~ ax-mp when the minor hypothesis is ` T. `
       (which holds by ~ tru ).  (Contributed by Mario Carneiro,
       13-Mar-2014.) $)
    mptru $p |- ph $=
      ( wtru tru ax-mp ) CADBE $.
  $}

  $( A proposition is equivalent to itself being equivalent to ` T. ` .
     (Contributed by Anthony Hart, 14-Aug-2011.) $)
  tbtru $p |- ( ph <-> ( ph <-> T. ) ) $=
    ( wtru tru tbt ) BACD $.

  ${
    bitru.1 $e |- ph $.
    $( A theorem is equivalent to truth.  (Contributed by Mario Carneiro,
       9-May-2015.) $)
    bitru $p |- ( ph <-> T. ) $=
      ( wtru tru 2th ) ACBDE $.
  $}

  $( Anything implies ` T. ` .  Dual statement of ~ falim .  Deduction form of
     ~ tru .  (Contributed by FL, 20-Mar-2011.)  (Proof shortened by Anthony
     Hart, 1-Aug-2011.) $)
  trud $p |- ( ph -> T. ) $=
    ( wtru tru a1i ) BACD $.

  $( True can be removed from a conjunction.  (Contributed by FL, 20-Mar-2011.)
     (Proof shortened by Wolf Lammen, 21-Jul-2019.) $)
  truan $p |- ( ( T. /\ ph ) <-> ph ) $=
    ( wtru wa tru biantrur bicomi ) ABACBADEF $.


$(
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
  The false constant
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
$)

  $c F. $.  $( Symbol for the false constant. $)

  $( The constant ` F. ` is a wff. $)
  wfal $a wff F. $.

  $( Definition of the truth value "false", or "falsum", denoted by ` F. ` .
     See also ~ df-tru .  (Contributed by Anthony Hart, 22-Oct-2010.) $)
  df-fal $a |- ( F. <-> -. T. ) $.

  $( The truth value ` F. ` is refutable.  (Contributed by Anthony Hart,
     22-Oct-2010.)  (Proof shortened by Mel L. O'Cat, 11-Mar-2012.) $)
  fal $p |- -. F. $=
    ( wfal wtru wn tru notnoti df-fal mtbir ) ABCBDEFG $.

  $( The negation of a proposition is equivalent to itself being equivalent to
     ` F. ` .  (Contributed by Anthony Hart, 14-Aug-2011.) $)
  nbfal $p |- ( -. ph <-> ( ph <-> F. ) ) $=
    ( wfal fal nbn ) BACD $.

  ${
    bifal.1 $e |- -. ph $.
    $( A contradiction is equivalent to falsehood.  (Contributed by Mario
       Carneiro, 9-May-2015.) $)
    bifal $p |- ( ph <-> F. ) $=
      ( wfal fal 2false ) ACBDE $.
  $}

  $( The truth value ` F. ` implies anything.  Also called the "principle of
     explosion", or "ex falso [[sequitur]] quodlibet" (Latin for "from
     falsehood, anything [[follows]]").  Dual statement of ~ trud .
     (Contributed by FL, 20-Mar-2011.)  (Proof shortened by Anthony Hart,
     1-Aug-2011.) $)
  falim $p |- ( F. -> ph ) $=
    ( wfal fal pm2.21i ) BACD $.

  $( The truth value ` F. ` implies anything.  (Contributed by Mario Carneiro,
     9-Feb-2017.) $)
  falimd $p |- ( ( ph /\ F. ) -> ps ) $=
    ( wfal falim adantl ) CBABDE $.

  $( Given falsum ` F. ` , we can define the negation of a wff ` ph ` as the
     statement that ` F. ` follows from assuming ` ph ` .  (Contributed by
     Mario Carneiro, 9-Feb-2017.)  (Proof shortened by Wolf Lammen,
     21-Jul-2019.) $)
  dfnot $p |- ( -. ph <-> ( ph -> F. ) ) $=
    ( wfal wn wi wb fal mtt ax-mp ) BCACABDEFBAGH $.

  ${
    inegd.1 $e |- ( ( ph /\ ps ) -> F. ) $.
    $( Negation introduction rule from natural deduction.  (Contributed by
       Mario Carneiro, 9-Feb-2017.) $)
    inegd $p |- ( ph -> -. ps ) $=
      ( wfal wi wn ex dfnot sylibr ) ABDEBFABDCGBHI $.
  $}

  ${
    efald.1 $e |- ( ( ph /\ -. ps ) -> F. ) $.
    $( Deduction based on reductio ad absurdum.  (Contributed by Mario
       Carneiro, 9-Feb-2017.) $)
    efald $p |- ( ph -> ps ) $=
      ( wn inegd notnotrd ) ABABDCEF $.
  $}

  ${
    pm2.21fal.1 $e |- ( ph -> ps ) $.
    pm2.21fal.2 $e |- ( ph -> -. ps ) $.
    $( If a wff and its negation are provable, then falsum is provable.
       (Contributed by Mario Carneiro, 9-Feb-2017.) $)
    pm2.21fal $p |- ( ph -> F. ) $=
      ( wfal pm2.21dd ) ABECDF $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Truth tables
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  Some sources define logical connectives by their truth tables.  These are
  tables that give the truth value of the composed expression for all possible
  combinations of the truth values of their arguments.  In this section, we
  show that our definitions and axioms produce equivalent results for all the
  logical connectives we have introduced (either axiomatically or by a
  definition): implication ~ wi , negation ~ wn , biconditional ~ df-bi ,
  conjunction ~ df-an , disjunction ~ df-or , alternative denial ~ df-nan ,
  exclusive disjunction ~ df-xor .

$)


$(
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
  Implication
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
$)

  $( A ` -> ` identity.  (Contributed by Anthony Hart, 22-Oct-2010.)  An
     alternate proof is possible using ~ trud instead of ~ id but the principle
     of identity ~ id is more basic, and the present proof indicates that the
     result still holds in relevance logic.
     (Proof modification is discouraged.) $)
  truimtru $p |- ( ( T. -> T. ) <-> T. ) $=
    ( wtru wi id bitru ) AABACD $.

  $( A ` -> ` identity.  (Contributed by Anthony Hart, 22-Oct-2010.)  (Proof
     shortened by Andrew Salmon, 13-May-2011.) $)
  truimfal $p |- ( ( T. -> F. ) <-> F. ) $=
    ( wfal wtru wi trut bicomi ) ABACADE $.

  $( A ` -> ` identity.  (Contributed by Anthony Hart, 22-Oct-2010.)  An
     alternate proof is possible using ~ falim instead of ~ trud but the
     present proof using ~ trud emphasizes that the result does not require the
     principle of explosion.  (Proof modification is discouraged.) $)
  falimtru $p |- ( ( F. -> T. ) <-> T. ) $=
    ( wfal wtru wi trud bitru ) ABCADE $.

  $( A ` -> ` identity.  (Contributed by Anthony Hart, 22-Oct-2010.)  An
     alternate proof is possible using ~ falim instead of ~ id but the present
     proof using ~ id emphasizes that the result does not require the principle
     of explosion.  (Proof modification is discouraged.) $)
  falimfal $p |- ( ( F. -> F. ) <-> T. ) $=
    ( wfal wi id bitru ) AABACD $.


$(
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
  Negation
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
$)

  $( A ` -. ` identity.  (Contributed by Anthony Hart, 22-Oct-2010.) $)
  nottru $p |- ( -. T. <-> F. ) $=
    ( wfal wtru wn df-fal bicomi ) ABCDE $.

  $( A ` -. ` identity.  (Contributed by Anthony Hart, 22-Oct-2010.)  (Proof
     shortened by Andrew Salmon, 13-May-2011.) $)
  notfal $p |- ( -. F. <-> T. ) $=
    ( wfal wn fal bitru ) ABCD $.


$(
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
  Equivalence
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
$)

  $( A ` <-> ` identity.  (Contributed by Anthony Hart, 22-Oct-2010.)  (Proof
     shortened by Andrew Salmon, 13-May-2011.) $)
  trubitru $p |- ( ( T. <-> T. ) <-> T. ) $=
    ( wtru wb biid bitru ) AABACD $.

  $( A ` <-> ` identity.  (Contributed by Anthony Hart, 22-Oct-2010.)  (Proof
     shortened by Andrew Salmon, 13-May-2011.)  (Proof shortened by Wolf
     Lammen, 10-Jul-2020.) $)
  falbitru $p |- ( ( F. <-> T. ) <-> F. ) $=
    ( wfal wtru wb tbtru bicomi ) AABCADE $.

  $( A ` <-> ` identity.  (Contributed by Anthony Hart, 22-Oct-2010.)  (Proof
     shortened by Andrew Salmon, 13-May-2011.)  (Proof shortened by Wolf
     Lammen, 10-Jul-2020.) $)
  trubifal $p |- ( ( T. <-> F. ) <-> F. ) $=
    ( wtru wfal wb bicom falbitru bitri ) ABCBACBABDEF $.

  $( A ` <-> ` identity.  (Contributed by Anthony Hart, 22-Oct-2010.)  (Proof
     shortened by Andrew Salmon, 13-May-2011.) $)
  falbifal $p |- ( ( F. <-> F. ) <-> T. ) $=
    ( wfal wb biid bitru ) AABACD $.


$(
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
  Conjunction
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
$)

  $( A ` /\ ` identity.  (Contributed by Anthony Hart, 22-Oct-2010.) $)
  truantru $p |- ( ( T. /\ T. ) <-> T. ) $=
    ( wtru anidm ) AB $.

  $( A ` /\ ` identity.  (Contributed by Anthony Hart, 22-Oct-2010.) $)
  truanfal $p |- ( ( T. /\ F. ) <-> F. ) $=
    ( wfal truan ) AB $.

  $( A ` /\ ` identity.  (Contributed by Anthony Hart, 22-Oct-2010.) $)
  falantru $p |- ( ( F. /\ T. ) <-> F. ) $=
    ( wfal wtru wa fal intnanr bifal ) ABCABDEF $.

  $( A ` /\ ` identity.  (Contributed by Anthony Hart, 22-Oct-2010.) $)
  falanfal $p |- ( ( F. /\ F. ) <-> F. ) $=
    ( wfal anidm ) AB $.


$(
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
  Disjunction
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
$)

  $( A ` \/ ` identity.  (Contributed by Anthony Hart, 22-Oct-2010.)  (Proof
     shortened by Andrew Salmon, 13-May-2011.) $)
  truortru $p |- ( ( T. \/ T. ) <-> T. ) $=
    ( wtru oridm ) AB $.

  $( A ` \/ ` identity.  (Contributed by Anthony Hart, 22-Oct-2010.) $)
  truorfal $p |- ( ( T. \/ F. ) <-> T. ) $=
    ( wtru wfal wo tru orci bitru ) ABCABDEF $.

  $( A ` \/ ` identity.  (Contributed by Anthony Hart, 22-Oct-2010.) $)
  falortru $p |- ( ( F. \/ T. ) <-> T. ) $=
    ( wfal wtru wo tru olci bitru ) ABCBADEF $.

  $( A ` \/ ` identity.  (Contributed by Anthony Hart, 22-Oct-2010.)  (Proof
     shortened by Andrew Salmon, 13-May-2011.) $)
  falorfal $p |- ( ( F. \/ F. ) <-> F. ) $=
    ( wfal oridm ) AB $.


$(
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
  Alternative denial
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
$)

  $( A ` -/\ ` identity.  (Contributed by Anthony Hart, 22-Oct-2010.)  (Proof
     shortened by Andrew Salmon, 13-May-2011.) $)
  trunantru $p |- ( ( T. -/\ T. ) <-> F. ) $=
    ( wtru wnan wn wfal nannot nottru bitr3i ) AABACDAEFG $.

  $( A ` -/\ ` identity.  (Contributed by Anthony Hart, 23-Oct-2010.)  (Proof
     shortened by Andrew Salmon, 13-May-2011.)  (Proof shortened by Wolf
     Lammen, 10-Jul-2020.) $)
  trunanfal $p |- ( ( T. -/\ F. ) <-> T. ) $=
    ( wtru wfal wnan wn wa df-nan truanfal xchbinx notfal bitri ) ABCZBDAKABEBA
    BFGHIJ $.

  $( A ` -/\ ` identity.  (Contributed by Anthony Hart, 23-Oct-2010.)  (Proof
     shortened by Andrew Salmon, 13-May-2011.) $)
  falnantru $p |- ( ( F. -/\ T. ) <-> T. ) $=
    ( wfal wtru wnan nancom trunanfal bitri ) ABCBACBABDEF $.

  $( A ` -/\ ` identity.  (Contributed by Anthony Hart, 22-Oct-2010.)  (Proof
     shortened by Andrew Salmon, 13-May-2011.) $)
  falnanfal $p |- ( ( F. -/\ F. ) <-> T. ) $=
    ( wfal wnan wn wtru nannot notfal bitr3i ) AABACDAEFG $.


$(
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
  Exclusive disjunction
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
$)

  $( A ` \/_ ` identity.  (Contributed by David A. Wheeler, 8-May-2015.) $)
  truxortru $p |- ( ( T. \/_ T. ) <-> F. ) $=
    ( wtru wxo wn wfal wb df-xor trubitru xchbinx nottru bitri ) AABZACDKAAEAAA
    FGHIJ $.

  $( A ` \/_ ` identity.  (Contributed by David A. Wheeler, 8-May-2015.) $)
  truxorfal $p |- ( ( T. \/_ F. ) <-> T. ) $=
    ( wtru wfal wxo wn wb df-xor trubifal xchbinx notfal bitri ) ABCZBDAKABEBAB
    FGHIJ $.

  $( A ` \/_ ` identity.  (Contributed by David A. Wheeler, 9-May-2015.)
     (Proof shortened by Wolf Lammen, 10-Jul-2020.) $)
  falxortru $p |- ( ( F. \/_ T. ) <-> T. ) $=
    ( wfal wtru wxo xorcom truxorfal bitri ) ABCBACBABDEF $.

  $( A ` \/_ ` identity.  (Contributed by David A. Wheeler, 9-May-2015.) $)
  falxorfal $p |- ( ( F. \/_ F. ) <-> F. ) $=
    ( wfal wxo wtru wn wb df-xor falbifal xchbinx nottru bitri ) AABZCDAKAAECAA
    FGHIJ $.

  $( Add support for natural deduction, indicating the constants used to
     indicate implication, context conjunction, and empty context. $)
  $( $j natded_init 'wi' 'wa' 'wtru'; $)

  $( These are variations on the assumption rule of natural deduction.
     They have the form ` Gamma -> ph ` where ` Gamma ` is composed entirely
     of (binary) conjunctions and one of the conjuncts is ` ph ` . $)
  $( $j natded_assume 'id' 'simpl' 'simpr'
          'simpll' 'simplr' 'simprl' 'simprr'
          'simplll' 'simpllr' 'simplrl' 'simplrr'
          'simprll' 'simprlr' 'simprrl' 'simprrr'
          'simp-4l' 'simp-4r' 'simp-5l' 'simp-5r'
          'simp-6l' 'simp-6r' 'simp-7l' 'simp-7r'
          'simp-8l' 'simp-8r' 'simp-9l' 'simp-9r'
          'simp-10l' 'simp-10r' 'simp-11l' 'simp-11r'; $)

  $( These are variations on the weakening lemma of natural deduction.
     They have the form ` _D -> ph |- _G -> ph ` where ` _G `
     and ` _D ` are composed entirely of (binary) conjunctions and
     ` _D C_ _G ` . $)
  $( $j natded_weak 'a1i' 'adantl' 'adantr'
          'adantll' 'adantlr' 'adantrl' 'adantrr'
          'adantlll' 'adantllr' 'adantlrl' 'adantlrr'
          'adantrll' 'adantrlr' 'adantrrl' 'adantrrr'
          'ad2antll' 'ad2antlr' 'ad2antrl' 'ad2antrr'
          'ad2ant2l' 'ad2ant2lr' 'ad2ant2rl' 'ad2ant2r'
          'ad3antlr' 'ad3antrrr' 'ad4antlr' 'ad4antr'
          'ad4antlr' 'ad4antr' 'ad5antlr' 'ad5antr'
          'ad6antlr' 'ad6antr' 'ad7antlr' 'ad7antr'
          'ad8antlr' 'ad8antr' 'ad9antlr' 'ad9antr'
          'ad10antlr' 'ad10antr'
          'anidms' 'ancoms' 'anasss' 'anassrs' 'an12s'  'ancom2s' 'an13s'
          'an32s' 'ancom1s' 'an31s' 'anass1rs' 'anabsan'  'anabss1' 'anabss4'
          'anabss5' 'anabss7' 'anabsan2' 'anabss3' 'an4s' 'an42s'
          'anandis' 'anandirs'; $)

  $( These are variations on the cut axiom (modus ponens) of natural deduction.
     All assumptions and the consequent have the form ` ph ` or ` _G -> ph `
     where ` _G ` is composed entirely of (binary) conjunctions, and possibly
     some intermediate statements are cancelled. (This does not include the
     "natded_assume" and "natded_weak" lists, which also count in this
     category.) $)
  $( $j natded_cut 'mp2b' 'mp1i' 'syl' '3syl' '4syl' 'syldan' 'sylan' 'sylan2'
          'syl2an' 'syl2anr' 'sylanl1' 'sylanl2' 'sylanr1' 'sylanr2' 'syl2anc'
          'sylancl' 'sylancr' 'sylancom' 'mpdan' 'mpancom' 'mpan' 'mpan2'
          'mp2an' 'mp4an' 'mpanl1' 'mpanl2' 'mpanl12' 'mpanr1' 'mpanr2'
          'mpanr12' 'mpanlr1' 'syl12anc' 'syl21anc' 'syl22anc'; $)

  $( Natural deduction rules for the logical connectives, defining the
     connective itself and natural deduction rules pertaining to it.
     These don't have a fixed form, except that all the statements should be
     parseable as natural deduction statements, i.e. ` ph ` or ` _G -> ph `
     where _G is a nested conjunction. $)
  $( $j natded_true 'wtru' with 'mptru' 'tru' 'trud';
        natded_imp 'wi' with 'ex' 'imp' 'mpd' 'ax-mp' 'syl' 'mpi';
        natded_and 'wa' with 'jca' 'pm3.2i' 'jca31' 'jca32' 'jctil' 'jctir'
          'jctl' 'jctr' 'ancli' 'ancri';
        natded_or 'wo' with 'olc' 'orc' 'olci' 'orci' 'olcd' 'orcd' 'olcs'
          'orcs' 'jaoi' 'jaod' 'jaodan' 'mpjaodan';
        natded_not 'wn' 'wfal' with 'falim' 'falimd' 'inegd' 'mtand' 'pm2.65da'
          'pm2.01da' 'pm2.18da' 'pm2.21dd' 'pm2.21fal' 'efald' 'pm2.18da'
          'notnotr' 'notnotrd'; $)


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Half adder and full adder in propositional calculus
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  Propositional calculus deals with truth values, which can be interpreted as
  bits.  Using this, we can define the half adder and the full adder in pure
  propositional calculus, and show their basic properties.

  The half adder adds two 1-bit numbers.  Its two outputs are the "sum" S and
  the "carry" C.  The real sum is then given by 2C+S.  The sum and carry
  correspond respectively to the logical exclusive disjunction ( ~ df-xor ) and
  the logical conjunction ( ~ df-an ).

  The full adder takes into account an "input carry", so it has three inputs
  and again two outputs, corresponding to the "sum" ( ~ df-had ) and "updated
  carry" ( ~ df-cad ).

  Here is a short description.  We code the bit 0 by ` F. ` and 1 by ` T. ` .
  Even though ` hadd ` and ` cadd ` are invariant under permutation of their
  arguments, assume for the sake of concreteness that ` ph ` (resp. ` ps ` ) is
  the i^th bit of the first (resp. second) number to add (with the convention
  that the i^th bit is the multiple of 2^i in the base-2 representation), and
  that ` ch ` is the i^th carry (with the convention that the 0^th carry is 0).
  Then, ` hadd ( ph , ps , ch ) ` gives the i^th bit of the sum, and
  ` cadd ( ph , ps , ch ) ` gives the (i+1)^th carry.  Then, addition is
  performed by iteration from i = 0 to i = 1 + (max of the number of digits of
  the two summands) by "updating" the carry.

$)


$(
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
  Full adder: sum
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
$)

  $c hadd $.

  $( Syntax for the "sum" output of the full adder.  (Contributed by Mario
     Carneiro, 4-Sep-2016.) $)
  whad $a wff hadd ( ph , ps , ch ) $.

  $( Definition of the "sum" output of the full adder (triple exclusive
     disjunction, or XOR3).  (Contributed by Mario Carneiro, 4-Sep-2016.) $)
  df-had $a |- ( hadd ( ph , ps , ch ) <-> ( ( ph \/_ ps ) \/_ ch ) ) $.

  ${
    hadbid.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    hadbid.2 $e |- ( ph -> ( th <-> ta ) ) $.
    hadbid.3 $e |- ( ph -> ( et <-> ze ) ) $.
    $( Equality theorem for the adder sum.  (Contributed by Mario Carneiro,
       4-Sep-2016.) $)
    hadbi123d $p |- ( ph ->
      ( hadd ( ps , th , et ) <-> hadd ( ch , ta , ze ) ) ) $=
      ( wxo whad xorbi12d df-had 3bitr4g ) ABDKZFKCEKZGKBDFLCEGLAPQFGABCDEHIMJM
      BDFNCEGNO $.
  $}

  ${
    hadbii.1 $e |- ( ph <-> ps ) $.
    hadbii.2 $e |- ( ch <-> th ) $.
    hadbii.3 $e |- ( ta <-> et ) $.
    $( Equality theorem for the adder sum.  (Contributed by Mario Carneiro,
       4-Sep-2016.) $)
    hadbi123i $p |- ( hadd ( ph , ch , ta ) <-> hadd ( ps , th , et ) ) $=
      ( whad wb wtru a1i hadbi123d mptru ) ACEJBDFJKLABCDEFABKLGMCDKLHMEFKLIMNO
      $.
  $}

  $( Associative law for the adder sum.  (Contributed by Mario Carneiro,
     4-Sep-2016.) $)
  hadass $p |- ( hadd ( ph , ps , ch ) <-> ( ph \/_ ( ps \/_ ch ) ) ) $=
    ( whad wxo df-had xorass bitri ) ABCDABECEABCEEABCFABCGH $.

  $( The adder sum is the same as the triple biconditional.  (Contributed by
     Mario Carneiro, 4-Sep-2016.) $)
  hadbi $p |- ( hadd ( ph , ps , ch ) <-> ( ( ph <-> ps ) <-> ch ) ) $=
    ( wxo wb wn whad df-xor df-had xnor bibi1i nbbn bitri 3bitr4i ) ABDZCDOCEFZ
    ABCGABEZCEZOCHABCIROFZCEPQSCABJKOCLMN $.

  $( Commutative law for the adder sum.  (Contributed by Mario Carneiro,
     4-Sep-2016.) $)
  hadcoma $p |- ( hadd ( ph , ps , ch ) <-> hadd ( ps , ph , ch ) ) $=
    ( wxo whad xorcom biid xorbi12i df-had 3bitr4i ) ABDZCDBADZCDABCEBACEKLCCAB
    FCGHABCIBACIJ $.

  $( Commutative law for the adders sum.  (Contributed by Mario Carneiro,
     4-Sep-2016.) $)
  hadcomb $p |- ( hadd ( ph , ps , ch ) <-> hadd ( ph , ch , ps ) ) $=
    ( wxo whad biid xorcom xorbi12i hadass 3bitr4i ) ABCDZDACBDZDABCEACBEAAKLAF
    BCGHABCIACBIJ $.

  $( Rotation law for the adder sum.  (Contributed by Mario Carneiro,
     4-Sep-2016.) $)
  hadrot $p |- ( hadd ( ph , ps , ch ) <-> hadd ( ps , ch , ph ) ) $=
    ( whad hadcoma hadcomb bitri ) ABCDBACDBCADABCEBACFG $.

  $( The adder sum distributes over negation.  (Contributed by Mario Carneiro,
     4-Sep-2016.)  (Proof shortened by Wolf Lammen, 11-Jul-2020.) $)
  hadnot $p |- ( -. hadd ( ph , ps , ch ) <->
    hadd ( -. ph , -. ps , -. ch ) ) $=
    ( wb wn whad notbi bibi1i xor3 hadbi xchnxbir 3bitr4i ) ABDZCEZDZAEZBEZDZND
    ABCFZEPQNFMRNABGHMCDOSMCIABCJKPQNJL $.

  $( If the first input is true, then the adder sum is equivalent to the
     biconditionality of the other two inputs.  (Contributed by Mario Carneiro,
     4-Sep-2016.)  (Proof shortened by Wolf Lammen, 11-Jul-2020.) $)
  had1 $p |- ( ph -> ( hadd ( ph , ps , ch ) <-> ( ps <-> ch ) ) ) $=
    ( whad wb hadrot hadbi bitri biass mpbir biimpri ) ABCDZBCEZEZANAELMAEZELBC
    ADOABCFBCAGHLMAIJK $.

  $( If the first input is false, then the adder sum is equivalent to the
     exclusive disjunction of the other two inputs.  (Contributed by Mario
     Carneiro, 4-Sep-2016.)  (Proof shortened by Wolf Lammen, 12-Jul-2020.) $)
  had0 $p |- ( -. ph -> ( hadd ( ph , ps , ch ) <-> ( ps \/_ ch ) ) ) $=
    ( wn whad wxo wb had1 hadnot xnor notbi bitr3i 3bitr4g con4bid ) ADZABCEZBC
    FZOOBDZCDZERSGZPDQDZORSHABCIUABCGTBCJBCKLMN $.

  $( The value of the adder sum is, if the first input is true, the
     biconditionality, and if the first input is false, the exclusive
     disjunction, of the other two inputs.  (Contributed by BJ,
     11-Aug-2020.) $)
  hadifp $p |-
    ( hadd ( ph , ps , ch ) <-> if- ( ph , ( ps <-> ch ) , ( ps \/_ ch ) ) ) $=
    ( whad wb wxo had1 had0 casesifp ) AABCDBCEBCFABCGABCHI $.


$(
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
  Full adder: carry
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
$)

  $c cadd $.

  $( Syntax for the "carry" output of the full adder.  (Contributed by Mario
     Carneiro, 4-Sep-2016.) $)
  wcad $a wff cadd ( ph , ps , ch ) $.

  $( Definition of the "carry" output of the full adder.  It is true when at
     least two arguments are true, so it is equal to the "majority" function on
     three variables.  See ~ cador and ~ cadan for alternate definitions.
     (Contributed by Mario Carneiro, 4-Sep-2016.) $)
  df-cad $a |- ( cadd ( ph , ps , ch ) <->
    ( ( ph /\ ps ) \/ ( ch /\ ( ph \/_ ps ) ) ) ) $.

  $( The adder carry in disjunctive normal form.  (Contributed by Mario
     Carneiro, 4-Sep-2016.)  (Proof shortened by Wolf Lammen, 11-Jul-2020.) $)
  cador $p |- ( cadd ( ph , ps , ch ) <->
        ( ( ph /\ ps ) \/ ( ph /\ ch ) \/ ( ps /\ ch ) ) ) $=
    ( wa wxo wo wcad w3o wn xor2 rbaib anbi1d ancom andir 3bitr3g pm5.74i df-or
    wi 3bitr4i df-cad 3orass ) ABDZCABEZDZFZUBACDZBCDZFZFZABCGUBUFUGHUBIZUDRUJU
    HRUEUIUJUDUHUJUCCDABFZCDUDUHUJUCUKCUCUKUJABJKLUCCMABCNOPUBUDQUBUHQSABCTUBUF
    UGUAS $.

  $( The adder carry in conjunctive normal form.  (Contributed by Mario
     Carneiro, 4-Sep-2016.)  (Proof shortened by Wolf Lammen, 25-Sep-2018.) $)
  cadan $p |- ( cadd ( ph , ps , ch ) <->
        ( ( ph \/ ps ) /\ ( ph \/ ch ) /\ ( ps \/ ch ) ) ) $=
    ( wcad wo w3a w3o df-3or cador andi orbi1i 3bitr4i ordir ordi orcom animorl
    wa wi wb bitr4i pm4.72 mpbi anbi12i 3bitri df-3an ) ABCDZABEZACEZQZBCEZQZUG
    UHUJFUFAUJQZBCQZEZAUMEZUJUMEZQUKABQZACQZUMGUQUREZUMEUFUNUQURUMHABCIULUSUMAB
    CJKLAUJUMMUOUIUPUJABCNUPUMUJEZUJUJUMOUMUJRUJUTSBCCPUMUJUAUBTUCUDUGUHUJUET
    $.

  ${
    cadbid.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    cadbid.2 $e |- ( ph -> ( th <-> ta ) ) $.
    cadbid.3 $e |- ( ph -> ( et <-> ze ) ) $.
    $( Equality theorem for the adder carry.  (Contributed by Mario Carneiro,
       4-Sep-2016.) $)
    cadbi123d $p |- ( ph ->
      ( cadd ( ps , th , et ) <-> cadd ( ch , ta , ze ) ) ) $=
      ( wa wxo wo wcad anbi12d xorbi12d orbi12d df-cad 3bitr4g ) ABDKZFBDLZKZMC
      EKZGCELZKZMBDFNCEGNATUCUBUEABCDEHIOAFGUAUDJABCDEHIPOQBDFRCEGRS $.
  $}

  ${
    cadbii.1 $e |- ( ph <-> ps ) $.
    cadbii.2 $e |- ( ch <-> th ) $.
    cadbii.3 $e |- ( ta <-> et ) $.
    $( Equality theorem for the adder carry.  (Contributed by Mario Carneiro,
       4-Sep-2016.) $)
    cadbi123i $p |- ( cadd ( ph , ch , ta ) <-> cadd ( ps , th , et ) ) $=
      ( wcad wb wtru a1i cadbi123d mptru ) ACEJBDFJKLABCDEFABKLGMCDKLHMEFKLIMNO
      $.
  $}

  $( Commutative law for the adder carry.  (Contributed by Mario Carneiro,
     4-Sep-2016.) $)
  cadcoma $p |- ( cadd ( ph , ps , ch ) <-> cadd ( ps , ph , ch ) ) $=
    ( wa wxo wo wcad ancom xorcom anbi2i orbi12i df-cad 3bitr4i ) ABDZCABEZDZFB
    ADZCBAEZDZFABCGBACGNQPSABHORCABIJKABCLBACLM $.

  $( Commutative law for the adder carry.  (Contributed by Mario Carneiro,
     4-Sep-2016.)  (Proof shortened by Wolf Lammen, 11-Jul-2020.) $)
  cadcomb $p |- ( cadd ( ph , ps , ch ) <-> cadd ( ph , ch , ps ) ) $=
    ( wcad wo w3a cadan 3ancoma orcom 3anbi3i 3bitri bitr4i ) ABCDZACEZABEZCBEZ
    FZACBDMONBCEZFNORFQABCGONRHRPNOBCIJKACBGL $.

  $( Rotation law for the adder carry.  (Contributed by Mario Carneiro,
     4-Sep-2016.) $)
  cadrot $p |- ( cadd ( ph , ps , ch ) <-> cadd ( ps , ch , ph ) ) $=
    ( wcad cadcoma cadcomb bitri ) ABCDBACDBCADABCEBACFG $.

  $( The adder carry distributes over negation.  (Contributed by Mario
     Carneiro, 4-Sep-2016.)  (Proof shortened by Wolf Lammen, 11-Jul-2020.) $)
  cadnot $p |- ( -. cadd ( ph , ps , ch ) <->
    cadd ( -. ph , -. ps , -. ch ) ) $=
    ( wa wn w3a wo wcad ianor 3anbi123i w3o 3ioran cador xchnxbir cadan 3bitr4i
    ) ABDZEZACDZEZBCDZEZFZAEZBEZGZUDCEZGZUEUGGZFABCHZEUDUEUGHRUFTUHUBUIABIACIBC
    IJQSUAKUCUJQSUALABCMNUDUEUGOP $.

  $( If one input is true, then the adder carry is true exactly when at least
     one of the other two inputs is true.  (Contributed by Mario Carneiro,
     8-Sep-2016.)  (Proof shortened by Wolf Lammen, 19-Jun-2020.) $)
  cad1 $p |- ( ch -> ( cadd ( ph , ps , ch ) <-> ( ph \/ ps ) ) ) $=
    ( wo wa wcad olc jca biantrud w3a cadan 3anass bitri syl6rbbr ) CABDZOACDZB
    CDZEZEZABCFZCROCPQCAGCBGHITOPQJSABCKOPQLMN $.

  $( If one input is false, then the adder carry is true exactly when both of
     the other two inputs are true.  (Contributed by Mario Carneiro,
     8-Sep-2016.) $)
  cad0 $p |- ( -. ch -> ( cadd ( ph , ps , ch ) <-> ( ph /\ ps ) ) ) $=
    ( wcad wa wxo wo wn df-cad idd pm2.21 adantrd jaod orc impbid1 syl5bb ) ABC
    DABEZCABFZEZGZCHZQABCIUATQUAQQSUAQJUACQRCQKLMQSNOP $.

  $( The value of the carry is, if the input carry is true, the disjunction,
     and if the input carry is false, the conjunction, of the other two inputs.
     (Contributed by BJ, 8-Oct-2019.) $)
  cadifp $p |-
      ( cadd ( ph , ps , ch ) <-> if- ( ch , ( ph \/ ps ) , ( ph /\ ps ) ) ) $=
    ( wcad wo wa cad1 cad0 casesifp ) CABCDABEABFABCGABCHI $.

  $( If (at least) two inputs are true, then the adder carry is true.
     (Contributed by Mario Carneiro, 4-Sep-2016.) $)
  cad11 $p |- ( ( ph /\ ps ) -> cadd ( ph , ps , ch ) ) $=
    ( wa wxo wo wcad orc df-cad sylibr ) ABDZKCABEDZFABCGKLHABCIJ $.

  $( The adder carry is true as soon as its first two inputs are the truth
     constant.  (Contributed by Mario Carneiro, 4-Sep-2016.) $)
  cadtru $p |- cadd ( T. , T. , ph ) $=
    ( wtru wcad tru cad11 mp2an ) BBBBACDDBBAEF $.


$(
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
  Other axiomatizations related to classical propositional calculus
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
$)


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Minimal implicational calculus
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  Minimal implicational calculus, or intuitionistic implicational calculus, or
  positive implicational calculus, is the implicational fragment of minimal
  calculus (which is also the implicational fragment of intuitionistic calculus
  and of positive calculus).  It is sometimes called "C-pure intuitionism"
  since the letter C is sometimes used to denote implication, especially in
  prefix notation.  It can be axiomatized by the inference rule of modus ponens
  ~ ax-mp together with the axioms { ~ ax-1 , ~ ax-2 } (sometimes written KS),
  or with { ~ imim1 , ~ ax-1 , ~ pm2.43 } (written B'KW), or with { ~ imim2 ,
  ~ pm2.04 , ~ ax-1 , ~ pm2.43 } (written BCKW), or with the single axiom
  ~ minimp .  This section proves ~ minimp from { ~ ax-1 , ~ ax-2 }, and then
  the converse, due to Ivo Thomas.

  Sources for this section are the webpage
  ~ https://web.ics.purdue.edu/~~dulrich/C-pure-intuitionism-page.htm
  on Ted Ulrich's website, and the articles
  C. A. Meredith,
  _A single axiom of positive logic_,
  Journal of computing systems, vol. 1 (1953), 169--170,
  and
  C. A. Meredith, A. N. Prior,
  _Notes on the axiomatics of the propositional calculus_,
  Notre Dame Journal of Formal Logic, vol. 4 (1963), 171--187.

  We may use a compact notation for derivations known as the D-notation where
  "D" stands for "condensed Detachment".  For instance, "D21" means detaching
  ~ ax-1 from ~ ax-2 , that is, using modus ponens ~ ax-mp with ~ ax-1 as minor
  premise and ~ ax-2 as major premise.  D-strings are accepted by the grammar
  Dstr := digit | "D" Dstr Dstr.

  (Contributed by BJ, 11-Apr-2021.)

$)

  $( A single axiom for minimal implicational calculus, due to Meredith.  Other
     single axioms of the same length are known, but it is thought to be the
     minimal length.  Among single axioms of this length, it is the one with
     simplest antecedents (i.e., in the corresponding ordering of binary trees
     which first compares left subtrees, it is the first one).  (Contributed by
     BJ, 4-Apr-2021.) $)
  minimp $p |- ( ph ->
  ( ( ps -> ch ) -> ( ( ( th -> ps ) -> ( ch -> ta ) ) -> ( ps -> ta ) ) ) ) $=
    ( wi jarr a2d com12 a1i ) BCFZDBFCEFZFZBEFZFFAMKNMBCEDBLGHIJ $.

  $( $j usage 'minimp' avoids 'ax-3'; $)

  $( Derivation of Syll-Simp ( ~ jarr ) from ~ ax-mp and ~ minimp .
     (Contributed by BJ, 4-Apr-2021.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  minimp-syllsimp $p |- ( ( ( ph -> ps ) -> ch ) -> ( ps -> ch ) ) $=
    ( wi minimp ax-mp mp2 mp2b ) ABDZIDZJJDJDDZICDZDZLDZILCDZDZLBCDZDZJLIDZJDJD
    DZKDZITDZMDTLDDZNTIIIIETTTDZUDUDDUDDDDZUAUCDTTTTTEUETKILEFMMMDZUFUFDUFDDDZM
    TDUCNDMMMMMEMIILIEUGMTUBLEGHIKDZINDSNODDZPDDZNPDZIIIIIEUHINLOENNNDZULULDULD
    DDZNUIDUJUKDNNNNNENLIKCEUMNUIIPEGHLLLDZUNUNDUNDDDZLPDBLDPQDDZRDDZPRDZLLLLLE
    UOLPBQEPPPDZUSUSDUSDDDZPUPDUQURDPPPPPEPBLACEUTPUPLREGHH $.

  $( Derivation of ~ ax-1 from ~ ax-mp and ~ minimp .  (Contributed by BJ,
     4-Apr-2021.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  minimp-ax1 $p |- ( ph -> ( ps -> ph ) ) $=
    ( wi minimp-syllsimp ax-mp ) ABCZACBACZCAGCABADFAGDE $.

  $( Derivation of a commuted form of ~ ax-2 from ~ ax-mp and ~ minimp .
     (Contributed by BJ, 4-Apr-2021.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  minimp-ax2c $p |- ( ( ph -> ps ) ->
                                ( ( ph -> ( ps -> ch ) ) -> ( ph -> ch ) ) ) $=
    ( wi minimp ax-mp mp2 minimp-syllsimp ) ABDZAADZJJDJDDZADZBCDZDZACDZDZDZPAM
    DZODZDZISDZAKDZQAAAAAEUBABKCEFRRDZPDSDZTRUCUCUCDUCDDDZRNDZUDRRRRRELLDZRDNDZ
    UFLUGUGUGDUGDDDZLADZUHLLLLLEZLKDZUBLDLDZUJLAAAAEKKKDZUNUNDUNDDDZUNUMKKKKKEK
    AAAAEUOKKAAEGUIULUMUJDDUKUILKUBAEFGUILALMEGUGRNHFUERNROEGUCPSHFSQDZIIDZTDUA
    DZTUADZDZDQUSDZDZUTVAQQQDZVCVCDVCDDDZQURDZVBQQQQQEIUQUQUQDUQDDDZVEIIIIIEVFI
    PISEFVDQURSUSEGUQTUAHUPUTVAHGG $.

  $( Derivation of ~ ax-2 from ~ ax-mp and ~ minimp .  (Contributed by BJ,
     4-Apr-2021.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  minimp-ax2 $p |- ( ( ph -> ( ps -> ch ) ) ->
                                          ( ( ph -> ps ) -> ( ph -> ch ) ) ) $=
    ( wi minimp-ax2c minimp-syllsimp ax-mp mp2 ) ABDZABCDDZACDZDDZJLIKDZDZDZJMD
    ZABCEIJDNDOIJKEIJNFGJLDOPDZDLQDJLMEJLQFGH $.

  $( Derivation of ~ pm2.43 (also called "hilbert" or W) from ~ ax-mp and
     ~ minimp .  It uses the classical derivation from ~ ax-1 and ~ ax-2
     written DD22D21 in D-notation (see head comment for an explanation) and
     shortens the proof using ~ mp2 (which only requires ~ ax-mp ).
     (Contributed by BJ, 31-May-2021.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  minimp-pm2.43 $p |- ( ( ph -> ( ph -> ps ) ) -> ( ph -> ps ) ) $=
    ( wi minimp-ax2 minimp-ax1 ax-mp mp2 ) AABCZCZAACZHCCIJCZIHCAABDAHACCKAHEAH
    ADFIJHDG $.

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Implicational Calculus
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  Implicational calculus is the fragment of propositional logic that uses only
  material implication, and not negation. It can be axiomatized by inference
  rule modus ponens ~ ax-mp together with the axioms { ~ ax-1 , ~ ax-2 ,
  ~ peirce } or the Tarski-Bernays axioms { ~ ax-1 , ~ imim1 , ~ peirce } or
  with the single axiom { ~ impsingle }. From either one of these three axiom
  sets, all tautologies containing only material implication may be proved. In
  contrast, minimal implicational calculus, which is presented just before this
  section, cannot prove certain tautologies ( ~ peirce , for example ). The
  class of theorems proved by minimal implicational calculus is thus a subset
  of the class of theorems proved by implicational calculus.

  The primary source for this section is the paper by Lukasiewicz, _The
  Shortest Axiom of the Implicational Calculus of Propositions_, Proceedings
  of the Royal Irish Academy, Section A, vol. 52 (1948-1950), 25--33. It will
  be cited as simply "Lukasiewicz" in the remainder of this section.

  This section proves that the above three distinct axiom sets for
  implicational calculus all produce the same class of theorems.

  (Contributed by Larry Lesyna and Jeffrey P. Machado, 1-Aug-2023.)

$)


  $( The shortest single axiom for implicational calculus, due to Lukasiewicz.
     It is now known to be the _unique_ shortest axiom.  The axiom is proved
     here starting from { ~ ax-1 , ~ ax-2 and ~ peirce }.  (Contributed by
     Larry Lesyna and Jeffrey P. Machado, 18-Jul-2023.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  impsingle $p |- ( ( ( ph -> ps ) -> ch )
     -> ( ( ch -> ph ) -> ( th -> ph ) ) ) $=
    ( wi imim1 peirce a1d syl6 ) ABEZCECAEJAEZDAEJCAFKADABGHI $.

  $( Derivation of impsingle-step4 from ~ ax-mp and ~ impsingle .  It is used
     as a lemma in proofs of ~ imim1 and ~ peirce from ~ impsingle .  It is
     Step 4 in Lukasiewicz, where it appears as 'CCCpqpCsp' using
     parenthesis-free prefix notation.  (Contributed by Larry Lesyna and
     Jeffrey P. Machado, 2-Aug-2023.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  impsingle-step4 $p |- ( ( ( ph -> ps ) -> ph ) -> ( ch -> ph ) ) $=
    ( wta wet wze wsi wth wi impsingle ax-mp ) DEIFIFDIGDIIIZABIZAICAIIZDEFGJAH
    IZMIZNIZLNIZAHMCJNMIPIZQRIMMINISABMCJMMNOJKNMPLJKKK $.

  $( Derivation of impsingle-step8 from ~ ax-mp and ~ impsingle .  It is used
     as a lemma in proofs of ~ ax-1 ~ imim1 and ~ peirce from ~ impsingle .  It
     is Step 8 in Lukasiewicz, where it appears as 'CCCsqpCqp' using
     parenthesis-free prefix notation.  (Contributed by Larry Lesyna and
     Jeffrey P. Machado, 2-Aug-2023.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  impsingle-step8 $p |- ( ( ( ph -> ps ) -> ch ) -> ( ps -> ch ) ) $=
    ( wta wet wze wsi wth wi impsingle ax-mp ) DEIFIFDIGDIIIZABIZCIZBCIZIZDEFGJ
    ZCHIZMIZPIZLPIZCHMBJPMISIZTUAIMOIPIZUBOBIMIZUCLUDQBHIZOIZUDIZLUDIZBHOAJUDOI
    UFIZUGUHIOOIUDIUIBCOAJOOUDUEJKUDOUFLJKKKOBMNJKMOPRJKPMSLJKKK $.

  $( Derivation of impsingle-ax1 ( ~ ax-1 ) from ~ ax-mp and ~ impsingle .
     Lukasiewicz was used to construct this proof.  Every formula corresponding
     to a detachment step was converted to its corresponding Metamath formula.
     mmj2 was used to unify each formula using ~ ax-mp , which in turn produced
     this proof.  With extremely high confidence, this result shows that the
     Lukasiewicz proof of ~ ax-1 (step 27) is correct and that Metamath
     correctly verifies the proof.  The same comments apply to the proofs that
     follow this one.  (Contributed by Larry Lesyna and Jeffrey P. Machado,
     2-Aug-2023.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  impsingle-ax1 $p |- ( ph -> ( ps -> ph ) ) $=
    ( wch wi impsingle-step8 ax-mp ) CBDZADBADZDAHDCBAEGAHEF $.

  $( Derivation of impsingle-step15 from ~ ax-mp and ~ impsingle .  It is used
     as a lemma in proofs of ~ imim1 and ~ peirce from ~ impsingle .  It is
     Step 15 in Lukasiewicz, where it appears as 'CCCrqCspCCrpCsp' using
     parenthesis-free prefix notation.  (Contributed by Larry Lesyna and
     Jeffrey P. Machado, 2-Aug-2023.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  impsingle-step15 $p |- ( ( ( ph -> ps ) -> ( ch -> th ) )
                              -> ( ( ph -> th ) -> ( ch -> th ) ) ) $=
    ( wla wta wsi wrh wmu wet wze wi impsingle impsingle-step8 ax-mp ) DELZALZA
    DLZCDLZLZLZABLZSLZTLZDEACMFGLHLHFLIFLLLZUAUDLZFGHIMTJLZQLZUFLZUEUFLZTJQUCMU
    FQLUHLZUIUJLQUDLUFLZUKUDALQLZULUBUDLZUMSKLZUBLUDLUNSKUBRMUOUBUDNOABUDPMOUDA
    QUAMOQUDUFUGMOUFQUHUEMOOOO $.

  $( Derivation of impsingle-step18 from ~ ax-mp and ~ impsingle .  It is used
     as a lemma in proofs of ~ imim1 and ~ peirce from ~ impsingle .  It is
     Step 18 in Lukasiewicz, where it appears as 'CCCCrpCspCCCpqrtCuCCCpqrt'
     using parenthesis-free prefix notation.  (Contributed by Larry Lesyna and
     Jeffrey P. Machado, 2-Aug-2023.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  impsingle-step18 $p |- ( ( ( ( ph -> ps ) -> ( ch -> ps ) )
                               -> ( ( ( ps -> th ) -> ph ) -> ta ) )
                 -> ( et -> ( ( ( ps -> th ) -> ph ) -> ta ) ) ) $=
    ( wrh wi impsingle impsingle-step8 ax-mp impsingle-step15 ) BDHAHZEHZCBHZHZ
    ABHZOHZHZRNHFNHHMRHZSBDACINSHZTSHOGHZNHSHUAOGNQIUBNSJKMEPRLKKNORFIK $.

  $( Derivation of impsingle-step19 from ~ ax-mp and ~ impsingle .  It is used
     as a lemma in proofs of ~ imim1 and ~ peirce from ~ impsingle .  It is
     Step 19 in Lukasiewicz, where it appears as 'CCCCspqCrpCCCpqrCsp' using
     parenthesis-free prefix notation.  (Contributed by Larry Lesyna and
     Jeffrey P. Machado, 2-Aug-2023.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  impsingle-step19 $p |- ( ( ( ( ph -> ps ) -> ch ) -> ( th -> ps ) )
                        -> ( ( ( ps -> ch ) -> th ) -> ( ph -> ps ) ) ) $=
    ( wta wet wze wsi wrh wmu wi impsingle-step18 ax-mp ) EFKGFKKFHKEKIKZKJNKKZ
    ABKZCKDBKZKZBCKDKZPKZKZEFGHIJLQPKTKUAKOUAKDBACPRLQPSCTOLMM $.

  $( Derivation of impsingle-step20 from ~ ax-mp and ~ impsingle .  It is used
     as a lemma in proofs of ~ imim1 and ~ peirce from ~ impsingle .  It is
     Step 20 in Lukasiewicz, where it appears as 'CCCCrppCspCCCpqrCsp' using
     parenthesis-free prefix notation.  (Contributed by Larry Lesyna and
     Jeffrey P. Machado, 2-Aug-2023.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  impsingle-step20 $p  |- ( ( ( ( ph -> ps ) -> ps ) -> ( ch -> ps ) )
                          -> ( ( ( ps -> th ) -> ph ) -> ( ch -> ps ) ) ) $=
    ( wta wze wsi wrh wet wi impsingle-step19 impsingle impsingle-step8 ax-mp )
    CBJZDJZABJZJZBDJAJZOJZJZQBJZOJZTJZCBDAKEFJGJGEJHEJJJZUAUDJZEFGHLTIJZRJZUFJZ
    UEUFJZTIRUCLUFRJUHJZUIUJJRUDJUFJZUKUDQJRJZULUBUDJZUMOEJZUBJUDJUNOEUBSLUOUBU
    DMNQBUDPLNUDQRUALNRUDUFUGLNUFRUHUELNNNN $.

  $( Derivation of impsingle-step21 from ~ ax-mp and ~ impsingle .  It is used
     as a lemma in the proof of ~ imim1 from ~ impsingle .  It is Step 21 in
     Lukasiewicz, where it appears as 'CCCCprqqCCqrCpr' using parenthesis-free
     prefix notation.  (Contributed by Larry Lesyna and Jeffrey P. Machado,
     2-Aug-2023.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  impsingle-step21 $p  |- ( ( ( ( ph -> ps ) -> ch ) -> ch )
                           -> ( ( ch -> ps ) -> ( ph -> ps ) ) ) $=
    ( wi impsingle-step15 impsingle-step20 ax-mp ) CABDZDHDCBDZHDZDHCDCDJDCHABE
    CHICFG $.

  $( Derivation of impsingle-step22 from ~ ax-mp and ~ impsingle .  It is used
     as a lemma in proofs of ~ imim1 and ~ peirce from ~ impsingle .  It is
     Step 22 in Lukasiewicz, where it appears as 'Cpp' using parenthesis-free
     prefix notation.  (Contributed by Larry Lesyna and Jeffrey P. Machado,
     2-Aug-2023.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  impsingle-step22 $p  |- ( ph -> ph ) $=
    ( wth wmu wla wps wi impsingle-step4 impsingle ax-mp ) BCFBFDBFFZAAFZBCDGAE
    FZAFZKFZJKFZAEAGKAFMFNOFAALGKAMJHIII $.

  $( Derivation of impsingle-step25 from ~ ax-mp and ~ impsingle .  It is used
     as a lemma in the proof of ~ imim1 from ~ impsingle .  It is Step 25 in
     Lukasiewicz, where it appears as 'CCpqCCCprqq' using parenthesis-free
     prefix notation.  (Contributed by Larry Lesyna and Jeffrey P. Machado,
     2-Aug-2023.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  impsingle-step25 $p  |- ( ( ph -> ps )
                         -> ( ( ( ph -> ch ) -> ps ) -> ps ) ) $=
    ( wth wi impsingle-step22 impsingle-step20 impsingle-step8 impsingle-step15
    ax-mp ) ACEZKBEZBEZEZABEMEBDEZKEMEZNMMEPMFKBLDGJOKMHJACLBIJ $.

  $( Derivation of impsingle-imim1 ( ~ imim1 ) from ~ ax-mp and ~ impsingle .
     It is step 29 in Lukasiewicz.  (Contributed by Larry Lesyna and Jeffrey P.
     Machado, 2-Aug-2023.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  impsingle-imim1 $p |- ( ( ph -> ps )
                          -> ( ( ps -> ch ) -> ( ph -> ch ) ) ) $=
    ( wi impsingle-step21 impsingle-step25 ax-mp ) ACDZBDBDZBCDHDZDZABDZJDZACBE
    MIDIDZKMDLIDNABCFLIJFGLJIEGG $.

  $( Derivation of impsingle-peirce ( ~ peirce ) from ~ ax-mp and ~ impsingle .
     It is step 28 in Lukasiewicz.  (Contributed by Larry Lesyna and Jeffrey P.
     Machado, 2-Aug-2023.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  impsingle-peirce $p |- ( ( ( ph -> ps ) -> ph ) -> ph ) $=
    ( wi impsingle-step22 impsingle-step25 ax-mp ) AACABCACACADAABEF $.

  $( Derivation of ~ ax-2 from the Tarski-Bernays axiom set { ~ ax-1 ,
     ~ imim1 , ~ peirce }.  Note that no inference rule other than ~ ax-mp is
     used in this proof.  This proof establishes a circle of equivalence:  From
     { ~ impsingle }, { ~ ax-1 , ~ imim1 , ~ peirce } was proved.  From {
     ~ ax-1 , ~ imim1 , ~ peirce }, { ~ ax-1 , ~ ax-2 and ~ peirce } was
     proved.  From { ~ ax-1 , ~ ax-2 and ~ peirce }, { ~ impsingle } was
     proved.  Therefore, the theorems that can be proved by selecting any one
     of these three distinct axiom sets must be equivalent.  Prover9 and mmj2
     were used to help constuct this proof.  (Contributed by Larry Lesyna and
     Jeffrey P. Machado, 1-Aug-2023.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  tarski-bernays-ax2 $p |- ( ( ph -> ( ps -> ch ) )
                             -> ( ( ph -> ps ) -> ( ph -> ch ) ) ) $=
    ( wi peirce ax-1 ax-mp imim1 ) ABDZABCDZDZACDZDZDZKILDZDZJLDZMDZNKQLDZDZRJC
    DZLDZSDZTQUBLDZDZUCLCDZUADZUDDZUEUBUFLDZDZUDDZUHUILDZUDDZUDDZUKUMUNDZUNUMUL
    DZUOULUPLCEULUMFGUMULUDHGUNUDDUNDZUNDZUOUNDZUNUDEUOUQDURUSDUMUNUDHUOUQUNHGG
    GUJUMDUNUKDUBUILHUJUMUDHGGUGUJDUKUHDUFUALHUGUJUDHGGQUGDUHUEDJLCHQUGUDHGGUBU
    DLDZDZUEUCDZUDUBDZUTDZVAUDUTDZUTDZVDUTLDUTDZUTDZVFUTLEVEVGDVHVFDUDUTLHVEVGU
    THGGVCVEDVFVDDUDUBLHVCVEUTHGGUBVCDVDVADUBUDFUBVCUTHGGUTSDZUCDZVBDZVAVBDZUEV
    IDVKQUDLHUEVIUCHGVAVJDVKVLDUBUTSHVAVJVBHGGGGKUBDUCTDAJCHKUBSHGGQSLDZDZTRDZS
    QDZVMDZVNSVMDZVMDZVQVMLDVMDZVMDZVSVMLEVRVTDWAVSDSVMLHVRVTVMHGGVPVRDVSVQDSQL
    HVPVRVMHGGQVPDVQVNDQSFQVPVMHGGVMMDZRDZVODZVNVODZTWBDWDKSLHTWBRHGVNWCDWDWEDQ
    VMMHVNWCVOHGGGGIQDRNDABCHIQMHGGKMLDZDZNPDZMKDZWFDZWGMWFDZWFDZWJWFLDWFDZWFDZ
    WLWFLEWKWMDWNWLDMWFLHWKWMWFHGGWIWKDWLWJDMKLHWIWKWFHGGKWIDWJWGDKMFKWIWFHGGWF
    ODZPDZWHDZWGWHDZNWODWQIMLHNWOPHGWGWPDWQWRDKWFOHWGWPWHHGGGG $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Derive the Lukasiewicz axioms from Meredith's sole axiom
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Carew Meredith's sole axiom for propositional calculus.  This amazing
     formula is thought to be the shortest possible single axiom for
     propositional calculus with inference rule ~ ax-mp , where negation and
     implication are primitive.  Here we prove Meredith's axiom from ~ ax-1 ,
     ~ ax-2 , and ~ ax-3 .  Then from it we derive the Lukasiewicz axioms
     ~ luk-1 , ~ luk-2 , and ~ luk-3 .  Using these we finally rederive our
     axioms as ~ ax1 , ~ ax2 , and ~ ax3 , thus proving the equivalence of all
     three systems.  C. A. Meredith, "Single Axioms for the Systems (C,N),
     (C,O) and (A,N) of the Two-Valued Propositional Calculus", _The Journal of
     Computing Systems_ vol. 1 (1953), pp. 155-164.  Meredith claimed to be
     close to a proof that this axiom is the shortest possible, but the proof
     was apparently never completed.

     An obscure Irish lecturer, Meredith (1904-1976) became enamored with logic
     somewhat late in life after attending talks by Lukasiewicz and produced
     many remarkable results such as this axiom.  From his obituary:  "He did
     logic whenever time and opportunity presented themselves, and he did it on
     whatever materials came to hand: in a pub, his favored pint of porter
     within reach, he would use the inside of cigarette packs to write proofs
     for logical colleagues."  (Contributed by NM, 14-Dec-2002.)  (Proof
     shortened by Andrew Salmon, 25-Jul-2011.)  (Proof shortened by Wolf
     Lammen, 28-May-2013.) $)
  meredith $p |- ( ( ( ( ( ph -> ps ) -> ( -. ch -> -. th ) ) -> ch ) ->
       ta ) -> ( ( ta -> ph ) -> ( th -> ph ) ) ) $=
    ( wi wn pm2.21 con4 imim12i com13 con1d com12 a1d ax-1 imim1d ja ) ABFZCGDG
    FZFZCFZEEAFZDAFZFUAGZUCUBDUDADAUATAGZDCUERSDCFABHCDIJKLMNEDEAEDOPQ $.

  $( Step 3 of Meredith's proof of Lukasiewicz axioms from his sole axiom.
     (The step numbers refer to Meredith's original paper.)  (Contributed by
     NM, 14-Dec-2002.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  merlem1 $p |- ( ( ( ch -> ( -. ph -> ps ) ) -> ta ) -> ( ph -> ta ) ) $=
    ( wn wi meredith ax-mp ) DAEZFIBFZEZIFFZJFCJFZFZMDFADFFJDECEFZEKEFZFOFDFLFN
    IBOKDGJPDCLGHDIJAMGH $.

  $( Step 4 of Meredith's proof of Lukasiewicz axioms from his sole axiom.
     (Contributed by NM, 14-Dec-2002.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  merlem2 $p |- ( ( ( ph -> ph ) -> ch ) -> ( th -> ch ) ) $=
    ( wi wn merlem1 meredith ax-mp ) BBDZAECEZDDADAADZDKBDCBDDAJIAFBBACKGH $.

  $( Step 7 of Meredith's proof of Lukasiewicz axioms from his sole axiom.
     (Contributed by NM, 14-Dec-2002.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  merlem3 $p |- ( ( ( ps -> ch ) -> ph ) -> ( ch -> ph ) ) $=
    ( wi wn merlem2 ax-mp meredith ) AADZCEZJDZDZCDBCDZDZMADCADZDOBEZPDDBDZLDZN
    KKDLDRJKIFKLQFGCABBLHGAACCMHG $.

  $( Step 8 of Meredith's proof of Lukasiewicz axioms from his sole axiom.
     (Contributed by NM, 14-Dec-2002.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  merlem4 $p |- ( ta -> ( ( ta -> ph ) -> ( th -> ph ) ) ) $=
    ( wi wn meredith merlem3 ax-mp ) AADBEZIDDBDZCDCADBADDZDCKDAABBCFKJCGH $.

  $( Step 11 of Meredith's proof of Lukasiewicz axioms from his sole axiom.
     (Contributed by NM, 14-Dec-2002.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  merlem5 $p |- ( ( ph -> ps ) -> ( -. -. ph -> ps ) ) $=
    ( wi wn meredith merlem1 merlem4 ax-mp ) BBCZBDZJCCBCBCIICCZABCZADZDZBCCZBB
    BBBEIJNDCCBCZACZOCZKOCZBBBNAEOKDZCMTCCZACQCZRSCUAUBMBLTFAPUAGHOTAKQEHHH $.

  $( Step 12 of Meredith's proof of Lukasiewicz axioms from his sole axiom.
     (Contributed by NM, 14-Dec-2002.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  merlem6 $p |- ( ch -> ( ( ( ps -> ch ) -> ph ) -> ( th -> ph ) ) ) $=
    ( wi merlem4 merlem3 ax-mp ) BCEZIAEDAEEZECJEADIFJBCGH $.

  $( Between steps 14 and 15 of Meredith's proof of Lukasiewicz axioms from his
     sole axiom.  (Contributed by NM, 22-Dec-2002.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  merlem7 $p |- ( ph -> ( ( ( ps -> ch ) -> th ) -> ( ( ( ch -> ta ) ->
                  ( -. th -> -. ps ) ) -> th ) ) ) $=
    ( wi wn merlem4 merlem6 meredith ax-mp ) BCFZLDFZCEFDGBGFFZDFZFZFZAPFZDNLHP
    AGZFCGZSFFZCFLFZQRFOUAFUBSMOTICEDBUAJKPSCALJKK $.

  $( Step 15 of Meredith's proof of Lukasiewicz axioms from his sole axiom.
     (Contributed by NM, 22-Dec-2002.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  merlem8 $p |- ( ( ( ps -> ch ) -> th ) -> ( ( ( ch -> ta ) ->
                  ( -. th -> -. ps ) ) -> th ) ) $=
    ( wph wi wn meredith merlem7 ax-mp ) EEFZEGZLFFEFEFKKFFZABFCFBDFCGAGFFCFFEE
    EEEHMABCDIJ $.

  $( Step 18 of Meredith's proof of Lukasiewicz axioms from his sole axiom.
     (Contributed by NM, 22-Dec-2002.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  merlem9 $p |- ( ( ( ph -> ps ) -> ( ch -> ( th -> ( ps -> ta ) ) ) ) ->
                    ( et -> ( ch -> ( th -> ( ps -> ta ) ) ) ) ) $=
    ( wi wn merlem6 merlem8 ax-mp meredith ) CDBEGZGZGZFHZGBHZPGGZBGABGZGZSOGFO
    GGMRHDHGZHAHGZGUAGRGZTNRGUCPCNQIDMRUBJKBEUAARLKOPBFSLK $.

  $( Step 19 of Meredith's proof of Lukasiewicz axioms from his sole axiom.
     (Contributed by NM, 14-Dec-2002.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  merlem10 $p |- ( ( ph -> ( ph -> ps ) ) -> ( th -> ( ph -> ps ) ) ) $=
    ( wi wn meredith merlem9 ax-mp ) AADZAEZJDDADADIIDDZAABDZDZCLDDZAAAAAFLADJC
    EDDADZADNDKNDLAACAFOAMCBKGHH $.

  $( Step 20 of Meredith's proof of Lukasiewicz axioms from his sole axiom.
     (Contributed by NM, 14-Dec-2002.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  merlem11 $p |- ( ( ph -> ( ph -> ps ) ) -> ( ph -> ps ) ) $=
    ( wi wn meredith merlem10 ax-mp ) AACZADZICCACACHHCCZAABCZCZKCZAAAAAELMCJMC
    ABLFLKJFGG $.

  $( Step 28 of Meredith's proof of Lukasiewicz axioms from his sole axiom.
     (Contributed by NM, 14-Dec-2002.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  merlem12 $p |- ( ( ( th -> ( -. -. ch -> ch ) ) -> ph ) -> ph ) $=
    ( wn wi merlem5 merlem2 ax-mp merlem4 merlem11 ) CBDDBEZEZAEZMAEZEZNLOBBEKE
    LBBFBKCGHAMLIHMAJH $.

  $( Step 35 of Meredith's proof of Lukasiewicz axioms from his sole axiom.
     (Contributed by NM, 14-Dec-2002.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  merlem13 $p |- ( ( ph -> ps ) ->
              ( ( ( th -> ( -. -. ch -> ch ) ) -> -. -. ph ) -> ps ) ) $=
    ( wi wn merlem12 merlem5 ax-mp merlem6 meredith merlem11 ) BBEZAFZDCFFCEEZN
    FZEZFZEZEAEZAEZABEQBEETUAEZUASUBOREZREZSRCDGRBEZRFPEZEREUCEZUDSEUFUGQPEUFPC
    DGQPHIRUEUFOJIRBRNUCKIIAMSTJITALIBBAQAKI $.

  $( 1 of 3 axioms for propositional calculus due to Lukasiewicz, derived from
     Meredith's sole axiom.  (Contributed by NM, 14-Dec-2002.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  luk-1 $p |- ( ( ph -> ps ) -> ( ( ps -> ch ) -> ( ph -> ch ) ) ) $=
    ( wi wn meredith merlem13 ax-mp ) CCDZAEZEZEJDDKDBDZBCDACDDZDZABDZMDZCCKABF
    MADZOEZEZERDDSDLDZNPDOLDTABJIGOLRQGHMASOLFHH $.

  $( 2 of 3 axioms for propositional calculus due to Lukasiewicz, derived from
     Meredith's sole axiom.  (Contributed by NM, 14-Dec-2002.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  luk-2 $p |- ( ( -. ph -> ph ) -> ph ) $=
    ( wn wi merlem5 merlem4 ax-mp merlem11 meredith ) ABZACZJACZCZKAJBZCIBMCCZI
    CZICZLOPCZPNQAMDIONEFOIGFAMIJIHFJAGF $.

  $( 3 of 3 axioms for propositional calculus due to Lukasiewicz, derived from
     Meredith's sole axiom.  (Contributed by NM, 14-Dec-2002.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  luk-3 $p |- ( ph -> ( -. ph -> ps ) ) $=
    ( wn wi merlem11 merlem1 ax-mp ) ACZHBDZDIDAIDHBEABHIFG $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Derive the standard axioms from the Lukasiewicz axioms
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    luklem1.1 $e |- ( ph -> ps ) $.
    luklem1.2 $e |- ( ps -> ch ) $.
    $( Used to rederive standard propositional axioms from Lukasiewicz'.
       (Contributed by NM, 23-Dec-2002.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    luklem1 $p |- ( ph -> ch ) $=
      ( wi luk-1 ax-mp ) BCFZACFZEABFIJFDABCGHH $.
  $}

  $( Used to rederive standard propositional axioms from Lukasiewicz'.
     (Contributed by NM, 22-Dec-2002.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  luklem2 $p |- ( ( ph -> -. ps ) ->
                ( ( ( ph -> ch ) -> th ) -> ( ps -> th ) ) ) $=
    ( wn wi luk-1 luk-3 ax-mp luklem1 ) ABEZFZBACFZFZMDFBDFFLKCFZMFZNAKCGBOFPNF
    BCHBOMGIJBMDGJ $.

  $( Used to rederive standard propositional axioms from Lukasiewicz'.
     (Contributed by NM, 22-Dec-2002.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  luklem3 $p |- ( ph -> ( ( ( -. ph -> ps ) -> ch ) -> ( th -> ch ) ) ) $=
    ( wn wi luk-3 luklem2 luklem1 ) AAEZDEZFJBFCFDCFFAKGJDBCHI $.

  $( Used to rederive standard propositional axioms from Lukasiewicz'.
     (Contributed by NM, 22-Dec-2002.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  luklem4 $p |- ( ( ( ( -. ph -> ph ) -> ph ) -> ps ) -> ps ) $=
    ( wn wi luk-2 luklem3 ax-mp luk-1 luklem1 ) ACADADZBDZBCZBDZBLJDZKMDJCJDJDZ
    NJEJONDAEJJJLFGGLJBHGBEI $.

  $( Used to rederive standard propositional axioms from Lukasiewicz'.
     (Contributed by NM, 22-Dec-2002.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  luklem5 $p |- ( ph -> ( ps -> ph ) ) $=
    ( wn wi luklem3 luklem4 luklem1 ) AACADADBADZDHAAABEAHFG $.

  $( Used to rederive standard propositional axioms from Lukasiewicz'.
     (Contributed by NM, 22-Dec-2002.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  luklem6 $p |- ( ( ph -> ( ph -> ps ) ) -> ( ph -> ps ) ) $=
    ( wi luk-1 wn luklem5 luklem2 luklem4 luklem1 ax-mp ) AABCZCKBCZKCZKAKBDKEZ
    KCZKCMKCZCZPMOCZQNLCRNBEZNCZLNSFTSBCBCLCLSKBBGBLHIINLKDJMOKDJKPHJI $.

  $( Used to rederive standard propositional axioms from Lukasiewicz'.
     (Contributed by NM, 22-Dec-2002.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  luklem7 $p |- ( ( ph -> ( ps -> ch ) ) -> ( ps -> ( ph -> ch ) ) ) $=
    ( wi luk-1 luklem5 luklem1 luklem6 ax-mp ) ABCDZDJCDZACDZDZBLDZAJCEBKDMNDBJ
    KDZKBJBDOBJFJBCEGJCHGBKLEIG $.

  $( Used to rederive standard propositional axioms from Lukasiewicz'.
     (Contributed by NM, 22-Dec-2002.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  luklem8 $p |- ( ( ph -> ps ) -> ( ( ch -> ph ) -> ( ch -> ps ) ) ) $=
    ( wi luk-1 luklem7 ax-mp ) CADZABDZCBDZDDIHJDDCABEHIJFG $.

  $( Standard propositional axiom derived from Lukasiewicz axioms.
     (Contributed by NM, 22-Dec-2002.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  ax1 $p |- ( ph -> ( ps -> ph ) ) $=
    ( luklem5 ) ABC $.

  $( Standard propositional axiom derived from Lukasiewicz axioms.
     (Contributed by NM, 22-Dec-2002.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  ax2 $p |- ( ( ph -> ( ps -> ch ) ) -> ( ( ph -> ps ) -> ( ph -> ch ) ) ) $=
    ( wi luklem7 luklem8 luklem6 ax-mp luklem1 ) ABCDDBACDZDZABDZJDZABCEKLAJDZD
    ZMBJAFNJDOMDACGNJLFHII $.

  $( Standard propositional axiom derived from Lukasiewicz axioms.
     (Contributed by NM, 22-Dec-2002.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  ax3 $p |- ( ( -. ph -> -. ps ) -> ( ps -> ph ) ) $=
    ( wn wi luklem2 luklem4 luklem1 ) ACZBCDHADADBADZDIHBAAEAIFG $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Derive Nicod's axiom from the standard axioms
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  Prove Nicod's axiom and implication and negation definitions.

$)

  $( This theorem "defines" implication in terms of 'nand'.  Analogous to
     ~ nanim .  In a pure (standalone) treatment of Nicod's axiom, this theorem
     would be changed to a definition ($a statement).  (Contributed by NM,
     11-Dec-2008.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  nic-dfim $p |- ( ( ( ph -/\ ( ps -/\ ps ) ) -/\ ( ph -> ps ) ) -/\
                   ( ( ( ph -/\ ( ps -/\ ps ) ) -/\ ( ph -/\ ( ps -/\ ps ) ) )
                                   -/\ ( ( ph -> ps ) -/\ ( ph -> ps ) ) ) ) $=
    ( wnan wi wb nanim bicomi nanbi mpbi ) ABBCCZABDZEJKCJJCKKCCCKJABFGJKHI $.

  $( This theorem "defines" negation in terms of 'nand'.  Analogous to
     ~ nannot .  In a pure (standalone) treatment of Nicod's axiom, this
     theorem would be changed to a definition ($a statement).  (Contributed by
     NM, 11-Dec-2008.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  nic-dfneg $p |- ( ( ( ph -/\ ph ) -/\ -. ph ) -/\
           ( ( ( ph -/\ ph ) -/\ ( ph -/\ ph ) ) -/\ ( -. ph -/\ -. ph ) ) ) $=
    ( wnan wn wb nannot bicomi nanbi mpbi ) AABZACZDIJBIIBJJBBBJIAEFIJGH $.

  ${
    $( Minor premise. $)
    nic-jmin $e |- ph $.
    $( Major premise. $)
    nic-jmaj $e |- ( ph -/\ ( ch -/\ ps ) ) $.
    $( Derive Nicod's rule of modus ponens using 'nand', from the standard one.
       Although the major and minor premise together also imply ` ch ` , this
       form is necessary for useful derivations from ~ nic-ax .  In a pure
       (standalone) treatment of Nicod's axiom, this theorem would be changed
       to an axiom ($a statement).  (Contributed by Jeff Hoffman, 19-Nov-2007.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    nic-mp $p |- ps $=
      ( wnan wa wi nannan mpbi simprd ax-mp ) ABDACBACBFFACBGHEACBIJKL $.

    $( A direct proof of ~ nic-mp .  (Contributed by NM, 30-Dec-2008.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    nic-mpALT $p |- ps $=
      ( wa wi wn wnan df-nan anbi2i xchbinx mpbi iman mpbir simprd ax-mp ) ABDA
      CBACBFZGARHZFZHZACBIZIZUAEUCAUBFTAUBJUBSACBJKLMARNOPQ $.
  $}

  $( Nicod's axiom derived from the standard ones.  See _Introduction to
     Mathematical Philosophy_ by B. Russell, p. 152.  Like ~ meredith , the
     usual axioms can be derived from this and vice versa.  Unlike ~ meredith ,
     Nicod uses a different connective ('nand'), so another form of modus
     ponens must be used in proofs, e.g. ` { ` ~ nic-ax , ~ nic-mp ` } ` is
     equivalent to ` { ` ~ luk-1 , ~ luk-2 , ~ luk-3 , ~ ax-mp ` } ` .  In a
     pure (standalone) treatment of Nicod's axiom, this theorem would be
     changed to an axiom ($a statement).  (Contributed by Jeff Hoffman,
     19-Nov-2007.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  nic-ax $p |- ( ( ph -/\ ( ch -/\ ps ) ) -/\ ( ( ta -/\ ( ta -/\ ta ) ) -/\
               ( ( th -/\ ch ) -/\ ( ( ph -/\ th ) -/\ ( ph -/\ th ) ) ) ) ) $=
    ( wnan wa wi nannan biimpi simpl imim2i wn imnan df-nan bitr4i imim2d con2b
    con3 mpbir 3bitr4ri syl6ibr syl5bir nanim sylib 3syl pm4.24 jctil ) ACBFFZE
    EEFFZDCFZADFZULFFZFFUIUJUMGHUIUMUJUIACBGZHZACHZUMUIUOACBIJUNCACBKLUPUKULHUM
    UKDCMZHZUPULURDCGMUKDCNDCOPUPURDAMZHZULUPUQUSDACSQADMHADGMUTULADNDARADOUAUB
    UCUKULUDUEUFUJEEEGZHEVAEUGJEEEITUHUIUJUMIT $.

  $( A direct proof of ~ nic-ax .  (Contributed by NM, 11-Dec-2008.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  nic-axALT $p |- ( ( ph -/\ ( ch -/\ ps ) ) -/\ ( ( ta -/\ ( ta -/\ ta ) )
           -/\ ( ( th -/\ ch ) -/\ ( ( ph -/\ th ) -/\ ( ph -/\ th ) ) ) ) ) $=
    ( wnan wa wn anidm df-nan anbi2i notbii iman 3bitr4i bitr4i xchbinx anbi12i
    wi imnan mpbir simpl imim2i con3 imim2d biimpri jctil con2b bitr3i 3bitri
    syl ) ACBFZFZEEEFZFZDCFZADFZUPFZFZFZFULUSGZHZVAACBGZRZEEEGZRZDCHZRZDAHZRZRZ
    GZRZVCVJVEVCACRZVJVBCACBUAUBVMVFVHDACUCUDUJVDEEIUEUFVAVCVKHZGZHVLUTVOULVCUS
    VNAUKGZHAVBHZGZHULVCVPVRUKVQACBJKLAUKJAVBMNUSUNURGVKUNURJUNVEURVJEUMGZHEVDH
    ZGZHUNVEVSWAUMVTEEEJKLEUMJEVDMNUOUQGZHVGVIHZGZHURVJWBWDUOVGUQWCUODCGHVGDCJD
    CSOUQUPUPGZVIUPUPJWEUPADGHZVIUPIADJWFADHRVIADSADUGUHUIPQLUOUQJVGVIMNQPQLVCV
    KMOTULUSJT $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Derive the Lukasiewicz axioms from Nicod's axiom
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    $( Minor premise. $)
    nic-imp.1 $e |- ( ph -/\ ( ch -/\ ps ) ) $.
    $( Inference for ~ nic-mp using ~ nic-ax as major premise.  (Contributed by
       Jeff Hoffman, 17-Nov-2007.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    nic-imp $p |- ( ( th -/\ ch ) -/\ ( ( ph -/\ th ) -/\ ( ph -/\ th ) ) ) $=
      ( wta wnan nic-ax nic-mp ) ACBGGDCGADGZJGGFFFGGEABCDFHI $.
  $}

  $( Lemma for ~ nic-id .  (Contributed by Jeff Hoffman, 17-Nov-2007.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  nic-idlem1 $p |- ( ( th -/\ ( ta -/\ ( ta -/\ ta ) ) ) -/\
                 ( ( ( ph -/\ ( ch -/\ ps ) ) -/\ th ) -/\
                   ( ( ph -/\ ( ch -/\ ps ) ) -/\ th ) ) ) $=
    ( wnan nic-ax nic-imp ) ACBFFACFAAFZIFFEEEFFDABCAEGH $.

  ${
    nic-idlem2.1 $e |- ( et -/\ ( ( ph -/\ ( ch -/\ ps ) ) -/\ th ) ) $.
    $( Lemma for ~ nic-id .  Inference used by ~ nic-id .  (Contributed by Jeff
       Hoffman, 17-Nov-2007.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    nic-idlem2 $p |- ( ( th -/\ ( ta -/\ ( ta -/\ ta ) ) ) -/\ et ) $=
      ( wnan nic-ax nic-imp nic-mp ) FACBHHZDHZHDEEEHHZHZFHZPGOMMFLACHAAHZQHHND
      ABCAEIJJK $.
  $}

  $( Theorem ~ id expressed with ` -/\ ` .  (Contributed by Jeff Hoffman,
     17-Nov-2007.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  nic-id $p |- ( ta -/\ ( ta -/\ ta ) ) $=
    ( wph wps wch wth wnan nic-ax nic-idlem2 nic-idlem1 nic-mp ) BCFZCBFZLFFZDD
    DFZFZFZCCCFFZFAAAFFZOEEEMDQCCCBEGHMNDPCORFKLLOAIHJ $.

  $( The connector ` -/\ ` is symmetric.  (Contributed by Jeff Hoffman,
     17-Nov-2007.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  nic-swap $p |- ( ( th -/\ ph ) -/\ ( ( ph -/\ th ) -/\ ( ph -/\ th ) ) ) $=
    ( wta wnan nic-id nic-ax nic-mp ) AAADDBADABDZHDDCCCDDAEAAABCFG $.

  ${
    nic-isw1.1 $e |- ( th -/\ ph ) $.
    $( Inference version of ~ nic-swap .  (Contributed by Jeff Hoffman,
       17-Nov-2007.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    nic-isw1 $p |- ( ph -/\ th ) $=
      ( wnan nic-swap nic-mp ) BADABDZGCABEF $.
  $}

  ${
    nic-isw2.1 $e |- ( ps -/\ ( th -/\ ph ) ) $.
    $( Inference for swapping nested terms.  (Contributed by Jeff Hoffman,
       17-Nov-2007.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    nic-isw2 $p |- ( ps -/\ ( ph -/\ th ) ) $=
      ( wnan nic-swap nic-imp nic-mp nic-isw1 ) BACEZBCAEZEJBEZLDJKKBCAFGHI $.
  $}

  ${
    nic-iimp1.1 $e |- ( ph -/\ ( ch -/\ ps ) ) $.
    nic-iimp1.2 $e |- ( th -/\ ch ) $.
    $( Inference version of ~ nic-imp using right-handed term.  (Contributed by
       Jeff Hoffman, 17-Nov-2007.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    nic-iimp1 $p |- ( th -/\ ph ) $=
      ( wnan nic-imp nic-mp nic-isw1 ) DADCGADGZKFABCDEHIJ $.
  $}

  ${
    nic-iimp2.1 $e |- ( ( ph -/\ ps ) -/\ ( ch -/\ ch ) ) $.
    nic-iimp2.2 $e |- ( th -/\ ph ) $.
    $( Inference version of ~ nic-imp using left-handed term.  (Contributed by
       Jeff Hoffman, 17-Nov-2007.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    nic-iimp2 $p |- ( th -/\ ( ch -/\ ch ) ) $=
      ( wnan nic-isw1 nic-iimp1 ) CCGZBADJABGEHFI $.
  $}

  ${
    nic-idel.1 $e |- ( ph -/\ ( ch -/\ ps ) ) $.
    $( Inference to remove the trailing term.  (Contributed by Jeff Hoffman,
       17-Nov-2007.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    nic-idel $p |- ( ph -/\ ( ch -/\ ch ) ) $=
      ( wnan nic-id nic-isw1 nic-imp nic-mp ) CCEZCEAJEZKJCCFGABCJDHI $.
  $}

  ${
    nic-ich.1 $e |- ( ph -/\ ( ps -/\ ps ) ) $.
    nic-ich.2 $e |- ( ps -/\ ( ch -/\ ch ) ) $.
    $( Chained inference.  (Contributed by Jeff Hoffman, 17-Nov-2007.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    nic-ich $p |- ( ph -/\ ( ch -/\ ch ) ) $=
      ( wnan nic-isw1 nic-imp nic-mp ) CCFZBFAJFZKJBEGABBJDHI $.
  $}

  ${
    nic-idbl.1 $e |- ( ph -/\ ( ps -/\ ps ) ) $.
    $( Double the terms.  Since doubling is the same as negation, this can be
       viewed as a contraposition inference.  (Contributed by Jeff Hoffman,
       17-Nov-2007.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    nic-idbl $p |- ( ( ps -/\ ps ) -/\ ( ( ph -/\ ph ) -/\ ( ph -/\ ph ) ) ) $=
      ( wnan nic-imp nic-ich ) BBDABDAADABBBCEABBACEF $.
  $}

  $( Biconditional justification from Nicod's axiom.  For nic-* definitions,
     the biconditional connective is not used.  Instead, definitions are made
     based on this form. ~ nic-bi1 and ~ nic-bi2 are used to convert the
     definitions into usable theorems about one side of the implication.
     (Contributed by Jeff Hoffman, 18-Nov-2007.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  nic-bijust $p |- ( ( ta -/\ ta ) -/\ ( ( ta -/\ ta ) -/\ ( ta -/\ ta ) ) ) $=
    ( nic-swap ) AAB $.

  ${
    $( 'Biconditional' premise. $)
    nic-bi1.1 $e |- ( ( ph -/\ ps ) -/\ ( ( ph -/\ ph )
         -/\ ( ps -/\ ps ) ) ) $.
    $( Inference to extract one side of an implication from a definition.
       (Contributed by Jeff Hoffman, 18-Nov-2007.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    nic-bi1 $p |- ( ph -/\ ( ps -/\ ps ) ) $=
      ( wnan nic-id nic-iimp1 nic-isw2 nic-idel ) AABBAAABDBBDAADACAEFGH $.
  $}

  ${
    $( 'Biconditional' premise. $)
    nic-bi2.1 $e |- ( ( ph -/\ ps ) -/\ ( ( ph -/\ ph )
         -/\ ( ps -/\ ps ) ) ) $.
    $( Inference to extract the other side of an implication from a
       'biconditional' definition.  (Contributed by Jeff Hoffman, 18-Nov-2007.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    nic-bi2 $p |- ( ps -/\ ( ph -/\ ph ) ) $=
      ( wnan nic-isw2 nic-id nic-iimp1 nic-idel ) BBAABDZAADZBBDZBKIJCEBFGH $.
  $}

  ${
    $( Minor premise. $)
    nic-smin $e |- ph $.
    $( Major premise. $)
    nic-smaj $e |- ( ph -> ps ) $.
    $( Derive the standard modus ponens from ~ nic-mp .  (Contributed by Jeff
       Hoffman, 18-Nov-2007.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    nic-stdmp $p |- ps $=
      ( wi wnan nic-dfim nic-bi2 nic-mp ) ABBCABEZABBFFZKDKJABGHII $.
  $}

  $( Proof of ~ luk-1 from ~ nic-ax and ~ nic-mp (and definitions ~ nic-dfim
     and ~ nic-dfneg ).  Note that the standard axioms ~ ax-1 , ~ ax-2 , and
     ~ ax-3 are proved from the Lukasiewicz axioms by theorems ~ ax1 , ~ ax2 ,
     and ~ ax3 .  (Contributed by Jeff Hoffman, 18-Nov-2007.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  nic-luk1 $p |- ( ( ph -> ps ) -> ( ( ps -> ch ) -> ( ph -> ch ) ) ) $=
    ( wta wi nic-dfim nic-bi2 nic-ax nic-isw2 nic-idel nic-bi1 nic-idbl nic-imp
    wnan nic-swap nic-ich nic-mp ) ABEZBCEZACEZEZUANNZRUAEZUCRABBNNZUAUDRABFGUD
    STTNZNZUAUDCCNZBNZAUGNZUINZNZUFUDDDDNNZUKUKUDULABBUGDHIJUKUEUHNUFUEUJUJUHUI
    TUITACFKLMSUHUHUESBUGNZUHUMSBCFGUGBOPMPPUFUASTFKPPUBUCRUAFKQ $.

  $( Proof of ~ luk-2 from ~ nic-ax and ~ nic-mp .  (Contributed by Jeff
     Hoffman, 18-Nov-2007.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  nic-luk2 $p |- ( ( -. ph -> ph ) -> ph ) $=
    ( wn wi wnan nic-dfim nic-bi2 nic-dfneg nic-iimp1 nic-isw2 nic-isw1 nic-bi1
    nic-id nic-mp ) ABZACZAADZDZOACZROPONPDZSPSONAEFNPPPNDNNDPPDPAGPLHIHJQROAEK
    M $.

  $( Proof of ~ luk-3 from ~ nic-ax and ~ nic-mp .  (Contributed by Jeff
     Hoffman, 18-Nov-2007.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  nic-luk3 $p |- ( ph -> ( -. ph -> ps ) ) $=
    ( wnan nic-dfim nic-bi1 nic-dfneg nic-bi2 nic-id nic-iimp1 nic-iimp2 nic-mp
    wn wi ) AALZBMZOCCZAOMZQNBBCZOANRCONBDENAACZSASNAFGAHIJPQAODEK $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Derive Nicod's Axiom from Lukasiewicz's First Sheffer Stroke Axiom
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( This alternative axiom for propositional calculus using the Sheffer Stroke
     was discovered by Lukasiewicz in his Selected Works.  It improves on
     Nicod's axiom by reducing its number of variables by one.

     This axiom also uses ~ nic-mp for its constructions.

     Here, the axiom is proved as a substitution instance of ~ nic-ax .
     (Contributed by Anthony Hart, 31-Jul-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  lukshef-ax1 $p |- ( ( ph -/\ ( ch -/\ ps ) ) -/\ ( ( th -/\ ( th -/\ th ) )
          -/\ ( ( th -/\ ch ) -/\ ( ( ph -/\ th ) -/\ ( ph -/\ th ) ) ) ) ) $=
    ( nic-ax ) ABCDDE $.

  $( Lemma for ~ renicax .  (Contributed by NM, 31-Jul-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  lukshefth1 $p |- ( ( ( ( ta -/\ ps ) -/\ ( ( ph -/\ ta ) -/\ ( ph
          -/\ ta ) ) ) -/\ ( th -/\ ( th -/\ th ) ) ) -/\ ( ph -/\ ( ps
          -/\ ch ) ) ) $=
    ( wnan lukshef-ax1 nic-mp ) ABCFFZEEEFFZEBFAEFZKFFZFZFZLDDDFFZFZIFZQACBEGPM
    MFFZNQQFFIIIFFJODEFEDFZSFFZFFRLLLFFEEEDGJTOLGHPMMIGHH $.

  $( Lemma for ~ renicax .  (Contributed by NM, 31-Jul-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  lukshefth2 $p |- ( ( ta -/\ th ) -/\ ( ( th -/\ ta ) -/\ ( th
          -/\ ta ) ) ) $=
    ( wps wch wph wnan lukshef-ax1 nic-mp lukshefth1 ) AAAFFZBAFABFZKFFBBBFFAJF
    ZCDEFFZAFZNFFZJBEFEBFZPFFZMJADFCAFZRFFZFFOJCEDAGMSJAGHQJFZEEEFFZFZOTFZUCEEE
    ABIOUAENFLEFZUDFFZFFUBUCUCFFTTTFFLNNEGOUEUATGHHHAAABGH $.

  $( A rederivation of ~ nic-ax from ~ lukshef-ax1 , proving that ~ lukshef-ax1
     with ~ nic-mp can be used as a complete axiomatization of propositional
     calculus.  (Contributed by Anthony Hart, 31-Jul-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  renicax $p |- ( ( ph -/\ ( ch -/\ ps ) ) -/\ ( ( ta -/\ ( ta -/\ ta ) )
          -/\ ( ( th -/\ ch ) -/\ ( ( ph -/\ th ) -/\ ( ph -/\ th ) ) ) ) ) $=
    ( wnan lukshefth1 lukshefth2 nic-mp lukshef-ax1 ) EEEFFZDCFADFZLFFZFZACBFFZ
    FZONFZQOMKFZFZPPROFSSACBEDGORHINRRFFSPPFFOOOFFMKHNRROJIIONHI $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Derive the Lukasiewicz Axioms from the Tarski-Bernays-Wajsberg Axioms
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Justification for ~ tbw-negdf .  (Contributed by Anthony Hart,
     15-Aug-2011.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  tbw-bijust $p |- ( ( ph <-> ps ) <->
                      ( ( ( ph -> ps ) -> ( ( ps -> ph ) -> F. ) ) -> F. ) ) $=
    ( wb wi wn wfal dfbi1 pm2.21 imim2i falim impbii notbii ax-1 pm2.43i 3bitri
    id ja ) ABCABDZBADZEZDZERSFDZDZEZUCFDZABGUAUCUAUCTUBRSFHIUBTRSFTTPTJQIKLUDU
    EUCFHUEUDUCFUEUDDZUDUEMUFJQNKO $.

  $( The definition of negation, in terms of ` -> ` and ` F. ` .  (Contributed
     by Anthony Hart, 15-Aug-2011.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  tbw-negdf $p |- ( ( ( -. ph -> ( ph -> F. ) )
    -> ( ( ( ph -> F. ) -> -. ph ) -> F. ) ) -> F. ) $=
    ( wn wfal wi wb pm2.21 ax-1 falim ja pm2.43i impbii tbw-bijust mpbi ) ABZAC
    DZENODONDZCDDCDNOACFONACPNOGPHIJKNOLM $.

  $( The first of four axioms in the Tarski-Bernays-Wajsberg system.
     (Contributed by Anthony Hart, 13-Aug-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  tbw-ax1 $p |- ( ( ph -> ps ) -> ( ( ps -> ch ) -> ( ph -> ch ) ) ) $=
    ( imim1 ) ABCD $.

  $( The second of four axioms in the Tarski-Bernays-Wajsberg system.
     (Contributed by Anthony Hart, 13-Aug-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  tbw-ax2 $p |- ( ph -> ( ps -> ph ) ) $=
    ( ax-1 ) ABC $.

  $( The third of four axioms in the Tarski-Bernays-Wajsberg system.
     (Contributed by Anthony Hart, 13-Aug-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  tbw-ax3 $p |- ( ( ( ph -> ps ) -> ph ) -> ph ) $=
    ( peirce ) ABC $.

  $( The fourth of four axioms in the Tarski-Bernays-Wajsberg system.

     This axiom was added to the Tarski-Bernays axiom system (see ~ tb-ax1 ,
     ~ tb-ax2 , and ~ tb-ax3 ) by Wajsberg for completeness.  (Contributed by
     Anthony Hart, 13-Aug-2011.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  tbw-ax4 $p |- ( F. -> ph ) $=
    ( falim ) AB $.

  ${
    tbwsyl.1 $e |- ( ph -> ps ) $.
    tbwsyl.2 $e |- ( ps -> ch ) $.
    $( Used to rederive the Lukasiewicz axioms from Tarski-Bernays-Wajsberg'.
       (Contributed by Anthony Hart, 16-Aug-2011.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    tbwsyl $p |- ( ph -> ch ) $=
      ( wi tbw-ax1 ax-mp ) BCFZACFZEABFIJFDABCGHH $.
  $}

  $( Used to rederive the Lukasiewicz axioms from Tarski-Bernays-Wajsberg'.
     (Contributed by Anthony Hart, 16-Aug-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  tbwlem1 $p |- ( ( ph -> ( ps -> ch ) ) -> ( ps -> ( ph -> ch ) ) ) $=
    ( wi tbw-ax2 tbw-ax1 tbwsyl tbw-ax3 mpsyl ) BBCDZCDZDAJDKACDZDBLDBJKDZKBJBD
    MBJEJBCFGMKCDKDKJKCFKCHGGAJCFBKLFI $.

  $( Used to rederive the Lukasiewicz axioms from Tarski-Bernays-Wajsberg'.
     (Contributed by Anthony Hart, 16-Aug-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  tbwlem2 $p |- ( ( ph -> ( ps -> F. ) ) -> ( ( ( ph -> ch ) -> th )
    -> ( ps -> th ) ) ) $=
    ( wfal wi tbw-ax4 tbw-ax1 tbwlem1 ax-mp mpsyl tbwsyl ) ABEFZFZBACFZFZODFBDF
    FBMCFZFZNQOFPMBCFZFZRECFZTCGMUASFFUATFBECHMUASIJJMBCIJAMCHBQOHKBODHL $.

  $( Used to rederive the Lukasiewicz axioms from Tarski-Bernays-Wajsberg'.
     (Contributed by Anthony Hart, 16-Aug-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  tbwlem3 $p |- ( ( ( ( ( ph -> F. ) -> ph ) -> ph ) -> ps ) -> ps ) $=
    ( wfal wi tbw-ax3 tbw-ax2 tbw-ax1 tbwsyl ax-mp ) ACDADADZBDZKBDZDZLJMACEJKJ
    DMJKFKJBGHIMLBDLDLKLBGLBEHI $.

  $( Used to rederive the Lukasiewicz axioms from Tarski-Bernays-Wajsberg'.
     (Contributed by Anthony Hart, 16-Aug-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  tbwlem4 $p |- ( ( ( ph -> F. ) -> ps ) -> ( ( ps -> F. ) -> ph ) ) $=
    ( wfal wi tbw-ax4 tbw-ax1 tbwlem1 ax-mp tbwlem2 tbwlem3 tbwsyl ) ACDZBDZLBC
    DZCDZDZNADZBODZMPDZNNDZRCCDZTCENUANDDUATDBCCFNUANGHHNBCGHMRPDDRSDLBOFMRPGHH
    PLADADQDQLNAAIAQJKK $.

  $( Used to rederive the Lukasiewicz axioms from Tarski-Bernays-Wajsberg'.
     (Contributed by Anthony Hart, 16-Aug-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  tbwlem5 $p |- ( ( ( ph -> ( ps -> F. ) ) -> F. ) -> ph ) $=
    ( wfal wi tbw-ax2 tbw-ax1 tbwsyl tbwlem1 ax-mp tbwlem4 ) ACDZABCDZDZDZMCDAD
    AKLDZDNABADOABEBACFGAKLHIAMJI $.

  $( ~ luk-1 derived from the Tarski-Bernays-Wajsberg axioms.  (Contributed by
     Anthony Hart, 16-Aug-2011.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  re1luk1 $p |- ( ( ph -> ps ) -> ( ( ps -> ch ) -> ( ph -> ch ) ) ) $=
    ( tbw-ax1 ) ABCD $.

  $( ~ luk-2 derived from the Tarski-Bernays-Wajsberg axioms.  (Contributed by
     Anthony Hart, 16-Aug-2011.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  re1luk2 $p |- ( ( -. ph -> ph ) -> ph ) $=
    ( wn wi wfal tbw-negdf tbw-ax2 tbwlem4 ax-mp tbw-ax1 tbw-ax3 tbwsyl ) ABZAC
    ZADCZACZANLCZMOCLNCZPDCZCZDCZPAERSCTPCRQFPSGHHNLAIHADJK $.

  $( ~ luk-3 derived from the Tarski-Bernays-Wajsberg axioms.

     This theorem, along with ~ re1luk1 and ~ re1luk2 proves that ~ tbw-ax1 ,
     ~ tbw-ax2 , ~ tbw-ax3 , and ~ tbw-ax4 , with ~ ax-mp can be used as a
     complete axiom system for all of propositional calculus.  (Contributed by
     Anthony Hart, 16-Aug-2011.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  re1luk3 $p |- ( ph -> ( -. ph -> ps ) ) $=
    ( wn wfal wi tbw-negdf tbwlem5 ax-mp tbw-ax4 tbw-ax1 tbwlem1 mpsyl ) ACZADE
    ZEZANBEZMBEONMEZDEEDEOAFOQGHNABEZEZAPEDBEZSBINTREETSEADBJNTRKHHNABKHMNBJL
    $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Derive the Tarski-Bernays-Wajsberg axioms from Meredith's First CO Axiom
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( A single axiom for propositional calculus discovered by C. A. Meredith.

     This axiom is worthy of note, due to it having only 19 symbols, not
     counting parentheses.  The more well-known ~ meredith has 21 symbols, sans
     parentheses.

     See ~ merco2 for another axiom of equal length.  (Contributed by Anthony
     Hart, 13-Aug-2011.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  merco1 $p |- ( ( ( ( ( ph -> ps ) -> ( ch -> F. ) ) -> th ) -> ta )
         -> ( ( ta -> ph ) -> ( ch -> ph ) ) ) $=
    ( wi wfal wn ax-1 falim ja imim2i imim1i meredith syl ) ABFZCGFZFZDFZEFPDHZ
    CHZFZFZDFZEFEAFCAFFUDSERUCDQUBPCGUBUATIUBJKLMMABDCENO $.

  $( Used to rederive the Tarski-Bernays-Wajsberg axioms from ~ merco1 .
     (Contributed by Anthony Hart, 17-Sep-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  merco1lem1 $p |- ( ph -> ( F. -> ch ) ) $=
    ( wfal wi merco1 ax-mp ) AACADZDZDZACBDZDZHGDZHDZIGCDACDZDZGDHDZMGNDZNDZGDO
    DPCAANGEGNAGOEFGCAGHEFHCDZNDZGDLDZMIDQSDHDTDUACAASHEGNHHTEFHCAGLEFFHJDZKDZI
    KDZJCDNDZGDHDZUCRJDUEDUFCAANJEGNAJUEEFJCAGHEFKCDICDZDZJDUBDZUCUDDJUGDSDKDUH
    DUICBISKEJUGHKUHEFKCIJUBEFFF $.

  $( ~ tbw-ax4 rederived from ~ merco1 .  (Contributed by Anthony Hart,
     17-Sep-2011.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  retbwax4 $p |- ( F. -> ph ) $=
    ( wfal wi merco1lem1 ax-mp ) ABACZCZFAADGADE $.

  $( ~ tbw-ax2 rederived from ~ merco1 .  (Contributed by Anthony Hart,
     17-Sep-2011.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  retbwax2 $p |- ( ph -> ( ps -> ph ) ) $=
    ( wi wfal merco1lem1 merco1 ax-mp ) AAAACZCZCZABACZCZDACZHCZICZJHACADCZCACZ
    MCOQAEHAAAMFGIPCPCDCNCOJCAHAPDFIPADNFGGMKCZLCZJLCZKACPCACZMCSUAAEKAAAMFGLBD
    CZCJDCZCDCRCSTCAKBUCDFLUBJDRFGGG $.

  $( Used to rederive the Tarski-Bernays-Wajsberg axioms from ~ merco1 .
     (Contributed by Anthony Hart, 17-Sep-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  merco1lem2 $p |- ( ( ( ph -> ps ) -> ch ) -> ( ( ( ps -> ta ) -> ( ph ->
    F. ) ) -> ch ) ) $=
    ( wi wfal retbwax2 merco1 ax-mp ) CAEZBDEAFEEZFEZEZBEABEZEZNCEKCEELMEOLJGBD
    AFMHICAKBNHI $.

  $( Used to rederive the Tarski-Bernays-Wajsberg axioms from ~ merco1 .
     (Contributed by Anthony Hart, 17-Sep-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  merco1lem3 $p |- ( ( ( ph -> ps ) -> ( ch -> F. ) ) -> ( ch -> ph ) ) $=
    ( wi wfal merco1lem2 retbwax2 ax-mp ) AAADZAEDDZIDZDZABDCEDDZCADZDZIEDJEDDZ
    LAAEAFKLDPLDKAGJILEFHHNEDMEDDZLODZCAEBFORDQRDOLGMNREFHHH $.

  $( Used to rederive the Tarski-Bernays-Wajsberg axioms from ~ merco1 .
     (Contributed by Anthony Hart, 17-Sep-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  merco1lem4 $p |- ( ( ( ph -> ps ) -> ch ) -> ( ps -> ch ) ) $=
    ( wi wfal merco1lem3 merco1 ax-mp ) CADZBEDZDZBDABDZDZLCDBCDDJAEDZDIEDZDKDM
    JNIFBEAOKGHCABBLGH $.

  $( Used to rederive the Tarski-Bernays-Wajsberg axioms from ~ merco1 .
     (Contributed by Anthony Hart, 17-Sep-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  merco1lem5 $p |- ( ( ( ( ph -> F. ) -> ch ) -> ta ) -> ( ph -> ta ) ) $=
    ( wi wfal merco1lem4 merco1 ax-mp ) CADZAEDZDBDJBDZDKCDACDDIJBFCAABKGH $.

  $( Used to rederive the Tarski-Bernays-Wajsberg axioms from ~ merco1 .
     (Contributed by Anthony Hart, 17-Sep-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  merco1lem6 $p |- ( ( ph -> ( ph -> ps ) ) -> ( ch -> ( ph -> ps ) ) ) $=
    ( wi wfal merco1lem5 merco1lem3 ax-mp merco1 ) ABDZEDCEDZDZEDZADZAJDCJDDJME
    DZDZNLODZPOEDMDQLEEFOELGHJKOFHABMGHJECEAIH $.

  $( Used to rederive the Tarski-Bernays-Wajsberg axioms from ~ merco1 .
     (Contributed by Anthony Hart, 17-Sep-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  merco1lem7 $p |- ( ph -> ( ( ( ps -> ch ) -> ps ) -> ps ) ) $=
    ( wi wfal merco1lem5 merco1 ax-mp merco1lem6 ) BCDZBDZKBDZDZALDBEDKEDZDCDJD
    MBNCFBEKCJGHKBAIH $.

  $( ~ tbw-ax3 rederived from ~ merco1 .  (Contributed by Anthony Hart,
     17-Sep-2011.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  retbwax3 $p |- ( ( ( ph -> ps ) -> ph ) -> ph ) $=
    ( wi retbwax2 merco1lem7 ax-mp ) AAACCZABCACACAADGABEF $.

  $( Used to rederive the Tarski-Bernays-Wajsberg axioms from ~ merco1 .
     (Contributed by Anthony Hart, 17-Sep-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  merco1lem8 $p |- ( ph -> ( ( ps -> ( ps -> ch ) ) -> ( ps -> ch ) ) ) $=
    ( wi merco1lem6 ax-mp ) BBCDZDZHGDZDAIDBCHEHGAEF $.

  $( Used to rederive the Tarski-Bernays-Wajsberg axioms from ~ merco1 .
     (Contributed by Anthony Hart, 18-Sep-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  merco1lem9 $p |- ( ( ph -> ( ph -> ps ) ) -> ( ph -> ps ) ) $=
    ( wfal wi merco1lem8 ax-mp ) CADZAABDZDHDZDZIGABEJABEF $.

  $( Used to rederive the Tarski-Bernays-Wajsberg axioms from ~ merco1 .
     (Contributed by Anthony Hart, 18-Sep-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  merco1lem10 $p |- ( ( ( ( ( ph -> ps ) -> ch ) -> ( ta -> ch ) ) -> ph ) ->
    ( th -> ph ) ) $=
    ( wi wfal merco1 merco1lem2 ax-mp ) ABFZDGFZFCAFEGFFAFZGFZFKCFECFFZFZOAFDAF
    FMKFOFPCAEAKHMKOLIJABDNOHJ $.

  $( Used to rederive the Tarski-Bernays-Wajsberg axioms from ~ merco1 .
     (Contributed by Anthony Hart, 18-Sep-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  merco1lem11 $p |- ( ( ph -> ps ) -> ( ( ( ch -> ( ph -> ta ) ) -> F. ) -> ps
    ) ) $=
    ( wi wfal merco1lem5 merco1lem3 ax-mp merco1lem4 merco1 merco1lem2 ) ADEZBA
    EZCMEZFEZFEZEZFEZFEZEZABEPBEEZOTEZUAQTEZUCRTEZUDTFESEUERFFGTFRHINQTJIOFTGIC
    MTJISAEUBEUAUBEBAPFAKSAUBDLII $.

  $( Used to rederive the Tarski-Bernays-Wajsberg axioms from ~ merco1 .
     (Contributed by Anthony Hart, 18-Sep-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  merco1lem12 $p |- ( ( ph -> ps ) -> ( ( ( ch -> ( ph -> ta ) ) -> ph ) -> ps
    ) ) $=
    ( wi wfal merco1lem3 merco1 ax-mp merco1lem9 merco1lem11 ) BAEZCADEZEZAEZFE
    ZEFEAEZABEOBEEOAEZQOREZRMPECFEZENESMPCGADOTNHIOAJIOALFKIBAOFAHI $.

  $( Used to rederive the Tarski-Bernays-Wajsberg axioms from ~ merco1 .
     (Contributed by Anthony Hart, 18-Sep-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  merco1lem13 $p |- ( ( ( ( ph -> ps ) -> ( ch -> ps ) ) -> ta ) -> ( ph ->
    ta ) ) $=
    ( wi wfal merco1 merco1lem4 ax-mp merco1lem12 ) DAEZAFEEAEABECBEEZEZLDEADEE
    ALEZMBAECFEEAEZAELENBACAAGOALHIALKFJIDAAALGI $.

  $( Used to rederive the Tarski-Bernays-Wajsberg axioms from ~ merco1 .
     (Contributed by Anthony Hart, 18-Sep-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  merco1lem14 $p |- ( ( ( ( ph -> ps ) -> ps ) -> ch ) -> ( ph -> ch ) ) $=
    ( wi wfal merco1lem13 merco1lem8 merco1 ax-mp merco1lem9 merco1lem12 ) CADZ
    AEDDADABDZBDZDZNCDACDDANDZOMNDNDZPDZPABMNFRRPDZDZSPADREDDADZQDTUAMBGPARAQHI
    RPJIIANLEKICAAANHI $.

  $( Used to rederive the Tarski-Bernays-Wajsberg axioms from ~ merco1 .
     (Contributed by Anthony Hart, 18-Sep-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  merco1lem15 $p |- ( ( ph -> ps ) -> ( ph -> ( ch -> ps ) ) ) $=
    ( wi merco1lem14 merco1lem13 ax-mp ) ABDZBDCBDZDAIDZDHJDABIEHBCJFG $.

  $( Used to rederive the Tarski-Bernays-Wajsberg axioms from ~ merco1 .
     (Contributed by Anthony Hart, 18-Sep-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  merco1lem16 $p |- ( ( ( ph -> ( ps -> ch ) ) -> ta ) -> ( ( ph -> ch ) -> ta
    ) ) $=
    ( wi wfal merco1lem15 merco1lem11 ax-mp merco1 ) DAEZACEZFEEFEABCEEZEZMDELD
    EELMENACBGLMKFHIDALFMJI $.

  $( Used to rederive the Tarski-Bernays-Wajsberg axioms from ~ merco1 .
     (Contributed by Anthony Hart, 18-Sep-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  merco1lem17 $p |- ( ( ( ( ( ph -> ps ) -> ph ) -> ch ) -> ta ) -> ( ( ph ->
    ch ) -> ta ) ) $=
    ( wfal merco1lem11 merco1lem7 ax-mp merco1lem9 merco1lem4 merco1lem16 mpsyl
    wi merco1 ) DAMZACMZEMZMCMZABMAMZCMZMTDMPDMMQPMZTMZRQCMTPTMZUBCAMZSEMMEMAMZ
    UCSAMZUEMZUESAUDEFUGUGUEMZMZUHUEAMUGEMMAMZUFMUIUJABGUEAUGAUFNHUGUEIHHCASEAN
    HTAMZUAEMMEMPMZUCUBMUAPMZULMZULUAPUKEFUNUNULMZMZUOULAMUNEMMAMZUMMUPUQPEGULA
    UNAUMNHUNULIHHTAUAEPNHHOQCJQACTKLDAPCTNH $.

  $( Used to rederive the Tarski-Bernays-Wajsberg axioms from ~ merco1 .
     (Contributed by Anthony Hart, 18-Sep-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  merco1lem18 $p |- ( ( ph -> ( ps -> ch ) ) -> ( ( ps -> ph ) -> ( ps ->
    ch ) ) ) $=
    ( wfal merco1 merco1lem17 ax-mp merco1lem5 merco1lem3 merco1lem4 merco1lem2
    wi merco1lem9 ) BALZABCLZLZNOLZLZLZROBLZALRLZSTNDLZLTLALRLUAOBNTAETUBARFGBC
    ARFGSSRLZLZUCQRDLSDLZLZDLZDLZLZUDRUHLZUIUFUHLZUJUHDLUGLUKUFDDHUHDUFIGRUEUHH
    GPQUHJGUGNLUDLUIUDLRDSDNEUGNUDOKGGSRMGG $.

  $( ~ tbw-ax1 rederived from ~ merco1 .

     This theorem, along with ~ retbwax2 , ~ retbwax3 , and ~ retbwax4 , shows
     that ~ merco1 with ~ ax-mp can be used as a complete axiomatization of
     propositional calculus.  (Contributed by Anthony Hart, 18-Sep-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  retbwax1 $p |- ( ( ph -> ps ) -> ( ( ps -> ch ) -> ( ph -> ch ) ) ) $=
    ( wi merco1lem18 merco1lem16 ax-mp merco1lem15 merco1lem14 wfal merco1lem10
    merco1 merco1lem9 merco1lem13 ) BCDZABDZACDZDZDZPOQDZDZBQDRDSBACEBACRFGOSUA
    DZDZUBSRDUBDZUCRUBDZUDRUADUEPQOHRUASHGRSUAEGORUBIGUCUBDZJDZUADZUFUGTDZUHUFQ
    DZTDZUIOUBQITADZUGJDZDZQDUJDZUKUIDQADZUGDZUMDUNDZUOUMJDULJDDUGDUQDURUGJJUPU
    LKUMJULUGUQLGQAUFUMUNLGTAUGQUJLGGUGTPHGUHUBDUFDZUFDZUHUFDUSUTDUTUFJUAUSSKUS
    UFMGUHUBUCUFNGGGG $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Derive the Tarski-Bernays-Wajsberg axioms from Meredith's Second CO Axiom
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( A single axiom for propositional calculus discovered by C. A. Meredith.

     This axiom has 19 symbols, sans auxiliaries.  See notes in ~ merco1 .
     (Contributed by Anthony Hart, 7-Aug-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  merco2 $p |- ( ( ( ph -> ps ) -> ( ( F. -> ch ) -> th ) ) -> ( ( th
         -> ph ) -> ( ta -> ( et -> ph ) ) ) ) $=
    ( wi wfal falim pm2.04 mpi jarl idd jad looinv 3syl a1dd a1i com4l ) FABGZH
    CGZDGGZDAGZEAUBUCEAGGGFUBUCAEUBTDGZADGDGUCAGUBUAUDCITUADJKUDADDABDLUDDMNADO
    PQRS $.

  $( Used to rederive the Tarski-Bernays-Wajsberg axioms from ~ merco2 .
     (Contributed by Anthony Hart, 16-Aug-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  mercolem1 $p |- ( ( ( ph -> ps ) -> ch ) -> ( ps -> ( th -> ch ) ) ) $=
    ( wi wfal merco2 ax-mp ) AAEZFAEZAEEIAIEEEZABEZCEZBDCEZEZEZAAAAAAGZKKPEZQCA
    EZJLEZEZPEZKREZCAALBDGPTEJUAEEZUBUCETOEJPEEZUDOJFEZEFBETEEUEBNAFJAGOUFBTJMG
    HTOAPJSGHPTAUAKKGHHHH $.

  $( Used to rederive the Tarski-Bernays-Wajsberg axioms from ~ merco2 .
     (Contributed by Anthony Hart, 16-Aug-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  mercolem2 $p |- ( ( ( ph -> ps ) -> ph ) -> ( ch -> ( th -> ph ) ) ) $=
    ( wi wfal merco2 ax-mp ) AAEZFAEZAEEIAIEEEZABEZAEZCDAEEZEZAAAAAAGZKKOEZPIJL
    EZEZOEZKQEZAAALCDGOREJSEEZTUAERNEJOEEZUBNLEJREEZUCLJFEZEJNEEUDABAFCDGLUEANJ
    JGHNLARJMGHRNAOJIGHORASKKGHHHH $.

  $( Used to rederive the Tarski-Bernays-Wajsberg axioms from ~ merco2 .
     (Contributed by Anthony Hart, 16-Aug-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  mercolem3 $p |- ( ( ps -> ch ) -> ( ps -> ( ph -> ch ) ) ) $=
    ( wi wfal merco2 mercolem2 ax-mp ) AADZEADZADDIAIDDDZBCDZBACDZDZDZAAAAAAFZK
    KODZPCADZJBDZDZODZKQDZCAABBAFOSDJTDDZUAUBDSNDJODDZUCNBDJSDDUDBMJJGNBASJLFHS
    NAOJRFHOSATKKFHHHH $.

  $( Used to rederive the Tarski-Bernays-Wajsberg axioms from ~ merco2 .
     (Contributed by Anthony Hart, 16-Aug-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  mercolem4 $p |- ( ( th -> ( et -> ph ) ) -> ( ( ( th -> ch )
  -> ph ) -> ( ta -> ( et -> ph ) ) ) ) $=
    ( wi wfal merco2 mercolem1 ax-mp mercolem3 ) AAFZGAFZAFFLALFFFZCEAFZFZCBFZA
    FZDOFFZFZAAAAAAHZNNTFZUAOAFZMCFFZTFZNUBFZOAACRDHTCFZMUDFFZUEUFFUGUDFZUHQMTF
    FZUIMQFZTFZUJLUKFSFULAAAQDEHLUKSPIJMQTMIJCBATUCMHJMUGUDKJTCAUDNNHJJJJ $.

  $( Used to rederive the Tarski-Bernays-Wajsberg axioms from ~ merco2 .
     (Contributed by Anthony Hart, 16-Aug-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  mercolem5 $p |- ( th -> ( ( th -> ph ) -> ( ta -> ( ch -> ph ) ) ) ) $=
    ( wi wfal merco2 mercolem1 ax-mp mercolem2 ) AAEZFAEZAEEKAKEEEZCCAEDBAEEEZE
    ZAAAAAAGZMMOEZPLCEZOEZMQEZKRENESAAACDBGKRNCHIOCELREESTECNLLJOCARMMGIIII $.

  $( Used to rederive the Tarski-Bernays-Wajsberg axioms from ~ merco2 .
     (Contributed by Anthony Hart, 16-Aug-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  mercolem6 $p |- ( ( ph -> ( ps -> ( ph -> ch ) ) )
  -> ( ps -> ( ph -> ch ) ) ) $=
    ( wi wfal merco2 mercolem1 ax-mp mercolem5 mercolem4 ) AADZEADADDKAKDDDZABA
    CDZDZDZNDZAAAAAAFZLLPDZQLLRDZQORDZLSDZLTQMRDZLTDZAODZMDPDUBAOMBGUDMPLGHATDU
    BUCDNOALIRCALOJHHHLTUADZQPUADZLUEDZALDZPDSDUFALPLGUHPSLGHOUEDUFUGDRLOLIUANO
    LTJHHHHHHH $.

  $( Used to rederive the Tarski-Bernays-Wajsberg axioms from ~ merco2 .
     (Contributed by Anthony Hart, 16-Aug-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  mercolem7 $p |- ( ( ph -> ps ) -> ( ( ( ph -> ch )
  -> ( th -> ps ) ) -> ( th -> ps ) ) ) $=
    ( wi wfal merco2 mercolem3 mercolem6 ax-mp mercolem5 mercolem4 ) AAEZFAEAEE
    MAMEEEZABEZACEZDBEZEZQEZEZAAAAAAGPSEZNTEZRUAEUARPQHRPQIJATEUAUBEBDARKSCANOL
    JJJ $.

  $( Used to rederive the Tarski-Bernays-Wajsberg axioms from ~ merco2 .
     (Contributed by Anthony Hart, 16-Aug-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  mercolem8 $p |- ( ( ph -> ps ) -> ( ( ps -> ( ph -> ch ) )
  -> ( ta -> ( th -> ( ph -> ch ) ) ) ) ) $=
    ( wi wfal merco2 mercolem3 ax-mp mercolem7 ) AAFZGAFZAFFLALFFFZABFZBACFZFED
    PFFFZFZAAAAAAHZNNRFZSPMBFZFUAFZRFZNTFZUBQFUCPUAABEDHOUBQIJRMUBFZFUEFZUCUDFO
    UBFUFABCMKOUBQMKJRUEAUBNNHJJJJ $.

  $( ~ tbw-ax1 rederived from ~ merco2 .  (Contributed by Anthony Hart,
     16-Aug-2011.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  re1tbw1 $p |- ( ( ph -> ps ) -> ( ( ps -> ch ) -> ( ph -> ch ) ) ) $=
    ( wi mercolem8 mercolem3 mercolem6 mpsyl ax-mp ) BCDZABDZJACDZDZDZDNKBLDZND
    DJONABCJKEABCFKOMGHJKLGI $.

  $( ~ tbw-ax2 rederived from ~ merco2 .  (Contributed by Anthony Hart,
     16-Aug-2011.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  re1tbw2 $p |- ( ph -> ( ps -> ph ) ) $=
    ( wi mercolem1 ax-mp mercolem6 ) BABACZCZCZHAICZIAACZACHCJAAABDKAHBDEABGFEB
    AAFE $.

  $( ~ tbw-ax3 rederived from ~ merco2 .  (Contributed by Anthony Hart,
     16-Aug-2011.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  re1tbw3 $p |- ( ( ( ph -> ps ) -> ph ) -> ph ) $=
    ( wi mercolem2 mercolem6 ax-mp ) AACZACAGCCZABCACZACZAAAADIHJCZCKABHIDIHAEF
    F $.

  $( ~ tbw-ax4 rederived from ~ merco2 .

     This theorem, along with ~ re1tbw1 , ~ re1tbw2 , and ~ re1tbw3 , shows
     that ~ merco2 , along with ~ ax-mp , can be used as a complete
     axiomatization of propositional calculus.  (Contributed by Anthony Hart,
     16-Aug-2011.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  re1tbw4 $p |- ( F. -> ph ) $=
    ( wi wfal re1tbw3 re1tbw2 re1tbw1 ax-mp mercolem3 merco2 ) AABZCABZJABZABZJ
    AADALBMJBAJEALAFGGZJJKBZNKKBZJOBZKABZKBZKBZPKADKSBTPBKREKSKFGGRPBPQBCKAHKAA
    KJJIGGGG $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Derive the Lukasiewicz axioms from the Russell-Bernays Axioms
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Justification for ~ rb-imdf .  (Contributed by Anthony Hart, 17-Aug-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  rb-bijust $p |- ( ( ph <-> ps ) <->
                           -. ( -. ( -. ph \/ ps ) \/ -. ( -. ps \/ ph ) ) ) $=
    ( wb wi wn wo dfbi1 imor notbii imbi12i pm4.62 3bitri ) ABCABDZBADZEZDZEAEB
    FZBEAFZEZDZEQESFZEABGPTMQOSABHNRBAHIJITUAQRKIL $.

  $( The definition of implication, in terms of ` \/ ` and ` -. ` .
     (Contributed by Anthony Hart, 17-Aug-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  rb-imdf $p |- -. ( -. ( -. ( ph -> ps ) \/ ( -. ph \/ ps ) )
    \/ -. ( -. ( -. ph \/ ps ) \/ ( ph -> ps ) ) ) $=
    ( wi wn wo wb imor rb-bijust mpbi ) ABCZADBEZFJDKEDKDJEDEDABGJKHI $.

  ${
    anmp.min $e |- ph $.
    anmp.maj $e |- ( -. ph \/ ps ) $.
    $( Modus ponens for ` \/ ` ` -. ` axiom systems.  (Contributed by Anthony
       Hart, 12-Aug-2011.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    anmp $p |- ps $=
      ( imorri ax-mp ) ABCABDEF $.
  $}

  $( The first of four axioms in the Russell-Bernays axiom system.
     (Contributed by Anthony Hart, 13-Aug-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  rb-ax1 $p |- ( -. ( -. ps \/ ch ) \/ ( -. ( ph \/ ps ) \/ ( ph \/ ch ) ) ) $=
    ( wn wo wi orim2 imor 3imtr3i imori ) BDCEZABEZDACEZEZBCFLMFKNABCGBCHLMHIJ
    $.

  $( The second of four axioms in the Russell-Bernays axiom system.
     (Contributed by Anthony Hart, 13-Aug-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  rb-ax2 $p |- ( -. ( ph \/ ps ) \/ ( ps \/ ph ) ) $=
    ( wo wn pm1.4 con3i con1i orri ) ABCZDZBACZKJIKABEFGH $.

  $( The third of four axioms in the Russell-Bernays axiom system.
     (Contributed by Anthony Hart, 13-Aug-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  rb-ax3 $p |- ( -. ph \/ ( ps \/ ph ) ) $=
    ( wn wo pm2.46 con1i orri ) ACZBADZIHBAEFG $.

  $( The fourth of four axioms in the Russell-Bernays axiom system.
     (Contributed by Anthony Hart, 13-Aug-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  rb-ax4 $p |- ( -. ( ph \/ ph ) \/ ph ) $=
    ( wo wn pm1.2 con3i con1i orri ) AABZCZAAIHAADEFG $.

  ${
    rbsyl.1 $e |- ( -. ps \/ ch ) $.
    rbsyl.2 $e |- ( ph \/ ps ) $.
    $( Used to rederive the Lukasiewicz axioms from Russell-Bernays'.
       (Contributed by Anthony Hart, 18-Aug-2011.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    rbsyl $p |- ( ph \/ ch ) $=
      ( wo wn rb-ax1 anmp ) ABFZACFZEBGCFJGKFDABCHII $.
  $}

  ${
    rblem1.1 $e |- ( -. ph \/ ps ) $.
    rblem1.2 $e |- ( -. ch \/ th ) $.
    $( Used to rederive the Lukasiewicz axioms from Russell-Bernays'.
       (Contributed by Anthony Hart, 18-Aug-2011.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    rblem1 $p |- ( -. ( ph \/ ch ) \/ ( ps \/ th ) ) $=
      ( wo wn rb-ax1 anmp rb-ax2 rbsyl ) ACGHZBCGZBDGZCHDGNHOGFBCDIJMCBGZNCBKMC
      AGZPAHBGQHPGECABIJACKLLL $.
  $}

  $( Used to rederive the Lukasiewicz axioms from Russell-Bernays'.
     (Contributed by Anthony Hart, 18-Aug-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  rblem2 $p |- ( -. ( ch \/ ph ) \/ ( ch \/ ( ph \/ ps ) ) ) $=
    ( wn wo rb-ax2 rb-ax3 rbsyl rb-ax1 anmp ) ADZABEZECAEDCLEEKBAELBAFABGHCALIJ
    $.

  $( Used to rederive the Lukasiewicz axioms from Russell-Bernays'.
     (Contributed by Anthony Hart, 18-Aug-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  rblem3 $p |- ( -. ( ch \/ ph ) \/ ( ( ch \/ ps ) \/ ph ) ) $=
    ( wo wn rb-ax2 rblem2 rbsyl ) CADEZACBDZDZJADAJFIACDKCBAGCAFHH $.

  ${
    rblem4.1 $e |- ( -. ph \/ th ) $.
    rblem4.2 $e |- ( -. ps \/ ta ) $.
    rblem4.3 $e |- ( -. ch \/ et ) $.
    $( Used to rederive the Lukasiewicz axioms from Russell-Bernays'.
       (Contributed by Anthony Hart, 18-Aug-2011.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    rblem4 $p |- ( -. ( ( ph \/ ps ) \/ ch ) \/ ( ( et \/ ta ) \/ th ) ) $=
      ( wo wn rblem1 rb-ax2 rb-ax1 anmp rbsyl rb-ax4 rblem2 rb-ax3 ) ABJZCJKZCB
      JZAJZFEJZDJUBUDADCFBEIHLGLUABCJZAJZUCUFKZAUBJZUCAUBMUGAUEJZUHUEKUBJUIKUHJ
      BCMAUEUBNOUEAMPPUAUFUFJUFUFQTUFCUFTKUIUFAUEMBCARPCKZUEJUJUFJCBSUEAUJROLPP
      P $.
  $}

  $( Used to rederive the Lukasiewicz axioms from Russell-Bernays'.
     (Contributed by Anthony Hart, 19-Aug-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  rblem5 $p |- ( -. ( -. -. ph \/ ps ) \/ ( -. -. ps \/ ph ) ) $=
    ( wn wo rb-ax2 rb-ax4 rb-ax3 rbsyl anmp rblem1 ) ACZCZBDCABCZCZDNADANELABNK
    ADLCZADKAADAAFAAGHZKOAAOLDLODOLLDLLFLLGHOLEIPJINMDMNDNMMDMMFMMGHNMEIJH $.

  ${
    rblem6.1 $e |- -. ( -. ( -. ph \/ ps ) \/ -. ( -. ps \/ ph ) ) $.
    $( Used to rederive the Lukasiewicz axioms from Russell-Bernays'.
       (Contributed by Anthony Hart, 19-Aug-2011.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    rblem6 $p |- ( -. ph \/ ps ) $=
      ( wn wo rb-ax4 rb-ax3 rbsyl rb-ax2 anmp rblem3 rblem5 ) ADBEZDZBDAEDZEZDZ
      MCNDZPEZQDMEPREZSNREZTRNEUARNNENNFNNGHRNIJRONKJPRIJMPLJJ $.
  $}

  ${
    rblem7.1 $e |- -. ( -. ( -. ph \/ ps ) \/ -. ( -. ps \/ ph ) ) $.
    $( Used to rederive the Lukasiewicz axioms from Russell-Bernays'.
       (Contributed by Anthony Hart, 19-Aug-2011.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    rblem7 $p |- ( -. ps \/ ph ) $=
      ( wn wo rb-ax3 rblem5 anmp ) ADBEDZBDAEZDZEZDZJCKDLEMDJEKIFJLGHH $.
  $}

  ${
    re1axmp.min $e |- ph $.
    re1axmp.maj $e |- ( ph -> ps ) $.
    $( ~ ax-mp derived from Russell-Bernays'.  (Contributed by Anthony Hart,
       19-Aug-2011.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    re1axmp $p |- ps $=
      ( wi wn wo rb-imdf rblem6 anmp ) ABCABEZAFBGZDKLABHIJJ $.
  $}

  $( ~ luk-1 derived from Russell-Bernays'.  (Contributed by Anthony Hart,
     19-Aug-2011.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  re2luk1 $p |- ( ( ph -> ps ) -> ( ( ps -> ch ) -> ( ph -> ch ) ) ) $=
    ( wi wn rb-imdf rblem7 rblem6 rb-ax2 rb-ax4 rb-ax3 rbsyl anmp rblem1 rb-ax1
    wo rblem4 ) ABDZEZBCDZACDZDZPZRUBDZSTEZUAPZUBUBUFTUAFGSAEZBPZUFUHEZBECPZEZU
    GCPZPZUFUKUEULUAUEUJPZUKEZUEPZTUJBCFHUNEUEUOPUPUEUOIUEUEUJUOUEEUEUEPUEUEJUE
    UEKLUOUKPUKUOPUOUKUKPUKUKJUKUKKLZUOUKIMNLMUAULACFGNUKUIULPZPZUIUMPZUGBCOUSE
    ZUMUIPZUTUMUIIVAURUKPVBUIULUKUIULUKUIEUIUIPUIUIJUIUIKLULEULULPULULJULULKLUQ
    QUKURILLMLRUHABFHLLUDUCRUBFGM $.

  $( ~ luk-2 derived from Russell-Bernays'.  (Contributed by Anthony Hart,
     19-Aug-2011.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  re2luk2 $p |- ( ( -. ph -> ph ) -> ph ) $=
    ( wn wi wo rb-ax4 rb-ax3 rbsyl rb-ax2 anmp rblem1 rb-imdf rblem6 rblem7 ) A
    BZACZBZADZOACZPNBZADZATBAADZAAEZSAAANADSBZADNUAAUBAAFGZNUCAAUCSDSUCDUCSSDSS
    ESSFGUCSHIUDJIUDJGOTNAKLGRQOAKMI $.

  $( ~ luk-3 derived from Russell-Bernays'.

     This theorem, along with ~ re1axmp , ~ re2luk1 , and ~ re2luk2 shows that
     ~ rb-ax1 , ~ rb-ax2 , ~ rb-ax3 , and ~ rb-ax4 , along with ~ anmp , can be
     used as a complete axiomatization of propositional calculus.  (Contributed
     by Anthony Hart, 19-Aug-2011.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  re2luk3 $p |- ( ph -> ( -. ph -> ps ) ) $=
    ( wn wi wo rb-imdf rblem7 rb-ax4 rb-ax3 rbsyl rb-ax2 anmp rblem2 ) ACZNBDZE
    ZAODZNNCZBEZOOSNBFGNREZNSERNETRNNENNHNNIJRNKLRBNMLJQPAOFGL $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Stoic logic non-modal portion (Chrysippus of Soli)
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  The Greek Stoics developed a system of logic called Stoic logic.  The Stoic
  Chrysippus, in particular, was often considered one of the greatest logicians
  of antiquity.  Stoic logic is different from Aristotle's system, since it
  focuses on propositional logic, though later thinkers did combine the systems
  of the Stoics with Aristotle.  Jan Lukasiewicz reports, "For anybody familiar
  with mathematical logic it is self-evident that the Stoic dialectic is the
  ancient form of modern propositional logic"
  ( _On the history of the logic of proposition_ by Jan Lukasiewicz (1934),
  translated in: _Selected Works_ - Edited by Ludwik Borkowski -
  Amsterdam, North-Holland, 1970 pp. 197-217,
  referenced in "History of Logic,
  ~ https://www.historyoflogic.com/logic-stoics.htm ).

  In this section we show that the propositional logic system we use (which is
  non-modal) is at least as strong as the non-modal portion of Stoic logic.  We
  show this by showing that our system assumes or proves all of key features of
  Stoic logic's non-modal portion (specifically the Stoic logic
  indemonstrables, themata, and principles).

  "In terms of contemporary logic, Stoic syllogistic is best understood as a
  substructural backwards-working Gentzen-style natural-deduction system that
  consists of five kinds of axiomatic arguments (the indemonstrables) and four
  inference rules, called themata.  An argument is a syllogism precisely if it
  either is an indemonstrable or can be reduced to one by means of the themata
  (Diogenes Laertius (D. L. 7.78))." (_Ancient Logic_, Stanford Encyclopedia of
  Philosophy ~ https://plato.stanford.edu/entries/logic-ancient/ ).  There are
  also a few "principles" that support logical reasoning, discussed below.  For
  more information, see "Stoic Logic" by Susanne Bobzien, especially
  [Bobzien] p. 110-120, especially for a discussion about the themata
  (including how they were reconstructed and how they were used).  There are
  differences in the systems we can only partly represent, for example, in
  Stoic logic "truth and falsehood are temporal properties of assertibles...
  They can belong to an assertible at one time but not at another"
  ([Bobzien] p. 87).  Stoic logic also included various kinds of modalities,
  which we do not include here since our basic propositional logic does not
  include modalities.

  A key part of the Stoic logic system is a set of five "indemonstrables"
  assigned to Chrysippus of Soli by Diogenes Laertius, though in general it is
  difficult to assign specific ideas to specific thinkers.  The indemonstrables
  are described in, for example, [Lopez-Astorga] p. 11 , [Sanford] p. 39, and
  [Hitchcock] p. 5.  These indemonstrables are modus ponendo ponens (modus
  ponens) ~ ax-mp , modus tollendo tollens (modus tollens) ~ mto , modus
  ponendo tollens I ~ mptnan , modus ponendo tollens II ~ mptxor , and modus
  tollendo ponens (exclusive-or version) ~ mtpxor .  The first is an axiom, the
  second is already proved; in this section we prove the other three.  Note
  that modus tollendo ponens ~ mtpxor originally used exclusive-or, but over
  time the name modus tollendo ponens has increasingly referred to an
  inclusive-or variation, which is proved in ~ mtpor .

  After we prove the indemonstratables, we then prove all the Stoic logic
  themata (the inference rules of Stoic logic; "thema" is singular).  This is
  straightforward for thema 1 ( ~ stoic1a and ~ stoic1b ) and thema 3
  ( ~ stoic3 ).  However, while Stoic logic was once a leading logic system,
  most direct information about Stoic logic has since been lost, including the
  exact texts of thema 2 and thema 4.  There are, however, enough references
  and specific examples to support reconstruction.  Themata 2 and 4 have been
  reconstructed; see statements T2 and T4 in [Bobzien] p. 110-120 and our
  proofs of them in ~ stoic2a , ~ stoic2b , ~ stoic4a , and ~ stoic4b .

  Stoic logic also had a set of principles involving assertibles.  Statements
  in [Bobzien] p. 99 express the known principles.  The following paragraphs
  discuss these principles and our proofs of them.

  "A principle of double negation, expressed by saying that a double-negation
  (Not: not: p) is equivalent to the assertible that is doubly negated (p) (DL
  VII 69)."  In other words, ` ( ph <-> -. -. ph ) ` as proven in ~ notnotb .

  "The principle that all conditionals that are formed by using the same
  assertible twice (like 'If p, p') are true (Cic. Acad. II 98)."  In other
  words, ` ( ph -> ph ) ` as proven in ~ id .

  "The principle that all disjunctions formed by a contradiction (like 'Either
  p or not: p') are true (S. E. M VIII 282)."  Remember that in Stoic logic,
  'or' means 'exclusive or'.  In other words, ` ( ph \/_ -. ph ) ` as proven in
  ~ xorexmid .

  [Bobzien] p. 99 also suggests that Stoic logic may have dealt with
  commutativity (see ~ xorcom and ~ ancom ) and the principle of contraposition
  ( ~ con4 ) (pointing to DL VII 194).

  In short, the non-modal propositional logic system we use is at least as
  strong as the non-modal portion of Stoic logic.

  For more about Aristotle's system, see ~ barbara and related theorems.

$)

  ${
    $( Minor premise for modus ponendo tollens 1. $)
    mptnan.min $e |- ph $.
    $( Major premise for modus ponendo tollens 1. $)
    mptnan.maj $e |- -. ( ph /\ ps ) $.
    $( Modus ponendo tollens 1, one of the "indemonstrables" in Stoic logic.
       See rule 1 on [Lopez-Astorga] p. 12 , rule 1 on [Sanford] p. 40, and
       rule A3 in [Hitchcock] p. 5.  Sanford describes this rule second (after
       ~ mptxor ) as a "safer, and these days much more common" version of
       modus ponendo tollens because it avoids confusion between inclusive-or
       and exclusive-or.  (Contributed by David A. Wheeler, 3-Jul-2016.) $)
    mptnan $p |- -. ps $=
      ( wn imnani ax-mp ) ABECABDFG $.
  $}

  ${
    $( Minor premise for modus ponendo tollens 2. $)
    mptxor.min $e |- ph $.
    $( Major premise for modus ponendo tollens 2. $)
    mptxor.maj $e |- ( ph \/_ ps ) $.
    $( Modus ponendo tollens 2, one of the "indemonstrables" in Stoic logic.
       Note that this uses exclusive-or ` \/_ ` .  See rule 2 on
       [Lopez-Astorga] p. 12 , rule 4 on [Sanford] p. 39 and rule A4 in
       [Hitchcock] p. 5 .  (Contributed by David A. Wheeler, 3-Jul-2016.)
       (Proof shortened by Wolf Lammen, 12-Nov-2017.)  (Proof shortened by BJ,
       19-Apr-2019.) $)
    mptxor $p |- -. ps $=
      ( wxo wa wn xornan ax-mp mptnan ) ABCABEABFGDABHIJ $.
  $}

  ${
    $( Minor premise for modus tollendo ponens (inclusive-or version). $)
    mtpor.min $e |- -. ph $.
    $( Major premise for modus tollendo ponens (inclusive-or version). $)
    mtpor.max $e |- ( ph \/ ps ) $.
    $( Modus tollendo ponens (inclusive-or version), aka disjunctive syllogism.
       This is similar to ~ mtpxor , one of the five original "indemonstrables"
       in Stoic logic.  However, in Stoic logic this rule used exclusive-or,
       while the name modus tollendo ponens often refers to a variant of the
       rule that uses inclusive-or instead.  The rule says, "if ` ph ` is not
       true, and ` ph ` or ` ps ` (or both) are true, then ` ps ` must be
       true".  An alternate phrasing is:  "once you eliminate the impossible,
       whatever remains, no matter how improbable, must be the truth". --
       Sherlock Holmes (Sir Arthur Conan Doyle, 1890:  The Sign of the Four,
       ch. 6).  (Contributed by David A. Wheeler, 3-Jul-2016.)  (Proof
       shortened by Wolf Lammen, 11-Nov-2017.) $)
    mtpor $p |- ps $=
      ( wn ori ax-mp ) AEBCABDFG $.
  $}

  ${
    $( Minor premise for modus tollendo ponens (original exclusive-or version).
    $)
    mtpxor.min $e |- -. ph $.
    $( Major premise for modus tollendo ponens (original exclusive-or version).
    $)
    mtpxor.maj $e |- ( ph \/_ ps ) $.
    $( Modus tollendo ponens (original exclusive-or version), aka disjunctive
       syllogism, similar to ~ mtpor , one of the five "indemonstrables" in
       Stoic logic.  The rule says:  "if ` ph ` is not true, and either ` ph `
       or ` ps ` (exclusively) are true, then ` ps ` must be true".  Today the
       name "modus tollendo ponens" often refers to a variant, the inclusive-or
       version as defined in ~ mtpor .  See rule 3 on [Lopez-Astorga] p. 12
       (note that the "or" is the same as ~ mptxor , that is, it is
       exclusive-or ~ df-xor ), rule 3 of [Sanford] p. 39 (where it is not as
       clearly stated which kind of "or" is used but it appears to be in the
       same sense as ~ mptxor ), and rule A5 in [Hitchcock] p. 5 (exclusive-or
       is expressly used).  (Contributed by David A. Wheeler, 4-Jul-2016.)
       (Proof shortened by Wolf Lammen, 11-Nov-2017.)  (Proof shortened by BJ,
       19-Apr-2019.) $)
    mtpxor $p |- ps $=
      ( wxo wo xoror ax-mp mtpor ) ABCABEABFDABGHI $.
  $}

  ${
    $( Premise for Stoic logic thema 1. $)
    stoic1.1 $e |- ( ( ph /\ ps ) -> th ) $.
    $( Stoic logic Thema 1 (part a).

       The first thema of the four Stoic logic themata, in its basic form, was:

       "When from two (assertibles) a third follows, then from either of them
       together with the contradictory of the conclusion the contradictory of
       the other follows."  (Apuleius Int. 209.9-14), see [Bobzien] p. 117 and
       ~ https://plato.stanford.edu/entries/logic-ancient/

       We will represent thema 1 as two very similar rules ~ stoic1a and
       ~ stoic1b to represent each side.  (Contributed by David A. Wheeler,
       16-Feb-2019.)  (Proof shortened by Wolf Lammen, 21-May-2020.) $)
    stoic1a $p |- ( ( ph /\ -. th ) -> -. ps ) $=
      ( ex con3dimp ) ABCABCDEF $.

    $( Stoic logic Thema 1 (part b).  The other part of thema 1 of Stoic logic;
       see ~ stoic1a .  (Contributed by David A. Wheeler, 16-Feb-2019.) $)
    stoic1b $p |- ( ( ps /\ -. th ) -> -. ph ) $=
      ( ancoms stoic1a ) BACABCDEF $.
  $}

  ${
    $( Premise 1 for Stoic logic Thema 2 version a. $)
    stoic2a.1 $e |- ( ( ph /\ ps ) -> ch ) $.
    $( Premise 2 for Stoic logic Thema 2 version a. $)
    stoic2a.2 $e |- ( ( ph /\ ch ) -> th ) $.
    $( Stoic logic Thema 2 version a.  Statement T2 of [Bobzien] p. 117 shows a
       reconstructed version of Stoic logic thema 2 as follows:  "When from two
       assertibles a third follows, and from the third and one (or both) of the
       two another follows, then this other follows from the first two."
       Bobzien uses constructs such as ` ph , ps |- ch ` ; in Metamath we will
       represent that construct as ` ph /\ ps -> ch ` .  This version a is
       without the phrase "or both"; see ~ stoic2b for the version with the
       phrase "or both".  We already have this rule as ~ syldan , so here we
       show the equivalence and discourage its use.
       (New usage is discouraged.)  (Contributed by David A. Wheeler,
       17-Feb-2019.) $)
    stoic2a $p |- ( ( ph /\ ps ) -> th ) $=
      ( syldan ) ABCDEFG $.
  $}

  ${
    $( Premise 1 for Stoic logic Thema 2 version b. $)
    stoic2b.1 $e |- ( ( ph /\ ps ) -> ch ) $.
    $( Premise 2 for Stoic logic Thema 2 version b. $)
    stoic2b.2 $e |- ( ( ph /\ ps /\ ch ) -> th ) $.
    $( Stoic logic Thema 2 version b.  See ~ stoic2a .  Version b is with the
       phrase "or both".  We already have this rule as ~ mpd3an3 , so here we
       prove the equivalence and discourage its use.
       (New usage is discouraged.)  (Contributed by David A. Wheeler,
       17-Feb-2019.) $)
    stoic2b $p |- ( ( ph /\ ps ) -> th ) $=
      ( mpd3an3 ) ABCDEFG $.
  $}

  ${
    $( Premise 1 for Stoic logic Thema 3. $)
    stoic3.1 $e |- ( ( ph /\ ps ) -> ch ) $.
    $( Premise 2 for Stoic logic Thema 3. $)
    stoic3.2 $e |- ( ( ch /\ th ) -> ta ) $.
    $( Stoic logic Thema 3.  Statement T3 of [Bobzien] p. 116-117 discusses
       Stoic logic Thema 3.  "When from two (assemblies) a third follows, and
       from the one that follows (i.e., the third) together with another,
       external assumption, another follows, then other follows from the first
       two and the externally co-assumed one.  (Simp.  Cael. 237.2-4)"
       (Contributed by David A. Wheeler, 17-Feb-2019.) $)
    stoic3 $p |- ( ( ph /\ ps /\ th ) -> ta ) $=
      ( wa sylan 3impa ) ABDEABHCDEFGIJ $.
  $}

  ${
    $( Premise 1 for Stoic logic Thema 4a. $)
    stoic4a.1 $e |- ( ( ph /\ ps ) -> ch ) $.
    $( Premise 2 for Stoic logic Thema 4a. $)
    stoic4a.2 $e |- ( ( ch /\ ph /\ th ) -> ta ) $.
    $( Stoic logic Thema 4 version a.  Statement T4 of [Bobzien] p. 117 shows a
       reconstructed version of Stoic logic Thema 4:  "When from two
       assertibles a third follows, and from the third and one (or both) of the
       two and one (or more) external assertible(s) another follows, then this
       other follows from the first two and the external(s)."

       We use ` th ` to represent the "external" assertibles.  This is version
       a, which is without the phrase "or both"; see ~ stoic4b for the version
       with the phrase "or both".  (Contributed by David A. Wheeler,
       17-Feb-2019.) $)
    stoic4a $p |- ( ( ph /\ ps /\ th ) -> ta ) $=
      ( w3a 3adant3 simp1 simp3 syl3anc ) ABDHCADEABCDFIABDJABDKGL $.
  $}

  ${
    $( Premise 1 for Stoic logic Thema 4b. $)
    stoic4b.1 $e |- ( ( ph /\ ps ) -> ch ) $.
    $( Premise 2 for Stoic logic Thema 4b. $)
    stoic4b.2 $e |- ( ( ( ch /\ ph /\ ps ) /\ th ) -> ta ) $.
    $( Stoic logic Thema 4 version b.  This is version b, which is with the
       phrase "or both".  See ~ stoic4a for more information.  (Contributed by
       David A. Wheeler, 17-Feb-2019.) $)
    stoic4b $p |- ( ( ph /\ ps /\ th ) -> ta ) $=
      ( w3a 3adant3 simp1 simp2 simp3 syl31anc ) ABDHCABDEABCDFIABDJABDKABDLGM
      $.
  $}


$(
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
  Predicate calculus with equality:  Tarski's system S2 (1 rule, 6 schemes)
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#

  Here we extend the language of wffs with predicate calculus, which allows us
  to talk about individual objects in a domain of discourse (which for us will
  be the universe of all sets, so we call them "setvar variables") and make
  true/false statements about predicates, which are relationships between
  objects, such as whether or not two objects are equal.  In addition, we
  introduce universal quantification ("for all", e.g. ~ ax-4 ) in order to
  make statements about whether a wff holds for every object in the domain of
  discourse.  Later we introduce existential quantification ("there exists",
  ~ df-ex ) which is defined in terms of universal quantification.

  Our axioms are really axiom _schemes_, and our wff and setvar variables are
  metavariables ranging over expressions in an underlying "object language".
  This is explained here:  ~ mmset.html#axiomnote .

  Our axiom system starts with the predicate calculus axiom schemes system S2
  of Tarski defined in his 1965 paper, "A Simplified Formalization of Predicate
  Logic with Identity" [Tarski].  System S2 is defined in the last paragraph on
  p. 77, and repeated on p. 81 of [KalishMontague].  We do not include scheme
  B5 (our ~ sp ) of system S2 since [KalishMontague] shows it to be logically
  redundant (Lemma 9, p. 87, which we prove as theorem ~ spw below).

  Theorem ~ spw can be used to prove any _instance_ of ~ sp having mutually
  distinct setvar variables and no wff metavariables.  However, it seems that
  ~ sp in its general form cannot be derived from only Tarski's schemes.  We do
  not include B5 i.e. ~ sp as part of what we call "Tarski's system" because we
  want it to be the smallest set of axioms that is logically complete with
  no redundancies.  We later prove ~ sp as theorem ~ axc5 using the auxiliary
  axiom schemes that make our system metalogically complete.

  Our version of Tarski's system S2 consists of propositional calculus
  ( ~ ax-mp , ~ ax-1 , ~ ax-2 , ~ ax-3 ) plus ~ ax-gen , ~ ax-4 , ~ ax-5 ,
  ~ ax-6 , ~ ax-7 , ~ ax-8 , and ~ ax-9 .  The last three are equality axioms
  that represent three sub-schemes of Tarski's scheme B8.  Due to its
  side-condition ("where ` ph ` is an atomic formula and ` ps ` is obtained by
  replacing an occurrence of the variable ` x ` by the variable ` y ` "), we
  cannot represent his B8 directly without greatly complicating our scheme
  language, but the simpler schemes ~ ax-7 , ~ ax-8 , and ~ ax-9 are sufficient
  for set theory and much easier to work with.

  Tarski's system is exactly equivalent to the traditional axiom system in most
  logic textbooks but has the advantage of being easy to manipulate with a
  computer program, and its simpler metalogic (with no built-in notions of
  "free variable" and "proper substitution") is arguably easier for a
  non-logician human to follow step by step in a proof (where "follow" means
  being able to identify the substitutions that were made, without necessarily
  a higher-level understanding).  In particular, it is logically complete in
  that it can derive all possible object-language theorems of predicate
  calculus with equality, i.e., the same theorems as the traditional system can
  derive.

  However, for efficiency (and indeed a key feature that makes Metamath
  successful), our system is designed to derive reusable theorem schemes
  (rather than object-language theorems) from other schemes.  From this
  "metalogical" point of view, Tarski's S2 is not complete.  For example, we
  cannot derive scheme ~ sp , even though (using ~ spw ) we can derive all
  instances of it that do not involve wff metavariables or bundled setvar
  variables.  (Two setvar variables are "bundled" if they can be substituted
  with the same setvar variable, i.e., do not have a "$d" disjoint variable
  condition.)  Later we will introduce auxiliary axiom schemes ~ ax-10 ,
  ~ ax-11 , ~ ax-12 , and ~ ax-13 that are metatheorems of Tarski's system
  (i.e. are logically redundant) but which give our system the property of
  "scheme completeness", allowing us to prove directly (instead of, say,
  by induction on formula length) all possible schemes that can be expressed in
  our language.

$)


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Universal quantifier (continued); define "exists" and "not free"
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  The universal quantifier was introduced above in ~ wal for use by ~ df-tru .
  See the comments in that section.  In this section, we continue with the
  first "real" use of it.

$)

  $( Declare some names for individual variables. $)
  $v x $.
  $v y $.
  $v z $.
  $v w $.
  $v v $.
  $v u $.
  $v t $.
  $( Let ` x ` be an individual variable. $)
  vx $f setvar x $.
  $( Let ` y ` be an individual variable. $)
  vy $f setvar y $.
  $( Let ` z ` be an individual variable. $)
  vz $f setvar z $.
  $( Let ` w ` be an individual variable. $)
  vw $f setvar w $.
  $( Let ` v ` be an individual variable. $)
  vv $f setvar v $.
  $( Let ` u ` be an individual variable. $)
  vu $f setvar u $.
  $( Let ` t ` be an individual variable. $)
  vt $f setvar t $.

  $( Register 'A.' as a primitive expression (lacking a definition). $)
  $( $j primitive 'wal'; $)


$(
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
  Existential quantifier
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
$)

  $( Declare the existential quantifier symbol. $)
  $c E. $.  $( Backwards E (read:  "there exists") $)

  $( Extend wff definition to include the existential quantifier ("there
     exists"). $)
  wex $a wff E. x ph $.

  $( Define existential quantification. ` E. x ph ` means "there exists at
     least one set ` x ` such that ` ph ` is true".  Dual of ~ alex .  See also
     the dual pair ~ alnex / ~ exnal .  Definition of [Margaris] p. 49.
     (Contributed by NM, 10-Jan-1993.) $)
  df-ex $a |- ( E. x ph <-> -. A. x -. ph ) $.

  $( Universal quantification of negation is equivalent to negation of
     existential quantification.  Dual of ~ exnal (but does not depend on
     ~ ax-4 contrary to it).  See also the dual pair ~ df-ex / ~ alex .
     Theorem 19.7 of [Margaris] p. 89.  (Contributed by NM, 12-Mar-1993.) $)
  alnex $p |- ( A. x -. ph <-> -. E. x ph ) $=
    ( wex wn wal df-ex con2bii ) ABCADBEABFG $.

  $( An equivalence between an implication with an existentially quantified
     antecedent and an implication with a universally quantified consequent.
     An interesting case is when the same formula is substituted for both
     ` ph ` and ` ps ` , since then both implications express a type of
     non-freeness.  See also ~ alimex .  (Contributed by BJ, 12-May-2019.) $)
  eximal $p |- ( ( E. x ph -> ps ) <-> ( -. ps -> A. x -. ph ) ) $=
    ( wex wi wn wal df-ex imbi1i con1b bitri ) ACDZBEAFCGZFZBEBFMELNBACHIMBJK
    $.


$(
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
  Non-freeness predicate
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
$)

  $c F/ $.  $( The not-free symbol. $)

  $( Extend wff definition to include the not-free predicate. $)
  wnf $a wff F/ x ph $.

  $( Define the not-free predicate for wffs.  This is read " ` x ` is not free
     in ` ph ` ".  Not-free means that the value of ` x ` cannot affect the
     value of ` ph ` , e.g., any occurrence of ` x ` in ` ph ` is effectively
     bound by a "for all" or something that expands to one (such as "there
     exists").  In particular, substitution for a variable not free in a wff
     does not affect its value ( ~ sbf ).  An example of where this is used is
     ~ stdpc5 .  See ~ nf5 for an alternate definition which involves nested
     quantifiers on the same variable.

     Not-free is a commonly used constraint, so it is useful to have a notation
     for it.  Surprisingly, there is no common formal notation for it, so here
     we devise one.  Our definition lets us work with the not-free notion
     within the logic itself rather than as a metalogical side condition.

     To be precise, our definition really means "effectively not free", because
     it is slightly less restrictive than the usual textbook definition for
     not-free (which only considers syntactic freedom).  For example, ` x ` is
     effectively not free in the formula ` x = x ` (see ~ nfequid ), even
     though ` x ` would be considered free in the usual textbook definition,
     because the value of ` x ` in the formula ` x = x ` cannot affect the
     truth of that formula (and thus substitutions will not change the result).

     This definition of not-free tightly ties to the quantifier ` A. x ` .  At
     this state (no axioms restricting quantifiers yet) 'non-free' appears
     quite arbitrary.  Its intended semantics expresses single-valuedness
     (constness) across a parameter, but is only evolved as much as later
     axioms assign properties to quantifiers.  It seems the definition here is
     best suited in situations, where axioms are only partially in effect.  In
     particular, this definition more easily carries over to other logic models
     with weaker axiomization.

     The reverse implication of the definiens (the right hand side of the
     biconditional) always holds, see ~ 19.2 .

     This predicate only applies to wffs.  See ~ df-nfc for a not-free
     predicate for class variables.  (Contributed by Mario Carneiro,
     24-Sep-2016.)  Convert to definition.  (Revised by BJ, 6-May-2019.) $)
  df-nf $a |- ( F/ x ph <-> ( E. x ph -> A. x ph ) ) $.

  $( Alternate definition of non-freeness.  (Contributed by BJ,
     16-Sep-2021.) $)
  nf2 $p |- ( F/ x ph <-> ( A. x ph \/ -. E. x ph ) ) $=
    ( wnf wex wal wi wn wo df-nf imor orcom 3bitri ) ABCABDZABEZFMGZNHNOHABIMNJ
    ONKL $.

  $( Alternate definition of non-freeness.  (Contributed by BJ,
     16-Sep-2021.) $)
  nf3 $p |- ( F/ x ph <-> ( A. x ph \/ A. x -. ph ) ) $=
    ( wnf wal wex wn wo nf2 alnex orbi2i bitr4i ) ABCABDZABEFZGLAFBDZGABHNMLABI
    JK $.

  $( Alternate definition of non-freeness.  This definition uses only primitive
     symbols ( ` -> , -. , A. ` ).  (Contributed by BJ, 16-Sep-2021.) $)
  nf4 $p |- ( F/ x ph <-> ( -. A. x ph -> A. x -. ph ) ) $=
    ( wnf wal wn wo wi nf3 df-or bitri ) ABCABDZAEBDZFKELGABHKLIJ $.

  ${
    nfi.1 $e |- ( E. x ph -> A. x ph ) $.
    $( Deduce that ` x ` is not free in ` ph ` from the definition.
       (Contributed by Wolf Lammen, 15-Sep-2021.) $)
    nfi $p |- F/ x ph $=
      ( wnf wex wal wi df-nf mpbir ) ABDABEABFGCABHI $.
  $}

  ${
    nfri.1 $e |- F/ x ph $.
    $( Consequence of the definition of not-free.  (Contributed by Wolf Lammen,
       16-Sep-2021.) $)
    nfri $p |- ( E. x ph -> A. x ph ) $=
      ( wnf wex wal wi df-nf mpbi ) ABDABEABFGCABHI $.
  $}

  ${
    nfd.1 $e |- ( ph -> ( E. x ps -> A. x ps ) ) $.
    $( Deduce that ` x ` is not free in ` ps ` in a context.  (Contributed by
       Wolf Lammen, 16-Sep-2021.) $)
    nfd $p |- ( ph -> F/ x ps ) $=
      ( wex wal wi wnf df-nf sylibr ) ABCEBCFGBCHDBCIJ $.
  $}

  ${
    nfrd.1 $e |- ( ph -> F/ x ps ) $.
    $( Consequence of the definition of not-free in a context.  (Contributed by
       Wolf Lammen, 15-Oct-2021.) $)
    nfrd $p |- ( ph -> ( E. x ps -> A. x ps ) ) $=
      ( wnf wex wal wi df-nf sylib ) ABCEBCFBCGHDBCIJ $.
  $}

  $( Closed form of ~ nfth .  (Contributed by Wolf Lammen, 19-Aug-2018.)
     (Proof shortened by BJ, 16-Sep-2021.)  (Proof shortened by Wolf Lammen,
     3-Sep-2022.) $)
  nftht $p |- ( A. x ph -> F/ x ph ) $=
    ( wal wex ax-1 nfd ) ABCZABGABDEF $.

  $( Closed form of ~ nfnth .  (Contributed by BJ, 16-Sep-2021.)  (Proof
     shortened by Wolf Lammen, 4-Sep-2022.) $)
  nfntht $p |- ( -. E. x ph -> F/ x ph ) $=
    ( wex wn wal pm2.21 nfd ) ABCZDABHABEFG $.

  $( Closed form of ~ nfnth .  (Contributed by BJ, 16-Sep-2021.)  (Proof
     shortened by Wolf Lammen, 4-Sep-2022.) $)
  nfntht2 $p |- ( A. x -. ph -> F/ x ph ) $=
    ( wn wal wex wnf alnex nfntht sylbi ) ACBDABECABFABGABHI $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Rule scheme ax-gen (Generalization)
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    ax-gen.1 $e |- ph $.
    $( Rule of (universal) generalization.  In our axiomatization, this is the
       only postulated (that is, axiomatic) rule of inference of predicate
       calculus (together with the rule of modus ponens ~ ax-mp of
       propositional calculus).  See, e.g., Rule 2 of [Hamilton] p. 74.  This
       rule says that if something is unconditionally true, then it is true for
       all values of a variable.  For example, if we have proved ` x = x ` ,
       then we can conclude ` A. x x = x ` or even ` A. y x = x ` .  Theorem
       ~ altru shows the special case ` A. x T. ` .  The converse rule of
       inference ~ spi (universal instantiation, or universal specialization)
       shows that we can also go the other way: in other words, we can add or
       remove universal quantifiers from the beginning of any theorem as
       required.  Note that the closed form ` ( ph -> A. x ph ) ` need not hold
       (but may hold in special cases, see ~ ax-5 ).  (Contributed by NM,
       3-Jan-1993.) $)
    ax-gen $a |- A. x ph $.
  $}

  ${
    gen2.1 $e |- ph $.
    $( Generalization applied twice.  (Contributed by NM, 30-Apr-1998.) $)
    gen2 $p |- A. x A. y ph $=
      ( wal ax-gen ) ACEBACDFF $.
  $}

  ${
    mpg.1 $e |- ( A. x ph -> ps ) $.
    mpg.2 $e |- ph $.
    $( Modus ponens combined with generalization.  (Contributed by NM,
       24-May-1994.) $)
    mpg $p |- ps $=
      ( wal ax-gen ax-mp ) ACFBACEGDH $.
  $}

  ${
    mpgbi.1 $e |- ( A. x ph <-> ps ) $.
    mpgbi.2 $e |- ph $.
    $( Modus ponens on biconditional combined with generalization.
       (Contributed by NM, 24-May-1994.)  (Proof shortened by Stefan Allan,
       28-Oct-2008.) $)
    mpgbi $p |- ps $=
      ( wal ax-gen mpbi ) ACFBACEGDH $.
  $}

  ${
    mpgbir.1 $e |- ( ph <-> A. x ps ) $.
    mpgbir.2 $e |- ps $.
    $( Modus ponens on biconditional combined with generalization.
       (Contributed by NM, 24-May-1994.)  (Proof shortened by Stefan Allan,
       28-Oct-2008.) $)
    mpgbir $p |- ph $=
      ( wal ax-gen mpbir ) ABCFBCEGDH $.
  $}

  ${
    nex.1 $e |- -. ph $.
    $( Generalization rule for negated wff.  (Contributed by NM,
       18-May-1994.) $)
    nex $p |- -. E. x ph $=
      ( wn wex alnex mpgbi ) ADABEDBABFCG $.
  $}

  ${
    nfth.1 $e |- ph $.
    $( No variable is (effectively) free in a theorem.  (Contributed by Mario
       Carneiro, 11-Aug-2016.) ~ df-nf changed.  (Revised by Wolf Lammen,
       12-Sep-2021.) $)
    nfth $p |- F/ x ph $=
      ( wnf nftht mpg ) AABDBABECF $.
  $}

  ${
    nfnth.1 $e |- -. ph $.
    $( No variable is (effectively) free in a non-theorem.  (Contributed by
       Mario Carneiro, 6-Dec-2016.) ~ df-nf changed.  (Revised by Wolf Lammen,
       12-Sep-2021.) $)
    nfnth $p |- F/ x ph $=
      ( wn wnf nfntht2 mpg ) ADABEBABFCG $.
  $}

  ${
    hbth.1 $e |- ph $.
    $( No variable is (effectively) free in a theorem.

       This and later "hypothesis-building" lemmas, with labels starting
       "hb...", allow us to construct proofs of formulas of the form
       ` |- ( ph -> A. x ph ) ` from smaller formulas of this form.  These are
       useful for constructing hypotheses that state " ` x ` is (effectively)
       not free in ` ph ` ".  (Contributed by NM, 11-May-1993.)  This hb* idiom
       is generally being replaced by the nf* idiom (see ~ nfth ), but keeps
       its interest in some cases.  (Revised by BJ, 23-Sep-2022.) $)
    hbth $p |- ( ph -> A. x ph ) $=
      ( wal ax-gen a1i ) ABDAABCEF $.
  $}

  $( The true constant has no free variables.  (This can also be proven in one
     step with ~ nfv , but this proof does not use ~ ax-5 .)  (Contributed by
     Mario Carneiro, 6-Oct-2016.) $)
  nftru $p |- F/ x T. $=
    ( wtru tru nfth ) BACD $.

  $( The false constant has no free variables (see ~ nftru ).  (Contributed by
     BJ, 6-May-2019.) $)
  nffal $p |- F/ x F. $=
    ( wfal fal nfnth ) BACD $.

  ${
    sptruw.1 $e |- ph $.
    $( Version of ~ sp when ` ph ` is true.  Instance of ~ a1i .  Uses only
       Tarski's FOL axiom schemes.  (Contributed by NM, 23-Apr-2017.) $)
    sptruw $p |- ( A. x ph -> ph ) $=
      ( wal a1i ) AABDCE $.
  $}

  $( For all sets, ` T. ` is true.  (Contributed by Anthony Hart,
     13-Sep-2011.) $)
  altru $p |- A. x T. $=
    ( wtru tru ax-gen ) BACD $.

  $( For all sets, ` -. F. ` is true.  (Contributed by Anthony Hart,
     13-Sep-2011.) $)
  alfal $p |- A. x -. F. $=
    ( wfal wn fal ax-gen ) BCADE $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Axiom scheme ax-4 (Quantified Implication)
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Axiom of Quantified Implication.  Axiom C4 of [Monk2] p. 105 and Theorem
     19.20 of [Margaris] p. 90.  It is restated as ~ alim for labeling
     consistency.  It should be used only by ~ alim .  (Contributed by NM,
     21-May-2008.)  Use ~ alim instead.  (New usage is discouraged.) $)
  ax-4 $a |- ( A. x ( ph -> ps ) -> ( A. x ph -> A. x ps ) ) $.

  $( Restatement of Axiom ~ ax-4 , for labeling consistency.  It should be the
     only theorem using ~ ax-4 .  (Contributed by NM, 10-Jan-1993.) $)
  alim $p |- ( A. x ( ph -> ps ) -> ( A. x ph -> A. x ps ) ) $=
    ( ax-4 ) ABCD $.

  ${
    alimi.1 $e |- ( ph -> ps ) $.
    $( Inference quantifying both antecedent and consequent.  (Contributed by
       NM, 5-Jan-1993.) $)
    alimi $p |- ( A. x ph -> A. x ps ) $=
      ( wi wal alim mpg ) ABEACFBCFECABCGDH $.

    $( Inference doubly quantifying both antecedent and consequent.
       (Contributed by NM, 3-Feb-2005.) $)
    2alimi $p |- ( A. x A. y ph -> A. x A. y ps ) $=
      ( wal alimi ) ADFBDFCABDEGG $.
  $}

  $( Add an antecedent in a universally quantified formula.  (Contributed by
     BJ, 6-Oct-2018.) $)
  ala1 $p |- ( A. x ph -> A. x ( ps -> ph ) ) $=
    ( wi ax-1 alimi ) ABADCABEF $.

  $( Closed form of ~ al2imi .  Version of ~ alim for a nested implication.
     (Contributed by Alan Sare, 31-Dec-2011.) $)
  al2im $p |- ( A. x ( ph -> ( ps -> ch ) ) ->
                                     ( A. x ph -> ( A. x ps -> A. x ch ) ) ) $=
    ( wi wal alim syl6 ) ABCEZEDFADFIDFBDFCDFEAIDGBCDGH $.

  ${
    al2imi.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Inference quantifying antecedent, nested antecedent, and consequent.
       (Contributed by NM, 10-Jan-1993.) $)
    al2imi $p |- ( A. x ph -> ( A. x ps -> A. x ch ) ) $=
      ( wi wal al2im mpg ) ABCFFADGBDGCDGFFDABCDHEI $.
  $}

  ${
    alanimi.1 $e |- ( ( ph /\ ps ) -> ch ) $.
    $( Variant of ~ al2imi with conjunctive antecedent.  (Contributed by Andrew
       Salmon, 8-Jun-2011.) $)
    alanimi $p |- ( ( A. x ph /\ A. x ps ) -> A. x ch ) $=
      ( wal ex al2imi imp ) ADFBDFCDFABCDABCEGHI $.
  $}

  ${
    alimdh.1 $e |- ( ph -> A. x ph ) $.
    alimdh.2 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Deduction form of Theorem 19.20 of [Margaris] p. 90, see ~ alim .
       (Contributed by NM, 4-Jan-2002.) $)
    alimdh $p |- ( ph -> ( A. x ps -> A. x ch ) ) $=
      ( wal wi al2imi syl ) AADGBDGCDGHEABCDFIJ $.
  $}

  $( Theorem 19.15 of [Margaris] p. 90.  (Contributed by NM, 24-Jan-1993.) $)
  albi $p |- ( A. x ( ph <-> ps ) -> ( A. x ph <-> A. x ps ) ) $=
    ( wb wal biimp al2imi biimpr impbid ) ABDZCEACEBCEJABCABFGJBACABHGI $.

  ${
    albii.1 $e |- ( ph <-> ps ) $.
    $( Inference adding universal quantifier to both sides of an equivalence.
       (Contributed by NM, 7-Aug-1994.) $)
    albii $p |- ( A. x ph <-> A. x ps ) $=
      ( wb wal albi mpg ) ABEACFBCFECABCGDH $.

    $( Theorem albii is the congruence law for universal quantification. $)
    $( $j congruence 'albii'; $)

    $( Inference adding two universal quantifiers to both sides of an
       equivalence.  (Contributed by NM, 9-Mar-1997.) $)
    2albii $p |- ( A. x A. y ph <-> A. x A. y ps ) $=
      ( wal albii ) ADFBDFCABDEGG $.
  $}

  $( Closed form of ~ sylg .  (Contributed by BJ, 2-May-2019.) $)
  sylgt $p |- ( A. x ( ps -> ch ) ->
                                ( ( ph -> A. x ps ) -> ( ph -> A. x ch ) ) ) $=
    ( wi wal alim imim2d ) BCEDFBDFCDFABCDGH $.

  ${
    sylg.1 $e |- ( ph -> A. x ps ) $.
    sylg.2 $e |- ( ps -> ch ) $.
    $( A syllogism combined with generalization.  Inference associated with
       ~ sylgt .  General form of ~ alrimih .  (Contributed by BJ,
       4-Oct-2019.) $)
    sylg $p |- ( ph -> A. x ch ) $=
      ( wal alimi syl ) ABDGCDGEBCDFHI $.
  $}

  ${
    alrimih.1 $e |- ( ph -> A. x ph ) $.
    alrimih.2 $e |- ( ph -> ps ) $.
    $( Inference form of Theorem 19.21 of [Margaris] p. 90.  See ~ 19.21 and
       ~ 19.21h .  Instance of ~ sylg .  (Contributed by NM, 9-Jan-1993.)
       (Revised by BJ, 31-Mar-2021.) $)
    alrimih $p |- ( ph -> A. x ps ) $=
      ( sylg ) AABCDEF $.
  $}

  ${
    hbxfrbi.1 $e |- ( ph <-> ps ) $.
    hbxfrbi.2 $e |- ( ps -> A. x ps ) $.
    $( A utility lemma to transfer a bound-variable hypothesis builder into a
       definition.  See ~ hbxfreq for equality version.  (Contributed by
       Jonathan Ben-Naim, 3-Jun-2011.) $)
    hbxfrbi $p |- ( ph -> A. x ph ) $=
      ( wal albii 3imtr4i ) BBCFAACFEDABCDGH $.
  $}

  $( Universal quantifier in terms of existential quantifier and negation.
     Dual of ~ df-ex .  See also the dual pair ~ alnex / ~ exnal .  Theorem
     19.6 of [Margaris] p. 89.  (Contributed by NM, 12-Mar-1993.) $)
  alex $p |- ( A. x ph <-> -. E. x -. ph ) $=
    ( wal wn wex notnotb albii alnex bitri ) ABCADZDZBCJBEDAKBAFGJBHI $.

  $( Existential quantification of negation is equivalent to negation of
     universal quantification.  Dual of ~ alnex .  See also the dual pair
     ~ df-ex / ~ alex .  Theorem 19.14 of [Margaris] p. 90.  (Contributed by
     NM, 12-Mar-1993.) $)
  exnal $p |- ( E. x -. ph <-> -. A. x ph ) $=
    ( wal wn wex alex con2bii ) ABCADBEABFG $.

  $( Part of theorem *11.5 in [WhiteheadRussell] p. 164.  (Contributed by
     Andrew Salmon, 24-May-2011.) $)
  2nalexn $p |- ( -. A. x A. y ph <-> E. x E. y -. ph ) $=
    ( wn wex wal df-ex alex albii xchbinxr bicomi ) ADCEZBEZACFZBFZDMLDZBFOLBGN
    PBACHIJK $.

  $( Theorem *11.22 in [WhiteheadRussell] p. 160.  (Contributed by Andrew
     Salmon, 24-May-2011.) $)
  2exnaln $p |- ( E. x E. y ph <-> -. A. x A. y -. ph ) $=
    ( wex wn wal df-ex alnex albii xchbinxr ) ACDZBDKEZBFAECFZBFKBGMLBACHIJ $.

  $( Theorem *11.25 in [WhiteheadRussell] p. 160.  (Contributed by Andrew
     Salmon, 24-May-2011.) $)
  2nexaln $p |- ( -. E. x E. y ph <-> A. x A. y -. ph ) $=
    ( wn wal wex 2exnaln bicomi con1bii ) ADCEBEZACFBFZKJDABCGHI $.

  $( An equivalence between an implication with a universally quantified
     consequent and an implication with an existentially quantified antecedent.
     An interesting case is when the same formula is substituted for both
     ` ph ` and ` ps ` , since then both implications express a type of
     non-freeness.  See also ~ eximal .  (Contributed by BJ, 12-May-2019.) $)
  alimex $p |- ( ( ph -> A. x ps ) <-> ( E. x -. ps -> -. ph ) ) $=
    ( wal wi wn wex alex imbi2i con2b bitri ) ABCDZEABFCGZFZEMAFELNABCHIAMJK $.

  ${
    aleximi.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( A variant of ~ al2imi : instead of applying ` A. x ` quantifiers to the
       final implication, replace them with ` E. x ` .  A shorter proof is
       possible using ~ nfa1 , ~ sps and ~ eximd , but it depends on more
       axioms.  (Contributed by Wolf Lammen, 18-Aug-2019.) $)
    aleximi $p |- ( A. x ph -> ( E. x ps -> E. x ch ) ) $=
      ( wal wex wn con3d al2imi alnex 3imtr3g con4d ) ADFZCDGZBDGZNCHZDFBHZDFOH
      PHAQRDABCEIJCDKBDKLM $.
  $}

  ${
    alexbii.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Biconditional form of ~ aleximi .  (Contributed by BJ, 16-Nov-2020.) $)
    alexbii $p |- ( A. x ph -> ( E. x ps <-> E. x ch ) ) $=
      ( wal wex biimpd aleximi biimprd impbid ) ADFBDGCDGABCDABCEHIACBDABCEJIK
      $.
  $}

  $( Theorem 19.22 of [Margaris] p. 90.  (Contributed by NM, 10-Jan-1993.)
     (Proof shortened by Wolf Lammen, 4-Jul-2014.) $)
  exim $p |- ( A. x ( ph -> ps ) -> ( E. x ph -> E. x ps ) ) $=
    ( wi id aleximi ) ABDZABCGEF $.

  ${
    eximi.1 $e |- ( ph -> ps ) $.
    $( Inference adding existential quantifier to antecedent and consequent.
       (Contributed by NM, 10-Jan-1993.) $)
    eximi $p |- ( E. x ph -> E. x ps ) $=
      ( wi wex exim mpg ) ABEACFBCFECABCGDH $.

    $( Inference adding two existential quantifiers to antecedent and
       consequent.  (Contributed by NM, 3-Feb-2005.) $)
    2eximi $p |- ( E. x E. y ph -> E. x E. y ps ) $=
      ( wex eximi ) ADFBDFCABDEGG $.
  $}

  ${
    eximii.1 $e |- E. x ph $.
    eximii.2 $e |- ( ph -> ps ) $.
    $( Inference associated with ~ eximi .  (Contributed by BJ, 3-Feb-2018.) $)
    eximii $p |- E. x ps $=
      ( wex eximi ax-mp ) ACFBCFDABCEGH $.
  $}

  $( Add an antecedent in an existentially quantified formula.  (Contributed by
     BJ, 6-Oct-2018.) $)
  exa1 $p |- ( E. x ph -> E. x ( ps -> ph ) ) $=
    ( wi ax-1 eximi ) ABADCABEF $.

  $( Theorem 19.38 of [Margaris] p. 90.  The converse holds under non-freeness
     conditions, see ~ 19.38a and ~ 19.38b .  (Contributed by NM, 12-Mar-1993.)
     Allow a shortening of ~ 19.21t .  (Revised by Wolf Lammen, 2-Jan-2018.) $)
  19.38 $p |- ( ( E. x ph -> A. x ps ) -> A. x ( ph -> ps ) ) $=
    ( wex wal wi wn alnex pm2.21 alimi sylbir ala1 ja ) ACDZBCEABFZCEZNGAGZCEPA
    CHQOCABIJKBACLM $.

  $( Under a non-freeness hypothesis, the implication ~ 19.38 can be
     strengthened to an equivalence.  See also ~ 19.38b .  (Contributed by BJ,
     3-Nov-2021.)  (Proof shortened by Wolf Lammen, 9-Jul-2022.) $)
  19.38a $p |-
             ( F/ x ph -> ( ( E. x ph -> A. x ps ) <-> A. x ( ph -> ps ) ) ) $=
    ( wnf wex wal wi 19.38 id nfrd alim syl9 impbid2 ) ACDZACEZBCFZGABGCFZABCHN
    OACFQPNACNIJABCKLM $.

  $( Under a non-freeness hypothesis, the implication ~ 19.38 can be
     strengthened to an equivalence.  See also ~ 19.38a .  (Contributed by BJ,
     3-Nov-2021.)  (Proof shortened by Wolf Lammen, 9-Jul-2022.) $)
  19.38b $p |-
             ( F/ x ps -> ( ( E. x ph -> A. x ps ) <-> A. x ( ph -> ps ) ) ) $=
    ( wnf wex wal wi 19.38 exim id nfrd syl9r impbid2 ) BCDZACEZBCFZGABGCFZABCH
    QOBCENPABCINBCNJKLM $.

  $( Quantified implication in terms of quantified negation of conjunction.
     (Contributed by BJ, 16-Jul-2021.) $)
  imnang $p |- ( A. x ( ph -> -. ps ) <-> A. x -. ( ph /\ ps ) ) $=
    ( wn wi wa imnan albii ) ABDEABFDCABGH $.

  $( A transformation of quantifiers and logical connectives.  (Contributed by
     NM, 19-Aug-1993.) $)
  alinexa $p |- ( A. x ( ph -> -. ps ) <-> -. E. x ( ph /\ ps ) ) $=
    ( wn wi wal wa wex imnang alnex bitri ) ABDECFABGZDCFLCHDABCILCJK $.

  $( A relationship between two quantifiers and negation.  (Contributed by NM,
     18-Aug-1993.) $)
  alexn $p |- ( A. x E. y -. ph <-> -. E. x A. y ph ) $=
    ( wn wex wal exnal albii alnex bitri ) ADCEZBFACFZDZBFLBEDKMBACGHLBIJ $.

  $( Theorem *11.51 in [WhiteheadRussell] p. 164.  (Contributed by Andrew
     Salmon, 24-May-2011.)  (Proof shortened by Wolf Lammen, 25-Sep-2014.) $)
  2exnexn $p |- ( E. x A. y ph <-> -. A. x E. y -. ph ) $=
    ( wn wex wal alexn con2bii ) ADCEBFACFBEABCGH $.

  $( Theorem 19.18 of [Margaris] p. 90.  (Contributed by NM, 12-Mar-1993.) $)
  exbi $p |- ( A. x ( ph <-> ps ) -> ( E. x ph <-> E. x ps ) ) $=
    ( wb id alexbii ) ABDZABCGEF $.

  ${
    exbii.1 $e |- ( ph <-> ps ) $.
    $( Inference adding existential quantifier to both sides of an equivalence.
       (Contributed by NM, 24-May-1994.) $)
    exbii $p |- ( E. x ph <-> E. x ps ) $=
      ( wb wex exbi mpg ) ABEACFBCFECABCGDH $.
  $}

  ${
    2exbii.1 $e |- ( ph <-> ps ) $.
    $( Inference adding two existential quantifiers to both sides of an
       equivalence.  (Contributed by NM, 16-Mar-1995.) $)
    2exbii $p |- ( E. x E. y ph <-> E. x E. y ps ) $=
      ( wex exbii ) ADFBDFCABDEGG $.
  $}

  ${
    3exbii.1 $e |- ( ph <-> ps ) $.
    $( Inference adding three existential quantifiers to both sides of an
       equivalence.  (Contributed by NM, 2-May-1995.) $)
    3exbii $p |- ( E. x E. y E. z ph <-> E. x E. y E. z ps ) $=
      ( wex exbii 2exbii ) AEGBEGCDABEFHI $.
  $}

  $( Equivalence theorem for the non-freeness predicate.  Closed form of
     ~ nfbii .  (Contributed by Giovanni Mascellani, 10-Apr-2018.)  Reduce
     axiom usage.  (Revised by BJ, 6-May-2019.) $)
  nfbiit $p |- ( A. x ( ph <-> ps ) -> ( F/ x ph <-> F/ x ps ) ) $=
    ( wb wal wex wi wnf exbi albi imbi12d df-nf 3bitr4g ) ABDCEZACFZACEZGBCFZBC
    EZGACHBCHNOQPRABCIABCJKACLBCLM $.

  ${
    nfbii.1 $e |- ( ph <-> ps ) $.
    $( Equality theorem for the non-freeness predicate.  (Contributed by Mario
       Carneiro, 11-Aug-2016.) ~ df-nf changed.  (Revised by Wolf Lammen,
       12-Sep-2021.) $)
    nfbii $p |- ( F/ x ph <-> F/ x ps ) $=
      ( wb wnf nfbiit mpg ) ABEACFBCFECABCGDH $.

    ${
      nfxfr.2 $e |- F/ x ps $.
      $( A utility lemma to transfer a bound-variable hypothesis builder into a
         definition.  (Contributed by Mario Carneiro, 11-Aug-2016.) $)
      nfxfr $p |- F/ x ph $=
        ( wnf nfbii mpbir ) ACFBCFEABCDGH $.
    $}

    ${
      nfxfrd.2 $e |- ( ch -> F/ x ps ) $.
      $( A utility lemma to transfer a bound-variable hypothesis builder into a
         definition.  (Contributed by Mario Carneiro, 24-Sep-2016.) $)
      nfxfrd $p |- ( ch -> F/ x ph ) $=
        ( wnf nfbii sylibr ) CBDGADGFABDEHI $.
    $}
  $}

  $( A variable is non-free in a proposition if and only if it is so in its
     negation.  (Contributed by BJ, 6-May-2019.) $)
  nfnbi $p |- ( F/ x ph <-> F/ x -. ph ) $=
    ( wal wn wo wnf orcom nf3 notnotb albii orbi2i bitr4i 3bitr4i ) ABCZADZBCZE
    PNEZABFOBFZNPGABHRPODZBCZEQOBHNTPASBAIJKLM $.

  $( If a variable is non-free in a proposition, then it is non-free in its
     negation.  (Contributed by Mario Carneiro, 24-Sep-2016.)  (Proof shortened
     by Wolf Lammen, 28-Dec-2017.)  (Revised by BJ, 24-Jul-2019.) ~ df-nf
     changed.  (Revised by Wolf Lammen, 4-Oct-2021.) $)
  nfnt $p |- ( F/ x ph -> F/ x -. ph ) $=
    ( wnf wn nfnbi biimpi ) ABCADBCABEF $.

  ${
    nfn.1 $e |- F/ x ph $.
    $( Inference associated with ~ nfnt .  (Contributed by Mario Carneiro,
       11-Aug-2016.) ~ df-nf changed.  (Revised by Wolf Lammen,
       18-Sep-2021.) $)
    nfn $p |- F/ x -. ph $=
      ( wnf wn nfnt ax-mp ) ABDAEBDCABFG $.
  $}

  ${
    nfnd.1 $e |- ( ph -> F/ x ps ) $.
    $( Deduction associated with ~ nfnt .  (Contributed by Mario Carneiro,
       24-Sep-2016.) $)
    nfnd $p |- ( ph -> F/ x -. ps ) $=
      ( wnf wn nfnt syl ) ABCEBFCEDBCGH $.
  $}

  $( A transformation of quantifiers and logical connectives.  (Contributed by
     NM, 25-Mar-1996.)  (Proof shortened by Wolf Lammen, 4-Sep-2014.) $)
  exanali $p |- ( E. x ( ph /\ -. ps ) <-> -. A. x ( ph -> ps ) ) $=
    ( wn wa wex wi wal annim exbii exnal bitri ) ABDEZCFABGZDZCFNCHDMOCABIJNCKL
    $.

  $( Commutation of conjunction inside an existential quantifier.  (Contributed
     by NM, 18-Aug-1993.) $)
  exancom $p |- ( E. x ( ph /\ ps ) <-> E. x ( ps /\ ph ) ) $=
    ( wa ancom exbii ) ABDBADCABEF $.

  ${
    exan.1 $e |- E. x ph $.
    exan.2 $e |- ps $.
    $( Place a conjunct in the scope of an existential quantifier.
       (Contributed by NM, 18-Aug-1993.)  (Proof shortened by Andrew Salmon,
       25-May-2011.)  (Proof shortened by Wolf Lammen, 13-Jan-2018.)  Reduce
       axiom dependencies.  (Revised by BJ, 7-Jul-2021.)  (Proof shortened by
       Wolf Lammen, 6-Nov-2022.)  Expand hypothesis.  (Revised by Steven
       Nguyen, 19-Jun-2023.) $)
    exan $p |- E. x ( ph /\ ps ) $=
      ( wa jctr eximii ) AABFCDABEGH $.
  $}

  ${
    exanOLD.1 $e |- ( E. x ph /\ ps ) $.
    $( Obsolete proof of ~ exan as of 19-Jun-2023.  (Contributed by NM,
       18-Aug-1993.)  (Proof shortened by Andrew Salmon, 25-May-2011.)  (Proof
       shortened by Wolf Lammen, 13-Jan-2018.)  Reduce axiom dependencies.
       (Revised by BJ, 7-Jul-2021.)  (Proof shortened by Wolf Lammen,
       6-Nov-2022.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    exanOLD $p |- E. x ( ph /\ ps ) $=
      ( wa wex simpli simpri jctr eximii ) AABECACFZBDGABKBDHIJ $.

    $( Obsolete proof of ~ exan as of 6-Nov-2022.  (Contributed by NM,
       18-Aug-1993.)  (Proof shortened by Andrew Salmon, 25-May-2011.)  (Proof
       shortened by Wolf Lammen, 13-Jan-2018.)  Reduce axiom dependencies.
       (Revised by BJ, 7-Jul-2021.)  (Proof shortened by Wolf Lammen,
       8-Oct-2021.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    exanOLDOLD $p |- E. x ( ph /\ ps ) $=
      ( wex wa simpli wi simpri pm3.21 ax-mp eximi ) ACEZABFZCEMBDGANCBANHMBDIB
      AJKLK $.
  $}

  ${
    alrimdh.1 $e |- ( ph -> A. x ph ) $.
    alrimdh.2 $e |- ( ps -> A. x ps ) $.
    alrimdh.3 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Deduction form of Theorem 19.21 of [Margaris] p. 90, see ~ 19.21 and
       ~ 19.21h .  (Contributed by NM, 10-Feb-1997.)  (Proof shortened by
       Andrew Salmon, 13-May-2011.) $)
    alrimdh $p |- ( ph -> ( ps -> A. x ch ) ) $=
      ( wal alimdh syl5 ) BBDHACDHFABCDEGIJ $.
  $}

  ${
    eximdh.1 $e |- ( ph -> A. x ph ) $.
    eximdh.2 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Deduction from Theorem 19.22 of [Margaris] p. 90.  (Contributed by NM,
       20-May-1996.) $)
    eximdh $p |- ( ph -> ( E. x ps -> E. x ch ) ) $=
      ( wal wex wi aleximi syl ) AADGBDHCDHIEABCDFJK $.
  $}

  ${
    nexdh.1 $e |- ( ph -> A. x ph ) $.
    nexdh.2 $e |- ( ph -> -. ps ) $.
    $( Deduction for generalization rule for negated wff.  (Contributed by NM,
       2-Jan-2002.) $)
    nexdh $p |- ( ph -> -. E. x ps ) $=
      ( wn wal wex alrimih alnex sylib ) ABFZCGBCHFALCDEIBCJK $.
  $}

  ${
    albidh.1 $e |- ( ph -> A. x ph ) $.
    albidh.2 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Formula-building rule for universal quantifier (deduction form).
       (Contributed by NM, 26-May-1993.) $)
    albidh $p |- ( ph -> ( A. x ps <-> A. x ch ) ) $=
      ( wb wal alrimih albi syl ) ABCGZDHBDHCDHGALDEFIBCDJK $.
  $}

  ${
    exbidh.1 $e |- ( ph -> A. x ph ) $.
    exbidh.2 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Formula-building rule for existential quantifier (deduction form).
       (Contributed by NM, 26-May-1993.) $)
    exbidh $p |- ( ph -> ( E. x ps <-> E. x ch ) ) $=
      ( wal wex wb alexbii syl ) AADGBDHCDHIEABCDFJK $.
  $}

  $( Simplification of an existentially quantified conjunction.  (Contributed
     by Rodolfo Medina, 25-Sep-2010.)  (Proof shortened by Andrew Salmon,
     29-Jun-2011.) $)
  exsimpl $p |- ( E. x ( ph /\ ps ) -> E. x ph ) $=
    ( wa simpl eximi ) ABDACABEF $.

  $( Simplification of an existentially quantified conjunction.  (Contributed
     by Rodolfo Medina, 25-Sep-2010.)  (Proof shortened by Andrew Salmon,
     29-Jun-2011.) $)
  exsimpr $p |- ( E. x ( ph /\ ps ) -> E. x ps ) $=
    ( wa simpr eximi ) ABDBCABEF $.

  $( Theorem 19.40 of [Margaris] p. 90.  (Contributed by NM, 26-May-1993.) $)
  19.40 $p |- ( E. x ( ph /\ ps ) -> ( E. x ph /\ E. x ps ) ) $=
    ( wa wex exsimpl exsimpr jca ) ABDCEACEBCEABCFABCGH $.

  $( Theorem 19.26 of [Margaris] p. 90.  Also Theorem *10.22 of
     [WhiteheadRussell] p. 147.  (Contributed by NM, 12-Mar-1993.)  (Proof
     shortened by Wolf Lammen, 4-Jul-2014.) $)
  19.26 $p |- ( A. x ( ph /\ ps ) <-> ( A. x ph /\ A. x ps ) ) $=
    ( wa wal simpl alimi simpr jca id alanimi impbii ) ABDZCEZACEZBCEZDNOPMACAB
    FGMBCABHGIABMCMJKL $.

  $( Theorem ~ 19.26 with two quantifiers.  (Contributed by NM, 3-Feb-2005.) $)
  19.26-2 $p |- ( A. x A. y ( ph /\ ps ) <->
                ( A. x A. y ph /\ A. x A. y ps ) ) $=
    ( wa wal 19.26 albii bitri ) ABEDFZCFADFZBDFZEZCFKCFLCFEJMCABDGHKLCGI $.

  $( Theorem ~ 19.26 with triple conjunction.  (Contributed by NM,
     13-Sep-2011.) $)
  19.26-3an $p |- ( A. x ( ph /\ ps /\ ch )
                   <-> ( A. x ph /\ A. x ps /\ A. x ch ) ) $=
    ( wa wal w3a 19.26 anbi1i df-3an albii bitri 3bitr4i ) ABEZDFZCDFZEZADFZBDF
    ZEZPEABCGZDFZRSPGOTPABDHIUBNCEZDFQUAUCDABCJKNCDHLRSPJM $.

  $( Theorem 19.29 of [Margaris] p. 90.  See also ~ 19.29r .  (Contributed by
     NM, 21-Jun-1993.)  (Proof shortened by Andrew Salmon, 13-May-2011.) $)
  19.29 $p |- ( ( A. x ph /\ E. x ps ) -> E. x ( ph /\ ps ) ) $=
    ( wal wex wa pm3.2 aleximi imp ) ACDBCEABFZCEABJCABGHI $.

  $( Variation of ~ 19.29 .  (Contributed by NM, 18-Aug-1993.)  (Proof
     shortened by Wolf Lammen, 12-Nov-2020.) $)
  19.29r $p |- ( ( E. x ph /\ A. x ps ) -> E. x ( ph /\ ps ) ) $=
    ( wal wex wa pm3.21 aleximi impcom ) BCDACEABFZCEBAJCBAGHI $.

  $( Variation of ~ 19.29r with double quantification.  (Contributed by NM,
     3-Feb-2005.) $)
  19.29r2 $p |- ( ( E. x E. y ph /\ A. x A. y ps ) ->
             E. x E. y ( ph /\ ps ) ) $=
    ( wex wal wa 19.29r eximi syl ) ADEZCEBDFZCFGKLGZCEABGDEZCEKLCHMNCABDHIJ $.

  $( Variation of ~ 19.29 with mixed quantification.  (Contributed by NM,
     11-Feb-2005.) $)
  19.29x $p |- ( ( E. x A. y ph /\ A. x E. y ps ) ->
             E. x E. y ( ph /\ ps ) ) $=
    ( wal wex wa 19.29r 19.29 eximi syl ) ADEZCFBDFZCEGLMGZCFABGDFZCFLMCHNOCABD
    IJK $.

  $( Theorem 19.35 of [Margaris] p. 90.  This theorem is useful for moving an
     implication (in the form of the right-hand side) into the scope of a
     single existential quantifier.  (Contributed by NM, 12-Mar-1993.)  (Proof
     shortened by Wolf Lammen, 27-Jun-2014.) $)
  19.35 $p |- ( E. x ( ph -> ps ) <-> ( A. x ph -> E. x ps ) ) $=
    ( wi wex wal pm2.27 aleximi com12 wn exnal pm2.21 eximi sylbir exa1 impbii
    ja ) ABDZCEZACFZBCEZDTSUAARBCABGHITUASTJAJZCESACKUBRCABLMNBACOQP $.

  ${
    19.35i.1 $e |- E. x ( ph -> ps ) $.
    $( Inference associated with ~ 19.35 .  (Contributed by NM,
       21-Jun-1993.) $)
    19.35i $p |- ( A. x ph -> E. x ps ) $=
      ( wi wex wal 19.35 mpbi ) ABECFACGBCFEDABCHI $.
  $}

  ${
    19.35ri.1 $e |- ( A. x ph -> E. x ps ) $.
    $( Inference associated with ~ 19.35 .  (Contributed by NM,
       12-Mar-1993.) $)
    19.35ri $p |- E. x ( ph -> ps ) $=
      ( wi wex wal 19.35 mpbir ) ABECFACGBCFEDABCHI $.
  $}

  $( Theorem 19.25 of [Margaris] p. 90.  (Contributed by NM, 12-Mar-1993.) $)
  19.25 $p |- ( A. y E. x ( ph -> ps ) ->
              ( E. y A. x ph -> E. y E. x ps ) ) $=
    ( wi wex wal 19.35 biimpi aleximi ) ABECFZACGZBCFZDKLMEABCHIJ $.

  $( Theorem 19.30 of [Margaris] p. 90.  (Contributed by NM, 12-Mar-1993.)
     (Proof shortened by Andrew Salmon, 25-May-2011.) $)
  19.30 $p |- ( A. x ( ph \/ ps ) -> ( A. x ph \/ E. x ps ) ) $=
    ( wo wal wex wn exnal pm2.53 aleximi syl5bir orrd ) ABDZCEZACEZBCFZOGAGZCFN
    PACHMQBCABIJKL $.

  $( Theorem 19.43 of [Margaris] p. 90.  (Contributed by NM, 12-Mar-1993.)
     (Proof shortened by Wolf Lammen, 27-Jun-2014.) $)
  19.43 $p |- ( E. x ( ph \/ ps ) <-> ( E. x ph \/ E. x ps ) ) $=
    ( wo wex wn wi wal df-or exbii 19.35 alnex imbi1i 3bitri bitr4i ) ABDZCEZAC
    EZFZBCEZGZRTDQAFZBGZCEUBCHZTGUAPUCCABIJUBBCKUDSTACLMNRTIO $.

  $( Obsolete proof of ~ 19.43 .  Do not delete as it is referenced on the
     ~ mmrecent.html page and in ~ conventions-labels .  (Contributed by NM,
     5-Aug-1993.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  19.43OLD $p |- ( E. x ( ph \/ ps ) <-> ( E. x ph \/ E. x ps ) ) $=
    ( wo wn wal wex wa ioran albii 19.26 alnex anbi12i 3bitri notbii df-ex oran
    3bitr4i ) ABDZEZCFZEACGZEZBCGZEZHZESCGUBUDDUAUFUAAEZBEZHZCFUGCFZUHCFZHUFTUI
    CABIJUGUHCKUJUCUKUEACLBCLMNOSCPUBUDQR $.

  $( Theorem 19.33 of [Margaris] p. 90.  (Contributed by NM, 12-Mar-1993.) $)
  19.33 $p |- ( ( A. x ph \/ A. x ps ) -> A. x ( ph \/ ps ) ) $=
    ( wal wo orc alimi olc jaoi ) ACDABEZCDBCDAJCABFGBJCBAHGI $.

  $( The antecedent provides a condition implying the converse of ~ 19.33 .
     (Contributed by NM, 27-Mar-2004.)  (Proof shortened by Andrew Salmon,
     25-May-2011.)  (Proof shortened by Wolf Lammen, 5-Jul-2014.) $)
  19.33b $p |- ( -. ( E. x ph /\ E. x ps ) ->
               ( A. x ( ph \/ ps ) <-> ( A. x ph \/ A. x ps ) ) ) $=
    ( wex wa wn wo wal ianor alnex pm2.53 al2imi syl5bir olc syl6com orcomd ord
    wi 19.30 orc jaoi sylbi 19.33 impbid1 ) ACDZBCDZEFZABGZCHZACHZBCHZGZUGUEFZU
    FFZGUIULRZUEUFIUMUOUNUIUMUKULUMAFZCHUIUKACJUHUPBCABKLMUKUJNOUIUNUJULUIUFUJU
    IUJUFABCSPQUJUKTOUAUBABCUCUD $.

  $( Theorem *11.42 in [WhiteheadRussell] p. 163.  Theorem 19.40 of [Margaris]
     p. 90 with two quantifiers.  (Contributed by Andrew Salmon,
     24-May-2011.) $)
  19.40-2 $p |- ( E. x E. y ( ph /\ ps ) ->
        ( E. x E. y ph /\ E. x E. y ps ) ) $=
    ( wa wex 19.40 eximi syl ) ABEDFZCFADFZBDFZEZCFKCFLCFEJMCABDGHKLCGI $.

  $( The antecedent provides a condition implying the converse of ~ 19.40 .
     This is to ~ 19.40 what ~ 19.33b is to ~ 19.33 .  (Contributed by BJ,
     6-May-2019.)  (Proof shortened by Wolf Lammen, 13-Nov-2020.) $)
  19.40b $p |- ( ( A. x ph \/ A. x ps ) ->
                          ( ( E. x ph /\ E. x ps ) <-> E. x ( ph /\ ps ) ) ) $=
    ( wal wo wex wa wi pm3.21 aleximi pm3.2 jaoa orcoms 19.40 impbid1 ) ACDZBCD
    ZEACFZBCFZGZABGZCFZQPTUBHQRUBPSBAUACBAIJABUACABKJLMABCNO $.

  $( Split a biconditional and distribute quantifier.  (Contributed by NM,
     18-Aug-1993.) $)
  albiim $p |- ( A. x ( ph <-> ps ) <->
             ( A. x ( ph -> ps ) /\ A. x ( ps -> ph ) ) ) $=
    ( wb wal wi wa dfbi2 albii 19.26 bitri ) ABDZCEABFZBAFZGZCEMCENCEGLOCABHIMN
    CJK $.

  $( Split a biconditional and distribute two quantifiers.  (Contributed by NM,
     3-Feb-2005.) $)
  2albiim $p |- ( A. x A. y ( ph <-> ps ) <->
             ( A. x A. y ( ph -> ps ) /\ A. x A. y ( ps -> ph ) ) ) $=
    ( wb wal wi wa albiim albii 19.26 bitri ) ABEDFZCFABGDFZBAGDFZHZCFNCFOCFHMP
    CABDIJNOCKL $.

  $( Add/remove a conjunct in the scope of an existential quantifier.
     (Contributed by Raph Levien, 3-Jul-2006.) $)
  exintrbi $p |- ( A. x ( ph -> ps ) -> ( E. x ph <-> E. x ( ph /\ ps ) ) ) $=
    ( wi wa abai rbaibr alexbii ) ABDZAABEZCJAIABFGH $.

  $( Introduce a conjunct in the scope of an existential quantifier.
     (Contributed by NM, 11-Aug-1993.)  (Proof shortened by BJ,
     16-Sep-2022.) $)
  exintr $p |- ( A. x ( ph -> ps ) -> ( E. x ph -> E. x ( ph /\ ps ) ) ) $=
    ( wi wa ancl aleximi ) ABDAABECABFG $.

  $( Universally quantified and uncurried (imported) form of syllogism.
     Theorem *10.3 in [WhiteheadRussell] p. 150.  (Contributed by Andrew
     Salmon, 8-Jun-2011.) $)
  alsyl $p |- ( ( A. x ( ph -> ps ) /\ A. x ( ps -> ch ) ) ->
        A. x ( ph -> ch ) ) $=
    ( wi pm3.33 alanimi ) ABEBCEACEDABCFG $.

  ${
    nfimd.1 $e |- ( ph -> F/ x ps ) $.
    nfimd.2 $e |- ( ph -> F/ x ch ) $.
    $( If in a context ` x ` is not free in ` ps ` and ` ch ` , then it is not
       free in ` ( ps -> ch ) ` .  Deduction form of ~ nfim .  (Contributed by
       Mario Carneiro, 24-Sep-2016.)  (Proof shortened by Wolf Lammen,
       30-Dec-2017.) ~ df-nf changed.  (Revised by Wolf Lammen, 18-Sep-2021.)
       Eliminate curried form of ~ nfimt .  (Revised by Wolf Lammen,
       10-Jul-2022.) $)
    nfimd $p |- ( ph -> F/ x ( ps -> ch ) ) $=
      ( wi wex wal 19.35 biimpi nfrd imim12d 19.38 syl56 nfd ) ABCGZDQDHZBDIZCD
      HZGZABDHZCDIZGQDIRUABCDJKAUBSTUCABDELACDFLMBCDNOP $.
  $}

  $( Closed form of ~ nfim and ~ nfimd .  (Contributed by BJ, 20-Oct-2021.)
     Eliminate curried form, former name nfimt2.  (Revised by Wolf Lammen,
     6-Jul-2022.) $)
  nfimt $p |- ( ( F/ x ph /\ F/ x ps ) -> F/ x ( ph -> ps ) ) $=
    ( wnf wa simpl simpr nfimd ) ACDZBCDZEABCIJFIJGH $.

  ${
    nfim.1 $e |- F/ x ph $.
    nfim.2 $e |- F/ x ps $.
    $( If ` x ` is not free in ` ph ` and ` ps ` , then it is not free in
       ` ( ph -> ps ) ` .  Inference associated with ~ nfimt .  (Contributed by
       Mario Carneiro, 11-Aug-2016.)  (Proof shortened by Wolf Lammen,
       2-Jan-2018.) ~ df-nf changed.  (Revised by Wolf Lammen, 17-Sep-2021.) $)
    nfim $p |- F/ x ( ph -> ps ) $=
      ( wnf wi nfimt mp2an ) ACFBCFABGCFDEABCHI $.
  $}

  ${
    nfand.1 $e |- ( ph -> F/ x ps ) $.
    nfand.2 $e |- ( ph -> F/ x ch ) $.
    $( If in a context ` x ` is not free in ` ps ` and ` ch ` , then it is not
       free in ` ( ps /\ ch ) ` .  (Contributed by Mario Carneiro,
       7-Oct-2016.) $)
    nfand $p |- ( ph -> F/ x ( ps /\ ch ) ) $=
      ( wa wn wi df-an nfnd nfimd nfxfrd ) BCGBCHZIZHADBCJAODABNDEACDFKLKM $.

    nfand.3 $e |- ( ph -> F/ x th ) $.
    $( Deduction form of bound-variable hypothesis builder ~ nf3an .
       (Contributed by NM, 17-Feb-2013.)  (Revised by Mario Carneiro,
       16-Oct-2016.) $)
    nf3and $p |- ( ph -> F/ x ( ps /\ ch /\ th ) ) $=
      ( w3a wa df-3an nfand nfxfrd ) BCDIBCJZDJAEBCDKANDEABCEFGLHLM $.
  $}

  ${
    nfan.1 $e |- F/ x ph $.
    nfan.2 $e |- F/ x ps $.
    $( If ` x ` is not free in ` ph ` and ` ps ` , then it is not free in
       ` ( ph /\ ps ) ` .  (Contributed by Mario Carneiro, 11-Aug-2016.)
       (Proof shortened by Wolf Lammen, 13-Jan-2018.)  (Proof shortened by Wolf
       Lammen, 9-Oct-2021.) $)
    nfan $p |- F/ x ( ph /\ ps ) $=
      ( wa wnf wtru a1i nfand mptru ) ABFCGHABCACGHDIBCGHEIJK $.

    $( If ` x ` is not free in ` ph ` and ` ps ` , then it is not free in
       ` ( ph -/\ ps ) ` .  (Contributed by Scott Fenton, 2-Jan-2018.) $)
    nfnan $p |- F/ x ( ph -/\ ps ) $=
      ( wnan wa wn df-nan nfan nfn nfxfr ) ABFABGZHCABIMCABCDEJKL $.

    nfan.3 $e |- F/ x ch $.
    $( If ` x ` is not free in ` ph ` , ` ps ` , and ` ch ` , then it is not
       free in ` ( ph /\ ps /\ ch ) ` .  (Contributed by Mario Carneiro,
       11-Aug-2016.) $)
    nf3an $p |- F/ x ( ph /\ ps /\ ch ) $=
      ( w3a wa df-3an nfan nfxfr ) ABCHABIZCIDABCJMCDABDEFKGKL $.
  $}

  ${
    nfbid.1 $e |- ( ph -> F/ x ps ) $.
    nfbid.2 $e |- ( ph -> F/ x ch ) $.
    $( If in a context ` x ` is not free in ` ps ` and ` ch ` , then it is not
       free in ` ( ps <-> ch ) ` .  (Contributed by Mario Carneiro,
       24-Sep-2016.)  (Proof shortened by Wolf Lammen, 29-Dec-2017.) $)
    nfbid $p |- ( ph -> F/ x ( ps <-> ch ) ) $=
      ( wb wi wa dfbi2 nfimd nfand nfxfrd ) BCGBCHZCBHZIADBCJANODABCDEFKACBDFEK
      LM $.
  $}

  ${
    nf.1 $e |- F/ x ph $.
    nf.2 $e |- F/ x ps $.
    $( If ` x ` is not free in ` ph ` and ` ps ` , then it is not free in
       ` ( ph <-> ps ) ` .  (Contributed by NM, 26-May-1993.)  (Revised by
       Mario Carneiro, 11-Aug-2016.)  (Proof shortened by Wolf Lammen,
       2-Jan-2018.) $)
    nfbi $p |- F/ x ( ph <-> ps ) $=
      ( wb wnf wtru a1i nfbid mptru ) ABFCGHABCACGHDIBCGHEIJK $.

    $( If ` x ` is not free in ` ph ` and ` ps ` , then it is not free in
       ` ( ph \/ ps ) ` .  (Contributed by NM, 5-Aug-1993.)  (Revised by Mario
       Carneiro, 11-Aug-2016.) $)
    nfor $p |- F/ x ( ph \/ ps ) $=
      ( wo wn wi df-or nfn nfim nfxfr ) ABFAGZBHCABIMBCACDJEKL $.

    nf.3 $e |- F/ x ch $.
    $( If ` x ` is not free in ` ph ` , ` ps ` , and ` ch ` , then it is not
       free in ` ( ph \/ ps \/ ch ) ` .  (Contributed by Mario Carneiro,
       11-Aug-2016.) $)
    nf3or $p |- F/ x ( ph \/ ps \/ ch ) $=
      ( w3o wo df-3or nfor nfxfr ) ABCHABIZCIDABCJMCDABDEFKGKL $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Axiom scheme ax-5 (Distinctness) - first use of $d
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    $d x ph $.
    $( Axiom of Distinctness.  This axiom quantifies a variable over a formula
       in which it does not occur.  Axiom C5 in [Megill] p. 444 (p. 11 of the
       preprint).  Also appears as Axiom B6 (p. 75) of system S2 of [Tarski]
       p. 77 and Axiom C5-1 of [Monk2] p. 113.

       (See comments in ~ ax5ALT about the logical redundancy of ~ ax-5 in the
       presence of our obsolete axioms.)

       This axiom essentially says that if ` x ` does not occur in ` ph ` ,
       i.e. ` ph ` does not depend on ` x ` in any way, then we can add the
       quantifier ` A. x ` to ` ph ` with no further assumptions.  By ~ sp , we
       can also remove the quantifier (unconditionally).  (Contributed by NM,
       10-Jan-1993.) $)
    ax-5 $a |- ( ph -> A. x ph ) $.
  $}

  ${
    $d x ps $.
    $( Version of ~ ax-5 with antecedent.  Useful in proofs of deduction
       versions of bound-variable hypothesis builders.  (Contributed by NM,
       1-Mar-2013.) $)
    ax5d $p |- ( ph -> ( ps -> A. x ps ) ) $=
      ( wal wi ax-5 a1i ) BBCDEABCFG $.
  $}

  ${
    $d x ph $.
    $( A rephrasing of ~ ax-5 using the existential quantifier.  (Contributed
       by Wolf Lammen, 4-Dec-2017.) $)
    ax5e $p |- ( E. x ph -> ph ) $=
      ( wex wi wn wal ax-5 eximal mpbir ) ABCADAEZJBFDJBGAABHI $.
  $}

  ${
    $d x ph $.
    $( If a formula holds for some value of a variable not occurring in it,
       then it holds for all values of that variable.  (Contributed by BJ,
       28-Dec-2020.) $)
    ax5ea $p |- ( E. x ph -> A. x ph ) $=
      ( wex wal ax5e ax-5 syl ) ABCAABDABEABFG $.
  $}

  ${
    $d x ph $.
    $( If ` x ` is not present in ` ph ` , then ` x ` is not free in ` ph ` .
       (Contributed by Mario Carneiro, 11-Aug-2016.)  Definition change.
       (Revised by Wolf Lammen, 12-Sep-2021.) $)
    nfv $p |- F/ x ph $=
      ( ax5ea nfi ) ABABCD $.
  $}

  ${
    $d x ps $.
    $( ~ nfv with antecedent.  Useful in proofs of deduction versions of
       bound-variable hypothesis builders such as ~ nfimd .  (Contributed by
       Mario Carneiro, 6-Oct-2016.) $)
    nfvd $p |- ( ph -> F/ x ps ) $=
      ( wnf nfv a1i ) BCDABCEF $.
  $}

  ${
    $d x ph $.
    alimdv.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Deduction form of Theorem 19.20 of [Margaris] p. 90, see ~ alim .
       (Contributed by NM, 3-Apr-1994.) $)
    alimdv $p |- ( ph -> ( A. x ps -> A. x ch ) ) $=
      ( ax-5 alimdh ) ABCDADFEG $.

    $( Deduction form of Theorem 19.22 of [Margaris] p. 90, see ~ exim .
       (Contributed by NM, 27-Apr-1994.) $)
    eximdv $p |- ( ph -> ( E. x ps -> E. x ch ) ) $=
      ( ax-5 eximdh ) ABCDADFEG $.
  $}

  ${
    $d x ph $.  $d y ph $.
    2alimdv.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Deduction form of Theorem 19.20 of [Margaris] p. 90 with two
       quantifiers, see ~ alim .  (Contributed by NM, 27-Apr-2004.) $)
    2alimdv $p |- ( ph -> ( A. x A. y ps -> A. x A. y ch ) ) $=
      ( wal alimdv ) ABEGCEGDABCEFHH $.

    $( Deduction form of Theorem 19.22 of [Margaris] p. 90 with two
       quantifiers, see ~ exim .  (Contributed by NM, 3-Aug-1995.) $)
    2eximdv $p |- ( ph -> ( E. x E. y ps -> E. x E. y ch ) ) $=
      ( wex eximdv ) ABEGCEGDABCEFHH $.
  $}

  ${
    $d x ph $.
    albidv.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Formula-building rule for universal quantifier (deduction form).
       (Contributed by NM, 26-May-1993.) $)
    albidv $p |- ( ph -> ( A. x ps <-> A. x ch ) ) $=
      ( ax-5 albidh ) ABCDADFEG $.

    $( Formula-building rule for existential quantifier (deduction form).
       (Contributed by NM, 26-May-1993.) $)
    exbidv $p |- ( ph -> ( E. x ps <-> E. x ch ) ) $=
      ( ax-5 exbidh ) ABCDADFEG $.

    $( An equality theorem for nonfreeness.  See ~ nfbidf for a version without
       disjoint variable condition but requiring more axioms.  (Contributed by
       Mario Carneiro, 4-Oct-2016.)  Remove dependency on ~ ax-6 , ~ ax-7 ,
       ~ ax-12 by adapting proof of ~ nfbidf .  (Revised by BJ,
       25-Sep-2022.) $)
    nfbidv $p |- ( ph -> ( F/ x ps <-> F/ x ch ) ) $=
      ( wex wal wi wnf exbidv albidv imbi12d df-nf 3bitr4g ) ABDFZBDGZHCDFZCDGZ
      HBDICDIAOQPRABCDEJABCDEKLBDMCDMN $.
  $}

  ${
    $d x ph $.  $d y ph $.
    2albidv.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Formula-building rule for two universal quantifiers (deduction form).
       (Contributed by NM, 4-Mar-1997.) $)
    2albidv $p |- ( ph -> ( A. x A. y ps <-> A. x A. y ch ) ) $=
      ( wal albidv ) ABEGCEGDABCEFHH $.

    $( Formula-building rule for two existential quantifiers (deduction form).
       (Contributed by NM, 1-May-1995.) $)
    2exbidv $p |- ( ph -> ( E. x E. y ps <-> E. x E. y ch ) ) $=
      ( wex exbidv ) ABEGCEGDABCEFHH $.
  $}

  ${
    $d x ph $.  $d y ph $.  $d z ph $.
    3exbidv.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Formula-building rule for three existential quantifiers (deduction
       form).  (Contributed by NM, 1-May-1995.) $)
    3exbidv $p |- ( ph -> ( E. x E. y E. z ps <-> E. x E. y E. z ch ) ) $=
      ( wex exbidv 2exbidv ) ABFHCFHDEABCFGIJ $.
  $}

  ${
    $d x ph $.  $d y ph $.  $d z ph $.  $d w ph $.
    4exbidv.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Formula-building rule for four existential quantifiers (deduction form).
       (Contributed by NM, 3-Aug-1995.) $)
    4exbidv $p |- ( ph ->
                     ( E. x E. y E. z E. w ps <-> E. x E. y E. z E. w ch ) ) $=
      ( wex 2exbidv ) ABGIFICGIFIDEABCFGHJJ $.
  $}

  ${
    $d x ph $.
    alrimiv.1 $e |- ( ph -> ps ) $.
    $( Inference form of Theorem 19.21 of [Margaris] p. 90.  See ~ 19.21 and
       ~ 19.21v .  (Contributed by NM, 21-Jun-1993.) $)
    alrimiv $p |- ( ph -> A. x ps ) $=
      ( ax-5 alrimih ) ABCACEDF $.
  $}

  ${
    $d x ph $.  $d y ph $.
    alrimivv.1 $e |- ( ph -> ps ) $.
    $( Inference form of Theorem 19.21 of [Margaris] p. 90.  See ~ 19.21 and
       ~ 19.21v .  (Contributed by NM, 31-Jul-1995.) $)
    alrimivv $p |- ( ph -> A. x A. y ps ) $=
      ( wal alrimiv ) ABDFCABDEGG $.
  $}

  ${
    $d x ph $.  $d x ps $.
    alrimdv.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Deduction form of Theorem 19.21 of [Margaris] p. 90.  See ~ 19.21 and
       ~ 19.21v .  (Contributed by NM, 10-Feb-1997.) $)
    alrimdv $p |- ( ph -> ( ps -> A. x ch ) ) $=
      ( ax-5 alrimdh ) ABCDADFBDFEG $.
  $}

  ${
    $d x ps $.
    exlimiv.1 $e |- ( ph -> ps ) $.
    $( Inference form of Theorem 19.23 of [Margaris] p. 90, see ~ 19.23 .

       See ~ exlimi for a more general version requiring more axioms.

       This inference, along with its many variants such as ~ rexlimdv , is
       used to implement a metatheorem called "Rule C" that is given in many
       logic textbooks.  See, for example, Rule C in [Mendelson] p. 81, Rule C
       in [Margaris] p. 40, or Rule C in Hirst and Hirst's _A Primer for Logic
       and Proof_ p. 59 (PDF p. 65) at
       ~ http://www.appstate.edu/~~hirstjl/primer/hirst.pdf .  In informal
       proofs, the statement "Let ` C ` be an element such that..." almost
       always means an implicit application of Rule C.

       In essence, Rule C states that if we can prove that some element ` x `
       exists satisfying a wff, i.e. ` E. x ph ( x ) ` where ` ph ( x ) ` has
       ` x ` free, then we can use ` ph ( C ) ` as a hypothesis for the proof
       where ` C ` is a new (fictitious) constant not appearing previously in
       the proof, nor in any axioms used, nor in the theorem to be proved.  The
       purpose of Rule C is to get rid of the existential quantifier.

       We cannot do this in Metamath directly.  Instead, we use the original
       ` ph ` (containing ` x ` ) as an antecedent for the main part of the
       proof.  We eventually arrive at ` ( ph -> ps ) ` where ` ps ` is the
       theorem to be proved and does not contain ` x ` .  Then we apply
       ~ exlimiv to arrive at ` ( E. x ph -> ps ) ` .  Finally, we separately
       prove ` E. x ph ` and detach it with modus ponens ~ ax-mp to arrive at
       the final theorem ` ps ` , see ~ exlimiiv .  (Contributed by NM,
       21-Jun-1993.)  Remove dependencies on ~ ax-6 and ~ ax-8 .  (Revised by
       Wolf Lammen, 4-Dec-2017.) $)
    exlimiv $p |- ( E. x ph -> ps ) $=
      ( wex eximi ax5e syl ) ACEBCEBABCDFBCGH $.

    exlimiiv.2 $e |- E. x ph $.
    $( Inference (Rule C) associated with ~ exlimiv .  (Contributed by BJ,
       19-Dec-2020.) $)
    exlimiiv $p |- ps $=
      ( wex exlimiv ax-mp ) ACFBEABCDGH $.
  $}

  ${
    $d x ps $.  $d y ps $.
    exlimivv.1 $e |- ( ph -> ps ) $.
    $( Inference form of Theorem 19.23 of [Margaris] p. 90, see ~ 19.23 .
       (Contributed by NM, 1-Aug-1995.) $)
    exlimivv $p |- ( E. x E. y ph -> ps ) $=
      ( wex exlimiv ) ADFBCABDEGG $.
  $}

  ${
    $d x ch $.  $d x ph $.
    exlimdv.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Deduction form of Theorem 19.23 of [Margaris] p. 90, see ~ 19.23 .
       (Contributed by NM, 27-Apr-1994.)  Remove dependencies on ~ ax-6 ,
       ~ ax-7 .  (Revised by Wolf Lammen, 4-Dec-2017.) $)
    exlimdv $p |- ( ph -> ( E. x ps -> ch ) ) $=
      ( wex eximdv ax5e syl6 ) ABDFCDFCABCDEGCDHI $.
  $}

  ${
    $d x ch $.  $d x ph $.  $d y ch $.  $d y ph $.
    exlimdvv.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Deduction form of Theorem 19.23 of [Margaris] p. 90, see ~ 19.23 .
       (Contributed by NM, 31-Jul-1995.) $)
    exlimdvv $p |- ( ph -> ( E. x E. y ps -> ch ) ) $=
      ( wex exlimdv ) ABEGCDABCEFHH $.
  $}

  ${
    $d x ch $.  $d x ph $.
    exlimddv.1 $e |- ( ph -> E. x ps ) $.
    exlimddv.2 $e |- ( ( ph /\ ps ) -> ch ) $.
    $( Existential elimination rule of natural deduction (Rule C, explained in
       ~ exlimiv ).  (Contributed by Mario Carneiro, 15-Jun-2016.) $)
    exlimddv $p |- ( ph -> ch ) $=
      ( wex ex exlimdv mpd ) ABDGCEABCDABCFHIJ $.
  $}

  ${
    $d x ph $.
    nexdv.1 $e |- ( ph -> -. ps ) $.
    $( Deduction for generalization rule for negated wff.  (Contributed by NM,
       5-Aug-1993.)  Reduce dependencies on axioms.  (Revised by Wolf Lammen,
       13-Jul-2020.)  (Proof shortened by Wolf Lammen, 10-Oct-2021.) $)
    nexdv $p |- ( ph -> -. E. x ps ) $=
      ( ax-5 nexdh ) ABCACEDF $.
  $}

  ${
    $d x ph $.  $d y ph $.
    $( Quantification of two variables over a formula in which they do not
       occur.  (Contributed by Alan Sare, 12-Apr-2011.) $)
    2ax5 $p |- ( ph -> A. x A. y ph ) $=
      ( id alrimivv ) AABCADE $.
  $}

  ${
    $d x ph $.
    $( Version of ~ stdpc5 with a disjoint variable condition, requiring fewer
       axioms.  (Contributed by BJ, 7-Mar-2020.)  Revised to shorten ~ 19.21v .
       (Revised by Wolf Lammen, 12-Jul-2020.) $)
    stdpc5v $p |- ( A. x ( ph -> ps ) -> ( ph -> A. x ps ) ) $=
      ( wal wi ax-5 alim syl5 ) AACDABECDBCDACFABCGH $.

    $( Version of ~ 19.21 with a disjoint variable condition, requiring fewer
       axioms.

       _Notational convention_:  We sometimes suffix with "v" the label of a
       theorem using a distinct variable ("dv") condition instead of a
       non-freeness hypothesis such as ` F/ x ph ` .  Conversely, we sometimes
       suffix with "f" the label of a theorem introducing such a non-freeness
       hypothesis ("f" stands for "not free in", see ~ df-nf ) instead of a
       disjoint variable condition.  For instance, ~ 19.21v versus ~ 19.21 and
       ~ vtoclf versus ~ vtocl .  Note that "not free in" is less restrictive
       than "does not occur in".  Note that the version with a disjoint
       variable condition is easily proved from the version with the
       corresponding non-freeness hypothesis, by using ~ nfv .  However, the dv
       version can often be proved from fewer axioms.  (Contributed by NM,
       21-Jun-1993.)  Reduce dependencies on axioms.  (Revised by Wolf Lammen,
       2-Jan-2020.)  (Proof shortened by Wolf Lammen, 12-Jul-2020.) $)
    19.21v $p |- ( A. x ( ph -> ps ) <-> ( ph -> A. x ps ) ) $=
      ( wi wal stdpc5v wex ax5e imim1i 19.38 syl impbii ) ABDCEZABCEZDZABCFOACG
      ZNDMPANACHIABCJKL $.
    $( $j usage '19.21v' avoids 'ax-6' 'ax-7' 'ax-12'; $)
  $}

  ${
    $d x ph $.
    $( Version of ~ 19.32 with a disjoint variable condition, requiring fewer
       axioms.  (Contributed by BJ, 7-Mar-2020.) $)
    19.32v $p |- ( A. x ( ph \/ ps ) <-> ( ph \/ A. x ps ) ) $=
      ( wn wi wal wo 19.21v df-or albii 3bitr4i ) ADZBEZCFLBCFZEABGZCFANGLBCHOM
      CABIJANIK $.
    $( $j usage '19.32v' avoids 'ax-6' 'ax-7' 'ax-12'; $)
  $}

  ${
    $d x ps $.
    $( Version of ~ 19.31 with a disjoint variable condition, requiring fewer
       axioms.  (Contributed by BJ, 7-Mar-2020.) $)
    19.31v $p |- ( A. x ( ph \/ ps ) <-> ( A. x ph \/ ps ) ) $=
      ( wo wal 19.32v orcom albii 3bitr4i ) BADZCEBACEZDABDZCEKBDBACFLJCABGHKBG
      I $.
    $( $j usage '19.31v' avoids 'ax-6' 'ax-7' 'ax-12'; $)
  $}

  ${
    $d x ps $.
    $( Version of ~ 19.23 with a disjoint variable condition instead of a
       non-freeness hypothesis.  (Contributed by NM, 28-Jun-1998.)  Reduce
       dependencies on axioms.  (Revised by Wolf Lammen, 11-Jan-2020.)  Remove
       dependency on ~ ax-6 .  (Revised by Rohan Ridenour, 15-Apr-2022.) $)
    19.23v $p |- ( A. x ( ph -> ps ) <-> ( E. x ph -> ps ) ) $=
      ( wi wal wex exim ax5e syl6 ax-5 imim2i 19.38 syl impbii ) ABDCEZACFZBDZO
      PBCFBABCGBCHIQPBCEZDOBRPBCJKABCLMN $.
    $( $j usage '19.23v' avoids 'ax-6' 'ax-7' 'ax-12'; $)
  $}

  ${
    $d x ps $.  $d y ps $.
    $( Theorem ~ 19.23v extended to two variables.  (Contributed by NM,
       10-Aug-2004.) $)
    19.23vv $p |- ( A. x A. y ( ph -> ps ) <-> ( E. x E. y ph -> ps ) ) $=
      ( wi wal wex 19.23v albii bitri ) ABEDFZCFADGZBEZCFLCGBEKMCABDHILBCHJ $.
  $}

  ${
    $d ph y $.  $d ps x $.  $d x y $.
    $( Version of ~ pm11.53 with a disjoint variable condition, requiring fewer
       axioms.  (Contributed by BJ, 7-Mar-2020.) $)
    pm11.53v $p |- ( A. x A. y ( ph -> ps ) <-> ( E. x ph -> A. y ps ) ) $=
      ( wi wal wex 19.21v albii 19.23v bitri ) ABEDFZCFABDFZEZCFACGMELNCABDHIAM
      CJK $.
  $}

  ${
    $d x ps $.
    $( One direction of ~ 19.36v that can be proven without ~ ax-6 .
       (Contributed by Rohan Ridenour, 16-Apr-2022.) $)
    19.36imv $p |- ( E. x ( ph -> ps ) -> ( A. x ph -> ps ) ) $=
      ( wi wex wal 19.35 biimpi ax5e syl6 ) ABDCEZACFZBCEZBKLMDABCGHBCIJ $.
  $}

  ${
    $d x ps $.
    19.36iv.1 $e |- E. x ( ph -> ps ) $.
    $( Inference associated with ~ 19.36v .  Version of ~ 19.36i with a
       disjoint variable condition.  (Contributed by NM, 5-Aug-1993.)  Reduce
       dependencies on axioms.  (Revised by Wolf Lammen, 17-Jan-2020.)  Remove
       dependency on ~ ax-6 .  (Revised by Rohan Ridenour, 15-Apr-2022.) $)
    19.36iv $p |- ( A. x ph -> ps ) $=
      ( wi wex wal 19.36imv ax-mp ) ABECFACGBEDABCHI $.
  $}

  ${
    $d x ph $.
    $( One direction of ~ 19.37v that can be proven without ~ ax-6 .
       (Contributed by Rohan Ridenour, 16-Apr-2022.) $)
    19.37imv $p |- ( E. x ( ph -> ps ) -> ( ph -> E. x ps ) ) $=
      ( wal wi wex ax-5 19.35 biimpi syl5 ) AACDZABECFZBCFZACGLKMEABCHIJ $.
  $}

  ${
    $d x ph $.
    19.37iv.1 $e |- E. x ( ph -> ps ) $.
    $( Inference associated with ~ 19.37v .  (Contributed by NM, 5-Aug-1993.)
       Remove dependency on ~ ax-6 .  (Revised by Rohan Ridenour,
       15-Apr-2022.) $)
    19.37iv $p |- ( ph -> E. x ps ) $=
      ( wi wex 19.37imv ax-mp ) ABECFABCFEDABCGH $.
  $}

  ${
    $d x ps $.
    $( Version of ~ 19.41 with a disjoint variable condition, requiring fewer
       axioms.  (Contributed by NM, 21-Jun-1993.)  Remove dependency on
       ~ ax-6 .  (Revised by Rohan Ridenour, 15-Apr-2022.) $)
    19.41v $p |- ( E. x ( ph /\ ps ) <-> ( E. x ph /\ ps ) ) $=
      ( wa wex 19.40 ax5e anim2i syl pm3.21 eximdv impcom impbii ) ABDZCEZACEZB
      DZOPBCEZDQABCFRBPBCGHIBPOBANCBAJKLM $.
  $}

  ${
    $d x ps $.  $d y ps $.
    $( Version of ~ 19.41 with two quantifiers and a disjoint variable
       condition requiring fewer axioms.  (Contributed by NM, 30-Apr-1995.) $)
    19.41vv $p |- ( E. x E. y ( ph /\ ps ) <-> ( E. x E. y ph /\ ps ) ) $=
      ( wa wex 19.41v exbii bitri ) ABEDFZCFADFZBEZCFKCFBEJLCABDGHKBCGI $.
  $}

  ${
    $d x ps $.  $d y ps $.  $d z ps $.
    $( Version of ~ 19.41 with three quantifiers and a disjoint variable
       condition requiring fewer axioms.  (Contributed by NM, 30-Apr-1995.) $)
    19.41vvv $p |- ( E. x E. y E. z ( ph /\ ps ) <->
                     ( E. x E. y E. z ph /\ ps ) ) $=
      ( wa wex 19.41vv exbii 19.41v bitri ) ABFEGDGZCGAEGDGZBFZCGMCGBFLNCABDEHI
      MBCJK $.
  $}

  ${
    $d w ps $.  $d x ps $.  $d y ps $.  $d z ps $.
    $( Version of ~ 19.41 with four quantifiers and a disjoint variable
       condition requiring fewer axioms.  (Contributed by FL, 14-Jul-2007.) $)
    19.41vvvv $p |- ( E. w E. x E. y E. z ( ph /\ ps ) <->
                     ( E. w E. x E. y E. z ph /\ ps ) ) $=
      ( wa wex 19.41vvv exbii 19.41v bitri ) ABGEHDHCHZFHAEHDHCHZBGZFHNFHBGMOFA
      BCDEIJNBFKL $.
  $}

  ${
    $d x ph $.
    $( Version of ~ 19.42 with a disjoint variable condition requiring fewer
       axioms.  (Contributed by NM, 21-Jun-1993.) $)
    19.42v $p |- ( E. x ( ph /\ ps ) <-> ( ph /\ E. x ps ) ) $=
      ( wa wex 19.41v exancom ancom 3bitr4i ) BADCEBCEZADABDCEAJDBACFABCGAJHI
      $.
  $}

  ${
    $d y ph $.
    $( Distribution of existential quantifiers.  See also ~ exdistrv .
       (Contributed by NM, 9-Mar-1995.) $)
    exdistr $p |- ( E. x E. y ( ph /\ ps ) <-> E. x ( ph /\ E. y ps ) ) $=
      ( wa wex 19.42v exbii ) ABEDFABDFECABDGH $.
  $}

  ${
    $d y ph $.  $d x ps $.  $d x y $.
    $( Distribute a pair of existential quantifiers (over disjoint variables)
       over a conjunction.  Combination of ~ 19.41v and ~ 19.42v .  For a
       version with fewer disjoint variable conditions but requiring more
       axioms, see ~ eeanv .  (Contributed by BJ, 30-Sep-2022.) $)
    exdistrv $p |- ( E. x E. y ( ph /\ ps ) <-> ( E. x ph /\ E. y ps ) ) $=
      ( wa wex exdistr 19.41v bitri ) ABEDFCFABDFZECFACFJEABCDGAJCHI $.
  $}

  ${
    $d w ph $.  $d z ph $.  $d y ps $.  $d x ps $.  $d w y $.  $d y z $.
    $d w x $.  $d x z $.
    $( Distribute two pairs of existential quantifiers (over disjoint
       variables) over a conjunction.  For a version with fewer disjoint
       variable conditions but requiring more axioms, see ~ ee4anv .
       (Contributed by BJ, 5-Jan-2023.) $)
    4exdistrv $p |- ( E. x E. z E. y E. w ( ph /\ ps ) <->
                                          ( E. x E. y ph /\ E. z E. w ps ) ) $=
      ( wa wex exdistrv 2exbii bitri ) ABGFHDHZEHCHADHZBFHZGZEHCHMCHNEHGLOCEABD
      FIJMNCEIK $.
  $}

  ${
    $d x ph $.  $d y ph $.
    $( Version of ~ 19.42 with two quantifiers and a disjoint variable
       condition requiring fewer axioms.  (Contributed by NM, 16-Mar-1995.) $)
    19.42vv $p |- ( E. x E. y ( ph /\ ps ) <-> ( ph /\ E. x E. y ps ) ) $=
      ( wa wex exdistr 19.42v bitri ) ABEDFCFABDFZECFAJCFEABCDGAJCHI $.
  $}

  ${
    $d x ph $.  $d y ph $.  $d z ph $.
    $( Version of ~ 19.42 with three quantifiers and a disjoint variable
       condition requiring fewer axioms.  (Contributed by NM, 21-Sep-2011.) $)
    19.42vvv $p |- ( E. x E. y E. z ( ph /\ ps )
                       <-> ( ph /\ E. x E. y E. z ps ) ) $=
      ( wa wex 19.42vv exbii 19.42v bitri ) ABFEGDGZCGABEGDGZFZCGAMCGFLNCABDEHI
      AMCJK $.
  $}

  ${
    $d y ph $.  $d z ph $.
    $( Distribution of existential quantifiers.  (Contributed by NM,
       17-Mar-1995.) $)
    exdistr2 $p |- ( E. x E. y E. z ( ph /\ ps ) <->
                   E. x ( ph /\ E. y E. z ps ) ) $=
      ( wa wex 19.42vv exbii ) ABFEGDGABEGDGFCABDEHI $.
  $}

  ${
    $d y ph $.  $d z ph $.  $d z ps $.
    $( Distribution of existential quantifiers in a triple conjunction.
       (Contributed by NM, 9-Mar-1995.)  (Proof shortened by Andrew Salmon,
       25-May-2011.) $)
    3exdistr $p |- ( E. x E. y E. z ( ph /\ ps /\ ch ) <->
                E. x ( ph /\ E. y ( ps /\ E. z ch ) ) ) $=
      ( w3a wex wa 3anass 2exbii 19.42vv exdistr anbi2i 3bitri exbii ) ABCGZFHE
      HZABCFHIEHZIZDRABCIZIZFHEHAUAFHEHZITQUBEFABCJKAUAEFLUCSABCEFMNOP $.
  $}

  ${
    $d y ph $.  $d z ph $.  $d w ph $.  $d z ps $.  $d w ps $.  $d w ch $.
    $( Distribution of existential quantifiers in a quadruple conjunction.
       (Contributed by NM, 9-Mar-1995.)  (Proof shortened by Wolf Lammen,
       20-Jan-2018.) $)
    4exdistr $p |- ( E. x E. y E. z E. w ( ( ph /\ ps ) /\ ( ch /\ th ) ) <->
                E. x ( ph /\ E. y ( ps /\ E. z ( ch /\ E. w th ) ) ) ) $=
      ( wa wex w3a 19.42v anbi2i df-3an 3bitr4i 3exbii 3exdistr bitri ) ABIZCDI
      ZIHJZGJFJEJABCDHJIZKZGJFJEJABUBGJIFJIEJUAUCEFGSTHJZISUBIUAUCUDUBSCDHLMSTH
      LABUBNOPABUBEFGQR $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Equality predicate (continued)
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  The equality predicate was introduced above in ~ wceq for use by ~ df-tru .
  See the comments in that section.  In this section, we continue with its
  first "real" use.

$)

  $( Extend wff definition to include atomic formulas using the equality
     predicate.

     (Instead of introducing ~ weq as an axiomatic statement, as was done in an
     older version of this database, we introduce it by "proving" a special
     case of set theory's more general ~ wceq .  This lets us avoid overloading
     the ` = ` connective, thus preventing ambiguity that would complicate
     certain Metamath parsers.  However, logically ~ weq is considered to be a
     primitive syntax, even though here it is artificially "derived" from
     ~ wceq .  Note:  To see the proof steps of this syntax proof, type "MM>
     SHOW PROOF weq / ALL" in the Metamath program.)  (Contributed by NM,
     24-Jan-2006.) $)
  weq $p wff x = y $=
    ( cv wceq ) ACBCD $.

  $( Obsolete as of 12-Aug-2023.  Use ~ alinexa or ~ sbn instead.  Lemma used
     in proofs of substitution properties.  (Contributed by NM, 10-May-1993.)
     (Proof modificatio is discouraged.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  equs3OLD $p |- ( E. x ( x = y /\ ph ) <-> -. A. x ( x = y -> -. ph ) ) $=
    ( weq wn wi wal wa wex alinexa con2bii ) BCDZAEFBGLAHBILABJK $.

  ${
    speimfw.2 $e |- ( x = y -> ( ph -> ps ) ) $.
    $( Specialization, with additional weakening (compared to ~ 19.2 ) to allow
       bundling of ` x ` and ` y ` .  Uses only Tarski's FOL axiom schemes.
       (Contributed by NM, 23-Apr-2017.)  (Proof shortened by Wolf Lammen,
       5-Dec-2017.) $)
    speimfw $p |- ( -. A. x -. x = y -> ( A. x ph -> E. x ps ) ) $=
      ( weq wn wal wex df-ex biimpri com12 aleximi syl5com ) CDFZGCHGZOCIZACHBC
      IQPOCJKAOBCOABELMN $.

    $( Alternate proof of ~ speimfw (longer compressed proof, but fewer
       essential steps).  (Contributed by NM, 23-Apr-2017.)  (Proof shortened
       by Wolf Lammen, 5-Aug-2017.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    speimfwALT $p |- ( -. A. x -. x = y -> ( A. x ph -> E. x ps ) ) $=
      ( weq wex wi wn wal eximi df-ex 19.35 3imtr3i ) CDFZCGABHZCGOICJIACJBCGHO
      PCEKOCLABCMN $.
  $}

  ${
    spimfw.1 $e |- ( -. ps -> A. x -. ps ) $.
    spimfw.2 $e |- ( x = y -> ( ph -> ps ) ) $.
    $( Specialization, with additional weakening (compared to ~ sp ) to allow
       bundling of ` x ` and ` y ` .  Uses only Tarski's FOL axiom schemes.
       (Contributed by NM, 23-Apr-2017.)  (Proof shortened by Wolf Lammen,
       7-Aug-2017.) $)
    spimfw $p |- ( -. A. x -. x = y -> ( A. x ph -> ps ) ) $=
      ( weq wn wal wex speimfw df-ex con1i sylbi syl6 ) CDGHCIHACIBCJZBABCDFKPB
      HCIZHBBCLBQEMNO $.
  $}

  ${
    ax12i.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    ax12i.2 $e |- ( ps -> A. x ps ) $.
    $( Inference that has ~ ax-12 (without ` A. y ` ) as its conclusion.  Uses
       only Tarski's FOL axiom schemes.  The hypotheses may be eliminable
       without using ~ ax-12 in special cases.  Proof similar to Lemma 16 of
       [Tarski] p. 70.  (Contributed by NM, 20-May-2008.) $)
    ax12i $p |- ( x = y -> ( ph -> A. x ( x = y -> ph ) ) ) $=
      ( weq wi wal biimprcd alrimih syl6bi ) CDGZABMAHZCIEBNCFMABEJKL $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Axiom scheme ax-6 (Existence)
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Axiom of Existence.  One of the equality and substitution axioms of
     predicate calculus with equality.  This axiom tells us is that at least
     one thing exists.  In this form (not requiring that ` x ` and ` y ` be
     distinct) it was used in an axiom system of Tarski (see Axiom B7' in
     footnote 1 of [KalishMontague] p. 81.)  It is equivalent to axiom scheme
     C10' in [Megill] p. 448 (p. 16 of the preprint); the equivalence is
     established by ~ axc10 and ~ ax6fromc10 .  A more convenient form of this
     axiom is ~ ax6e , which has additional remarks.

     Raph Levien proved the independence of this axiom from the other logical
     axioms on 12-Apr-2005.  See item 16 at
     ~ http://us.metamath.org/award2003.html .

     ~ ax-6 can be proved from the weaker version ~ ax6v requiring that the
     variables be distinct; see theorem ~ ax6 .

     ~ ax-6 can also be proved from the Axiom of Separation (in the form that
     we use that axiom, where free variables are not universally quantified).
     See theorem ~ ax6vsep .

     Except by ~ ax6v , this axiom should not be referenced directly.  Instead,
     use theorem ~ ax6 .  (Contributed by NM, 10-Jan-1993.)
     (New usage is discouraged.) $)
  ax-6 $a |- -. A. x -. x = y $.

  ${
    $d x y $.
    $( Axiom B7 of [Tarski] p. 75, which requires that ` x ` and ` y ` be
       distinct.  This trivial proof is intended merely to weaken axiom ~ ax-6
       by adding a distinct variable restriction ($d).  From here on, ~ ax-6
       should not be referenced directly by any other proof, so that theorem
       ~ ax6 will show that we can recover ~ ax-6 from this weaker version if
       it were an axiom (as it is in the case of Tarski).

       Note:  Introducing ` x , y ` as a distinct variable group "out of the
       blue" with no apparent justification has puzzled some people, but it is
       perfectly sound.  All we are doing is adding an additional prerequisite,
       similar to adding an unnecessary logical hypothesis, that results in a
       weakening of the theorem.  This means that any _future_ theorem that
       references ~ ax6v must have a $d specified for the two variables that
       get substituted for ` x ` and ` y ` .  The $d does not propagate
       "backwards", i.e., it does not impose a requirement on ~ ax-6 .

       When possible, use of this theorem rather than ~ ax6 is preferred since
       its derivation is much shorter and requires fewer axioms.  (Contributed
       by NM, 7-Aug-2015.) $)
    ax6v $p |- -. A. x -. x = y $=
      ( ax-6 ) ABC $.
  $}

  ${
    $d x y $.
    $( At least one individual exists.  Weaker version of ~ ax6e .  When
       possible, use of this theorem rather than ~ ax6e is preferred since its
       derivation is much shorter and requires fewer axioms.  (Contributed by
       NM, 3-Aug-2017.) $)
    ax6ev $p |- E. x x = y $=
      ( weq wex wn wal ax6v df-ex mpbir ) ABCZADJEAFEABGJAHI $.
  $}

  ${
    $d x y $.
    exgen.1 $e |- ph $.
    $( Rule of existential generalization, similar to universal generalization
       ~ ax-gen , but valid only if an individual exists.  Its proof requires
       ~ ax-6 in our axiomatization but the equality predicate does not occur
       in its statement.  Some fundamental theorems of predicate calculus can
       be proven from ~ ax-gen , ~ ax-4 and this theorem alone, not requiring
       ~ ax-7 or excessive distinct variable conditions.  (Contributed by Wolf
       Lammen, 12-Nov-2017.)  (Proof shortened by Wolf Lammen, 9-Dec-2017.) $)
    exgen $p |- E. x ph $=
      ( vy weq ax6ev a1i eximii ) BDEZABBDFAICGH $.
  $}

  $( There exists a variable such that ` T. ` holds; that is, there exists a
     variable.  This corresponds under the standard translation to one of the
     formulations of the modal axiom (D), the other being ~ 19.2 .
     (Contributed by Anthony Hart, 13-Sep-2011.)  (Proof shortened by BJ,
     12-May-2019.) $)
  extru $p |- E. x T. $=
    ( wtru tru exgen ) BACD $.

  $( Theorem 19.2 of [Margaris] p. 89.  This corresponds to the axiom (D) of
     modal logic (the other standard formulation being ~ extru ).  Note:  This
     proof is very different from Margaris' because we only have Tarski's FOL
     axiom schemes available at this point.  See the later ~ 19.2g for a more
     conventional proof of a more general result, which uses additional axioms.
     The reverse implication is the defining property of effective nonfreeness
     (see ~ df-nf ).  (Contributed by NM, 2-Aug-2017.)  Remove dependency on
     ~ ax-7 .  (Revised by Wolf Lammen, 4-Dec-2017.) $)
  19.2 $p |- ( A. x ph -> E. x ph ) $=
    ( wi id exgen 19.35i ) AABAACBADEF $.

  ${
    19.2d.1 $e |- ( ph -> A. x ps ) $.
    $( Deduction associated with ~ 19.2 .  (Contributed by BJ, 12-May-2019.) $)
    19.2d $p |- ( ph -> E. x ps ) $=
      ( wal wex 19.2 syl ) ABCEBCFDBCGH $.
  $}

  ${
    19.8w.1 $e |- ( ph -> A. x ph ) $.
    $( Weak version of ~ 19.8a and instance of ~ 19.2d .  (Contributed by NM,
       1-Aug-2017.)  (Proof shortened by Wolf Lammen, 4-Dec-2017.)  (Revised by
       BJ, 31-Mar-2021.) $)
    19.8w $p |- ( ph -> E. x ph ) $=
      ( 19.2d ) AABCD $.
  $}

  ${
    $d x ph $.
    $( Version of ~ 19.8a with a disjoint variable condition, requiring fewer
       axioms.  Converse of ~ ax5e .  (Contributed by BJ, 12-Mar-2020.) $)
    19.8v $p |- ( ph -> E. x ph ) $=
      ( ax-5 19.8w ) ABABCD $.
    $( $j usage '19.8v' avoids 'ax-12'; $)

    $( Version of ~ 19.9 with a disjoint variable condition, requiring fewer
       axioms.  Any formula can be existentially quantified using a variable
       which it does not contain.  See also ~ 19.3v .  (Contributed by NM,
       28-May-1995.)  Remove dependency on ~ ax-7 .  (Revised by Wolf Lammen,
       4-Dec-2017.) $)
    19.9v $p |- ( E. x ph <-> ph ) $=
      ( wex ax5e 19.8v impbii ) ABCAABDABEF $.
    $( $j usage '19.9v' avoids 'ax-12'; $)

    $( Version of ~ 19.3 with a disjoint variable condition, requiring fewer
       axioms.  Any formula can be universally quantified using a variable
       which it does not contain.  See also ~ 19.9v .  (Contributed by Anthony
       Hart, 13-Sep-2011.)  Remove dependency on ~ ax-7 .  (Revised by Wolf
       Lammen, 4-Dec-2017.) $)
    19.3v $p |- ( A. x ph <-> ph ) $=
      ( wal wn wex alex 19.9v con2bii bitr4i ) ABCADZBEZDAABFKAJBGHI $.
    $( $j usage '19.3v' avoids 'ax-12'; $)

    $( Version of ~ sp when ` x ` does not occur in ` ph ` .  Converse of
       ~ ax-5 .  Uses only Tarski's FOL axiom schemes.  (Contributed by NM,
       10-Apr-2017.)  (Proof shortened by Wolf Lammen, 4-Dec-2017.) $)
    spvw $p |- ( A. x ph -> ph ) $=
      ( wal 19.3v biimpi ) ABCAABDE $.
    $( $j usage 'spvw' avoids 'ax-8' 'ax-9' 'ax-10' 'ax-11' 'ax-12' 'ax-13'; $)
  $}

  $( Theorem 19.39 of [Margaris] p. 90.  (Contributed by NM, 12-Mar-1993.) $)
  19.39 $p |- ( ( E. x ph -> E. x ps ) -> E. x ( ph -> ps ) ) $=
    ( wex wi wal 19.2 imim1i 19.35 sylibr ) ACDZBCDZEACFZLEABECDMKLACGHABCIJ $.

  $( Theorem 19.24 of [Margaris] p. 90.  (Contributed by NM, 12-Mar-1993.) $)
  19.24 $p |- ( ( A. x ph -> A. x ps ) -> E. x ( ph -> ps ) ) $=
    ( wal wi wex 19.2 imim2i 19.35 sylibr ) ACDZBCDZEKBCFZEABECFLMKBCGHABCIJ $.

  $( Theorem 19.34 of [Margaris] p. 90.  (Contributed by NM, 12-Mar-1993.) $)
  19.34 $p |- ( ( A. x ph \/ E. x ps ) -> E. x ( ph \/ ps ) ) $=
    ( wal wex wo 19.2 orim1i 19.43 sylibr ) ACDZBCEZFACEZLFABFCEKMLACGHABCIJ $.

  ${
    $d x ps $.
    $( Version of ~ 19.36 with a disjoint variable condition instead of a
       non-freeness hypothesis.  (Contributed by NM, 18-Aug-1993.)  Reduce
       dependencies on axioms.  (Revised by Wolf Lammen, 17-Jan-2020.) $)
    19.36v $p |- ( E. x ( ph -> ps ) <-> ( A. x ph -> ps ) ) $=
      ( wi wex wal 19.35 19.9v imbi2i bitri ) ABDCEACFZBCEZDKBDABCGLBKBCHIJ $.
  $}

  ${
    $d x ps $.  $d y ph $.  $d x y $.
    $( Version of ~ 19.12vv with a disjoint variable condition, requiring fewer
       axioms.  See also ~ 19.12 .  (Contributed by BJ, 18-Mar-2020.) $)
    19.12vvv $p |- ( E. x A. y ( ph -> ps ) <-> A. y E. x ( ph -> ps ) ) $=
      ( wi wal wex 19.21v exbii 19.36v albii bitr2i 3bitri ) ABEZDFZCGABDFZEZCG
      ACFZPEZNCGZDFZOQCABDHIAPCJUARBEZDFSTUBDABCJKRBDHLM $.
  $}

  ${
    $d x ps $.
    $( Version of ~ 19.27 with a disjoint variable condition, requiring fewer
       axioms.  (Contributed by NM, 3-Jun-2004.) $)
    19.27v $p |- ( A. x ( ph /\ ps ) <-> ( A. x ph /\ ps ) ) $=
      ( wa wal 19.26 19.3v anbi2i bitri ) ABDCEACEZBCEZDJBDABCFKBJBCGHI $.
  $}

  ${
    $d x ph $.
    $( Version of ~ 19.28 with a disjoint variable condition, requiring fewer
       axioms.  (Contributed by NM, 25-Mar-2004.) $)
    19.28v $p |- ( A. x ( ph /\ ps ) <-> ( ph /\ A. x ps ) ) $=
      ( wa wal 19.26 19.3v anbi1i bitri ) ABDCEACEZBCEZDAKDABCFJAKACGHI $.
  $}

  ${
    $d x ph $.
    $( Version of ~ 19.37 with a disjoint variable condition, requiring fewer
       axioms.  (Contributed by NM, 21-Jun-1993.) $)
    19.37v $p |- ( E. x ( ph -> ps ) <-> ( ph -> E. x ps ) ) $=
      ( wi wex wal 19.35 19.3v imbi1i bitri ) ABDCEACFZBCEZDALDABCGKALACHIJ $.
  $}

  ${
    $d x ps $.
    $( Version of ~ 19.44 with a disjoint variable condition, requiring fewer
       axioms.  (Contributed by NM, 12-Mar-1993.) $)
    19.44v $p |- ( E. x ( ph \/ ps ) <-> ( E. x ph \/ ps ) ) $=
      ( wo wex 19.43 19.9v orbi2i bitri ) ABDCEACEZBCEZDJBDABCFKBJBCGHI $.
  $}

  ${
    $d x ph $.
    $( Version of ~ 19.45 with a disjoint variable condition, requiring fewer
       axioms.  (Contributed by NM, 12-Mar-1993.) $)
    19.45v $p |- ( E. x ( ph \/ ps ) <-> ( ph \/ E. x ps ) ) $=
      ( wo wex 19.43 19.9v orbi1i bitri ) ABDCEACEZBCEZDAKDABCFJAKACGHI $.
  $}

  ${
    $d x y $.
    spimeh.1 $e |- ( ph -> A. x ph ) $.
    spimeh.2 $e |- ( x = y -> ( ph -> ps ) ) $.
    $( Existential introduction, using implicit substitution.  Compare Lemma 14
       of [Tarski] p. 70.  (Contributed by NM, 7-Aug-1994.)  (Proof shortened
       by Wolf Lammen, 10-Dec-2017.) $)
    spimeh $p |- ( ph -> E. x ps ) $=
      ( wal wex weq wi ax6ev eximii 19.35i syl ) AACGBCHEABCCDIABJCCDKFLMN $.
  $}

  ${
    $d x y $.
    spimw.1 $e |- ( -. ps -> A. x -. ps ) $.
    spimw.2 $e |- ( x = y -> ( ph -> ps ) ) $.
    $( Specialization.  Lemma 8 of [KalishMontague] p. 87.  Uses only Tarski's
       FOL axiom schemes.  (Contributed by NM, 19-Apr-2017.)  (Proof shortened
       by Wolf Lammen, 7-Aug-2017.) $)
    spimw $p |- ( A. x ph -> ps ) $=
      ( weq wn wal wi ax6v spimfw ax-mp ) CDGHCIHACIBJCDKABCDEFLM $.
  $}

  ${
    $d x y $.  $d x ps $.
    spimvw.1 $e |- ( x = y -> ( ph -> ps ) ) $.
    $( Specialization.  Lemma 8 of [KalishMontague] p. 87.  Uses only Tarski's
       FOL axiom schemes.  (Contributed by NM, 9-Apr-2017.) $)
    spimvw $p |- ( A. x ph -> ps ) $=
      ( wn ax-5 spimw ) ABCDBFCGEH $.
  $}

  ${
    $d x y $.  $d x ps $.
    spvv.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Version of ~ spv with a disjoint variable condition, which does not
       require ~ ax-7 , ~ ax-12 , ~ ax-13 .  (Contributed by BJ,
       31-May-2019.) $)
    spvv $p |- ( A. x ph -> ps ) $=
      ( weq biimpd spimvw ) ABCDCDFABEGH $.
  $}

  ${
    $d x y $.  $d y ph $.
    spnfw.1 $e |- ( -. ph -> A. x -. ph ) $.
    $( Weak version of ~ sp .  Uses only Tarski's FOL axiom schemes.
       (Contributed by NM, 1-Aug-2017.)  (Proof shortened by Wolf Lammen,
       13-Aug-2017.) $)
    spnfw $p |- ( A. x ph -> ph ) $=
      ( vy weq idd spimw ) AABDCBDEAFG $.
  $}

  ${
    spfalw.1 $e |- -. ph $.
    $( Version of ~ sp when ` ph ` is false.  Uses only Tarski's FOL axiom
       schemes.  (Contributed by NM, 23-Apr-2017.)  (Proof shortened by Wolf
       Lammen, 25-Dec-2017.) $)
    spfalw $p |- ( A. x ph -> ph ) $=
      ( wn hbth spnfw ) ABADBCEF $.
  $}

  ${
    $d x y $.  $d y ph $.
    $( One direction of the equivalence in ~ exsb is based on fewer axioms.
       (Contributed by Wolf Lammen, 2-Mar-2023.) $)
    exsbim $p |- ( E. y A. x ( x = y -> ph ) -> E. x ph ) $=
      ( weq wi wal wex ax6ev exim mpi exlimiv ) BCDZAEBFZABGZCMLBGNBCHLABIJK $.
  $}

  ${
    $d x y $.
    $( Version of ~ equs4 with a disjoint variable condition, which requires
       fewer axioms.  (Contributed by BJ, 31-May-2019.) $)
    equs4v $p |- ( A. x ( x = y -> ph ) -> E. x ( x = y /\ ph ) ) $=
      ( weq wi wal wex wa ax6ev exintr mpi ) BCDZAEBFLBGLAHBGBCILABJK $.
    $( $j usage 'equs4v' avoids 'ax-5' 'ax-7' 'ax-12' 'ax-13'; $)
  $}

  ${
    $d x y $.  $d x ph $.
    $( If a formula does not contain a variable ` x ` , then it is equivalent
       to the corresponding prototype of substitution with a fresh variable
       (see ~ sb6 ).  (Contributed by BJ, 23-Jul-2023.) $)
    equsv $p |- ( A. x ( x = y -> ph ) <-> ph ) $=
      ( weq wi wal wex 19.23v ax6ev a1bi bitr4i ) BCDZAEBFLBGZAEALABHMABCIJK $.
  $}

  ${
    $d x y $.  $d x ps $.
    equsalvw.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Version of ~ equsalv with a disjoint variable condition, and of ~ equsal
       with two disjoint variable conditions, which requires fewer axioms.  See
       also the dual form ~ equsexvw .  (Contributed by BJ, 31-May-2019.) $)
    equsalvw $p |- ( A. x ( x = y -> ph ) <-> ps ) $=
      ( weq wi wal pm5.74i albii equsv bitri ) CDFZAGZCHMBGZCHBNOCMABEIJBCDKL
      $.
    $( $j usage 'equsalvw' avoids 'ax-7' 'ax-12' 'ax-13'; $)

    $( Version of ~ equsexv with a disjoint variable condition, and of ~ equsex
       with two disjoint variable conditions, which requires fewer axioms.  See
       also the dual form ~ equsalvw .  (Contributed by BJ, 31-May-2019.) $)
    equsexvw $p |- ( E. x ( x = y /\ ph ) <-> ps ) $=
      ( weq wa wex pm5.32i exbii ax6ev 19.41v mpbiran bitri ) CDFZAGZCHOBGZCHZB
      PQCOABEIJROCHBCDKOBCLMN $.
    $( $j usage 'equsexvw' avoids 'ax-7' 'ax-12' 'ax-13'; $)
  $}

  ${
    $d x y $.
    cbvaliw.1 $e |- ( A. x ph -> A. y A. x ph ) $.
    cbvaliw.2 $e |- ( -. ps -> A. x -. ps ) $.
    cbvaliw.3 $e |- ( x = y -> ( ph -> ps ) ) $.
    $( Change bound variable.  Uses only Tarski's FOL axiom schemes.  Part of
       Lemma 7 of [KalishMontague] p. 86.  (Contributed by NM, 19-Apr-2017.) $)
    cbvaliw $p |- ( A. x ph -> A. y ps ) $=
      ( wal spimw alrimih ) ACHBDEABCDFGIJ $.
    $( $j usage 'cbvaliw' avoids 'ax-5' 'ax-7' 'ax-12' 'ax-13'; $)
  $}

  ${
    $d x y $.  $d x ps $.  $d y ph $.
    cbvalivw.1 $e |- ( x = y -> ( ph -> ps ) ) $.
    $( Change bound variable.  Uses only Tarski's FOL axiom schemes.  Part of
       Lemma 7 of [KalishMontague] p. 86.  (Contributed by NM, 9-Apr-2017.) $)
    cbvalivw $p |- ( A. x ph -> A. y ps ) $=
      ( wal spimvw alrimiv ) ACFBDABCDEGH $.
    $( $j usage 'cbvalivw' avoids 'ax-7' 'ax-12' 'ax-13'; $)
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Axiom scheme ax-7 (Equality)
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Axiom of Equality.  One of the equality and substitution axioms of
     predicate calculus with equality.  It states that equality is a
     right-Euclidean binary relation (this is similar, but not identical, to
     being transitive, which is proved as ~ equtr ).  This axiom scheme is a
     sub-scheme of Axiom Scheme B8 of system S2 of [Tarski], p. 75, whose
     general form cannot be represented with our notation.  Also appears as
     Axiom C7 of [Monk2] p. 105 and Axiom Scheme C8' in [Megill] p. 448 (p. 16
     of the preprint).

     The equality symbol was invented in 1557 by Robert Recorde.  He chose a
     pair of parallel lines of the same length because "noe .2. thynges, can be
     moare equalle".

     We prove in ~ ax7 that this axiom can be recovered from its weakened
     version ~ ax7v where ` x ` and ` y ` are assumed to be disjoint variables.
     In particular, the only theorem referencing ~ ax-7 should be ~ ax7v .  See
     the comment of ~ ax7v for more details on these matters.  (Contributed by
     NM, 10-Jan-1993.)  (Revised by BJ, 7-Dec-2020.)  Use ~ ax7 instead.
     (New usage is discouraged.) $)
  ax-7 $a |- ( x = y -> ( x = z -> y = z ) ) $.

  ${
    $d x y $.
    $( Weakened version of ~ ax-7 , with a disjoint variable condition on
       ` x , y ` .  This should be the only proof referencing ~ ax-7 , and it
       should be referenced only by its two weakened versions ~ ax7v1 and
       ~ ax7v2 , from which ~ ax-7 is then rederived as ~ ax7 , which shows
       that either ~ ax7v or the conjunction of ~ ax7v1 and ~ ax7v2 is
       sufficient.

       In ~ ax7v , it is still allowed to substitute the same variable for
       ` x ` and ` z ` , or the same variable for ` y ` and ` z ` .  Therefore,
       ~ ax7v "bundles" (a term coined by Raph Levien) its "principal instance"
       ` ( x = y -> ( x = z -> y = z ) ) ` with ` x , y , z ` distinct, and its
       "degenerate instances" ` ( x = y -> ( x = x -> y = x ) ) ` and
       ` ( x = y -> ( x = y -> y = y ) ) ` with ` x , y ` distinct.  These
       degenerate instances are for instance used in the proofs of ~ equcomiv
       and ~ equid respectively.  (Contributed by BJ, 7-Dec-2020.)  Use ~ ax7
       instead.  (New usage is discouraged.) $)
    ax7v $p |- ( x = y -> ( x = z -> y = z ) ) $=
      ( ax-7 ) ABCD $.
  $}

  ${
    $d x y $.  $d x z $.
    $( First of two weakened versions of ~ ax7v , with an extra disjoint
       variable condition on ` x , z ` , see comments there.  (Contributed by
       BJ, 7-Dec-2020.) $)
    ax7v1 $p |- ( x = y -> ( x = z -> y = z ) ) $=
      ( ax7v ) ABCD $.
  $}

  ${
    $d x y $.  $d y z $.
    $( Second of two weakened versions of ~ ax7v , with an extra disjoint
       variable condition on ` y , z ` , see comments there.  (Contributed by
       BJ, 7-Dec-2020.) $)
    ax7v2 $p |- ( x = y -> ( x = z -> y = z ) ) $=
      ( ax7v ) ABCD $.
  $}

  ${
    $d x y $.
    $( Identity law for equality.  Lemma 2 of [KalishMontague] p. 85.  See also
       Lemma 6 of [Tarski] p. 68.  (Contributed by NM, 1-Apr-2005.)  (Revised
       by NM, 9-Apr-2017.)  (Proof shortened by Wolf Lammen, 22-Aug-2020.) $)
    equid $p |- x = x $=
      ( vy weq ax7v1 pm2.43i ax6ev exlimiiv ) BACZAACZBHIBAADEBAFG $.
  $}

  $( Bound-variable hypothesis builder for ` x = x ` .  This theorem tells us
     that any variable, including ` x ` , is effectively not free in
     ` x = x ` , even though ` x ` is technically free according to the
     traditional definition of free variable.  (Contributed by NM,
     13-Jan-2011.)  (Revised by NM, 21-Aug-2017.) $)
  nfequid $p |- F/ y x = x $=
    ( weq equid nfth ) AACBADE $.

  ${
    $d x y $.
    $( Weaker form of ~ equcomi with a disjoint variable condition on
       ` x , y ` .  This is an intermediate step and ~ equcomi is fully
       recovered later.  (Contributed by BJ, 7-Dec-2020.) $)
    equcomiv $p |- ( x = y -> y = x ) $=
      ( weq equid ax7v2 mpi ) ABCAACBACADABAEF $.
  $}

  ${
    $d x y $.
    $( A commuted form of ~ ax6ev .  (Contributed by BJ, 7-Dec-2020.) $)
    ax6evr $p |- E. x y = x $=
      ( weq ax6ev equcomiv eximii ) ABCBACAABDABEF $.
  $}

  ${
    $d t x $.  $d t y $.  $d t z $.
    $( Proof of ~ ax-7 from ~ ax7v1 and ~ ax7v2 (and earlier axioms), proving
       sufficiency of the conjunction of the latter two weakened versions of
       ~ ax7v , which is itself a weakened version of ~ ax-7 .

       Note that the weakened version of ~ ax-7 obtained by adding a disjoint
       variable condition on ` x , z ` (resp. on ` y , z ` ) does not permit,
       together with the other axioms, to prove reflexivity (resp. symmetry).
       (Contributed by BJ, 7-Dec-2020.) $)
    ax7 $p |- ( x = y -> ( x = z -> y = z ) ) $=
      ( vt weq wa wi ax7v2 ax7v1 imp a1i syl2and ax6evr exlimiiv ex ) ABEZACEZB
      CEZADEZPQFRGDSPDBEZQDCEZRADBHADCHTUAFRGSTUARDBCIJKLDAMNO $.
  $}

  $( Commutative law for equality.  Equality is a symmetric relation.  Lemma 3
     of [KalishMontague] p. 85.  See also Lemma 7 of [Tarski] p. 69.
     (Contributed by NM, 10-Jan-1993.)  (Revised by NM, 9-Apr-2017.) $)
  equcomi $p |- ( x = y -> y = x ) $=
    ( weq equid ax7 mpi ) ABCAACBACADABAEF $.

  $( Commutative law for equality.  Equality is a symmetric relation.
     (Contributed by NM, 20-Aug-1993.) $)
  equcom $p |- ( x = y <-> y = x ) $=
    ( weq equcomi impbii ) ABCBACABDBADE $.

  ${
    equcomd.1 $e |- ( ph -> x = y ) $.
    $( Deduction form of ~ equcom , symmetry of equality.  For the versions for
       classes, see ~ eqcom and ~ eqcomd .  (Contributed by BJ, 6-Oct-2019.) $)
    equcomd $p |- ( ph -> y = x ) $=
      ( weq equcom sylib ) ABCECBEDBCFG $.
  $}

  ${
    equcoms.1 $e |- ( x = y -> ph ) $.
    $( An inference commuting equality in antecedent.  Used to eliminate the
       need for a syllogism.  (Contributed by NM, 10-Jan-1993.) $)
    equcoms $p |- ( y = x -> ph ) $=
      ( weq equcomi syl ) CBEBCEACBFDG $.
  $}

  $( A transitive law for equality.  (Contributed by NM, 23-Aug-1993.) $)
  equtr $p |- ( x = y -> ( y = z -> x = z ) ) $=
    ( weq wi ax7 equcoms ) BCDACDEBABACFG $.

  $( A transitive law for equality.  Lemma L17 in [Megill] p. 446 (p. 14 of the
     preprint).  (Contributed by NM, 23-Aug-1993.) $)
  equtrr $p |- ( x = y -> ( z = x -> z = y ) ) $=
    ( weq equtr com12 ) CADABDCBDCABEF $.

  $( Commuted version of ~ equeucl (equality is left-Euclidean).  (Contributed
     by BJ, 12-Apr-2021.) $)
  equeuclr $p |- ( x = z -> ( y = z -> y = x ) ) $=
    ( weq wi equtrr equcoms ) BCDBADECACABFG $.

  $( Equality is a left-Euclidean binary relation.  (Right-Euclideanness is
     stated in ~ ax-7 .)  Curried (exported) form of ~ equtr2 .  (Contributed
     by BJ, 11-Apr-2021.) $)
  equeucl $p |- ( x = z -> ( y = z -> x = y ) ) $=
    ( weq equeuclr com12 ) BCDACDABDBACEF $.

  $( An equivalence law for equality.  (Contributed by NM, 1-Aug-1993.)  (Proof
     shortened by Wolf Lammen, 10-Dec-2017.) $)
  equequ1 $p |- ( x = y -> ( x = z <-> y = z ) ) $=
    ( weq ax7 equtr impbid ) ABDACDBCDABCEABCFG $.

  $( An equivalence law for equality.  (Contributed by NM, 21-Jun-1993.)
     (Proof shortened by Wolf Lammen, 4-Aug-2017.)  (Proof shortened by BJ,
     12-Apr-2021.) $)
  equequ2 $p |- ( x = y -> ( z = x <-> z = y ) ) $=
    ( weq equtrr equeuclr impbid ) ABDCADCBDABCEACBFG $.

  $( Equality is a left-Euclidean binary relation.  Uncurried (imported) form
     of ~ equeucl .  (Contributed by NM, 12-Aug-1993.)  (Proof shortened by
     Andrew Salmon, 25-May-2011.)  (Proof shortened by BJ, 11-Apr-2021.) $)
  equtr2 $p |- ( ( x = z /\ y = z ) -> x = y ) $=
    ( weq equeucl imp ) ACDBCDABDABCEF $.

  $( One of the two equality axioms of standard predicate calculus, called
     reflexivity of equality.  (The other one is ~ stdpc7 .)  Axiom 6 of
     [Mendelson] p. 95.  Mendelson doesn't say why he prepended the redundant
     quantifier, but it was probably to be compatible with free logic (which is
     valid in the empty domain).  (Contributed by NM, 16-Feb-2005.) $)
  stdpc6 $p |- A. x x = x $=
    ( weq equid ax-gen ) AABAACD $.

  ${
    $d x z $.  $d y z $.
    $( A variable introduction law for equality.  Lemma 15 of [Monk2] p. 109.
       (Contributed by NM, 9-Jan-1993.)  Remove dependencies on ~ ax-10 ,
       ~ ax-13 .  (Revised by Wolf Lammen, 10-Jun-2019.)  Move the quantified
       variable ( ` z ` ) to the left of the equality signs.  (Revised by Wolf
       Lammen, 11-Apr-2021.)  (Proof shortened by Wolf Lammen, 12-Jul-2022.) $)
    equvinv $p |- ( x = y <-> E. z ( z = x /\ z = y ) ) $=
      ( weq wa wex equequ1 equsexvw bicomi ) CADCBDZECFABDZJKCACABGHI $.
    $( $j usage 'equvinv' avoids 'ax-10' 'ax-12' 'ax-13'; $)

    $( A modified version of the forward implication of ~ equvinv adapted to
       common usage.  (Contributed by Wolf Lammen, 8-Sep-2018.) $)
    equvinva $p |- ( x = y -> E. z ( x = z /\ y = z ) ) $=
      ( weq wex wa ax6evr equtr ancrd eximdv mpi ) ABDZBCDZCEACDZMFZCECBGLMOCLM
      NABCHIJK $.
    $( $j usage 'equvinva' avoids 'ax-10' 'ax-12' 'ax-13'; $)

    $( A biconditional form of ~ equvel with disjoint variable conditions and
       proved from Tarski's FOL axiom schemes.  (Contributed by Andrew Salmon,
       2-Jun-2011.)  Reduce axiom usage.  (Revised by Wolf Lammen,
       10-Apr-2021.)  (Proof shortened by Wolf Lammen, 12-Jul-2022.) $)
    equvelv $p |- ( A. z ( z = x -> z = y ) <-> x = y ) $=
      ( weq equequ1 equsalvw ) CBDABDCACABEF $.
    $( $j usage 'equvelv' avoids 'ax-8' 'ax-9' 'ax-10' 'ax-11' 'ax-12'
       'ax-13'; $)
  $}

  $( An equivalence between two ways of expressing ~ ax-13 .  See the comment
     for ~ ax-13 .  (Contributed by NM, 2-May-2017.)  (Proof shortened by Wolf
     Lammen, 26-Feb-2018.)  (Revised by BJ, 15-Sep-2020.) $)
  ax13b $p |- ( ( -. x = y -> ( y = z -> ph ) )
                       <-> ( -. x = y -> ( -. x = z -> ( y = z -> ph ) ) ) ) $=
    ( weq wn wi ax-1 equeuclr con3rr3 imim1d pm2.43 syl6 impbid2 pm5.74i ) BCEZ
    FZCDEZAGZBDEZFZSGZQSUBSUAHQUBRSGSQRUASRTPCBDIJKRALMNO $.
  $( $j usage 'ax13b' avoids 'ax-8' 'ax-9' 'ax-10' 'ax-11' 'ax-12' 'ax-13'; $)

  ${
    $d x y $.
    spfw.1 $e |- ( -. ps -> A. x -. ps ) $.
    spfw.2 $e |- ( A. x ph -> A. y A. x ph ) $.
    spfw.3 $e |- ( -. ph -> A. y -. ph ) $.
    spfw.4 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Weak version of ~ sp .  Uses only Tarski's FOL axiom schemes.  Lemma 9
       of [KalishMontague] p. 87.  This may be the best we can do with minimal
       distinct variable conditions.  (Contributed by NM, 19-Apr-2017.)  (Proof
       shortened by Wolf Lammen, 10-Oct-2021.) $)
    spfw $p |- ( A. x ph -> ph ) $=
      ( wal weq biimpd cbvaliw wi biimprd equcoms spimw syl ) ACIBDIAABCDFECDJZ
      ABHKLBADCGBAMCDRABHNOPQ $.
    $( $j usage 'spfw' avoids 'ax-8' 'ax-9' 'ax-10' 'ax-11' 'ax-12' 'ax-13'; $)
  $}

  ${
    $d x y $.  $d x ps $.  $d y ph $.
    spw.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Weak version of the specialization scheme ~ sp .  Lemma 9 of
       [KalishMontague] p. 87.  While it appears that ~ sp in its general form
       does not follow from Tarski's FOL axiom schemes, from this theorem we
       can prove any _instance_ of ~ sp having mutually distinct setvar
       variables and no wff metavariables (see ~ ax12wdemo for an example of
       the procedure to eliminate the hypothesis).  Other approximations of
       ~ sp are ~ spfw (minimal distinct variable requirements), ~ spnfw (when
       ` x ` is not free in ` -. ph ` ), ~ spvw (when ` x ` does not appear in
       ` ph ` ), ~ sptruw (when ` ph ` is true), and ~ spfalw (when ` ph ` is
       false).  (Contributed by NM, 9-Apr-2017.)  (Proof shortened by Wolf
       Lammen, 27-Feb-2018.) $)
    spw $p |- ( A. x ph -> ph ) $=
      ( wn ax-5 wal spfw ) ABCDBFCGACHDGAFDGEI $.
    $( $j usage 'spw' avoids 'ax-8' 'ax-9' 'ax-10' 'ax-11' 'ax-12' 'ax-13'; $)
  $}

  ${
    $d x y $.
    cbvalw.1 $e |- ( A. x ph -> A. y A. x ph ) $.
    cbvalw.2 $e |- ( -. ps -> A. x -. ps ) $.
    cbvalw.3 $e |- ( A. y ps -> A. x A. y ps ) $.
    cbvalw.4 $e |- ( -. ph -> A. y -. ph ) $.
    cbvalw.5 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Change bound variable.  Uses only Tarski's FOL axiom schemes.
       (Contributed by NM, 9-Apr-2017.) $)
    cbvalw $p |- ( A. x ph <-> A. y ps ) $=
      ( wal weq biimpd cbvaliw wi biimprd equcoms impbii ) ACJBDJABCDEFCDKZABIL
      MBADCGHBANCDRABIOPMQ $.
    $( $j usage 'cbvalw' avoids 'ax-8' 'ax-9' 'ax-10' 'ax-11' 'ax-12'
       'ax-13'; $)
  $}

  ${
    $d x y $.  $d x ps $.  $d y ph $.
    cbvalvw.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Change bound variable.  Uses only Tarski's FOL axiom schemes.  See
       ~ cbvalv for a version with fewer disjoint variable conditions but
       requiring more axioms.  (Contributed by NM, 9-Apr-2017.)  (Proof
       shortened by Wolf Lammen, 28-Feb-2018.) $)
    cbvalvw $p |- ( A. x ph <-> A. y ps ) $=
      ( wal ax-5 wn cbvalw ) ABCDACFDGBHCGBDFCGAHDGEI $.
    $( $j usage 'cbvalvw' avoids 'ax-8' 'ax-9' 'ax-10' 'ax-11' 'ax-12'
       'ax-13'; $)

    $( Change bound variable.  Uses only Tarski's FOL axiom schemes.  See
       ~ cbvexv for a version with fewer disjoint variable conditions but
       requiring more axioms.  (Contributed by NM, 19-Apr-2017.) $)
    cbvexvw $p |- ( E. x ph <-> E. y ps ) $=
      ( wn wal wex weq notbid cbvalvw notbii df-ex 3bitr4i ) AFZCGZFBFZDGZFACHB
      DHPROQCDCDIABEJKLACMBDMN $.
    $( $j usage 'cbvexvw' avoids 'ax-8' 'ax-9' 'ax-10' 'ax-11' 'ax-12'
       'ax-13'; $)
  $}

  ${
    $d y z $.  $d x y $.  $d z ph $.  $d y ps $.
    alcomiw.1 $e |- ( y = z -> ( ph <-> ps ) ) $.
    $( Weak version of ~ alcom .  Uses only Tarski's FOL axiom schemes.
       (Contributed by NM, 10-Apr-2017.)  (Proof shortened by Wolf Lammen,
       12-Jul-2022.) $)
    alcomiw $p |- ( A. x A. y ph -> A. y A. x ph ) $=
      ( wal weq biimpd cbvalivw alimi ax-5 biimprd equcoms spimvw 2alimi 3syl
      wi ) ADGZCGBEGZCGZUADGACGDGSTCABDEDEHZABFIJKUADLTADCBAEDBARDEUBABFMNOPQ
      $.
    $( $j usage 'alcomiw' avoids 'ax-8' 'ax-9' 'ax-10' 'ax-11' 'ax-12'
       'ax-13'; $)
  $}

  ${
    $d x y $.
    hbn1fw.1 $e |- ( A. x ph -> A. y A. x ph ) $.
    hbn1fw.2 $e |- ( -. ps -> A. x -. ps ) $.
    hbn1fw.3 $e |- ( A. y ps -> A. x A. y ps ) $.
    hbn1fw.4 $e |- ( -. ph -> A. y -. ph ) $.
    hbn1fw.5 $e |- ( -. A. y ps -> A. x -. A. y ps ) $.
    hbn1fw.6 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Weak version of ~ ax-10 from which we can prove any ~ ax-10 instance not
       involving wff variables or bundling.  Uses only Tarski's FOL axiom
       schemes.  (Contributed by NM, 19-Apr-2017.)  (Proof shortened by Wolf
       Lammen, 28-Feb-2018.) $)
    hbn1fw $p |- ( -. A. x ph -> A. x -. A. x ph ) $=
      ( wal wn cbvalw notbii hbxfrbi ) ACKZLBDKZLCPQABCDEFGHJMNIO $.
    $( $j usage 'hbn1fw' avoids 'ax-8' 'ax-9' 'ax-10' 'ax-11' 'ax-12'
       'ax-13'; $)
  $}

  ${
    $d y ph $.  $d x ps $.  $d x y $.
    hbn1w.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Weak version of ~ hbn1 .  Uses only Tarski's FOL axiom schemes.
       (Contributed by NM, 9-Apr-2017.) $)
    hbn1w $p |- ( -. A. x ph -> A. x -. A. x ph ) $=
      ( wal ax-5 wn hbn1fw ) ABCDACFDGBHCGBDFZCGAHDGJHCGEI $.
    $( $j usage 'hbn1w' avoids 'ax-8' 'ax-9' 'ax-10' 'ax-11' 'ax-12'
       'ax-13'; $)

    $( Weak version of ~ hba1 .  See comments for ~ ax10w .  Uses only Tarski's
       FOL axiom schemes.  (Contributed by NM, 9-Apr-2017.)  (Proof shortened
       by Wolf Lammen, 10-Oct-2021.) $)
    hba1w $p |- ( A. x ph -> A. x A. x ph ) $=
      ( wal wn wb weq cbvalvw notbii a1i spw con2i hbn1w con1i alimi 3syl ) ACF
      ZSGZCFZGZUBCFSCFUASTBDFZGZCDTUDHCDISUCABCDEJKLZMNTUDCDUEOUBSCSUAABCDEOPQR
      $.
    $( $j usage 'hba1w' avoids 'ax-8' 'ax-9' 'ax-10' 'ax-11' 'ax-12'
       'ax-13'; $)

    $( Weak version of ~ hbe1 .  See comments for ~ ax10w .  Uses only Tarski's
       FOL axiom schemes.  (Contributed by NM, 19-Apr-2017.) $)
    hbe1w $p |- ( E. x ph -> A. x E. x ph ) $=
      ( wex wn wal df-ex weq notbid hbn1w hbxfrbi ) ACFAGZCHGCACINBGCDCDJABEKLM
      $.
    $( $j usage 'hbe1w' avoids 'ax-8' 'ax-9' 'ax-10' 'ax-11' 'ax-12'
       'ax-13'; $)
  $}

  ${
    $d x z $.  $d x y $.  $d z ph $.  $d x ps $.
    hbalw.1 $e |- ( x = z -> ( ph <-> ps ) ) $.
    hbalw.2 $e |- ( ph -> A. x ph ) $.
    $( Weak version of ~ hbal .  Uses only Tarski's FOL axiom schemes.  Unlike
       ~ hbal , this theorem requires that ` x ` and ` y ` be distinct, i.e.
       not be bundled.  (Contributed by NM, 19-Apr-2017.) $)
    hbalw $p |- ( A. y ph -> A. x A. y ph ) $=
      ( wal alimi alcomiw syl ) ADHZACHZDHLCHAMDGIABDCEFJK $.
    $( $j usage 'hbalw' avoids 'ax-8' 'ax-9' 'ax-10' 'ax-11' 'ax-12'
       'ax-13'; $)
  $}

  ${
    $d x y z $.
    $( A special instance of ~ sp applied to an equality with a disjoint
       variable condition.  Unlike the more general ~ sp , we can prove this
       without ~ ax-12 .  Instance of ~ aeveq .

       The antecedent ` A. x x = y ` with distinct ` x ` and ` y ` is a
       characteristic of a degenerate universe, in which just one object
       exists.  Actually more than one object may still exist, but if so, we
       give up on equality as a discriminating term.

       Separating this degenerate case from a richer universe, where inequality
       is possible, is a common proof idea.  The name of this theorem follows a
       convention, where the condition ` A. x x = y ` is denoted by 'aev', a
       shorthand for 'all equal, with a distinct variable condition'.
       (Contributed by Wolf Lammen, 14-Mar-2021.) $)
    spaev $p |- ( A. x x = y -> x = y ) $=
      ( vz weq equequ1 spw ) ABDCBDACACBEF $.
    $( $j usage 'spaev' avoids 'ax-8' 'ax-9' 'ax-10' 'ax-11' 'ax-12'
       'ax-13'; $)
  $}

  ${
    $d x y t $.  $d y z t $.
    $( Change bound variable in an equality with a disjoint variable condition.
       Instance of ~ aev .  (Contributed by NM, 22-Jul-2015.)  (Revised by BJ,
       18-Jun-2019.) $)
    cbvaev $p |- ( A. x x = y -> A. z z = y ) $=
      ( vt weq wal ax7 cbvalivw syl ) ABEZAFDBEZDFCBEZCFJKADADBGHKLDCDCBGHI $.
    $( $j usage 'cbvaev' avoids 'ax-8' 'ax-9' 'ax-10' 'ax-11' 'ax-12'
       'ax-13'; $)
  $}

  ${
    $d x y z $.
    $( Lemma for ~ aevlem .  Instance of ~ aev .  (Contributed by NM,
       8-Jul-2016.)  (Proof shortened by Wolf Lammen, 17-Feb-2018.)  Remove
       dependency on ~ ax-12 .  (Revised by Wolf Lammen, 14-Mar-2021.)
       (Revised by BJ, 29-Mar-2021.)  (Proof shortened by Wolf Lammen,
       30-Mar-2021.) $)
    aevlem0 $p |- ( A. x x = y -> A. z z = x ) $=
      ( weq wal spaev alrimiv cbvaev equeuclr al2imi sylc ) ABDZAEZLCECBDZCECAD
      ZCEMLCABFGABCHLNOCACBIJK $.
  $}

  ${
    $d x y u $.  $d z t u $.
    $( Lemma for ~ aev and ~ axc16g .  Change free and bound variables.
       Instance of ~ aev .  (Contributed by NM, 22-Jul-2015.)  (Proof shortened
       by Wolf Lammen, 17-Feb-2018.)  Remove dependency on ~ ax-13 , along an
       idea of BJ. (Revised by Wolf Lammen, 30-Nov-2019.)  (Revised by BJ,
       29-Mar-2021.) $)
    aevlem $p |- ( A. x x = y -> A. z z = t ) $=
      ( vu weq wal cbvaev aevlem0 4syl ) ABFAGEBFEGAEFAGDEFDGCDFCGABEHEBAIAEDHD
      ECIJ $.
  $}

  ${
    $d x y $.  $d u z $.  $d u t $.
    $( The antecedent ` A. x x = y ` with a disjoint variable condition
       (typical of a one-object universe) forces equality of everything.
       (Contributed by Wolf Lammen, 19-Mar-2021.) $)
    aeveq $p |- ( A. x x = y -> z = t ) $=
      ( vu weq wal wex aevlem ax6ev ax7 aleximi mpi ax5e 3syl ) ABFAGECFZEGZCDF
      ZEHZRABECIQEDFZEHSEDJPTREECDKLMRENO $.
    $( $j usage 'aeveq' avoids 'ax-8' 'ax-9' 'ax-10' 'ax-11' 'ax-12'
       'ax-13'; $)
  $}

  ${
    $d x y $.  $d v w z $.
    $( A "distinctor elimination" lemma with no restrictions on variables in
       the consequent.  (Contributed by NM, 8-Nov-2006.)  Remove dependency on
       ~ ax-11 .  (Revised by Wolf Lammen, 7-Sep-2018.)  Remove dependency on
       ~ ax-13 , inspired by an idea of BJ. (Revised by Wolf Lammen,
       30-Nov-2019.)  Remove dependency on ~ ax-12 .  (Revised by Wolf Lammen,
       19-Mar-2021.) $)
    aev $p |- ( A. x x = y -> A. z t = u ) $=
      ( vv vw weq wal aevlem aeveq alrimiv syl ) ABHAIFGHFIZEDHZCIABFGJNOCFGEDK
      LM $.
    $( $j usage 'aev' avoids 'ax-8' 'ax-9' 'ax-10' 'ax-11' 'ax-12' 'ax-13'; $)
  $}

  ${
    $d x y $.  $d t u $.  $d z v w $.
    $( Generalization of ~ hbaev , proved at no extra cost.  Instance of
       ~ aev2 .  (Contributed by Wolf Lammen, 22-Mar-2021.)  (Revised by BJ,
       29-Mar-2021.) $)
    hbaevg $p |- ( A. x x = y -> A. z A. t t = u ) $=
      ( vv vw weq wal aevlem alrimiv syl ) ABHAIFGHFIZEDHEIZCIABFGJMNCFGEDJKL
      $.
    $( $j usage 'hbaevg' avoids 'ax-8' 'ax-9' 'ax-10' 'ax-11' 'ax-12'
       'ax-13'; $)
  $}

  ${
    $d x y $.
    $( Version of ~ hbae with a disjoint variable condition, requiring fewer
       axioms.  Instance of ~ hbaevg and ~ aev2 .  (Contributed by Wolf Lammen,
       22-Mar-2021.) $)
    hbaev $p |- ( A. x x = y -> A. z A. x x = y ) $=
      ( hbaevg ) ABCBAD $.
    $( $j usage 'hbaev' avoids 'ax-8' 'ax-9' 'ax-10' 'ax-11' 'ax-12'
       'ax-13'; $)
  $}

  ${
    $d x y $.  $d t u $.  $d v w z $.
    $( Generalization of ~ hbnaev .  (Contributed by Wolf Lammen,
       9-Apr-2021.) $)
    hbnaevg $p |- ( -. A. x x = y -> A. z -. A. t t = u ) $=
      ( vv vw weq wal wn aev con3i ax-5 alimi 3syl ) ABHAIZJFGHFIZJZRCIEDHEIZJZ
      CIQPFGABAKLRCMRTCSQEDFGFKLNO $.
    $( $j usage 'hbnaevg' avoids 'ax-8' 'ax-9' 'ax-10' 'ax-11' 'ax-12'
       'ax-13'; $)
  $}

  ${
    $d x y $.
    $( Any variable is free in ` -. A. x x = y ` , if ` x ` and ` y ` are
       distinct.  This condition is dropped in ~ hbnae , at the expense of more
       axiom dependencies.  Instance of ~ hbnaevg .  (Contributed by Wolf
       Lammen, 9-Apr-2021.) $)
    hbnaev $p |- ( -. A. x x = y -> A. z -. A. x x = y ) $=
      ( hbnaevg ) ABCBAD $.
    $( $j usage 'hbnaev' avoids 'ax-8' 'ax-9' 'ax-10' 'ax-11' 'ax-12'
       'ax-13'; $)
  $}

  ${
    $v s $.
    $( Define temporary individual variable s. $)
    v.vs $f setvar s $.
    $d x y $.  $d w s $.
    $( A version of ~ aev with two universal quantifiers in the consequent, and
       a generalization of ~ hbaevg .  One can prove similar statements with
       arbitrary numbers of universal quantifiers in the consequent (the series
       begins with ~ aeveq , ~ aev , ~ aev2 ).

       Using ~ aev and ~ alrimiv (as in ~ aev2ALT ), one can actually prove
       (with no more axioms) any scheme of the form ` ( A. x x = y -> ` PHI) ,
       DV ` ( x , y ) ` where PHI involves only setvar variables and the
       connectors ` -> ` , ` <-> ` , ` /\ ` , ` \/ ` , ` T. ` , ` = ` ,
       ` A. ` , ` E. ` , ` E* ` , ` E! ` , ` F/ ` .  An example is given by
       ~ aevdemo .  This list cannot be extended to ` -. ` or ` F. ` since the
       scheme ` A. x x = y ` is consistent with ~ ax-mp , ~ ax-gen , ~ ax-1 --
       ~ ax-13 (as the one-element universe shows).

       (Contributed by BJ, 29-Mar-2021.) $)
    aev2 $p |- ( A. x x = y -> A. z A. t u = v ) $=
      ( vw v.vs weq wal hbaevg aev sylg ) ABIAJGHIGJEDIFJCABCHGKGHFDELM $.
    $( $j usage 'aev2' avoids 'ax-8' 'ax-9' 'ax-10' 'ax-11' 'ax-12' 'ax-13'; $)

    $d w s z $.
    $( Alternate proof of ~ aev2 , bypassing ~ hbaevg .  (Contributed by BJ,
       23-Mar-2021.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    aev2ALT $p |- ( A. x x = y -> A. z A. t u = v ) $=
      ( vw v.vs weq wal aev alrimiv syl ) ABIAJGHIGJZEDIFJZCJABGHGKNOCGHFDEKLM
      $.
    $( $j usage 'aev2ALT' avoids 'ax-8' 'ax-9' 'ax-10' 'ax-11' 'ax-12'
       'ax-13'; $)
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Define proper substitution
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    $d x y z $.  $d t y z $.  $d ph y z $.
    $( Lemma for ~ sbjust .  (Contributed by BJ, 9-Nov-2021.) $)
    sbjustlem $p |- ( A. y ( y = t -> A. x ( x = y -> ph ) ) <->
                          A. z ( z = t -> A. x ( x = z -> ph ) ) ) $=
      ( weq wi wal equequ1 equequ2 imbi1d albidv imbi12d cbvalvw ) CEFZBCFZAGZB
      HZGDEFZBDFZAGZBHZGCDCDFZOSRUBCDEIUCQUABUCPTACDBJKLMN $.
  $}

  ${
    $d x y u $.  $d t y u $.  $d ph y u $.  $d x z u $.  $d t z u $.
    $d ph z u $.
    $( Justification theorem for ~ df-sb from Tarski's FOL. (Contributed by BJ,
       22-Jan-2023.) $)
    sbjust $p |- ( A. y ( y = t -> A. x ( x = y -> ph ) ) <->
                       A. z ( z = t -> A. x ( x = z -> ph ) ) ) $=
      ( vu weq wi wal sbjustlem bitri ) CEGBCGAHBIHCIFEGBFGAHBIHFIDEGBDGAHBIHDI
      ABCFEJABFDEJK $.
  $}

  $c [ $.  $( Left bracket $)
  $c / $.  $( Slash. $)
  $c ] $.  $( Right bracket $)

  $( Extend wff definition to include proper substitution (read "the wff that
     results when ` y ` is properly substituted for ` x ` in wff ` ph ` ").
     (Contributed by NM, 24-Jan-2006.) $)
  wsb $a wff [ y / x ] ph $.

  $( Indicate that the variable "y" is free in wsb even though it could
     potentially bind occurrences in "ph". $)
  $( $j free_var 'wsb' with 'y'; $)

  ${
    $d y x $.  $d y t $.  $d y ph $.
    $( Define proper substitution.  For our notation, we use ` [ t / x ] ph `
       to mean "the wff that results from the proper substitution of ` t ` for
       ` x ` in the wff ` ph ` ".  That is, ` t ` properly replaces ` x ` .
       For example, ` [ t / x ] z e. x ` is the same as ` z e. t ` (when ` x `
       and ` z ` are distinct), as shown in ~ elsb4 .

       Our notation was introduced in Haskell B. Curry's _Foundations of
       Mathematical Logic_ (1977), p. 316 and is frequently used in textbooks
       of lambda calculus and combinatory logic.  This notation improves the
       common but ambiguous notation, " ` ph ( t ) ` is the wff that results
       when ` t ` is properly substituted for ` x ` in ` ph ( x ) ` ".  For
       example, if the original ` ph ( x ) ` is ` x = t ` , then ` ph ( t ) `
       is ` t = t ` , from which we obtain that ` ph ( x ) ` is ` x = x ` .  So
       what exactly does ` ph ( x ) ` mean?  Curry's notation solves this
       problem.

       A very similar notation, namely ` ( y | x ) ph ` , was introduced in
       Bourbaki's Set Theory (Chapter 1, Description of Formal Mathematic,
       1953).

       In most books, proper substitution has a somewhat complicated recursive
       definition with multiple cases based on the occurrences of free and
       bound variables in the wff.  Instead, we use a single formula that is
       exactly equivalent and gives us a direct definition.  We later prove
       that our definition has the properties we expect of proper substitution
       (see theorems ~ sbequ , ~ sbcom2 and ~ sbid2v ).

       Note that our definition is valid even when ` x ` and ` t ` are replaced
       with the same variable, as ~ sbid shows.  We achieve this by applying
       twice Tarski's definition ~ sb6 which is valid for disjoint variables,
       and introducing a dummy variable ` y ` which isolates ` x ` from ` t ` ,
       as in ~ dfsb7 with respect to ~ sb5 .  We can also achieve this by
       having ` x ` free in the first conjunct and bound in the second, as the
       alternate definition ~ dfsb1 shows.  Another version that mixes free and
       bound variables is ~ dfsb3 .  When ` x ` and ` t ` are distinct, we can
       express proper substitution with the simpler expressions of ~ sb5 and
       ~ sb6 .

       Note that the occurrences of a given variable in the definiens are
       either all bound ( ` x , y ` ) or all free ( ` t ` ).  Also note that
       the definiens uses only primitive symbols.

       This double level definition will make several proofs using it appear as
       doubled.  Alternately, one could often first prove as a lemma the same
       theorem with a disjoint variable condition on the substitute and the
       substituted variables, and then prove the original theorem by applying
       this lemma twice in a row.  (Contributed by NM, 10-May-1993.)  Revised
       from the original definition ~ dfsb1 .  (Revised by BJ, 22-Dec-2020.) $)
    df-sb $a |- ( [ t / x ] ph <-> A. y ( y = t -> A. x ( x = y -> ph ) ) ) $.
  $}

  ${
    $d x y $.  $d t y $.  $d ph y $.
    sbt.1 $e |- ph $.
    $( A substitution into a theorem yields a theorem.  See ~ sbtALT for a
       shorter proof requiring more axioms.  See ~ chvar and ~ chvarv for
       versions using implicit substitution.  (Contributed by NM, 21-Jan-2004.)
       (Proof shortened by Andrew Salmon, 25-May-2011.)  (Proof shortened by
       Wolf Lammen, 20-Jul-2018.)  Revise ~ df-sb .  (Revised by Steven Nguyen,
       6-Jul-2023.) $)
    sbt $p |- [ t / x ] ph $=
      ( vy wsb weq wi wal a1i ax-gen df-sb mpbir ) ABCFECGZBEGZAHZBIZHZEIREQNPB
      AODJKJKABECLM $.
  $}

  ${
    $d y x $.  $d y t $.  $d y ph $.
    $( The specialization axiom of standard predicate calculus.  It states that
       if a statement ` ph ` holds for all ` x ` , then it also holds for the
       specific case of ` t ` (properly) substituted for ` x ` .  Translated to
       traditional notation, it can be read:  " ` A. x ph ( x ) -> ph ( t ) ` ,
       provided that ` t ` is free for ` x ` in ` ph ( x ) ` ".  Axiom 4 of
       [Mendelson] p. 69.  See also ~ spsbc and ~ rspsbc .  (Contributed by NM,
       14-May-1993.)  Revise ~ df-sb .  (Revised by BJ, 22-Dec-2020.) $)
    stdpc4 $p |- ( A. x ph -> [ t / x ] ph ) $=
      ( vy wal weq wi wsb ala1 a1d alrimiv df-sb sylibr ) ABEZDCFZBDFZAGBEZGZDE
      ABCHNRDNQOAPBIJKABDCLM $.
  $}

  ${
    sbtALT.1 $e |- ph $.
    $( Alternate proof of ~ sbt , shorter but using ~ ax-4 and ~ ax-5 .
       (Contributed by NM, 21-Jan-2004.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    sbtALT $p |- [ y / x ] ph $=
      ( wsb stdpc4 mpg ) AABCEBABCFDG $.
  $}

  $( A double specialization using explicit substitution.  This is Theorem
     PM*11.1 in [WhiteheadRussell] p. 159.  See ~ stdpc4 for the analogous
     single specialization.  See ~ 2sp for another double specialization.
     (Contributed by Andrew Salmon, 24-May-2011.)  (Revised by BJ,
     21-Oct-2018.) $)
  2stdpc4 $p |- ( A. x A. y ph -> [ z / x ] [ w / y ] ph ) $=
    ( wal wsb stdpc4 alimi syl ) ACFZBFACEGZBFLBDGKLBACEHILBDHJ $.

  ${
    $d y z $.  $d x z $.  $d ph z $.  $d ps z $.
    $( Distribute substitution over implication.  (Contributed by NM,
       14-May-1993.)  Remove dependencies on axioms.  (Revised by Steven
       Nguyen, 24-Jul-2023.) $)
    sbi1 $p |- ( [ y / x ] ( ph -> ps ) ->
                                          ( [ y / x ] ph -> [ y / x ] ps ) ) $=
      ( vz wi wsb weq wal df-sb ax-2 al2imi imim3i 3imtr4g sylbi ) ABFZCDGEDHZC
      EHZPFZCIZFZEIZACDGZBCDGZFPCEDJUBQRAFZCIZFZEIQRBFZCIZFZEIUCUDUAUGUJETUFUIQ
      SUEUHCRABKLMLACEDJBCEDJNO $.
  $}

  $( Distribute substitution over implication.  Closed form of ~ sbimi .
     Specialization of implication.  (Contributed by NM, 5-Aug-1993.)  (Proof
     shortened by Andrew Salmon, 25-May-2011.)  Revise ~ df-sb .  (Revised by
     BJ, 22-Dec-2020.)  (Proof shortened by Steven Nguyen, 24-Jul-2023.) $)
  spsbim $p |- ( A. x ( ph -> ps ) -> ( [ t / x ] ph -> [ t / x ] ps ) ) $=
    ( wi wal wsb stdpc4 sbi1 syl ) ABEZCFKCDGACDGBCDGEKCDHABCDIJ $.

  $( Biconditional property for substitution.  Closed form of ~ sbbii .
     Specialization of biconditional.  (Contributed by NM, 2-Jun-1993.)  Revise
     ~ df-sb .  (Revised by BJ, 22-Dec-2020.) $)
  spsbbi $p |- ( A. x ( ph <-> ps ) -> ( [ t / x ] ph <-> [ t / x ] ps ) ) $=
    ( wb wal wsb wi biimp alimi spsbim syl biimpr impbid ) ABEZCFZACDGZBCDGZPAB
    HZCFQRHOSCABIJABCDKLPBAHZCFRQHOTCABMJBACDKLN $.

  ${
    sbimi.1 $e |- ( ph -> ps ) $.
    $( Distribute substitution over implication.  (Contributed by NM,
       25-Jun-1998.)  Revise ~ df-sb .  (Revised by BJ, 22-Dec-2020.)  (Proof
       shortened by Steven Nguyen, 24-Jul-2023.) $)
    sbimi $p |- ( [ t / x ] ph -> [ t / x ] ps ) $=
      ( wi wsb sbt sbi1 ax-mp ) ABFZCDGACDGBCDGFKCDEHABCDIJ $.
  $}

  ${
    sbbii.1 $e |- ( ph <-> ps ) $.
    $( Infer substitution into both sides of a logical equivalence.
       (Contributed by NM, 14-May-1993.) $)
    sbbii $p |- ( [ t / x ] ph <-> [ t / x ] ps ) $=
      ( wsb biimpi sbimi biimpri impbii ) ACDFBCDFABCDABEGHBACDABEIHJ $.

    $( Infer double substitution into both sides of a logical equivalence.
       (Contributed by AV, 30-Jul-2023.) $)
    2sbbii $p |- ( [ t / x ] [ u / y ] ph <-> [ t / x ] [ u / y ] ps ) $=
      ( wsb sbbii ) ADEHBDEHCFABDEGII $.
  $}

  ${
    $d x ph $.
    sbimdv.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Deduction substituting both sides of an implication, with ` ph ` and
       ` x ` disjoint.  See also ~ sbimd .  (Contributed by Wolf Lammen,
       6-May-2023.)  Revise ~ df-sb .  (Revised by Steven Nguyen,
       6-Jul-2023.) $)
    sbimdv $p |- ( ph -> ( [ t / x ] ps -> [ t / x ] ch ) ) $=
      ( wi wal wsb alrimiv spsbim syl ) ABCGZDHBDEICDEIGAMDFJBCDEKL $.
  $}

  ${
    $d x ph $.
    sbbidv.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Deduction substituting both sides of a biconditional, with ` ph ` and
       ` x ` disjoint.  See also ~ sbbid .  (Contributed by Wolf Lammen,
       6-May-2023.)  (Proof shortened by Steven Nguyen, 6-Jul-2023.) $)
    sbbidv $p |- ( ph -> ( [ t / x ] ps <-> [ t / x ] ch ) ) $=
      ( wb wal wsb alrimiv spsbbi syl ) ABCGZDHBDEICDEIGAMDFJBCDEKL $.
  $}

  ${
    $d y x $.  $d y t $.  $d y ph $.
    $( Existential generalization: if a proposition is true for a specific
       instance, then there exists an instance where it is true.  (Contributed
       by NM, 29-Jun-1993.)  (Proof shortened by Wolf Lammen, 3-May-2018.)
       Revise ~ df-sb .  (Revised by BJ, 22-Dec-2020.)  (Proof shortened by
       Steven Nguyen, 11-Jul-2023.) $)
    spsbe $p |- ( [ t / x ] ph -> E. x ph ) $=
      ( vy wsb weq wi wal wex df-sb ax6ev exim mpi sylbi exsbim syl ) ABCEZBDFA
      GBHZDIZABIQDCFZRGDHZSABDCJUATDISDCKTRDLMNABDOP $.

    $( Obsolete version of ~ spsbe as of 11-Jul-2023.  (Contributed by NM,
       29-Jun-1993.)  (Proof shortened by Wolf Lammen, 3-May-2018.)  Revise
       ~ df-sb .  (Revised by BJ, 22-Dec-2020.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    spsbeOLD $p |- ( [ t / x ] ph -> E. x ph ) $=
      ( vy wsb weq wi wal wex df-sb ax6ev exim sylbi eximi pm2.27 ax-mp exlimiv
      mpi 3syl ) ABCEZBDFZAGBHZDIZUABIZABIZGZDIUETDCFZUBGDHZUCABDCJUHUGDIUCDCKU
      GUBDLRMUBUFDUAABLNUFUEDUDUFUEGBDKUDUEOPQS $.
  $}

  ${
    $d u x $.  $d u y $.  $d u z $.  $d u ph $.
    $( Equality property for substitution, from Tarski's system.  Used in proof
       of Theorem 9.7 in [Megill] p. 449 (p. 16 of the preprint).  (Contributed
       by NM, 14-May-1993.)  Revise ~ df-sb .  (Revised by BJ, 30-Dec-2020.) $)
    sbequ $p |- ( x = y -> ( [ x / z ] ph <-> [ y / z ] ph ) ) $=
      ( vu weq wi wal wsb equequ2 imbi1d albidv df-sb 3bitr4g ) BCFZEBFZDEFAGDH
      ZGZEHECFZQGZEHADBIADCIORTEOPSQBCEJKLADEBMADECMN $.
  $}

  $( An equality theorem for substitution.  (Contributed by NM, 14-May-1993.)
     (Proof shortened by Wolf Lammen, 15-Sep-2018.)  (Proof shortened by Steven
     Nguyen, 7-Jul-2023.) $)
  sbequi $p |- ( x = y -> ( [ x / z ] ph -> [ y / z ] ph ) ) $=
    ( weq wsb sbequ biimpd ) BCEADBFADCFABCDGH $.

  ${
    $d y x t $.  $d y ph $.
    $( Alternate definition of substitution when variables are disjoint.
       Compare Theorem 6.2 of [Quine] p. 40.  Also proved as Lemmas 16 and 17
       of [Tarski] p. 70.  The implication "to the left" also holds without a
       disjoint variable condition ( ~ sb2 ).  Theorem ~ sb6f replaces the
       disjoint variable condition with a non-freeness hypothesis.  Theorem
       ~ sb4b replaces it with a distinctor antecedent.  (Contributed by NM,
       18-Aug-1993.)  (Proof shortened by Wolf Lammen, 21-Sep-2018.)  Revise
       ~ df-sb .  (Revised by BJ, 22-Dec-2020.)  Remove use of ~ ax-11 .
       (Revised by Steven Nguyen, 7-Jul-2023.)  (Proof shortened by Wolf
       Lammen, 16-Jul-2023.) $)
    sb6 $p |- ( [ t / x ] ph <-> A. x ( x = t -> ph ) ) $=
      ( vy wsb weq wi wal df-sb equequ2 imbi1d albidv equsalvw bitri ) ABCEDCFZ
      BDFZAGZBHZGDHBCFZAGZBHZABDCIRUADCOQTBOPSADCBJKLMN $.
  $}

  ${
    $d x y $.
    $( Obsolete as of 30-Jul-2023.  Use ~ sb6 instead.  (Contributed by BJ,
       23-Jun-2019.)  (Proof shortened by Steven Nguyen, 8-Jul-2023.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    sb4vOLD $p |- ( [ y / x ] ph -> A. x ( x = y -> ph ) ) $=
      ( wsb weq wi wal sb6 biimpi ) ABCDBCEAFBGABCHI $.

    $( Obsolete as of 30-Jul-2023.  Use ~ sb6 instead.  Version of ~ sb2 with a
       disjoint variable condition, which does not require ~ ax-13 .
       (Contributed by BJ, 31-May-2019.)  Revise ~ df-sb .  (Revised by Steven
       Nguyen, 8-Jul-2023.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    sb2vOLD $p |- ( A. x ( x = y -> ph ) -> [ y / x ] ph ) $=
      ( wsb weq wi wal sb6 biimpri ) ABCDBCEAFBGABCHI $.
  $}

  ${
    $d x ph $.
    $( Substitution for a variable not occurring in a proposition.  See ~ sbf
       for a version without disjoint variable condition on ` x , ph ` .  If
       one adds a disjoint variable condition on ` x , t ` , then ~ sbv can be
       proved directly by chaining ~ equsv with ~ sb6 .  (Contributed by BJ,
       22-Dec-2020.) $)
    sbv $p |- ( [ t / x ] ph <-> ph ) $=
      ( wsb wex spsbe ax5e syl wal ax-5 stdpc4 impbii ) ABCDZAMABEAABCFABGHAABI
      MABJABCKHL $.
  $}

  ${
    $d x y $.  $d x ps $.
    sbievw.is $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Version of ~ sbiev with an extra DV condition, not requiring ~ ax-12 .
       (Contributed by BJ, 18-Jul-2023.) $)
    sbievw $p |- ( [ y / x ] ph <-> ps ) $=
      ( wsb weq wi wal sb6 equsalvw bitri ) ACDFCDGAHCIBACDJABCDEKL $.
  $}

  ${
    $d y z $.
    $( Version of ~ sbcom3 with a disjoint variable condition using fewer
       axioms.  (Contributed by BJ, 30-Dec-2020.)  (Proof shortened by Wolf
       Lammen, 19-Jan-2023.) $)
    sbcom3vv $p |- ( [ z / y ] [ y / x ] ph <-> [ z / y ] [ z / x ] ph ) $=
      ( weq wsb wi wal sbequ pm5.74i albii sb6 3bitr4i ) CDEZABCFZGZCHNABDFZGZC
      HOCDFQCDFPRCNOQACDBIJKOCDLQCDLM $.
  $}

  ${
    $d x w $.  $d w y $.  $d w ph $.  $d w ps $.  $d x ch $.
    sbievw2.1 $e |- ( x = w -> ( ph <-> ch ) ) $.
    sbievw2.2 $e |- ( w = y -> ( ch <-> ps ) ) $.
    $( ~ sbievw applied twice, avoiding a DV condition on ` x ` , ` y ` .
       Based on proofs by Wolf Lammen.  (Contributed by Steven Nguyen,
       29-Jul-2023.) $)
    sbievw2 $p |- ( [ y / x ] ph <-> ps ) $=
      ( wsb sbcom3vv sbievw sbbii sbv 3bitr3i bitr3i ) ADEIZCFEIZBADFIZFEIPFEIQ
      PADFEJRCFEACDFGKLPFEMNCBFEHKO $.
  $}

  ${
    $d x z w $.  $d z ph w $.  $d y w $.
    $( Version of ~ sbco2 with disjoint variable conditions and fewer axioms.
       (Contributed by BJ, 22-Dec-2020.)  (Proof shortened by Wolf Lammen,
       29-Apr-2023.) $)
    sbco2vv $p |- ( [ y / z ] [ z / x ] ph <-> [ y / x ] ph ) $=
      ( vw wsb sbequ sbievw2 ) ABDFABCFABEFDCEADEBGAECBGH $.
  $}

  ${
    $d y w z $.  $d x w $.
    $( Substitution in an equality.  (Contributed by Raph Levien and FL,
       4-Dec-2005.)  Reduce axiom usage.  (Revised by Wolf Lammen,
       23-Jul-2023.) $)
    equsb3 $p |- ( [ x / y ] y = z <-> x = z ) $=
      ( vw weq equequ1 sbievw2 ) BCEACEDCEBADBDCFDACFG $.
  $}

  ${
    $d y z $.
    $( Substitution applied to the atomic wff with equality.  Variant of
       ~ equsb3 .  (Contributed by AV, 29-Jul-2023.) $)
    equsb3r $p |- ( [ x / y ] z = y <-> z = x ) $=
      ( weq wsb equcom sbbii equsb3 3bitri ) CBDZBAEBCDZBAEACDCADJKBACBFGABCHAC
      FI $.
  $}

  ${
    $d x y $.
    $( Version of ~ equsb1 with a disjoint variable condition, which neither
       requires ~ ax-12 nor ~ ax-13 .  (Contributed by BJ, 11-Sep-2019.)
       Remove dependencies on axioms.  (Revised by Wolf Lammen, 30-May-2023.)
       (Proof shortened by Steven Nguyen, 19-Jun-2023.)  Revise ~ df-sb .
       (Revised by Steven Nguyen, 11-Jul-2023.)  (Proof shortened by Steven
       Nguyen, 22-Jul-2023.) $)
    equsb1v $p |- [ y / x ] x = y $=
      ( weq wsb equid equsb3 mpbir ) ABCABDBBCBEBABFG $.

    $( Obsolete version of ~ equsb1v as of 22-Jul-2023.  Version of ~ equsb1
       with a disjoint variable condition, which neither requires ~ ax-12 nor
       ~ ax-13 .  (Contributed by BJ, 11-Sep-2019.)  Remove dependencies on
       axioms.  (Revised by Wolf Lammen, 30-May-2023.)  (Proof shortened by
       Steven Nguyen, 19-Jun-2023.)  Revise ~ df-sb .  (Revised by Steven
       Nguyen, 11-Jul-2023.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    equsb1vOLD $p |- [ y / x ] x = y $=
      ( weq wi wsb sb2vOLD id mpg ) ABCZIDIABEAIABFIGH $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Membership predicate
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Declare the membership predicate symbol. $)
  $c e. $.  $( Stylized lowercase Greek letter epsilon $)

  ${
    $v A $.
    $v B $.
    wcel.cA $f class A $.
    wcel.cB $f class B $.
    $( Extend wff definition to include the membership connective between
       classes.

       For a general discussion of the theory of classes, see
       ~ mmset.html#class .

       (The purpose of introducing ` wff A e. B ` here is to allow us to
       express, i.e., "prove", the ~ wel of predicate calculus in terms of the
       ~ wcel of set theory, so that we do not "overload" the ` e. ` connective
       with two syntax definitions.  This is done to prevent ambiguity that
       would complicate some Metamath parsers.  The class variables ` A ` and
       ` B ` are introduced temporarily for the purpose of this definition but
       otherwise not used in predicate calculus.  See ~ df-clab for more
       information on the set theory usage of ~ wcel .) $)
    wcel $a wff A e. B $.
  $}

  $( Extend wff definition to include atomic formulas with the membership
     predicate.  This is read " ` x ` is an element of ` y ` ", " ` x ` is a
     member of ` y ` ", " ` x ` belongs to ` y ` ", or " ` y ` contains
     ` x ` ".  Note:  The phrase " ` y ` includes ` x ` " means " ` x ` is a
     subset of ` y ` "; to use it also for ` x e. y ` , as some authors
     occasionally do, is poor form and causes confusion, according to George
     Boolos (1992 lecture at MIT).

     This syntactic construction introduces a binary non-logical predicate
     symbol ` e. ` (stylized lowercase epsilon) into our predicate calculus.
     We will eventually use it for the membership predicate of set theory, but
     that is irrelevant at this point: the predicate calculus axioms for ` e. `
     apply to any arbitrary binary predicate symbol.  "Non-logical" means that
     the predicate is presumed to have additional properties beyond the realm
     of predicate calculus, although these additional properties are not
     specified by predicate calculus itself but rather by the axioms of a
     theory (in our case set theory) added to predicate calculus.  "Binary"
     means that the predicate has two arguments.

     (Instead of introducing ~ wel as an axiomatic statement, as was done in an
     older version of this database, we introduce it by "proving" a special
     case of set theory's more general ~ wcel .  This lets us avoid overloading
     the ` e. ` connective, thus preventing ambiguity that would complicate
     certain Metamath parsers.  However, logically ~ wel is considered to be a
     primitive syntax, even though here it is artificially "derived" from
     ~ wcel .  Note:  To see the proof steps of this syntax proof, type "MM>
     SHOW PROOF wel / ALL" in the Metamath program.)  (Contributed by NM,
     24-Jan-2006.) $)
  wel $p wff x e. y $=
    ( cv wcel ) ACBCD $.

  $( Register class-to-set promotion and class equality and membership as
     primitive expressions. Although these are actually definitions, the above
     ambiguity prevention necessitates our taking class equality as the
     primitive, instead of set equality. $)
  $( $j primitive 'weq' 'wel'; $)


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Axiom scheme ax-8 (Left Equality for Binary Predicate)
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Axiom of Left Equality for Binary Predicate.  One of the equality and
     substitution axioms for a non-logical predicate in our predicate calculus
     with equality.  It substitutes equal variables into the left-hand side of
     an arbitrary binary predicate ` e. ` , which we will use for the set
     membership relation when set theory is introduced.  This axiom scheme is a
     sub-scheme of Axiom Scheme B8 of system S2 of [Tarski], p. 75, whose
     general form cannot be represented with our notation.  Also appears as
     Axiom scheme C12' in [Megill] p. 448 (p. 16 of the preprint).
     "Non-logical" means that the predicate is not a primitive of predicate
     calculus proper but instead is an extension to it.  "Binary" means that
     the predicate has two arguments.  In a system of predicate calculus with
     equality, like ours, equality is not usually considered to be a
     non-logical predicate.  In systems of predicate calculus without equality,
     it typically would be.

     We prove in ~ ax8 that this axiom can be recovered from its weakened
     version ~ ax8v where ` x ` and ` y ` are assumed to be disjoint variables.
     In particular, the only theorem referencing ~ ax-8 should be ~ ax8v .  See
     the comment of ~ ax8v for more details on these matters.  (Contributed by
     NM, 30-Jun-1993.)  (Revised by BJ, 7-Dec-2020.)  Use ~ ax8 instead.
     (New usage is discouraged.) $)
  ax-8 $a |- ( x = y -> ( x e. z -> y e. z ) ) $.

  ${
    $d x y $.
    $( Weakened version of ~ ax-8 , with a disjoint variable condition on
       ` x , y ` .  This should be the only proof referencing ~ ax-8 , and it
       should be referenced only by its two weakened versions ~ ax8v1 and
       ~ ax8v2 , from which ~ ax-8 is then rederived as ~ ax8 , which shows
       that either ~ ax8v or the conjunction of ~ ax8v1 and ~ ax8v2 is
       sufficient.  (Contributed by BJ, 7-Dec-2020.)  Use ~ ax8 instead.
       (New usage is discouraged.) $)
    ax8v $p |- ( x = y -> ( x e. z -> y e. z ) ) $=
      ( ax-8 ) ABCD $.
  $}

  ${
    $d x y $.  $d x z $.
    $( First of two weakened versions of ~ ax8v , with an extra disjoint
       variable condition on ` x , z ` , see comments there.  (Contributed by
       BJ, 7-Dec-2020.) $)
    ax8v1 $p |- ( x = y -> ( x e. z -> y e. z ) ) $=
      ( ax8v ) ABCD $.
  $}

  ${
    $d x y $.  $d y z $.
    $( Second of two weakened versions of ~ ax8v , with an extra disjoint
       variable condition on ` y , z ` see comments there.  (Contributed by BJ,
       7-Dec-2020.) $)
    ax8v2 $p |- ( x = y -> ( x e. z -> y e. z ) ) $=
      ( ax8v ) ABCD $.
  $}

  ${
    $d t x $.  $d t y $.  $d t z $.
    $( Proof of ~ ax-8 from ~ ax8v1 and ~ ax8v2 , proving sufficiency of the
       conjunction of the latter two weakened versions of ~ ax8v , which is
       itself a weakened version of ~ ax-8 .  (Contributed by BJ, 7-Dec-2020.)
       (Proof shortened by Wolf Lammen, 11-Apr-2021.) $)
    ax8 $p |- ( x = y -> ( x e. z -> y e. z ) ) $=
      ( vt weq wa wex wel wi equvinv ax8v2 equcoms ax8v1 sylan9 exlimiv sylbi )
      ABEDAEZDBEZFZDGACHZBCHZIZABDJSUBDQTDCHZRUATUCIADADCKLDBCMNOP $.
  $}

  $( An identity law for the non-logical predicate.  (Contributed by NM,
     30-Jun-1993.) $)
  elequ1 $p |- ( x = y -> ( x e. z <-> y e. z ) ) $=
    ( weq wel ax8 wi equcoms impbid ) ABDACEZBCEZABCFKJGBABACFHI $.

  ${
    $d x z $.  $d y z $.
    $( When the class variables in definition ~ df-clel are replaced with
       setvar variables, this theorem of predicate calculus is the result.
       This theorem provides part of the justification for the consistency of
       that definition, which "overloads" the setvar variables in ~ wel with
       the class variables in ~ wcel .  (Contributed by NM, 28-Jan-2004.)
       Revised to use ~ equsexvw in order to remove dependencies on ~ ax-10 ,
       ~ ax-12 , ~ ax-13 .  Note that there is no disjoint variable condition
       on ` x , y ` , that is, on the variables of the left-hand side, as
       should be the case for definitions.  (Revised by BJ, 29-Dec-2020.) $)
    cleljust $p |- ( x e. y <-> E. z ( z = x /\ z e. y ) ) $=
      ( weq wel wa wex elequ1 equsexvw bicomi ) CADCBEZFCGABEZKLCACABHIJ $.
    $( $j usage 'cleljust' avoids 'ax-9' 'ax-10' 'ax-11' 'ax-12' 'ax-13'; $)
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Axiom scheme ax-9 (Right Equality for Binary Predicate)
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Axiom of Right Equality for Binary Predicate.  One of the equality and
     substitution axioms for a non-logical predicate in our predicate calculus
     with equality.  It substitutes equal variables into the right-hand side of
     an arbitrary binary predicate ` e. ` , which we will use for the set
     membership relation when set theory is introduced.  This axiom scheme is a
     sub-scheme of Axiom Scheme B8 of system S2 of [Tarski], p. 75, whose
     general form cannot be represented with our notation.  Also appears as
     Axiom scheme C13' in [Megill] p. 448 (p. 16 of the preprint).

     We prove in ~ ax9 that this axiom can be recovered from its weakened
     version ~ ax9v where ` x ` and ` y ` are assumed to be disjoint variables.
     In particular, the only theorem referencing ~ ax-9 should be ~ ax9v .  See
     the comment of ~ ax9v for more details on these matters.  (Contributed by
     NM, 21-Jun-1993.)  (Revised by BJ, 7-Dec-2020.)  Use ~ ax9 instead.
     (New usage is discouraged.) $)
  ax-9 $a |- ( x = y -> ( z e. x -> z e. y ) ) $.

  ${
    $d x y $.
    $( Weakened version of ~ ax-9 , with a disjoint variable condition on
       ` x , y ` .  This should be the only proof referencing ~ ax-9 , and it
       should be referenced only by its two weakened versions ~ ax9v1 and
       ~ ax9v2 , from which ~ ax-9 is then rederived as ~ ax9 , which shows
       that either ~ ax9v or the conjunction of ~ ax9v1 and ~ ax9v2 is
       sufficient.  (Contributed by BJ, 7-Dec-2020.)  Use ~ ax9 instead.
       (New usage is discouraged.) $)
    ax9v $p |- ( x = y -> ( z e. x -> z e. y ) ) $=
      ( ax-9 ) ABCD $.
  $}

  ${
    $d x y $.  $d x z $.
    $( First of two weakened versions of ~ ax9v , with an extra disjoint
       variable condition on ` x , z ` , see comments there.  (Contributed by
       BJ, 7-Dec-2020.) $)
    ax9v1 $p |- ( x = y -> ( z e. x -> z e. y ) ) $=
      ( ax9v ) ABCD $.
  $}

  ${
    $d x y $.  $d y z $.
    $( Second of two weakened versions of ~ ax9v , with an extra disjoint
       variable condition on ` y , z ` see comments there.  (Contributed by BJ,
       7-Dec-2020.) $)
    ax9v2 $p |- ( x = y -> ( z e. x -> z e. y ) ) $=
      ( ax9v ) ABCD $.
  $}

  ${
    $d t x $.  $d t y $.  $d t z $.
    $( Proof of ~ ax-9 from ~ ax9v1 and ~ ax9v2 , proving sufficiency of the
       conjunction of the latter two weakened versions of ~ ax9v , which is
       itself a weakened version of ~ ax-9 .  (Contributed by BJ, 7-Dec-2020.)
       (Proof shortened by Wolf Lammen, 11-Apr-2021.) $)
    ax9 $p |- ( x = y -> ( z e. x -> z e. y ) ) $=
      ( vt weq wa wex wel wi equvinv ax9v2 equcoms ax9v1 sylan9 exlimiv sylbi )
      ABEDAEZDBEZFZDGCAHZCBHZIZABDJSUBDQTCDHZRUATUCIADADCKLDBCMNOP $.
  $}

  $( An identity law for the non-logical predicate.  (Contributed by NM,
     21-Jun-1993.) $)
  elequ2 $p |- ( x = y -> ( z e. x <-> z e. y ) ) $=
    ( weq wel ax9 wi equcoms impbid ) ABDCAEZCBEZABCFKJGBABACFHI $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Logical redundancy of ax-10 , ax-11 , ax-12 , ax-13
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  The original axiom schemes of Tarski's predicate calculus are ~ ax-4 ,
  ~ ax-5 , ~ ax6v , ~ ax-7 , ~ ax-8 , and ~ ax-9 , together with rule
  ~ ax-gen .  See ~ mmset.html#compare .  They are given as axiom schemes B4
  through B8 in [KalishMontague] p. 81.  These are shown to be logically
  complete by Theorem 1 of [KalishMontague] p. 85.

  The axiom system of set.mm includes the auxiliary axiom schemes ~ ax-10 ,
  ~ ax-11 , ~ ax-12 , and ~ ax-13 , which are not part of Tarski's axiom
  schemes.  Each object-language instance of them is provable from Tarski's
  axioms, so they are logically redundant.  However, they are conjectured not
  to be provable directly _as schemes_ from Tarski's axiom schemes using only
  Metamath's direct substitution rule.  They are used to make our system
  "metalogically complete", i.e., able to prove directly all possible schemes
  with wff and setvar variables, bundled or not, whose object-language
  instances are valid.  ( ~ ax-12 has been proved to be required; see
  ~ http://us.metamath.org/award2003.html#9a .  Metalogical independence of the
  other three are open problems.)

  (There are additional predicate calculus axiom schemes included in set.mm
  such as ~ ax-c5 , but they can all be proved as theorems from the above.)

  Terminology:  Two setvar (individual) metavariables are "bundled" in an axiom
  or theorem scheme when there is no distinct variable constraint ($d) imposed
  on them.  (The term "bundled" is due to Raph Levien.)  For example, the ` x `
  and ` y ` in ~ ax-6 are bundled, but they are not in ~ ax6v . We also say
  that a scheme is bundled when it has at least one pair of bundled setvar
  variables.  If distinct variable conditions are added to all setvar variable
  pairs in a bundled scheme, we call that the "principal" instance
  of the bundled scheme.  For example, ~ ax6v is the principal instance of
  ~ ax-6 . Whenever a common variable is substituted for two or more bundled
  variables in an axiom or theorem scheme, we call the substitution instance
  "degenerate".  For example, the instance ` -. A. x -. x = x ` of ~ ax-6 is
  degenerate.  An advantage of bundling is ease of use since there are fewer
  distinct variable restrictions ($d) to be concerned with, and theorems
  are more general.  There may be some
  economy in being able to prove facts about principal and degenerate instances
  simultaneously.  A disadvantage is that bundling may present difficulties in
  translations to other proof languages, which typically lack the concept (in
  part because their variables often represent the variables of the
  object language rather than metavariables ranging over them).

  Because Tarski's axiom schemes are logically complete, they can be used to
  prove any object-language instance of ~ ax-10 , ~ ax-11 , ~ ax-12 , and
  ~ ax-13 .  "Translating" this to Metamath, it means that Tarski's axioms can
  prove any substitution instance of ~ ax-10 , ~ ax-11 , ~ ax-12 , or ~ ax-13
  in which (1) there are no wff metavariables and (2) all setvar variables
  are mutually distinct i.e. are not bundled.  In effect this is mimicking the
  object language by pretending that each setvar variable is an
  object-language variable.  (There may also be specific instances with wff
  metavariables and/or bundling that are directly provable from Tarski's axiom
  schemes, but it isn't guaranteed.  Whether all of them are possible is part
  of the still open metalogical independence problem for our additional axiom
  schemes.)

  It can be useful to see how this can be done, both to show that our
  additional schemes are valid metatheorems of Tarski's system and to be able
  to translate object-language instances of our proofs into proofs that would
  work with a system using only Tarski's original schemes.  In addition, it may
  (or may not) provide insight into the conjectured metalogical independence of
  our additional schemes.

  The theorem schemes ~ ax10w , ~ ax11w , ~ ax12w , and ~ ax13w are derived
  using only Tarski's axiom schemes, showing that Tarski's schemes can be used
  to derive all substitution instances of ~ ax-10 , ~ ax-11 , ~ ax-12 , and
  ~ ax-13 meeting Conditions (1) and (2).  (The "w" suffix stands for "weak
  version".)  Each hypothesis of ~ ax10w , ~ ax11w , and ~ ax12w is of the form
  ` ( x = y -> ( ph <-> ps ) ) ` where ` ps ` is an auxiliary or "dummy" wff
  metavariable in which ` x ` doesn't occur.  We can show by induction on
  formula length that the hypotheses can be eliminated in all cases meeting
  Conditions (1) and (2).  The example ~ ax12wdemo illustrates the techniques
  (equality theorems and bound variable renaming) used to achieve this.

  We also show the degenerate instances for axioms with bundled variables in
  ~ ax11dgen , ~ ax12dgen , ~ ax13dgen1 , ~ ax13dgen2 , ~ ax13dgen3 , and
  ~ ax13dgen4 . (Their proofs are trivial, but we include them to be thorough.)
  Combining the principal and degenerate cases _outside_ of Metamath, we show
  that the bundled schemes ~ ax-10 , ~ ax-11 , ~ ax-12 , and ~ ax-13 are
  schemes of Tarski's system, meaning that all object-language instances they
  generate are theorems of Tarski's system.

  It is interesting that Tarski used the bundled scheme ~ ax-6 in an older
  system, so it seems the main purpose of his later ~ ax6v was just to show
  that the weaker unbundled form is sufficient rather than an aesthetic
  objection to bundled free and bound variables.  Since we adopt the
  bundled ~ ax-6 as our official axiom, we show that the degenerate
  instance holds in ~ ax6dgen .  (Recall that in set.mm, the only statement
  referencing ~ ax-6 is ~ ax6v .)

  The case of ~ sp is curious:  originally an axiom scheme of Tarski's system,
  it was proved logically redundant by Lemma 9 of [KalishMontague] p. 86.
  However, the proof is by induction on formula length, and the scheme form
  ` A. x ph -> ph ` apparently cannot be proved directly from Tarski's other
  axiom schemes.  The best we can do seems to be ~ spw , again requiring
  substitution instances of ` ph ` that meet Conditions (1) and (2) above.
  Note that our direct proof ~ sp requires ~ ax-12 , which is not part of
  Tarski's system.

$)

  $( Tarski's system uses the weaker ~ ax6v instead of the bundled ~ ax-6 , so
     here we show that the degenerate case of ~ ax-6 can be derived.  Even
     though ~ ax-6 is in the list of axioms used, recall that in set.mm, the
     only statement referencing ~ ax-6 is ~ ax6v .  We later rederive from
     ~ ax6v the bundled form as ~ ax6 with the help of the auxiliary axiom
     schemes.  (Contributed by NM, 23-Apr-2017.) $)
  ax6dgen $p |- -. A. x -. x = x $=
    ( weq wn wal equid notnoti spfalw mt2 ) AABZCZADIAEZJAIKFGH $.

  ${
    $d y ph $.  $d x ps $.  $d x y $.
    ax10w.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Weak version of ~ ax-10 from which we can prove any ~ ax-10 instance not
       involving wff variables or bundling.  Uses only Tarski's FOL axiom
       schemes.  It is an alias of ~ hbn1w introduced for labeling consistency.
       (Contributed by NM, 9-Apr-2017.)  Use ~ hbn1w instead.
       (New usage is discouraged.) $)
    ax10w $p |- ( -. A. x ph -> A. x -. A. x ph ) $=
      ( hbn1w ) ABCDEF $.
  $}

  ${
    $d y z $.  $d x y $.  $d z ph $.  $d y ps $.
    ax11w.1 $e |- ( y = z -> ( ph <-> ps ) ) $.
    $( Weak version of ~ ax-11 from which we can prove any ~ ax-11 instance not
       involving wff variables or bundling.  Uses only Tarski's FOL axiom
       schemes.  Unlike ~ ax-11 , this theorem requires that ` x ` and ` y ` be
       distinct i.e. are not bundled.  It is an alias of ~ alcomiw introduced
       for labeling consistency.  (Contributed by NM, 10-Apr-2017.)  Use
       ~ alcomiw instead.  (New usage is discouraged.) $)
    ax11w $p |- ( A. x A. y ph -> A. y A. x ph ) $=
      ( alcomiw ) ABCDEFG $.
    $( $j usage 'ax11w' avoids 'ax-8' 'ax-9' 'ax-10' 'ax-11' 'ax-12'
       'ax-13'; $)
  $}

  $( Degenerate instance of ~ ax-11 where bundled variables ` x ` and ` y `
     have a common substitution.  Uses only Tarski's FOL axiom schemes.
     (Contributed by NM, 13-Apr-2017.) $)
  ax11dgen $p |- ( A. x A. x ph -> A. x A. x ph ) $=
    ( wal id ) ABCBCD $.
  $( $j usage 'ax11dgen' avoids 'ax-8' 'ax-9' 'ax-10' 'ax-11' 'ax-12'
       'ax-13'; $)

  ${
    $d x ps $.
    ax12wlemw.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Lemma for weak version of ~ ax-12 .  Uses only Tarski's FOL axiom
       schemes.  In some cases, this lemma may lead to shorter proofs than
       ~ ax12w .  (Contributed by NM, 10-Apr-2017.) $)
    ax12wlem $p |- ( x = y -> ( ph -> A. x ( x = y -> ph ) ) ) $=
      ( ax-5 ax12i ) ABCDEBCFG $.
  $}

  ${
    $d y z $.  $d x ps $.  $d z ph $.  $d y ch $.
    ax12w.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    ax12w.2 $e |- ( y = z -> ( ph <-> ch ) ) $.
    $( Weak version of ~ ax-12 from which we can prove any ~ ax-12 instance not
       involving wff variables or bundling.  Uses only Tarski's FOL axiom
       schemes.  An instance of the first hypothesis will normally require that
       ` x ` and ` y ` be distinct (unless ` x ` does not occur in ` ph ` ).
       For an example of how the hypotheses can be eliminated when we
       substitute an expression without wff variables for ` ph ` , see
       ~ ax12wdemo .  (Contributed by NM, 10-Apr-2017.) $)
    ax12w $p |- ( x = y -> ( A. y ph -> A. x ( x = y -> ph ) ) ) $=
      ( wal weq wi spw ax12wlem syl5 ) AEIADEJZOAKDIACEFHLABDEGMN $.
    $( $j usage 'ax12w' avoids 'ax-8' 'ax-9' 'ax-10' 'ax-11' 'ax-12'
       'ax-13'; $)
  $}

  $( Degenerate instance of ~ ax-12 where bundled variables ` x ` and ` y `
     have a common substitution.  Uses only Tarski's FOL axiom schemes.
     (Contributed by NM, 13-Apr-2017.) $)
  ax12dgen $p |- ( x = x -> ( A. x ph -> A. x ( x = x -> ph ) ) ) $=
    ( wal weq wi ala1 a1i ) ABCBBDZAEBCEHAHBFG $.
  $( $j usage 'ax12dgen' avoids 'ax-8' 'ax-9' 'ax-10' 'ax-11' 'ax-12'
       'ax-13'; $)

  ${
    $d x y z w v $.
    $( Example of an application of ~ ax12w that results in an instance of
       ~ ax-12 for a contrived formula with mixed free and bound variables,
       ` ( x e. y /\ A. x z e. x /\ A. y A. z y e. x ) ` , in place of ` ph ` .
       The proof illustrates bound variable renaming with ~ cbvalvw to obtain
       fresh variables to avoid distinct variable clashes.  Uses only Tarski's
       FOL axiom schemes.  (Contributed by NM, 14-Apr-2017.) $)
    ax12wdemo $p |- ( x = y
              -> ( A. y ( x e. y /\ A. x z e. x /\ A. y A. z y e. x )
     -> A. x ( x = y -> ( x e. y /\ A. x z e. x /\ A. y A. z y e. x ) ) ) ) $=
      ( vw vv wel wal w3a weq elequ1 elequ2 cbvalvw a1i albidv syl5bb 3anbi123d
      wb 3anbi13d ax12w ) ABFZCAFZAGZBAFZCGZBGZHBBFZCDFZDGZEBFZCGZEGZHAEFZUBEAF
      ZCGZEGZHABEABIZTUFUBUHUEUKABBJUBUHQUPUAUGADADCKLMUEUOUPUKUDUNBEBEIZUCUMCB
      EAJNLZUPUNUJEUPUMUICABEKNNOPUQTULUEUOUBBEAKUEUOQUQURMRS $.
    $( $j usage 'ax12wdemo' avoids 'ax-10' 'ax-11' 'ax-12' 'ax-13'; $)
  $}

  ${
    $d x y $.  $d x z $.
    $( Weak version (principal instance) of ~ ax-13 .  (Because ` y ` and ` z `
       don't need to be distinct, this actually bundles the principal instance
       and the degenerate instance
       ` ( -. x = y -> ( y = y -> A. x y = y ) ) ` .)  Uses only Tarski's FOL
       axiom schemes.  The proof is trivial but is included to complete the set
       ~ ax10w , ~ ax11w , and ~ ax12w .  (Contributed by NM, 10-Apr-2017.) $)
    ax13w $p |- ( -. x = y -> ( y = z -> A. x y = z ) ) $=
      ( weq wn ax5d ) ABDEBCDAF $.
    $( $j usage 'ax13w' avoids 'ax-8' 'ax-9' 'ax-10' 'ax-11' 'ax-12'
       'ax-13'; $)
  $}

  $( Degenerate instance of ~ ax-13 where bundled variables ` x ` and ` y `
     have a common substitution.  Uses only Tarski's FOL axiom schemes.
     (Contributed by NM, 13-Apr-2017.) $)
  ax13dgen1 $p |- ( -. x = x -> ( x = z -> A. x x = z ) ) $=
    ( weq wal wi equid pm2.24i ) AACABCZHADEAFG $.
  $( $j usage 'ax13dgen1' avoids 'ax-8' 'ax-9' 'ax-10' 'ax-11' 'ax-12'
     'ax-13'; $)

  $( Degenerate instance of ~ ax-13 where bundled variables ` x ` and ` z `
     have a common substitution.  Uses only Tarski's FOL axiom schemes.
     (Contributed by NM, 13-Apr-2017.) $)
  ax13dgen2 $p |- ( -. x = y -> ( y = x -> A. x y = x ) ) $=
    ( weq wn wal equcomi pm2.21 syl5 ) BACZABCZJDIAEZBAFJKGH $.
  $( $j usage 'ax13dgen2' avoids 'ax-8' 'ax-9' 'ax-10' 'ax-11' 'ax-12'
     'ax-13'; $)

  $( Degenerate instance of ~ ax-13 where bundled variables ` y ` and ` z `
     have a common substitution.  Uses only Tarski's FOL axiom schemes.
     (Contributed by NM, 13-Apr-2017.) $)
  ax13dgen3 $p |- ( -. x = y -> ( y = y -> A. x y = y ) ) $=
    ( weq wal wn equid ax-gen 2a1i ) BBCZADABCEIIABFGH $.
  $( $j usage 'ax13dgen3' avoids 'ax-8' 'ax-9' 'ax-10' 'ax-11' 'ax-12'
     'ax-13'; $)

  $( Degenerate instance of ~ ax-13 where bundled variables ` x ` , ` y ` , and
     ` z ` have a common substitution.  Therefore, also a degenerate instance
     of ~ ax13dgen1 , ~ ax13dgen2 , and ~ ax13dgen3 .  Also an instance of the
     intuitionistic tautology ~ pm2.21 .  Uses only Tarski's FOL axiom schemes.
     (Contributed by NM, 13-Apr-2017.)  Reduce axiom usage.  (Revised by Wolf
     Lammen, 10-Oct-2021.) $)
  ax13dgen4 $p |- ( -. x = x -> ( x = x -> A. x x = x ) ) $=
    ( weq wal pm2.21 ) AABZEACD $.
  $( $j usage 'ax13dgen4' avoids 'ax-8' 'ax-9' 'ax-10' 'ax-11' 'ax-12'
     'ax-13'; $)


$(
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
  Predicate calculus with equality:  Auxiliary axiom schemes (4 schemes)
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#

  In this section we introduce four additional schemes ~ ax-10 , ~ ax-11 ,
  ~ ax-12 , and ~ ax-13 that are not part of Tarski's system but can be proved
  (outside of Metamath) as theorem schemes of Tarski's system.  These are
  needed to give our system the property of "scheme completeness", which
  means that we can prove (with Metamath) all possible theorem schemes
  expressible in our language of wff metavariables ranging over object-language
  wffs, and setvar variables ranging over object-language individual variables.

  To show that these schemes are valid metatheorems of Tarski's system S2,
  above we proved from Tarski's system theorems ~ ax10w , ~ ax11w , ~ ax12w ,
  and ~ ax13w , which show that any object-language instance of these schemes
  (emulated by having no wff metavariables and requiring all setvar variables
  to be mutually distinct) can be proved using only the schemes in Tarski's
  system S2.

  An open problem is to show that these four additional schemes are mutually
  _metalogically_ independent and metalogically independent from Tarski's.  So
  far, independence of ~ ax-12 from all others has been shown, and
  independence of Tarski's ~ ax-6 from all others has been shown; see
  items 9a and 11 on ~ http://us.metamath.org/award2003.html .

$)


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Axiom scheme ax-10 (Quantified Negation)
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Axiom of Quantified Negation.  Axiom C5-2 of [Monk2] p. 113.  This axiom
     scheme is logically redundant (see ~ ax10w ) but is used as an auxiliary
     axiom scheme to achieve scheme completeness.  It means that ` x ` is not
     free in ` -. A. x ph ` .  (Contributed by NM, 21-May-2008.)  Use its alias
     ~ hbn1 instead if you must use it.  Any theorem in first order logic (FOL)
     that contains only set variables that are all mutually distinct, and has
     no wff variables, can be proved *without* using ~ ax-10 through ~ ax-13 ,
     by invoking ~ ax10w through ~ ax13w .  We encourage proving theorems
     *without* ~ ax-10 through ~ ax-13 and moving them up to the ~ ax-4 through
     ~ ax-9 section.  (New usage is discouraged.) $)
  ax-10 $a |- ( -. A. x ph -> A. x -. A. x ph ) $.

  $( Alias for ~ ax-10 to be used instead of it.  (Contributed by NM,
     24-Jan-1993.)  (Proof shortened by Wolf Lammen, 18-Aug-2014.) $)
  hbn1 $p |- ( -. A. x ph -> A. x -. A. x ph ) $=
    ( ax-10 ) ABC $.

  $( The setvar ` x ` is not free in ` E. x ph ` .  Corresponds to the axiom
     (5) of modal logic (see also ~ modal5 ).  (Contributed by NM,
     24-Jan-1993.) $)
  hbe1 $p |- ( E. x ph -> A. x E. x ph ) $=
    ( wex wn wal df-ex hbn1 hbxfrbi ) ABCADZBEDBABFIBGH $.

  $( Dual statement of ~ hbe1 .  Modified version of ~ axc7e with a universally
     quantified consequent.  (Contributed by Wolf Lammen, 15-Sep-2021.) $)
  hbe1a $p |- ( E. x A. x ph -> A. x ph ) $=
    ( wal wex wn df-ex hbn1 con1i sylbi ) ABCZBDJEBCZEJJBFJKABGHI $.

  $( One direction of ~ nf5 can be proved with a smaller footprint on axiom
     usage.  (Contributed by Wolf Lammen, 16-Sep-2021.) $)
  nf5-1 $p |- ( A. x ( ph -> A. x ph ) -> F/ x ph ) $=
    ( wal wi wex exim hbe1a syl6 nfd ) AABCZDBCZABKABEJBEJAJBFABGHI $.

  ${
    nf5i.1 $e |- ( ph -> A. x ph ) $.
    $( Deduce that ` x ` is not free in ` ph ` from the definition.
       (Contributed by Mario Carneiro, 11-Aug-2016.) $)
    nf5i $p |- F/ x ph $=
      ( wal wi wnf nf5-1 mpg ) AABDEABFBABGCH $.
  $}

  ${
    nf5dh.1 $e |- ( ph -> A. x ph ) $.
    nf5dh.2 $e |- ( ph -> ( ps -> A. x ps ) ) $.
    $( Deduce that ` x ` is not free in ` ps ` in a context.  (Contributed by
       Mario Carneiro, 24-Sep-2016.) ~ df-nf changed.  (Revised by Wolf Lammen,
       11-Oct-2021.) $)
    nf5dh $p |- ( ph -> F/ x ps ) $=
      ( wal wi wnf alrimih nf5-1 syl ) ABBCFGZCFBCHALCDEIBCJK $.
  $}

  ${
    $d x ph $.
    nf5dv.1 $e |- ( ph -> ( ps -> A. x ps ) ) $.
    $( Apply the definition of not-free in a context.  (Contributed by Mario
       Carneiro, 11-Aug-2016.) ~ df-nf changed.  (Revised by Wolf Lammen,
       18-Sep-2021.)  (Proof shortened by Wolf Lammen, 13-Jul-2022.) $)
    nf5dv $p |- ( ph -> F/ x ps ) $=
      ( ax-5 nf5dh ) ABCACEDF $.
  $}

  $( The setvar ` x ` is not free in ` E. x ph ` .  (Contributed by Mario
     Carneiro, 11-Aug-2016.) $)
  nfe1 $p |- F/ x E. x ph $=
    ( wex hbe1 nf5i ) ABCBABDE $.

  $( The setvar ` x ` is not free in ` A. x ph ` .  (Contributed by Mario
     Carneiro, 11-Aug-2016.) ~ df-nf changed.  (Revised by Wolf Lammen,
     11-Sep-2021.)  Remove dependency on ~ ax-12 .  (Revised by Wolf Lammen,
     12-Oct-2021.) $)
  nfa1 $p |- F/ x A. x ph $=
    ( wal wn wex alex nfe1 nfn nfxfr ) ABCADZBEZDBABFKBJBGHI $.

  $( A convenience theorem particularly designed to remove dependencies on
     ~ ax-11 in conjunction with distinctors.  (Contributed by Wolf Lammen,
     2-Sep-2018.) $)
  nfna1 $p |- F/ x -. A. x ph $=
    ( wal nfa1 nfn ) ABCBABDE $.

  $( Lemma 23 of [Monk2] p. 114.  (Contributed by Mario Carneiro,
     24-Sep-2016.) $)
  nfia1 $p |- F/ x ( A. x ph -> A. x ps ) $=
    ( wal nfa1 nfim ) ACDBCDCACEBCEF $.

  $( The setvar ` x ` is not free in ` F/ x ph ` .  (Contributed by Mario
     Carneiro, 11-Aug-2016.)  Remove dependency on ~ ax-12 .  (Revised by Wolf
     Lammen, 12-Oct-2021.) $)
  nfnf1 $p |- F/ x F/ x ph $=
    ( wnf wex wal wi df-nf nfe1 nfa1 nfim nfxfr ) ABCABDZABEZFBABGLMBABHABIJK
    $.

  $( The analogue in our predicate calculus of axiom (5) of modal logic S5.
     See also ~ hbe1 .  (Contributed by NM, 5-Oct-2005.) $)
  modal5 $p |- ( -. A. x -. ph -> A. x -. A. x -. ph ) $=
    ( wn hbn1 ) ACBD $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Axiom scheme ax-11 (Quantifier Commutation)
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Axiom of Quantifier Commutation.  This axiom says universal quantifiers
     can be swapped.  Axiom scheme C6' in [Megill] p. 448 (p. 16 of the
     preprint).  Also appears as Lemma 12 of [Monk2] p. 109 and Axiom C5-3 of
     [Monk2] p. 113.  This axiom scheme is logically redundant (see ~ ax11w )
     but is used as an auxiliary axiom scheme to achieve metalogical
     completeness.  (Contributed by NM, 12-Mar-1993.) $)
  ax-11 $a |- ( A. x A. y ph -> A. y A. x ph ) $.

  ${
    alcoms.1 $e |- ( A. x A. y ph -> ps ) $.
    $( Swap quantifiers in an antecedent.  (Contributed by NM, 11-May-1993.) $)
    alcoms $p |- ( A. y A. x ph -> ps ) $=
      ( wal ax-11 syl ) ACFDFADFCFBADCGEH $.
  $}

  $( Theorem 19.5 of [Margaris] p. 89.  (Contributed by NM, 30-Jun-1993.) $)
  alcom $p |- ( A. x A. y ph <-> A. y A. x ph ) $=
    ( wal ax-11 impbii ) ACDBDABDCDABCEACBEF $.

  $( Theorem *11.21 in [WhiteheadRussell] p. 160.  (Contributed by Andrew
     Salmon, 24-May-2011.) $)
  alrot3 $p |- ( A. x A. y A. z ph <-> A. y A. z A. x ph ) $=
    ( wal alcom albii bitri ) ADEZCEBEIBEZCEABEDEZCEIBCFJKCABDFGH $.

  $( Rotate four universal quantifiers twice.  (Contributed by NM, 2-Feb-2005.)
     (Proof shortened by Fan Zheng, 6-Jun-2016.) $)
  alrot4 $p |- ( A. x A. y A. z A. w ph <-> A. z A. w A. x A. y ph ) $=
    ( wal alrot3 albii bitri ) AEFDFCFZBFACFZEFDFZBFKBFEFDFJLBACDEGHKBDEGI $.

  $( Theorem 19.11 of [Margaris] p. 89.  (Contributed by NM, 5-Aug-1993.)
     Remove dependencies on ~ ax-5 , ~ ax-6 , ~ ax-7 , ~ ax-10 , ~ ax-12 .
     (Revised by Wolf Lammen, 8-Jan-2018.)  (Proof shortened by Wolf Lammen,
     22-Aug-2020.) $)
  excom $p |- ( E. x E. y ph <-> E. y E. x ph ) $=
    ( wn wal wex alcom notbii 2exnaln 3bitr4i ) ADZCEBEZDKBECEZDACFBFABFCFLMKBC
    GHABCIACBIJ $.
  $( $j usage 'excom' avoids 'ax-5' 'ax-6' 'ax-7' 'ax-10' 'ax-12' 'ax-13'; $)

  $( One direction of Theorem 19.11 of [Margaris] p. 89.  (Contributed by NM,
     5-Aug-1993.)  (Revised by Mario Carneiro, 24-Sep-2016.)  Remove
     dependencies on ~ ax-5 , ~ ax-6 , ~ ax-7 , ~ ax-10 , ~ ax-12 .  (Revised
     by Wolf Lammen, 8-Jan-2018.) $)
  excomim $p |- ( E. x E. y ph -> E. y E. x ph ) $=
    ( wex excom biimpi ) ACDBDABDCDABCEF $.
  $( $j usage 'excomim' avoids 'ax-5' 'ax-6' 'ax-7' 'ax-10' 'ax-12' 'ax-13'; $)

  $( Swap 1st and 3rd existential quantifiers.  (Contributed by NM,
     9-Mar-1995.) $)
  excom13 $p |- ( E. x E. y E. z ph <-> E. z E. y E. x ph ) $=
    ( wex excom exbii 3bitri ) ADEZCEBEIBEZCEABEZDEZCEKCEDEIBCFJLCABDFGKCDFH $.

  $( Rotate existential quantifiers.  (Contributed by NM, 17-Mar-1995.) $)
  exrot3 $p |- ( E. x E. y E. z ph <-> E. y E. z E. x ph ) $=
    ( wex excom13 excom bitri ) ADECEBEABEZCEDEIDECEABCDFIDCGH $.

  $( Rotate existential quantifiers twice.  (Contributed by NM, 9-Mar-1995.) $)
  exrot4 $p |- ( E. x E. y E. z E. w ph <-> E. z E. w E. x E. y ph ) $=
    ( wex excom13 exbii bitri ) AEFDFCFZBFACFZDFEFZBFKBFEFDFJLBACDEGHKBEDGI $.

  ${
    hbal.1 $e |- ( ph -> A. x ph ) $.
    $( If ` x ` is not free in ` ph ` , it is not free in ` A. y ph ` .
       (Contributed by NM, 12-Mar-1993.) $)
    hbal $p |- ( A. y ph -> A. x A. y ph ) $=
      ( wal alimi ax-11 syl ) ACEZABEZCEIBEAJCDFACBGH $.
  $}

  ${
    hbald.1 $e |- ( ph -> A. y ph ) $.
    hbald.2 $e |- ( ph -> ( ps -> A. x ps ) ) $.
    $( Deduction form of bound-variable hypothesis builder ~ hbal .
       (Contributed by NM, 2-Jan-2002.) $)
    hbald $p |- ( ph -> ( A. y ps -> A. x A. y ps ) ) $=
      ( wal alimdh ax-11 syl6 ) ABDGZBCGZDGKCGABLDEFHBDCIJ $.
  $}

  $( Lemma 24 of [Monk2] p. 114.  (Contributed by Mario Carneiro, 24-Sep-2016.)
     Remove dependency on ~ ax-12 .  (Revised by Wolf Lammen, 18-Oct-2021.) $)
  nfa2 $p |- F/ x A. y A. x ph $=
    ( wal alcom nfa1 nfxfr ) ABDCDACDZBDBACBEHBFG $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Axiom scheme ax-12 (Substitution)
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Axiom of Substitution.  One of the 5 equality axioms of predicate
     calculus.  The final consequent ` A. x ( x = y -> ph ) ` is a way of
     expressing " ` y ` substituted for ` x ` in wff ` ph ` " (cf. ~ sb6 ).  It
     is based on Lemma 16 of [Tarski] p. 70 and Axiom C8 of [Monk2] p. 105,
     from which it can be proved by cases.

     The original version of this axiom was ~ ax-c15 and was replaced with this
     shorter ~ ax-12 in Jan. 2007.  The old axiom is proved from this one as
     theorem ~ axc15 .  Conversely, this axiom is proved from ~ ax-c15 as
     theorem ~ ax12 .

     Juha Arpiainen proved the metalogical independence of this axiom (in the
     form of the older axiom ~ ax-c15 ) from the others on 19-Jan-2006.  See
     item 9a at ~ http://us.metamath.org/award2003.html .

     See ~ ax12v and ~ ax12v2 for other equivalents of this axiom that (unlike
     this axiom) have distinct variable restrictions.

     This axiom scheme is logically redundant (see ~ ax12w ) but is used as an
     auxiliary axiom scheme to achieve scheme completeness.  (Contributed by
     NM, 22-Jan-2007.)  (New usage is discouraged.) $)
  ax-12 $a |- ( x = y -> ( A. y ph -> A. x ( x = y -> ph ) ) ) $.

  ${
    $d x y $.  $d y ph $.
    $( This is essentially axiom ~ ax-12 weakened by additional restrictions on
       variables.  Besides ~ axc11r , this theorem should be the only one
       referencing ~ ax-12 directly.

       Both restrictions on variables have their own value.  If for a moment we
       assume ` x ` could be set to ` y ` , then, after elimination of the
       tautology ` y = y ` , immediately we have ` ph -> A. y ph ` for all
       ` ph ` and ` y ` , that is ~ ax-5 , a degenerate result.

       The second restriction is not necessary, but a simplification that makes
       the following interpretation easier to see.  Since ` ph ` textually at
       most depends on ` x ` , we can look at it at some given 'fixed' ` y ` .
       This theorem now states that the truth value of ` ph ` will stay
       constant, as long as we 'vary ` x ` around ` y ` ' only such that
       ` x = y ` still holds.  Or in other words, equality is the finest
       grained logical expression.  If you cannot differ two sets by ` = ` ,
       you won't find a whatever sophisticated expression that does.  One might
       wonder how the described variation of ` x ` is possible at all.  Note
       that Metamath is a text processor that easily sees a difference between
       text chunks ` { x | -. x = x } ` and ` { y | -. y = y } ` .  Our usual
       interpretation is to abstract from textual variations of the same set,
       but we are free to interpret Metamath's formalism differently, and in
       fact let ` x ` run through all textual representations of sets.

       Had we allowed ` ph ` to depend also on ` y ` , this idea is both harder
       to see, and it is less clear that this extra freedom introduces effects
       not covered by other axioms.  (Contributed by Wolf Lammen,
       8-Aug-2020.) $)
    ax12v $p |- ( x = y -> ( ph -> A. x ( x = y -> ph ) ) ) $=
      ( wal weq wi ax-5 ax-12 syl5 ) AACDBCEZJAFBDACGABCHI $.
  $}

  ${
    $d x y z $.  $d z ph $.
    $( It is possible to remove any restriction on ` ph ` in ~ ax12v .  Same as
       Axiom C8 of [Monk2] p. 105.  Use ~ ax12v instead when sufficient.
       (Contributed by NM, 5-Aug-1993.)  Remove dependencies on ~ ax-10 and
       ~ ax-13 .  (Revised by Jim Kingdon, 15-Dec-2017.)  (Proof shortened by
       Wolf Lammen, 8-Dec-2019.) $)
    ax12v2 $p |- ( x = y -> ( ph -> A. x ( x = y -> ph ) ) ) $=
      ( vz weq wi wal equtrr ax12v imim1d alimdv syl9r syld ax6evr exlimiiv ) C
      DEZBCEZAQAFZBGZFZFDPQBDEZTCDBHZUAAUAAFZBGPSABDIPUCRBPQUAAUBJKLMDCNO $.
    $( $j usage 'ax12v2' avoids 'ax-10' 'ax-13'; $)
  $}

  ${
    $d x y $.  $d y ph $.
    $( If a wff is true, it is true for at least one instance.  Special case of
       Theorem 19.8 of [Margaris] p. 89.  See ~ 19.8v for a version with a
       disjoint variable condition requiring fewer axioms.  (Contributed by NM,
       9-Jan-1993.)  Allow a shortening of ~ sp .  (Revised by Wolf Lammen,
       13-Jan-2018.)  (Proof shortened by Wolf Lammen, 8-Dec-2019.) $)
    19.8a $p |- ( ph -> E. x ph ) $=
      ( vy weq wex wi wal ax12v ax6ev exim syl6mpi ax6evr exlimiiv ) BCDZAABEZF
      CNANAFBGNBEOABCHBCINABJKCBLM $.
  $}

  ${
    19.8ad.1 $e |- ( ph -> ps ) $.
    $( If a wff is true, it is true for at least one instance.  Deduction form
       of ~ 19.8a .  (Contributed by DAW, 13-Feb-2017.) $)
    19.8ad $p |- ( ph -> E. x ps ) $=
      ( wex 19.8a syl ) ABBCEDBCFG $.
  $}

  $( Specialization.  A universally quantified wff implies the wff without a
     quantifier.  Axiom scheme B5 of [Tarski] p. 67 (under his system S2,
     defined in the last paragraph on p. 77).  Also appears as Axiom scheme C5'
     in [Megill] p. 448 (p. 16 of the preprint).  This corresponds to the axiom
     (T) of modal logic.

     For the axiom of specialization presented in many logic textbooks, see
     theorem ~ stdpc4 .

     This theorem shows that our obsolete axiom ~ ax-c5 can be derived from the
     others.  The proof uses ideas from the proof of Lemma 21 of [Monk2]
     p. 114.

     It appears that this scheme cannot be derived directly from Tarski's
     axioms without auxiliary axiom scheme ~ ax-12 .  It is thought the best we
     can do using only Tarski's axioms is ~ spw .  Also see ~ spvw where ` x `
     and ` ph ` are disjoint, using fewer axioms.  (Contributed by NM,
     21-May-2008.)  (Proof shortened by Scott Fenton, 24-Jan-2011.)  (Proof
     shortened by Wolf Lammen, 13-Jan-2018.) $)
  sp $p |- ( A. x ph -> ph ) $=
    ( wal wn wex alex 19.8a con1i sylbi ) ABCADZBEZDAABFAKJBGHI $.

  ${
    spi.1 $e |- A. x ph $.
    $( Inference rule of universal instantiation, or universal specialization.
       Converse of the inference rule of (universal) generalization ~ ax-gen .
       Contrary to the rule of generalization, its closed form is valid, see
       ~ sp .  (Contributed by NM, 5-Aug-1993.) $)
    spi $p |- ph $=
      ( wal sp ax-mp ) ABDACABEF $.
  $}

  ${
    sps.1 $e |- ( ph -> ps ) $.
    $( Generalization of antecedent.  (Contributed by NM, 5-Jan-1993.) $)
    sps $p |- ( A. x ph -> ps ) $=
      ( wal sp syl ) ACEABACFDG $.
  $}

  $( A double specialization (see ~ sp ).  Another double specialization,
     closer to PM*11.1, is ~ 2stdpc4 .  (Contributed by BJ, 15-Sep-2018.) $)
  2sp $p |- ( A. x A. y ph -> ph ) $=
    ( wal sp sps ) ACDABACEF $.

  ${
    spsd.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Deduction generalizing antecedent.  (Contributed by NM, 17-Aug-1994.) $)
    spsd $p |- ( ph -> ( A. x ps -> ch ) ) $=
      ( wal sp syl5 ) BDFBACBDGEH $.
  $}

  $( Theorem 19.2 of [Margaris] p. 89, generalized to use two setvar variables.
     Use ~ 19.2 when sufficient.  (Contributed by Mel L. O'Cat,
     31-Mar-2008.) $)
  19.2g $p |- ( A. x ph -> E. y ph ) $=
    ( wex 19.8a sps ) AACDBACEF $.

  ${
    19.21bi.1 $e |- ( ph -> A. x ps ) $.
    $( Inference form of ~ 19.21 and also deduction form of ~ sp .
       (Contributed by NM, 26-May-1993.) $)
    19.21bi $p |- ( ph -> ps ) $=
      ( wal sp syl ) ABCEBDBCFG $.
  $}

  ${
    19.21bbi.1 $e |- ( ph -> A. x A. y ps ) $.
    $( Inference removing two universal quantifiers.  Version of ~ 19.21bi with
       two quantifiers.  (Contributed by NM, 20-Apr-1994.) $)
    19.21bbi $p |- ( ph -> ps ) $=
      ( wal 19.21bi ) ABDABDFCEGG $.
  $}

  ${
    19.23bi.1 $e |- ( E. x ph -> ps ) $.
    $( Inference form of Theorem 19.23 of [Margaris] p. 90, see ~ 19.23 .
       (Contributed by NM, 12-Mar-1993.) $)
    19.23bi $p |- ( ph -> ps ) $=
      ( wex 19.8a syl ) AACEBACFDG $.
  $}

  ${
    nexr.1 $e |- -. E. x ph $.
    $( Inference associated with the contrapositive of ~ 19.8a .  (Contributed
       by Jeff Hankins, 26-Jul-2009.) $)
    nexr $p |- -. ph $=
      ( wex 19.8a mto ) AABDCABEF $.
  $}

  $( Quantified excluded middle (see ~ exmid ).  Also known as the drinker
     paradox (if ` ph ( x ) ` is interpreted as " ` x ` drinks", then this
     theorem tells that there exists a person such that, if this person drinks,
     then everyone drinks).  Exercise 9.2a of Boolos, p. 111, _Computability
     and Logic_.  (Contributed by NM, 10-Dec-2000.) $)
  qexmid $p |- E. x ( ph -> A. x ph ) $=
    ( wal 19.8a 19.35ri ) AABCZBFBDE $.

  $( Consequence of the definition of not-free.  (Contributed by Mario
     Carneiro, 26-Sep-2016.) ~ df-nf changed.  (Revised by Wolf Lammen,
     11-Sep-2021.) $)
  nf5r $p |- ( F/ x ph -> ( ph -> A. x ph ) ) $=
    ( wex wnf wal 19.8a wi df-nf biimpi syl5 ) AABCZABDZABEZABFLKMGABHIJ $.

  ${
    nf5ri.1 $e |- F/ x ph $.
    $( Consequence of the definition of not-free.  (Contributed by Mario
       Carneiro, 11-Aug-2016.)  (Proof shortened by Wolf Lammen,
       15-Mar-2023.) $)
    nf5ri $p |- ( ph -> A. x ph ) $=
      ( wal nfri 19.23bi ) AABDBABCEF $.

    $( Obsolete proof of ~ nf5ri as of 15-Mar-2023.  (Contributed by Mario
       Carneiro, 11-Aug-2016.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    nf5riOLD $p |- ( ph -> A. x ph ) $=
      ( wnf wal wi nf5r ax-mp ) ABDAABEFCABGH $.
  $}

  ${
    nf5rd.1 $e |- ( ph -> F/ x ps ) $.
    $( Consequence of the definition of not-free in a context.  (Contributed by
       Mario Carneiro, 11-Aug-2016.) $)
    nf5rd $p |- ( ph -> ( ps -> A. x ps ) ) $=
      ( wnf wal wi nf5r syl ) ABCEBBCFGDBCHI $.
  $}

  ${
    nfim1.1 $e |- F/ x ph $.
    nfim1.2 $e |- ( ph -> F/ x ps ) $.
    $( A closed form of ~ nfim .  (Contributed by NM, 2-Jun-1993.)  (Revised by
       Mario Carneiro, 24-Sep-2016.)  (Proof shortened by Wolf Lammen,
       2-Jan-2018.) ~ df-nf changed.  (Revised by Wolf Lammen, 18-Sep-2021.) $)
    nfim1 $p |- F/ x ( ph -> ps ) $=
      ( wal wn wo wi wnf nf3 mpbi nftht sps nfimd pm2.21 alimi syl jaoi ax-mp )
      ACFZAGZCFZHZABIZCJZACJUDDACKLUAUFUCUAABCACMABCJCENOUCUECFUFUBUECABPQUECMR
      ST $.

    $( A closed form of ~ nfan .  (Contributed by Mario Carneiro, 3-Oct-2016.)
       ~ df-nf changed.  (Revised by Wolf Lammen, 18-Sep-2021.)  (Proof
       shortened by Wolf Lammen, 7-Jul-2022.) $)
    nfan1 $p |- F/ x ( ph /\ ps ) $=
      ( wa wn wi df-an nfnd nfim1 nfn nfxfr ) ABFABGZHZGCABIOCANCDABCEJKLM $.
  $}

  $( Closed form of ~ 19.3 and version of ~ 19.9t with a universal quantifier.
     (Contributed by NM, 9-Nov-2020.)  (Proof shortened by BJ, 9-Oct-2022.) $)
  19.3t $p |- ( F/ x ph -> ( A. x ph <-> ph ) ) $=
    ( wnf wal sp nf5r impbid2 ) ABCABDAABEABFG $.

  ${
    19.3.1 $e |- F/ x ph $.
    $( A wff may be quantified with a variable not free in it.  Version of
       ~ 19.9 with a universal quantifier.  Theorem 19.3 of [Margaris] p. 89.
       See ~ 19.3v for a version requiring fewer axioms.  (Contributed by NM,
       12-Mar-1993.)  (Revised by Mario Carneiro, 24-Sep-2016.) $)
    19.3 $p |- ( A. x ph <-> ph ) $=
      ( wal sp nf5ri impbii ) ABDAABEABCFG $.
  $}

  ${
    19.9d.1 $e |- ( ps -> F/ x ph ) $.
    $( A deduction version of one direction of ~ 19.9 .  (Contributed by NM,
       14-May-1993.)  (Revised by Mario Carneiro, 24-Sep-2016.)  Revised to
       shorten other proofs.  (Revised by Wolf Lammen, 14-Jul-2020.) ~ df-nf
       changed.  (Revised by Wolf Lammen, 11-Sep-2021.)  (Proof shortened by
       Wolf Lammen, 8-Jul-2022.) $)
    19.9d $p |- ( ps -> ( E. x ph -> ph ) ) $=
      ( wex wal nfrd sp syl6 ) BACEACFABACDGACHI $.
  $}

  $( Closed form of ~ 19.9 and version of ~ 19.3t with an existential
     quantifier.  (Contributed by NM, 13-May-1993.)  (Revised by Mario
     Carneiro, 24-Sep-2016.)  (Proof shortened by Wolf Lammen, 14-Jul-2020.) $)
  19.9t $p |- ( F/ x ph -> ( E. x ph <-> ph ) ) $=
    ( wnf wex id 19.9d 19.8a impbid1 ) ABCZABDAAIBIEFABGH $.

  ${
    19.9.1 $e |- F/ x ph $.
    $( A wff may be existentially quantified with a variable not free in it.
       Version of ~ 19.3 with an existential quantifier.  Theorem 19.9 of
       [Margaris] p. 89.  See ~ 19.9v for a version requiring fewer axioms.
       (Contributed by FL, 24-Mar-2007.)  (Revised by Mario Carneiro,
       24-Sep-2016.)  (Proof shortened by Wolf Lammen, 30-Dec-2017.)  Revised
       to shorten other proofs.  (Revised by Wolf Lammen, 14-Jul-2020.) $)
    19.9 $p |- ( E. x ph <-> ph ) $=
      ( wnf wex wb 19.9t ax-mp ) ABDABEAFCABGH $.
  $}

  $( Closed form of Theorem 19.21 of [Margaris] p. 90, see ~ 19.21 .
     (Contributed by NM, 27-May-1997.)  (Revised by Mario Carneiro,
     24-Sep-2016.)  (Proof shortened by Wolf Lammen, 3-Jan-2018.) ~ df-nf
     changed.  (Revised by Wolf Lammen, 11-Sep-2021.)  (Proof shortened by BJ,
     3-Nov-2021.) $)
  19.21t $p |- ( F/ x ph -> ( A. x ( ph -> ps ) <-> ( ph -> A. x ps ) ) ) $=
    ( wnf wex wal wi 19.38a 19.9t imbi1d bitr3d ) ACDZACEZBCFZGABGCFANGABCHLMAN
    ACIJK $.

  ${
    19.21.1 $e |- F/ x ph $.
    $( Theorem 19.21 of [Margaris] p. 90.  The hypothesis can be thought of
       as " ` x ` is not free in ` ph ` ".  See ~ 19.21v for a version
       requiring fewer axioms.  See also ~ 19.21h .  (Contributed by NM,
       14-May-1993.)  (Revised by Mario Carneiro, 24-Sep-2016.) ~ df-nf
       changed.  (Revised by Wolf Lammen, 18-Sep-2021.) $)
    19.21 $p |- ( A. x ( ph -> ps ) <-> ( ph -> A. x ps ) ) $=
      ( wnf wi wal wb 19.21t ax-mp ) ACEABFCGABCGFHDABCIJ $.
  $}

  ${
    stdpc5.1 $e |- F/ x ph $.
    $( An axiom scheme of standard predicate calculus that emulates Axiom 5 of
       [Mendelson] p. 69.  The hypothesis ` F/ x ph ` can be thought of as
       emulating " ` x ` is not free in ` ph ` ".  With this definition, the
       meaning of "not free" is less restrictive than the usual textbook
       definition; for example ` x ` would not (for us) be free in ` x = x ` by
       ~ nfequid .  This theorem scheme can be proved as a metatheorem of
       Mendelson's axiom system, even though it is slightly stronger than his
       Axiom 5.  See ~ stdpc5v for a version requiring fewer axioms.
       (Contributed by NM, 22-Sep-1993.)  (Revised by Mario Carneiro,
       12-Oct-2016.)  (Proof shortened by Wolf Lammen, 1-Jan-2018.)  Remove
       dependency on ~ ax-10 .  (Revised by Wolf Lammen, 4-Jul-2021.)  (Proof
       shortened by Wolf Lammen, 11-Oct-2021.) $)
    stdpc5 $p |- ( A. x ( ph -> ps ) -> ( ph -> A. x ps ) ) $=
      ( wi wal 19.21 biimpi ) ABECFABCFEABCDGH $.
  $}

  ${
    19.21-2.1 $e |- F/ x ph $.
    19.21-2.2 $e |- F/ y ph $.
    $( Version of ~ 19.21 with two quantifiers.  (Contributed by NM,
       4-Feb-2005.) $)
    19.21-2 $p |- ( A. x A. y ( ph -> ps ) <-> ( ph -> A. x A. y ps ) ) $=
      ( wi wal 19.21 albii bitri ) ABGDHZCHABDHZGZCHAMCHGLNCABDFIJAMCEIK $.
  $}

  $( Closed form of Theorem 19.23 of [Margaris] p. 90.  See ~ 19.23 .
     (Contributed by NM, 7-Nov-2005.)  (Proof shortened by Wolf Lammen,
     13-Aug-2020.) ~ df-nf changed.  (Revised by Wolf Lammen, 11-Sep-2021.)
     (Proof shortened by BJ, 8-Oct-2022.) $)
  19.23t $p |- ( F/ x ps -> ( A. x ( ph -> ps ) <-> ( E. x ph -> ps ) ) ) $=
    ( wnf wex wal wi 19.38b 19.3t imbi2d bitr3d ) BCDZACEZBCFZGABGCFMBGABCHLNBM
    BCIJK $.

  $( Obsolete proof of 19.23t as of 8-Oct-2022.  (Contributed by NM,
     7-Nov-2005.)  (Proof shortened by Wolf Lammen, 13-Aug-2020.) ~ df-nf
     changed.  (Revised by Wolf Lammen, 11-Sep-2021.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  19.23tOLD $p |- ( F/ x ps -> ( A. x ( ph -> ps ) <-> ( E. x ph -> ps ) ) ) $=
    ( wnf wn wi wal wex wb nfnt 19.21t syl con34b albii eximal 3bitr4g ) BCDZBE
    ZAEZFZCGZRSCGFZABFZCGACHBFQRCDUAUBIBCJRSCKLUCTCABMNABCOP $.

  ${
    19.23.1 $e |- F/ x ps $.
    $( Theorem 19.23 of [Margaris] p. 90.  See ~ 19.23v for a version requiring
       fewer axioms.  (Contributed by NM, 24-Jan-1993.)  (Revised by Mario
       Carneiro, 24-Sep-2016.) $)
    19.23 $p |- ( A. x ( ph -> ps ) <-> ( E. x ph -> ps ) ) $=
      ( wnf wi wal wex wb 19.23t ax-mp ) BCEABFCGACHBFIDABCJK $.
  $}

  ${
    alimd.1 $e |- F/ x ph $.
    alimd.2 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Deduction form of Theorem 19.20 of [Margaris] p. 90, see ~ alim .
       (Contributed by Mario Carneiro, 24-Sep-2016.) $)
    alimd $p |- ( ph -> ( A. x ps -> A. x ch ) ) $=
      ( nf5ri alimdh ) ABCDADEGFH $.
  $}

  ${
    alrimi.1 $e |- F/ x ph $.
    alrimi.2 $e |- ( ph -> ps ) $.
    $( Inference form of Theorem 19.21 of [Margaris] p. 90, see ~ 19.21 .
       (Contributed by Mario Carneiro, 24-Sep-2016.) $)
    alrimi $p |- ( ph -> A. x ps ) $=
      ( nf5ri alrimih ) ABCACDFEG $.
  $}

  ${
    alrimdd.1 $e |- F/ x ph $.
    alrimdd.2 $e |- ( ph -> F/ x ps ) $.
    alrimdd.3 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Deduction form of Theorem 19.21 of [Margaris] p. 90, see ~ 19.21 .
       (Contributed by Mario Carneiro, 24-Sep-2016.) $)
    alrimdd $p |- ( ph -> ( ps -> A. x ch ) ) $=
      ( wal nf5rd alimd syld ) ABBDHCDHABDFIABCDEGJK $.
  $}

  ${
    alrimd.1 $e |- F/ x ph $.
    alrimd.2 $e |- F/ x ps $.
    alrimd.3 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Deduction form of Theorem 19.21 of [Margaris] p. 90, see ~ 19.21 .
       (Contributed by Mario Carneiro, 24-Sep-2016.) $)
    alrimd $p |- ( ph -> ( ps -> A. x ch ) ) $=
      ( wnf a1i alrimdd ) ABCDEBDHAFIGJ $.
  $}

  ${
    eximd.1 $e |- F/ x ph $.
    eximd.2 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Deduction form of Theorem 19.22 of [Margaris] p. 90, see ~ exim .
       (Contributed by NM, 29-Jun-1993.)  (Revised by Mario Carneiro,
       24-Sep-2016.) $)
    eximd $p |- ( ph -> ( E. x ps -> E. x ch ) ) $=
      ( nf5ri eximdh ) ABCDADEGFH $.
  $}

  ${
    exlimi.1 $e |- F/ x ps $.
    exlimi.2 $e |- ( ph -> ps ) $.
    $( Inference associated with ~ 19.23 .  See ~ exlimiv for a version with a
       disjoint variable condition requiring fewer axioms.  (Contributed by NM,
       10-Jan-1993.)  (Revised by Mario Carneiro, 24-Sep-2016.) $)
    exlimi $p |- ( E. x ph -> ps ) $=
      ( wi wex 19.23 mpgbi ) ABFACGBFCABCDHEI $.
  $}

  ${
    exlimd.1 $e |- F/ x ph $.
    exlimd.2 $e |- F/ x ch $.
    exlimd.3 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Deduction form of Theorem 19.9 of [Margaris] p. 89.  (Contributed by NM,
       23-Jan-1993.)  (Revised by Mario Carneiro, 24-Sep-2016.)  (Proof
       shortened by Wolf Lammen, 12-Jan-2018.) $)
    exlimd $p |- ( ph -> ( E. x ps -> ch ) ) $=
      ( wex eximd 19.9 syl6ib ) ABDHCDHCABCDEGICDFJK $.
  $}

  ${
    exlimdd.1 $e |- F/ x ph $.
    exlimdd.2 $e |- F/ x ch $.
    exlimdd.3 $e |- ( ph -> E. x ps ) $.
    exlimdd.4 $e |- ( ( ph /\ ps ) -> ch ) $.
    $( Existential elimination rule of natural deduction.  (Contributed by
       Mario Carneiro, 9-Feb-2017.) $)
    exlimdd $p |- ( ph -> ch ) $=
      ( wex ex exlimd mpd ) ABDICGABCDEFABCHJKL $.
  $}

  ${
    exlimimdd.1 $e |- F/ x ph $.
    exlimimdd.2 $e |- F/ x ch $.
    exlimimdd.3 $e |- ( ph -> E. x ps ) $.
    exlimimdd.4 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Existential elimination rule of natural deduction.  (Contributed by ML,
       17-Jul-2020.) $)
    exlimimdd $p |- ( ph -> ch ) $=
      ( imp exlimdd ) ABCDEFGABCHIJ $.
  $}

  ${
    nexd.1 $e |- F/ x ph $.
    nexd.2 $e |- ( ph -> -. ps ) $.
    $( Deduction for generalization rule for negated wff.  (Contributed by
       Mario Carneiro, 24-Sep-2016.) $)
    nexd $p |- ( ph -> -. E. x ps ) $=
      ( nf5ri nexdh ) ABCACDFEG $.
  $}

  ${
    albid.1 $e |- F/ x ph $.
    albid.2 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Formula-building rule for universal quantifier (deduction form).
       (Contributed by Mario Carneiro, 24-Sep-2016.) $)
    albid $p |- ( ph -> ( A. x ps <-> A. x ch ) ) $=
      ( nf5ri albidh ) ABCDADEGFH $.

    $( Formula-building rule for existential quantifier (deduction form).
       (Contributed by Mario Carneiro, 24-Sep-2016.) $)
    exbid $p |- ( ph -> ( E. x ps <-> E. x ch ) ) $=
      ( nf5ri exbidh ) ABCDADEGFH $.

    $( An equality theorem for effectively not free.  (Contributed by Mario
       Carneiro, 4-Oct-2016.) ~ df-nf changed.  (Revised by Wolf Lammen,
       18-Sep-2021.) $)
    nfbidf $p |- ( ph -> ( F/ x ps <-> F/ x ch ) ) $=
      ( wex wal wi wnf exbid albid imbi12d df-nf 3bitr4g ) ABDGZBDHZICDGZCDHZIB
      DJCDJAPRQSABCDEFKABCDEFLMBDNCDNO $.
  $}

  ${
    19.16.1 $e |- F/ x ph $.
    $( Theorem 19.16 of [Margaris] p. 90.  (Contributed by NM, 12-Mar-1993.) $)
    19.16 $p |- ( A. x ( ph <-> ps ) -> ( ph <-> A. x ps ) ) $=
      ( wal wb 19.3 albi syl5bbr ) AACEABFCEBCEACDGABCHI $.
  $}

  ${
    19.17.1 $e |- F/ x ps $.
    $( Theorem 19.17 of [Margaris] p. 90.  (Contributed by NM, 12-Mar-1993.) $)
    19.17 $p |- ( A. x ( ph <-> ps ) -> ( A. x ph <-> ps ) ) $=
      ( wb wal albi 19.3 syl6bb ) ABECFACFBCFBABCGBCDHI $.
  $}

  ${
    19.27.1 $e |- F/ x ps $.
    $( Theorem 19.27 of [Margaris] p. 90.  See ~ 19.27v for a version requiring
       fewer axioms.  (Contributed by NM, 21-Jun-1993.) $)
    19.27 $p |- ( A. x ( ph /\ ps ) <-> ( A. x ph /\ ps ) ) $=
      ( wa wal 19.26 19.3 anbi2i bitri ) ABECFACFZBCFZEKBEABCGLBKBCDHIJ $.
  $}

  ${
    19.28.1 $e |- F/ x ph $.
    $( Theorem 19.28 of [Margaris] p. 90.  See ~ 19.28v for a version requiring
       fewer axioms.  (Contributed by NM, 1-Aug-1993.) $)
    19.28 $p |- ( A. x ( ph /\ ps ) <-> ( ph /\ A. x ps ) ) $=
      ( wa wal 19.26 19.3 anbi1i bitri ) ABECFACFZBCFZEALEABCGKALACDHIJ $.
  $}

  ${
    19.19.1 $e |- F/ x ph $.
    $( Theorem 19.19 of [Margaris] p. 90.  (Contributed by NM, 12-Mar-1993.) $)
    19.19 $p |- ( A. x ( ph <-> ps ) -> ( ph <-> E. x ps ) ) $=
      ( wex wb wal 19.9 exbi syl5bbr ) AACEABFCGBCEACDHABCIJ $.
  $}

  ${
    19.36.1 $e |- F/ x ps $.
    $( Theorem 19.36 of [Margaris] p. 90.  See ~ 19.36v for a version requiring
       fewer axioms.  (Contributed by NM, 24-Jun-1993.) $)
    19.36 $p |- ( E. x ( ph -> ps ) <-> ( A. x ph -> ps ) ) $=
      ( wi wex wal 19.35 19.9 imbi2i bitri ) ABECFACGZBCFZELBEABCHMBLBCDIJK $.

    19.36i.2 $e |- E. x ( ph -> ps ) $.
    $( Inference associated with ~ 19.36 .  See ~ 19.36iv for a version
       requiring fewer axioms.  (Contributed by NM, 24-Jun-1993.) $)
    19.36i $p |- ( A. x ph -> ps ) $=
      ( wi wex wal 19.36 mpbi ) ABFCGACHBFEABCDIJ $.
  $}

  ${
    19.37.1 $e |- F/ x ph $.
    $( Theorem 19.37 of [Margaris] p. 90.  See ~ 19.37v for a version requiring
       fewer axioms.  (Contributed by NM, 21-Jun-1993.) $)
    19.37 $p |- ( E. x ( ph -> ps ) <-> ( ph -> E. x ps ) ) $=
      ( wi wex wal 19.35 19.3 imbi1i bitri ) ABECFACGZBCFZEAMEABCHLAMACDIJK $.
  $}

  ${
    19.32.1 $e |- F/ x ph $.
    $( Theorem 19.32 of [Margaris] p. 90.  See ~ 19.32v for a version requiring
       fewer axioms.  (Contributed by NM, 14-May-1993.)  (Revised by Mario
       Carneiro, 24-Sep-2016.) $)
    19.32 $p |- ( A. x ( ph \/ ps ) <-> ( ph \/ A. x ps ) ) $=
      ( wn wi wal wo nfn 19.21 df-or albii 3bitr4i ) AEZBFZCGNBCGZFABHZCGAPHNBC
      ACDIJQOCABKLAPKM $.
  $}

  ${
    19.31.1 $e |- F/ x ps $.
    $( Theorem 19.31 of [Margaris] p. 90.  See ~ 19.31v for a version requiring
       fewer axioms.  (Contributed by NM, 14-May-1993.) $)
    19.31 $p |- ( A. x ( ph \/ ps ) <-> ( A. x ph \/ ps ) ) $=
      ( wo wal 19.32 orcom albii 3bitr4i ) BAEZCFBACFZEABEZCFLBEBACDGMKCABHILBH
      J $.
  $}

  ${
    19.41.1 $e |- F/ x ps $.
    $( Theorem 19.41 of [Margaris] p. 90.  See ~ 19.41v for a version requiring
       fewer axioms.  (Contributed by NM, 14-May-1993.)  (Proof shortened by
       Andrew Salmon, 25-May-2011.)  (Proof shortened by Wolf Lammen,
       12-Jan-2018.) $)
    19.41 $p |- ( E. x ( ph /\ ps ) <-> ( E. x ph /\ ps ) ) $=
      ( wa wex 19.40 19.9 anbi2i sylib pm3.21 eximd impcom impbii ) ABEZCFZACFZ
      BEZPQBCFZERABCGSBQBCDHIJBQPBAOCDBAKLMN $.
  $}

  ${
    19.42.1 $e |- F/ x ph $.
    $( One direction of ~ 19.42 .  Obsolete as of 9-Oct-2022.  (Contributed by
       Wolf Lammen, 10-Jul-2021.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    19.42-1OLD $p |- ( ( ph /\ E. x ps ) -> E. x ( ph /\ ps ) ) $=
      ( wex wa pm3.2 eximd imp ) ABCEABFZCEABJCDABGHI $.

    $( Theorem 19.42 of [Margaris] p. 90.  See ~ 19.42v for a version requiring
       fewer axioms.  See ~ exan for an immediate version.  (Contributed by NM,
       18-Aug-1993.) $)
    19.42 $p |- ( E. x ( ph /\ ps ) <-> ( ph /\ E. x ps ) ) $=
      ( wa wex 19.41 exancom ancom 3bitr4i ) BAECFBCFZAEABECFAKEBACDGABCHAKIJ
      $.
  $}

  ${
    19.44.1 $e |- F/ x ps $.
    $( Theorem 19.44 of [Margaris] p. 90.  See ~ 19.44v for a version requiring
       fewer axioms.  (Contributed by NM, 12-Mar-1993.) $)
    19.44 $p |- ( E. x ( ph \/ ps ) <-> ( E. x ph \/ ps ) ) $=
      ( wo wex 19.43 19.9 orbi2i bitri ) ABECFACFZBCFZEKBEABCGLBKBCDHIJ $.
  $}

  ${
    19.45.1 $e |- F/ x ph $.
    $( Theorem 19.45 of [Margaris] p. 90.  See ~ 19.45v for a version requiring
       fewer axioms.  (Contributed by NM, 12-Mar-1993.) $)
    19.45 $p |- ( E. x ( ph \/ ps ) <-> ( ph \/ E. x ps ) ) $=
      ( wo wex 19.43 19.9 orbi1i bitri ) ABECFACFZBCFZEALEABCGKALACDHIJ $.
  $}

  ${
    sbimd.1 $e |- F/ x ph $.
    sbimd.2 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Deduction substituting both sides of an implication.  (Contributed by
       Wolf Lammen, 24-Nov-2022.)  Revise ~ df-sb .  (Revised by Steven Nguyen,
       9-Jul-2023.) $)
    sbimd $p |- ( ph -> ( [ y / x ] ps -> [ y / x ] ch ) ) $=
      ( wi wal wsb alrimi spsbim syl ) ABCHZDIBDEJCDEJHANDFGKBCDELM $.
  $}

  ${
    sbbid.1 $e |- F/ x ph $.
    sbbid.2 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Deduction substituting both sides of a biconditional.  (Contributed by
       NM, 30-Jun-1993.)  Remove dependency on ~ ax-10 and ~ ax-13 .  (Revised
       by Wolf Lammen, 24-Nov-2022.)  Revise ~ df-sb .  (Revised by Steven
       Nguyen, 11-Jul-2023.) $)
    sbbid $p |- ( ph -> ( [ y / x ] ps <-> [ y / x ] ch ) ) $=
      ( wb wal wsb alrimi spsbbi syl ) ABCHZDIBDEJCDEJHANDFGKBCDELM $.

    2sbbid.1 $e |- F/ y ph $.
    $( Deduction doubly substituting both sides of a biconditional.
       (Contributed by AV, 30-Jul-2023.) $)
    2sbbid $p |- ( ph -> ( [ t / x ] [ u / y ] ps
                       <-> [ t / x ] [ u / y ] ch ) ) $=
      ( wsb sbbid ) ABEFKCEFKDGHABCEFJILL $.
  $}

  ${
    sbbidOLD.1 $e |- F/ x ph $.
    sbbidOLD.2 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Obsolete version of ~ sbbid as of 10-Jul-2023.  Deduction substituting
       both sides of a biconditional.  (Contributed by NM, 30-Jun-1993.)
       Remove dependency on ~ ax-10 and ~ ax-13 .  (Revised by Wolf Lammen,
       24-Nov-2022.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    sbbidOLD $p |- ( ph -> ( [ y / x ] ps <-> [ y / x ] ch ) ) $=
      ( wsb biimpd sbimd biimprd impbid ) ABDEHCDEHABCDEFABCGIJACBDEFABCGKJL $.
  $}

  ${
    $d y x $.  $d y t $.  $d y ph $.
    $( An equality theorem for substitution.  (Contributed by NM, 16-May-1993.)
       Revise ~ df-sb .  (Revised by BJ, 22-Dec-2020.) $)
    sbequ1 $p |- ( x = t -> ( ph -> [ t / x ] ph ) ) $=
      ( vy weq wi wal wsb equeucl ax12v syl6 com23 alrimdv df-sb syl6ibr ) BCEZ
      ADCEZBDEZAFBGZFZDGABCHPATDPQASPQRASFBDCIABDJKLMABDCNO $.
  $}

  ${
    $d y x $.  $d y t $.  $d y ph $.
    $( An equality theorem for substitution.  (Contributed by NM, 16-May-1993.)
       (Proof shortened by Wolf Lammen, 25-Feb-2018.)  Revise ~ df-sb .
       (Revised by BJ, 22-Dec-2020.) $)
    sbequ2 $p |- ( x = t -> ( [ t / x ] ph -> ph ) ) $=
      ( vy weq wa wex wsb equvinva wi df-sb equcomi imim12i impcomd alimi sylbi
      wal sp 19.23v sylib syl5com ) BCEBDEZCDEZFZDGZABCHZABCDIUFUDAJZDQZUEAJUFD
      CEZUBAJZBQZJZDQUHABDCKULUGDULUCUBAUCUIUKUJCDLUJBRMNOPUDADSTUA $.
  $}

  $( One of the two equality axioms of standard predicate calculus, called
     substitutivity of equality.  (The other one is ~ stdpc6 .)  Translated to
     traditional notation, it can be read:
      " ` x = y -> ( ph ( x , x ) -> ph ( x , y ) ) ` , provided that ` y ` is
     free for ` x ` in ` ph ( x , x ) ` ".  Axiom 7 of [Mendelson] p. 95.
     (Contributed by NM, 15-Feb-2005.) $)
  stdpc7 $p |- ( x = y -> ( [ x / y ] ph -> ph ) ) $=
    ( wsb wi sbequ2 equcoms ) ACBDAECBACBFG $.

  $( An equality theorem for substitution.  (Contributed by NM,
     14-May-1993.) $)
  sbequ12 $p |- ( x = y -> ( ph <-> [ y / x ] ph ) ) $=
    ( weq wsb sbequ1 sbequ2 impbid ) BCDAABCEABCFABCGH $.

  $( An equality theorem for substitution.  (Contributed by NM, 6-Oct-2004.)
     (Proof shortened by Andrew Salmon, 21-Jun-2011.) $)
  sbequ12r $p |- ( x = y -> ( [ x / y ] ph <-> ph ) ) $=
    ( wsb wb weq sbequ12 bicomd equcoms ) ACBDZAECBCBFAJACBGHI $.

  $( An equality theorem for substitution.  (Contributed by NM, 2-Jun-1993.)
     (Proof shortened by Wolf Lammen, 23-Jun-2019.) $)
  sbequ12a $p |- ( x = y -> ( [ y / x ] ph <-> [ x / y ] ph ) ) $=
    ( weq wsb sbequ12r sbequ12 bitr2d ) BCDACBEAABCEABCFABCGH $.

  $( An identity theorem for substitution.  Remark 9.1 in [Megill] p. 447 (p.
     15 of the preprint).  (Contributed by NM, 26-May-1993.)  (Proof shortened
     by Wolf Lammen, 30-Sep-2018.) $)
  sbid $p |- ( [ x / x ] ph <-> ph ) $=
    ( weq wsb wb equid sbequ12r ax-mp ) BBCABBDAEBFABBGH $.

  ${
    $d x y $.
    $( Version of ~ sbco with a disjoint variable condition using fewer axioms.
       (Contributed by Gino Giotto, 7-Aug-2023.) $)
    sbcov $p |- ( [ y / x ] [ x / y ] ph <-> [ y / x ] ph ) $=
      ( wsb sbcom3vv sbid sbbii bitri ) ACBDBCDACCDZBCDABCDACBCEIABCACFGH $.
  $}

  ${
    $d x y $.
    $( Equivalence for substitution.  (Contributed by NM, 2-Jun-1993.)  (Proof
       shortened by Wolf Lammen, 23-Sep-2018.) $)
    sb6a $p |- ( [ y / x ] ph <-> A. x ( x = y -> [ x / y ] ph ) ) $=
      ( wsb weq wi wal sbcov sb6 bitr3i ) ABCDACBDZBCDBCEKFBGABCHKBCIJ $.
  $}

  ${
    $d t x $.  $d x ph $.
    $( Reverting substitution yields the original expression.  Based on fewer
       axioms than ~ sbid2v , at the expense of an extra distinct variable
       condition.  (Contributed by Wolf Lammen, 5-Aug-2023.) $)
    sbid2vw $p |- ( [ t / x ] [ x / t ] ph <-> ph ) $=
      ( wsb sbco2vv sbid bitri ) ACBDBCDACCDAACCBEACFG $.
  $}

  ${
    $d w x y $.  $d w z $.  $d w ph $.
    $( Generalization of ~ axc16 .  Use the latter when sufficient.  This proof
       only requires, on top of { ~ ax-1 -- ~ ax-7 }, theorem ~ ax12v .
       (Contributed by NM, 15-May-1993.)  (Proof shortened by Andrew Salmon,
       25-May-2011.)  (Proof shortened by Wolf Lammen, 18-Feb-2018.)  Remove
       dependency on ~ ax-13 , along an idea of BJ. (Revised by Wolf Lammen,
       30-Nov-2019.)  (Revised by BJ, 7-Jul-2021.)  Shorten ~ axc11rv .
       (Revised by Wolf Lammen, 11-Oct-2021.) $)
    axc16g $p |- ( A. x x = y -> ( ph -> A. z ph ) ) $=
      ( vw weq wal wi aevlem ax12v sps pm2.27 al2imi syld syl ) BCFBGDEFZDGZAAD
      GZHBCDEIQAPAHZDGZRPATHDADEJKPSADPALMNO $.
  $}

  ${
    $d x y $.
    $( Proof of older axiom ~ ax-c16 .  (Contributed by NM, 8-Nov-2006.)
       (Revised by NM, 22-Sep-2017.) $)
    axc16 $p |- ( A. x x = y -> ( ph -> A. x ph ) ) $=
      ( axc16g ) ABCBD $.
  $}

  ${
    $d x y $.
    $( Biconditional strengthening of ~ axc16g .  (Contributed by NM,
       15-May-1993.) $)
    axc16gb $p |- ( A. x x = y -> ( ph <-> A. z ph ) ) $=
      ( weq wal axc16g sp impbid1 ) BCEBFAADFABCDGADHI $.
  $}

  ${
    $d x y $.
    $( If ~ dtru is false, then there is only one element in the universe, so
       everything satisfies ` F/ ` .  (Contributed by Mario Carneiro,
       7-Oct-2016.)  Remove dependency on ~ ax-11 .  (Revised by Wolf Lammen,
       9-Sep-2018.)  (Proof shortened by BJ, 14-Jun-2019.)  Remove dependency
       on ~ ax-10 .  (Revised by Wolf lammen, 12-Oct-2021.) $)
    axc16nf $p |- ( A. x x = y -> F/ z ph ) $=
      ( weq wal wex wn df-ex axc16g con1d syl5bi syld nfd ) BCEBFZADOADGZAADFPA
      HZDFZHOAADIOARQBCDJKLABCDJMN $.
  $}

  ${
    $d x y $.
    $( Version of ~ axc11 with a disjoint variable condition on ` x ` and
       ` y ` , which is provable, on top of { ~ ax-1 -- ~ ax-7 }, from ~ ax12v
       (contrary to ~ axc11 which seems to require the full ~ ax-12 and
       ~ ax-13 ).  (Contributed by BJ, 6-Jul-2021.)  (Proof shortened by Wolf
       Lammen, 11-Oct-2021.) $)
    axc11v $p |- ( A. x x = y -> ( A. x ph -> A. y ph ) ) $=
      ( weq wal axc16g spsd ) BCDBEAACEBABCCFG $.

    $( Version of ~ axc11r with a disjoint variable condition on ` x ` and
       ` y ` , which is provable, on top of { ~ ax-1 -- ~ ax-7 }, from ~ ax12v
       (contrary to ~ axc11 which seems to require the full ~ ax-12 and
       ~ ax-13 , and to ~ axc11r which seems to require the full ~ ax-12 ).
       (Contributed by BJ, 6-Jul-2021.)  (Proof shortened by Wolf Lammen,
       11-Oct-2021.) $)
    axc11rv $p |- ( A. x x = y -> ( A. y ph -> A. x ph ) ) $=
      ( weq wal axc16 spsd ) BCDBEAABECABCFG $.
  $}

  ${
    $d x y $.
    spimv1.nf $e |- F/ x ps $.
    spimv1.1 $e |- ( x = y -> ( ph -> ps ) ) $.
    $( Version of ~ spim with a disjoint variable condition, which does not
       require ~ ax-13 .  See ~ spimvw for a version with two disjoint variable
       conditions, requiring fewer axioms, and ~ spimv for another variant.
       (Contributed by BJ, 31-May-2019.) $)
    spimv1 $p |- ( A. x ph -> ps ) $=
      ( weq wi ax6ev eximii 19.36i ) ABCECDGABHCCDIFJK $.
  $}

  ${
    $d x y $.  $d y ph $.
    cbv3v2.nf $e |- F/ x ps $.
    cbv3v2.1 $e |- ( x = y -> ( ph -> ps ) ) $.
    $( Version of ~ cbv3 with two disjoint variable conditions, which does not
       require ~ ax-11 nor ~ ax-13 .  (Contributed by BJ, 24-Jun-2019.)  (Proof
       shortened by Wolf Lammen, 30-Aug-2021.) $)
    cbv3v2 $p |- ( A. x ph -> A. y ps ) $=
      ( wal spimv1 alrimiv ) ACGBDABCDEFHI $.
  $}

  ${
    $d x y $.
    equsalv.nf $e |- F/ x ps $.
    equsalv.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Version of ~ equsal with a disjoint variable condition, which does not
       require ~ ax-13 .  See ~ equsalvw for a version with two disjoint
       variable conditions requiring fewer axioms.  See also the dual form
       ~ equsexv .  (Contributed by BJ, 31-May-2019.) $)
    equsalv $p |- ( A. x ( x = y -> ph ) <-> ps ) $=
      ( weq wi wal wex 19.23 pm5.74i albii ax6ev a1bi 3bitr4i ) CDGZBHZCIQCJZBH
      QAHZCIBQBCEKTRCQABFLMSBCDNOP $.

    $( Version of ~ equsex with a disjoint variable condition, which does not
       require ~ ax-13 .  See ~ equsexvw for a version with two disjoint
       variable conditions requiring fewer axioms.  See also the dual form
       ~ equsalv .  (Contributed by BJ, 31-May-2019.) $)
    equsexv $p |- ( E. x ( x = y /\ ph ) <-> ps ) $=
      ( weq wa wex pm5.32i exbii ax6ev 19.41 mpbiran bitri ) CDGZAHZCIPBHZCIZBQ
      RCPABFJKSPCIBCDLPBCEMNO $.
  $}

  $( Substitution has no effect on a non-free variable.  (Contributed by NM,
     30-May-2009.)  (Revised by Mario Carneiro, 12-Oct-2016.)  (Proof shortened
     by Wolf Lammen, 3-May-2018.) $)
  sbft $p |- ( F/ x ph -> ( [ y / x ] ph <-> ph ) ) $=
    ( wnf wsb wex spsbe 19.9t syl5ib wal nf5r stdpc4 syl6 impbid ) ABDZABCEZAPA
    BFOAABCGABHIOAABJPABKABCLMN $.

  ${
    sbf.1 $e |- F/ x ph $.
    $( Substitution for a variable not free in a wff does not affect it.  For a
       version requiring disjoint variables but fewer axioms, see ~ sbv .
       (Contributed by NM, 14-May-1993.)  (Revised by Mario Carneiro,
       4-Oct-2016.) $)
    sbf $p |- ( [ y / x ] ph <-> ph ) $=
      ( wnf wsb wb sbft ax-mp ) ABEABCFAGDABCHI $.
  $}

  ${
    $d x y $.
    $( Two equivalent ways of expressing the proper substitution of ` y ` for
       ` x ` in ` ph ` , when ` x ` and ` y ` are distinct, namely, alternate
       definitions ~ sb5 and ~ sb6 .  Theorem 6.2 of [Quine] p. 40.  The proof
       does not involve ~ df-sb .  The implication "to the left" is ~ equs4 and
       does not require any disjoint variable condition (but the version with a
       disjoint variable condition, ~ equs4v , requires fewer axioms).  Theorem
       ~ equs45f replaces the disjoint variable condition with a non-freeness
       hypothesis and ~ equs5 replaces it with a distinctor as antecedent.
       (Contributed by NM, 14-Apr-2008.)  Revised to use ~ equsexv in place of
       ~ equsex in order to remove dependency on ~ ax-13 .  (Revised by BJ,
       20-Dec-2020.) $)
    sb56 $p |- ( E. x ( x = y /\ ph ) <-> A. x ( x = y -> ph ) ) $=
      ( weq wi wal nfa1 ax12v2 sp com12 impbid equsexv ) ABCDZAEZBFZBCNBGMAOABC
      HOMANBIJKL $.
  $}

  ${
    $d x y $.
    $( Obsolete version of ~ sb6 as of 7-Jul-2023.  Equivalence for
       substitution.  Compare Theorem 6.2 of [Quine] p. 40.  Also proved as
       Lemmas 16 and 17 of [Tarski] p. 70.  The implication "to the left",
       ~ sb2vOLD , also holds without a disjoint variable condition ( ~ sb2 ).
       Theorem ~ sb6f replaces the disjoint variable condition with a
       non-freeness hypothesis.  Theorem ~ sb4b replaces it with a distinctor
       antecedent.  (Contributed by NM, 18-Aug-1993.)  (Proof shortened by Wolf
       Lammen, 21-Sep-2018.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    sb6OLD $p |- ( [ y / x ] ph <-> A. x ( x = y -> ph ) ) $=
      ( wsb weq wi wal sb4vOLD sb2vOLD impbii ) ABCDBCEAFBGABCHABCIJ $.
  $}

  ${
    $d x y $.
    $( Alternate definition of substitution when variables are disjoint.
       Similar to Theorem 6.1 of [Quine] p. 40.  The implication "to the right"
       is ~ sb1 and does not require any disjoint variable condition.  Theorem
       ~ sb5f replaces the disjoint variable condition with a non-freeness
       hypothesis.  (Contributed by NM, 18-Aug-1993.) $)
    sb5 $p |- ( [ y / x ] ph <-> E. x ( x = y /\ ph ) ) $=
      ( wsb weq wi wal wa wex sb6 sb56 bitr4i ) ABCDBCEZAFBGMAHBIABCJABCKL $.
  $}

  ${
    $d x y z $.  $d w y $.
    $( Equivalence for double substitution.  (Contributed by NM,
       3-Feb-2005.) $)
    2sb5 $p |- ( [ z / x ] [ w / y ] ph <->
               E. x E. y ( ( x = z /\ y = w ) /\ ph ) ) $=
      ( wsb weq wa wex sb5 19.42v anass exbii anbi2i 3bitr4ri bitri ) ACEFZBDFB
      DGZQHZBIRCEGZHAHZCIZBIQBDJSUBBRTAHZHZCIRUCCIZHUBSRUCCKUAUDCRTALMQUERACEJN
      OMP $.

    $( Equivalence for double substitution.  (Contributed by NM,
       3-Feb-2005.) $)
    2sb6 $p |- ( [ z / x ] [ w / y ] ph <->
               A. x A. y ( ( x = z /\ y = w ) -> ph ) ) $=
      ( wsb weq wi wal wa sb6 19.21v impexp albii imbi2i 3bitr4ri bitri ) ACEFZ
      BDFBDGZRHZBISCEGZJAHZCIZBIRBDKTUCBSUAAHZHZCISUDCIZHUCTSUDCLUBUECSUAAMNRUF
      SACEKOPNQ $.
  $}

  ${
    $d y t $.  $d y x $.  $d y ph $.
    $( An alternate definition of proper substitution ~ df-sb .  By introducing
       a dummy variable ` y ` in the definiens, we are able to eliminate any
       distinct variable restrictions among the variables ` t ` , ` x ` , and
       ` ph ` of the definiendum.  No distinct variable conflicts arise because
       ` y ` effectively insulates ` t ` from ` x ` .  To achieve this, we use
       a chain of two substitutions in the form of ~ sb5 , first ` y ` for
       ` x ` then ` t ` for ` y ` .  Compare Definition 2.1'' of [Quine] p. 17,
       which is obtained from this theorem by applying ~ df-clab .  Theorem
       ~ sb7h provides a version where ` ph ` and ` y ` don't have to be
       distinct.  (Contributed by NM, 28-Jan-2004.)  Revise ~ df-sb .  (Revised
       by BJ, 25-Dec-2020.) $)
    dfsb7 $p |- ( [ t / x ] ph <-> E. y ( y = t /\ E. x ( x = y /\ ph ) ) ) $=
      ( wsb weq wi wal wa wex df-sb sb56 bicomi anbi2i exbii 3bitr2i ) ABDECDFZ
      BCFZAGBHZGCHQSIZCJQRAIBJZIZCJABCDKSCDLTUBCSUAQUASABCLMNOP $.
  $}

  ${
    $d y t $.  $d y x $.  $d y ph $.
    $( Negation inside and outside of substitution are equivalent.
       (Contributed by NM, 14-May-1993.)  (Proof shortened by Wolf Lammen,
       30-Apr-2018.)  Revise ~ df-sb .  (Revised by BJ, 25-Dec-2020.) $)
    sbn $p |- ( [ t / x ] -. ph <-> -. [ t / x ] ph ) $=
      ( vy wn wsb weq wi wal wa wex df-sb alinexa imbi2i albii xchbinxr 3bitri
      dfsb7 ) AEZBCFDCGZBDGZSHBIZHZDITUAAJBKZEZHZDIZABCFZESBDCLUCUFDUBUETUAABMN
      OUGTUDJDKUHTUDDMABDCRPQ $.
  $}

  ${
    $d x y $.
    $( The setvar ` x ` is not free in ` [ y / x ] ph ` when ` x ` and ` y `
       are distinct.  (Contributed by Mario Carneiro, 11-Aug-2016.)  Shorten
       nfs1v and ~ hbs1 combined.  (Revised by Wolf Lammen, 28-Jul-2022.) $)
    nfs1v $p |- F/ x [ y / x ] ph $=
      ( wsb weq wi wal sb6 nfa1 nfxfr ) ABCDBCEAFZBGBABCHKBIJ $.

    $( The setvar ` x ` is not free in ` [ y / x ] ph ` when ` x ` and ` y `
       are distinct.  (Contributed by NM, 26-May-1993.) $)
    hbs1 $p |- ( [ y / x ] ph -> A. x [ y / x ] ph ) $=
      ( wsb nfs1v nf5ri ) ABCDBABCEF $.
  $}

  $( Alternate definition of ~ df-nf .  (Contributed by Mario Carneiro,
     11-Aug-2016.) ~ df-nf changed.  (Revised by Wolf Lammen, 11-Sep-2021.) $)
  nf5 $p |- ( F/ x ph <-> A. x ( ph -> A. x ph ) ) $=
    ( wnf wex wal wi df-nf nfa1 19.23 bitr4i ) ABCABDABEZFAKFBEABGAKBABHIJ $.

  $( An alternate definition of ~ df-nf .  (Contributed by Mario Carneiro,
     24-Sep-2016.) $)
  nf6 $p |- ( F/ x ph <-> A. x ( E. x ph -> ph ) ) $=
    ( wnf wex wal wi df-nf nfe1 19.21 bitr4i ) ABCABDZABEFKAFBEABGKABABHIJ $.

  ${
    nf5d.1 $e |- F/ x ph $.
    nf5d.2 $e |- ( ph -> ( ps -> A. x ps ) ) $.
    $( Deduce that ` x ` is not free in ` ps ` in a context.  (Contributed by
       Mario Carneiro, 24-Sep-2016.) $)
    nf5d $p |- ( ph -> F/ x ps ) $=
      ( wal wi wnf alrimi nf5-1 syl ) ABBCFGZCFBCHALCDEIBCJK $.
  $}

  ${
    nf5di.1 $e |- ( ph -> F/ x ph ) $.
    $( Since the converse holds by ~ a1i , this inference shows that we can
       represent a not-free hypothesis with either ` F/ x ph ` (inference form)
       or ` ( ph -> F/ x ph ) ` (deduction form).  (Contributed by NM,
       17-Aug-2018.)  (Proof shortened by Wolf Lammen, 10-Jul-2019.) $)
    nf5di $p |- F/ x ph $=
      ( wal nf5rd pm2.43i nf5i ) ABAABDAABCEFG $.
  $}

  ${
    19.9h.1 $e |- ( ph -> A. x ph ) $.
    $( A wff may be existentially quantified with a variable not free in it.
       Theorem 19.9 of [Margaris] p. 89.  (Contributed by FL, 24-Mar-2007.)
       (Proof shortened by Wolf Lammen, 5-Jan-2018.)  (Proof shortened by Wolf
       Lammen, 14-Jul-2020.) $)
    19.9h $p |- ( E. x ph <-> ph ) $=
      ( nf5i 19.9 ) ABABCDE $.
  $}

  ${
    19.21h.1 $e |- ( ph -> A. x ph ) $.
    $( Theorem 19.21 of [Margaris] p. 90.  The hypothesis can be thought of
       as " ` x ` is not free in ` ph ` ".  See also ~ 19.21 and ~ 19.21v .
       (Contributed by NM, 1-Aug-2017.)  (Proof shortened by Wolf Lammen,
       1-Jan-2018.) $)
    19.21h $p |- ( A. x ( ph -> ps ) <-> ( ph -> A. x ps ) ) $=
      ( nf5i 19.21 ) ABCACDEF $.
  $}

  ${
    19.23h.1 $e |- ( ps -> A. x ps ) $.
    $( Theorem 19.23 of [Margaris] p. 90.  See ~ 19.23 .  (Contributed by NM,
       24-Jan-1993.)  (Revised by Mario Carneiro, 24-Sep-2016.)  (Proof
       shortened by Wolf Lammen, 1-Jan-2018.) $)
    19.23h $p |- ( A. x ( ph -> ps ) <-> ( E. x ph -> ps ) ) $=
      ( nf5i 19.23 ) ABCBCDEF $.
  $}

  ${
    exlimih.1 $e |- ( ps -> A. x ps ) $.
    exlimih.2 $e |- ( ph -> ps ) $.
    $( Inference associated with ~ 19.23 .  See ~ exlimiv for a version with a
       disjoint variable condition requiring fewer axioms.  (Contributed by NM,
       10-Jan-1993.)  (Proof shortened by Andrew Salmon, 13-May-2011.)  (Proof
       shortened by Wolf Lammen, 1-Jan-2018.) $)
    exlimih $p |- ( E. x ph -> ps ) $=
      ( nf5i exlimi ) ABCBCDFEG $.
  $}

  ${
    exlimdh.1 $e |- ( ph -> A. x ph ) $.
    exlimdh.2 $e |- ( ch -> A. x ch ) $.
    exlimdh.3 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Deduction form of Theorem 19.9 of [Margaris] p. 89.  (Contributed by NM,
       28-Jan-1997.) $)
    exlimdh $p |- ( ph -> ( E. x ps -> ch ) ) $=
      ( nf5i exlimd ) ABCDADEHCDFHGI $.
  $}

  ${
    $d x y $.
    equsalhw.1 $e |- ( ps -> A. x ps ) $.
    equsalhw.2 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Version of ~ equsalh with a disjoint variable condition, which does not
       require ~ ax-13 .  (Contributed by NM, 29-Nov-2015.)  (Proof shortened
       by Wolf Lammen, 8-Jul-2022.) $)
    equsalhw $p |- ( A. x ( x = y -> ph ) <-> ps ) $=
      ( nf5i equsalv ) ABCDBCEGFH $.

    $( Version of ~ equsexh with a disjoint variable condition, which does not
       require ~ ax-13 .  (Contributed by BJ, 31-May-2019.) $)
    equsexhv $p |- ( E. x ( x = y /\ ph ) <-> ps ) $=
      ( nf5i equsexv ) ABCDBCEGFH $.
  $}

  $( The setvar ` x ` is not free in ` A. x ph ` .  This corresponds to the
     axiom (4) of modal logic.  Example in Appendix in [Megill] p. 450 (p. 19
     of the preprint).  Also Lemma 22 of [Monk2] p. 114.  (Contributed by NM,
     24-Jan-1993.)  (Proof shortened by Wolf Lammen, 12-Oct-2021.) $)
  hba1 $p |- ( A. x ph -> A. x A. x ph ) $=
    ( wal nfa1 nf5ri ) ABCBABDE $.

  $( Closed theorem version of bound-variable hypothesis builder ~ hbn .
     (Contributed by NM, 10-May-1993.)  (Proof shortened by Wolf Lammen,
     14-Oct-2021.) $)
  hbnt $p |- ( A. x ( ph -> A. x ph ) -> ( -. ph -> A. x -. ph ) ) $=
    ( wal wi wn nf5-1 nfnd nf5rd ) AABCDBCZAEBIABABFGH $.

  ${
    hbn.1 $e |- ( ph -> A. x ph ) $.
    $( If ` x ` is not free in ` ph ` , it is not free in ` -. ph ` .
       (Contributed by NM, 10-Jan-1993.)  (Proof shortened by Wolf Lammen,
       17-Dec-2017.) $)
    hbn $p |- ( -. ph -> A. x -. ph ) $=
      ( wal wi wn hbnt mpg ) AABDEAFZIBDEBABGCH $.
  $}

  ${
    hbnd.1 $e |- ( ph -> A. x ph ) $.
    hbnd.2 $e |- ( ph -> ( ps -> A. x ps ) ) $.
    $( Deduction form of bound-variable hypothesis builder ~ hbn .
       (Contributed by NM, 3-Jan-2002.) $)
    hbnd $p |- ( ph -> ( -. ps -> A. x -. ps ) ) $=
      ( wal wi wn alrimih hbnt syl ) ABBCFGZCFBHZMCFGALCDEIBCJK $.
  $}

  ${
    hbim1.1 $e |- ( ph -> A. x ph ) $.
    hbim1.2 $e |- ( ph -> ( ps -> A. x ps ) ) $.
    $( A closed form of ~ hbim .  (Contributed by NM, 2-Jun-1993.) $)
    hbim1 $p |- ( ( ph -> ps ) -> A. x ( ph -> ps ) ) $=
      ( wi wal a2i 19.21h sylibr ) ABFZABCGZFKCGABLEHABCDIJ $.
  $}

  ${
    hbimd.1 $e |- ( ph -> A. x ph ) $.
    hbimd.2 $e |- ( ph -> ( ps -> A. x ps ) ) $.
    hbimd.3 $e |- ( ph -> ( ch -> A. x ch ) ) $.
    $( Deduction form of bound-variable hypothesis builder ~ hbim .
       (Contributed by NM, 14-May-1993.)  (Proof shortened by Wolf Lammen,
       3-Jan-2018.) $)
    hbimd $p |- ( ph -> ( ( ps -> ch ) -> A. x ( ps -> ch ) ) ) $=
      ( wi nf5dh nfimd nf5rd ) ABCHDABCDABDEFIACDEGIJK $.
  $}

  ${
    hbim.1 $e |- ( ph -> A. x ph ) $.
    hbim.2 $e |- ( ps -> A. x ps ) $.
    $( If ` x ` is not free in ` ph ` and ` ps ` , it is not free in
       ` ( ph -> ps ) ` .  (Contributed by NM, 24-Jan-1993.)  (Proof shortened
       by Mel L. O'Cat, 3-Mar-2008.)  (Proof shortened by Wolf Lammen,
       1-Jan-2018.) $)
    hbim $p |- ( ( ph -> ps ) -> A. x ( ph -> ps ) ) $=
      ( wal wi a1i hbim1 ) ABCDBBCFGAEHI $.
  $}

  ${
    hb.1 $e |- ( ph -> A. x ph ) $.
    hb.2 $e |- ( ps -> A. x ps ) $.
    $( If ` x ` is not free in ` ph ` and ` ps ` , it is not free in
       ` ( ph /\ ps ) ` .  (Contributed by NM, 14-May-1993.)  (Proof shortened
       by Wolf Lammen, 2-Jan-2018.) $)
    hban $p |- ( ( ph /\ ps ) -> A. x ( ph /\ ps ) ) $=
      ( wa nf5i nfan nf5ri ) ABFCABCACDGBCEGHI $.
    hb.3 $e |- ( ch -> A. x ch ) $.
    $( If ` x ` is not free in ` ph ` , ` ps ` , and ` ch ` , it is not free in
       ` ( ph /\ ps /\ ch ) ` .  (Contributed by NM, 14-Sep-2003.)  (Proof
       shortened by Wolf Lammen, 2-Jan-2018.) $)
    hb3an $p |- ( ( ph /\ ps /\ ch ) -> A. x ( ph /\ ps /\ ch ) ) $=
      ( w3a nf5i nf3an nf5ri ) ABCHDABCDADEIBDFICDGIJK $.
  $}

  $( Introduction of implication into substitution.  (Contributed by NM,
     14-May-1993.) $)
  sbi2 $p |- ( ( [ y / x ] ph -> [ y / x ] ps ) -> [ y / x ] ( ph -> ps ) ) $=
    ( wsb wi wn sbn pm2.21 sbimi sylbir ax-1 ja ) ACDEZBCDEABFZCDEZNGAGZCDEPACD
    HQOCDABIJKBOCDBALJM $.

  ${
    $d x y $.
    $( Obsolete version of ~ sbn as of 8-Jul-2023.  Substitution is not
       affected by negation.  Version of ~ sbn with a disjoint variable
       condition, not requiring ~ ax-13 .  (Contributed by Wolf Lammen,
       18-Jan-2023.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    sbnvOLD $p |- ( [ y / x ] -. ph <-> -. [ y / x ] ph ) $=
      ( weq wn wa wex wi wal wsb exanali sb5 sb6 notbii 3bitr4i ) BCDZAEZFBGPAH
      BIZEQBCJABCJZEPABKQBCLSRABCMNO $.

    $( Obsolete version of ~ sbi1 as of 24-Jul-2023.  Move implication out of
       substitution.  Version of ~ sbi1 with a disjoint variable condition, not
       requiring ~ ax-13 .  (Contributed by Wolf Lammen, 18-Jan-2023.)
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    sbi1vOLD $p |- ( [ y / x ] ( ph -> ps ) ->
                                          ( [ y / x ] ph -> [ y / x ] ps ) ) $=
      ( wi wsb weq wal sb4vOLD ax-2 al2imi sb2vOLD syl56 syl ) ABEZCDFCDGZOEZCH
      ZACDFZBCDFZEOCDISPAEZCHRPBEZCHTACDIQUAUBCPABJKBCDLMN $.

    $( Obsolete version of ~ sbi2 as of 8-Jul-2023.  Move implication into
       substitution.  Version of ~ sbi2 with a disjoint variable condition, not
       requiring ~ ax-13 .  (Contributed by Wolf Lammen, 18-Jan-2023.)
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    sbi2vOLD $p |- ( ( [ y / x ] ph -> [ y / x ] ps ) ->
                                                    [ y / x ] ( ph -> ps ) ) $=
      ( wsb wi wn sbnvOLD pm2.21 sbimi sylbir ax-1 ja ) ACDEZBCDEABFZCDEZNGAGZC
      DEPACDHQOCDABIJKBOCDBALJM $.

    $( Obsolete version of ~ sbim as of 24-Jul-2023.  Substitution distributes
       over implication.  Version of ~ sbim with a disjoint variable condition,
       not requiring ~ ax-13 .  (Contributed by Wolf Lammen, 18-Jan-2023.)
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    sbimvOLD $p |- ( [ y / x ] ( ph -> ps ) <->
                                          ( [ y / x ] ph -> [ y / x ] ps ) ) $=
      ( wi wsb sbi1vOLD sbi2 impbii ) ABECDFACDFBCDFEABCDGABCDHI $.

    $( Obsolete version of ~ sban as of 24-Jul-2023.  Substitution distributes
       over conjunction.  Version of ~ sban with a disjoint variable condition,
       not requiring ~ ax-13 .  (Contributed by Wolf Lammen, 18-Jan-2023.)
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    sbanvOLD $p |- ( [ y / x ] ( ph /\ ps ) <->
                                          ( [ y / x ] ph /\ [ y / x ] ps ) ) $=
      ( wn wi wsb wa sbn sbimvOLD imbi2i bitri xchbinx df-an sbbii 3bitr4i ) AB
      EZFZEZCDGZACDGZBCDGZEZFZEABHZCDGUAUBHTRCDGZUDRCDIUFUAQCDGZFUDAQCDJUGUCUAB
      CDIKLMUESCDABNOUAUBNP $.

    $( Obsolete version of ~ sbbi as of 24-Jul-2023.  Substitution distributes
       over a biconditional.  Version of ~ sbbi with a disjoint variable
       condition, not requiring ~ ax-11 nor ~ ax-13 .  (Contributed by Wolf
       Lammen, 18-Jan-2023.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    sbbivOLD $p |- ( [ y / x ] ( ph <-> ps )
                                     <-> ( [ y / x ] ph <-> [ y / x ] ps ) ) $=
      ( wb wsb wi wa dfbi2 sbbii sbimvOLD anbi12i sbanvOLD 3bitr4i bitri ) ABEZ
      CDFABGZBAGZHZCDFZACDFZBCDFZEZPSCDABIJQCDFZRCDFZHUAUBGZUBUAGZHTUCUDUFUEUGA
      BCDKBACDKLQRCDMUAUBINO $.

    $( Obsolete version of ~ spsbim as of 6-Jul-2023.  Specialization of
       implication.  Version of ~ spsbim with a disjoint variable condition,
       not requiring ~ ax-13 .  (Contributed by Wolf Lammen, 19-Jan-2023.)
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    spsbimvOLD $p |-
                   ( A. x ( ph -> ps ) -> ( [ y / x ] ph -> [ y / x ] ps ) ) $=
      ( wi wal nfa1 sp sbimd ) ABEZCFABCDJCGJCHI $.

    sblbisvOLD.1 $e |- ( [ y / x ] ph <-> ps ) $.
    $( Obsolete version of ~ sblbis as of 24-Jul-2023.  Introduce left
       biconditional inside of a substitution.  Version of ~ sblbis with a
       disjoint variable condition, not requiring ~ ax-13 .  (Contributed by
       Wolf Lammen, 18-Jan-2023.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    sblbisvOLD $p |- ( [ y / x ] ( ch <-> ph ) <-> ( [ y / x ] ch <-> ps ) ) $=
      ( wb wsb sbbivOLD bibi2i bitri ) CAGDEHCDEHZADEHZGLBGCADEIMBLFJK $.
  $}

  ${
    $d x y $.
    sbiev.1 $e |- F/ x ps $.
    sbiev.2 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Conversion of implicit substitution to explicit substitution.  Version
       of ~ sbie with a disjoint variable condition, not requiring ~ ax-13 .
       (Contributed by Wolf Lammen, 18-Jan-2023.)  Remove dependence on ~ ax-10
       and shorten proof.  (Revised by BJ, 18-Jul-2023.) $)
    sbiev $p |- ( [ y / x ] ph <-> ps ) $=
      ( wsb weq wi wal sb6 equsalv bitri ) ACDGCDHAICJBACDKABCDEFLM $.

    $( Obsolete proof of ~ sbiev as of 18-Jul-2023.  (Contributed by Wolf
       Lammen, 18-Jan-2023.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    sbievOLD $p |- ( [ y / x ] ph <-> ps ) $=
      ( wb wsb weq equsb1v sbimi ax-mp sbf sblbisvOLD mpbi ) ABGZCDHZACDHBGCDIZ
      CDHQCDJRPCDFKLBBACDBCDEMNO $.
  $}

  ${
    $d x z $.  $d y z $.
    $( Obsolete version of ~ sbequi as of 7-Jul-2023.  Version of ~ sbequi with
       disjoint variable conditions, not requiring ~ ax-13 .  (Contributed by
       Wolf Lammen, 19-Jan-2023.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    sbequivvOLD $p |- ( x = y -> ( [ x / z ] ph -> [ y / z ] ph ) ) $=
      ( weq wi wal wsb equeuclr imim1d alimdv sb6 3imtr4g ) BCEZDBEZAFZDGDCEZAF
      ZDGADBHADCHNPRDNQOABDCIJKADBLADCLM $.

    $( Obsolete version of ~ sbequ as of 7-Jul-2023.  Version of ~ sbequ with
       disjoint variable conditions, not requiring ~ ax-13 .  (Contributed by
       Wolf Lammen, 19-Jan-2023.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    sbequvvOLD $p |- ( x = y -> ( [ x / z ] ph <-> [ y / z ] ph ) ) $=
      ( weq wsb sbequivvOLD wi equcoms impbid ) BCEADBFZADCFZABCDGLKHCBACBDGIJ
      $.
  $}

  $( Show that the original axiom ~ ax-c7 can be derived from ~ ax-10
     ( ~ hbn1 ) , ~ sp and propositional calculus.  See ~ ax10fromc7 for the
     rederivation of ~ ax-10 from ~ ax-c7 .

     Normally, ~ axc7 should be used rather than ~ ax-c7 , except by theorems
     specifically studying the latter's properties.  (Contributed by NM,
     21-May-2008.) $)
  axc7 $p |- ( -. A. x -. A. x ph -> ph ) $=
    ( wal wn sp hbn1 nsyl4 ) ABCZAHDBCABEABFG $.

  $( Abbreviated version of ~ axc7 using the existential quantifier.
     Corresponds to the dual of Axiom (B) of modal logic.  (Contributed by NM,
     5-Aug-1993.)  (Proof shortened by Wolf Lammen, 8-Jul-2022.) $)
  axc7e $p |- ( E. x A. x ph -> ph ) $=
    ( wal wex hbe1a 19.21bi ) ABCBDABABEF $.

  $( The analogue in our predicate calculus of the Brouwer axiom (B) of modal
     logic S5.  (Contributed by NM, 5-Oct-2005.) $)
  modal-b $p |- ( ph -> A. x -. A. x -. ph ) $=
    ( wn wal axc7 con4i ) ACZBDCBDAGBEF $.

  $( A closed version of ~ 19.9h .  (Contributed by NM, 13-May-1993.)  (Proof
     shortened by Wolf Lammen, 3-Mar-2018.) $)
  19.9ht $p |- ( A. x ( ph -> A. x ph ) -> ( E. x ph -> ph ) ) $=
    ( wal wi wex exim axc7e syl6 ) AABCZDBCABEIBEAAIBFABGH $.

  $( Show that the original axiom ~ ax-c4 can be derived from ~ ax-4
     ( ~ alim ), ~ ax-10 ( ~ hbn1 ), ~ sp and propositional calculus.  See
     ~ ax4fromc4 for the rederivation of ~ ax-4 from ~ ax-c4 .

     Part of the proof is based on the proof of Lemma 22 of [Monk2] p. 114.
     (Contributed by NM, 21-May-2008.)  (Proof modification is discouraged.) $)
  axc4 $p |- ( A. x ( A. x ph -> ps ) -> ( A. x ph -> A. x ps ) ) $=
    ( wal wi wn sp con2i hbn1 con1i alimi 3syl alim syl5 ) ACDZOCDZOBECDBCDOOFZ
    CDZFZSCDPROQCGHQCISOCORACIJKLOBCMN $.

  ${
    axc4i.1 $e |- ( A. x ph -> ps ) $.
    $( Inference version of ~ axc4 .  (Contributed by NM, 3-Jan-1993.) $)
    axc4i $p |- ( A. x ph -> A. x ps ) $=
      ( wal nfa1 alrimi ) ACEBCACFDG $.
  $}

  ${
    nfal.1 $e |- F/ x ph $.
    $( If ` x ` is not free in ` ph ` , it is not free in ` A. y ph ` .
       (Contributed by Mario Carneiro, 11-Aug-2016.) $)
    nfal $p |- F/ x A. y ph $=
      ( wal nf5ri hbal nf5i ) ACEBABCABDFGH $.
  $}

  ${
    nfex.1 $e |- F/ x ph $.
    $( If ` x ` is not free in ` ph ` , it is not free in ` E. y ph ` .
       (Contributed by Mario Carneiro, 11-Aug-2016.)  (Proof shortened by Wolf
       Lammen, 30-Dec-2017.)  Reduce symbol count in ~ nfex , ~ hbex .
       (Revised by Wolf Lammen, 16-Oct-2021.) $)
    nfex $p |- F/ x E. y ph $=
      ( wex wn wal df-ex nfn nfal nfxfr ) ACEAFZCGZFBACHMBLBCABDIJIK $.
  $}

  ${
    hbex.1 $e |- ( ph -> A. x ph ) $.
    $( If ` x ` is not free in ` ph ` , it is not free in ` E. y ph ` .
       (Contributed by NM, 12-Mar-1993.)  Reduce symbol count in ~ nfex ,
       ~ hbex .  (Revised by Wolf Lammen, 16-Oct-2021.) $)
    hbex $p |- ( E. y ph -> A. x E. y ph ) $=
      ( wex nf5i nfex nf5ri ) ACEBABCABDFGH $.
  $}

  ${
    nfnf.1 $e |- F/ x ph $.
    $( If ` x ` is not free in ` ph ` , it is not free in ` F/ y ph ` .
       (Contributed by Mario Carneiro, 11-Aug-2016.)  (Proof shortened by Wolf
       Lammen, 30-Dec-2017.) $)
    nfnf $p |- F/ x F/ y ph $=
      ( wnf wex wal wi df-nf nfex nfal nfim nfxfr ) ACEACFZACGZHBACINOBABCDJABC
      DKLM $.
  $}

  $( Theorem 19.12 of [Margaris] p. 89.  Assuming the converse is a mistake
     sometimes made by beginners!  But sometimes the converse does hold, as in
     ~ 19.12vv and ~ r19.12sn .  (Contributed by NM, 12-Mar-1993.)  (Proof
     shortened by Wolf Lammen, 3-Jan-2018.) $)
  19.12 $p |- ( E. x A. y ph -> A. y E. x ph ) $=
    ( wal wex nfa1 nfex sp eximi alrimi ) ACDZBEABECKCBACFGKABACHIJ $.

  ${
    nfald.1 $e |- F/ y ph $.
    nfald.2 $e |- ( ph -> F/ x ps ) $.
    $( Deduction form of ~ nfal .  (Contributed by Mario Carneiro,
       24-Sep-2016.)  (Proof shortened by Wolf Lammen, 16-Oct-2021.) $)
    nfald $p |- ( ph -> F/ x A. y ps ) $=
      ( wal wex 19.12 nfrd alimd ax-11 syl56 nfd ) ABDGZCOCHBCHZDGABCGZDGOCGBCD
      IAPQDEABCFJKBDCLMN $.

    $( If ` x ` is not free in ` ps ` , it is not free in ` E. y ps ` .
       (Contributed by Mario Carneiro, 24-Sep-2016.) $)
    nfexd $p |- ( ph -> F/ x E. y ps ) $=
      ( wex wn wal df-ex nfnd nfald nfxfrd ) BDGBHZDIZHACBDJAOCANCDEABCFKLKM $.
  $}

  ${
    $d x y z $.
    nfsbv.nf $e |- F/ z ph $.
    $( If ` z ` is not free in ` ph ` , it is not free in ` [ y / x ] ph ` when
       ` x ` , ` y ` and ` z ` are distinct.  Version of ~ nfsb requiring more
       disjoint variables, but fewer axioms.  (Contributed by Wolf Lammen,
       7-Feb-2023.) $)
    nfsbv $p |- F/ z [ y / x ] ph $=
      ( wsb weq wi wal sb6 nfv nfim nfal nfxfr ) ABCFBCGZAHZBIDABCJPDBOADODKELM
      N $.
  $}

  ${
    $d x y z $.
    sbco2v.1 $e |- F/ z ph $.
    $( Version of ~ sbco2 with disjoint variable conditions, not requiring
       ~ ax-13 , but ~ ax-11 .  (Contributed by Wolf Lammen, 29-Apr-2023.) $)
    sbco2v $p |- ( [ y / z ] [ z / x ] ph <-> [ y / x ] ph ) $=
      ( wsb nfsbv sbequ sbiev ) ABDFABCFDCABCDEGADCBHI $.
  $}

  ${
    aaan.1 $e |- F/ y ph $.
    aaan.2 $e |- F/ x ps $.
    $( Rearrange universal quantifiers.  (Contributed by NM, 12-Aug-1993.) $)
    aaan $p |- ( A. x A. y ( ph /\ ps ) <-> ( A. x ph /\ A. y ps ) ) $=
      ( wa wal 19.28 albii nfal 19.27 bitri ) ABGDHZCHABDHZGZCHACHOGNPCABDEIJAO
      CBCDFKLM $.
  $}

  ${
    eeor.1 $e |- F/ y ph $.
    eeor.2 $e |- F/ x ps $.
    $( Rearrange existential quantifiers.  (Contributed by NM, 8-Aug-1994.) $)
    eeor $p |- ( E. x E. y ( ph \/ ps ) <-> ( E. x ph \/ E. y ps ) ) $=
      ( wo wex 19.45 exbii nfex 19.44 bitri ) ABGDHZCHABDHZGZCHACHOGNPCABDEIJAO
      CBCDFKLM $.
  $}

  ${
    $d x y $.
    cbv3v.nf1 $e |- F/ y ph $.
    cbv3v.nf2 $e |- F/ x ps $.
    cbv3v.1 $e |- ( x = y -> ( ph -> ps ) ) $.
    $( Version of ~ cbv3 with a disjoint variable condition, which does not
       require ~ ax-13 .  (Contributed by BJ, 31-May-2019.) $)
    cbv3v $p |- ( A. x ph -> A. y ps ) $=
      ( wal nf5ri hbal spimv1 alrimih ) ACHBDADCADEIJABCDFGKL $.
  $}

  ${
    $d x y $.
    cbv3hv.nf1 $e |- ( ph -> A. y ph ) $.
    cbv3hv.nf2 $e |- ( ps -> A. x ps ) $.
    cbv3hv.1 $e |- ( x = y -> ( ph -> ps ) ) $.
    $( Version of ~ cbv3h with a disjoint variable condition on ` x , y ` ,
       which does not require ~ ax-13 .  Was used in a proof of ~ axc11n (but
       of independent interest).  (Contributed by NM, 25-Jul-2015.)  (Proof
       shortened by Wolf Lammen, 29-Nov-2020.)  (Proof shortened by BJ,
       30-Nov-2020.) $)
    cbv3hv $p |- ( A. x ph -> A. y ps ) $=
      ( nf5i cbv3v ) ABCDADEHBCFHGI $.
  $}

  ${
    $d x y $.
    cbvalv1.nf1 $e |- F/ y ph $.
    cbvalv1.nf2 $e |- F/ x ps $.
    cbvalv1.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Version of ~ cbval with a disjoint variable condition, which does not
       require ~ ax-13 .  See ~ cbvalvw for a version with two disjoint
       variable conditions, requiring fewer axioms, and ~ cbvalv for another
       variant.  (Contributed by BJ, 31-May-2019.) $)
    cbvalv1 $p |- ( A. x ph <-> A. y ps ) $=
      ( wal weq biimpd cbv3v wi biimprd equcoms impbii ) ACHBDHABCDEFCDIZABGJKB
      ADCFEBALCDPABGMNKO $.

    $( Version of ~ cbvex with a disjoint variable condition, which does not
       require ~ ax-13 .  See ~ cbvexvw for a version with two disjoint
       variable conditions, requiring fewer axioms, and ~ cbvexv for another
       variant.  (Contributed by BJ, 31-May-2019.) $)
    cbvexv1 $p |- ( E. x ph <-> E. y ps ) $=
      ( wn wal wex nfn weq notbid cbvalv1 notbii df-ex 3bitr4i ) AHZCIZHBHZDIZH
      ACJBDJSUARTCDADEKBCFKCDLABGMNOACPBDPQ $.
  $}

  ${
    $d x z $.  $d y z $.
    dvelimhw.1 $e |- ( ph -> A. x ph ) $.
    dvelimhw.2 $e |- ( ps -> A. z ps ) $.
    dvelimhw.3 $e |- ( z = y -> ( ph <-> ps ) ) $.
    dvelimhw.4 $e |- ( -. A. x x = y -> ( y = z -> A. x y = z ) ) $.
    $( Proof of ~ dvelimh without using ~ ax-13 but with additional distinct
       variable conditions.  (Contributed by Andrew Salmon, 21-Jul-2011.)
       (Revised by NM, 1-Aug-2017.)  (Proof shortened by Wolf Lammen,
       23-Dec-2018.) $)
    dvelimhw $p |- ( -. A. x x = y -> ( ps -> A. x ps ) ) $=
      ( weq wal wn wi wnf nfv equcom nfna1 nf5d nfxfrd nf5i a1i nfimd equsalhw
      nfald nfbii sylib nf5rd ) CDJZCKLZBCUIEDJZAMZEKZCNBCNUIUKCEUIEOUIUJACUJDE
      JZUICEDPUIUMCUHCQIRSACNUIACFTUAUBUDULBCABEDGHUCUEUFUG $.
  $}

  ${
    $d ph y $.  $d ps x $.
    $( Theorem *11.53 in [WhiteheadRussell] p. 164.  See ~ pm11.53v for a
       version requiring fewer axioms.  (Contributed by Andrew Salmon,
       24-May-2011.) $)
    pm11.53 $p |- ( A. x A. y ( ph -> ps ) <-> ( E. x ph -> A. y ps ) ) $=
      ( wi wal wex 19.21v albii nfv nfal 19.23 bitri ) ABEDFZCFABDFZEZCFACGOENP
      CABDHIAOCBCDBCJKLM $.
  $}

  ${
    $d x ps $.  $d y ph $.
    $( Special case of ~ 19.12 where its converse holds.  See ~ 19.12vvv for a
       version with a disjoint variable condition requiring fewer axioms.
       (Contributed by NM, 18-Jul-2001.)  (Revised by Andrew Salmon,
       11-Jul-2011.) $)
    19.12vv $p |- ( E. x A. y ( ph -> ps ) <-> A. y E. x ( ph -> ps ) ) $=
      ( wi wal wex 19.21v exbii nfv nfal 19.36 19.36v albii 19.21 bitr2i 3bitri
      ) ABEZDFZCGABDFZEZCGACFZTEZRCGZDFZSUACABDHIATCBCDBCJKLUEUBBEZDFUCUDUFDABC
      MNUBBDADCADJKOPQ $.
  $}

  ${
    eean.1 $e |- F/ y ph $.
    eean.2 $e |- F/ x ps $.
    $( Rearrange existential quantifiers.  (Contributed by NM, 27-Oct-2010.)
       (Revised by Mario Carneiro, 6-Oct-2016.) $)
    eean $p |- ( E. x E. y ( ph /\ ps ) <-> ( E. x ph /\ E. y ps ) ) $=
      ( wa wex 19.42 exbii nfex 19.41 bitri ) ABGDHZCHABDHZGZCHACHOGNPCABDEIJAO
      CBCDFKLM $.
  $}

  ${
    $d y ph $.  $d x ps $.
    $( Distribute a pair of existential quantifiers over a conjunction.
       Combination of ~ 19.41v and ~ 19.42v .  For a version requiring fewer
       axioms but with additional disjoint variable conditions, see
       ~ exdistrv .  (Contributed by NM, 26-Jul-1995.) $)
    eeanv $p |- ( E. x E. y ( ph /\ ps ) <-> ( E. x ph /\ E. y ps ) ) $=
      ( nfv eean ) ABCDADEBCEF $.
  $}

  ${
    $d y ph $.  $d z ph $.  $d x ps $.  $d z ps $.  $d x ch $.  $d y ch $.
    $( Distribute three existential quantifiers over a conjunction.
       (Contributed by NM, 26-Jul-1995.)  (Proof shortened by Andrew Salmon,
       25-May-2011.)  Reduce distinct variable restrictions.  (Revised by Wolf
       Lammen, 20-Jan-2018.) $)
    eeeanv $p |- ( E. x E. y E. z ( ph /\ ps /\ ch ) <->
                                         ( E. x ph /\ E. y ps /\ E. z ch ) ) $=
      ( wa wex w3a eeanv anbi1i df-3an exbii 19.42v bitri 2exbii nfv nfex 19.41
      3bitri 3bitr4i ) ABGZEHZDHZCFHZGZADHZBEHZGZUEGABCIZFHZEHDHZUGUHUEIUDUIUEA
      BDEJKULUBUEGZEHZDHUCUEGZDHUFUKUMDEUKUBCGZFHUMUJUPFABCLMUBCFNOPUNUODUBUEEC
      EFCEQRSMUCUEDCDFCDQRSTUGUHUELUA $.
  $}

  ${
    $d z ph $.  $d w ph $.  $d x ps $.  $d y ps $.  $d y z $.  $d w x $.
    $( Distribute two pairs of existential quantifiers over a conjunction.  For
       a version requiring fewer axioms but with additional disjoint variable
       conditions, see ~ 4exdistrv .  (Contributed by NM, 31-Jul-1995.) $)
    ee4anv $p |- ( E. x E. y E. z E. w ( ph /\ ps ) <->
                                          ( E. x E. y ph /\ E. z E. w ps ) ) $=
      ( wa wex excom exbii eeanv 2exbii 3bitri ) ABGFHZEHDHZCHNDHZEHZCHADHZBFHZ
      GZEHCHRCHSEHGOQCNDEIJPTCEABDFKLRSCEKM $.
  $}

  ${
    $d x y $.
    sb8v.nf $e |- F/ y ph $.
    $( Substitution of variable in universal quantifier.  Version of ~ sb8 with
       a disjoint variable condition, not requiring ~ ax-13 .  (Contributed by
       Wolf Lammen, 19-Jan-2023.) $)
    sb8v $p |- ( A. x ph <-> A. y [ y / x ] ph ) $=
      ( wsb nfs1v sbequ12 cbvalv1 ) AABCEBCDABCFABCGH $.

    $( Substitution of variable in existential quantifier.  Version of ~ sb8e
       with a disjoint variable condition, not requiring ~ ax-13 .
       (Contributed by Wolf Lammen, 19-Jan-2023.) $)
    sb8ev $p |- ( E. x ph <-> E. y [ y / x ] ph ) $=
      ( wsb nfs1v sbequ12 cbvexv1 ) AABCEBCDABCFABCGH $.
  $}

  ${
    $d z x $.  $d z w y $.
    2sb8ev.1 $e |- F/ w ph $.
    2sb8ev.2 $e |- F/ z ph $.
    $( Version of ~ 2sb8e with more disjoint variable conditions, not requiring
       ~ ax-13 .  (Contributed by Wolf Lammen, 28-Jan-2023.) $)
    2sb8ev $p |- ( E. x E. y ph <->
                  E. z E. w [ z / x ] [ w / y ] ph ) $=
      ( wex wsb sb8ev exbii excom bitri nfsbv 3bitri ) ACHZBHZACEIZBHZEHZRBDIZD
      HZEHUAEHDHQREHZBHTPUCBACEFJKRBELMSUBERBDACEDGNJKUAEDLO $.

    $( Obsolete proof of ~ 2sb8ev as of 19-Mar-2023.  (Contributed by Wolf
       Lammen, 28-Jan-2023.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    2sb8evOLD $p |- ( E. x E. y ph <->
                  E. z E. w [ z / x ] [ w / y ] ph ) $=
      ( wex wsb sb8ev exbii excom bitri weq wi wal sb6 nfv nfim nfal 3bitri
      nfxfr ) ACHZBHZACEIZBHZEHZUEBDIZDHZEHUHEHDHUDUEEHZBHUGUCUJBACEFJKUEBELMUF
      UIEUEBDUECENZAOZCPDACEQULDCUKADUKDRGSTUBJKUHEDLUA $.
  $}

  ${
    $d x y $.
    sb6rfv.nf $e |- F/ y ph $.
    $( Reversed substitution.  Version of ~ sb6rf requiring disjoint variables,
       but fewer axioms.  (Contributed by Wolf Lammen, 7-Feb-2023.) $)
    sb6rfv $p |- ( ph <-> A. y ( y = x -> [ y / x ] ph ) ) $=
      ( weq wsb wi wal sbequ12r equsalv bicomi ) CBEABCFZGCHALACBDACBIJK $.
  $}

  ${
    $d x y z $.  $d y z ph $.
    $( Two ways of expressing " ` x ` is (effectively) not free in ` ph ` ".
       (Contributed by G&eacute;rard Lang, 14-Nov-2013.)  (Revised by Mario
       Carneiro, 6-Oct-2016.)  (Proof shortened by Wolf Lammen, 22-Sep-2018.)
       Avoid ~ ax-13 .  (Revised by Wolf Lammen, 30-Jan-2023.) $)
    sbnf2 $p |- ( F/ x ph
       <-> A. y A. z ( [ y / x ] ph <-> [ z / x ] ph ) ) $=
      ( wnf wa wsb wi wal wb wex nfv sb8ev sb8v imbi12i pm11.53v 3bitr4i bitr4i
      df-nf alcom 3bitri anbi12i pm4.24 2albiim ) ABEZUEFABCGZABDGZHDICIZUGUFHZ
      DICIZFUEUFUGJDICIUEUHUEUJABKZABIZHZUFCKZUGDIZHUEUHUKUNULUOABCACLZMABDADLZ
      NOABSZUFUGCDPQUEUMUICIDIZUJURUMUGDKZUFCIZHUSUKUTULVAABDUQMABCUPNOUGUFDCPR
      UIDCTUAUBUEUCUFUGCDUDQ $.
  $}

  ${
    $d x y $.  $d y ph $.
    $( An equivalent expression for existence.  (Contributed by NM,
       2-Feb-2005.)  Avoid ~ ax-13 .  (Revised by Wolf Lammen, 16-Oct-2022.) $)
    exsb $p |- ( E. x ph <-> E. y A. x ( x = y -> ph ) ) $=
      ( weq wi wal nfv nfa1 ax12v sp com12 impbid cbvexv1 ) ABCDZAEZBFZBCACGOBH
      NAPABCIPNAOBJKLM $.
  $}

  ${
    $d x y z $.  $d y w $.  $d z w ph $.
    $( An equivalent expression for double existence.  (Contributed by NM,
       2-Feb-2005.)  (Proof shortened by Wolf Lammen, 30-Sep-2018.) $)
    2exsb $p |- ( E. x E. y ph <->
                  E. z E. w A. x A. y ( ( x = z /\ y = w ) -> ph ) ) $=
      ( wex wsb weq wa wi wal nfv 2sb8ev 2sb6 2exbii bitri ) ACFBFACEGBDGZEFDFB
      DHCEHIAJCKBKZEFDFABCDEAELADLMQRDEABCDENOP $.
  $}

  ${
    $d x z $.  $d y z $.
    $( Alternate proof of ~ cleljust .  It is kept here and should not be
       modified because it is referenced on the Metamath Proof Explorer Home
       Page (mmset.html) as an example of how disjoint variable conditions are
       inherited by substitutions.  (Contributed by NM, 28-Jan-2004.)  (Revised
       by BJ, 29-Dec-2020.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    cleljustALT $p |- ( x e. y <-> E. z ( z = x /\ z e. y ) ) $=
      ( weq wel wa wex ax-5 elequ1 equsexhv bicomi ) CADCBEZFCGABEZLMCAMCHCABIJ
      K $.

    $( Alternate proof of ~ cleljust .  Compared with ~ cleljustALT , it uses
       ~ nfv followed by ~ equsexv instead of ~ ax-5 followed by ~ equsexhv ,
       so it uses the idiom ` F/ x ph ` instead of ` ph -> A. x ph ` to express
       non-freeness.  This style is generally preferred for later theorems.
       (Contributed by NM, 28-Jan-2004.)  (Revised by Mario Carneiro,
       21-Dec-2016.)  (Revised by BJ, 29-Dec-2020.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    cleljustALT2 $p |- ( x e. y <-> E. z ( z = x /\ z e. y ) ) $=
      ( weq wel wa wex nfv elequ1 equsexv bicomi ) CADCBEZFCGABEZLMCAMCHCABIJK
      $.
  $}

  $( Alternate proof of ~ equs5a .  Uses ~ ax-12 but not ~ ax-13 .
     (Contributed by NM, 2-Feb-2007.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  equs5aALT $p |- ( E. x ( x = y /\ A. y ph ) -> A. x ( x = y -> ph ) ) $=
    ( weq wal wa wi nfa1 ax-12 imp exlimi ) BCDZACEZFLAGZBEZBNBHLMOABCIJK $.

  $( Alternate proof of ~ equs5e .  Uses ~ ax-12 but not ~ ax-13 .
     (Contributed by NM, 2-Feb-2007.)  (Proof shortened by Wolf Lammen,
     15-Jan-2018.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  equs5eALT $p |- ( E. x ( x = y /\ ph ) -> A. x ( x = y -> E. y ph ) ) $=
    ( weq wa wex wi wal nfa1 hbe1 19.23bi ax-12 syl5 imp exlimi ) BCDZAEPACFZGZ
    BHZBRBIPASAQCHZPSATCACJKQBCLMNO $.

  $( Same as ~ axc11 but with reversed antecedent.  Note the use of ~ ax-12
     (and not merely ~ ax12v as in ~ axc11rv ).  (Contributed by NM,
     25-Jul-2015.) $)
  axc11r $p |- ( A. y y = x -> ( A. x ph -> A. y ph ) ) $=
    ( weq wal wi ax-12 sps pm2.27 al2imi syld ) CBDZCEABEZLAFZCEZACELMOFCACBGHL
    NACLAIJK $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Axiom scheme ax-13 (Quantified Equality)
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Axiom of Quantified Equality.  One of the equality and substitution axioms
     of predicate calculus with equality.

     An equivalent way to express this axiom that may be easier to understand
     is ` ( -. x = y -> ( -. x = z -> ( y = z -> A. x y = z ) ) ) ` (see
     ~ ax13b ).  Recall that in the intended interpretation, our variables are
     metavariables ranging over the variables of predicate calculus (the object
     language).  In order for the first antecedent ` -. x = y ` to hold, ` x `
     and ` y ` must have different values and thus cannot be the same
     object-language variable (so they are effectively "distinct variables"
     even though no $d is present).  Similarly, ` x ` and ` z ` cannot be the
     same object-language variable.  Therefore, ` x ` will not occur in the wff
     ` y = z ` when the first two antecedents hold, so analogous to ~ ax-5 ,
     the conclusion ` ( y = z -> A. x y = z ) ` follows.  Note that ~ ax-5
     cannot prove this because its distinct variable ($d) requirement is not
     satisfied directly but only indirectly (outside of Metamath) by the
     argument above.

     The original version of this axiom was ~ ax-c9 and was replaced with this
     shorter ~ ax-13 in December 2015.  The old axiom is proved from this one
     as theorem ~ axc9 .

     The primary purpose of this axiom is to provide a way to introduce the
     quantifier ` A. x ` on ` y = z ` even when ` x ` and ` y ` are substituted
     with the same variable.  In this case, the first antecedent becomes
     ` -. x = x ` and the axiom still holds.

     Although this version is shorter, the original version ~ axc9 may be more
     practical to work with because of the "distinctor" form of its
     antecedents.  A typical application of ~ axc9 is in ~ dvelimh which
     converts a distinct variable pair to the distinctor antecedent
     ` -. A. x x = y ` .  In particular, it is conjectured that it is not
     possible to prove ~ ax6 from ~ ax6v without this axiom.

     This axiom can be weakened if desired by adding distinct variable
     restrictions on pairs ` x , z ` and ` y , z ` .  To show that, we add
     these restrictions to theorem ~ ax13v and use only ~ ax13v for further
     derivations.  Thus, ~ ax13v should be the only theorem referencing this
     axiom.  Other theorems can reference either ~ ax13v (preferred) or ~ ax13
     (if the stronger form is needed).

     This axiom scheme is logically redundant (see ~ ax13w ) but is used as an
     auxiliary axiom scheme to achieve scheme completeness (i.e. so that all
     possible cases of bundling can be proved; see text linked at
     ~ mmtheorems.html#ax6dgen ).  It is not known whether this axiom can be
     derived from the others.  (Contributed by NM, 21-Dec-2015.)
     (New usage is discouraged.) $)
  ax-13 $a |- ( -. x = y -> ( y = z -> A. x y = z ) ) $.

  ${
    $d x z $.  $d y z $.
    $( A weaker version of ~ ax-13 with distinct variable restrictions on pairs
       ` x , z ` and ` y , z ` .  In order to show (with ~ ax13 ) that this
       weakening is still adequate, this should be the only theorem referencing
       ~ ax-13 directly.

       Had we additionally required ` x ` and ` y ` be distinct, too, this
       theorem would have been a direct consequence of ~ ax-5 .  So essentially
       this theorem states, that a distinct variable condition can be replaced
       with an inequality between set variables.  (Contributed by NM,
       30-Jun-2016.) $)
    ax13v $p |- ( -. x = y -> ( y = z -> A. x y = z ) ) $=
      ( ax-13 ) ABCD $.
  $}

  ${
    $d x z w $.  $d y w $.
    $( A version of ~ ax13v with one distinct variable restriction dropped.
       For convenience, ` y ` is kept on the right side of equations.  The
       proof of ~ ax13 bases on ideas from NM, 24-Dec-2015.  (Contributed by
       Wolf Lammen, 8-Sep-2018.)  (New usage is discouraged.) $)
    ax13lem1 $p |- ( -. x = y -> ( z = y -> A. x z = y ) ) $=
      ( vw weq wa wex wal equvinva ax13v equeucl alimdv syl9 impd exlimdv syl5
      wn ) CBEZCDEZBDEZFZDGABEQZRAHZCBDIUBUAUCDUBSTUCUBTTAHSUCABDJSTRACBDKLMNOP
      $.
  $}

  ${
    $d x w $.  $d z w $.  $d y w $.
    $( Derive ~ ax-13 from ~ ax13v and Tarski's FOL. This shows that the
       weakening in ~ ax13v is still sufficient for a complete system.
       (Contributed by NM, 21-Dec-2015.)  (Proof shortened by Wolf Lammen,
       31-Jan-2018.)  Reduce axiom usage (Revised by Wolf Lammen,
       2-Jun-2021.) $)
    ax13 $p |- ( -. x = y -> ( y = z -> A. x y = z ) ) $=
      ( vw weq wn wal wi wa wex equvinv ax13lem1 imp ax7v1 alanimi an4s exlimdv
      syl2an ex syl5bi ax13b mpbir ) ABEFZBCEZUDAGZHZHUCACEFZUFHHUCUGUFUDDBEZDC
      EZIZDJUCUGIZUEBCDKUKUJUEDUKUJUEUCUHUGUIUEUCUHIUHAGZUIAGZUEUGUIIUCUHULABDL
      MUGUIUMACDLMUHUIUDAUHUIUDDBCNMORPSQTSUEABCUAUB $.
  $}

  ${
    $d w x z $.  $d w y $.
    $( Lemma for ~ nfeqf2 .  This lemma is equivalent to ~ ax13v with one
       distinct variable constraint removed.  (Contributed by Wolf Lammen,
       8-Sep-2018.)  Reduce axiom usage.  (Revised by Wolf Lammen,
       18-Oct-2020.)  (New usage is discouraged.) $)
    ax13lem2 $p |- ( -. x = y -> ( E. x z = y -> z = y ) ) $=
      ( vw weq wn wex wi wal ax13lem1 equeucl eximi 19.36v syl9 alrimdv equequ2
      sylib equsalvw syl6ib ) ABEFZCBEZAGZDBEZCDEZHZDIUATUBUEDTUCUCAIZUBUDABDJU
      BUEAGUFUDHUAUEACDBKLUCUDAMQNOUDUADBDBCPRS $.
  $}

  ${
    $d x z $.
    $( An equation between setvar is free of any other setvar.  (Contributed by
       Wolf Lammen, 9-Jun-2019.)  Remove dependency on ~ ax-12 .  (Revised by
       Wolf Lammen, 16-Dec-2022.) $)
    nfeqf2 $p |- ( -. A. x x = y -> F/ x z = y ) $=
      ( weq wal wex wnf exnal hbe1 ax13lem2 ax13lem1 syldc eximdh hbe1a syl6com
      wn nfd sylbir ) ABDZAEPSPZAFZCBDZAGSAHUAUBAUBAFZUAUBAEZAFUDUCTUDAUBAITUCU
      BUDABCJABCKLMUBANOQR $.

    $( Obsolete version of ~ nfeqf2 as of 16-Dec-2022.  (Contributed by Wolf
       Lammen, 9-Jun-2019.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    nfeqf2OLD $p |- ( -. A. x x = y -> F/ x z = y ) $=
      ( weq wal wn wex wnf exnal hbe1 ax13lem2 ax13lem1 syldc com12 hbe1a syl56
      aleximi nfd sylbir ) ABDZAEFTFZAGZCBDZAHTAIUBUCAUCAGZUDAEZUBUCAEZAGZUFUCA
      JUEUBUGUDUAUFAUAUDUCUFABCKABCLMQNUCAOPRS $.
  $}

  ${
    $d x z $.
    $( Quantifier introduction when one pair of variables is distinct.
       (Contributed by NM, 2-Jan-2002.)  (Revised by NM, 20-Jul-2015.)  Remove
       dependency on ~ ax-11 .  (Revised by Wolf Lammen, 8-Sep-2018.) $)
    dveeq2 $p |- ( -. A. x x = y -> ( z = y -> A. x z = y ) ) $=
      ( weq wal wn nfeqf2 nf5rd ) ABDAEFCBDAABCGH $.
  $}

  ${
    $d x z $.
    $( An equation between setvar is free of any other setvar.  (Contributed by
       Wolf Lammen, 10-Jun-2019.) $)
    nfeqf1 $p |- ( -. A. x x = y -> F/ x y = z ) $=
      ( weq wal wn wnf nfeqf2 equcom nfbii sylib ) ABDAEFCBDZAGBCDZAGABCHLMACBI
      JK $.
  $}

  ${
    $d x z $.
    $( Quantifier introduction when one pair of variables is distinct.
       (Contributed by NM, 2-Jan-2002.)  Remove dependency on ~ ax-11 .
       (Revised by Wolf Lammen, 8-Sep-2018.) $)
    dveeq1 $p |- ( -. A. x x = y -> ( y = z -> A. x y = z ) ) $=
      ( weq wal wn nfeqf1 nf5rd ) ABDAEFBCDAABCGH $.
  $}

  ${
    $d x w $.  $d y w $.  $d z w $.
    $( A variable is effectively not free in an equality if it is not either of
       the involved variables. ` F/ ` version of ~ ax-c9 .  (Contributed by
       Mario Carneiro, 6-Oct-2016.)  Remove dependency on ~ ax-11 .  (Revised
       by Wolf Lammen, 6-Sep-2018.) $)
    nfeqf $p |- ( ( -. A. z z = x /\ -. A. z z = y ) -> F/ z x = y ) $=
      ( vw weq wal wn wa nfna1 nfan wex equvinva dveeq1 imp equtr2 alanimi an4s
      syl2an ex exlimdv syl5 nf5d ) CAEZCFGZCBEZCFGZHZABEZCUDUFCUCCIUECIJUHADEZ
      BDEZHZDKUGUHCFZABDLUGUKULDUGUKULUDUIUFUJULUDUIHUICFZUJCFZULUFUJHUDUIUMCAD
      MNUFUJUNCBDMNUIUJUHCABDOPRQSTUAUB $.
  $}

  $( Derive set.mm's original ~ ax-c9 from the shorter ~ ax-13 .  (Contributed
     by NM, 29-Nov-2015.)  (Revised by NM, 24-Dec-2015.)  (Proof shortened by
     Wolf Lammen, 29-Apr-2018.) $)
  axc9 $p |- ( -. A. z z = x -> ( -. A. z z = y
              -> ( x = y -> A. z x = y ) ) ) $=
    ( weq wal wn wi wa nfeqf nf5rd ex ) CADCEFZCBDCEFZABDZNCEGLMHNCABCIJK $.

  ${
    $d y w $.  $d x w $.
    $( At least one individual exists.  This is not a theorem of free logic,
       which is sound in empty domains.  For such a logic, we would add this
       theorem as an axiom of set theory (Axiom 0 of [Kunen] p. 10).  In the
       system consisting of ~ ax-4 through ~ ax-9 , all axioms other than
       ~ ax-6 are believed to be theorems of free logic, although the system
       without ~ ax-6 is not complete in free logic.

       It is preferred to use ~ ax6ev when it is sufficient.  (Contributed by
       NM, 14-May-1993.)  Shortened after ~ ax13lem1 became available.
       (Revised by Wolf Lammen, 8-Sep-2018.) $)
    ax6e $p |- E. x x = y $=
      ( vw weq wex 19.8a wn wi wal ax13lem1 ax6ev equtr eximii syl6com exlimiiv
      19.35i pm2.61i ) ABDZRAEZRAFCBDZRGZSHCUATTAISABCJTRAACDTRHAACKACBLMPNCBKO
      Q $.
  $}

  $( Theorem showing that ~ ax-6 follows from the weaker version ~ ax6v .
     (Even though this theorem depends on ~ ax-6 , all references of ~ ax-6 are
     made via ~ ax6v .  An earlier version stated ~ ax6v as a separate axiom,
     but having two axioms caused some confusion.)

     This theorem should be referenced in place of ~ ax-6 so that all proofs
     can be traced back to ~ ax6v .  When possible, use the weaker ~ ax6v
     rather than ~ ax6 since the ~ ax6v derivation is much shorter and requires
     fewer axioms.  (Contributed by NM, 12-Nov-2013.)  (Revised by NM,
     25-Jul-2015.)  (Proof shortened by Wolf Lammen, 4-Feb-2018.) $)
  ax6 $p |- -. A. x -. x = y $=
    ( weq wex wn wal ax6e df-ex mpbi ) ABCZADJEAFEABGJAHI $.

  $( Show that the original axiom ~ ax-c10 can be derived from ~ ax6 and ~ axc7
     (on top of propositional calculus, ~ ax-gen , and ~ ax-4 ).  See
     ~ ax6fromc10 for the rederivation of ~ ax6 from ~ ax-c10 .

     Normally, ~ axc10 should be used rather than ~ ax-c10 , except by theorems
     specifically studying the latter's properties.  (Contributed by NM,
     5-Aug-1993.)  (Proof modification is discouraged.) $)
  axc10 $p |- ( A. x ( x = y -> A. x ph ) -> ph ) $=
    ( weq wal wi wn ax6 con3 al2imi mtoi axc7 syl ) BCDZABEZFZBEZOGZBEZGAQSNGZB
    EBCHPRTBNOIJKABLM $.

  $( Closed theorem form of ~ spim .  (Contributed by NM, 15-Jan-2008.)
     (Revised by Mario Carneiro, 17-Oct-2016.)  (Proof shortened by Wolf
     Lammen, 21-Mar-2023.) $)
  spimt $p |- ( ( F/ x ps /\ A. x ( x = y -> ( ph -> ps ) ) ) ->
                                                         ( A. x ph -> ps ) ) $=
    ( weq wi wal wex wnf ax6e exim mpi 19.35 sylib id 19.9d sylan9r ) CDEZABFZF
    CGZACGZBCHZBCIZBTSCHZUAUBFTRCHUDCDJRSCKLABCMNBUCCUCOPQ $.

  $( Obsolete version of ~ spimt as of 21-Mar-2023.  (Contributed by NM,
     15-Jan-2008.)  (Revised by Mario Carneiro, 17-Oct-2016.)  (Proof shortened
     by Wolf Lammen, 24-Feb-2018.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  spimtOLD $p |- ( ( F/ x ps /\ A. x ( x = y -> ( ph -> ps ) ) ) ->
                                                         ( A. x ph -> ps ) ) $=
    ( weq wi wal wex wnf ax6e exim mpi 19.35 sylib 19.9t biimpd sylan9r ) CDEZA
    BFZFCGZACGZBCHZBCIZBTSCHZUAUBFTRCHUDCDJRSCKLABCMNUCUBBBCOPQ $.

  ${
    spim.1 $e |- F/ x ps $.
    spim.2 $e |- ( x = y -> ( ph -> ps ) ) $.
    $( Specialization, using implicit substitution.  Compare Lemma 14 of
       [Tarski] p. 70.  The ~ spim series of theorems requires that only one
       direction of the substitution hypothesis hold.  (Contributed by NM,
       10-Jan-1993.)  (Revised by Mario Carneiro, 3-Oct-2016.)  (Proof
       shortened by Wolf Lammen, 18-Feb-2018.) $)
    spim $p |- ( A. x ph -> ps ) $=
      ( weq wi ax6e eximii 19.36i ) ABCECDGABHCCDIFJK $.
  $}

  ${
    spimed.1 $e |- ( ch -> F/ x ph ) $.
    spimed.2 $e |- ( x = y -> ( ph -> ps ) ) $.
    $( Deduction version of ~ spime .  (Contributed by NM, 14-May-1993.)
       (Revised by Mario Carneiro, 3-Oct-2016.)  (Proof shortened by Wolf
       Lammen, 19-Feb-2018.) $)
    spimed $p |- ( ch -> ( ph -> E. x ps ) ) $=
      ( wal wex nf5rd weq wi ax6e eximii 19.35i syl6 ) CAADHBDICADFJABDDEKABLDD
      EMGNOP $.
  $}

  ${
    spime.1 $e |- F/ x ph $.
    spime.2 $e |- ( x = y -> ( ph -> ps ) ) $.
    $( Existential introduction, using implicit substitution.  Compare Lemma 14
       of [Tarski] p. 70.  (Contributed by NM, 7-Aug-1994.)  (Revised by Mario
       Carneiro, 3-Oct-2016.)  (Proof shortened by Wolf Lammen, 6-Mar-2018.) $)
    spime $p |- ( ph -> E. x ps ) $=
      ( wex wi wtru wnf a1i spimed mptru ) ABCGHABICDACJIEKFLM $.
  $}

  ${
    $d x ps $.
    spimv.1 $e |- ( x = y -> ( ph -> ps ) ) $.
    $( A version of ~ spim with a distinct variable requirement instead of a
       bound-variable hypothesis.  See ~ spimv1 and ~ spimvw for versions
       requiring fewer axioms.  (Contributed by NM, 31-Jul-1993.) $)
    spimv $p |- ( A. x ph -> ps ) $=
      ( nfv spim ) ABCDBCFEG $.

    $( Alternate proof of ~ spimv .  Note that it requires only ~ ax-1 through
       ~ ax-5 together with ~ ax6e .  Currently, proofs derive from ~ ax6v ,
       but if ~ ax-6 could be used instead, this proof would reduce axiom
       usage.  (Contributed by NM, 31-Jul-1993.)  Remove dependency on
       ~ ax-10 .  (Revised by BJ, 29-Nov-2020.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    spimvALT $p |- ( A. x ph -> ps ) $=
      ( weq wi ax6e eximii 19.36iv ) ABCCDFABGCCDHEIJ $.
  $}

  ${
    $d x ph $.
    spimev.1 $e |- ( x = y -> ( ph -> ps ) ) $.
    $( Distinct-variable version of ~ spime .  (Contributed by NM,
       10-Jan-1993.) $)
    spimev $p |- ( ph -> E. x ps ) $=
      ( nfv spime ) ABCDACFEG $.
  $}

  ${
    $d x ps $.
    spv.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Specialization, using implicit substitution.  See ~ spvv for a version
       using fewer axioms.  (Contributed by NM, 30-Aug-1993.) $)
    spv $p |- ( A. x ph -> ps ) $=
      ( weq biimpd spimv ) ABCDCDFABEGH $.
  $}

  ${
    spei.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    spei.2 $e |- ps $.
    $( Inference from existential specialization, using implicit substitution.
       Remove a distinct variable constraint.  (Contributed by NM,
       19-Aug-1993.)  (Proof shortened by Wolf Lammen, 12-May-2018.) $)
    spei $p |- E. x ph $=
      ( weq ax6e mpbiri eximii ) CDGZACCDHKABFEIJ $.
  $}

  ${
    chvar.1 $e |- F/ x ps $.
    chvar.2 $e |- ( x = y -> ( ph <-> ps ) ) $.
    chvar.3 $e |- ph $.
    $( Implicit substitution of ` y ` for ` x ` into a theorem.  (Contributed
       by Raph Levien, 9-Jul-2003.)  (Revised by Mario Carneiro,
       3-Oct-2016.) $)
    chvar $p |- ps $=
      ( weq biimpd spim mpg ) ABCABCDECDHABFIJGK $.
  $}

  ${
    $d x ps $.
    chvarv.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    chvarv.2 $e |- ph $.
    $( Implicit substitution of ` y ` for ` x ` into a theorem.  (Contributed
       by NM, 20-Apr-1994.)  (Proof shortened by Wolf Lammen, 22-Apr-2018.) $)
    chvarv $p |- ps $=
      ( nfv chvar ) ABCDBCGEFH $.
  $}

  ${
    cbv3.1 $e |- F/ y ph $.
    cbv3.2 $e |- F/ x ps $.
    cbv3.3 $e |- ( x = y -> ( ph -> ps ) ) $.
    $( Rule used to change bound variables, using implicit substitution, that
       does not use ~ ax-c9 .  (Contributed by NM, 5-Aug-1993.)  (Proof
       shortened by Wolf Lammen, 12-May-2018.) $)
    cbv3 $p |- ( A. x ph -> A. y ps ) $=
      ( wal nf5ri hbal spim alrimih ) ACHBDADCADEIJABCDFGKL $.
  $}

  ${
    cbv3h.1 $e |- ( ph -> A. y ph ) $.
    cbv3h.2 $e |- ( ps -> A. x ps ) $.
    cbv3h.3 $e |- ( x = y -> ( ph -> ps ) ) $.
    $( Rule used to change bound variables, using implicit substitution.
       (Contributed by NM, 8-Jun-1993.)  (Proof shortened by Andrew Salmon,
       25-May-2011.)  (Proof shortened by Wolf Lammen, 12-May-2018.) $)
    cbv3h $p |- ( A. x ph -> A. y ps ) $=
      ( nf5i cbv3 ) ABCDADEHBCFHGI $.
  $}

  ${
    cbv1.1 $e |- F/ x ph $.
    cbv1.2 $e |- F/ y ph $.
    cbv1.3 $e |- ( ph -> F/ y ps ) $.
    cbv1.4 $e |- ( ph -> F/ x ch ) $.
    cbv1.5 $e |- ( ph -> ( x = y -> ( ps -> ch ) ) ) $.
    $( Rule used to change bound variables, using implicit substitution.
       (Contributed by NM, 5-Aug-1993.)  (Revised by Mario Carneiro,
       3-Oct-2016.)  Format hypotheses to common style.  (Revised by Wolf
       Lammen, 13-May-2018.) $)
    cbv1 $p |- ( ph -> ( A. x ps -> A. y ch ) ) $=
      ( wal wi nfim1 weq com12 a2d cbv3 19.21 3imtr3i pm2.86i ) ABDKZCEKZABLZDK
      ACLZEKAUALAUBLUCUDDEABEGHMACDFIMDENZABCAUEBCLJOPQABDFRACEGRST $.
  $}

  ${
    cbv1h.1 $e |- ( ph -> ( ps -> A. y ps ) ) $.
    cbv1h.2 $e |- ( ph -> ( ch -> A. x ch ) ) $.
    cbv1h.3 $e |- ( ph -> ( x = y -> ( ps -> ch ) ) ) $.
    $( Rule used to change bound variables, using implicit substitution.
       (Contributed by NM, 11-May-1993.)  (Proof shortened by Wolf Lammen,
       13-May-2018.) $)
    cbv1h $p |- ( A. x A. y ph -> ( A. x ps -> A. y ch ) ) $=
      ( wal nfa1 nfa2 wi 2sp syl nf5d weq cbv1 ) AEIZDIZBCDERDJZAEDKZSBEUASABBE
      ILADEMZFNOSCDTSACCDILUBGNOSADEPBCLLUBHNQ $.
  $}

  ${
    cbv2h.1 $e |- ( ph -> ( ps -> A. y ps ) ) $.
    cbv2h.2 $e |- ( ph -> ( ch -> A. x ch ) ) $.
    cbv2h.3 $e |- ( ph -> ( x = y -> ( ps <-> ch ) ) ) $.
    $( Rule used to change bound variables, using implicit substitution.
       (Contributed by NM, 11-May-1993.) $)
    cbv2h $p |- ( A. x A. y ph -> ( A. x ps <-> A. y ch ) ) $=
      ( wal weq wb wi biimp syl6 cbv1h equcomi biimpr syl56 alcoms impbid ) AEI
      DIBDIZCEIZABCDEFGADEJZBCKZBCLHBCMNOAUBUALEDACBEDGFEDJUCAUDCBLEDPHBCQROST
      $.
  $}

  ${
    cbv2.1 $e |- F/ x ph $.
    cbv2.2 $e |- F/ y ph $.
    cbv2.3 $e |- ( ph -> F/ y ps ) $.
    cbv2.4 $e |- ( ph -> F/ x ch ) $.
    cbv2.5 $e |- ( ph -> ( x = y -> ( ps <-> ch ) ) ) $.
    $( Rule used to change bound variables, using implicit substitution.
       (Contributed by NM, 5-Aug-1993.)  (Revised by Mario Carneiro,
       3-Oct-2016.)  Format hypotheses to common style.  (Revised by Wolf
       Lammen, 13-May-2018.) $)
    cbv2 $p |- ( ph -> ( A. x ps <-> A. y ch ) ) $=
      ( wal wb nf5ri alrimi nf5rd cbv2h syl ) AAEKZDKBDKCEKLARDFAEGMNABCDEABEHO
      ACDIOJPQ $.
  $}

  ${
    cbval.1 $e |- F/ y ph $.
    cbval.2 $e |- F/ x ps $.
    cbval.3 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Rule used to change bound variables, using implicit substitution.  See
       ~ cbvalv , ~ cbvalv1 , and ~ cbvalvw for weaker versions using fewer
       axioms.  (Contributed by NM, 13-May-1993.)  (Revised by Mario Carneiro,
       3-Oct-2016.) $)
    cbval $p |- ( A. x ph <-> A. y ps ) $=
      ( wal weq biimpd cbv3 wi biimprd equcoms impbii ) ACHBDHABCDEFCDIZABGJKBA
      DCFEBALCDPABGMNKO $.

    $( Rule used to change bound variables, using implicit substitution.  See
       ~ cbvexv , ~ cbvexv1 , and ~ cbvexvw for weaker versions using fewer
       axioms.  (Contributed by NM, 21-Jun-1993.) $)
    cbvex $p |- ( E. x ph <-> E. y ps ) $=
      ( wex wn wal nfn weq notbid cbval alnex 3bitr3i con4bii ) ACHZBDHZAIZCJBI
      ZDJRISITUACDADEKBCFKCDLABGMNACOBDOPQ $.
  $}

  ${
    $d y ph $.  $d x ps $.
    cbvalv.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Rule used to change bound variables, using implicit substitution.  See
       ~ cbvalvw for a version requiring fewer axioms, to be preferred when
       sufficient.  (Contributed by NM, 5-Aug-1993.)  Remove dependency on
       ~ ax-10 .  (Revised by Wolf Lammen, 17-Jul-2021.) $)
    cbvalv $p |- ( A. x ph <-> A. y ps ) $=
      ( wal ax-5 hbal spv alrimih weq wb equcoms bicomd impbii ) ACFZBDFZPBDADC
      ADGHABCDEIJQACBCDBCGHBADCDCKABABLCDEMNIJO $.

    $( Rule used to change bound variables, using implicit substitution.  See
       ~ cbvexvw for a version requiring fewer axioms, to be preferred when
       sufficient.  (Contributed by NM, 21-Jun-1993.)  Remove dependency on
       ~ ax-10 .  (Revised by Wolf Lammen, 17-Jul-2021.) $)
    cbvexv $p |- ( E. x ph <-> E. y ps ) $=
      ( wex wn wal weq notbid cbvalv alnex 3bitr3i con4bii ) ACFZBDFZAGZCHBGZDH
      OGPGQRCDCDIABEJKACLBDLMN $.
  $}

  ${
    $d x ph $.  $d x ch $.
    cbvald.1 $e |- F/ y ph $.
    cbvald.2 $e |- ( ph -> F/ y ps ) $.
    cbvald.3 $e |- ( ph -> ( x = y -> ( ps <-> ch ) ) ) $.
    $( Deduction used to change bound variables, using implicit substitution,
       particularly useful in conjunction with ~ dvelim .  (Contributed by NM,
       2-Jan-2002.)  (Revised by Mario Carneiro, 6-Oct-2016.)  (Revised by Wolf
       Lammen, 13-May-2018.) $)
    cbvald $p |- ( ph -> ( A. x ps <-> A. y ch ) ) $=
      ( nfv nfvd cbv2 ) ABCDEADIFGACDJHK $.

    $( Deduction used to change bound variables, using implicit substitution,
       particularly useful in conjunction with ~ dvelim .  (Contributed by NM,
       2-Jan-2002.)  (Revised by Mario Carneiro, 6-Oct-2016.) $)
    cbvexd $p |- ( ph -> ( E. x ps <-> E. y ch ) ) $=
      ( wex wn wal nfnd weq wb notbi syl6ib cbvald alnex 3bitr3g con4bid ) ABDI
      ZCEIZABJZDKCJZEKUAJUBJAUCUDDEFABEGLADEMBCNUCUDNHBCOPQBDRCERST $.
  $}

  ${
    $d y x $.  $d y z $.  $d w x $.  $d w z $.
    cbval2.1 $e |- F/ z ph $.
    cbval2.2 $e |- F/ w ph $.
    cbval2.3 $e |- F/ x ps $.
    cbval2.4 $e |- F/ y ps $.
    cbval2.5 $e |- ( ( x = z /\ y = w ) -> ( ph <-> ps ) ) $.
    $( Rule used to change bound variables, using implicit substitution.
       (Contributed by NM, 22-Dec-2003.)  (Revised by Mario Carneiro,
       6-Oct-2016.)  (Proof shortened by Wolf Lammen, 22-Apr-2018.) $)
    cbval2 $p |- ( A. x A. y ph <-> A. z A. w ps ) $=
      ( wal nfal weq wi nfv nfim wb cbval 19.21v pm5.74d 3bitr3i pm5.74ri
      expcom ) ADLZBFLZCEAEDGMBCFIMCENZUEUFUGAOZDLUGBOZFLUGUEOUGUFOUHUIDFUGAFUG
      FPHQUGBDUGDPJQDFNZUGABUGUJABRKUDUASUGADTUGBFTUBUCS $.

    $( Rule used to change bound variables, using implicit substitution.
       (Contributed by NM, 14-Sep-2003.)  (Revised by Mario Carneiro,
       6-Oct-2016.)  (Proof shortened by Wolf Lammen, 16-Jun-2019.) $)
    cbvex2 $p |- ( E. x E. y ph <-> E. z E. w ps ) $=
      ( wex wn wal nfn weq wa notbid cbval2 2nexaln 3bitr4i con4bii ) ADLCLZBFL
      ELZAMZDNCNBMZFNENUCMUDMUEUFCDEFAEGOAFHOBCIOBDJOCEPDFPQABKRSACDTBEFTUAUB
      $.
  $}

  ${
    $d ps y $.  $d ch x $.  $d ph x $.  $d ph y $.
    cbvaldva.1 $e |- ( ( ph /\ x = y ) -> ( ps <-> ch ) ) $.
    $( Rule used to change the bound variable in a universal quantifier with
       implicit substitution.  Deduction form.  (Contributed by David Moews,
       1-May-2017.)  Remove dependency on ~ ax-10 .  (Revised by Wolf Lammen,
       18-Jul-2021.) $)
    cbvaldva $p |- ( ph -> ( A. x ps <-> A. y ch ) ) $=
      ( wal wi weq wb expcom pm5.74d cbvalv 19.21v 3bitr3i pm5.74ri ) ABDGZCEGZ
      ABHZDGACHZEGAQHARHSTDEDEIZABCAUABCJFKLMABDNACENOP $.

    $( Rule used to change the bound variable in an existential quantifier with
       implicit substitution.  Deduction form.  (Contributed by David Moews,
       1-May-2017.)  Remove dependency on ~ ax-10 .  (Revised by Wolf Lammen,
       18-Jul-2021.) $)
    cbvexdva $p |- ( ph -> ( E. x ps <-> E. y ch ) ) $=
      ( wex wn wal weq wa notbid cbvaldva alnex 3bitr3g con4bid ) ABDGZCEGZABHZ
      DICHZEIQHRHASTDEADEJKBCFLMBDNCENOP $.
  $}

  ${
    $d z w ph $.  $d x y ps $.  $d x w $.  $d z y $.
    cbval2v.1 $e |- ( ( x = z /\ y = w ) -> ( ph <-> ps ) ) $.
    $( Rule used to change bound variables, using implicit substitution.
       (Contributed by NM, 4-Feb-2005.)  Remove dependency on ~ ax-10 .
       (Revised by Wolf Lammen, 18-Jul-2021.) $)
    cbval2v $p |- ( A. x A. y ph <-> A. z A. w ps ) $=
      ( wal weq cbvaldva cbvalv ) ADHBFHCECEIABDFGJK $.

    $( Rule used to change bound variables, using implicit substitution.
       (Contributed by NM, 26-Jul-1995.)  Remove dependency on ~ ax-10 .
       (Revised by Wolf Lammen, 18-Jul-2021.) $)
    cbvex2v $p |- ( E. x E. y ph <-> E. z E. w ps ) $=
      ( wex weq cbvexdva cbvexv ) ADHBFHCECEIABDFGJK $.
  $}

  ${
    $v f $.
    $v g $.
    $( Define temporary individual variables. $)
    cbvex4v.vf $f setvar f $.
    cbvex4v.vg $f setvar g $.
    $d w z ch $.  $d u v ph $.  $d x y ps $.  $d f g ps $.  $d f w $.
    $d g z $.  $d u v w z $.  $d u w x z $.  $d v w y z $.  $d w x y z $.
    cbvex4v.1 $e |- ( ( x = v /\ y = u ) -> ( ph <-> ps ) ) $.
    cbvex4v.2 $e |- ( ( z = f /\ w = g ) -> ( ps <-> ch ) ) $.
    $( Rule used to change bound variables, using implicit substitution.
       (Contributed by NM, 26-Jul-1995.) $)
    cbvex4v $p |- ( E. x E. y E. z E. w ph <-> E. v E. u E. f E. g ch ) $=
      ( wex weq wa 2exbidv cbvex2v 2exbii bitri ) AGNFNZENDNBGNFNZINHNCKNJNZINH
      NUAUBDEHIDHOEIOPABFGLQRUBUCHIBCFGJKMRST $.
  $}

  $( Lemma used in proofs of implicit substitution properties.  The converse
     requires either a disjoint variable condition ( ~ sb56 ) or a non-freeness
     hypothesis ( ~ equs45f ).  See ~ equs4v for a version requiring fewer
     axioms.  (Contributed by NM, 10-May-1993.)  (Proof shortened by Mario
     Carneiro, 20-May-2014.)  (Proof shortened by Wolf Lammen, 5-Feb-2018.) $)
  equs4 $p |- ( A. x ( x = y -> ph ) -> E. x ( x = y /\ ph ) ) $=
    ( weq wi wal wex wa ax6e exintr mpi ) BCDZAEBFLBGLAHBGBCILABJK $.

  ${
    equsal.1 $e |- F/ x ps $.
    equsal.2 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( An equivalence related to implicit substitution.  See ~ equsalvw and
       ~ equsalv for versions with disjoint variable conditions proved from
       fewer axioms.  See also the dual form ~ equsex .  (Contributed by NM,
       2-Jun-1993.)  (Proof shortened by Andrew Salmon, 12-Aug-2011.)  (Revised
       by Mario Carneiro, 3-Oct-2016.)  (Proof shortened by Wolf Lammen,
       5-Feb-2018.) $)
    equsal $p |- ( A. x ( x = y -> ph ) <-> ps ) $=
      ( weq wi wal wex 19.23 pm5.74i albii ax6e a1bi 3bitr4i ) CDGZBHZCIQCJZBHQ
      AHZCIBQBCEKTRCQABFLMSBCDNOP $.

    $( An equivalence related to implicit substitution.  See ~ equsexvw and
       ~ equsexv for versions with disjoint variable conditions proved from
       fewer axioms.  See also the dual form ~ equsal .  See ~ equsexALT for an
       alternate proof.  (Contributed by NM, 5-Aug-1993.)  (Revised by Mario
       Carneiro, 3-Oct-2016.)  (Proof shortened by Wolf Lammen, 6-Feb-2018.) $)
    equsex $p |- ( E. x ( x = y /\ ph ) <-> ps ) $=
      ( weq wa wex biimpa exlimi wi wal equsal equs4 sylbir impbii ) CDGZAHZCIZ
      BSBCERABFJKBRALCMTABCDEFNACDOPQ $.

    $( Alternate proof of ~ equsex .  This proves the result directly, instead
       of as a corollary of ~ equsal via ~ equs4 .  Note in particular that
       only existential quantifiers appear in the proof and that the only step
       requiring ~ ax-13 is ~ ax6e .  This proof mimics that of ~ equsal (in
       particular, note that ~ pm5.32i , ~ exbii , ~ 19.41 , ~ mpbiran
       correspond respectively to ~ pm5.74i , ~ albii , ~ 19.23 , ~ a1bi ).
       (Contributed by BJ, 20-Aug-2020.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    equsexALT $p |- ( E. x ( x = y /\ ph ) <-> ps ) $=
      ( weq wa wex pm5.32i exbii ax6e 19.41 mpbiran bitri ) CDGZAHZCIPBHZCIZBQR
      CPABFJKSPCIBCDLPBCEMNO $.
  $}

  ${
    equsalh.1 $e |- ( ps -> A. x ps ) $.
    equsalh.2 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( An equivalence related to implicit substitution.  See ~ equsalhw for a
       version with a disjoint variable condition requiring fewer axioms.
       (Contributed by NM, 2-Jun-1993.) $)
    equsalh $p |- ( A. x ( x = y -> ph ) <-> ps ) $=
      ( nf5i equsal ) ABCDBCEGFH $.

    $( An equivalence related to implicit substitution.  See ~ equsexhv for a
       version with a disjoint variable condition which does not require
       ~ ax-13 .  (Contributed by NM, 5-Aug-1993.) $)
    equsexh $p |- ( E. x ( x = y /\ ph ) <-> ps ) $=
      ( nf5i equsex ) ABCDBCEGFH $.
  $}

  ${
    $d x z $.  $d y z $.  $d z ph $.
    $( Derivation of set.mm's original ~ ax-c15 from ~ ax-c11n and the shorter
       ~ ax-12 that has replaced it.

       Theorem ~ ax12 shows the reverse derivation of ~ ax-12 from ~ ax-c15 .

       Normally, ~ axc15 should be used rather than ~ ax-c15 , except by
       theorems specifically studying the latter's properties.  (Contributed by
       NM, 2-Feb-2007.)  (Proof shortened by Wolf Lammen, 26-Mar-2023.) $)
    axc15 $p |- ( -. A. x x = y ->
                 ( x = y -> ( ph -> A. x ( x = y -> ph ) ) ) ) $=
      ( vz weq wal wn wex ax6ev dveeq2 ax12v equeuclr sps imim1d al2imi imim12d
      wi imim2d syl6mpi exlimdv mpi ) BCEZBFGZDCEZDHUBAUBAQZBFZQZQZDCIUCUDUHDUC
      UDUDBFZBDEZAUJAQZBFZQZQUHBCDJABDKUIUBUJUMUGUDUBUJQBDBCLZMUIULUFAUDUKUEBUD
      UBUJAUNNORPSTUA $.

    $( Obsolete proof of ~ axc15 as of 26-Mar-2023.  (Contributed by NM,
       2-Feb-2007.)  (Proof shortened by Wolf Lammen, 21-Apr-2018.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    axc15OLD $p |- ( -. A. x x = y ->
                 ( x = y -> ( ph -> A. x ( x = y -> ph ) ) ) ) $=
      ( vz weq wal wn wex wi ax6ev dveeq2 ax12v equequ2 sps imbi1d albid imbi2d
      wb nfa1 imbi12d mpbii syl6 exlimdv mpi ) BCEZBFGZDCEZDHUEAUEAIZBFZIZIZDCJ
      UFUGUKDUFUGUGBFZUKBCDKULBDEZAUMAIZBFZIZIUKABDLULUMUEUPUJUGUMUERBDCBMNZULU
      OUIAULUNUHBUGBSULUMUEAUQOPQTUAUBUCUD $.
  $}

  $( Rederivation of axiom ~ ax-12 from ~ ax12v (used only via ~ sp ) ,
     ~ axc11r , and ~ axc15 (on top of Tarski's FOL).  (Contributed by NM,
     22-Jan-2007.)  Proof uses contemporary axioms.  (Revised by Wolf Lammen,
     8-Aug-2020.)  (Proof shortened by BJ, 4-Jul-2021.) $)
  ax12 $p |- ( x = y -> ( A. y ph -> A. x ( x = y -> ph ) ) ) $=
    ( weq wal wi axc11r ala1 syl6 a1d wn sp axc15 syl7 pm2.61i ) BCDZBEZPACEZPA
    FBEZFZFQTPQRABESACBGAPBHIJRAQKPSACLABCMNO $.

  $( A bidirectional version of ~ axc15 .  (Contributed by NM, 30-Jun-2006.) $)
  ax12b $p |- ( ( -. A. x x = y /\ x = y ) ->
              ( ph <-> A. x ( x = y -> ph ) ) ) $=
    ( weq wal wn wa wi axc15 imp sp com12 adantl impbid ) BCDZBEFZOGAOAHZBEZPOA
    RHABCIJORAHPROAQBKLMN $.

  $( Alternate proof of ~ ax13 from FOL, ~ sp , and ~ axc9 .  (Contributed by
     NM, 21-Dec-2015.)  (Proof shortened by Wolf Lammen, 31-Jan-2018.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  ax13ALT $p |- ( -. x = y -> ( y = z -> A. x y = z ) ) $=
    ( weq wn wal wi sp con3i axc9 syl2im ax13b mpbir ) ABDZEZBCDZPAFZGZGOACDZEZ
    RGGONAFZETSAFZERUANNAHIUBSSAHIBCAJKQABCLM $.

  ${
    $d x z $.  $d y z $.
    $( Derive set.mm's original ~ ax-c11n from others.  Commutation law for
       identical variable specifiers.  The antecedent and consequent are true
       when ` x ` and ` y ` are substituted with the same variable.  Lemma L12
       in [Megill] p. 445 (p. 12 of the preprint).  If a disjoint variable
       condition is added on ` x ` and ` y ` , then this becomes an instance of
       ~ aevlem .  Use ~ aecom instead when this does not lengthen the proof.
       (Contributed by NM, 10-May-1993.)  (Revised by NM, 7-Nov-2015.)  (Proof
       shortened by Wolf Lammen, 6-Mar-2018.)  (Revised by Wolf Lammen,
       30-Nov-2019.)  (Proof shortened by BJ, 29-Mar-2021.)  (Proof shortened
       by Wolf Lammen, 2-Jul-2021.) $)
    axc11n $p |- ( A. x x = y -> A. y y = x ) $=
      ( vz weq wal wn dveeq1 com12 axc11r aev syl6 syl9 ax6evr exlimiiv pm2.18d
      wi ) ABDAEZBADBEZACDZQRFZRPPCSTSBEZQRTSUABACGHQUASAERSBAIACBABJKLCAMNO $.
  $}

  $( Commutation law for identical variable specifiers.  Both sides of the
     biconditional are true when ` x ` and ` y ` are substituted with the same
     variable.  (Contributed by NM, 10-May-1993.)  Change to a biconditional.
     (Revised by BJ, 26-Sep-2019.) $)
  aecom $p |- ( A. x x = y <-> A. y y = x ) $=
    ( weq wal axc11n impbii ) ABCADBACBDABEBAEF $.

  ${
    aecoms.1 $e |- ( A. x x = y -> ph ) $.
    $( A commutation rule for identical variable specifiers.  (Contributed by
       NM, 10-May-1993.) $)
    aecoms $p |- ( A. y y = x -> ph ) $=
      ( weq wal aecom sylbi ) CBECFBCEBFACBGDH $.
  $}

  ${
    naecoms.1 $e |- ( -. A. x x = y -> ph ) $.
    $( A commutation rule for distinct variable specifiers.  (Contributed by
       NM, 2-Jan-2002.) $)
    naecoms $p |- ( -. A. y y = x -> ph ) $=
      ( weq wal aecom sylnbir ) CBECFBCEBFABCGDH $.
  $}

  $( Show that ~ ax-c11 can be derived from ~ ax-c11n in the form of ~ axc11n .
     Normally, ~ axc11 should be used rather than ~ ax-c11 , except by theorems
     specifically studying the latter's properties.  (Contributed by NM,
     16-May-2008.)  (Proof shortened by Wolf Lammen, 21-Apr-2018.) $)
  axc11 $p |- ( A. x x = y -> ( A. x ph -> A. y ph ) ) $=
    ( wal wi axc11r aecoms ) ABDACDECBABCFG $.

  $( All variables are effectively bound in an identical variable specifier.
     (Contributed by NM, 13-May-1993.)  (Proof shortened by Wolf Lammen,
     21-Apr-2018.) $)
  hbae $p |- ( A. x x = y -> A. z A. x x = y ) $=
    ( weq wal wi wn sp axc9 syl7 axc11r axc11 pm2.43i syl5 pm2.61ii axc4i ax-11
    syl ) ABDZAEZSCEZAETCESUAACADCEZCBDCEZTUAFTSUBGUCGUASAHABCIJSACKTSBEZUCUATU
    DSABLMSBCKNOPSACQR $.

  $( All variables are effectively bound in an identical variable specifier.
     (Contributed by Mario Carneiro, 11-Aug-2016.) $)
  nfae $p |- F/ z A. x x = y $=
    ( weq wal hbae nf5i ) ABDAECABCFG $.

  $( All variables are effectively bound in a distinct variable specifier.  A
     version with a distinct variable condition based on fewer axioms is
     ~ hbnaev .  Lemma L19 in [Megill] p. 446 (p. 14 of the preprint).
     (Contributed by NM, 13-May-1993.) $)
  hbnae $p |- ( -. A. x x = y -> A. z -. A. x x = y ) $=
    ( weq wal hbae hbn ) ABDAECABCFG $.

  $( All variables are effectively bound in a distinct variable specifier.
     (Contributed by Mario Carneiro, 11-Aug-2016.) $)
  nfnae $p |- F/ z -. A. x x = y $=
    ( weq wal nfae nfn ) ABDAECABCFG $.

  ${
    hbnaes.1 $e |- ( A. z -. A. x x = y -> ph ) $.
    $( Rule that applies ~ hbnae to antecedent.  (Contributed by NM,
       15-May-1993.) $)
    hbnaes $p |- ( -. A. x x = y -> ph ) $=
      ( weq wal wn hbnae syl ) BCFBGHZKDGABCDIEJ $.
  $}

  ${
    $d x y z $.  $d z ph $.
    axc16i.1 $e |- ( x = z -> ( ph <-> ps ) ) $.
    axc16i.2 $e |- ( ps -> A. x ps ) $.
    $( Inference with ~ axc16 as its conclusion.  (Contributed by NM,
       20-May-2008.)  (Proof modification is discouraged.) $)
    axc16i $p |- ( A. x x = y -> ( ph -> A. x ph ) ) $=
      ( weq wal wi nfv ax7 cbv3 spimvw equcomi syl syl5com alimdv mpcom alimi
      biimpcd nf5i biimprd syl6com 3syl ) CDHZCIEDHZEIZCEHZEIZAACIZJUFUGCEUFEKU
      GCKCEDLMUHECHZEIZUJUFUHUMUGUFECECDLNUFUGULEUFDCHZUGULCDOUGDEHUNULJEDODECL
      PQRSULUIEECOZTPAUJBEIUKAUIBEUIABFUARBAECBCGUBAEKULUIBAJUOUIABFUCPMUDUE $.
  $}

  ${
    $d x y $.
    $( Alternate proof of ~ axc16nf , shorter but requiring ~ ax-11 and
       ~ ax-13 .  (Contributed by Mario Carneiro, 7-Oct-2016.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    axc16nfALT $p |- ( A. x x = y -> F/ z ph ) $=
      ( weq wal nfae axc16g nf5d ) BCEBFADBCDGABCDHI $.
  $}

  ${
    dral1.1 $e |- ( A. x x = y -> ( ph <-> ps ) ) $.
    $( Formula-building lemma for use with the Distinctor Reduction Theorem.
       Part of Theorem 9.4 of [Megill] p. 448 (p. 16 of preprint).
       (Contributed by NM, 27-Feb-2005.)  Allow a shortening of ~ dral1 .
       (Revised by Wolf Lammen, 4-Mar-2018.) $)
    dral2 $p |- ( A. x x = y -> ( A. z ph <-> A. z ps ) ) $=
      ( weq wal nfae albid ) CDGCHABECDEIFJ $.

    $( Formula-building lemma for use with the Distinctor Reduction Theorem.
       Part of Theorem 9.4 of [Megill] p. 448 (p. 16 of preprint).
       (Contributed by NM, 24-Nov-1994.)  Remove dependency on ~ ax-11 .
       (Revised by Wolf Lammen, 6-Sep-2018.) $)
    dral1 $p |- ( A. x x = y -> ( A. x ph <-> A. y ps ) ) $=
      ( weq wal nfa1 albid axc11 axc11r impbid bitrd ) CDFZCGZACGBCGZBDGZOABCNC
      HEIOPQBCDJBDCKLM $.

    $( Alternate proof of ~ dral1 , shorter but requiring ~ ax-11 .
       (Contributed by NM, 24-Nov-1994.)  (Proof shortened by Wolf Lammen,
       22-Apr-2018.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    dral1ALT $p |- ( A. x x = y -> ( A. x ph <-> A. y ps ) ) $=
      ( weq wal dral2 axc11 axc11r impbid bitrd ) CDFCGZACGBCGZBDGZABCDCEHMNOBC
      DIBDCJKL $.

    $( Formula-building lemma for use with the Distinctor Reduction Theorem.
       Part of Theorem 9.4 of [Megill] p. 448 (p. 16 of preprint).
       (Contributed by NM, 27-Feb-2005.) $)
    drex1 $p |- ( A. x x = y -> ( E. x ph <-> E. y ps ) ) $=
      ( weq wal wn wex notbid dral1 df-ex 3bitr4g ) CDFCGZAHZCGZHBHZDGZHACIBDIN
      PROQCDNABEJKJACLBDLM $.

    $( Formula-building lemma for use with the Distinctor Reduction Theorem.
       Part of Theorem 9.4 of [Megill] p. 448 (p. 16 of preprint).
       (Contributed by NM, 27-Feb-2005.) $)
    drex2 $p |- ( A. x x = y -> ( E. z ph <-> E. z ps ) ) $=
      ( weq wal nfae exbid ) CDGCHABECDEIFJ $.

    $( Formula-building lemma for use with the Distinctor Reduction Theorem.
       (Contributed by Mario Carneiro, 4-Oct-2016.) $)
    drnf1 $p |- ( A. x x = y -> ( F/ x ph <-> F/ y ps ) ) $=
      ( weq wal wi wnf dral1 imbi12d nf5 3bitr4g ) CDFCGZAACGZHZCGBBDGZHZDGACIB
      DIPRCDNABOQEABCDEJKJACLBDLM $.

    $( Formula-building lemma for use with the Distinctor Reduction Theorem.
       (Contributed by Mario Carneiro, 4-Oct-2016.)  (Proof shortened by Wolf
       Lammen, 5-May-2018.) $)
    drnf2 $p |- ( A. x x = y -> ( F/ z ph <-> F/ z ps ) ) $=
      ( weq wal nfae nfbidf ) CDGCHABECDEIFJ $.
  $}

  ${
    nfald2.1 $e |- F/ y ph $.
    nfald2.2 $e |- ( ( ph /\ -. A. x x = y ) -> F/ x ps ) $.
    $( Variation on ~ nfald which adds the hypothesis that ` x ` and ` y ` are
       distinct in the inner subproof.  (Contributed by Mario Carneiro,
       8-Oct-2016.) $)
    nfald2 $p |- ( ph -> F/ x A. y ps ) $=
      ( weq wal wnf wn wa nfnae nfan nfald ex nfa1 biidd drnf1 mpbiri pm2.61d2
      ) ACDGCHZBDHZCIZAUAJZUCAUDKBCDAUDDECDDLMFNOUAUCUBDIBDPUBUBCDUAUBQRST $.

    $( Variation on ~ nfexd which adds the hypothesis that ` x ` and ` y ` are
       distinct in the inner subproof.  (Contributed by Mario Carneiro,
       8-Oct-2016.) $)
    nfexd2 $p |- ( ph -> F/ x E. y ps ) $=
      ( wex wn wal df-ex weq wa nfnd nfald2 nfxfrd ) BDGBHZDIZHACBDJAQCAPCDEACD
      KCIHLBCFMNMO $.
  $}

  ${
    exdistrf.1 $e |- ( -. A. x x = y -> F/ y ph ) $.
    $( Distribution of existential quantifiers, with a bound-variable
       hypothesis saying that ` y ` is not free in ` ph ` , but ` x ` can be
       free in ` ph ` (and there is no distinct variable condition on ` x ` and
       ` y ` ).  (Contributed by Mario Carneiro, 20-Mar-2013.)  (Proof
       shortened by Wolf Lammen, 14-May-2018.) $)
    exdistrf $p |- ( E. x E. y ( ph /\ ps ) -> E. x ( ph /\ E. y ps ) ) $=
      ( wa wex weq wal wi 19.8a anim2i eximi biidd drex1 syl5ibr wn 19.40 19.9d
      nfe1 anim1d syl56 pm2.61i exlimi ) ABFZDGZABDGZFZCGZCUHCTCDHCIZUFUIJUFUIU
      JUHDGUEUHDBUGABDKLMUHUHCDUJUHNOPUFADGZUGFUJQZUHUIABDRULUKAUGAULDESUAUHCKU
      BUCUD $.
  $}

  ${
    dvelimf.1 $e |- F/ x ph $.
    dvelimf.2 $e |- F/ z ps $.
    dvelimf.3 $e |- ( z = y -> ( ph <-> ps ) ) $.
    $( Version of ~ dvelimv without any variable restrictions.  (Contributed by
       NM, 1-Oct-2002.)  (Revised by Mario Carneiro, 6-Oct-2016.)  (Proof
       shortened by Wolf Lammen, 11-May-2018.) $)
    dvelimf $p |- ( -. A. x x = y -> F/ x ps ) $=
      ( weq wi wal wn equsal bicomi nfnae wa wnf nfeqf ancoms a1i nfald2 nfxfrd
      nfimd ) BEDIZAJZEKZCDICKLZCUFBABEDGHMNUGUECECDEOUGCEICKLZPZUDACUHUGUDCQED
      CRSACQUIFTUCUAUB $.
  $}

  ${
    dvelimdf.1 $e |- F/ x ph $.
    dvelimdf.2 $e |- F/ z ph $.
    dvelimdf.3 $e |- ( ph -> F/ x ps ) $.
    dvelimdf.4 $e |- ( ph -> F/ z ch ) $.
    dvelimdf.5 $e |- ( ph -> ( z = y -> ( ps <-> ch ) ) ) $.
    $( Deduction form of ~ dvelimf .  (Contributed by NM, 7-Apr-2004.)
       (Revised by Mario Carneiro, 6-Oct-2016.)  (Proof shortened by Wolf
       Lammen, 11-May-2018.) $)
    dvelimdf $p |- ( ph -> ( -. A. x x = y -> F/ x ch ) ) $=
      ( weq wal wn wi wnf nfim1 wb com12 pm5.74d dvelimf pm5.5 nfbidf syl5ib )
      DELDMNACOZDPACDPABOUEDEFABDGIQACFHJQFELZABCAUFBCRKSTUAAUECDGACUBUCUD $.
  $}

  ${
    dvelimh.1 $e |- ( ph -> A. x ph ) $.
    dvelimh.2 $e |- ( ps -> A. z ps ) $.
    dvelimh.3 $e |- ( z = y -> ( ph <-> ps ) ) $.
    $( Version of ~ dvelim without any variable restrictions.  (Contributed by
       NM, 1-Oct-2002.)  (Proof shortened by Wolf Lammen, 11-May-2018.) $)
    dvelimh $p |- ( -. A. x x = y -> ( ps -> A. x ps ) ) $=
      ( weq wal wn nf5i dvelimf nf5rd ) CDICJKBCABCDEACFLBEGLHMN $.
  $}

  ${
    $d z ps $.
    dvelim.1 $e |- ( ph -> A. x ph ) $.
    dvelim.2 $e |- ( z = y -> ( ph <-> ps ) ) $.
    $( This theorem can be used to eliminate a distinct variable restriction on
       ` x ` and ` z ` and replace it with the "distinctor" ` -. A. x x = y `
       as an antecedent. ` ph ` normally has ` z ` free and can be read
       ` ph ( z ) ` , and ` ps ` substitutes ` y ` for ` z ` and can be read
       ` ph ( y ) ` .  We do not require that ` x ` and ` y ` be distinct: if
       they are not, the distinctor will become false (in multiple-element
       domains of discourse) and "protect" the consequent.

       To obtain a closed-theorem form of this inference, prefix the hypotheses
       with ` A. x A. z ` , conjoin them, and apply ~ dvelimdf .

       Other variants of this theorem are ~ dvelimh (with no distinct variable
       restrictions) and ~ dvelimhw (that avoids ~ ax-13 ).  (Contributed by
       NM, 23-Nov-1994.) $)
    dvelim $p |- ( -. A. x x = y -> ( ps -> A. x ps ) ) $=
      ( ax-5 dvelimh ) ABCDEFBEHGI $.
  $}

  ${
    $d x ph $.  $d z ps $.
    dvelimv.1 $e |- ( z = y -> ( ph <-> ps ) ) $.
    $( Similar to ~ dvelim with first hypothesis replaced by a distinct
       variable condition.  (Contributed by NM, 25-Jul-2015.)  (Proof shortened
       by Wolf Lammen, 30-Apr-2018.) $)
    dvelimv $p |- ( -. A. x x = y -> ( ps -> A. x ps ) ) $=
      ( ax-5 dvelim ) ABCDEACGFH $.
  $}

  ${
    $d z ps $.
    dvelimnf.1 $e |- F/ x ph $.
    dvelimnf.2 $e |- ( z = y -> ( ph <-> ps ) ) $.
    $( Version of ~ dvelim using "not free" notation.  (Contributed by Mario
       Carneiro, 9-Oct-2016.) $)
    dvelimnf $p |- ( -. A. x x = y -> F/ x ps ) $=
      ( nfv dvelimf ) ABCDEFBEHGI $.
  $}

  ${
    $d w x z $.  $d w y $.
    $( Alternate proof of ~ dveeq2 , shorter but requiring ~ ax-11 .
       (Contributed by NM, 2-Jan-2002.)  (Revised by NM, 20-Jul-2015.)
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    dveeq2ALT $p |- ( -. A. x x = y -> ( z = y -> A. x z = y ) ) $=
      ( vw weq equequ2 dvelimv ) CDECBEABDDBCFG $.
  $}

  $( A variable introduction law for equality.  Lemma 15 of [Monk2] p. 109,
     however we do not require ` z ` to be distinct from ` x ` and ` y ` .  See
     ~ equvinv for a shorter proof requiring fewer axioms when ` z ` is
     required to be distinct from ` x ` and ` y ` .  (Contributed by NM,
     10-Jan-1993.)  (Proof shortened by Andrew Salmon, 25-May-2011.)  (Proof
     shortened by Wolf Lammen, 15-Sep-2018.) $)
  equvini $p |- ( x = y -> E. z ( x = z /\ z = y ) ) $=
    ( weq wa wex wi equtr equeuclr anc2ri syli 19.8a syl6 wn ax13 eximii 19.35i
    wal ax6e pm2.61i ) CADZABDZACDZCBDZEZCFZGUAUBUEUFUBUAUDUECABHUDUBUCCABIJZKU
    ECLMUANUBUBCRUFCABOUBUECUDUBUEGCCBSUGPQMT $.

  $( A variable elimination law for equality with no distinct variable
     requirements.  Compare ~ equvini .  (Contributed by NM, 1-Mar-2013.)
     (Proof shortened by Mario Carneiro, 17-Oct-2016.)  (Proof shortened by
     Wolf Lammen, 15-Jun-2019.) $)
  equvel $p |- ( A. z ( z = x <-> z = y ) -> x = y ) $=
    ( weq wb wal wex albi wi ax6e biimpr ax7 syli com12 eximii 19.35i spsd a1dd
    sps wn wa nfeqf 19.9d ex bija sylc ) CADZCBDZEZCFUGCFZUHCFZEABDZCGZULUGUHCH
    UIULCUHUIULICCBJUIUHULUHUIUGULUGUHKCABLZMNOPUJUKUMULIZUJUKULUMUGUKULICUGUHU
    LCUNQSRUJTZUKTZUOULUPUQUACABCUBUCUDUEUF $.

  $( A property related to substitution that unlike ~ equs5 does not require a
     distinctor antecedent.  See ~ equs5aALT for an alternate proof using
     ~ ax-12 but not ~ ax13 .  (Contributed by NM, 2-Feb-2007.) $)
  equs5a $p |- ( E. x ( x = y /\ A. y ph ) -> A. x ( x = y -> ph ) ) $=
    ( weq wal wa wi nfa1 ax12 imp exlimi ) BCDZACEZFLAGZBEZBNBHLMOABCIJK $.

  $( A property related to substitution that unlike ~ equs5 does not require a
     distinctor antecedent.  See ~ equs5eALT for an alternate proof using
     ~ ax-12 but not ~ ax13 .  (Contributed by NM, 2-Feb-2007.)  (Proof
     shortened by Wolf Lammen, 15-Jan-2018.) $)
  equs5e $p |- ( E. x ( x = y /\ ph ) -> A. x ( x = y -> E. y ph ) ) $=
    ( weq wa wex wi wal nfa1 ax12 hbe1 19.23bi impel exlimi ) BCDZAEOACFZGZBHZB
    QBIOPCHZRAPBCJASCACKLMN $.

  ${
    equs45f.1 $e |- F/ y ph $.
    $( Two ways of expressing substitution when ` y ` is not free in ` ph ` .
       The implication "to the left" is ~ equs4 and does not require the
       non-freeness hypothesis.  Theorem ~ sb56 replaces the non-freeness
       hypothesis with a disjoint variable condition and ~ equs5 replaces it
       with a distinctor as antecedent.  (Contributed by NM, 25-Apr-2008.)
       (Revised by Mario Carneiro, 4-Oct-2016.) $)
    equs45f $p |- ( E. x ( x = y /\ ph ) <-> A. x ( x = y -> ph ) ) $=
      ( weq wa wex wi wal nf5ri anim2i eximi equs5a syl equs4 impbii ) BCEZAFZB
      GZQAHBIZSQACIZFZBGTRUBBAUAQACDJKLABCMNABCOP $.
  $}

  $( Lemma used in proofs of substitution properties.  If there is a disjoint
     variable condition on ` x , y ` , then ~ sb56 can be used instead; if
     ` y ` is not free in ` ph ` , then ~ equs45f can be used.  (Contributed by
     NM, 14-May-1993.)  (Revised by BJ, 1-Oct-2018.) $)
  equs5 $p |- ( -. A. x x = y ->
             ( E. x ( x = y /\ ph ) <-> A. x ( x = y -> ph ) ) ) $=
    ( weq wal wn wa wex wi nfna1 nfa1 axc15 impd exlimd equs4 impbid1 ) BCDZBEF
    ZQAGZBHQAIZBEZRSUABQBJTBKRQAUAABCLMNABCOP $.

  ${
    $d w z x $.  $d w y $.
    $( Quantifier introduction when one pair of variables is distinct.
       (Contributed by NM, 2-Jan-2002.) $)
    dveel1 $p |- ( -. A. x x = y -> ( y e. z -> A. x y e. z ) ) $=
      ( vw wel elequ1 dvelimv ) DCEBCEABDDBCFG $.

    $( Quantifier introduction when one pair of variables is distinct.
       (Contributed by NM, 2-Jan-2002.) $)
    dveel2 $p |- ( -. A. x x = y -> ( z e. y -> A. x z e. y ) ) $=
      ( vw wel elequ2 dvelimv ) CDECBEABDDBCFG $.
  $}

  ${
    $d w y $.  $d w z $.  $d w x $.
    $( Axiom ~ ax-c14 is redundant if we assume ~ ax-5 .  Remark 9.6 in
       [Megill] p. 448 (p. 16 of the preprint), regarding axiom scheme C14'.

       Note that ` w ` is a dummy variable introduced in the proof.  Its
       purpose is to satisfy the distinct variable requirements of ~ dveel2 and
       ~ ax-5 .  By the end of the proof it has vanished, and the final theorem
       has no distinct variable requirements.  (Contributed by NM,
       29-Jun-1995.)  (Proof modification is discouraged.) $)
    axc14 $p |- ( -. A. z z = x -> ( -. A. z z = y ->
              ( x e. y -> A. z x e. y ) ) ) $=
      ( vw weq wal wn wel hbn1 dveel2 hbim1 elequ1 imbi2d dvelim nfa1 nfn 19.21
      wi syl6ib pm2.86d ) CAECFGZCBEZCFZGZABHZUECFZUAUDUERZUGCFUDUFRUDDBHZRUGCA
      DUDUHCUBCICBDJKDAEUHUEUDDABLMNUDUECUCCUBCOPQST $.
  $}

  $( Obsolete proof of ~ sbequ as of 7-Jul-2023.  An equality theorem for
     substitution.  Used in proof of Theorem 9.7 in [Megill] p. 449 (p. 16 of
     the preprint).  (Contributed by NM, 14-May-1993.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  sbequOLD $p |- ( x = y -> ( [ x / z ] ph <-> [ y / z ] ph ) ) $=
    ( weq wsb sbequi wi equcoms impbid ) BCEADBFZADCFZABCDGLKHCBACBDGIJ $.

  $( Formula-building lemma for use with the Distinctor Reduction Theorem.
     Part of Theorem 9.4 of [Megill] p. 448 (p. 16 of preprint).  (Contributed
     by NM, 27-Feb-2005.) $)
  drsb2 $p |- ( A. x x = y -> ( [ x / z ] ph <-> [ y / z ] ph ) ) $=
    ( weq wsb wb sbequ sps ) BCEADBFADCFGBABCDHI $.

  ${
    sbh.1 $e |- ( ph -> A. x ph ) $.
    $( Substitution for a variable not free in a wff does not affect it.
       (Contributed by NM, 14-May-1993.) $)
    sbh $p |- ( [ y / x ] ph <-> ph ) $=
      ( nf5i sbf ) ABCABDEF $.
  $}

  $( Substitution has no effect on a bound variable.  (Contributed by NM,
     1-Jul-2005.) $)
  sbf2 $p |- ( [ y / x ] A. x ph <-> A. x ph ) $=
    ( wal nfa1 sbf ) ABDBCABEF $.

  ${
    nfs1f.1 $e |- F/ x ph $.
    $( If ` x ` is not free in ` ph ` , it is not free in ` [ y / x ] ph ` .
       (Contributed by Mario Carneiro, 11-Aug-2016.) $)
    nfs1f $p |- F/ x [ y / x ] ph $=
      ( wsb sbf nfxfr ) ABCEABABCDFDG $.
  $}

  ${
    sb6x.1 $e |- F/ x ph $.
    $( Equivalence involving substitution for a variable not free.
       (Contributed by NM, 2-Jun-1993.)  (Revised by Mario Carneiro,
       4-Oct-2016.) $)
    sb6x $p |- ( [ y / x ] ph <-> A. x ( x = y -> ph ) ) $=
      ( wsb weq wi wal sbf biidd equsal bitr4i ) ABCEABCFZAGBHABCDIAABCDMAJKL
      $.
  $}

  $( Substitution does not change an identical variable specifier.
     (Contributed by NM, 15-May-1993.) $)
  sbequ5 $p |- ( [ w / z ] A. x x = y <-> A. x x = y ) $=
    ( weq wal nfae sbf ) ABEAFCDABCGH $.

  $( Substitution does not change a distinctor.  (Contributed by NM,
     5-Aug-1993.) $)
  sbequ6 $p |- ( [ w / z ] -. A. x x = y <-> -. A. x x = y ) $=
    ( weq wal wn nfnae sbf ) ABEAFGCDABCHI $.

  ${
    sb5rf.1 $e |- F/ y ph $.
    $( Reversed substitution.  (Contributed by NM, 3-Feb-2005.)  (Revised by
       Mario Carneiro, 6-Oct-2016.)  (Proof shortened by Wolf Lammen,
       20-Sep-2018.) $)
    sb5rf $p |- ( ph <-> E. y ( y = x /\ [ y / x ] ph ) ) $=
      ( weq wsb wa wex sbequ12r equsex bicomi ) CBEABCFZGCHALACBDACBIJK $.

    $( Reversed substitution.  For a version requiring disjoint variables, but
       fewer axioms, see ~ sb6rfv .  (Contributed by NM, 1-Aug-1993.)  (Revised
       by Mario Carneiro, 6-Oct-2016.)  (Proof shortened by Wolf Lammen,
       21-Sep-2018.) $)
    sb6rf $p |- ( ph <-> A. y ( y = x -> [ y / x ] ph ) ) $=
      ( weq wsb wi wal sbequ12r equsal bicomi ) CBEABCFZGCHALACBDACBIJK $.
  $}

  ${
    $d x y $.
    $( Alternate proof of ~ ax12v2 , shorter, but depending on more axioms.
       (Contributed by NM, 5-Aug-1993.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    ax12vALT $p |- ( x = y -> ( ph -> A. x ( x = y -> ph ) ) ) $=
      ( weq wal wi ax-1 axc16 syl5 a1d axc15 pm2.61i ) BCDZBEZMAMAFZBEZFZFNQMAO
      NPAMGOBCHIJABCKL $.
  $}

  ${
    $d w y z $.  $d w x $.
    $( Substitution applied to an atomic membership wff.  (Contributed by NM,
       7-Nov-2006.)  (Proof shortened by Andrew Salmon, 14-Jun-2011.)  Reduce
       axiom usage.  (Revised by Wolf Lammen, 24-Jul-2023.) $)
    elsb3 $p |- ( [ x / y ] y e. z <-> x e. z ) $=
      ( vw wel elequ1 sbievw2 ) BCEACEDCEBADBDCFDACFG $.
  $}

  ${
    $d w y z $.  $d w x $.
    $( Substitution applied to an atomic membership wff.  (Contributed by
       Rodolfo Medina, 3-Apr-2010.)  (Proof shortened by Andrew Salmon,
       14-Jun-2011.)  Reduce axiom usage.  (Revised by Wolf Lammen,
       24-Jul-2023.) $)
    elsb4 $p |- ( [ x / y ] z e. y <-> z e. x ) $=
      ( vw wel elequ2 sbievw2 ) CBECAECDEBADBDCFDACFG $.
  $}

  ${
    $d x z $.  $d u v x w $.  $d u v y z $.  $d u v ph $.
    $( Commutativity law for substitution.  Used in proof of Theorem 9.7 of
       [Megill] p. 449 (p. 16 of the preprint).  (Contributed by NM,
       27-May-1997.)  (Proof shortened by Wolf Lammen, 23-Dec-2022.) $)
    sbcom2 $p |- ( [ w / z ] [ y / x ] ph <-> [ y / x ] [ w / z ] ph ) $=
      ( vv vu weq wsb wb wi wal 2sb6 alcom ancomst sbequ sbbidv ax6ev exlimiiv
      wa 2albii 3bitri bitr4i syl5bbr sylan9bb sylan9bbr bitr3d ex ) FEHZABCIZD
      EIZADEIZBCIZJZFGCHZUIUNKGUOUIUNUOUITADFIZBGIZUKUMUOUQUJDFIZUIUKUQABGIZDFI
      ZUOURUTBGHZDFHZTAKZDLBLZUQUTVBVATAKZBLDLVEDLBLVDADBFGMVEDBNVEVCBDVBVAAOUA
      UBABDGFMUCUOUSUJDFAGCBPQUDUJFEDPUEUIUQULBGIUOUMUIUPULBGAFEDPQULGCBPUFUGUH
      GCRSFERS $.

    $( Obsolete version of ~ sbcom2 as of 23-Dec-2022.  (Contributed by NM,
       27-May-1997.)  (Proof shortened by Wolf Lammen, 24-Sep-2018.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    sbcom2OLD $p |- ( [ w / z ] [ y / x ] ph <-> [ y / x ] [ w / z ] ph ) $=
      ( vu vv weq wex wsb wb ax6ev wi wa wal 2sb6 alcom nfv sbequ sbbid ancomst
      2albii 3bitri bitr4i syl5bbr sylan9bb sylan9bbr bitr3d ex exlimdv exlimiv
      mp2 ) FCHZFIGEHZGIZABCJZDEJZADEJZBCJZKZFCLGELUMUOUTMFUMUNUTGUMUNUTUMUNNAD
      GJZBFJZUQUSUMVBUPDGJZUNUQVBABFJZDGJZUMVCVEBFHZDGHZNAMZDOBOZVBVEVGVFNAMZBO
      DOVJDOBOVIADBGFPVJDBQVJVHBDVGVFAUAUBUCABDFGPUDUMVDUPDGUMDRAFCBSTUEUPGEDSU
      FUNVBURBFJUMUSUNVAURBFUNBRAGEDSTURFCBSUGUHUIUJUKUL $.
  $}

  ${
    $d ph x $.  $d ph z $.
    $( Commutativity law for substitution.  This theorem was incorrectly used
       as our previous version of ~ pm11.07 but may still be useful.
       (Contributed by Andrew Salmon, 17-Jun-2011.)  (Proof shortened by Jim
       Kingdon, 22-Jan-2018.) $)
    sbcom4 $p |- ( [ w / x ] [ y / z ] ph <-> [ y / x ] [ w / z ] ph ) $=
      ( wsb sbv sbbii bitri 3bitr4i ) ABEFAADCFZBEFADEFZBCFZABEGKABEADCGHMABCFA
      LABCADEGHABCGIJ $.
  $}

  ${
    pm11.07.1 $e |- ph $.
    $( Axiom *11.07 in [WhiteheadRussell] p. 159.  The original reads: *11.07
       "Whatever possible argument ` x ` may be, ` ph ( x , y ) ` is true
       whatever possible argument ` y ` may be" implies the corresponding
       statement with ` x ` and ` y ` interchanged except
       in " ` ph ( x , y ) ` ".  Under our formalism this appears to correspond
       to ~ idi and not to ~ sbcom4 as earlier thought.  See
       ~ https://groups.google.com/d/msg/metamath/iS0fOvSemC8/M1zTH8wxCAAJ .
       (Contributed by BJ, 16-Sep-2018.)  (New usage is discouraged.) $)
    pm11.07 $p |- ph $=
      (  ) B $.
  $}

  $( We can always find values matching ` x ` and ` y ` , as long as they are
     represented by distinct variables.  This theorem merges two ~ ax6e
     instances ` E. z z = x ` and ` E. w w = y ` into a common expression.
     Alan Sare contributed a variant of this theorem with distinct variable
     conditions before, see ~ ax6e2nd .  (Contributed by Wolf Lammen,
     27-Sep-2018.) $)
  2ax6elem $p |- ( -. A. w w = z -> E. z E. w ( z = x /\ w = y ) ) $=
    ( weq wal wn wex ax6e nfnae nfan nfeqf pm3.21 spimed eximd mpi nfae equvini
    wa ex equtrr anim1d aleximi syl5 pm2.61d2 ) DCEDFGZDAEZDFZCAEZDBEZSZDHZCHZU
    FUHGZUMUFUNSZUICHUMCAIUOUIULCUFUNCDCCJDACJKUIUKUODBCADLUJUIMNOPTUHCBEZCHUMC
    BIUHUPULCDACQUPCDEZUJSZDHUHULCBDRUGURUKDUGUQUIUJDACUAUBUCUDOPUE $.

  ${
    $d w z $.
    $( We can always find values matching ` x ` and ` y ` , as long as they are
       represented by distinct variables.  Version of ~ 2ax6elem with a
       distinct variable constraint.  (Contributed by Wolf Lammen,
       28-Sep-2018.) $)
    2ax6e $p |- E. z E. w ( z = x /\ w = y ) $=
      ( weq wal wa wex aeveq jca 19.8a 3syl 2ax6elem pm2.61i ) DCEDFZCAEZDBEZGZ
      DHZCHZORSTOPQDCCAIDCDBIJRDKSCKLABCDMN $.
  $}

  ${
    $d w z $.
    2sb5rf.1 $e |- F/ z ph $.
    2sb5rf.2 $e |- F/ w ph $.
    $( Reversed double substitution.  (Contributed by NM, 3-Feb-2005.)
       (Revised by Mario Carneiro, 6-Oct-2016.)  Remove distinct variable
       constraints.  (Revised by Wolf Lammen, 28-Sep-2018.) $)
    2sb5rf $p |- ( ph <->
                E. z E. w ( ( z = x /\ w = y ) /\ [ z / x ] [ w / y ] ph ) ) $=
      ( weq wa wex wsb 19.41 exbii bitri sbequ12r sylan9bb pm5.32i 2exbii 2ax6e
      biantrur 3bitr4ri ) DBHZECHZIZAIZEJZDJZUDEJZDJZAIZUDACEKZBDKZIZEJDJAUGUHA
      IZDJUJUFUNDUDAEGLMUHADFLNUMUEDEUDULAUBULUKUCAUKDBOAECOPQRUIABCDESTUA $.

    $( Reversed double substitution.  (Contributed by NM, 3-Feb-2005.)
       (Revised by Mario Carneiro, 6-Oct-2016.)  Remove variable constraints.
       (Revised by Wolf Lammen, 28-Sep-2018.)  (Proof shortened by Wolf Lammen,
       13-Apr-2023.) $)
    2sb6rf $p |- ( ph <->
                A. z A. w ( ( z = x /\ w = y ) -> [ z / x ] [ w / y ] ph ) ) $=
      ( weq wa wal wex wsb 19.23 albii bitri sbequ12r sylan9bb pm5.74i 2albii
      wi 2ax6e a1bi 3bitr4ri ) DBHZECHZIZATZEJZDJZUFEKZDKZATZUFACELZBDLZTZEJDJA
      UIUJATZDJULUHUPDUFAEGMNUJADFMOUOUGDEUFUNAUDUNUMUEAUMDBPAECPQRSUKABCDEUAUB
      UC $.

    $( Obsolete version of ~ 2sb6rf as of 13-Apr-2023.  (Contributed by NM,
       3-Feb-2005.)  (Revised by Mario Carneiro, 6-Oct-2016.)  Remove variable
       constraints.  (Revised by Wolf Lammen, 28-Sep-2018.)
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    2sb6rfOLD $p |- ( ph <->
                A. z A. w ( ( z = x /\ w = y ) -> [ z / x ] [ w / y ] ph ) ) $=
      ( weq wa wsb wal wex sbequ12r sylan9bb pm5.74i 2albii 19.23 albii bitri
      wi wb 2ax6e pm5.5 ax-mp 3bitrri ) DBHZECHZIZACEJZBDJZTZEKDKUHATZEKZDKZUHE
      LZDLZATZAUKULDEUHUJAUFUJUIUGAUIDBMAECMNOPUNUOATZDKUQUMURDUHAEGQRUOADFQSUP
      UQAUABCDEUBUPAUCUDUE $.
  $}

  ${
    $d x y ph $.
    $( Elimination of double substitution.  (Contributed by NM, 5-Aug-1993.)
       (Proof shortened by Wolf Lammen, 29-Sep-2018.) $)
    sbel2x $p |- ( ph <-> E. x E. y ( ( x = z /\ y = w ) /\
                     [ y / w ] [ x / z ] ph ) ) $=
      ( weq wa wsb wex nfv 2sb5rf ancom anbi1i 2exbii excom 3bitri ) ACEFZBDFZG
      ZADBHECHZGZBICIRQGZTGZBICIUCCIBIAEDCBACJABJKUAUCCBSUBTQRLMNUCCBOP $.
  $}

  ${
    $d x y $.  $d y ph $.
    $( Obsolete version of ~ exsb as of 16-Oct-2022.  (Contributed by NM,
       2-Feb-2005.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    exsbOLD $p |- ( E. x ph <-> E. y A. x ( x = y -> ph ) ) $=
      ( weq wi wal nfv nfa1 ax12v sp com12 impbid cbvex ) ABCDZAEZBFZBCACGOBHNA
      PABCIPNAOBJKLM $.
  $}

  ${
    $d y x $.  $d y t $.  $d y ph $.
    $( Simplified definition of substitution when variables are distinct.
       Version of ~ sb6 with a distinctor.  (Contributed by NM, 27-May-1997.)
       Revise ~ df-sb .  (Revised by Wolf Lammen, 25-Jul-2023.) $)
    sb4b $p |- ( -. A. x x = t -> ( [ t / x ] ph
                                              <-> A. x ( x = t -> ph ) ) ) $=
      ( vy weq wal wn wi wsb wnf wb nfeqf2 wa nfnf1 nfan1 equequ2 imbi1d adantl
      id albid pm5.74da syl albidv df-sb wex ax6ev a1bi 19.23v bitr4i 3bitr4g )
      BCEZBFGZDCEZBDEZAHZBFZHZDFUMUKAHZBFZHZDFZABCIUSULUQUTDULUMBJZUQUTKBCDLVBU
      MUPUSVBUMMUOURBVBUMBUMBNVBSOUMUOURKVBUMUNUKADCBPQRTUAUBUCABDCUDUSUMDUEZUS
      HVAVCUSDCUFUGUMUSDUHUIUJ $.
  $}

  $( One direction of a simplified definition of substitution.  The converse
     requires either a disjoint variable condition ( ~ sb6 ) or a non-freeness
     hypothesis ( ~ sb6f ).  (Contributed by NM, 13-May-1993.)  Revise
     ~ df-sb .  (Revised by Wolf Lammen, 26-Jul-2023.) $)
  sb2 $p |- ( A. x ( x = y -> ph ) -> [ y / x ] ph ) $=
    ( weq wal wi wsb pm2.27 al2imi stdpc4 syl6 wn sb4b biimprd pm2.61i ) BCDZBE
    ZPAFZBEZABCGZFQSABETPRABPAHIABCJKQLTSABCMNO $.

  $( One direction of a simplified definition of substitution when variables
     are distinct.  (Contributed by NM, 5-Aug-1993.) $)
  sb3 $p |- ( -. A. x x = y -> ( E. x ( x = y /\ ph ) -> [ y / x ] ph ) ) $=
    ( weq wal wn wa wex wi wsb equs5 sb2 syl6bi ) BCDZBEFNAGBHNAIBEABCJABCKABCL
    M $.

  $( Obsolete as of 30-Jul-2023.  Use ~ sb4b instead.  One direction of a
     simplified definition of substitution when variables are distinct.
     (Contributed by NM, 14-May-1993.)  Revise ~ df-sb .  (Revised by Wolf
     Lammen, 25-Jul-2023.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  sb4OLD $p |- ( -. A. x x = y -> ( [ y / x ] ph -> A. x ( x = y -> ph ) ) ) $=
    ( weq wal wn wsb wi sb4b biimpd ) BCDZBEFABCGKAHBEABCIJ $.

  $( One direction of a simplified definition of substitution.  The converse
     requires either a disjoint variable condition ( ~ sb5 ) or a non-freeness
     hypothesis ( ~ sb5f ).  (Contributed by NM, 13-May-1993.)  Revise
     ~ df-sb .  (Revised by Wolf Lammen, 29-Jul-2023.) $)
  sb1 $p |- ( [ y / x ] ph -> E. x ( x = y /\ ph ) ) $=
    ( weq wal wsb wa wex wi sbequ2 19.8a ex syld sps sb4b equs4 syl6bi pm2.61i
    wn ) BCDZBEZABCFZTAGZBHZIZTUEBTUBAUDABCJTAUDUCBKLMNUASUBTAIBEUDABCOABCPQR
    $.

  $( Simplified definition of substitution when variables are distinct.  This
     is the biconditional strengthening of ~ sb3 .  (Contributed by BJ,
     6-Oct-2018.) $)
  sb3b $p |- ( -. A. x x = y -> ( [ y / x ] ph <-> E. x ( x = y /\ ph ) ) ) $=
    ( weq wal wn wsb wa wex sb1 sb3 impbid2 ) BCDZBEFABCGMAHBIABCJABCKL $.

  $( A version of one implication of ~ sb4b that does not require a distinctor
     antecedent.  (Contributed by NM, 2-Feb-2007.)  Revise ~ df-sb .  (Revised
     by Wolf Lammen, 28-Jul-2023.) $)
  sb4a $p |- ( [ t / x ] A. t ph -> A. x ( x = t -> ph ) ) $=
    ( weq wal wsb wi sbequ2 sps axc11r ala1 syl6 syld wn sp imim2i alimi syl6bi
    sb4b pm2.61i ) BCDZBEZACEZBCFZUAAGZBEZGUBUDUCUFUAUDUCGBUCBCHIUBUCABEUFACBJA
    UABKLMUBNUDUAUCGZBEUFUCBCSUGUEBUCAUAACOPQRT $.

  ${
    $d z x $.  $d z y $.  $d z ph $.
    $( Alternate definition of substitution.  Remark 9.1 in [Megill] p. 447 (p.
       15 of the preprint).  This was the original definition before ~ df-sb .
       Note that it does not require dummy variables in its definiens; this is
       done by having ` x ` free in the first conjunct and bound in the second.
       (Contributed by BJ, 9-Jul-2023.)  Revise ~ df-sb .  (Revised by Wolf
       Lammen, 29-Jul-2023.) $)
    dfsb1 $p |- ( [ y / x ] ph <->
                ( ( x = y -> ph ) /\ E. x ( x = y /\ ph ) ) ) $=
      ( wsb weq wi wa wex sbequ2 com12 sb1 jca wal id sbequ1 embantd adantrd wn
      sps sb3 adantld pm2.61i impbii ) ABCDZBCEZAFZUEAGBHZGZUDUFUGUEUDAABCIJABC
      KLUEBMZUHUDFUIUFUDUGUEUFUDFBUEUEAUDUENABCOPSQUIRUGUDUFABCTUAUBUC $.
  $}

  $( Obsolete version of ~ spsbe as of 7-Jul-2023.  A specialization theorem.
     (Contributed by NM, 29-Jun-1993.)  (Proof shortened by Wolf Lammen,
     3-May-2018.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  spsbeOLDOLD $p |- ( [ y / x ] ph -> E. x ph ) $=
    ( wsb weq wa wex sb1 exsimpr syl ) ABCDBCEZAFBGABGABCHKABIJ $.

  ${
    $d x y $.
    $( Obsolete version of ~ sb2 as of 8-Jul-2023.  Version of ~ sb2 with a
       disjoint variable condition, which does not require ~ ax-13 .
       (Contributed by BJ, 31-May-2019.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    sb2vOLDOLD $p |- ( A. x ( x = y -> ph ) -> [ y / x ] ph ) $=
      ( weq wi wal wa wex wsb sp equs4v dfsb1 sylanbrc ) BCDZAEZBFONAGBHABCIOBJ
      ABCKABCLM $.

    $( Obsolete version of ~ sb4vOLD as of 8-Jul-2023.  Version of ~ sb4OLD
       with a disjoint variable condition instead of a distinctor antecedent,
       which does not require ~ ax-13 .  (Contributed by BJ, 23-Jun-2019.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    sb4vOLDOLD $p |- ( [ y / x ] ph -> A. x ( x = y -> ph ) ) $=
      ( wsb weq wa wex wi wal sb1 sb56 sylib ) ABCDBCEZAFBGMAHBIABCJABCKL $.
  $}

  $( Obsolete version of ~ sbequ2 as of 8-Jul-2023.  An equality theorem for
     substitution.  (Contributed by NM, 16-May-1993.)  (Proof shortened by Wolf
     Lammen, 25-Feb-2018.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  sbequ2OLD $p |- ( x = y -> ( [ y / x ] ph -> ph ) ) $=
    ( wsb weq wi wa wex dfsb1 simplbi com12 ) ABCDZBCEZALMAFMAGBHABCIJK $.

  ${
    sbimiOLD.1 $e |- ( ph -> ps ) $.
    $( Obsolete version of ~ sbimi as of 6-Jul-2023.  Infer substitution into
       antecedent and consequent of an implication.  (Contributed by NM,
       25-Jun-1998.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    sbimiOLD $p |- ( [ y / x ] ph -> [ y / x ] ps ) $=
      ( weq wi wa wex wsb imim2i anim2i eximi anim12i dfsb1 3imtr4i ) CDFZAGZQA
      HZCIZHQBGZQBHZCIZHACDJBCDJRUATUCABQEKSUBCABQELMNACDOBCDOP $.
  $}

  ${
    $d x ph $.
    sbimdvOLD.2 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Obsolete version of ~ sbimdv as of 6-Jul-2023.  Deduction substituting
       both sides of an implication, with ` ph ` and ` x ` disjoint.  See also
       ~ sbimd .  (Contributed by Wolf Lammen, 6-May-2023.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    sbimdvOLD $p |- ( ph -> ( [ y / x ] ps -> [ y / x ] ch ) ) $=
      ( weq wi wa wex wsb imim2d anim2d eximdv anim12d dfsb1 3imtr4g ) ADEGZBHZ
      RBIZDJZIRCHZRCIZDJZIBDEKCDEKASUBUAUDABCRFLATUCDABCRFMNOBDEPCDEPQ $.
  $}

  ${
    $d x ph $.
    sbbidvOLD.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Obsolete version of ~ sbbidv as of 6-Jul-2023.  Deduction substituting
       both sides of a biconditional, with ` ph ` and ` x ` disjoint.  See also
       ~ sbbid .  (Contributed by Wolf Lammen, 6-May-2023.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    sbbidvOLD $p |- ( ph -> ( [ y / x ] ps <-> [ y / x ] ch ) ) $=
      ( wsb biimpd sbimdv biimprd impbid ) ABDEGCDEGABCDEABCFHIACBDEABCFJIK $.
  $}

  ${
    $d x y $.
    $( Obsolete version of ~ equsb1v as of 19-Jun-2023.  (Contributed by BJ,
       11-Sep-2019.)  Remove dependencies on axioms.  (Revised by Wolf Lammen,
       30-May-2023.)  (Proof shortened by Steven Nguyen, 31-May-2023.)
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    equsb1vOLDOLD $p |- [ y / x ] x = y $=
      ( weq wsb wi wa wex id ax6ev ancli eximii dfsb1 mpbir2an ) ABCZABDNNENNFZ
      AGNHZNOAABINNPJKNABLM $.
  $}

  ${
    sbimdOLD.1 $e |- F/ x ph $.
    sbimdOLD.2 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Deduction substituting both sides of an implication.  (Contributed by
       Wolf Lammen, 24-Nov-2022.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    sbimdOLD $p |- ( ph -> ( [ y / x ] ps -> [ y / x ] ch ) ) $=
      ( weq wi wa wex wsb imim2d anim2d eximd anim12d dfsb1 3imtr4g ) ADEHZBIZS
      BJZDKZJSCIZSCJZDKZJBDELCDELATUCUBUEABCSGMAUAUDDFABCSGNOPBDEQCDEQR $.
  $}

  ${
    $d x y $.
    sbtvOLD.1 $e |- ph $.
    $( Obsolete version of ~ sbt as of 6-Jul-2023.  A substitution into a
       theorem yields a theorem.  See ~ sbt when ` x ` , ` y ` need not be
       disjoint.  (Contributed by BJ, 31-May-2019.)  Reduce axioms.  (Revised
       by Steven Nguyen, 25-Apr-2023.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    sbtvOLD $p |- [ x / y ] ph $=
      ( wsb weq wi wa wex a1i ax6ev exan dfsb1 mpbir2an ) ACBECBFZAGOAHCIAODJOA
      CCBKDLACBMN $.
  $}

  $( Obsolete version of ~ sbequ1 as of 8-Jul-2023.  An equality theorem for
     substitution.  (Contributed by NM, 16-May-1993.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  sbequ1OLD $p |- ( x = y -> ( ph -> [ y / x ] ph ) ) $=
    ( weq wsb wa wi wex pm3.4 19.8a dfsb1 sylanbrc ex ) BCDZAABCEZNAFZNAGPBHONA
    IPBJABCKLM $.

  $( Bound-variable hypothesis builder for substitution.  (Contributed by NM,
     14-May-1993.) $)
  hbsb2 $p |- ( -. A. x x = y -> ( [ y / x ] ph -> A. x [ y / x ] ph ) ) $=
    ( weq wal wn wsb wi sb4b sb2 axc4i syl6bi ) BCDZBEFABCGZMAHZBENBEABCIONBABC
    JKL $.

  $( Bound-variable hypothesis builder for substitution.  (Contributed by Mario
     Carneiro, 4-Oct-2016.) $)
  nfsb2 $p |- ( -. A. x x = y -> F/ x [ y / x ] ph ) $=
    ( weq wal wn wsb nfna1 hbsb2 nf5d ) BCDZBEFABCGBKBHABCIJ $.

  $( Special case of a bound-variable hypothesis builder for substitution.
     (Contributed by NM, 2-Feb-2007.) $)
  hbsb2a $p |- ( [ y / x ] A. y ph -> A. x [ y / x ] ph ) $=
    ( wal wsb weq wi sb4a sb2 axc4i syl ) ACDBCEBCFAGZBDABCEZBDABCHLMBABCIJK $.

  $( One direction of a simplified definition of substitution that unlike
     ~ sb4b does not require a distinctor antecedent.  (Contributed by NM,
     2-Feb-2007.) $)
  sb4e $p |- ( [ y / x ] ph -> A. x ( x = y -> E. y ph ) ) $=
    ( wsb weq wa wex wi wal sb1 equs5e syl ) ABCDBCEZAFBGMACGHBIABCJABCKL $.

  $( Special case of a bound-variable hypothesis builder for substitution.
     (Contributed by NM, 2-Feb-2007.) $)
  hbsb2e $p |- ( [ y / x ] ph -> A. x [ y / x ] E. y ph ) $=
    ( wsb weq wex wi wal sb4e sb2 axc4i syl ) ABCDBCEACFZGZBHMBCDZBHABCINOBMBCJ
    KL $.

  ${
    hbsb3.1 $e |- ( ph -> A. y ph ) $.
    $( If ` y ` is not free in ` ph ` , ` x ` is not free in ` [ y / x ] ph ` .
       (Contributed by NM, 14-May-1993.) $)
    hbsb3 $p |- ( [ y / x ] ph -> A. x [ y / x ] ph ) $=
      ( wsb wal sbimi hbsb2a syl ) ABCEZACFZBCEJBFAKBCDGABCHI $.
  $}

  ${
    nfs1.1 $e |- F/ y ph $.
    $( If ` y ` is not free in ` ph ` , ` x ` is not free in ` [ y / x ] ph ` .
       (Contributed by Mario Carneiro, 11-Aug-2016.) $)
    nfs1 $p |- F/ x [ y / x ] ph $=
      ( wsb nf5ri hbsb3 nf5i ) ABCEBABCACDFGH $.
  $}

  ${
    $d x y z $.  $d z ph $.
    $( Alternate proof of ~ axc16 , shorter but requiring ~ ax-10 , ~ ax-11 ,
       ~ ax-13 and using ~ df-nf and ~ df-sb .  (Contributed by NM,
       17-May-2008.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    axc16ALT $p |- ( A. x x = y -> ( ph -> A. x ph ) ) $=
      ( vz wsb sbequ12 ax-5 hbsb3 axc16i ) AABDEBCDABDFABDADGHI $.
  $}

  ${
    $d x y $.
    $( Alternate proof of ~ axc16g that uses ~ df-sb and requires ~ ax-10 ,
       ~ ax-11 , ~ ax-13 .  (Contributed by NM, 15-May-1993.)  (Proof shortened
       by Andrew Salmon, 25-May-2011.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    axc16gALT $p |- ( A. x x = y -> ( ph -> A. z ph ) ) $=
      ( weq wal aev axc16ALT biidd dral1 biimprd sylsyld ) BCEBFDBEDFZAABFZADFZ
      BCDBDGABCHMONAADBMAIJKL $.
  $}

  $( Substitution applied to an atomic wff.  (Contributed by NM,
     10-May-1993.) $)
  equsb1 $p |- [ y / x ] x = y $=
    ( weq wi wsb sb2 id mpg ) ABCZIDIABEAIABFIGH $.

  $( Substitution applied to an atomic wff.  (Contributed by NM,
     10-May-1993.) $)
  equsb2 $p |- [ y / x ] y = x $=
    ( weq wi wsb sb2 equcomi mpg ) ABCBACZDIABEAIABFABGH $.

  $( An alternate definition of proper substitution that, like ~ dfsb1 , mixes
     free and bound variables to avoid distinct variable requirements.
     (Contributed by NM, 17-Feb-2005.) $)
  dfsb2 $p |- ( [ y / x ] ph <->
              ( ( x = y /\ ph ) \/ A. x ( x = y -> ph ) ) ) $=
    ( wsb weq wa wi wal wo sbequ2 sps orc syl6an sb4b olc syl6bi pm2.61i sbequ1
    sp wn imp sb2 jaoi impbii ) ABCDZBCEZAFZUFAGBHZIZUFBHZUEUIGUJUFUEAUIUFBSUFU
    EAGBABCJKUGUHLMUJTUEUHUIABCNUHUGOPQUGUEUHUFAUEABCRUAABCUBUCUD $.

  $( An alternate definition of proper substitution ~ df-sb that uses only
     primitive connectives (no defined terms) on the right-hand side.
     (Contributed by NM, 6-Mar-2007.) $)
  dfsb3 $p |- ( [ y / x ] ph <->
              ( ( x = y -> -. ph ) -> A. x ( x = y -> ph ) ) ) $=
    ( weq wa wi wal wo wn wsb df-or dfsb2 imnan imbi1i 3bitr4i ) BCDZAEZPAFBGZH
    QIZRFABCJPAIFZRFQRKABCLTSRPAMNO $.

  $( Obsolete proof of ~ sbequi as of 7-Jul-2023.  An equality theorem for
     substitution.  (Contributed by NM, 14-May-1993.)  (Proof shortened by Wolf
     Lammen, 15-Sep-2018.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  sbequiOLD $p |- ( x = y -> ( [ x / z ] ph -> [ y / z ] ph ) ) $=
    ( weq wsb wi equtr sbequ2 sbequ1 syl9 syld wn ax13 sp con3i sb4OLD equeuclr
    wal syl imim1d al2imi sb2 syl6 pm2.61i ) DBEZBCEZADBFZADCFZGZGUFUGDCEZUJDBC
    HUFUHAUKUIADBIADCJKLUFMZUGUGDSZUJDBCNULUHUFAGZDSZUMUIULUFDSZMUHUOGUPUFUFDOP
    ADBQTUMUOUKAGZDSUIUGUNUQDUGUKUFABDCRUAUBADCUCUDKLUE $.

  $( Formula-building lemma for use with the Distinctor Reduction Theorem.
     Part of Theorem 9.4 of [Megill] p. 448 (p. 16 of preprint).  (Contributed
     by NM, 2-Jun-1993.) $)
  drsb1 $p |- ( A. x x = y -> ( [ z / x ] ph <-> [ z / y ] ph ) ) $=
    ( weq wal wi wa wex wsb wb equequ1 sps imbi1d anbi1d drex1 anbi12d 3bitr4g
    dfsb1 ) BCEZBFZBDEZAGZUBAHZBIZHCDEZAGZUFAHZCIZHABDJACDJUAUCUGUEUIUAUBUFATUB
    UFKBBCDLMZNUDUHBCUAUBUFAUJOPQABDSACDSR $.

  ${
    $d v y $.
    $( In the case of two successive substitutions for two always equal
       variables, the second substitution has no effect.  (Contributed by BJ
       and WL, 9-Aug-2023.) $)
    sb2ae $p |-
               ( A. x x = y -> ( [ u / x ] [ v / y ] ph <-> [ v / y ] ph ) ) $=
      ( weq wal wsb drsb1 nfs1v sbf syl6bb ) BCFBGACDHZBEHMCEHMMBCEIMCEACDJKL
      $.
  $}

  ${
    sb6f.1 $e |- F/ y ph $.
    $( Equivalence for substitution when ` y ` is not free in ` ph ` .  The
       implication "to the left" is ~ sb2 and does not require the non-freeness
       hypothesis.  Theorem ~ sb6 replaces the non-freeness hypothesis with a
       disjoint variable condition.  (Contributed by NM, 2-Jun-1993.)  (Revised
       by Mario Carneiro, 4-Oct-2016.) $)
    sb6f $p |- ( [ y / x ] ph <-> A. x ( x = y -> ph ) ) $=
      ( wsb weq wi wal nf5ri sbimi sb4a syl sb2 impbii ) ABCEZBCFAGBHZOACHZBCEP
      AQBCACDIJABCKLABCMN $.

    $( Equivalence for substitution when ` y ` is not free in ` ph ` .  The
       implication "to the right" is ~ sb1 and does not require the
       non-freeness hypothesis.  Theorem ~ sb5 replaces the non-freeness
       hypothesis with a disjoint variable condition.  (Contributed by NM,
       5-Aug-1993.)  (Revised by Mario Carneiro, 4-Oct-2016.) $)
    sb5f $p |- ( [ y / x ] ph <-> E. x ( x = y /\ ph ) ) $=
      ( wsb weq wi wal wa wex sb6f equs45f bitr4i ) ABCEBCFZAGBHNAIBJABCDKABCDL
      M $.
  $}

  $( A variable not free in a proposition remains so after substitution in that
     proposition with a distinct variable (closed form of ~ nfsb4 ).
     (Contributed by NM, 7-Apr-2004.)  (Revised by Mario Carneiro, 4-Oct-2016.)
     (Proof shortened by Wolf Lammen, 11-May-2018.) $)
  nfsb4t $p |- ( A. x F/ z ph ->
                 ( -. A. z z = y -> F/ z [ y / x ] ph ) ) $=
    ( wnf wal weq wn wsb wi wa sbequ12 sps drnf2 biimpd spsd impcom nfnae nfan
    wb a1d nfnf1 nfal nfa1 sp adantr nfsb2 adantl a1i dvelimdf pm2.61dan ) ADEZ
    BFZBCGZBFZDCGDFHZABCIZDEZJUMUOKURUPUOUMURUOULURBUOULURAUQBCDUNAUQTZBABCLZMN
    OPQUAUMUOHZKZAUQDCBUMVADULDBADUBUCBCDRSUMVABULBUDBCBRSUMULVAULBUEUFVAUQBEUM
    ABCUGUHUNUSJVBUTUIUJUK $.

  ${
    nfsb4.1 $e |- F/ z ph $.
    $( A variable not free in a proposition remains so after substitution in
       that proposition with a distinct variable.  (Contributed by NM,
       14-May-1993.)  (Revised by Mario Carneiro, 4-Oct-2016.) $)
    nfsb4 $p |- ( -. A. z z = y -> F/ z [ y / x ] ph ) $=
      ( wnf weq wal wn wsb wi nfsb4t mpg ) ADFDCGDHIABCJDFKBABCDLEM $.
  $}

  $( Obsolete version of ~ sbn as of 8-Jul-2023.  Negation inside and outside
     of substitution are equivalent.  For a version requiring disjoint
     variables, but fewer axioms, see ~ sbnvOLD .  (Contributed by NM,
     14-May-1993.)  (Proof shortened by Wolf Lammen, 30-Apr-2018.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  sbnOLD $p |- ( [ y / x ] -. ph <-> -. [ y / x ] ph ) $=
    ( wn wsb weq wi wal wa wex dfsb1 exanali anbi2i annim 3bitri dfsb3 xchbinxr
    ) ADZBCEZBCFZRGZTAGBHZGZABCESUATRIBJZIUAUBDZIUCDRBCKUDUEUATABLMUAUBNOABCPQ
    $.

  $( Obsolete version of ~ sbi1 as of 24-Jul-2023.  Removal of implication from
     substitution.  (Contributed by NM, 14-May-1993.)
     (New usage is discouraged.)  (Proof modification is discouraged.) $)
  sbi1OLD $p |- ( [ y / x ] ( ph -> ps ) ->
                                          ( [ y / x ] ph -> [ y / x ] ps ) ) $=
    ( weq wal wi wsb sbequ2 syl5d sbequ1 syl6d sps wn sb4OLD al2imi sb2 pm2.61i
    ax-2 syl6 ) CDEZCFZABGZCDHZACDHZBCDHZGGZUAUGCUAUDUEBUFUAUEAUDBACDIUCCDIJBCD
    KLMUBNZUEUAAGZCFZUDUFACDOUHUDUAUCGZCFZUJUFGUCCDOULUJUABGZCFUFUKUIUMCUAABSPB
    CDQTTJR $.

  $( Obsolete version of ~ spsbim as of 6-Jul-2023.  Specialization of
     implication.  (Contributed by NM, 5-Aug-1993.)  (Proof shortened by Andrew
     Salmon, 25-May-2011.)  (New usage is discouraged.)
     (Proof modification is discouraged.) $)
  spsbimOLD $p |- ( A. x ( ph -> ps ) -> ( [ y / x ] ph -> [ y / x ] ps ) ) $=
    ( wi wal wsb stdpc4 sbi1 syl ) ABEZCFKCDGACDGBCDGEKCDHABCDIJ $.

  $( Implication inside and outside of a substitution are equivalent.
     (Contributed by NM, 14-May-1993.) $)
  sbim $p |- ( [ y / x ] ( ph -> ps ) <-> ( [ y / x ] ph -> [ y / x ] ps ) ) $=
    ( wi wsb sbi1 sbi2 impbii ) ABECDFACDFBCDFEABCDGABCDHI $.

  ${
    sbrim.1 $e |- F/ x ph $.
    $( Substitution in an implication with a variable not free in the
       antecedent affects only the consequent.  (Contributed by NM,
       2-Jun-1993.)  (Revised by Mario Carneiro, 4-Oct-2016.) $)
    sbrim $p |- ( [ y / x ] ( ph -> ps ) <-> ( ph -> [ y / x ] ps ) ) $=
      ( wi wsb sbim sbf imbi1i bitri ) ABFCDGACDGZBCDGZFAMFABCDHLAMACDEIJK $.
  $}

  ${
    sblim.1 $e |- F/ x ps $.
    $( Substitution in an implication with a variable not free in the
       consequent affects only the antecedent.  (Contributed by NM,
       14-Nov-2013.)  (Revised by Mario Carneiro, 4-Oct-2016.) $)
    sblim $p |- ( [ y / x ] ( ph -> ps ) <-> ( [ y / x ] ph -> ps ) ) $=
      ( wi wsb sbim sbf imbi2i bitri ) ABFCDGACDGZBCDGZFLBFABCDHMBLBCDEIJK $.
  $}

  $( Disjunction inside and outside of a substitution are equivalent.
     (Contributed by NM, 29-Sep-2002.) $)
  sbor $p |- ( [ y / x ] ( ph \/ ps ) <-> ( [ y / x ] ph \/ [ y / x ] ps ) ) $=
    ( wn wi wsb wo sbim sbn imbi1i bitri df-or sbbii 3bitr4i ) AEZBFZCDGZACDGZE
    ZBCDGZFZABHZCDGSUAHRPCDGZUAFUBPBCDIUDTUAACDJKLUCQCDABMNSUAMO $.

  $( Conjunction inside and outside of a substitution are equivalent.  For a
     version requiring disjoint variables, but fewer axioms, see ~ sbanvOLD .
     (Contributed by NM, 14-May-1993.) $)
  sban $p |- ( [ y / x ] ( ph /\ ps ) <-> ( [ y / x ] ph /\ [ y / x ] ps ) ) $=
    ( wn wi wsb wa sbn sbim imbi2i bitri xchbinx df-an sbbii 3bitr4i ) ABEZFZEZ
    CDGZACDGZBCDGZEZFZEABHZCDGUAUBHTRCDGZUDRCDIUFUAQCDGZFUDAQCDJUGUCUABCDIKLMUE
    SCDABNOUAUBNP $.

  $( Threefold conjunction inside and outside of a substitution are equivalent.
     (Contributed by NM, 14-Dec-2006.) $)
  sb3an $p |- ( [ y / x ] ( ph /\ ps /\ ch ) <->
              ( [ y / x ] ph /\ [ y / x ] ps /\ [ y / x ] ch ) ) $=
    ( w3a wsb wa df-3an sbbii sban anbi1i bitr4i 3bitri ) ABCFZDEGABHZCHZDEGPDE
    GZCDEGZHZADEGZBDEGZSFZOQDEABCIJPCDEKTUAUBHZSHUCRUDSABDEKLUAUBSIMN $.

  $( Equivalence inside and outside of a substitution are equivalent.
     (Contributed by NM, 14-May-1993.) $)
  sbbi $p |- ( [ y / x ] ( ph <-> ps )
     <-> ( [ y / x ] ph <-> [ y / x ] ps ) ) $=
    ( wb wsb wi wa dfbi2 sbbii sbim anbi12i sban 3bitr4i bitri ) ABEZCDFABGZBAG
    ZHZCDFZACDFZBCDFZEZPSCDABIJQCDFZRCDFZHUAUBGZUBUAGZHTUCUDUFUEUGABCDKBACDKLQR
    CDMUAUBINO $.

  $( Obsolete version of ~ spsbbi as of 6-Jul-2023.  Specialization of
     biconditional.  (Contributed by NM, 2-Jun-1993.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  spsbbiOLD $p |- ( A. x ( ph <-> ps )
                              -> ( [ y / x ] ph <-> [ y / x ] ps ) ) $=
    ( wb wal wsb stdpc4 sbbi sylib ) ABEZCFKCDGACDGBCDGEKCDHABCDIJ $.

  ${
    sblbis.1 $e |- ( [ y / x ] ph <-> ps ) $.
    $( Introduce left biconditional inside of a substitution.  (Contributed by
       NM, 19-Aug-1993.) $)
    sblbis $p |- ( [ y / x ] ( ch <-> ph ) <-> ( [ y / x ] ch <-> ps ) ) $=
      ( wb wsb sbbi bibi2i bitri ) CAGDEHCDEHZADEHZGLBGCADEIMBLFJK $.
  $}

  ${
    sbrbis.1 $e |- ( [ y / x ] ph <-> ps ) $.
    $( Introduce right biconditional inside of a substitution.  (Contributed by
       NM, 18-Aug-1993.) $)
    sbrbis $p |- ( [ y / x ] ( ph <-> ch ) <-> ( ps <-> [ y / x ] ch ) ) $=
      ( wb wsb sbbi bibi1i bitri ) ACGDEHADEHZCDEHZGBMGACDEILBMFJK $.
  $}

  ${
    sbrbif.1 $e |- F/ x ch $.
    sbrbif.2 $e |- ( [ y / x ] ph <-> ps ) $.
    $( Introduce right biconditional inside of a substitution.  (Contributed by
       NM, 18-Aug-1993.)  (Revised by Mario Carneiro, 4-Oct-2016.) $)
    sbrbif $p |- ( [ y / x ] ( ph <-> ch ) <-> ( ps <-> ch ) ) $=
      ( wb wsb sbrbis sbf bibi2i bitri ) ACHDEIBCDEIZHBCHABCDEGJNCBCDEFKLM $.
  $}

  $( Elimination of equality from antecedent after substitution.  (Contributed
     by NM, 5-Aug-1993.)  Reduce dependencies on axioms.  (Revised by Wolf
     Lammen, 28-Jul-2018.)  Revise ~ df-sb .  (Revised by Wolf Lammen,
     28-Jul-2023.) $)
  sbequ8 $p |- ( [ y / x ] ph <-> [ y / x ] ( x = y -> ph ) ) $=
    ( wsb weq wi equsb1 a1bi sbim bitr4i ) ABCDZBCEZBCDZKFLAFBCDMKBCGHLABCIJ $.

  ${
    sbie.1 $e |- F/ x ps $.
    sbie.2 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Conversion of implicit substitution to explicit substitution.  For
       versions requiring disjoint variables, but fewer axioms, see ~ sbiev and
       ~ sbievw .  (Contributed by NM, 30-Jun-1994.)  (Revised by Mario
       Carneiro, 4-Oct-2016.)  (Proof shortened by Wolf Lammen,
       13-Jul-2019.) $)
    sbie $p |- ( [ y / x ] ph <-> ps ) $=
      ( wb wsb weq equsb1 sbimi ax-mp sbf sblbis mpbi ) ABGZCDHZACDHBGCDIZCDHQC
      DJRPCDFKLBBACDBCDEMNO $.
  $}

  ${
    sbied.1 $e |- F/ x ph $.
    sbied.2 $e |- ( ph -> F/ x ch ) $.
    sbied.3 $e |- ( ph -> ( x = y -> ( ps <-> ch ) ) ) $.
    $( Conversion of implicit substitution to explicit substitution (deduction
       version of ~ sbie ).  (Contributed by NM, 30-Jun-1994.)  (Revised by
       Mario Carneiro, 4-Oct-2016.)  (Proof shortened by Wolf Lammen,
       24-Jun-2018.) $)
    sbied $p |- ( ph -> ( [ y / x ] ps <-> ch ) ) $=
      ( wsb wi sbrim nfim1 weq wb com12 pm5.74d sbie bitr3i pm5.74ri ) ABDEIZCA
      TJABJZDEIACJZABDEFKUAUBDEACDFGLDEMZABCAUCBCNHOPQRS $.
  $}

  ${
    $d x ph $.  $d x ch $.
    sbiedv.1 $e |- ( ( ph /\ x = y ) -> ( ps <-> ch ) ) $.
    $( Conversion of implicit substitution to explicit substitution (deduction
       version of ~ sbie ).  (Contributed by NM, 7-Jan-2017.) $)
    sbiedv $p |- ( ph -> ( [ y / x ] ps <-> ch ) ) $=
      ( nfv nfvd weq wb ex sbied ) ABCDEADGACDHADEIBCJFKL $.
  $}

  ${
    $d x y ps $.  $d t y $.
    2sbiev.1 $e |- ( ( x = t /\ y = u ) -> ( ph <-> ps ) ) $.
    $( Conversion of double implicit substitution to explicit substitution.
       (Contributed by AV, 29-Jul-2023.) $)
    2sbiev $p |- ( [ t / x ] [ u / y ] ph <-> ps ) $=
      ( wsb nfv weq sbiedv sbie ) ADEHBCFBCICFJABDEGKL $.
  $}

  $( Substituting ` y ` for ` x ` and then ` z ` for ` y ` is equivalent to
     substituting ` z ` for both ` x ` and ` y ` .  For a version requiring
     disjoint variables, but fewer axioms, see ~ sbcom3vv .  (Contributed by
     Giovanni Mascellani, 8-Apr-2018.)  Remove dependency on ~ ax-11 .
     (Revised by Wolf Lammen, 16-Sep-2018.)  (Proof shortened by Wolf Lammen,
     16-Sep-2018.) $)
  sbcom3 $p |- ( [ z / y ] [ y / x ] ph <-> [ z / y ] [ z / x ] ph ) $=
    ( weq wal wsb wb nfa1 drsb2 sbbid wn sb4b sbequ pm5.74i albii syl6bb bitr4d
    wi pm2.61i ) CDEZCFZABCGZCDGZABDGZCDGZHUBUCUECDUACIACDBJKUBLZUDUAUESZCFZUFU
    GUDUAUCSZCFUIUCCDMUJUHCUAUCUEACDBNOPQUECDMRT $.

  $( A composition law for substitution.  (Contributed by NM, 14-May-1993.)
     (Proof shortened by Wolf Lammen, 21-Sep-2018.) $)
  sbco $p |- ( [ y / x ] [ x / y ] ph <-> [ y / x ] ph ) $=
    ( wsb sbcom3 sbid sbbii bitri ) ACBDBCDACCDZBCDABCDACBCEIABCACFGH $.

  ${
    sbid2.1 $e |- F/ x ph $.
    $( An identity law for substitution.  (Contributed by NM, 14-May-1993.)
       (Revised by Mario Carneiro, 6-Oct-2016.) $)
    sbid2 $p |- ( [ y / x ] [ x / y ] ph <-> ph ) $=
      ( wsb sbco sbf bitri ) ACBEBCEABCEAABCFABCDGH $.
  $}

  ${
    $d x ph $.
    $( An identity law for substitution.  Used in proof of Theorem 9.7 of
       [Megill] p. 449 (p. 16 of the preprint).  (Contributed by NM,
       5-Aug-1993.) $)
    sbid2v $p |- ( [ y / x ] [ x / y ] ph <-> ph ) $=
      ( nfv sbid2 ) ABCABDE $.
  $}

  $( An idempotent law for substitution.  (Contributed by NM, 30-Jun-1994.)
     (Proof shortened by Andrew Salmon, 25-May-2011.)  (Proof shortened by Wolf
     Lammen, 13-Jul-2019.) $)
  sbidm $p |- ( [ y / x ] [ y / x ] ph <-> [ y / x ] ph ) $=
    ( wsb sbcom3 sbid sbbii bitr3i ) ABCDZBCDABBDZBCDIABBCEJABCABFGH $.

  ${
    sbco2.1 $e |- F/ z ph $.
    $( A composition law for substitution.  For versions requiring fewer
       axioms, but more disjoint variable conditions, see ~ sbco2v and
       ~ sbco2vv .  (Contributed by NM, 30-Jun-1994.)  (Revised by Mario
       Carneiro, 6-Oct-2016.)  (Proof shortened by Wolf Lammen,
       17-Sep-2018.) $)
    sbco2 $p |- ( [ y / z ] [ z / x ] ph <-> [ y / x ] ph ) $=
      ( weq wal wsb wb sbequ12 sbequ bitr3d sps wn nfnae nfsb4 wi sbied pm2.61i
      a1i ) DCFZDGZABDHZDCHZABCHZIZUAUFDUAUCUDUEUCDCJADCBKZLMUBNZUCUEDCDCDOABCD
      EPUAUCUEIQUHUGTRS $.
  $}

  ${
    sbco2d.1 $e |- F/ x ph $.
    sbco2d.2 $e |- F/ z ph $.
    sbco2d.3 $e |- ( ph -> F/ z ps ) $.
    $( A composition law for substitution.  (Contributed by NM, 2-Jun-1993.)
       (Revised by Mario Carneiro, 6-Oct-2016.) $)
    sbco2d $p |- ( ph -> ( [ y / z ] [ z / x ] ps <-> [ y / x ] ps ) ) $=
      ( wsb wi nfim1 sbco2 sbrim sbbii bitri 3bitr3i pm5.74ri ) ABCEIZEDIZBCDIZ
      ABJZCEIZEDIZUACDIASJZATJUACDEABEGHKLUCARJZEDIUDUBUEEDABCEFMNAREDGMOABCDFM
      PQ $.
  $}

  $( A composition law for substitution.  (Contributed by NM, 2-Jun-1993.)
     (Proof shortened by Wolf Lammen, 18-Sep-2018.) $)
  sbco3 $p |- ( [ z / y ] [ y / x ] ph <-> [ z / x ] [ x / y ] ph ) $=
    ( weq wal wsb wb drsb1 nfae sbequ12a sbbid bitr3d wn sbco sbbii nfnae nfsb2
    sps sbco2d syl5rbbr pm2.61i ) BCEZBFZABCGZCDGZACBGZBDGZHUDUEBDGUFUHUEBCDIUD
    UEUGBDBCBJUCUEUGHBABCKSLMUHUECBGZBDGUDNZUFUIUGBDACBOPUJUECDBBCCQBCBQABCRTUA
    UB $.

  $( A commutativity law for substitution.  (Contributed by NM, 27-May-1997.)
     (Proof shortened by Wolf Lammen, 20-Sep-2018.) $)
  sbcom $p |- ( [ y / z ] [ y / x ] ph <-> [ y / x ] [ y / z ] ph ) $=
    ( wsb sbco3 sbcom3 3bitr3i ) ABDEDCEADBEBCEABCEDCEADCEBCEABDCFABDCGADBCGH
    $.

  ${
    sbtrt.nf $e |- F/ y ph $.
    $( Partially closed form of ~ sbtr .  (Contributed by BJ, 4-Jun-2019.) $)
    sbtrt $p |- ( A. y [ y / x ] ph -> ph ) $=
      ( wsb wal stdpc4 sbid2 sylib ) ABCEZCFJCBEAJCBGACBDHI $.
  $}

  ${
    sbtr.nf $e |- F/ y ph $.
    sbtr.1 $e |- [ y / x ] ph $.
    $( A partial converse to ~ sbt .  If the substitution of a variable for a
       non-free one in a wff gives a theorem, then the original wff is a
       theorem.  (Contributed by BJ, 15-Sep-2018.) $)
    sbtr $p |- ph $=
      ( wsb sbtrt mpg ) ABCFACABCDGEH $.
  $}

  ${
    sb8.1 $e |- F/ y ph $.
    $( Substitution of variable in universal quantifier.  For a version
       requiring disjoint variables, but fewer axioms, see ~ sb8v .
       (Contributed by NM, 16-May-1993.)  (Revised by Mario Carneiro,
       6-Oct-2016.)  (Proof shortened by Jim Kingdon, 15-Jan-2018.) $)
    sb8 $p |- ( A. x ph <-> A. y [ y / x ] ph ) $=
      ( wsb nfs1 sbequ12 cbval ) AABCEBCDABCDFABCGH $.

    $( Substitution of variable in existential quantifier.  For a version
       requiring disjoint variables, but fewer axioms, see ~ sb8ev .
       (Contributed by NM, 12-Aug-1993.)  (Revised by Mario Carneiro,
       6-Oct-2016.)  (Proof shortened by Jim Kingdon, 15-Jan-2018.) $)
    sb8e $p |- ( E. x ph <-> E. y [ y / x ] ph ) $=
      ( wsb nfs1 sbequ12 cbvex ) AABCEBCDABCDFABCGH $.
  $}

  $( Commutation of quantification and substitution variables.  (Contributed by
     NM, 5-Aug-1993.)  Allow a shortening of ~ sb9i .  (Revised by Wolf Lammen,
     15-Jun-2019.) $)
  sb9 $p |- ( A. x [ x / y ] ph <-> A. y [ y / x ] ph ) $=
    ( weq wal wsb wb sbequ12a equcoms sps dral1 wn nfnae wnf nfsb2 naecoms cbv2
    wi a1i pm2.61i ) BCDZBEZACBFZBEABCFZCEGUCUDBCUAUCUDGZBUECBACBHIZJKUBLZUCUDB
    CBCBMBCCMUCCNCBACBOPABCOUAUERUGUFSQT $.

  $( Commutation of quantification and substitution variables.  (Contributed by
     NM, 5-Aug-1993.)  (Proof shortened by Wolf Lammen, 15-Jun-2019.) $)
  sb9i $p |- ( A. x [ x / y ] ph -> A. y [ y / x ] ph ) $=
    ( wsb wal sb9 biimpi ) ACBDBEABCDCEABCFG $.

  ${
    $d y ph $.
    $( Two ways of expressing " ` x ` is (effectively) not free in ` ph ` ".
       (Contributed by NM, 29-May-2009.) $)
    sbhb $p |- ( ( ph -> A. x ph ) <-> A. y ( ph -> [ y / x ] ph ) ) $=
      ( wal wi wsb nfv sb8 imbi2i 19.21v bitr4i ) AABDZEAABCFZCDZEAMECDLNAABCAC
      GHIAMCJK $.
  $}

  ${
    $d y z $.
    nfsb.1 $e |- F/ z ph $.
    $( If ` z ` is not free in ` ph ` , it is not free in ` [ y / x ] ph ` when
       ` y ` and ` z ` are distinct.  For a version requiring more disjoint
       variables, but fewer axioms, see ~ nfsbv .  (Contributed by Mario
       Carneiro, 11-Aug-2016.) $)
    nfsb $p |- F/ z [ y / x ] ph $=
      ( weq wal wsb wnf axc16nf nfsb4 pm2.61i ) DCFDGABCHZDIMDCDJABCDEKL $.
  $}

  ${
    $d y z $.
    hbsb.1 $e |- ( ph -> A. z ph ) $.
    $( If ` z ` is not free in ` ph ` , it is not free in ` [ y / x ] ph ` when
       ` y ` and ` z ` are distinct.  (Contributed by NM, 12-Aug-1993.) $)
    hbsb $p |- ( [ y / x ] ph -> A. z [ y / x ] ph ) $=
      ( wsb nf5i nfsb nf5ri ) ABCFDABCDADEGHI $.
  $}

  ${
    $d y z $.
    nfsbd.1 $e |- F/ x ph $.
    nfsbd.2 $e |- ( ph -> F/ z ps ) $.
    $( Deduction version of ~ nfsb .  (Contributed by NM, 15-Feb-2013.) $)
    nfsbd $p |- ( ph -> F/ z [ y / x ] ps ) $=
      ( weq wal wsb wnf wn wi alrimi nfsb4t syl axc16nf pm2.61d2 ) AEDHEIZBCDJZ
      EKZABEKZCISLUAMAUBCFGNBCDEOPTEDEQR $.
  $}

  ${
    $d y z $.
    sb7f.1 $e |- F/ z ph $.
    $( This version of ~ dfsb7 does not require that ` ph ` and ` z ` be
       distinct.  This permits it to be used as a definition for substitution
       in a formalization that omits the logically redundant axiom ~ ax-5 i.e.
       that doesn't have the concept of a variable not occurring in a wff.
       ( ~ df-sb is also suitable, but its mixing of free and bound variables
       is distasteful to some logicians.)  (Contributed by NM, 26-Jul-2006.)
       (Revised by Mario Carneiro, 6-Oct-2016.) $)
    sb7f $p |- ( [ y / x ] ph <->
               E. z ( z = y /\ E. x ( x = z /\ ph ) ) ) $=
      ( wsb weq wa wex sb5f sbbii sbco2 sb5 3bitr3i ) ABDFZDCFBDGAHBIZDCFABCFDC
      GPHDIOPDCABDEJKABCDELPDCMN $.
  $}

  ${
    $d y z $.
    sb7h.1 $e |- ( ph -> A. z ph ) $.
    $( This version of ~ dfsb7 does not require that ` ph ` and ` z ` be
       distinct.  This permits it to be used as a definition for substitution
       in a formalization that omits the logically redundant axiom ~ ax-5 i.e.
       that doesn't have the concept of a variable not occurring in a wff.
       ( ~ df-sb is also suitable, but its mixing of free and bound variables
       is distasteful to some logicians.)  (Contributed by NM, 26-Jul-2006.)
       (Proof shortened by Andrew Salmon, 25-May-2011.) $)
    sb7h $p |- ( [ y / x ] ph <->
               E. z ( z = y /\ E. x ( x = z /\ ph ) ) ) $=
      ( nf5i sb7f ) ABCDADEFG $.
  $}

  ${
    $d y z $.  $d z ph $.
    $( Obsolete version of ~ dfsb7 as of 8-Jul-2023.

       An alternate definition of proper substitution ~ df-sb .  By introducing
       a dummy variable ` z ` in the definiens, we are able to eliminate any
       distinct variable restrictions among the variables ` x ` , ` y ` , and
       ` ph ` of the definiendum.  No distinct variable conflicts arise because
       ` z ` effectively insulates ` x ` from ` y ` .  To achieve this, we use
       a chain of two substitutions in the form of ~ sb5 , first ` z ` for
       ` x ` then ` y ` for ` z ` .  Compare Definition 2.1'' of [Quine] p. 17,
       which is obtained from this theorem by applying ~ df-clab .  Theorem
       ~ sb7h provides a version where ` ph ` and ` z ` don't have to be
       distinct.  (Contributed by NM, 28-Jan-2004.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    dfsb7OLD $p |- ( [ y / x ] ph <->
                                  E. z ( z = y /\ E. x ( x = z /\ ph ) ) ) $=
      ( nfv sb7f ) ABCDADEF $.
  $}

  ${
    $d x y $.
    sb10f.1 $e |- F/ x ph $.
    $( Hao Wang's identity axiom P6 in Irving Copi, _Symbolic Logic_ (5th ed.,
       1979), p. 328.  In traditional predicate calculus, this is a sole axiom
       for identity from which the usual ones can be derived.  (Contributed by
       NM, 9-May-2005.)  (Revised by Mario Carneiro, 6-Oct-2016.) $)
    sb10f $p |- ( [ y / z ] ph <-> E. x ( x = y /\ [ x / z ] ph ) ) $=
      ( weq wsb wa wex nfsb sbequ equsexv bicomi ) BCFADBGZHBIADCGZNOBCADCBEJAB
      CDKLM $.
  $}

  ${
    $d x y $.  $d x ph $.
    $( Elimination of substitution.  Also see ~ sbel2x .  (Contributed by NM,
       5-Aug-1993.)  Avoid ~ ax-13 .  (Revised by Wolf Lammen, 6-Aug-2023.) $)
    sbelx $p |- ( ph <-> E. x ( x = y /\ [ x / y ] ph ) ) $=
      ( wsb weq wa wex sbid2vw sb5 bitr3i ) AACBDZBCDBCEKFBGABCHKBCIJ $.
  $}

  ${
    $d x y $.
    $( A theorem used in elimination of disjoint variable restriction on ` x `
       and ` y ` by replacing it with a distinctor ` -. A. x x = z ` .
       (Contributed by NM, 15-May-1993.)  (Proof shortened by Wolf Lammen,
       3-Oct-2018.) $)
    sbal1 $p |- ( -. A. x x = z ->
             ( [ z / y ] A. x ph <-> A. x [ z / y ] ph ) ) $=
      ( weq wal wn wsb wb wa wi sb4b nfnae wnf nfeqf2 19.21t bicomd sbequ12 sps
      albid syl sylan9bbr alcom syl6bb adantl bitr4d ex dral2 bitr3d pm2.61d2 )
      BDEBFGZCDEZCFZABFZCDHZACDHZBFZIZUKUMGZURUKUSJUOULAKZBFZCFZUQUSUOULUNKZCFU
      KVBUNCDLUKVCVACBDCMUKULBNZVCVAIBDCOVDVAVCULABPQUATUBUSUQVBIUKUSUQUTCFZBFV
      BUSUPVEBCDBMACDLTUTBCUCUDUEUFUGUMUNUOUQULUNUOICUNCDRSAUPCDBULAUPICACDRSUH
      UIUJ $.
  $}

  ${
    $d z x $.
    $( Move quantifier in and out of substitution.  (Contributed by NM,
       2-Jan-2002.)  Remove a distinct variable constraint.  (Revised by Wolf
       Lammen, 24-Dec-2022.) $)
    sbal2 $p |- ( -. A. x x = y ->
             ( [ z / y ] A. x ph <-> A. x [ z / y ] ph ) ) $=
      ( weq wal wn wsb wb sbid drsb2 syl5bbr dral2 bitr3d adantl wa nfnae albid
      wi sb4b alcom syl6bb wnf nfeqf1 19.21t syl sylan9bbr bitr4d pm2.61dan ) B
      CEBFGZCDEZCFZABFZCDHZACDHZBFZIZULUQUJULUMUNUPUMUMCCHULUNUMCJUMCDCKLAUOCDB
      AACCHULUOACJACDCKLMNOUJULGZPUNUKUMSZCFZUPURUNUTIUJUMCDTOURUPUKASZBFZCFZUJ
      UTURUPVACFZBFVCURUOVDBCDBQACDTRVABCUAUBUJVBUSCBCCQUJUKBUCVBUSIBCDUDUKABUE
      UFRUGUHUI $.

    $( Obsolete version of ~ sbal2 as of 24-Dec-2022.  (Contributed by NM,
       2-Jan-2002.)  Remove a distinct variable constraint.  (Revised by Wolf
       Lammen, 3-Oct-2018.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    sbal2OLD $p |- ( -. A. x x = y ->
             ( [ z / y ] A. x ph <-> A. x [ z / y ] ph ) ) $=
      ( weq wal wn wsb wb wa wi sb4b adantl nfnae albid alcom wnf drsb2 syl5bbr
      sbid nfeqf1 19.21t syl syl5bb sylan9bbr bitr4d ex dral2 bitr3d pm2.61d2 )
      BCEBFGZCDEZCFZABFZCDHZACDHZBFZIZUKUMGZURUKUSJUOULUNKZCFZUQUSUOVAIUKUNCDLM
      USUQULAKZCFZBFZUKVAUSUPVCBCDBNACDLOVDVBBFZCFUKVAVBBCPUKVEUTCBCCNUKULBQVEU
      TIBCDUAULABUBUCOUDUEUFUGUMUNUOUQUNUNCCHUMUOUNCTUNCDCRSAUPCDBAACCHUMUPACTA
      CDCRSUHUIUJ $.
  $}

  ${
    $d x y $.  $d x z $.
    $( Move universal quantifier in and out of substitution.  (Contributed by
       NM, 16-May-1993.)  (Proof shortened by Wolf Lammen, 29-Sep-2018.) $)
    sbal $p |- ( [ z / y ] A. x ph <-> A. x [ z / y ] ph ) $=
      ( weq wal wsb wb nfae axc16gb sbbid bitr3d sbal1 pm2.61i ) BDEBFZABFZCDGZ
      ACDGZBFZHORQSOAPCDBDCIABDBJKRBDBJLABCDMN $.
  $}

  ${
    $d x y $.  $d x z $.
    $( Move existential quantifier in and out of substitution.  (Contributed by
       NM, 27-Sep-2003.) $)
    sbex $p |- ( [ z / y ] E. x ph <-> E. x [ z / y ] ph ) $=
      ( wn wal wsb wex sbn sbal albii bitri xchbinx df-ex sbbii 3bitr4i ) AEZBF
      ZEZCDGZACDGZEZBFZEABHZCDGUABHTRCDGZUCRCDIUEQCDGZBFUCQBCDJUFUBBACDIKLMUDSC
      DABNOUABNP $.
  $}

  ${
    $d x z $.  $d y z $.
    sbalv.1 $e |- ( [ y / x ] ph <-> ps ) $.
    $( Quantify with new variable inside substitution.  (Contributed by NM,
       18-Aug-1993.) $)
    sbalv $p |- ( [ y / x ] A. z ph <-> A. z ps ) $=
      ( wal wsb sbal albii bitri ) AEGCDHACDHZEGBEGAECDILBEFJK $.
  $}

  ${
    $d v w ph $.  $d v w x $.  $d v w y $.
    $( Lemma for ~ sbco4 .  It replaces the temporary variable ` v ` with
       another temporary variable ` w ` .  (Contributed by Jim Kingdon,
       26-Sep-2018.) $)
    sbco4lem $p |- ( [ x / v ] [ y / x ] [ v / y ] ph <->
        [ x / w ] [ y / x ] [ w / y ] ph ) $=
      ( wsb sbcom2 sbbii nfv sbco2 bitri sbid2v 3bitr3i ) ACDFZDEFZBCFZEDFZDBFZ
      OEDFZBCFZDBFACEFZBCFZEBFZNBCFZDBFQTDBOBCEDGHRUBEDFZDBFUCQUEDBPUBEDOUABCAC
      EDADIJHHHUBEBDUBDIJKTUDDBSNBCNEDLHHM $.
  $}

  ${
    $d t u v ph $.  $d t u v x $.  $d t u v y $.  $d w ph $.  $d w x $.
    $d w y $.  $d t w $.
    $( Two ways of exchanging two variables.  Both sides of the biconditional
       exchange ` x ` and ` y ` , either via two temporary variables ` u ` and
       ` v ` , or a single temporary ` w ` .  (Contributed by Jim Kingdon,
       25-Sep-2018.) $)
    sbco4 $p |- ( [ y / u ] [ x / v ] [ u / x ] [ v / y ] ph <->
        [ x / w ] [ y / x ] [ w / y ] ph ) $=
      ( vt wsb sbcom2 nfv sbco2 sbbii bitr3i sbco4lem 3bitri ) ACEHZBFHZEBHFCHZ
      PBCHZEBHZACGHBCHGBHACDHBCHDBHRQFCHZEBHTQFCEBIUASEBPBCFPFJKLMABCGENABCDGNO
      $.
  $}

  ${
    $d z w ph $.
    $( An equivalent expression for double existence.  For a version requiring
       more disjoint variables, but fewer axioms, see ~ 2sb8ev .  (Contributed
       by Wolf Lammen, 2-Nov-2019.) $)
    2sb8e $p |- ( E. x E. y ph <->
                  E. z E. w [ z / x ] [ w / y ] ph ) $=
      ( wex wsb nfv sb8e exbii excom bitri nfsb 3bitri ) ACFZBFZACEGZBFZEFZQBDG
      ZDFZEFTEFDFPQEFZBFSOUBBACEAEHIJQBEKLRUAEQBDACEDADHMIJTEDKN $.
  $}

  ${
    $d y x $.
    sbbib.y $e |- F/ y ph $.
    sbbib.x $e |- F/ x ps $.
    $( Reversal of substitution.  (Contributed by AV, 6-Aug-2023.) $)
    sbbib $p |- ( A. y ( [ y / x ] ph <-> ps )
              <-> A. x ( ph <-> [ x / y ] ps ) ) $=
      ( wsb wb wal nfs1v nfbi nfal sbid2 spsbbi syl5bbr alrimi syl6bb impbii )
      ACDGZBHZDIZABDCGZHZCIZUAUCCTCDSBCACDJFKLASDCGUAUBADCEMSBDCNOPUDTDUCDCAUBD
      EBDCJKLUDSUBCDGBAUBCDNBCDFMQPR $.
  $}

  ${
    $d x ps $.  $d y ph $.  $d x y $.
    $( Reversal of substitution.  (Contributed by AV, 6-Aug-2023.) $)
    sbbibvv $p |- ( A. y ( [ y / x ] ph <-> ps )
              <-> A. x ( ph <-> [ x / y ] ps ) ) $=
      ( nfv sbbib ) ABCDADEBCEF $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Alternate definition of substitution
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  The definition of substitution ( ~ df-sb ) used to be ~ dfsb1 .  These two
  definitions are proved equivalent by proving ~ dfsb7 from both, which takes
  several intermediate theorems and uses many axioms.

$)

  ${
    $( ` th ` means ` [ y / x ] ph ` a la ~ dfsb1 . $)
    dfsb1.ph $e |- ( th <-> ( ( x = y -> ph ) /\ E. x ( x = y /\ ph ) ) ) $.

    ${
      $( ` ta ` means ` [ y / x ] ps ` a la ~ dfsb1 . $)
      dfsb1.ps $e |- ( ta <-> ( ( x = y -> ps ) /\ E. x ( x = y /\ ps ) ) ) $.

      ${
        sbimiALT.1 $e |- ( ph -> ps ) $.
        $( Alternate version of ~ sbimi .  (Contributed by NM, 25-Jun-1998.)
           (Proof modification is discouraged.)  (New usage is discouraged.) $)
        sbimiALT $p |- ( th -> ta ) $=
          ( weq wi wa wex imim2i anim2i eximi anim12i 3imtr4i ) EFJZAKZSALZEMZL
          SBKZSBLZEMZLCDTUCUBUEABSINUAUDEABSIOPQGHR $.
      $}

      ${
        sbbiiALT.1 $e |- ( ph <-> ps ) $.
        $( Alternate version of ~ sbbii .  (Contributed by NM, 14-May-1993.)
           (Proof modification is discouraged.)  (New usage is discouraged.) $)
        sbbiiALT $p |- ( th <-> ta ) $=
          ( biimpi sbimiALT biimpri impbii ) CDABCDEFGHABIJKBADCEFHGABILKM $.
      $}
    $}

    $( Alternate version of ~ sbequ1 .  (Contributed by NM, 16-May-1993.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    sbequ1ALT $p |- ( x = y -> ( ph -> th ) ) $=
      ( weq wa wi wex pm3.4 19.8a sylanbrc ex ) CDFZABNAGZNAHOCIBNAJOCKELM $.

    $( Alternate version of ~ sbequ2 .  (Contributed by NM, 16-May-1993.)
       (Proof shortened by Wolf Lammen, 25-Feb-2018.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    sbequ2ALT $p |- ( x = y -> ( th -> ph ) ) $=
      ( weq wi wa wex simplbi com12 ) BCDFZABLAGLAHCIEJK $.

    $( Alternate version of ~ sbequ12 .  (Contributed by NM, 14-May-1993.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    sbequ12ALT $p |- ( x = y -> ( ph <-> th ) ) $=
      ( weq sbequ1ALT sbequ2ALT impbid ) CDFABABCDEGABCDEHI $.

    $( Alternate version of ~ sb1 .  (Contributed by NM, 13-May-1993.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    sb1ALT $p |- ( th -> E. x ( x = y /\ ph ) ) $=
      ( weq wi wa wex simprbi ) BCDFZAGKAHCIEJ $.

    ${
      $d x y $.
      $( Alternate version of ~ sb2vOLD .  (Contributed by BJ, 31-May-2019.)
         (Proof modification is discouraged.)  (New usage is discouraged.) $)
      sb2vOLDALT $p |- ( A. x ( x = y -> ph ) -> th ) $=
        ( weq wi wal wa wex sp equs4v sylanbrc ) CDFZAGZCHONAICJBOCKACDLEM $.

      $( Alternate version of ~ sb4vOLD .  (Contributed by BJ, 23-Jul-2019.)
         (Proof modification is discouraged.)  (New usage is discouraged.) $)
      sb4vOLDALT $p |- ( th -> A. x ( x = y -> ph ) ) $=
        ( weq wa wex wi wal sb1ALT sb56 sylib ) BCDFZAGCHNAICJABCDEKACDLM $.

      $( Alternate version of ~ sb6 .  (Contributed by NM, 18-Aug-1993.)
         (Proof shortened by Wolf Lammen, 21-Sep-2018.)
         (Proof modification is discouraged.)  (New usage is discouraged.) $)
      sb6ALT $p |- ( th <-> A. x ( x = y -> ph ) ) $=
        ( weq wi wal sb4vOLDALT sb2vOLDALT impbii ) BCDFAGCHABCDEIABCDEJK $.

      $( Alternate version of ~ sb5 .  (Contributed by NM, 18-Aug-1993.)
         (Proof modification is discouraged.)  (New usage is discouraged.) $)
      sb5ALT2 $p |- ( th <-> E. x ( x = y /\ ph ) ) $=
        ( weq wi wal wa wex sb6ALT sb56 bitr4i ) BCDFZAGCHNAICJABCDEKACDLM $.
    $}

    $( Alternate version of ~ sb2 .  (Contributed by NM, 13-May-1993.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    sb2ALT $p |- ( A. x ( x = y -> ph ) -> th ) $=
      ( weq wi wal wa wex sp equs4 sylanbrc ) CDFZAGZCHONAICJBOCKACDLEM $.

    $( Alternate version of one implication of ~ sb4b .  (Contributed by NM,
       14-May-1993.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    sb4ALT $p |- ( -. A. x x = y -> ( th -> A. x ( x = y -> ph ) ) ) $=
      ( weq wa wex wal wn wi sb1ALT equs5 syl5ib ) BCDFZAGCHOCIJOAKCIABCDELACDM
      N $.

    $( Alternate version of ~ spsbe .  (Contributed by NM, 29-Jun-1993.)
       (Proof shortened by Wolf Lammen, 3-May-2018.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    spsbeALT $p |- ( th -> E. x ph ) $=
      ( weq wa wex sb1ALT exsimpr syl ) BCDFZAGCHACHABCDEILACJK $.

    $( Alternate version of ~ stdpc4 .  (Contributed by NM, 14-May-1993.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    stdpc4ALT $p |- ( A. x ph -> th ) $=
      ( wal weq wi ala1 sb2ALT syl ) ACFCDGZAHCFBALCIABCDEJK $.

    $( Alternate version of ~ dfsb2 .  (Contributed by NM, 17-Feb-2005.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    dfsb2ALT $p |- ( th <-> ( ( x = y /\ ph ) \/ A. x ( x = y -> ph ) ) ) $=
      ( weq wa wi wal wo sp sbequ2ALT sps orc syl6an wn sb4ALT olc syl6 pm2.61i
      sbequ1ALT imp sb2ALT jaoi impbii ) BCDFZAGZUFAHCIZJZUFCIZBUIHUJUFBAUIUFCK
      UFBAHCABCDELMUGUHNOUJPBUHUIABCDEQUHUGRSTUGBUHUFABABCDEUAUBABCDEUCUDUE $.

    $( Alternate version of ~ dfsb3 .  (Contributed by NM, 6-Mar-2007.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    dfsb3ALT $p |- ( th <-> ( ( x = y -> -. ph ) -> A. x ( x = y -> ph ) ) ) $=
      ( weq wa wi wal wo wn df-or dfsb2ALT imnan imbi1i 3bitr4i ) CDFZAGZQAHCIZ
      JRKZSHBQAKHZSHRSLABCDEMUATSQANOP $.

    $( Alternate version of ~ sbft .  (Contributed by NM, 30-May-2009.)
       (Revised by Mario Carneiro, 12-Oct-2016.)  (Proof shortened by Wolf
       Lammen, 3-May-2018.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    sbftALT $p |- ( F/ x ph -> ( th <-> ph ) ) $=
      ( wnf wex spsbeALT 19.9t syl5ib wal nf5r stdpc4ALT syl6 impbid ) ACFZBABA
      CGPAABCDEHACIJPAACKBACLABCDEMNO $.

    ${
      sbfALT.1 $e |- F/ x ph $.
      $( Alternate version of ~ sbf .  (Contributed by NM, 14-May-1993.)
         (Revised by Mario Carneiro, 4-Oct-2016.)
         (Proof modification is discouraged.)  (New usage is discouraged.) $)
      sbfALT $p |- ( th <-> ph ) $=
        ( wnf wb sbftALT ax-mp ) ACGBAHFABCDEIJ $.
    $}

    ${
      $( ` ta ` means ` [ y / x ] -. ph ` a la ~ dfsb1 . $)
      dfsb1.n $e |- ( ta <->
        ( ( x = y -> -. ph ) /\ E. x ( x = y /\ -. ph ) ) ) $.
      $( Alternate version of ~ sbn .  (Contributed by NM, 14-May-1993.)
         (Proof shortened by Wolf Lammen, 30-Apr-2018.)
         (Proof modification is discouraged.)  (New usage is discouraged.) $)
      sbnALT $p |- ( ta <-> -. th ) $=
        ( weq wn wi wal wa wex exanali anbi2i annim 3bitri dfsb3ALT xchbinxr )
        CDEHZAIZJZTAJDKZJZBCUBTUALDMZLUBUCIZLUDIGUEUFUBTADNOUBUCPQABDEFRS $.
    $}
  $}

  ${
    $( ` th ` means ` [ x / z ] ph ` a la ~ dfsb1 . $)
    dfsb1.xz $e |- ( th <-> ( ( z = x -> ph ) /\ E. z ( z = x /\ ph ) ) ) $.

    $( ` ta ` means ` [ y / z ] ph ` a la ~ dfsb1 . $)
    dfsb1.yz $e |- ( ta <-> ( ( z = y -> ph ) /\ E. z ( z = y /\ ph ) ) ) $.
    $( Alternate version of ~ sbequi .  (Contributed by NM, 14-May-1993.)
       (Proof shortened by Wolf Lammen, 15-Sep-2018.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    sbequiALT $p |- ( x = y -> ( th -> ta ) ) $=
      ( weq wi equtr sbequ2ALT sbequ1ALT syl9 syld wn wal ax13 sp con3i pm2.61i
      sb4ALT syl equeuclr imim1d al2imi sb2ALT syl6 ) FDIZDEIZBCJZJUIUJFEIZUKFD
      EKUIBAULCABFDGLACFEHMNOUIPZUJUJFQZUKFDERUMBUIAJZFQZUNCUMUIFQZPBUPJUQUIUIF
      STABFDGUBUCUNUPULAJZFQCUJUOURFUJULUIADFEUDUEUFACFEHUGUHNOUA $.

    $( Alternate version of ~ sbequ .  (Contributed by NM, 14-May-1993.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    sbequALT $p |- ( x = y -> ( th <-> ta ) ) $=
      ( weq sbequiALT wi equcoms impbid ) DEIBCABCDEFGHJCBKEDACBEDFHGJLM $.
  $}

  ${
    $( ` th ` means ` [ y / x ] A. y ph ` a la ~ dfsb1 . $)
    dfsb1.p2 $e |- ( th <->
      ( ( x = y -> A. y ph ) /\ E. x ( x = y /\ A. y ph ) ) ) $.
    $( Alternate version of ~ sb4a .  (Contributed by NM, 2-Feb-2007.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    sb4aALT $p |- ( th -> A. x ( x = y -> ph ) ) $=
      ( weq wal wa wex wi sb1ALT equs5a syl ) BCDFZADGZHCINAJCGOBCDEKACDLM $.
  $}

  ${
    $( ` th ` means ` [ y / x ] ph ` a la ~ dfsb1 . $)
    dfsb1.p3 $e |- ( th <-> ( ( x = y -> ph ) /\ E. x ( x = y /\ ph ) ) ) $.
    $( Alternate version of ~ hbsb2 .  (Contributed by NM, 14-May-1993.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    hbsb2ALT $p |- ( -. A. x x = y -> ( th -> A. x th ) ) $=
      ( weq wal wn wi sb4ALT sb2ALT axc4i syl6 ) CDFZCGHBNAIZCGBCGABCDEJOBCABCD
      EKLM $.

    $( Alternate version of ~ nfsb2 .  (Contributed by Mario Carneiro,
       4-Oct-2016.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    nfsb2ALT $p |- ( -. A. x x = y -> F/ x th ) $=
      ( weq wal wn nfna1 hbsb2ALT nf5d ) CDFZCGHBCLCIABCDEJK $.
  $}

  ${
    $( ` th ` means ` [ y / x ] x = y ` a la ~ dfsb1 . $)
    dfsb1.p4 $e |- ( th <->
      ( ( x = y -> x = y ) /\ E. x ( x = y /\ x = y ) ) ) $.
    $( Alternate version of ~ equsb1 .  (Contributed by NM, 10-May-1993.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    equsb1ALT $p |- th $=
      ( weq wi sb2ALT id mpg ) BCEZJFABJABCDGJHI $.
  $}

  ${
    $( ` th ` means ` [ y / x ] ph ` a la ~ dfsb1 . $)
    dfsb1.p5 $e |- ( th <-> ( ( x = y -> ph ) /\ E. x ( x = y /\ ph ) ) ) $.

    ${
      sb6fALT.1 $e |- F/ y ph $.
      $( Alternate version of ~ sb6f .  (Contributed by NM, 2-Jun-1993.)
         (Revised by Mario Carneiro, 4-Oct-2016.)
         (Proof modification is discouraged.)  (New usage is discouraged.) $)
      sb6fALT $p |- ( th <-> A. x ( x = y -> ph ) ) $=
        ( weq wi wal wa wex biid nf5ri sbimiALT sb4aALT syl sb2ALT impbii ) BCD
        GZAHCIZBSADIZHSUAJCKJZTAUABUBCDEUBLZADFMNAUBCDUCOPABCDEQR $.

      $( Alternate version of ~ sb5f .  (Contributed by NM, 5-Aug-1993.)
         (Revised by Mario Carneiro, 4-Oct-2016.)
         (Proof modification is discouraged.)  (New usage is discouraged.) $)
      sb5fALT $p |- ( th <-> E. x ( x = y /\ ph ) ) $=
        ( weq wi wal wa wex sb6fALT equs45f bitr4i ) BCDGZAHCIOAJCKABCDEFLACDFM
        N $.
    $}

    $( Alternate version of ~ nfsb4t .  (Contributed by NM, 7-Apr-2004.)
       (Revised by Mario Carneiro, 4-Oct-2016.)  (Proof shortened by Wolf
       Lammen, 11-May-2018.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    nfsb4tALT $p |- ( A. x F/ z ph -> ( -. A. z z = y -> F/ z th ) ) $=
      ( wnf wal weq wn wi wa wb sbequ12ALT sps drnf2 biimpd spsd nfnae nfan a1d
      impcom nfnf1 nfal nfa1 sp adantr nfsb2ALT adantl a1i dvelimdf pm2.61dan )
      AEGZCHZCDIZCHZEDIEHJZBEGZKUNUPLURUQUPUNURUPUMURCUPUMURABCDEUOABMZCABCDFNZ
      OPQRUBUAUNUPJZLZABEDCUNVAEUMECAEUCUDCDESTUNVACUMCUECDCSTUNUMVAUMCUFUGVABC
      GUNABCDFUHUIUOUSKVBUTUJUKUL $.

    ${
      nfsb4ALT.1 $e |- F/ z ph $.
      $( Alternate version of ~ nfsb4 .  (Contributed by NM, 14-May-1993.)
         (Revised by Mario Carneiro, 4-Oct-2016.)
         (Proof modification is discouraged.)  (New usage is discouraged.) $)
      nfsb4ALT $p |- ( -. A. z z = y -> F/ z th ) $=
        ( wnf weq wal wn wi nfsb4tALT mpg ) AEHEDIEJKBEHLCABCDEFMGN $.
    $}

    ${
      $( ` ta ` means ` [ y / x ] ps ` a la ~ dfsb1 . $)
      dfsb1.s2 $e |- ( ta <-> ( ( x = y -> ps ) /\ E. x ( x = y /\ ps ) ) ) $.

      $( ` et ` means ` [ y / x ] ( ph -> ps ) ` a la ~ dfsb1 . $)
      dfsb1.im $e |- ( et <->
        ( ( x = y -> ( ph -> ps ) ) /\ E. x ( x = y /\ ( ph -> ps ) ) ) ) $.
      $( Alternate version of ~ sbi1 .  (Contributed by NM, 14-May-1993.)
         (Proof modification is discouraged.)  (New usage is discouraged.) $)
      sbi1ALT $p |- ( et -> ( th -> ta ) ) $=
        ( weq wal wi sbequ2ALT syl5d sbequ1ALT syl6d sps sb4ALT syl6 wn pm2.61i
        ax-2 al2imi sb2ALT ) FGKZFLZECDMMZUFUHFUFECBDUFCAEBACFGHNABMZEFGJNOBDFG
        IPQRUGUAZCUFAMZFLZEDACFGHSUJEUFUIMZFLZULDMUIEFGJSUNULUFBMZFLDUMUKUOFUFA
        BUCUDBDFGIUETTOUB $.

      $( Alternate version of ~ sbi2 .  (Contributed by NM, 14-May-1993.)
         (Proof modification is discouraged.)  (New usage is discouraged.) $)
      sbi2ALT $p |- ( ( th -> ta ) -> et ) $=
        ( wn weq wi wa wex biid sbnALT pm2.21 sbimiALT sylbir ax-1 ja ) CDECKFG
        LZAKZMUCUDNFONZEACUEFGHUEPZQUDABMZUEEFGUFJABRSTBUGDEFGIJBAUASUB $.

      $( Alternate version of ~ sbim .  (Contributed by NM, 14-May-1993.)
         (Proof modification is discouraged.)  (New usage is discouraged.) $)
      sbimALT $p |- ( et <-> ( th -> ta ) ) $=
        ( wi sbi1ALT sbi2ALT impbii ) ECDKABCDEFGHIJLABCDEFGHIJMN $.
    $}
  $}

  ${
    $( ` ta ` means ` [ y / x ] ps ` a la ~ dfsb1 . $)
    dfsb1.s3 $e |- ( ta <-> ( ( x = y -> ps ) /\ E. x ( x = y /\ ps ) ) ) $.

    $( ` et ` means ` [ y / x ] ( ph -> ps ) ` a la ~ dfsb1 . $)
    dfsb1.i2 $e |- ( et <->
      ( ( x = y -> ( ph -> ps ) ) /\ E. x ( x = y /\ ( ph -> ps ) ) ) ) $.
    sbrimALT.1 $e |- F/ x ph $.
    $( Alternate version of ~ sbrim .  (Contributed by NM, 2-Jun-1993.)
       (Revised by Mario Carneiro, 4-Oct-2016.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    sbrimALT $p |- ( et <-> ( ph -> ta ) ) $=
      ( weq wi wa wex biid sbimALT sbfALT imbi1i bitri ) DEFJZAKSALEMLZCKACKABT
      CDEFTNZGHOTACATEFUAIPQR $.
  $}

  ${
    $( ` th ` means ` [ y / x ] ph ` a la ~ dfsb1 . $)
    dfsb1.p6 $e |- ( th <-> ( ( x = y -> ph ) /\ E. x ( x = y /\ ph ) ) ) $.

    $( ` ta ` means ` [ y / x ] ps ` a la ~ dfsb1 . $)
    dfsb1.s4 $e |- ( ta <-> ( ( x = y -> ps ) /\ E. x ( x = y /\ ps ) ) ) $.

    ${
      $( ` et ` means ` [ y / x ] ( ph /\ ps ) ` a la ~ dfsb1 . $)
      dfsb1.an $e |- ( et <->
        ( ( x = y -> ( ph /\ ps ) ) /\ E. x ( x = y /\ ( ph /\ ps ) ) ) ) $.
      $( Alternate version of ~ sban .  (Contributed by NM, 14-May-1993.)
         (Proof modification is discouraged.)  (New usage is discouraged.) $)
      sbanALT $p |- ( et <-> ( th /\ ta ) ) $=
        ( weq wn wi wa wex biid sbnALT sbimALT imbi2i df-an xchbinx sbbiiALT
        bitri 3bitr4i ) FGKZABLZMZLZMUEUHNFONZCDLZMZLECDNUIUEUGMUEUGNFONZUKUGUL
        UIFGULPZUIPZQULCUEUFMUEUFNFONZMUKAUFCUOULFGHUOPZUMRUOUJCBDUOFGIUPQSUCUA
        ABNUHEUIFGJUNABTUBCDTUD $.
    $}

    ${
      $( ` et ` means ` [ y / x ] ( ph <-> ps ) ` a la ~ dfsb1 . $)
      dfsb1.bi $e |- ( et <->
        ( ( x = y -> ( ph <-> ps ) ) /\ E. x ( x = y /\ ( ph <-> ps ) ) ) ) $.
      $( Alternate version of ~ sbbi .  (Contributed by NM, 14-May-1993.)
         (Proof modification is discouraged.)  (New usage is discouraged.) $)
      sbbiALT $p |- ( et <-> ( th <-> ta ) ) $=
        ( weq wi wa wex wb biid dfbi2 sbbiiALT sbimALT anbi12i sbanALT 3bitr4i
        bitri ) EFGKZABLZBALZMZLUDUGMFNMZCDOZABOUGEUHFGJUHPZABQRUDUELUDUEMFNMZU
        DUFLUDUFMFNMZMCDLZDCLZMUHUIUKUMULUNABCDUKFGHIUKPZSBADCULFGIHULPZSTUEUFU
        KULUHFGUOUPUJUACDQUBUC $.

      ${
        sblbisALT.1 $e |- ( ta <-> ch ) $.
        $( Alternate version of ~ sblbis .  (Contributed by NM, 19-Aug-1993.)
           (Proof modification is discouraged.)  (New usage is discouraged.) $)
        sblbisALT $p |- ( et <-> ( th <-> ch ) ) $=
          ( wb sbbiALT bibi2i bitri ) FDEMDCMABDEFGHIJKNECDLOP $.
      $}
    $}
  $}

  ${
    $( ` th ` means ` [ y / x ] ph ` a la ~ dfsb1 . $)
    dfsb1.p7 $e |- ( th <-> ( ( x = y -> ph ) /\ E. x ( x = y /\ ph ) ) ) $.
    sbieALT.1 $e |- F/ x ps $.
    sbieALT.2 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Alternate version of ~ sbie .  (Contributed by NM, 30-Jun-1994.)
       (Revised by Mario Carneiro, 4-Oct-2016.)  (Proof shortened by Wolf
       Lammen, 13-Jul-2019.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    sbieALT $p |- ( th <-> ps ) $=
      ( weq wb wi wa wex biid equsb1ALT sbimiALT ax-mp sbfALT sblbisALT mpbi )
      DEIZABJZKUAUBLDMLZCBJUAUAKUAUALDMLZUCUDDEUDNZOUAUBUDUCDEUEUCNZHPQABBCUABK
      UABLDMLZUCDEFUGNZUFBUGDEUHGRST $.
  $}

  ${
    $( ` ta ` means ` [ y / x ] ps ` a la ~ dfsb1 . $)
    dfsb1.s5 $e |- ( ta <-> ( ( x = y -> ps ) /\ E. x ( x = y /\ ps ) ) ) $.
    sbiedALT.1 $e |- F/ x ph $.
    sbiedALT.2 $e |- ( ph -> F/ x ch ) $.
    sbiedALT.3 $e |- ( ph -> ( x = y -> ( ps <-> ch ) ) ) $.
    $( Alternate version of ~ sbied .  (Contributed by NM, 30-Jun-1994.)
       (Revised by Mario Carneiro, 4-Oct-2016.)  (Proof shortened by Wolf
       Lammen, 24-Jun-2018.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    sbiedALT $p |- ( ph -> ( ta <-> ch ) ) $=
      ( wi weq wa wex biid sbrimALT nfim1 wb com12 pm5.74d sbieALT pm5.74ri
      bitr3i ) ADCADKEFLZABKZKUDUEMENMZACKZABDUFEFGUFOZHPUEUGUFEFUHACEHIQUDABCA
      UDBCRJSTUAUCUB $.
  $}

  ${
    $( ` th ` means ` [ y / x ] ph ` a la ~ dfsb1 . $)
    dfsb1.p8 $e |- ( th <-> ( ( x = y -> ph ) /\ E. x ( x = y /\ ph ) ) ) $.

    $( ` ta ` means ` [ y / z ] [ z / x ] ph ` a la ~ dfsb1 . $)
    dfsb1.sb $e |- ( ta <-> (
      ( z = y -> ( ( x = z -> ph ) /\ E. x ( x = z /\ ph ) ) ) /\
      E. z ( z = y /\ ( ( x = z -> ph ) /\ E. x ( x = z /\ ph ) ) ) ) ) $.
    sbco2ALT.1 $e |- F/ z ph $.
    $( Alternate version of ~ sbco2 .  (Contributed by NM, 30-Jun-1994.)
       (Revised by Mario Carneiro, 6-Oct-2016.)  (Proof shortened by Wolf
       Lammen, 17-Sep-2018.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    sbco2ALT $p |- ( ta <-> th ) $=
      ( weq wal wb wi wa wex sbequ12ALT biid sbequALT bitr3d sps nfnae nfsb4ALT
      wn a1i sbiedALT pm2.61i ) FEJZFKZCBLZUGUIFUGDFJZAMUJANDONZCBUKCFEHPAUKBFE
      DUKQGRZSTUHUCZUKBCFEHFEFUAABDEFGIUBUGUKBLMUMULUDUEUF $.
  $}

  ${
    $d y z $.
    $( ` th ` means ` [ y / x ] ph ` a la ~ dfsb1 . $)
    dfsb1.p9 $e |- ( th <-> ( ( x = y -> ph ) /\ E. x ( x = y /\ ph ) ) ) $.

    ${
      sb7fALT.1 $e |- F/ z ph $.
      $( Alternate version of ~ sb7f .  (Contributed by NM, 26-Jul-2006.)
         (Revised by Mario Carneiro, 6-Oct-2016.)
         (Proof modification is discouraged.)  (New usage is discouraged.) $)
      sb7fALT $p |- ( th <-> E. z ( z = y /\ E. x ( x = z /\ ph ) ) ) $=
        ( weq wi wa wex biid sb5fALT sbbiiALT sbco2ALT sb5ALT2 3bitr3i ) EDHZCE
        HZAISAJCKZJZIRUAJEKJZRTIRTJEKZJZBUCUATUBUDEDUBLZUDLZAUACEUALGMNABUBCDEF
        UEGOTUDEDUFPQ $.
    $}

    $d ph z $.
    $( Alternate version of ~ dfsb7 .  (Contributed by NM, 28-Jan-2004.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    dfsb7ALT $p |- ( th <-> E. z ( z = y /\ E. x ( x = z /\ ph ) ) ) $=
      ( nfv sb7fALT ) ABCDEFAEGH $.
  $}


$(
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
  Uniqueness and unique existence
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
$)

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Uniqueness: the at-most-one quantifier
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Token for the at-most-one quantifier. $)
  $c E* $.

  $( Extend wff definition to include the at-most-one quantifier ("there exists
     at most one ` x ` such that ` ph ` "). $)
  wmo $a wff E* x ph $.

  ${
    $d t x y $.  $d t x z $.  $d t y ph $.  $d t z ph $.
    $( Soundness justification theorem for ~ df-mo (note that ` y ` and ` z `
       need not be disjoint, although the weaker theorem with that disjoint
       variable condition added would be enough to justify the soundness of the
       definition).  (Contributed by NM, 11-Mar-2010.)  Added this theorem by
       adapting the proof of ~ eujust .  (Revised by BJ, 30-Sep-2022.) $)
    mojust $p |- ( E. y A. x ( ph -> x = y ) <-> E. z A. x ( ph -> x = z ) ) $=
      ( vt weq wi wal wex equequ2 imbi2d albidv cbvexvw bitri ) ABCFZGZBHZCIABE
      FZGZBHZEIABDFZGZBHZDIQTCECEFZPSBUDORACEBJKLMTUCEDEDFZSUBBUERUAAEDBJKLMN
      $.
  $}

  ${
    $d x y $.  $d ph y $.
    $( Define the at-most-one quantifier.  The expression ` E* x ph ` is read
       "there exists at most one ` x ` such that ` ph ` ".  This is also called
       the "uniqueness quantifier" but that expression is also used for the
       unique existential quantifier ~ df-eu , therefore we avoid that
       ambiguous name.

       Notation of [BellMachover] p. 460, whose definition we show as ~ mo3 .
       For other possible definitions see ~ moeu and ~ mo4 .  (Contributed by
       Wolf Lammen, 27-May-2019.)  Make this the definition (which used to be
       ~ moeu , while this definition was then proved as ~ dfmo ).  (Revised by
       BJ, 30-Sep-2022.) $)
    df-mo $a |- ( E* x ph <-> E. y A. x ( ph -> x = y ) ) $.
  $}

  ${
    $d x y $.  $d ph y $.
    $( Nonexistence implies uniqueness.  (Contributed by BJ, 30-Sep-2022.)
       Avoid ~ ax-11 .  (Revised by Wolf Lammen, 16-Oct-2022.) $)
    nexmo $p |- ( -. E. x ph -> E* x ph ) $=
      ( vy wn wal weq wi wex wmo pm2.21 alimi alrimiv 19.2d alnex df-mo 3imtr4i
      bicomi ) ADZBEZABCFZGZBEZCHABHDZABISUBCSUBCRUABATJKLMSUCABNQABCOP $.

    $( Obsolete version of ~ nexmo as of 16-Oct-2022.  (Contributed by BJ,
       30-Sep-2022.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    nexmoOLD $p |- ( -. E. x ph -> E* x ph ) $=
      ( vy wex wn wal wmo alnex wi pm2.21 alrimiv alimi alcom sylib 19.2d df-mo
      weq sylibr sylbir ) ABDEAEZBFZABGZABHUAABCQZIZBFZCDUBUAUECUAUDCFZBFUECFTU
      FBTUDCAUCJKLUDBCMNOABCPRS $.
  $}

  $( Any proposition holds for some ` x ` or holds for at most one ` x ` .
     (Contributed by NM, 8-Mar-1995.)  Shorten proof and avoid ~ df-eu .
     (Revised by BJ, 14-Oct-2022.) $)
  exmo $p |- ( E. x ph \/ E* x ph ) $=
    ( wex wmo nexmo orri ) ABCABDABEF $.

  $( Absorption of existence condition by uniqueness.  (Contributed by NM,
     4-Nov-2002.)  Shorten proof and avoid ~ df-eu .  (Revised by BJ,
     14-Oct-2022.) $)
  moabs $p |- ( E* x ph <-> ( E. x ph -> E* x ph ) ) $=
    ( wmo wex wi ax-1 nexmo id ja impbii ) ABCZABDZKEKLFLKKABGKHIJ $.

  ${
    $d x y $.  $d y ph $.  $d y ps $.
    $( The at-most-one quantifier reverses implication.  (Contributed by NM,
       22-Apr-1995.) $)
    moim $p |- ( A. x ( ph -> ps ) -> ( E* x ps -> E* x ph ) ) $=
      ( vy wi wal weq wex wmo imim1 al2imi eximdv df-mo 3imtr4g ) ABEZCFZBCDGZE
      ZCFZDHAQEZCFZDHBCIACIPSUADORTCABQJKLBCDMACDMN $.
  $}

  ${
    $d x y $.  $d y ph $.  $d y ps $.
    moimi.1 $e |- ( ph -> ps ) $.
    $( The at-most-one quantifier reverses implication.  (Contributed by NM,
       15-Feb-2006.)  Remove use of ~ ax-5 .  (Revised by Steven Nguyen,
       9-May-2023.) $)
    moimi $p |- ( E* x ps -> E* x ph ) $=
      ( vy weq wi wal wex wmo imim1i alimi eximi df-mo 3imtr4i ) BCEFZGZCHZEIAP
      GZCHZEIBCJACJRTEQSCABPDKLMBCENACENO $.
  $}

  ${
    moimiOLD.1 $e |- ( ph -> ps ) $.
    $( Obsolete version of ~ moimi as of 9-May-2023.  The at-most-one
       quantifier reverses implication.  (Contributed by NM, 15-Feb-2006.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    moimiOLD $p |- ( E* x ps -> E* x ph ) $=
      ( wi wmo moim mpg ) ABEBCFACFECABCGDH $.
  $}

  ${
    $d x ph $.
    moimdv.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( The at-most-one quantifier reverses implication, deduction form.
       (Contributed by Thierry Arnoux, 25-Feb-2017.) $)
    moimdv $p |- ( ph -> ( E* x ch -> E* x ps ) ) $=
      ( wi wal wmo alrimiv moim syl ) ABCFZDGCDHBDHFALDEIBCDJK $.
  $}

  $( Equivalence theorem for the at-most-one quantifier.  (Contributed by BJ,
     7-Oct-2022.)  (Proof shortened by Wolf Lammen, 18-Feb-2023.) $)
  mobi $p |- ( A. x ( ph <-> ps ) -> ( E* x ph <-> E* x ps ) ) $=
    ( wb wal wi wa wmo albiim moim impbid21d imp sylbi ) ABDCEABFCEZBAFCEZGACHZ
    BCHZDZABCINORNOPQBACJABCJKLM $.

  ${
    $d y x $.  $d y ph $.  $d y ps $.
    $( Obsolete version of ~ mobi as of 18-Feb-2023.  (Contributed by BJ,
       7-Oct-2022.)  (Proof shortened by Wolf Lammen, 16-Oct-2022.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    mobiOLD $p |- ( A. x ( ph <-> ps ) -> ( E* x ph <-> E* x ps ) ) $=
      ( vy wb wal weq wi wex wmo imbi1 alimi albi syl exbidv df-mo 3bitr4g ) AB
      EZCFZACDGZHZCFZDIBTHZCFZDIACJBCJSUBUDDSUAUCEZCFUBUDERUECABTKLUAUCCMNOACDP
      BCDPQ $.

    $( Obsolete proof of ~ mobi as of 15-Oct-2022.  (Contributed by BJ,
       7-Oct-2022.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    mobiOLDOLD $p |- ( A. x ( ph <-> ps ) -> ( E* x ph <-> E* x ps ) ) $=
      ( vy wb wal weq wex wmo imbi1 alimi albi syl alrimiv exbi df-mo 3bitr4g
      wi ) ABEZCFZACDGZRZCFZDHZBUARZCFZDHZACIBCITUCUFEZDFUDUGETUHDTUBUEEZCFUHSU
      ICABUAJKUBUECLMNUCUFDOMACDPBCDPQ $.
  $}

  ${
    mobii.1 $e |- ( ps <-> ch ) $.
    $( Formula-building rule for the at-most-one quantifier (inference form).
       (Contributed by NM, 9-Mar-1995.)  (Revised by Mario Carneiro,
       17-Oct-2016.) $)
    mobii $p |- ( E* x ps <-> E* x ch ) $=
      ( wb wmo mobi mpg ) ABEACFBCFECABCGDH $.
  $}

  ${
    $d x ph $.
    mobidv.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Formula-building rule for the at-most-one quantifier (deduction form).
       (Contributed by Mario Carneiro, 7-Oct-2016.)  Reduce axiom dependencies
       and shorten proof.  (Revised by BJ, 7-Oct-2022.) $)
    mobidv $p |- ( ph -> ( E* x ps <-> E* x ch ) ) $=
      ( wb wal wmo alrimiv mobi syl ) ABCFZDGBDHCDHFALDEIBCDJK $.
  $}

  ${
    $d x y $.  $d y ph $.  $d y ps $.  $d y ch $.
    mobid.1 $e |- F/ x ph $.
    mobid.2 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Formula-building rule for the at-most-one quantifier (deduction form).
       (Contributed by NM, 8-Mar-1995.)  Remove dependency on ~ ax-10 ,
       ~ ax-11 , ~ ax-13 .  (Revised by BJ, 14-Oct-2022.)  (Proof shortened by
       Wolf Lammen, 18-Feb-2023.) $)
    mobid $p |- ( ph -> ( E* x ps <-> E* x ch ) ) $=
      ( wb wal wmo alrimi mobi syl ) ABCGZDHBDICDIGAMDEFJBCDKL $.

    $( Obsolete version of ~ mobid as of 18-Feb-2023.  (Contributed by NM,
       8-Mar-1995.)  Remove dependency on ~ ax-10 , ~ ax-11 , ~ ax-13 .
       (Revised by BJ, 14-Oct-2022.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    mobidOLD $p |- ( ph -> ( E* x ps <-> E* x ch ) ) $=
      ( vy weq wi wal wex wmo imbi1d albid exbidv df-mo 3bitr4g ) ABDGHZIZDJZGK
      CRIZDJZGKBDLCDLATUBGASUADEABCRFMNOBDGPCDGPQ $.
  $}

  $( If an implication holds for at most one value, then its consequent holds
     for at most one value.  See also ~ ala1 and ~ exa1 .  (Contributed by NM,
     28-Jul-1995.)  (Proof shortened by Wolf Lammen, 22-Dec-2018.)  (Revised by
     BJ, 29-Mar-2021.) $)
  moa1 $p |- ( E* x ( ph -> ps ) -> E* x ps ) $=
    ( wi ax-1 moimi ) BABDCBAEF $.

  $( "At most one" is still the case when a conjunct is added.  (Contributed by
     NM, 22-Apr-1995.) $)
  moan $p |- ( E* x ph -> E* x ( ps /\ ph ) ) $=
    ( wa simpr moimi ) BADACBAEF $.

  ${
    moani.1 $e |- E* x ph $.
    $( "At most one" is still true when a conjunct is added.  (Contributed by
       NM, 9-Mar-1995.) $)
    moani $p |- E* x ( ps /\ ph ) $=
      ( wmo wa moan ax-mp ) ACEBAFCEDABCGH $.
  $}

  $( "At most one" is still the case when a disjunct is removed.  (Contributed
     by NM, 5-Apr-2004.) $)
  moor $p |- ( E* x ( ph \/ ps ) -> E* x ph ) $=
    ( wo orc moimi ) AABDCABEF $.

  $( "At most one" imports disjunction to conjunction.  (Contributed by NM,
     5-Apr-2004.)  (Proof shortened by Andrew Salmon, 9-Jul-2011.) $)
  mooran1 $p |- ( ( E* x ph \/ E* x ps ) -> E* x ( ph /\ ps ) ) $=
    ( wmo wa simpl moimi moan jaoi ) ACDABEZCDBCDJACABFGBACHI $.

  $( "At most one" exports disjunction to conjunction.  (Contributed by NM,
     5-Apr-2004.)  (Proof shortened by Andrew Salmon, 9-Jul-2011.) $)
  mooran2 $p |- ( E* x ( ph \/ ps ) -> ( E* x ph /\ E* x ps ) ) $=
    ( wo wmo moor olc moimi jca ) ABDZCEACEBCEABCFBJCBAGHI $.

  ${
    $d x y $.  $d ph y $.
    $( Bound-variable hypothesis builder for the at-most-one quantifier.
       (Contributed by NM, 8-Mar-1995.)  (Revised by Mario Carneiro,
       7-Oct-2016.)  Adapt to new definition.  (Revised by BJ, 1-Oct-2022.) $)
    nfmo1 $p |- F/ x E* x ph $=
      ( vy wmo weq wi wal wex df-mo nfa1 nfex nfxfr ) ABDABCEFZBGZCHBABCINBCMBJ
      KL $.
  $}

  ${
    $d x z $.  $d y z $.  $d z ph $.  $d z ps $.
    nfmod2.1 $e |- F/ y ph $.
    nfmod2.2 $e |- ( ( ph /\ -. A. x x = y ) -> F/ x ps ) $.
    $( Bound-variable hypothesis builder for the at-most-one quantifier.
       (Contributed by Mario Carneiro, 14-Nov-2016.)  Avoid ~ df-eu .  (Revised
       by BJ, 14-Oct-2022.) $)
    nfmod2 $p |- ( ph -> F/ x E* y ps ) $=
      ( vz wmo weq wi wal wex df-mo nfv wn wa wnf nfeqf1 adantl nfimd nfald2
      nfexd nfxfrd ) BDHBDGIZJZDKZGLACBDGMAUFCGAGNAUECDEACDICKOZPBUDCFUGUDCQACD
      GRSTUAUBUC $.
  $}

  ${
    $d x y z $.  $d ph z $.  $d ps z $.
    nfmodv.1 $e |- F/ y ph $.
    nfmodv.2 $e |- ( ph -> F/ x ps ) $.
    $( Bound-variable hypothesis builder for the at-most-one quantifier.  See
       ~ nfmod for a version without disjoint variable conditions but requiring
       ~ ax-13 .  (Contributed by BJ, 28-Jan-2023.) $)
    nfmodv $p |- ( ph -> F/ x E* y ps ) $=
      ( vz wmo weq wi wal wex df-mo nfv nfvd nfimd nfald nfexd nfxfrd ) BDHBDGI
      ZJZDKZGLACBDGMAUBCGAGNAUACDEABTCFATCOPQRS $.
  $}

  ${
    nfmod.1 $e |- F/ y ph $.
    nfmod.2 $e |- ( ph -> F/ x ps ) $.
    $( Bound-variable hypothesis builder for the at-most-one quantifier.
       Deduction version of ~ nfmo .  (Contributed by Mario Carneiro,
       14-Nov-2016.) $)
    nfmod $p |- ( ph -> F/ x E* y ps ) $=
      ( wnf weq wal wn adantr nfmod2 ) ABCDEABCGCDHCIJFKL $.
  $}

  ${
    nfmo.1 $e |- F/ x ph $.
    $( Bound-variable hypothesis builder for the at-most-one quantifier.  Note
       that ` x ` and ` y ` need not be disjoint.  (Contributed by NM,
       9-Mar-1995.) $)
    nfmo $p |- F/ x E* y ph $=
      ( wmo wnf wtru nftru a1i nfmod mptru ) ACEBFGABCCHABFGDIJK $.
  $}

  ${
    $d x y z $.  $d ph z $.
    mof.1 $e |- F/ y ph $.
    $( Version of ~ df-mo with disjoint variable condition replaced by
       nonfreeness hypothesis.  (Contributed by NM, 8-Mar-1995.)  Extract
       ~ dfmo from this proof, and prove ~ mof from it (as of 30-Sep-2022,
       directly from ~ df-mo ).  (Revised by Wolf Lammen, 28-May-2019.)  Avoid
       ~ ax-13 .  (Revised by Wolf Lammen, 16-Oct-2022.) $)
    mof $p |- ( E* x ph <-> E. y A. x ( ph -> x = y ) ) $=
      ( vz wmo weq wi wal wex df-mo nfv nfim nfal equequ2 imbi2d albidv cbvexv1
      bitri ) ABFABEGZHZBIZEJABCGZHZBIZCJABEKUBUEECUACBATCDTCLMNUEELECGZUAUDBUF
      TUCAECBOPQRS $.

    $( Obsolete version of ~ mof as of 16-Oct-2022.  (Contributed by NM,
       8-Mar-1995.)  Extract ~ dfmo from this proof, and prove ~ mof from it
       (as of 30-Sep-2022, directly from ~ df-mo ).  (Revised by Wolf Lammen,
       28-May-2019.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    mofOLD $p |- ( E* x ph <-> E. y A. x ( ph -> x = y ) ) $=
      ( vz wmo weq wi wal wex df-mo nfim nfal equequ2 imbi2d albidv cbvex bitri
      nfv ) ABFABEGZHZBIZEJABCGZHZBIZCJABEKUBUEECUACBATCDTCSLMUEESECGZUAUDBUFTU
      CAECBNOPQR $.
  $}

  ${
    $d x y z $.  $d ph z $.
    mo3.nf $e |- F/ y ph $.
    $( Alternate definition of the at-most-one quantifier.  Definition of
       [BellMachover] p. 460, except that definition has the side condition
       that ` y ` not occur in ` ph ` in place of our hypothesis.  (Contributed
       by NM, 8-Mar-1995.)  (Proof shortened by Wolf Lammen, 18-Aug-2019.)
       Remove dependency on ~ ax-13 .  (Revised by BJ and WL, 29-Jan-2023.) $)
    mo3 $p |- ( E* x ph <->
               A. x A. y ( ( ph /\ [ y / x ] ph ) -> x = y ) ) $=
      ( vz wmo wsb wa weq wi wal nfmo1 wnf wtru nfv a1i nfmodv mptru wex alrimi
      df-mo spsbim equsb3 syl6ib anim12d equtr2 syl6 exlimiv sylbi nfs1v pm3.21
      imim1d alimd com12 aleximi sb8ev mof 3imtr4g moabs sylibr alcoms impbii
      sp ) ABFZAABCGZHZBCIZJZCKZBKVDVIBABLVDVHCVDCMNACBNBOACMNDPQRVDABEIZJZBKZE
      SVHABEUAVLVHEVLVFVJCEIZHVGVLAVJVEVMVKBVCVLVEVJBCGVMAVJBCUBCBEUCUDUEBCEUFU
      GUHUITTVHVDCBVHBKZCKZABSZVDJVDVOVECSAVGJZBKZCSVPVDVNVEVRCVEVNVRVEVHVQBABC
      UJVEAVFVGVEAUKULUMUNUOABCDUPABCDUQURABUSUTVAVB $.

    $( Obsolete version of ~ mo3 as of 29-Jan-2023.  (Contributed by NM,
       8-Mar-1995.)  (Proof shortened by Wolf Lammen, 18-Aug-2019.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    mo3OLD $p |- ( E* x ph <->
               A. x A. y ( ( ph /\ [ y / x ] ph ) -> x = y ) ) $=
      ( vz wmo wsb wa weq wi wal nfmo1 wex df-mo sp spsbim equsb3 syl6ib alrimi
      nfmo anim12d equtr2 exlimiv sylbi nfs1v pm3.21 imim1d alimd com12 aleximi
      syl6 sb8e mof 3imtr4g moabs sylibr alcoms impbii ) ABFZAABCGZHZBCIZJZCKZB
      KUSVDBABLUSVCCACBDTUSABEIZJZBKZEMVCABENVGVCEVGVAVECEIZHVBVGAVEUTVHVFBOVGU
      TVEBCGVHAVEBCPCBEQRUABCEUBUKUCUDSSVCUSCBVCBKZCKZABMZUSJUSVJUTCMAVBJZBKZCM
      VKUSVIUTVMCUTVIVMUTVCVLBABCUEUTAVAVBUTAUFUGUHUIUJABCDULABCDUMUNABUOUPUQUR
      $.
  $}

  ${
    $d x y $.
    mo.nf $e |- F/ y ph $.
    $( Equivalent definitions of "there exists at most one".  (Contributed by
       NM, 7-Aug-1994.)  (Revised by Mario Carneiro, 7-Oct-2016.)  (Proof
       shortened by Wolf Lammen, 2-Dec-2018.) $)
    mo $p |- ( E. y A. x ( ph -> x = y ) <->
               A. x A. y ( ( ph /\ [ y / x ] ph ) -> x = y ) ) $=
      ( weq wi wal wex wmo wsb wa mof mo3 bitr3i ) ABCEZFBGCHABIAABCJKOFCGBGABC
      DLABCDMN $.
  $}

  ${
    $d x y $.  $d y ph $.
    mo4f.1 $e |- F/ x ps $.
    mo4f.2 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( At-most-one quantifier expressed using implicit substitution.  Note that
       the disjoint variable condition on ` y , ph ` can be replaced by the
       nonfreeness hypothesis ` |- F/ y ph ` with essentially the same proof.
       (Contributed by NM, 10-Apr-2004.)  Remove dependency on ~ ax-13 .
       (Revised by Wolf Lammen, 19-Jan-2023.) $)
    mo4f $p |- ( E* x ph <-> A. x A. y ( ( ph /\ ps ) -> x = y ) ) $=
      ( wmo wsb wa weq wi wal nfv mo3 sbiev anbi2i imbi1i 2albii bitri ) ACGAAC
      DHZIZCDJZKZDLCLABIZUBKZDLCLACDADMNUCUECDUAUDUBTBAABCDEFOPQRS $.

    $( Obsolete version of ~ mo4f as of 19-Jan-2023.  (Contributed by NM,
       10-Apr-2004.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    mo4fOLD $p |- ( E* x ph <-> A. x A. y ( ( ph /\ ps ) -> x = y ) ) $=
      ( wmo wsb wa weq wi wal nfv mo3OLD sbie anbi2i imbi1i 2albii bitri ) ACGA
      ACDHZIZCDJZKZDLCLABIZUBKZDLCLACDADMNUCUECDUAUDUBTBAABCDEFOPQRS $.
  $}

  ${
    $d x y $.  $d y ph $.  $d x ps $.
    mo4.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( At-most-one quantifier expressed using implicit substitution.
       (Contributed by NM, 26-Jul-1995.) $)
    mo4 $p |- ( E* x ph <-> A. x A. y ( ( ph /\ ps ) -> x = y ) ) $=
      ( nfv mo4f ) ABCDBCFEG $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Unique existence: the unique existential quantifier
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Token for the unique existential quantifier. $)
  $c E! $.

  $( Extend wff definition to include the unique existential quantifier ("there
     exists a unique ` x ` such that ` ph ` "). $)
  weu $a wff E! x ph $.

  $( Define the existential uniqueness quantifier.  This expresses unique
     existence, or existential uniqueness, which is the conjunction of
     existence ( ~ df-ex ) and uniqueness ( ~ df-mo ).  The expression
     ` E! x ph ` is read "there exists exactly one ` x ` such that ` ph ` " or
     "there exists a unique ` x ` such that ` ph ` ".  This is also called the
     "uniqueness quantifier" but that expression is also used for the
     at-most-one quantifier ~ df-mo , therefore we avoid that ambiguous name.

     Definition 10.1 of [BellMachover] p. 97; also Definition *14.02 of
     [WhiteheadRussell] p. 175.  Other possible definitions are given by
     ~ eu1 , ~ eu2 , ~ eu3v , and ~ eu6 .  As for double unique existence,
     beware that the expression ` E! x E! y ph ` means "there exists a unique
     ` x ` such that there exists a unique ` y ` such that ` ph ` " which is a
     weaker property than "there exists exactly one ` x ` and one ` y ` such
     that ` ph ` " (see ~ 2eu4 ).  (Contributed by NM, 12-Aug-1993.)  Make this
     the definition (which used to be ~ eu6 , while this definition was then
     proved as ~ dfeu ).  (Revised by BJ, 30-Sep-2022.) $)
  df-eu $a |- ( E! x ph <-> ( E. x ph /\ E* x ph ) ) $.

  ${
    $d x y $.  $d ph y $.
    $( An alternate way to express existential uniqueness.  (Contributed by NM,
       8-Jul-1994.)  Replace a nonfreeness hypothesis with a disjoint variable
       condition on ` ph ` , ` y ` to reduce axiom usage.  (Revised by Wolf
       Lammen, 29-May-2019.) $)
    eu3v $p |- ( E! x ph <-> ( E. x ph /\ E. y A. x ( ph -> x = y ) ) ) $=
      ( weu wex wmo wa weq wi wal df-eu df-mo anbi2i bitri ) ABDABEZABFZGOABCHI
      BJCEZGABKPQOABCLMN $.
  $}

  ${
    $d w x y $.  $d x z $.  $d y ph $.  $d w z ph $.
    $( Soundness justification theorem for ~ eu6 when this was the definition
       of the unique existential quantifier (note that ` y ` and ` z ` need not
       be disjoint, although the weaker theorem with that disjoint variable
       condition added would be enough to justify the soundness of the
       definition).  See ~ eujustALT for a proof that provides an example of
       how it can be achieved through the use of ~ dvelim .  (Contributed by
       NM, 11-Mar-2010.)  (Proof shortened by Andrew Salmon, 9-Jul-2011.) $)
    eujust $p |- ( E. y A. x ( ph <-> x = y )
               <-> E. z A. x ( ph <-> x = z ) ) $=
      ( vw weq wb wal wex equequ2 bibi2d albidv cbvexvw bitri ) ABCFZGZBHZCIABE
      FZGZBHZEIABDFZGZBHZDIQTCECEFZPSBUDORACEBJKLMTUCEDEDFZSUBBUERUAAEDBJKLMN
      $.

    $( Alternate proof of ~ eujust illustrating the use of ~ dvelim .
       (Contributed by NM, 11-Mar-2010.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    eujustALT $p |- ( E. y A. x ( ph <-> x = y )
                  <-> E. z A. x ( ph <-> x = z ) ) $=
      ( vw weq wal wb wex equequ2 bibi2d albidv sps wn hbnae ax-5 notbid dvelim
      wi df-ex drex1 alrimih naecoms a1i cbv2h syl 3bitr4g pm2.61i ) CDFZCGZABC
      FZHZBGZCIZABDFZHZBGZDIZHUMUQCDUIUMUQHCUIULUPBUIUKUOACDBJKLZMUAUJNZUMNZCGZ
      NUQNZDGZNUNURUTVBVDUTUTDGZCGVBVDHUTVECCDCOCDDOUBUTVAVCCDVAVADGSDCABEFZHZB
      GZNZVADCEVIDPECFZVHUMVJVGULBVJVFUKAECBJKLQRUCVIVCCDEVICPEDFZVHUQVKVGUPBVK
      VFUOAEDBJKLQRUIVAVCHSUTUIUMUQUSQUDUEUFQUMCTUQDTUGUH $.
  $}

  ${
    $d x y z $.  $d y z ph $.
    $( Proof lines shared by ~ eu6 and ~ eu6im .  (Contributed by NM,
       12-Aug-1993.)  This used to be the definition of the unique existential
       quantifier, while ~ df-eu was then proved as ~ dfeu .  (Revised by BJ,
       30-Sep-2022.)  (Proof shortened by Wolf Lammen, 3-Jan-2023.)  Extract
       common proof lines.  (Revised by Wolf Lammen, 3-Mar-2023.) $)
    eu6lem $p |- ( E. y A. x ( ph <-> x = y ) <->
          ( E. y A. x ( x = y -> ph ) /\ E. z A. x ( ph -> x = z ) ) ) $=
      ( weq wb wal wex wi wa 19.42v alsyl equvelv sylib pm4.71i albiim biancomi
      equequ2 imbi2d exbii albidv anbi2d syl5bb pm5.32ri bitr4i ax6evr 3bitr4ri
      biantru exdistrv bitri ) ABCEZFBGZCHUKAIBGZABDEZIZBGZJZDHZCHUMCHUPDHJULUR
      CULCDEZJZDHULUSDHZJURULULUSDKUQUTDUQUQUSJUTUQUSUQUKUNIBGUSUKAUNBLCDBMNOUS
      ULUQULUMAUKIZBGZJUSUQULUMVCAUKBPQUSVCUPUMUSVBUOBUSUKUNACDBRSUAUBUCUDUETVA
      ULDCUFUHUGTUMUPCDUIUJ $.

    $( Alternate definition of the unique existential quantifier ~ df-eu not
       using the at-most-one quantifier.  (Contributed by NM, 12-Aug-1993.)
       This used to be the definition of the unique existential quantifier,
       while ~ df-eu was then proved as ~ dfeu .  (Revised by BJ, 30-Sep-2022.)
       (Proof shortened by Wolf Lammen, 3-Jan-2023.) $)
    eu6 $p |- ( E! x ph <-> E. y A. x ( ph <-> x = y ) ) $=
      ( vz wex weq wi wal wa weu wb exsb anbi1i eu3v eu6lem 3bitr4i ) ABEZABDFG
      BHDEZIBCFZAGBHCEZRIABJASKBHCEQTRABCLMABDNABCDOP $.

    $( One direction of ~ eu6 needs fewer axioms.  (Contributed by Wolf Lammen,
       2-Mar-2023.) $)
    eu6im $p |- ( E. y A. x ( ph <-> x = y ) -> E! x ph ) $=
      ( vz weq wi wal wex wa wb weu exsbim anim1i eu6lem eu3v 3imtr4i ) BCEZAFB
      GCHZABDEFBGDHZIABHZSIAQJBGCHABKRTSABCLMABCDNABDOP $.

    $( Obsolete version of ~ eu6 as of 28-Dec-2022.  (Contributed by NM,
       12-Aug-1993.)  This used to be the definition of the unique existential
       quantifier, while ~ df-eu was then proved as ~ dfeu .  (Revised by BJ,
       30-Sep-2022.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    eu6OLD $p |- ( E! x ph <-> E. y A. x ( ph <-> x = y ) ) $=
      ( vz weu wex wmo wa weq wal anbi12i 19.26 albii anass bitri bicomi bitr3i
      wi 3bitri exbii wb df-eu exsb df-mo pm3.33 pm4.71i equvelv equequ2 bicomd
      exdistrv imbi2d albidv pm5.32ri anbi2i ancom anbi1i 19.42v ax6evr biantru
      dfbi2 ) ABEABFZABGZHBCIZARZBJZCFZABDIZRZBJZDFZHZAVCUAZBJZCFZABUBVAVFVBVJA
      BCUCABDUDKVKVMCDIZDFZHZCFZVNVKVEVIHZDFZCFVRVEVICDUJVTVQCVTVMVOHZDFVQVSWAD
      VSVDVHHZBJZWAVDVHBLZWCWBVCVGRZHZBJWCWEBJZHZWAWBWFBWBWEVCAVGUEUFMWBWEBLWHV
      SVOHZVEAVCRZBJZVOHZHZWAWCVSWGVOWDCDBUGKWIVEVIVOHZHWMVEVIVONWNWLVEVOVIWKVO
      VHWJBVOVGVCAVOVCVGCDBUHUIUKULUMUNOWMVEWKHZVOHWAVEWKVONWOVMVOWOVDWJHZBJVMV
      DWJBLWPVLBWPWJVDHZVLVDWJUOVLWQAVCUTPOMQUPQSSQTVMVODUQOTQVQVMCVMVQVPVMDCUR
      USPTOS $.
  $}

  ${
    $d x y z $.  $d ph z $.
    euf.1 $e |- F/ y ph $.
    $( Version of ~ eu6 with disjoint variable condition replaced by
       nonfreeness hypothesis.  (Contributed by NM, 12-Aug-1993.)  (Proof
       shortened by Wolf Lammen, 30-Oct-2018.)  Avoid ~ ax-13 .  (Revised by
       Wolf Lammen, 16-Oct-2022.) $)
    euf $p |- ( E! x ph <-> E. y A. x ( ph <-> x = y ) ) $=
      ( vz weu weq wb wal wex eu6 nfbi nfal equequ2 bibi2d albidv cbvexv1 bitri
      nfv ) ABFABEGZHZBIZEJABCGZHZBIZCJABEKUBUEECUACBATCDTCSLMUEESECGZUAUDBUFTU
      CAECBNOPQR $.

    $( Obsolete version of ~ euf as of 16-Oct-2022.  (Contributed by NM,
       12-Aug-1993.)  (Proof shortened by Wolf Lammen, 30-Oct-2018.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    eufOLD $p |- ( E! x ph <-> E. y A. x ( ph <-> x = y ) ) $=
      ( vz weu weq wal wex eu6 nfv nfbi nfal equequ2 bibi2d albidv cbvex bitri
      wb ) ABFABEGZSZBHZEIABCGZSZBHZCIABEJUBUEECUACBATCDTCKLMUEEKECGZUAUDBUFTUC
      AECBNOPQR $.
  $}

  $( Existential uniqueness implies existence.  (Contributed by NM,
     15-Sep-1993.)  (Proof shortened by Andrew Salmon, 9-Jul-2011.)  (Proof
     shortened by Wolf Lammen, 4-Dec-2018.)  (Proof shortened by BJ,
     7-Oct-2022.) $)
  euex $p |- ( E! x ph -> E. x ph ) $=
    ( weu wex wmo df-eu simplbi ) ABCABDABEABFG $.

  $( Existential uniqueness implies uniqueness.  (Contributed by NM,
     23-Mar-1995.) $)
  eumo $p |- ( E! x ph -> E* x ph ) $=
    ( weu wex wmo df-eu simprbi ) ABCABDABEABFG $.

  ${
    eumoi.1 $e |- E! x ph $.
    $( Uniqueness inferred from existential uniqueness.  (Contributed by NM,
       5-Apr-1995.) $)
    eumoi $p |- E* x ph $=
      ( weu wmo eumo ax-mp ) ABDABECABFG $.
  $}

  $( Existence implies that uniqueness is equivalent to unique existence.
     (Contributed by NM, 5-Apr-2004.) $)
  exmoeub $p |- ( E. x ph -> ( E* x ph <-> E! x ph ) ) $=
    ( weu wex wmo df-eu baibr ) ABCABDABEABFG $.

  $( Existence is equivalent to uniqueness implying existential uniqueness.
     (Contributed by NM, 5-Apr-2004.)  (Proof shortened by Wolf Lammen,
     5-Dec-2018.)  (Proof shortened by BJ, 7-Oct-2022.) $)
  exmoeu $p |- ( E. x ph <-> ( E* x ph -> E! x ph ) ) $=
    ( wex wmo weu wi exmoeub biimpd nexmo con1i euex ja impbii ) ABCZABDZABEZFN
    OPABGHOPNNOABIJABKLM $.

  $( Uniqueness implies that existence is equivalent to unique existence.
     (Contributed by BJ, 7-Oct-2022.) $)
  moeuex $p |- ( E* x ph -> ( E. x ph <-> E! x ph ) ) $=
    ( weu wex wmo df-eu rbaibr ) ABCABDABEABFG $.

  $( Uniqueness is equivalent to existence implying unique existence.
     Alternate definition of the at-most-one quantifier, in terms of the
     existential quantifier and the unique existential quantifier.
     (Contributed by NM, 8-Mar-1995.)  This used to be the definition of the
     at-most-one quantifier, while ~ df-mo was then proved as ~ dfmo .
     (Revised by BJ, 30-Sep-2022.) $)
  moeu $p |- ( E* x ph <-> ( E. x ph -> E! x ph ) ) $=
    ( wmo wex wi weu moabs exmoeub pm5.74i bitri ) ABCZABDZKELABFZEABGLKMABHIJ
    $.

  $( Equivalence theorem for the unique existential quantifier.  Theorem
     *14.271 in [WhiteheadRussell] p. 192.  (Contributed by Andrew Salmon,
     11-Jul-2011.)  Reduce dependencies on axioms.  (Revised by BJ,
     7-Oct-2022.) $)
  eubi $p |- ( A. x ( ph <-> ps ) -> ( E! x ph <-> E! x ps ) ) $=
    ( wb wal wex wmo wa weu exbi mobi anbi12d df-eu 3bitr4g ) ABDCEZACFZACGZHBC
    FZBCGZHACIBCIOPRQSABCJABCKLACMBCMN $.

  ${
    eubii.1 $e |- ( ph <-> ps ) $.
    $( Introduce unique existential quantifier to both sides of an equivalence.
       (Contributed by NM, 9-Jul-1994.)  (Revised by Mario Carneiro,
       6-Oct-2016.) $)
    eubii $p |- ( E! x ph <-> E! x ps ) $=
      ( wb weu eubi mpg ) ABEACFBCFECABCGDH $.
  $}

  ${
    $d x ph $.
    eubidv.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Formula-building rule for unique existential quantifier (deduction
       form).  (Contributed by NM, 9-Jul-1994.)  Reduce axiom dependencies and
       shorten proof.  (Revised by BJ, 7-Oct-2022.) $)
    eubidv $p |- ( ph -> ( E! x ps <-> E! x ch ) ) $=
      ( wb wal weu alrimiv eubi syl ) ABCFZDGBDHCDHFALDEIBCDJK $.
  $}

  ${
    eubid.1 $e |- F/ x ph $.
    eubid.2 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Formula-building rule for the unique existential quantifier (deduction
       form).  (Contributed by NM, 9-Jul-1994.)  (Proof shortened by Wolf
       Lammen, 19-Feb-2023.) $)
    eubid $p |- ( ph -> ( E! x ps <-> E! x ch ) ) $=
      ( wb wal weu alrimi eubi syl ) ABCGZDHBDICDIGAMDEFJBCDKL $.

    $( Obsolete version of ~ eubid as of 19-Feb-2023.  (Contributed by NM,
       9-Jul-1994.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    eubidOLD $p |- ( ph -> ( E! x ps <-> E! x ch ) ) $=
      ( wex wmo wa weu exbid mobid anbi12d df-eu 3bitr4g ) ABDGZBDHZICDGZCDHZIB
      DJCDJAPRQSABCDEFKABCDEFLMBDNCDNO $.
  $}

  ${
    $d x y $.  $d y ph $.
    $( Bound-variable hypothesis builder for uniqueness.  See also ~ nfeu1ALT .
       (Contributed by NM, 9-Jul-1994.)  (Revised by Mario Carneiro,
       7-Oct-2016.) $)
    nfeu1 $p |- F/ x E! x ph $=
      ( vy weu weq wb wal wex eu6 nfa1 nfex nfxfr ) ABDABCEFZBGZCHBABCINBCMBJKL
      $.
  $}

  $( Alternate proof of ~ nfeu1 .  This illustrates the systematic way of
     proving nonfreeness in a defined expression: consider the definiens as a
     tree whose nodes are its subformulas, and prove by tree-induction
     nonfreeness of each node, starting from the leaves (generally using ~ nfv
     or nf* theorems for previously defined expressions) and up to the root.
     Here, the definiens is a conjunction of two previously defined
     expressions, which automatically yields the present proof.  (Contributed
     by BJ, 2-Oct-2022.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  nfeu1ALT $p |- F/ x E! x ph $=
    ( weu wex wmo wa df-eu nfe1 nfmo1 nfan nfxfr ) ABCABDZABEZFBABGLMBABHABIJK
    $.

  ${
    nfeud2.1 $e |- F/ y ph $.
    nfeud2.2 $e |- ( ( ph /\ -. A. x x = y ) -> F/ x ps ) $.
    $( Bound-variable hypothesis builder for uniqueness.  (Contributed by Mario
       Carneiro, 14-Nov-2016.)  (Proof shortened by Wolf Lammen, 4-Oct-2018.)
       (Proof shortened by BJ, 14-Oct-2022.) $)
    nfeud2 $p |- ( ph -> F/ x E! y ps ) $=
      ( weu wex wmo wa df-eu nfexd2 nfmod2 nfand nfxfrd ) BDGBDHZBDIZJACBDKAPQC
      ABCDEFLABCDEFMNO $.
  $}

  ${
    nfeud.1 $e |- F/ y ph $.
    nfeud.2 $e |- ( ph -> F/ x ps ) $.
    $( Bound-variable hypothesis builder for the unique existential quantifier.
       Deduction version of ~ nfeu .  (Contributed by NM, 15-Feb-2013.)
       (Revised by Mario Carneiro, 7-Oct-2016.) $)
    nfeud $p |- ( ph -> F/ x E! y ps ) $=
      ( wnf weq wal wn adantr nfeud2 ) ABCDEABCGCDHCIJFKL $.
  $}

  ${
    nfeu.1 $e |- F/ x ph $.
    $( Bound-variable hypothesis builder for the unique existential quantifier.
       Note that ` x ` and ` y ` need not be disjoint.  (Contributed by NM,
       8-Mar-1995.)  (Revised by Mario Carneiro, 7-Oct-2016.) $)
    nfeu $p |- F/ x E! y ph $=
      ( weu wnf wtru nftru a1i nfeud mptru ) ACEBFGABCCHABFGDIJK $.
  $}

  $( Rederive ~ df-eu from the old definition ~ eu6 .  (Contributed by NM,
     23-Mar-1995.)  (Proof shortened by Wolf Lammen, 25-May-2019.)  (Proof
     shortened by BJ, 7-Oct-2022.)  (Proof modification is discouraged.)  Use
     ~ df-eu instead.  (New usage is discouraged.) $)
  dfeu $p |- ( E! x ph <-> ( E. x ph /\ E* x ph ) ) $=
    ( wex weu wa wi wmo abai euex pm4.71ri moeu anbi2i 3bitr4i ) ABCZABDZENNOFZ
    EONABGZENOHONABIJQPNABKLM $.

  ${
    $d x y $.  $d y ph $.
    $( Rederive ~ df-mo from the old definition ~ moeu .  (Contributed by Wolf
       Lammen, 27-May-2019.)  (Proof modification is discouraged.)  Use ~ df-mo
       instead.  (New usage is discouraged.) $)
    dfmo $p |- ( E* x ph <-> E. y A. x ( ph -> x = y ) ) $=
      ( wmo wex weu wi weq wb wal moeu eu6 imbi2i wn alnex pm2.21 sylbir 19.8ad
      alimi com12 biimp eximi ja nfia1 wa id ax12v embantd ancld albiim syl6ibr
      spsd exlimi eximdv impbii 3bitri ) ABDABEZABFZGUQABCHZIZBJZCEZGZAUSGZBJZC
      EZABKURVBUQABCLMVCVFUQVBVFUQNZVECVGANZBJVEABOVHVDBAUSPSQRVAVECUTVDBAUSUAS
      UBUCUQVFVBUQVEVACAVEVAGBVDUTBUDAVEVEUSAGBJZUEVAAVEVIAVDVIBAAUSVIAUFUSAVIA
      BCUGTUHULUIAUSBUJUKUMUNTUOUP $.
  $}

  ${
    $d x y z $.
    $( There exists a unique set equal to a given set.  Special case of ~ eueqi
       proved using only predicate calculus.  The proof needs ` y = z ` be free
       of ` x ` .  This is ensured by having ` x ` and ` y ` be distinct.
       Alternately, a distinctor ` -. A. x x = y ` could have been used
       instead.  See ~ eueq and ~ eueqi for classes.  (Contributed by Stefan
       Allan, 4-Dec-2008.)  (Proof shortened by Wolf Lammen, 8-Sep-2019.)
       Reduce axiom usage.  (Revised by Wolf Lammen, 1-Mar-2023.) $)
    euequ $p |- E! x x = y $=
      ( vz weq weu wex wi wal ax6ev equeuclr alrimiv eximii eu3v mpbir2an ) ABD
      ZAEOAFOACDGZAHZCFABICBDZQCCBIRPACABJKLOACMN $.

    $( Obsolete proof of ~ euequ as of 28-Feb-2023.  (Contributed by Stefan
       Allan, 4-Dec-2008.)  (Proof shortened by Wolf Lammen, 8-Sep-2019.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    euequOLD $p |- E! x x = y $=
      ( vz weq weu wb wal wex ax6evr equequ2 alrimiv eximii eu6 mpbir ) ABDZAEO
      ACDFZAGZCHBCDZQCCBIRPABCAJKLOACMN $.
  $}

  $( old theorems $)

  $( Obsolete proof of ~ moeu as of 14-Oct-2022.  (Contributed by NM,
     8-Mar-1995.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  moeuOLD $p |- ( E* x ph <-> ( E. x ph -> E! x ph ) ) $=
    ( wmo wex wi wa weu ax-1 nexmo pm2.6 ax-mp impbii anclb df-eu bicomi imbi2i
    wn 3bitri ) ABCZABDZSEZTTSFZETABGZESUASTHTQSEUASEABITSJKLTSMUBUCTUCUBABNOPR
    $.

  $( Obsolete proof of ~ exmo as of 14-Oct-2022.  (Contributed by NM,
     8-Mar-1995.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  exmoOLD $p |- ( E. x ph \/ E* x ph ) $=
    ( wex wmo wn weu wi pm2.21 moeu sylibr orri ) ABCZABDZLELABFZGMLNHABIJK $.

  ${
    $d x y ph $.  $d y ps $.  $d y ch $.
    eubidvOLD.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Obsolete proof of ~ eubidv as of 1-Oct-2022.  (Contributed by NM,
       9-Jul-1994.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    eubidvOLD $p |- ( ph -> ( E! x ps <-> E! x ch ) ) $=
      ( vy weq wb wal wex weu bibi1d albidv exbidv eu6 3bitr4g ) ABDFGZHZDIZFJC
      QHZDIZFJBDKCDKASUAFARTDABCQELMNBDFOCDFOP $.
  $}

  ${
    $d x ph $.
    mobidvOLDOLD.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Obsolete proof of ~ mobidv as of 1-Oct-2022.  (Contributed by Mario
       Carneiro, 7-Oct-2016.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    mobidvOLDOLD $p |- ( ph -> ( E* x ps <-> E* x ch ) ) $=
      ( wex weu wi wmo exbidv eubidvOLD imbi12d moeu 3bitr4g ) ABDFZBDGZHCDFZCD
      GZHBDICDIAOQPRABCDEJABCDEKLBDMCDMN $.
  $}

  $( Obsolete proof of ~ nfmo1 as of 1-Oct-2022.  (Contributed by NM,
     8-Mar-1995.)  (Revised by Mario Carneiro, 7-Oct-2016.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  nfmo1OLD $p |- F/ x E* x ph $=
    ( wmo wex weu wi moeu nfe1 nfeu1 nfim nfxfr ) ABCABDZABEZFBABGLMBABHABIJK
    $.

  ${
    $d x z $.  $d y z $.  $d z ph $.  $d z ps $.
    nfeud2OLD.1 $e |- F/ y ph $.
    nfeud2OLD.2 $e |- ( ( ph /\ -. A. x x = y ) -> F/ x ps ) $.
    $( Obsolete proof of ~ nfeud2 as of 14-Oct-2022.  (Contributed by Mario
       Carneiro, 14-Nov-2016.)  (Proof shortened by Wolf Lammen, 4-Oct-2018.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    nfeud2OLD $p |- ( ph -> F/ x E! y ps ) $=
      ( vz weu weq wb wal wex eu6 nfv wn wa wnf nfeqf1 adantl nfbid nfald2
      nfexd nfxfrd ) BDHBDGIZJZDKZGLACBDGMAUFCGAGNAUECDEACDICKOZPBUDCFUGUDCQACD
      GRSTUAUBUC $.
  $}

  ${
    nfmod2OLD.1 $e |- F/ y ph $.
    nfmod2OLD.2 $e |- ( ( ph /\ -. A. x x = y ) -> F/ x ps ) $.
    $( Obsolete proof of ~ nfmod2 as of 14-Oct-2022.  (Contributed by Mario
       Carneiro, 14-Nov-2016.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    nfmod2OLD $p |- ( ph -> F/ x E* y ps ) $=
      ( wmo wex weu wi moeu nfexd2 nfeud2 nfimd nfxfrd ) BDGBDHZBDIZJACBDKAPQCA
      BCDEFLABCDEFMNO $.
  $}

  ${
    $d x ph $.
    eubidvOLDOLD.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Obsolete version of ~ eubidv as of 26-Sep-2022.  (Contributed by NM,
       9-Jul-1994.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    eubidvOLDOLD $p |- ( ph -> ( E! x ps <-> E! x ch ) ) $=
      ( nfv eubid ) ABCDADFEG $.

    $( Obsolete version of ~ mobidv as of 7-Oct-2022.  (Contributed by Mario
       Carneiro, 7-Oct-2016.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    mobidvOLD $p |- ( ph -> ( E* x ps <-> E* x ch ) ) $=
      ( nfv mobid ) ABCDADFEG $.
  $}

  ${
    $d x y $.  $d y ph $.  $d y ps $.  $d y ch $.
    eubidOLDOLD.1 $e |- F/ x ph $.
    eubidOLDOLD.2 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Obsolete proof of ~ eubid as of 14-Oct-2022.  (Contributed by NM,
       8-Mar-1995.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    eubidOLDOLD $p |- ( ph -> ( E! x ps <-> E! x ch ) ) $=
      ( vy weq wb wal wex weu bibi1d albid exbidv eu6 3bitr4g ) ABDGHZIZDJZGKCR
      IZDJZGKBDLCDLATUBGASUADEABCRFMNOBDGPCDGPQ $.
  $}

  ${
    mobidOLDOLD.1 $e |- F/ x ph $.
    mobidOLDOLD.2 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Obsolete proof of ~ mobid as of 14-Oct-2022.  (Contributed by NM,
       8-Mar-1995.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    mobidOLDOLD $p |- ( ph -> ( E* x ps <-> E* x ch ) ) $=
      ( wex weu wi wmo exbid eubid imbi12d moeu 3bitr4g ) ABDGZBDHZICDGZCDHZIBD
      JCDJAPRQSABCDEFKABCDEFLMBDNCDNO $.
  $}

  ${
    $d x y $.  $d ph y $.
    $( Obsolete proof of ~ euex as of 7-Oct-2022.  (Contributed by NM,
       15-Sep-1993.)  (Proof shortened by Andrew Salmon, 9-Jul-2011.)  (Proof
       shortened by Wolf Lammen, 4-Dec-2018.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    euexOLD $p |- ( E! x ph -> E. x ph ) $=
      ( vy weu weq wb wal wex wi ax6ev biimpr com12 eximii 19.35i exlimiv sylbi
      eu6 ) ABDABCEZFZBGZCHABHZABCQTUACSABRSAIBBCJSRAARKLMNOP $.
  $}

  $( Obsolete proof of ~ dfeu as of 7-Oct-2022.  (Contributed by NM,
     23-Mar-1995.)  (Proof shortened by Wolf Lammen, 25-May-2019.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  dfeuOLD $p |- ( E! x ph <-> ( E. x ph /\ E* x ph ) ) $=
    ( weu wex wmo wa euex eumo jca wi moeu biimpi impcom impbii ) ABCZABDZABEZF
    OPQABGABHIQPOQPOJABKLMN $.

  $( Obsolete proof of ~ moabs as of 14-Oct-2022.  (Contributed by NM,
     4-Nov-2002.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  moabsOLD $p |- ( E* x ph <-> ( E. x ph -> E* x ph ) ) $=
    ( wex weu wi wmo pm5.4 moeu imbi2i 3bitr4ri ) ABCZKABDZEZEMKABFZENKLGNMKABH
    ZIOJ $.

  $( Obsolete proof of ~ exmoeu as of 7-Oct-2022.  (Contributed by NM,
     5-Apr-2004.)  (Proof shortened by Wolf Lammen, 5-Dec-2018.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  exmoeuOLD $p |- ( E. x ph <-> ( E* x ph -> E! x ph ) ) $=
    ( wex wmo weu wi moeu biimpi com12 exmo ori con1i euex ja impbii ) ABCZABDZ
    ABEZFQPRQPRFABGHIQRPPQPQABJKLABMNO $.

  $( substitution $)

  ${
    $d w y z $.  $d ph z w $.  $d w x z $.
    sb8eulem.nfsb $e |- F/ y [ w / x ] ph $.
    sb8eulem.sbequ $e |- ( w = y -> ( [ w / x ] ph <-> [ y / x ] ph ) ) $.
    $( Lemma.  Factor out the common proof skeleton of ~ sb8euv and ~ sb8eu .
       Variable substitution in unique existential quantifier.  (Contributed by
       NM, 7-Aug-1994.)  (Revised by Mario Carneiro, 7-Oct-2016.)  (Proof
       shortened by Wolf Lammen, 24-Aug-2019.)  Factor out common proof lines.
       (Revised by Wolf Lammen, 9-Feb-2023.) $)
    sb8eulem $p |- ( E! x ph <-> E! y [ y / x ] ph ) $=
      ( vz weq wb wal wex wsb weu nfv sb8v equsb3 sblbis albii nfbi eu6 equequ1
      bibi12d cbvalv1 3bitri exbii 3bitr4i ) ABGHZIZBJZGKABCLZCGHZIZCJZGKABMUJC
      MUIUMGUIUHBDLZDJABDLZDGHZIZDJUMUHBDUHDNOUNUQDUGUPABDDBGPQRUQULDCUOUPCEUPC
      NSULDNDCHUOUJUPUKFDCGUAUBUCUDUEABGTUJCGTUF $.
  $}

  ${
    $d w x y $.  $d ph w $.
    sb8euv.nf $e |- F/ y ph $.
    $( Variable substitution in unique existential quantifier.  Version of
       ~ sb8eu requiring more disjoint variables, but fewer axioms.
       (Contributed by Wolf Lammen, 7-Feb-2023.) $)
    sb8euv $p |- ( E! x ph <-> E! y [ y / x ] ph ) $=
      ( vw nfsbv sbequ sb8eulem ) ABCEABECDFAECBGH $.
  $}

  ${
    $d w y $.  $d ph w $.  $d w x $.
    sb8eu.1 $e |- F/ y ph $.
    $( Variable substitution in unique existential quantifier.  For a version
       requiring more disjoint variables, but fewer axioms, see ~ sb8euv .
       (Contributed by NM, 7-Aug-1994.)  (Revised by Mario Carneiro,
       7-Oct-2016.)  (Proof shortened by Wolf Lammen, 24-Aug-2019.) $)
    sb8eu $p |- ( E! x ph <-> E! y [ y / x ] ph ) $=
      ( vw nfsb sbequ sb8eulem ) ABCEABECDFAECBGH $.

    $( Variable substitution for the at-most-one quantifier.  (Contributed by
       Alexander van der Vekens, 17-Jun-2017.) $)
    sb8mo $p |- ( E* x ph <-> E* y [ y / x ] ph ) $=
      ( wex weu wi wsb wmo sb8e sb8eu imbi12i moeu 3bitr4i ) ABEZABFZGABCHZCEZQ
      CFZGABIQCIORPSABCDJABCDKLABMQCMN $.
  $}

  ${
    cbvmo.1 $e |- F/ y ph $.
    cbvmo.2 $e |- F/ x ps $.
    cbvmo.3 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Rule used to change bound variables, using implicit substitution.
       (Contributed by NM, 9-Mar-1995.)  (Revised by Andrew Salmon,
       8-Jun-2011.)  (Proof shortened by Wolf Lammen, 4-Jan-2023.) $)
    cbvmo $p |- ( E* x ph <-> E* y ps ) $=
      ( wmo wsb sb8mo sbie mobii bitri ) ACHACDIZDHBDHACDEJNBDABCDFGKLM $.
  $}

  ${
    cbveu.1 $e |- F/ y ph $.
    cbveu.2 $e |- F/ x ps $.
    cbveu.3 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Rule used to change bound variables, using implicit substitution.
       (Contributed by NM, 25-Nov-1994.)  (Revised by Mario Carneiro,
       7-Oct-2016.) $)
    cbveu $p |- ( E! x ph <-> E! y ps ) $=
      ( weu wsb sb8eu sbie eubii bitri ) ACHACDIZDHBDHACDEJNBDABCDFGKLM $.

    $( Alternative proof of ~ cbveu .  Since ~ df-eu combines two other
       quantifiers, one can base this theorem on their associated 'change
       bounded variable' kind of theorems as well.  (Contributed by Wolf
       Lammen, 5-Jan-2023.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    cbveuALT $p |- ( E! x ph <-> E! y ps ) $=
      ( wex wmo wa weu cbvex cbvmo anbi12i df-eu 3bitr4i ) ACHZACIZJBDHZBDIZJAC
      KBDKQSRTABCDEFGLABCDEFGMNACOBDOP $.

    $( Obsolete version of ~ cbvmo as of 4-Jan-2023.  (Contributed by NM,
       9-Mar-1995.)  (Revised by Andrew Salmon, 8-Jun-2011.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    cbvmoOLD $p |- ( E* x ph <-> E* y ps ) $=
      ( wex weu wi wmo cbvex cbveu imbi12i moeu 3bitr4i ) ACHZACIZJBDHZBDIZJACK
      BDKQSRTABCDEFGLABCDEFGMNACOBDOP $.
  $}

  ${
    $d x y $.
    eu2.nf $e |- F/ y ph $.
    $( An alternate way of defining existential uniqueness.  Definition 6.10 of
       [TakeutiZaring] p. 26.  (Contributed by NM, 8-Jul-1994.)  (Proof
       shortened by Wolf Lammen, 2-Dec-2018.) $)
    eu2 $p |- ( E! x ph <->
    ( E. x ph /\ A. x A. y ( ( ph /\ [ y / x ] ph ) -> x = y ) ) ) $=
      ( weu wex wmo wa wsb weq wi wal df-eu mo3 anbi2i bitri ) ABEABFZABGZHQAAB
      CIHBCJKCLBLZHABMRSQABCDNOP $.
  $}

  ${
    $d x y $.
    eu1.nf $e |- F/ y ph $.
    $( An alternate way to express uniqueness used by some authors.  Exercise
       2(b) of [Margaris] p. 110.  (Contributed by NM, 20-Aug-1993.)  (Revised
       by Mario Carneiro, 7-Oct-2016.)  (Proof shortened by Wolf Lammen,
       29-Oct-2018.)  Avoid ~ ax-13 .  (Revised by Wolf Lammen, 7-Feb-2023.) $)
    eu1 $p |- ( E! x ph <->
                E. x ( ph /\ A. y ( [ y / x ] ph -> x = y ) ) ) $=
      ( wsb weu weq wb wal wex wi wa nfs1v sb8euv sb6rfv equcom imbi2i anbi12ci
      euf albii albiim bitr4i exbii 3bitr4i ) ABCEZCFUECBGZHCIZBJABFAUEBCGZKZCI
      ZLZBJUECBABCMSABCDNUKUGBUKUEUFKZCIZUFUEKCIZLUGAUNUJUMABCDOUIULCUHUFUEBCPQ
      TRUEUFCUAUBUCUD $.

    $( Obsolete version of ~ eu1 as of 7-Feb-2023.  (Contributed by NM,
       20-Aug-1993.)  (Revised by Mario Carneiro, 7-Oct-2016.)  (Proof
       shortened by Wolf Lammen, 29-Oct-2018.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    eu1OLD $p |- ( E! x ph <->
                E. x ( ph /\ A. y ( [ y / x ] ph -> x = y ) ) ) $=
      ( wsb weu weq wb wal wi wa nfs1v sb8eu sb6rf equcom imbi2i albii anbi12ci
      wex euf albiim bitr4i exbii 3bitr4i ) ABCEZCFUECBGZHCIZBSABFAUEBCGZJZCIZK
      ZBSUECBABCLTABCDMUKUGBUKUEUFJZCIZUFUEJCIZKUGAUNUJUMABCDNUIULCUHUFUEBCOPQR
      UEUFCUAUBUCUD $.
  $}

  ${
    $d x y $.  $d ph y $.
    $( Obsolete proof of ~ euex as of 7-Oct-2022.  (Contributed by NM,
       15-Sep-1993.)  (Proof shortened by Andrew Salmon, 9-Jul-2011.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    euexALTOLD $p |- ( E! x ph -> E. x ph ) $=
      ( vy weu wsb weq wi wal wa wex nfv eu1 exsimpl sylbi ) ABDAABCEBCFGCHZIBJ
      ABJABCACKLAOBMN $.
  $}

  ${
    euor.nf $e |- F/ x ph $.
    $( Introduce a disjunct into a unique existential quantifier.  For a
       version requiring disjoint variables, but fewer axioms, see ~ euorv .
       (Contributed by NM, 21-Oct-2005.) $)
    euor $p |- ( ( -. ph /\ E! x ps ) -> E! x ( ph \/ ps ) ) $=
      ( wn weu wo nfn biorf eubid biimpa ) AEZBCFABGZCFLBMCACDHABIJK $.
  $}

  ${
    $d x ph $.
    $( Introduce a disjunct into a unique existential quantifier.  Version of
       ~ euor requiring disjoint variables, but fewer axioms.  (Contributed by
       NM, 23-Mar-1995.)  Reduce dependencies on axioms.  (Revised by Wolf
       Lammen, 14-Jan-2023.) $)
    euorv $p |- ( ( -. ph /\ E! x ps ) -> E! x ( ph \/ ps ) ) $=
      ( wn weu wo biorf eubidv biimpa ) ADZBCEABFZCEJBKCABGHI $.
  $}

  ${
    $d x ph $.
    $( Obsolete version of ~ euorv as of 14-Jan-2023.  (Contributed by NM,
       23-Mar-1995.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    euorvOLD $p |- ( ( -. ph /\ E! x ps ) -> E! x ( ph \/ ps ) ) $=
      ( nfv euor ) ABCACDE $.
  $}

  $( Introduce or eliminate a disjunct in a unique existential quantifier.
     (Contributed by NM, 21-Oct-2005.)  (Proof shortened by Andrew Salmon,
     9-Jul-2011.)  (Proof shortened by Wolf Lammen, 27-Dec-2018.) $)
  euor2 $p |- ( -. E. x ph -> ( E! x ( ph \/ ps ) <-> E! x ps ) ) $=
    ( wex wn wo nfe1 nfn wb 19.8a con3i biorf bicomd syl eubid ) ACDZEZABFZBCPC
    ACGHQAEZRBIAPACJKSBRABLMNO $.

  ${
    $d w x z $.  $d w y z $.  $d w ph $.
    $( Substitution into an at-most-one quantifier.  (Contributed by Jeff
       Madsen, 2-Sep-2009.) $)
    sbmo $p |- ( [ y / x ] E* z ph <-> E* z [ y / x ] ph ) $=
      ( vw weq wal wex wsb wmo sbex sblim sbalv exbii bitri df-mo sbbii 3bitr4i
      wi nfv ) ADEFZSZDGZEHZBCIZABCIZUASZDGZEHZADJZBCIUFDJUEUCBCIZEHUIUCEBCKUKU
      HEUBUGBCDAUABCUABTLMNOUJUDBCADEPQUFDEPR $.
  $}

  ${
    $d x y $.  $d y ph $.  $d x ps $.
    eu4.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Uniqueness using implicit substitution.  (Contributed by NM,
       26-Jul-1995.) $)
    eu4 $p |- ( E! x ph <-> ( E. x ph /\
             A. x A. y ( ( ph /\ ps ) -> x = y ) ) ) $=
      ( weu wex wmo wa weq wi wal df-eu mo4 anbi2i bitri ) ACFACGZACHZIQABICDJK
      DLCLZIACMRSQABCDENOP $.
  $}

  $( Existential uniqueness implies uniqueness through reverse implication.
     (Contributed by NM, 22-Apr-1995.) $)
  euimmo $p |- ( A. x ( ph -> ps ) -> ( E! x ps -> E* x ph ) ) $=
    ( weu wmo wi wal eumo moim syl5 ) BCDBCEABFCGACEBCHABCIJ $.

  $( Add unique existential quantifiers to an implication.  Note the reversed
     implication in the antecedent.  (Contributed by NM, 19-Oct-2005.)  (Proof
     shortened by Andrew Salmon, 14-Jun-2011.) $)
  euim $p |- ( ( E. x ph /\ A. x ( ph -> ps ) ) -> ( E! x ps -> E! x ph ) ) $=
    ( wex wi wal wa weu wmo ax-1 euimmo anim12ii df-eu syl6ibr ) ACDZABECFZGBCH
    ZOACIZGACHOQOPROQJABCKLACMN $.

  ${
    moanimlem.1 $e |- ( ph -> ( E* x ps <-> E* x ( ph /\ ps ) ) ) $.
    moanimlem.2 $e |- ( E. x ( ph /\ ps ) -> ph ) $.
    $( Factor out the common proof skeleton of ~ moanimv and ~ moanim .
       (Contributed by NM, 3-Dec-2001.)  (Proof shortened by Wolf Lammen,
       24-Dec-2018.)  Factor out common proof lines.  (Revised by Wolf Lammen,
       8-Feb-2023.) $)
    moanimlem $p |- ( E* x ( ph /\ ps ) <-> ( ph -> E* x ps ) ) $=
      ( wa wmo wi biimprcd wex nexmo nsyl4 con1i moan ja impbii ) ABFZCGZABCGZH
      ASRDIASRRAQCJAREQCKLMBACNOP $.
  $}

  ${
    $d x ph $.
    $( Introduction of a conjunct into an at-most-one quantifier.  Version of
       ~ moanim requiring disjoint variables, but fewer axioms.  (Contributed
       by NM, 23-Mar-1995.)  Reduce axiom usage .  (Revised by Wolf Lammen,
       8-Feb-2023.) $)
    moanimv $p |- ( E* x ( ph /\ ps ) <-> ( ph -> E* x ps ) ) $=
      ( wa ibar mobidv simpl exlimiv moanimlem ) ABCABABDZCABEFJACABGHI $.
  $}

  ${
    moanim.1 $e |- F/ x ph $.
    $( Introduction of a conjunct into "at most one" quantifier.  For a version
       requiring disjoint variables, but fewer axioms, see ~ moanimv .
       (Contributed by NM, 3-Dec-2001.)  (Proof shortened by Wolf Lammen,
       24-Dec-2018.) $)
    moanim $p |- ( E* x ( ph /\ ps ) <-> ( ph -> E* x ps ) ) $=
      ( wa ibar mobid simpl exlimi moanimlem ) ABCABABEZCDABFGKACDABHIJ $.

    $( Introduction of a conjunct into unique existential quantifier.
       (Contributed by NM, 19-Feb-2005.)  (Proof shortened by Andrew Salmon,
       9-Jul-2011.)  (Proof shortened by Wolf Lammen, 24-Dec-2018.) $)
    euan $p |- ( E! x ( ph /\ ps ) <-> ( ph /\ E! x ps ) ) $=
      ( wa weu wex euex simpl exlimi syl ibar eubid biimprcd jcai biimpa impbii
      ) ABEZCFZABCFZESATSRCGARCHRACDABIJKATSABRCDABLMZNOATSUAPQ $.
  $}

  ${
    $d x ph $.
    $( Obsolete version of ~ moanimv as of 8-Feb-2023.  (Contributed by NM,
       23-Mar-1995.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    moanimvOLD $p |- ( E* x ( ph /\ ps ) <-> ( ph -> E* x ps ) ) $=
      ( nfv moanim ) ABCACDE $.
  $}

  $( Nested at-most-one quantifiers.  (Contributed by NM, 25-Jan-2006.) $)
  moanmo $p |- E* x ( ph /\ E* x ph ) $=
    ( wmo wa wi id nfmo1 moanim mpbir ancom mobii ) AABCZDZBCLADZBCZOLLELFLABAB
    GHIMNBALJKI $.

  $( Nested at-most-one and unique existential quantifiers.  (Contributed by
     NM, 25-Jan-2006.)  (Proof shortened by Wolf Lammen, 27-Dec-2018.) $)
  moaneu $p |- E* x ( ph /\ E! x ph ) $=
    ( wmo wa weu moanmo eumo anim2i moimi ax-mp ) AABCZDZBCAABEZDZBCABFNLBMKAAB
    GHIJ $.

  ${
    $d x ph $.
    $( Introduction of a conjunct into unique existential quantifier.
       (Contributed by NM, 23-Mar-1995.)  Reduce dependencies on axioms.
       (Revised by Wolf Lammen, 14-Jan-2023.) $)
    euanv $p |- ( E! x ( ph /\ ps ) <-> ( ph /\ E! x ps ) ) $=
      ( weu wex euex simpl exlimiv syl ibar eubidv biimprcd jcai biimpa impbii
      wa ) ABPZCDZABCDZPRASRQCEAQCFQACABGHIASRABQCABJKZLMASRTNO $.
  $}

  ${
    $d x ph $.
    $( Obsolete version of ~ euanv as of 14-Jan-2023.  (Contributed by NM,
       23-Mar-1995.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    euanvOLD $p |- ( E! x ( ph /\ ps ) <-> ( ph /\ E! x ps ) ) $=
      ( nfv euan ) ABCACDE $.
  $}

  ${
    $d x y $.  $d y ph $.  $d y ps $.
    $( "At most one" picks a variable value, eliminating an existential
       quantifier.  (Contributed by NM, 27-Jan-1997.)  (Proof shortened by Wolf
       Lammen, 17-Sep-2019.) $)
    mopick $p |- ( ( E* x ph /\ E. x ( ph /\ ps ) ) -> ( ph -> ps ) ) $=
      ( vy wmo wa wex wi weq wal df-mo sp aleximi sb56 sylbi syl6 syl5d exlimiv
      pm3.45 imp ) ACEZABFZCGZABHZUAACDIZHZCJZDGUCUDHZACDKUGUHDUGAUEUCBUFCLUGUC
      UEBFZCGZUEBHZUFUBUICAUEBSMUJUKCJUKBCDNUKCLOPQROT $.
  $}

  $( Existential uniqueness "picks" a variable value for which another wff is
     true.  If there is only one thing ` x ` such that ` ph ` is true, and
     there is also an ` x ` (actually the same one) such that ` ph ` and ` ps `
     are both true, then ` ph ` implies ` ps ` regardless of ` x ` .  This
     theorem can be useful for eliminating existential quantifiers in a
     hypothesis.  Compare Theorem *14.26 in [WhiteheadRussell] p. 192.
     (Contributed by NM, 10-Jul-1994.) $)
  eupick $p |- ( ( E! x ph /\ E. x ( ph /\ ps ) ) -> ( ph -> ps ) ) $=
    ( weu wmo wa wex wi eumo mopick sylan ) ACDACEABFCGABHACIABCJK $.

  $( Version of ~ eupick with closed formulas.  (Contributed by NM,
     6-Sep-2008.) $)
  eupicka $p |- ( ( E! x ph /\ E. x ( ph /\ ps ) ) -> A. x ( ph -> ps ) ) $=
    ( weu wa wex wi nfeu1 nfe1 nfan eupick alrimi ) ACDZABEZCFZEABGCMOCACHNCIJA
    BCKL $.

  $( Existential uniqueness "pick" showing wff equivalence.  (Contributed by
     NM, 25-Nov-1994.)  (Proof shortened by Wolf Lammen, 27-Dec-2018.) $)
  eupickb $p |- ( ( E! x ph /\ E! x ps /\ E. x ( ph /\ ps ) ) ->
               ( ph <-> ps ) ) $=
    ( weu wa wex w3a wi eupick 3adant2 exancom sylan2b 3adant1 impbid ) ACDZBCD
    ZABECFZGABOQABHPABCIJPQBAHZOQPBAECFRABCKBACILMN $.

  $( Theorem *14.26 in [WhiteheadRussell] p. 192.  (Contributed by Andrew
     Salmon, 11-Jul-2011.)  (Proof shortened by Wolf Lammen, 27-Dec-2018.) $)
  eupickbi $p |- ( E! x ph -> ( E. x ( ph /\ ps ) <-> A. x ( ph -> ps ) ) ) $=
    ( weu wa wex wi wal eupicka ex euex exintr syl5com impbid ) ACDZABECFZABGCH
    ZOPQABCIJOACFQPACKABCLMN $.

  $( "At most one" can show the existence of a common value.  In this case we
     can infer existence of conjunction from a conjunction of existence, and it
     is one way to achieve the converse of ~ 19.40 .  (Contributed by NM,
     5-Apr-2004.)  (Proof shortened by Andrew Salmon, 9-Jul-2011.) $)
  mopick2 $p |- ( ( E* x ph /\ E. x ( ph /\ ps ) /\ E. x ( ph /\ ch ) ) ->
                E. x ( ph /\ ps /\ ch ) ) $=
    ( wmo wa wex w3a nfmo1 nfe1 mopick ancld anim1d df-3an syl6ibr eximd 3impia
    nfan ) ADEZABFZDGZACFZDGABCHZDGSUAFZUBUCDSUADADITDJRUDUBTCFUCUDATCUDABABDKL
    MABCNOPQ $.

  ${
    moexex.1 $e |- F/ y ph $.
    $( "At most one" double quantification.  (Contributed by NM, 3-Dec-2001.)
       (Proof shortened by Wolf Lammen, 28-Dec-2018.) $)
    moexex $p |- ( ( E* x ph /\ A. x E* y ps ) -> E* y E. x ( ph /\ ps ) ) $=
      ( wmo wal wa wex wi nfmo1 nfa1 nfe1 nfmo nfim mopick ex com23 alrimd moim
      spsd syl6 exlimd nfex exsimpl exlimi nexmo nsyl4 con1i a1d pm2.61d1 imp
      wn ) ACFZBDFZCGZABHZCIZDFZUNACIZUPUSJZUNAVACACKUPUSCUOCLURCDUQCMNOUNAURBJ
      ZDGZVAUNAVBDADCENEUNURABUNURABJABCPQRSVCUOUSCURBDTUAUBUCUTUMUSUPUSUTURDIU
      TUSURUTDADCEUDABCUEUFURDUGUHUIUJUKUL $.
  $}

  ${
    $d y ph $.
    $( "At most one" double quantification.  (Contributed by NM,
       26-Jan-1997.) $)
    moexexv $p |- ( ( E* x ph /\ A. x E* y ps ) -> E* y E. x ( ph /\ ps ) ) $=
      ( nfv moexex ) ABCDADEF $.
  $}

  $( Double quantification with "at most one".  (Contributed by NM,
     3-Dec-2001.) $)
  2moex $p |- ( E* x E. y ph -> A. y E* x ph ) $=
    ( wex wmo nfe1 nfmo 19.8a moimi alrimi ) ACDZBEABECKCBACFGAKBACHIJ $.

  $( Double quantification with existential uniqueness.  (Contributed by NM,
     3-Dec-2001.)  (Proof shortened by Andrew Salmon, 9-Jul-2011.) $)
  2euex $p |- ( E! x E. y ph -> E. y E! x ph ) $=
    ( wex weu wmo wa df-eu excom nfe1 nfmo 19.8a moimi moeu sylib syl5bi impcom
    wi eximd sylbi ) ACDZBEUABDZUABFZGABEZCDZUABHUCUBUEUBABDZCDUCUEABCIUCUFUDCU
    ACBACJKUCABFUFUDRAUABACLMABNOSPQT $.

  $( Nested unique existential quantifier and at-most-one quantifier.
     (Contributed by NM, 3-Dec-2001.) $)
  2eumo $p |- ( E! x E* y ph -> E* x E! y ph ) $=
    ( weu wmo wi euimmo eumo mpg ) ACDZACEZFKBDJBEFBJKBGACHI $.

  $( Double existential uniqueness.  (Contributed by NM, 3-Dec-2001.) $)
  2eu2ex $p |- ( E! x E! y ph -> E. x E. y ph ) $=
    ( weu wex euex eximi syl ) ACDZBDIBEACEZBEIBFIJBACFGH $.

  $( A condition allowing to swap an existential quantifier and at at-most-one
     quantifier.  (Contributed by NM, 10-Apr-2004.) $)
  2moswap $p |- ( A. x E* y ph -> ( E* x E. y ph -> E* y E. x ph ) ) $=
    ( wmo wal wex wa nfe1 moexex expcom 19.8a pm4.71ri exbii mobii syl6ibr ) AC
    DBEZACFZBDZQAGZBFZCDZABFZCDRPUAQABCACHIJUBTCASBAQACKLMNO $.

  $( A condition allowing to swap an existential quanfitier and a unique
     existential quantifier.  (Contributed by NM, 10-Apr-2004.) $)
  2euswap $p |- ( A. x E* y ph -> ( E! x E. y ph -> E! y E. x ph ) ) $=
    ( wmo wal wex wa weu wi excomim a1i 2moswap anim12d df-eu 3imtr4g ) ACDBEZA
    CFZBFZQBDZGABFZCFZTCDZGQBHTCHPRUASUBRUAIPABCJKABCLMQBNTCNO $.

  $( Double existential uniqueness implies double unique existential
     quantification.  The converse does not hold.  (Contributed by NM,
     3-Dec-2001.)  (Proof shortened by Mario Carneiro, 22-Dec-2016.) $)
  2exeu $p |- ( ( E! x E. y ph /\ E! y E. x ph ) -> E! x E! y ph ) $=
    ( wex weu wa wmo eumo euex moimi syl 2euex anim12ci df-eu sylibr ) ACDZBEZA
    BDCEZFACEZBDZSBGZFSBEQUARTQPBGUAPBHSPBACIJKACBLMSBNO $.

  ${
    $d x y z w $.  $d z w ph $.
    $( Two ways of expressing "there exists at most one ordered pair
       ` <. x , y >. ` such that ` ph ( x , y ) ` holds.  Note that this is not
       equivalent to ` E* x E* y ph ` .  See also ~ 2mo .  This is the analogue
       of ~ 2eu4 for existential uniqueness.  (Contributed by Wolf Lammen,
       26-Oct-2019.)  Reduce dependencies on axioms.  (Revised by Wolf Lammen,
       3-Jan-2023.) $)
    2mo2 $p |- ( ( E* x E. y ph /\ E* y E. x ph ) <->
                          E. z E. w A. x A. y ( ph -> ( x = z /\ y = w ) ) ) $=
      ( wex weq wi wal wa wmo exdistrv jcab 2albii 19.26-2 19.23v albii anbi12i
      alcom df-mo bitri 3bitri 2exbii 3bitr4ri ) ACFZBDGZHZBIZABFZCEGZHZCIZJZEF
      DFUHDFZULEFZJAUFUJJHZCIBIZEFDFUEBKZUICKZJUHULDELUQUMDEUQAUFHZAUJHZJZCIBIU
      TCIZBIZVACIBIZJUMUPVBBCAUFUJMNUTVABCOVDUHVEULVCUGBAUFCPQVEVABIZCIULVABCSV
      FUKCAUJBPQUARUBUCURUNUSUOUEBDTUICETRUD $.
  $}

  ${
    $d x y z w $.  $d z w ph $.
    $( Two ways of expressing "there exists at most one ordered pair
       ` <. x , y >. ` such that ` ph ( x , y ) ` holds.  See also ~ 2mo2 .
       (Contributed by NM, 2-Feb-2005.)  (Revised by Mario Carneiro,
       17-Oct-2016.)  (Proof shortened by Wolf Lammen, 2-Nov-2019.) $)
    2mo $p |- ( E. z E. w A. x A. y ( ph -> ( x = z /\ y = w ) ) <->
              A. x A. y A. z A. w ( ( ph /\ [ z / x ] [ w / y ] ph ) ->
                                                      ( x = z /\ y = w ) ) ) $=
      ( weq wa wi wal wex wsb wmo nfmo1 wnf wtru nftru nfe1 a1i nfmodv nfv 2mo2
      mptru 19.8a spsbe sbimi mo3 biimpi 19.21bbi syl2ani sbcom2 sylbi anim12ii
      nfan alrimi alrimivv sylbir nfs1v nfsbv pm3.21 imim1d alimd com12 aleximi
      2nexaln 2sb8ev xchnxbi pm2.21 2alimi 2eximi 19.23bi pm2.61d1 impbii bitri
      wn alrot4 ) ABDFZCEFZGZHZCIZBIZEJZDJZAACEKZBDKZGZVRHZCIZBIZEIZDIZWGEIDICI
      BIWCWKWCACJZBLZABJZCLZGZWKABCDEUAWPWIDEWPWHBWMWOBWLBMWOBNOWNBCCPWNBNOABQR
      SUBUMWPWGCWMWOCWMCNOWLCBBPWLCNOACQRSUBWNCMUMWMWFVPWOVQAWMWLWLBDKZVPWEACUC
      WDWLBDACEUDUEWMWLWQGVPHZBDWMWRDIBIWLBDWLDTUFUGUHUIAWOWNWNCEKZVQWEABUCWEAB
      DKZCEKWSACEBDUJWTWNCEABDUDUEUKWOWNWSGVQHZCEWOXAEICIWNCEWNETUFUGUHUIULUNUN
      UOUPWKWEEJZDJZWCWJXBWBDWIWEWAEWEWIWAWEWHVTBWDBDUQWEWGVSCWDBDCACEUQURWEAWF
      VRWEAUSUTVAVAVBVCVCXCVNAVNZCIBIZWCWLBJXEXCABCVDABCDEAETADTVEVFXEWCEXEEJWC
      DXEWADEXDVSBCAVRVGVHVIVJVJUKVKVLWGDEBCVOVM $.
  $}

  ${
    $d z w ph $.  $d x y ps $.  $d x y z w $.
    2mos.1 $e |- ( ( x = z /\ y = w ) -> ( ph <-> ps ) ) $.
    $( Double "exists at most one", using implicit substitution.  (Contributed
       by NM, 10-Feb-2005.) $)
    2mos $p |- ( E. z E. w A. x A. y ( ph -> ( x = z /\ y = w ) ) <->
             A. x A. y A. z A. w ( ( ph /\ ps ) -> ( x = z /\ y = w ) ) ) $=
      ( weq wa wi wal wex wsb 2mo nfv sbrim wb expcom sbievw 2albii pm5.74ri
      pm5.74d bitr3i anbi2i imbi1i bitri ) ACEHZDFHZIZJDKCKFLELAADFMZCEMZIZUIJZ
      FKEKZDKCKABIZUIJZFKEKZDKCKACDEFNUNUQCDUMUPEFULUOUIUKBAUJBCEUGUJBUGUJJUGAJ
      ZDFMUGBJZUGADFUGDOPURUSDFUHUGABUGUHABQGRUBSUCUASUDUETTUF $.
  $}

  $( Double existential uniqueness.  This theorem shows a condition under which
     a "naive" definition matches the correct one.  (Contributed by NM,
     3-Dec-2001.)  (Proof shortened by Wolf Lammen, 23-Apr-2023.) $)
  2eu1 $p |- ( A. x E* y ph ->
        ( E! x E! y ph <-> ( E! x E. y ph /\ E! y E. x ph ) ) ) $=
    ( wmo wal weu wex wa wi 2eu2ex moeu albii euim sylan2b pm2.43b 2euswap syld
    ex syl jcad 2exeu impbid1 ) ACDZBEZACFZBFZACGZBFZABGCFZHUDUFUHUIUDUFUHUFUGB
    GZUDUFUHIZIABCJUJUDUKUDUJUGUEIZBEUKUCULBACKLUGUEBMNRSOZUDUFUHUIUMABCPQTABCU
    AUB $.

  $( Obsolete version of ~ 2eu1 as of 23-Apr-2023.  (Contributed by NM,
     3-Dec-2001.)  (Proof shortened by Wolf Lammen, 11-Nov-2019.)
     (New usage is discouraged.)  (Proof modification is discouraged.) $)
  2eu1OLD $p |- ( A. x E* y ph ->
        ( E! x E! y ph <-> ( E! x E. y ph /\ E! y E. x ph ) ) ) $=
    ( wmo wal weu wex wa 2eu2ex moeu albii euim syl5bi syl pm2.43b 2euswap syld
    wi ex jcad 2exeu impbid1 ) ACDZBEZACFZBFZACGZBFZABGCFZHUDUFUHUIUDUFUHUFUGBG
    ZUDUFUHRZRABCIUDUGUERZBEZUJUKUCULBACJKUJUMUKUGUEBLSMNOZUDUFUHUIUNABCPQTABCU
    AUB $.

  $( Double existential uniqueness.  (Contributed by NM, 3-Dec-2001.) $)
  2eu2 $p |- ( E! y E. x ph -> ( E! x E! y ph <-> E! x E. y ph ) ) $=
    ( wex weu wmo wal wi eumo 2moex 2eu1 simpl syl6bi 3syl 2exeu expcom impbid
    wa ) ABDZCEZACEBEZACDBEZTSCFACFBGZUAUBHSCIACBJUCUAUBTRUBABCKUBTLMNUBTUAABCO
    PQ $.

  $( Double existential uniqueness.  (Contributed by NM, 3-Dec-2001.)  (Proof
     shortened by Wolf Lammen, 23-Apr-2023.) $)
  2eu3 $p |- ( A. x A. y ( E* x ph \/ E* y ph ) ->
 ( ( E! x E! y ph /\ E! y E! x ph ) <-> ( E! x E. y ph /\ E! y E. x ph ) ) ) $=
    ( wmo wo wal weu wa wb nfmo1 19.31 albii nfal 19.32 bitri 2eu1 biimpd ancom
    wex 2exeu syl6ib jaoa ancomsd ancoms jca impbid1 sylbi ) ABDZACDZECFZBFZUHC
    FZUIBFZEZACGBGZABGCGZHZACSBGZABSCGZHZIUKULUIEZBFUNUJVABUHUICACJKLULUIBUHBCA
    BJMNOUNUQUTUNUPUOUTULUPUTUMUOULUPUSURHZUTULUPVBACBPQUSURRUAUMUOUTABCPQUBUCU
    TUOUPABCTUSURUPACBTUDUEUFUG $.

  $( Obsolete version of ~ 2eu3 as of 23-Apr-2023.  (Contributed by NM,
     3-Dec-2001.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  2eu3OLD $p |- ( A. x A. y ( E* x ph \/ E* y ph ) ->
 ( ( E! x E! y ph /\ E! y E! x ph ) <-> ( E! x E. y ph /\ E! y E. x ph ) ) ) $=
    ( wmo wo wal weu wa wex wb nfmo1 19.31 albii nfal 19.32 bitri wi 2eu1 2exeu
    biimpd ancom syl6ib adantld adantrd jaoi ancoms jca impbid1 sylbi ) ABDZACD
    ZECFZBFZUJCFZUKBFZEZACGBGZABGCGZHZACIBGZABICGZHZJUMUNUKEZBFUPULVCBUJUKCACKL
    MUNUKBUJBCABKNOPUPUSVBUNUSVBQUOUNURVBUQUNURVAUTHZVBUNURVDACBRTVAUTUAUBUCUOU
    QVBURUOUQVBABCRTUDUEVBUQURABCSVAUTURACBSUFUGUHUI $.

  ${
    $d x y z w $.  $d z w ph $.
    $( This theorem provides us with a definition of double existential
       uniqueness ("exactly one ` x ` and exactly one ` y ` ").  Naively one
       might think (incorrectly) that it could be defined by ` E! x E! y ph ` .
       See ~ 2eu1 for a condition under which the naive definition holds and
       ~ 2exeu for a one-way implication.  See ~ 2eu5 and ~ 2eu8 for alternate
       definitions.  (Contributed by NM, 3-Dec-2001.)  (Proof shortened by Wolf
       Lammen, 14-Sep-2019.) $)
    2eu4 $p |- ( ( E! x E. y ph /\ E! y E. x ph ) <->
      ( E. x E. y ph /\ E. z E. w A. x A. y ( ph -> ( x = z /\ y = w ) ) ) ) $=
      ( wex weu wa wmo weq wi wal df-eu excom anbi1i anbi12i anandi 2mo2 anbi2i
      bitri 3bitr2i ) ACFZBGZABFZCGZHUBBFZUBBIZHZUFUDCIZHZHUFUGUIHZHUFABDJCEJHK
      CLBLEFDFZHUCUHUEUJUBBMUEUDCFZUIHUJUDCMUMUFUIACBNOTPUFUGUIQUKULUFABCDERSUA
      $.

    $( An alternate definition of double existential uniqueness (see ~ 2eu4 ).
       A mistake sometimes made in the literature is to use ` E! x E! y ` to
       mean "exactly one ` x ` and exactly one ` y ` ".  (For example, see
       Proposition 7.53 of [TakeutiZaring] p. 53.)  It turns out that this is
       actually a weaker assertion, as can be seen by expanding out the formal
       definitions.  This theorem shows that the erroneous definition can be
       repaired by conjoining ` A. x E* y ph ` as an additional condition.  The
       correct definition apparently has never been published ( ` E* ` means
       "exists at most one").  (Contributed by NM, 26-Oct-2003.) $)
    2eu5 $p |- ( ( E! x E! y ph /\ A. x E* y ph ) <->
      ( E. x E. y ph /\ E. z E. w A. x A. y ( ph -> ( x = z /\ y = w ) ) ) ) $=
      ( weu wmo wal wa wex weq 2eu1 pm5.32ri eumo adantl 2moex syl pm4.71i 2eu4
      wi 3bitr2i ) ACFBFZACGBHZIACJZBFZABJZCFZIZUCIUHUDBJABDKCEKITCHBHEJDJIUCUB
      UHABCLMUHUCUHUFCGZUCUGUIUEUFCNOACBPQRABCDESUA $.
  $}

  ${
    $d x y z w $.  $d z w ph $.
    $( Two equivalent expressions for double existential uniqueness.
       (Contributed by NM, 2-Feb-2005.)  (Revised by Mario Carneiro,
       17-Oct-2016.)  (Proof shortened by Wolf Lammen, 2-Oct-2019.) $)
    2eu6 $p |- ( ( E! x E. y ph /\ E! y E. x ph ) <->
               E. z E. w A. x A. y ( ph <-> ( x = z /\ y = w ) ) ) $=
      ( wex weu wa weq wi wal wb 2eu4 imim2i sps exlimd syli wsb 2alimi 2eximi
      nfia1 nfa1 nfv simpl ax12v com12 spsd nfs1v sbequ1 imim2d al2imi sb6 2sb6
      simpr bitr3i syl6ib sylcom ancld 2albiim syl6ibr exlimi 2eximdv imp 2exsb
      biimpr sylibr biimp jca impbii bitri ) ACFZBGABFCGHVKBFZABDIZCEIZHZJZCKZB
      KZEFDFZHZAVOLZCKZBKZEFDFZABCDEMVTWDVLVSWDVLVRWCDEVKVRWCJBVQWBBUAVKVRVRVOA
      JZCKBKZHWCVKVRWFVKVRVMVKJZBKZWFVKVQWHBVQVKWHVKVQVMWHVQAVMCVPCUBZVMCUCVPAV
      MJCVOVMAVMVNUDNOPVKBDUEQUFUGVRWHVMACERZJZBKZWFVQWGWKBVQVKWJVMVQAWJCWIACEU
      HVPAWJJCAVPVNWJVOVNAVMVNUNNACEUIQOPUJUKWLWJBDRWFWJBDULABCDEUMUOUPUQURAVOB
      CUSUTVAVBVCWDVLVSWDWFEFDFVLWCWFDEWAWEBCAVOVESTABCDEVDVFWCVRDEWAVPBCAVOVGS
      TVHVIVJ $.
  $}

  $( Two equivalent expressions for double existential uniqueness.
     (Contributed by NM, 19-Feb-2005.) $)
  2eu7 $p |- ( ( E! x E. y ph /\ E! y E. x ph ) <->
             E! x E! y ( E. x ph /\ E. y ph ) ) $=
    ( wex weu wa nfe1 nfeu euan ancom eubii 3bitri 3bitr4ri ) ABDZCEZACDZFZBEOP
    BEZFNPFZCEZBEROFOPBNBCABGHITQBTPNFZCEPOFQSUACNPJKPNCACGIPOJLKROJM $.

  $( Two equivalent expressions for double existential uniqueness.  Curiously,
     we can put ` E! ` on either of the internal conjuncts but not both.  We
     can also commute ` E! x E! y ` using ~ 2eu7 .  (Contributed by NM,
     20-Feb-2005.) $)
  2eu8 $p |- ( E! x E! y ( E. x ph /\ E. y ph ) <->
                E! x E! y ( E! x ph /\ E. y ph ) ) $=
    ( wex wa 2eu2 pm5.32i nfeu1 nfeu euan ancom eubii nfe1 3bitri 3bitr4ri 2eu7
    weu 3bitr3ri ) ACDZBQZABQZCQZEZTABDZCQZEUASEZCQZBQZUDSECQBQTUBUEACBFGUBSEZB
    QUBTEUHUCUBSBUABCABHIJUGUIBUGSUAEZCQSUBEUIUFUJCUASKLSUACACMJSUBKNLTUBKOABCP
    R $.

  ${
    $d x y $.
    $( Two ways to express "exactly one thing exists".  To paraphrase the
       statement and explain the label: there Exists a Unique thing if and only
       if for All ` x ` , ` x ` Equals some given (and disjoint) ` y ` .  Both
       sides are false in set theory, see theorems ~ neutru and ~ dtru .
       (Contributed by NM, 5-Apr-2004.)  State the theorem using truth constant
       ` T. ` .  (Revised by BJ, 7-Oct-2022.)  Reduce axiom dependencies.
       (Revised by Wolf Lammen, 2-Mar-2023.) $)
    euae $p |- ( E! x T. <-> A. x x = y ) $=
      ( wtru weq wi wal wex wa extru biantrur hbaev 19.8w wn hbnaev alnex sylib
      weu con4i impbii trut albii exbii bitri eu3v 3bitr4ri ) CABDZEZAFZBGZCAGZ
      UIHUFAFZCAQUJUIAIJUKUKBGZUIUKULUKBABBKLUKULUKMZUMBFULMABBNUKBOPRSUKUHBUFU
      GAUFTUAUBUCCABUDUE $.

    $( Obsolete version of ~ euae as of 2-Mar-2023.  (Contributed by NM,
       5-Apr-2004.)  State the theorem using truth constant ` T. ` .  (Revised
       by BJ, 7-Oct-2022.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    euaeOLD $p |- ( E! x T. <-> A. x x = y ) $=
      ( wtru weu weq wb wal wex bicom tbtru bitr4i albii exbii nfae 19.9 3bitri
      eu6 ) CADCABEZFZAGZBHRAGZBHUACABQTUABSRASRCFRCRIRJKLMUABABBNOP $.

    $( Two ways to express "exactly one thing exists".  The left-hand side
       requires only one variable to express this.  Both sides are false in set
       theory, see theorem ~ dtru .  (Contributed by NM, 5-Apr-2004.)  (Proof
       shortened by BJ, 7-Oct-2022.) $)
    exists1 $p |- ( E! x x = x <-> A. x x = y ) $=
      ( weq weu wtru wal equid bitru eubii euae bitri ) AACZADEADABCAFLEALAGHIA
      BJK $.

    $( A condition implying that at least two things exist.  (Contributed by
       NM, 10-Apr-2004.)  (Proof shortened by Andrew Salmon, 9-Jul-2011.)
       Reduce axiom usage.  (Revised by Wolf Lammen, 4-Mar-2023.) $)
    exists2 $p |- ( ( E. x ph /\ E. x -. ph ) -> -. E! x x = x ) $=
      ( vy wex weq weu wal axc16nf nfrd com12 exists1 alex bicomi 3imtr4g con2d
      wn imp ) ABDZAPBDZBBEBFZPRTSRBCEBGZABGZTSPZUARUBUAABABCBHIJBCKUBUCABLMNOQ
      $.

    $( Obsolete version of ~ exists2 as of 4-Mar-2023.  (Contributed by NM,
       10-Apr-2004.)  (Proof shortened by Andrew Salmon, 9-Jul-2011.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    exists2OLD $p |- ( ( E. x ph /\ E. x -. ph ) -> -. E! x x = x ) $=
      ( vy wex wn weq weu nfeu1 nfa1 wi exists1 axc16 sylbi exlimd com12 syl6ib
      wal alex con2d imp ) ABDZAEBDZBBFZBGZEUAUDUBUAUDABQZUBEUDUAUEUDAUEBUCBHAB
      IUDBCFBQAUEJBCKABCLMNOABRPST $.
  $}


$(
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
  Other axiomatizations related to classical predicate calculus
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
$)


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Aristotelian logic: Assertic syllogisms
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  Model the Aristotelian assertic syllogisms using modern notation.  This
  section shows that the Aristotelian assertic syllogisms can be proven with
  our axioms of logic, and also provides generally useful theorems.

  In antiquity Aristotelian logic and Stoic logic (see ~ mptnan ) were the
  leading logical systems.  Aristotelian logic became the leading system in
  medieval Europe.  This section models this system (including later
  refinements).  Aristotle defined syllogisms very generally ("a discourse in
  which certain (specific) things having been supposed, something different
  from the things supposed results of necessity because these things are so")
  Aristotle, _Prior Analytics_ 24b18-20.  However, in _Prior Analytics_ he
  limits himself to categorical syllogisms that consist of three categorical
  propositions with specific structures.  The syllogisms are the valid subset
  of the possible combinations of these structures.  The medieval schools used
  vowels to identify the types of terms (a=all, e=none, i=some, and o=some are
  not), and named the different syllogisms with Latin words that had the vowels
  in the intended order.

  "There is a surprising amount of scholarly debate about how best to formalize
  Aristotle's syllogisms..." according to _Aristotle's Modal Proofs: Prior
  Analytics A8-22 in Predicate Logic_, Adriane Rini, Springer, 2011,
  ISBN 978-94-007-0049-9, page 28.  For example, Lukasiewicz believes it is
  important to note that "Aristotle does not introduce singular terms or
  premisses into his system".  Lukasiewicz also believes that Aristotelian
  syllogisms are predicates (having a true/false value), not inference rules:
  "The characteristic sign of an inference is the word 'therefore'... no
  syllogism is formulated by Aristotle primarily as an inference, but they are
  all implications."  Jan Lukasiewicz, _Aristotle's Syllogistic from the
  Standpoint of Modern Formal Logic_, Second edition, Oxford, 1957, page 1-2.
  Lukasiewicz devised a specialized prefix notation for representing
  Aristotelian syllogisms instead of using standard predicate logic notation.

  We instead translate each Aristotelian syllogism into an inference rule, and
  each rule is defined using standard predicate logic notation and predicates.
  The predicates are represented by wff variables that may depend on the
  quantified variable ` x ` .  Our translation is essentially identical to the
  one used in Rini page 18, Table 2 "Non-Modal Syllogisms in Lower Predicate
  Calculus (LPC)", which uses standard predicate logic with predicates.  Rini
  states, "the crucial point is that we capture the meaning Aristotle intends,
  and the method by which we represent that meaning is less important".  There
  are two differences: we make the existence criteria explicit, and we use
  ` ph ` , ` ps ` , and ` ch ` in the order they appear (a common Metamath
  convention).  Patzig also uses standard predicate logic notation and
  predicates (though he interprets them as conditional propositions, not as
  inference rules); see Gunther Patzig, _Aristotle's Theory of the Syllogism_
  second edition, 1963, English translation by Jonathan Barnes, 1968, page 38.
  Terms such as "all" and "some" are translated into predicate logic using the
  approach devised by Frege and Russell.  "Frege (and Russell) devised an
  ingenious procedure for regimenting binary quantifiers like "every" and
  "some" in terms of unary quantifiers like "everything" and "something": they
  formalized sentences of the form "Some A is B" and "Every A is B" as
  exists x (Ax and Bx) and all x (Ax implies Bx), respectively."
  "Quantifiers and Quantification", _Stanford Encyclopedia of Philosophy_,
  ~ http://plato.stanford.edu/entries/quantification/ .
  See _Principia Mathematica_ page 22 and *10 for more information
  (especially *10.3 and *10.26).

  Expressions of the form "no ` ph ` is ` ps ` " are consistently translated as
  ` A. x ( ph -> -. ps ) ` .  These can also be expressed as
  ` -. E. x ( ph /\ ps ) ` , per ~ alinexa .
  We translate "all ` ph ` is ` ps ` " to ` A. x ( ph -> ps ) ` ,
  "some ` ph ` is ` ps ` " to ` E. x ( ph /\ ps ) ` , and
  "some ` ph ` is not ` ps ` " to ` E. x ( ph /\ -. ps ) ` .
  It is traditional to use the singular form "is", not the plural form "are",
  in the generic expressions.  By convention the major premise is listed first.

  In traditional Aristotelian syllogisms the predicates have a restricted form
  ("x is a ..."); those predicates could be modeled in modern notation by more
  specific constructs such as ` x = A ` , ` x e. A ` , or ` x C_ A ` .  Here we
  use wff variables instead of specialized restricted forms.  This
  generalization makes the syllogisms more useful in more circumstances.  In
  addition, these expressions make it clearer that the syllogisms of
  Aristotelian logic are the forerunners of predicate calculus.  If we used
  restricted forms like ` x e. A ` instead, we would not only unnecessarily
  limit their use, but we would also need to use set and class axioms, making
  their relationship to predicate calculus less clear.  Using such specific
  constructs would also be anti-historical; Aristotle and others who directly
  followed his work focused on relating wholes to their parts, an approach now
  called part-whole theory.  The work of Cantor and Peano (over 2,000 years
  later) led to a sharper distinction between inclusion ( ` C_ ` ) and
  membership ( ` e. ` ); this distinction was not directly made in Aristotle's
  work.

  There are some widespread misconceptions about the existential assumptions
  made by Aristotle (aka "existential import").  Aristotle was not trying to
  develop something exactly corresponding to modern logic.  Aristotle devised
  "a companion-logic for science.  He relegates fictions like fairy godmothers
  and mermaids and unicorns to the realms of poetry and literature.  In his
  mind, they exist outside the ambit of science.  This is why he leaves no room
  for such nonexistent entities in his logic.  This is a thoughtful choice,
  not an inadvertent omission.  Technically, Aristotelian science is a search
  for definitions, where a definition is "a phrase signifying a thing's
  essence."  (Topics, I.5.102a37, Pickard-Cambridge.)...  Because non-existent
  entities cannot be anything, they do not, in Aristotle's mind, possess an
  essence...  This is why he leaves no place for fictional entities like
  goat-stags (or unicorns)."  Source: Louis F. Groarke, "Aristotle: Logic",
  section 7. (Existential Assumptions),
  _Internet Encyclopedia of Philosophy_ (A Peer-Reviewed Academic Resource),
  ~ http://www.iep.utm.edu/aris-log/ .
  Thus, some syllogisms have "extra" existence hypotheses that do not directly
  appear in Aristotle's original materials (since they were always assumed);
  they are added where they are needed.  This affects ~ barbari , ~ celaront ,
  ~ cesaro , ~ camestros , ~ felapton , ~ darapti , ~ calemos , ~ fesapo , and
  ~ bamalip .

  These are only the _assertic_ syllogisms.  Aristotle also defined modal
  syllogisms that deal with modal qualifiers such as "necessarily" and
  "possibly".  Historically, Aristotelian modal syllogisms were not as widely
  used.  For more about modal syllogisms in a modern context, see Rini as well
  as _Aristotle's Modal Syllogistic_ by Marko Malink, Harvard University Press,
  November 2013.  We do not treat them further here.

  Aristotelian logic is essentially the forerunner of predicate calculus (as
  well as set theory since it discusses membership in groups), while Stoic
  logic is essentially the forerunner of propositional calculus.

  The following twenty-four syllogisms (from ~ barbara to ~ bamalip ) are all
  proven from { ~ ax-mp , ~ ax-1 , ~ ax-2 , ~ ax-3 , ~ ax-gen , ~ ax-4 },
  which corresponds in the usual translation to modal logic (a universal (resp.
  existential) quantifier maps to necessity (resp. possibility)) to the weakest
  normal modal logic (K).  Some proofs could be shortened by using additionally
  ~ spi (inference form of ~ sp , which corresponds to the axiom (T) of modal
  logic), as demonstrated by ~ dariiALT , ~ barbariALT , ~ festinoALT ,
  ~ barocoALT , ~ daraptiALT .

$)

  $( Figure 1.  Aristotelian syllogisms are grouped by "figures", which does
     not matter for our purposes but is a reasonable way to order them. $)

  ${
    $( Major premise for the Aristotelian syllogism "Barbara", e.g., "All men
       are mortal".  By convention, the major premise is first. $)
    barbara.maj $e |- A. x ( ph -> ps ) $.
    $( Minor premise for Barbara, e.g., "Socrates is a man". $)
    barbara.min $e |- A. x ( ch -> ph ) $.
    $( "Barbara", one of the fundamental syllogisms of Aristotelian logic.  All
       ` ph ` is ` ps ` , and all ` ch ` is ` ph ` , therefore all ` ch ` is
       ` ps ` .  In Aristotelian notation, AAA-1:  MaP and SaM therefore SaP.
       For example, given "All men are mortal" and "Socrates is a man", we can
       prove "Socrates is mortal".  If H is the set of men, M is the set of
       mortal beings, and S is Socrates, these word phrases can be represented
       as ` A. x ( x e. H -> x e. M ) ` (all men are mortal) and
       ` A. x ( x = S -> x e. H ) ` (Socrates is a man) therefore
       ` A. x ( x = S -> x e. M ) ` (Socrates is mortal).  Russell and
       Whitehead note that "the syllogism in Barbara is derived from
       [[ ~ syl ]" (quote after Theorem *2.06 of [WhiteheadRussell] p. 101).
       Most of the proof is in ~ alsyl .  There are a legion of sources for
       Barbara, including ~ http://www.friesian.com/aristotl.htm ,
       ~ http://plato.stanford.edu/entries/aristotle-logic/ , and
       ~ https://en.wikipedia.org/wiki/Syllogism .  (Contributed by David A.
       Wheeler, 24-Aug-2016.) $)
    barbara $p |- A. x ( ch -> ps ) $=
      ( wi wal alsyl mp2an ) CAGDHABGDHCBGDHFECABDIJ $.
  $}

  ${
    $( Major premise for the Aristotelian syllogism "Celarent", e.g., "No
       reptiles have fur". $)
    celarent.maj $e |- A. x ( ph -> -. ps ) $.
    $( Minor premise for Celarent, e.g., "All snakes are reptiles". $)
    celarent.min $e |- A. x ( ch -> ph ) $.
    $( "Celarent", one of the syllogisms of Aristotelian logic.  No ` ph ` is
       ` ps ` , and all ` ch ` is ` ph ` , therefore no ` ch ` is ` ps ` .
       Instance of ~ barbara .  In Aristotelian notation, EAE-1:  MeP and SaM
       therefore SeP. For example, given the "No reptiles have fur" and "All
       snakes are reptiles", therefore "No snakes have fur".  Example from
       ~ https://en.wikipedia.org/wiki/Syllogism .  (Contributed by David A.
       Wheeler, 24-Aug-2016.) $)
    celarent $p |- A. x ( ch -> -. ps ) $=
      ( wn barbara ) ABGCDEFH $.
  $}

  ${
    $( Major premise for the Aristotelian syllogism "Darii", e.g., "All rabbits
       have fur". $)
    darii.maj $e |- A. x ( ph -> ps ) $.
    $( Minor premise for Darii, e.g., "Some pets are rabbits". $)
    darii.min $e |- E. x ( ch /\ ph ) $.
    $( "Darii", one of the syllogisms of Aristotelian logic.  All ` ph ` is
       ` ps ` , and some ` ch ` is ` ph ` , therefore some ` ch ` is ` ps ` .
       In Aristotelian notation, AII-1:  MaP and SiM therefore SiP. For
       example, given "All rabbits have fur" and "Some pets are rabbits",
       therefore "Some pets have fur".  Example from
       ~ https://en.wikipedia.org/wiki/Syllogism .  See ~ dariiALT for a
       shorter proof requiring more axioms.  (Contributed by David A. Wheeler,
       24-Aug-2016.)  Reduce dependencies on axioms.  (Revised by BJ,
       16-Sep-2022.) $)
    darii $p |- E. x ( ch /\ ps ) $=
      ( wa wi wal wex id anim2d alimi ax-mp exim mp2 ) CAGZCBGZHZDIZQDJRDJABHZD
      ITEUASDUAABCUAKLMNFQRDOP $.

    $( Alternate proof of ~ darii , shorter but using more axioms.  This shows
       how the use of ~ spi may shorten some proofs of the Aristotelian
       syllogisms, even though this adds axiom dependencies.  Note that ~ spi
       is the inference associated with ~ sp , which corresponds to the axiom
       (T) of modal logic.  (Contributed by David A. Wheeler, 27-Aug-2016.)
       Added precisions on axiom usage.  (Revised by BJ, 27-Sep-2022.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    dariiALT $p |- E. x ( ch /\ ps ) $=
      ( wa wi spi anim2i eximii ) CAGCBGDFABCABHDEIJK $.
  $}

  ${
    $( Major premise for the Aristotelian syllogism "Ferio" ("Ferioque"), e.g.,
       "No homework is fun". $)
    ferio.maj $e |- A. x ( ph -> -. ps ) $.
    $( Minor premise for Ferio, e.g., "Some reading is homework". $)
    ferio.min $e |- E. x ( ch /\ ph ) $.
    $( "Ferio" ("Ferioque"), one of the syllogisms of Aristotelian logic.  No
       ` ph ` is ` ps ` , and some ` ch ` is ` ph ` , therefore some ` ch ` is
       not ` ps ` .  Instance of ~ darii .  In Aristotelian notation, EIO-1:
       MeP and SiM therefore SoP. For example, given "No homework is fun" and
       "Some reading is homework", therefore "Some reading is not fun".  This
       is essentially a logical axiom in Aristotelian logic.  Example from
       ~ https://en.wikipedia.org/wiki/Syllogism .  (Contributed by David A.
       Wheeler, 24-Aug-2016.) $)
    ferio $p |- E. x ( ch /\ -. ps ) $=
      ( wn darii ) ABGCDEFH $.
  $}

  ${
    barbarilem.min $e |- E. x ph $.
    barbarilem.maj $e |- A. x ( ph -> ps ) $.
    $( Lemma for ~ barbari and the other Aristotelian syllogisms with
       existential assumption.  (Contributed by BJ, 16-Sep-2022.) $)
    barbarilem $p |- E. x ( ph /\ ps ) $=
      ( wi wal wex wa exintr mp2 ) ABFCGACHABICHEDABCJK $.
  $}

  ${
    $( Major premise for the Aristotelian syllogism "Barbari", e.g., "All men
       are mortal". $)
    barbari.maj $e |- A. x ( ph -> ps ) $.
    $( Minor premise for Barbari, e.g., "All Greeks are men". $)
    barbari.min $e |- A. x ( ch -> ph ) $.
    $( Existence premise for Barbari, e.g., "Greeks exist". $)
    barbari.e $e |- E. x ch $.
    $( "Barbari", one of the syllogisms of Aristotelian logic.  All ` ph ` is
       ` ps ` , all ` ch ` is ` ph ` , and some ` ch ` exist, therefore some
       ` ch ` is ` ps ` .  In Aristotelian notation, AAI-1:  MaP and SaM
       therefore SiP. For example, given "All men are mortal", "All Greeks are
       men", and "Greeks exist", therefore "Some Greeks are mortal".  Note the
       existence hypothesis (to prove the "some" in the conclusion).  Example
       from ~ https://en.wikipedia.org/wiki/Syllogism .  (Contributed by David
       A. Wheeler, 27-Aug-2016.)  Reduce dependencies on axioms.  (Revised by
       BJ, 16-Sep-2022.) $)
    barbari $p |- E. x ( ch /\ ps ) $=
      ( barbara barbarilem ) CBDGABCDEFHI $.

    $( Alternate proof of ~ barbari , shorter but using more axioms.  See
       comment of ~ dariiALT .  (Contributed by David A. Wheeler, 27-Aug-2016.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    barbariALT $p |- E. x ( ch /\ ps ) $=
      ( wa wi barbara spi ancli eximii ) CCBHDGCBCBIDABCDEFJKLM $.
  $}

  ${
    $( Major premise for the Aristotelian syllogism "Celaront", e.g., "No
       reptiles have fur". $)
    celaront.maj $e |- A. x ( ph -> -. ps ) $.
    $( Minor premise for Celaront, e.g., "All Snakes are reptiles". $)
    celaront.min $e |- A. x ( ch -> ph ) $.
    $( Existence premise for Celaront, e.g., "Snakes exist". $)
    celaront.e $e |- E. x ch $.
    $( "Celaront", one of the syllogisms of Aristotelian logic.  No ` ph ` is
       ` ps ` , all ` ch ` is ` ph ` , and some ` ch ` exist, therefore some
       ` ch ` is not ` ps ` .  Instance of ~ barbari .  In Aristotelian
       notation, EAO-1:  MeP and SaM therefore SoP. For example, given "No
       reptiles have fur", "All snakes are reptiles", and "Snakes exist", prove
       "Some snakes have no fur".  Note the existence hypothesis.  Example from
       ~ https://en.wikipedia.org/wiki/Syllogism .  (Contributed by David A.
       Wheeler, 27-Aug-2016.) $)
    celaront $p |- E. x ( ch /\ -. ps ) $=
      ( wn barbari ) ABHCDEFGI $.
  $}

  $( Figure 2 $)

  ${
    $( Major premise for the Aristotelian syllogism "Cesare" $)
    cesare.maj $e |- A. x ( ph -> -. ps ) $.
    $( Minor premise for Cesare $)
    cesare.min $e |- A. x ( ch -> ps ) $.
    $( "Cesare", one of the syllogisms of Aristotelian logic.  No ` ph ` is
       ` ps ` , and all ` ch ` is ` ps ` , therefore no ` ch ` is ` ph ` .  In
       Aristotelian notation, EAE-2:  PeM and SaM therefore SeP. Related to
       ~ celarent .  (Contributed by David A. Wheeler, 27-Aug-2016.)  Reduce
       dependencies on axioms.  (Revised by BJ, 16-Sep-2022.) $)
    cesare $p |- A. x ( ch -> -. ph ) $=
      ( wn wi wal con2 alimi ax-mp celarent ) BACDABGHZDIBAGHZDIENODABJKLFM $.

    $( Obsolete proof of ~ cesare as of 27-Sep-2022.  (Contributed by David A.
       Wheeler, 27-Aug-2016.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    cesareOLD $p |- A. x ( ch -> -. ph ) $=
      ( wn wi spi nsyl3 ax-gen ) CAGHDABCABGHDEICBHDFIJK $.
  $}

  ${
    $( Major premise for the Aristotelian syllogism "Camestres" $)
    camestres.maj $e |- A. x ( ph -> ps ) $.
    $( Minor premise for Camestres $)
    camestres.min $e |- A. x ( ch -> -. ps ) $.
    $( "Camestres", one of the syllogisms of Aristotelian logic.  All ` ph ` is
       ` ps ` , and no ` ch ` is ` ps ` , therefore no ` ch ` is ` ph ` .  In
       Aristotelian notation, AEE-2:  PaM and SeM therefore SeP. (Contributed
       by David A. Wheeler, 28-Aug-2016.)  Reduce dependencies on axioms.
       (Revised by BJ, 16-Sep-2022.) $)
    camestres $p |- A. x ( ch -> -. ph ) $=
      ( wn wi wal con3 alimi ax-mp celarent ) BGZACDABHZDINAGHZDIEOPDABJKLFM $.

    $( Obsolete proof of ~ camestres as of 27-Sep-2022.  (Contributed by David
       A. Wheeler, 27-Aug-2016.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    camestresOLD $p |- A. x ( ch -> -. ph ) $=
      ( wn wi spi nsyl ax-gen ) CAGHDCBACBGHDFIABHDEIJK $.
  $}

  ${
    $( Major premise for the Aristotelian syllogism "Festino" $)
    festino.maj $e |- A. x ( ph -> -. ps ) $.
    $( Minor premise for Festino $)
    festino.min $e |- E. x ( ch /\ ps ) $.
    $( "Festino", one of the syllogisms of Aristotelian logic.  No ` ph ` is
       ` ps ` , and some ` ch ` is ` ps ` , therefore some ` ch ` is not
       ` ph ` .  In Aristotelian notation, EIO-2:  PeM and SiM therefore SoP.
       (Contributed by David A. Wheeler, 25-Nov-2016.)  Reduce dependencies on
       axioms.  (Revised by BJ, 16-Sep-2022.) $)
    festino $p |- E. x ( ch /\ -. ph ) $=
      ( wa wn wi wal wex con2 anim2d alimi ax-mp exim mp2 ) CBGZCAHZGZIZDJZRDKT
      DKABHIZDJUBEUCUADUCBSCABLMNOFRTDPQ $.

    $( Alternate proof of ~ festino , shorter but using more axioms.  See
       comment of ~ dariiALT .  (Contributed by David A. Wheeler, 27-Aug-2016.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    festinoALT $p |- E. x ( ch /\ -. ph ) $=
      ( wa wn wi spi con2i anim2i eximii ) CBGCAHZGDFBNCABABHIDEJKLM $.
  $}

  ${
    $( Major premise for the Aristotelian syllogism "Baroco" $)
    baroco.maj $e |- A. x ( ph -> ps ) $.
    $( Minor premise for Baroco $)
    baroco.min $e |- E. x ( ch /\ -. ps ) $.
    $( "Baroco", one of the syllogisms of Aristotelian logic.  All ` ph ` is
       ` ps ` , and some ` ch ` is not ` ps ` , therefore some ` ch ` is not
       ` ph ` .  In Aristotelian notation, AOO-2:  PaM and SoM therefore SoP.
       For example, "All informative things are useful", "Some websites are not
       useful", therefore "Some websites are not informative".  (Contributed by
       David A. Wheeler, 28-Aug-2016.)  Reduce dependencies on axioms.
       (Revised by BJ, 16-Sep-2022.) $)
    baroco $p |- E. x ( ch /\ -. ph ) $=
      ( wn wa wi wal wex con3 anim2d alimi ax-mp exim mp2 ) CBGZHZCAGZHZIZDJZSD
      KUADKABIZDJUCEUDUBDUDRTCABLMNOFSUADPQ $.

    $( Alternate proof of ~ festino , shorter but using more axioms.  See
       comment of ~ dariiALT .  (Contributed by David A. Wheeler, 27-Aug-2016.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    barocoALT $p |- E. x ( ch /\ -. ph ) $=
      ( wn wa wi spi con3i anim2i eximii ) CBGZHCAGZHDFNOCABABIDEJKLM $.
  $}

  ${
    $( Major premise for the Aristotelian syllogism "Cesaro" $)
    cesaro.maj $e |- A. x ( ph -> -. ps ) $.
    $( Minor premise for Cesaro $)
    cesaro.min $e |- A. x ( ch -> ps ) $.
    $( Existence premise for Cesaro $)
    cesaro.e $e |- E. x ch $.
    $( "Cesaro", one of the syllogisms of Aristotelian logic.  No ` ph ` is
       ` ps ` , all ` ch ` is ` ps ` , and ` ch ` exist, therefore some ` ch `
       is not ` ph ` .  In Aristotelian notation, EAO-2:  PeM and SaM therefore
       SoP. (Contributed by David A. Wheeler, 28-Aug-2016.)  Reduce
       dependencies on axioms.  (Revised by BJ, 16-Sep-2022.) $)
    cesaro $p |- E. x ( ch /\ -. ph ) $=
      ( wn cesare barbarilem ) CAHDGABCDEFIJ $.

    $( Obsolete proof of ~ cesaro as of 27-Sep-2022.  (Contributed by David A.
       Wheeler, 27-Aug-2016.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    cesaroOLD $p |- E. x ( ch /\ -. ph ) $=
      ( wn wa wi spi nsyl3 ancli eximii ) CCAHZIDGCOABCABHJDEKCBJDFKLMN $.
  $}

  ${
    $( Major premise for the Aristotelian syllogism "Camestros" $)
    camestros.maj $e |- A. x ( ph -> ps ) $.
    $( Minor premise for Camestros $)
    camestros.min $e |- A. x ( ch -> -. ps ) $.
    $( Existence premise for Camestros $)
    camestros.e $e |- E. x ch $.
    $( "Camestros", one of the syllogisms of Aristotelian logic.  All ` ph ` is
       ` ps ` , no ` ch ` is ` ps ` , and ` ch ` exist, therefore some ` ch `
       is not ` ph ` .  In Aristotelian notation, AEO-2:  PaM and SeM therefore
       SoP. For example, "All horses have hooves", "No humans have hooves", and
       humans exist, therefore "Some humans are not horses".  (Contributed by
       David A. Wheeler, 28-Aug-2016.)  Reduce dependencies on axioms.
       (Revised by BJ, 16-Sep-2022.) $)
    camestros $p |- E. x ( ch /\ -. ph ) $=
      ( wn camestres barbarilem ) CAHDGABCDEFIJ $.

    $( Obsolete proof of ~ camestros as of 27-Sep-2022.  (Contributed by David
       A. Wheeler, 27-Aug-2016.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    camestrosOLD $p |- E. x ( ch /\ -. ph ) $=
      ( wn wa wi spi nsyl ancli eximii ) CCAHZIDGCOCBACBHJDFKABJDEKLMN $.
  $}

  $( Figure 3 $)

  ${
    $( Major premise for the Aristotelian syllogism "Datisi" $)
    datisi.maj $e |- A. x ( ph -> ps ) $.
    $( Minor premise for Datisi $)
    datisi.min $e |- E. x ( ph /\ ch ) $.
    $( "Datisi", one of the syllogisms of Aristotelian logic.  All ` ph ` is
       ` ps ` , and some ` ph ` is ` ch ` , therefore some ` ch ` is ` ps ` .
       In Aristotelian notation, AII-3:  MaP and MiS therefore SiP.
       (Contributed by David A. Wheeler, 28-Aug-2016.)  Shorten and reduce
       dependencies on axioms.  (Revised by BJ, 16-Sep-2022.) $)
    datisi $p |- E. x ( ch /\ ps ) $=
      ( wa wex exancom mpbi darii ) ABCDEACGDHCAGDHFACDIJK $.

    $( Obsolete proof of ~ datisi as of 16-Sep-2022.  (Contributed by David A.
       Wheeler, 27-Aug-2016.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    datisiOLD $p |- E. x ( ch /\ ps ) $=
      ( wa simpr wi spi adantr jca eximii ) ACGZCBGDFNCBACHABCABIDEJKLM $.
  $}

  ${
    $( Major premise for the Aristotelian syllogism "Disamis" $)
    disamis.maj $e |- E. x ( ph /\ ps ) $.
    $( Minor premise for Disamis $)
    disamis.min $e |- A. x ( ph -> ch ) $.
    $( "Disamis", one of the syllogisms of Aristotelian logic.  Some ` ph ` is
       ` ps ` , and all ` ph ` is ` ch ` , therefore some ` ch ` is ` ps ` .
       In Aristotelian notation, IAI-3:  MiP and MaS therefore SiP.
       (Contributed by David A. Wheeler, 28-Aug-2016.)  Reduce dependencies on
       axioms.  (Revised by BJ, 16-Sep-2022.) $)
    disamis $p |- E. x ( ch /\ ps ) $=
      ( wa wex datisi exancom mpbi ) BCGDHCBGDHACBDFEIBCDJK $.

    $( Obsolete proof of ~ disamis as of 27-Sep-2022.  (Contributed by David A.
       Wheeler, 27-Aug-2016.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    disamisOLD $p |- E. x ( ch /\ ps ) $=
      ( wa wi spi anim1i eximii ) ABGCBGDEACBACHDFIJK $.
  $}

  ${
    $( Major premise for the Aristotelian syllogism "Ferison" $)
    ferison.maj $e |- A. x ( ph -> -. ps ) $.
    $( Minor premise for Ferison $)
    ferison.min $e |- E. x ( ph /\ ch ) $.
    $( "Ferison", one of the syllogisms of Aristotelian logic.  No ` ph ` is
       ` ps ` , and some ` ph ` is ` ch ` , therefore some ` ch ` is not
       ` ps ` .  Instance of ~ datisi .  In Aristotelian notation, EIO-3:  MeP
       and MiS therefore SoP. (Contributed by David A. Wheeler,
       28-Aug-2016.) $)
    ferison $p |- E. x ( ch /\ -. ps ) $=
      ( wn datisi ) ABGCDEFH $.
  $}

  ${
    $( Major premise for the Aristotelian syllogism "Bocardo" $)
    bocardo.maj $e |- E. x ( ph /\ -. ps ) $.
    $( Minor premise for Bocardo $)
    bocardo.min $e |- A. x ( ph -> ch ) $.
    $( "Bocardo", one of the syllogisms of Aristotelian logic.  Some ` ph ` is
       not ` ps ` , and all ` ph ` is ` ch ` , therefore some ` ch ` is not
       ` ps ` .  Instance of ~ disamis .  In Aristotelian notation, OAO-3:  MoP
       and MaS therefore SoP. For example, "Some cats have no tails", "All cats
       are mammals", therefore "Some mammals have no tails".  (Contributed by
       David A. Wheeler, 28-Aug-2016.) $)
    bocardo $p |- E. x ( ch /\ -. ps ) $=
      ( wn disamis ) ABGCDEFH $.
  $}

  ${
    $( Major premise for the Aristotelian syllogism "Darapti" $)
    darapti.maj $e |- A. x ( ph -> ps ) $.
    $( Minor premise for Darapti $)
    darapti.min $e |- A. x ( ph -> ch ) $.
    $( Existence premise for Darapti $)
    darapti.e $e |- E. x ph $.
    $( "Darapti", one of the syllogisms of Aristotelian logic.  All ` ph ` is
       ` ps ` , all ` ph ` is ` ch ` , and some ` ph ` exist, therefore some
       ` ch ` is ` ps ` .  In Aristotelian notation, AAI-3:  MaP and MaS
       therefore SiP. For example, "All squares are rectangles" and "All
       squares are rhombuses", therefore "Some rhombuses are rectangles".
       (Contributed by David A. Wheeler, 28-Aug-2016.)  Reduce dependencies on
       axioms.  (Revised by BJ, 16-Sep-2022.) $)
    darapti $p |- E. x ( ch /\ ps ) $=
      ( wa wi wal wex id alanimi mp2an pm3.43 alimi ax-mp exim mp2 ) ACBHZIZDJZ
      ADKTDKACIZABIZHZDJZUBUCDJUDDJUFFEUCUDUEDUELMNUEUADACBOPQGATDRS $.

    $( Alternate proof of ~ darapti , shorter but using more axioms.  See
       comment of ~ dariiALT .  (Contributed by David A. Wheeler, 27-Aug-2016.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    daraptiALT $p |- E. x ( ch /\ ps ) $=
      ( wa wi spi jca eximii ) ACBHDGACBACIDFJABIDEJKL $.
  $}

  ${
    $( Major premise for the Aristotelian syllogism "Felapton" $)
    felapton.maj $e |- A. x ( ph -> -. ps ) $.
    $( Minor premise for Felapton $)
    felapton.min $e |- A. x ( ph -> ch ) $.
    $( Existence premise for Felapton $)
    felapton.e $e |- E. x ph $.
    $( "Felapton", one of the syllogisms of Aristotelian logic.  No ` ph ` is
       ` ps ` , all ` ph ` is ` ch ` , and some ` ph ` exist, therefore some
       ` ch ` is not ` ps ` .  Instance of ~ darapti .  In Aristotelian
       notation, EAO-3:  MeP and MaS therefore SoP. For example, "No flowers
       are animals" and "All flowers are plants", therefore "Some plants are
       not animals".  (Contributed by David A. Wheeler, 28-Aug-2016.) $)
    felapton $p |- E. x ( ch /\ -. ps ) $=
      ( wn darapti ) ABHCDEFGI $.
  $}

  $( Figure 4 $)

  ${
    $( Major premise for the Aristotelian syllogism "Calemes" $)
    calemes.maj $e |- A. x ( ph -> ps ) $.
    $( Minor premise for Calemes $)
    calemes.min $e |- A. x ( ps -> -. ch ) $.
    $( "Calemes", one of the syllogisms of Aristotelian logic.  All ` ph ` is
       ` ps ` , and no ` ps ` is ` ch ` , therefore no ` ch ` is ` ph ` .  In
       Aristotelian notation, AEE-4:  PaM and MeS therefore SeP. (Contributed
       by David A. Wheeler, 28-Aug-2016.)  Reduce dependencies on axioms.
       (Revised by BJ, 16-Sep-2022.) $)
    calemes $p |- A. x ( ch -> -. ph ) $=
      ( wn wi wal con2 alimi ax-mp camestres ) ABCDEBCGHZDICBGHZDIFNODBCJKLM $.

    $( Obsolete proof of ~ calemes as of 27-Sep-2022.  (Contributed by David A.
       Wheeler, 27-Aug-2016.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    calemesOLD $p |- A. x ( ch -> -. ph ) $=
      ( wn wi spi con2i nsyl ax-gen ) CAGHDCBABCBCGHDFIJABHDEIKL $.
  $}

  ${
    $( Major premise for the Aristotelian syllogism "Dimatis" $)
    dimatis.maj $e |- E. x ( ph /\ ps ) $.
    $( Minor premise for Dimatis $)
    dimatis.min $e |- A. x ( ps -> ch ) $.
    $( "Dimatis", one of the syllogisms of Aristotelian logic.  Some ` ph ` is
       ` ps ` , and all ` ps ` is ` ch ` , therefore some ` ch ` is ` ph ` .
       In Aristotelian notation, IAI-4:  PiM and MaS therefore SiP. For
       example, "Some pets are rabbits", "All rabbits have fur", therefore
       "Some fur bearing animals are pets".  Like ~ darii with positions
       interchanged.  (Contributed by David A. Wheeler, 28-Aug-2016.)  Shorten
       and reduce dependencies on axioms.  (Revised by BJ, 16-Sep-2022.) $)
    dimatis $p |- E. x ( ch /\ ph ) $=
      ( wa wex darii exancom mpbi ) ACGDHCAGDHBCADFEIACDJK $.

    $( Obsolete proof of ~ dimatis as of 16-Sep-2022.  (Contributed by David A.
       Wheeler, 27-Aug-2016.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    dimatisOLD $p |- E. x ( ch /\ ph ) $=
      ( wa wi spi adantl simpl jca eximii ) ABGZCAGDENCABCABCHDFIJABKLM $.
  $}

  ${
    $( Major premise for the Aristotelian syllogism "Fresison" $)
    fresison.maj $e |- A. x ( ph -> -. ps ) $.
    $( Minor premise for Fresison $)
    fresison.min $e |- E. x ( ps /\ ch ) $.
    $( "Fresison", one of the syllogisms of Aristotelian logic.  No ` ph ` is
       ` ps ` (PeM), and some ` ps ` is ` ch ` (MiS), therefore some ` ch ` is
       not ` ph ` (SoP).  In Aristotelian notation, EIO-4:  PeM and MiS
       therefore SoP. (Contributed by David A. Wheeler, 28-Aug-2016.)  Shorten
       and reduce dependencies on axioms.  (Revised by BJ, 16-Sep-2022.) $)
    fresison $p |- E. x ( ch /\ -. ph ) $=
      ( wa wex exancom mpbi festino ) ABCDEBCGDHCBGDHFBCDIJK $.

    $( Obsolete proof of ~ fresison as of 16-Sep-2022.  (Contributed by David
       A. Wheeler, 27-Aug-2016.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    fresisonOLD $p |- E. x ( ch /\ -. ph ) $=
      ( wa wn simpr wi spi con2i adantr jca eximii ) BCGZCAHZGDFPCQBCIBQCABABHJ
      DEKLMNO $.
  $}

  ${
    $( Major premise for the Aristotelian syllogism "Calemos" $)
    calemos.maj $e |- A. x ( ph -> ps ) $.
    $( Minor premise for Calemos $)
    calemos.min $e |- A. x ( ps -> -. ch ) $.
    $( Existence premise for Calemos $)
    calemos.e $e |- E. x ch $.
    $( "Calemos", one of the syllogisms of Aristotelian logic.  All ` ph ` is
       ` ps ` (PaM), no ` ps ` is ` ch ` (MeS), and ` ch ` exist, therefore
       some ` ch ` is not ` ph ` (SoP).  In Aristotelian notation, AEO-4:  PaM
       and MeS therefore SoP. (Contributed by David A. Wheeler, 28-Aug-2016.)
       Shorten and reduce dependencies on axioms.  (Revised by BJ,
       16-Sep-2022.) $)
    calemos $p |- E. x ( ch /\ -. ph ) $=
      ( wn calemes barbarilem ) CAHDGABCDEFIJ $.

    $( Obsolete proof of ~ calemos as of 16-Sep-2022.  (Contributed by David A.
       Wheeler, 27-Aug-2016.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    calemosOLD $p |- E. x ( ch /\ -. ph ) $=
      ( wn wa wi spi con2i nsyl ancli eximii ) CCAHZIDGCPCBABCBCHJDFKLABJDEKMNO
      $.
  $}

  ${
    $( Major premise for the Aristotelian syllogism "Fesapo" $)
    fesapo.maj $e |- A. x ( ph -> -. ps ) $.
    $( Minor premise for Fesapo $)
    fesapo.min $e |- A. x ( ps -> ch ) $.
    $( Existence premise for Fesapo $)
    fesapo.e $e |- E. x ps $.
    $( "Fesapo", one of the syllogisms of Aristotelian logic.  No ` ph ` is
       ` ps ` , all ` ps ` is ` ch ` , and ` ps ` exist, therefore some ` ch `
       is not ` ph ` .  In Aristotelian notation, EAO-4:  PeM and MaS therefore
       SoP. (Contributed by David A. Wheeler, 28-Aug-2016.)  Reduce
       dependencies on axioms.  (Revised by BJ, 16-Sep-2022.) $)
    fesapo $p |- E. x ( ch /\ -. ph ) $=
      ( wn wi wal con2 alimi ax-mp felapton ) BACDABHIZDJBAHIZDJEOPDABKLMFGN $.

    $( Obsolete proof of ~ fesapo as of 27-Sep-2022.  (Contributed by David A.
       Wheeler, 27-Aug-2016.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    fesapoOLD $p |- E. x ( ch /\ -. ph ) $=
      ( wn wa wi spi con2i jca eximii ) BCAHZIDGBCOBCJDFKABABHJDEKLMN $.
  $}

  ${
    $( Major premise for the Aristotelian syllogism "Bamalip" $)
    bamalip.maj $e |- A. x ( ph -> ps ) $.
    $( Minor premise for Bamalip $)
    bamalip.min $e |- A. x ( ps -> ch ) $.
    $( Existence premise for Bamalip $)
    bamalip.e $e |- E. x ph $.
    $( "Bamalip", one of the syllogisms of Aristotelian logic.  All ` ph ` is
       ` ps ` , all ` ps ` is ` ch ` , and ` ph ` exist, therefore some ` ch `
       is ` ph ` .  In Aristotelian notation, AAI-4:  PaM and MaS therefore
       SiP. Very similar to ~ barbari .  (Contributed by David A. Wheeler,
       28-Aug-2016.)  Shorten and reduce dependencies on axioms.  (Revised by
       BJ, 16-Sep-2022.) $)
    bamalip $p |- E. x ( ch /\ ph ) $=
      ( wa wex barbari exancom mpbi ) ACHDICAHDIBCADFEGJACDKL $.

    $( Obsolete proof of ~ bamalip as of 16-Sep-2022.  (Contributed by David A.
       Wheeler, 28-Aug-2016.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    bamalipOLD $p |- E. x ( ch /\ ph ) $=
      ( wa wi spi syl ancri eximii ) ACAHDGACABCABIDEJBCIDFJKLM $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Intuitionistic logic
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  Intuitionistic (constructive) logic is similar to classical logic with the
  notable omission of ~ ax-3 and theorems such as ~ exmid or ~ peirce .  We
  mostly treat intuitionistic logic in a separate file, iset.mm, which is known
  as the Intuitionistic Logic Explorer on the web site.  However, iset.mm has a
  number of additional axioms (mainly to replace definitions like ~ df-or and
  ~ df-ex which are not valid in intuitionistic logic) and we want to prove
  those axioms here to demonstrate that adding those axioms in iset.mm does not
  make iset.mm any less consistent than set.mm.

  The following axioms are unchanged between set.mm and iset.mm: ~ ax-1 ,
  ~ ax-2 , ~ ax-mp , ~ ax-4 , ~ ax-11 , ~ ax-gen , ~ ax-7 , ~ ax-12 , ~ ax-8 ,
  ~ ax-9 , and ~ ax-5 .

  In this list of axioms, the ones that repeat earlier theorems are marked
  "(New usage is discouraged.)" so that the earlier theorems will be used
  consistently in other proofs.

$)

  $( Left 'and' elimination (intuitionistic logic axiom ax-ia1).  (Contributed
     by Jim Kingdon, 21-May-2018.)  (New usage is discouraged.) $)
  axia1 $p |- ( ( ph /\ ps ) -> ph ) $=
    ( simpl ) ABC $.

  $( Right 'and' elimination (intuitionistic logic axiom ax-ia2).  (Contributed
     by Jim Kingdon, 21-May-2018.)  (New usage is discouraged.) $)
  axia2 $p |- ( ( ph /\ ps ) -> ps ) $=
    ( simpr ) ABC $.

  $( 'And' introduction (intuitionistic logic axiom ax-ia3).  (Contributed by
     Jim Kingdon, 21-May-2018.)  (New usage is discouraged.) $)
  axia3 $p |- ( ph -> ( ps -> ( ph /\ ps ) ) ) $=
    ( pm3.2 ) ABC $.

  $( 'Not' introduction (intuitionistic logic axiom ax-in1).  (Contributed by
     Jim Kingdon, 21-May-2018.)  (New usage is discouraged.) $)
  axin1 $p |- ( ( ph -> -. ph ) -> -. ph ) $=
    ( pm2.01 ) AB $.

  $( 'Not' elimination (intuitionistic logic axiom ax-in2).  (Contributed by
     Jim Kingdon, 21-May-2018.)  (New usage is discouraged.) $)
  axin2 $p |- ( -. ph -> ( ph -> ps ) ) $=
    ( pm2.21 ) ABC $.

  $( Definition of 'or' (intuitionistic logic axiom ax-io).  (Contributed by
     Jim Kingdon, 21-May-2018.)  (New usage is discouraged.) $)
  axio $p |- ( ( ( ph \/ ch ) -> ps ) <->
      ( ( ph -> ps ) /\ ( ch -> ps ) ) ) $=
    ( jaob ) ABCD $.

  $( Specialization (intuitionistic logic axiom ax-4).  This is just ~ sp by
     another name.  (Contributed by Jim Kingdon, 31-Dec-2017.)
     (New usage is discouraged.) $)
  axi4 $p |- ( A. x ph -> ph ) $=
    ( sp ) ABC $.

  $( Converse of ~ axc4 (intuitionistic logic axiom ax-i5r).  (Contributed by
     Jim Kingdon, 31-Dec-2017.) $)
  axi5r $p |- ( ( A. x ph -> A. x ps ) -> A. x ( A. x ph -> ps ) ) $=
    ( wal wi hba1 hbim sp imim2i alrimih ) ACDZBCDZEKBECKLCACFBCFGLBKBCHIJ $.

  $( The setvar ` x ` is not free in ` A. x ph ` (intuitionistic logic axiom
     ax-ial).  (Contributed by Jim Kingdon, 31-Dec-2017.)
     (New usage is discouraged.) $)
  axial $p |- ( A. x ph -> A. x A. x ph ) $=
    ( hba1 ) ABC $.

  $( The setvar ` x ` is not free in ` E. x ph ` (intuitionistic logic axiom
     ax-ie1).  (Contributed by Jim Kingdon, 31-Dec-2017.)
     (New usage is discouraged.) $)
  axie1 $p |- ( E. x ph -> A. x E. x ph ) $=
    ( hbe1 ) ABC $.

  $( A key property of existential quantification (intuitionistic logic axiom
     ax-ie2).  (Contributed by Jim Kingdon, 31-Dec-2017.) $)
  axie2 $p |- ( A. x ( ps -> A. x ps ) ->
              ( A. x ( ph -> ps ) <-> ( E. x ph -> ps ) ) ) $=
    ( wal wi wnf wex wb nf5 19.23t sylbir ) BBCDECDBCFABECDACGBEHBCIABCJK $.

  $( Axiom of existence (intuitionistic logic axiom ax-i9).  In classical
     logic, this is equivalent to ~ ax-6 but in intuitionistic logic it needs
     to be stated using the existential quantifier.  (Contributed by Jim
     Kingdon, 31-Dec-2017.)  (New usage is discouraged.) $)
  axi9 $p |- E. x x = y $=
    ( ax6e ) ABC $.

  $( Axiom of Quantifier Substitution (intuitionistic logic axiom ax-10).  This
     is just ~ axc11n by another name.  (Contributed by Jim Kingdon,
     31-Dec-2017.)  (New usage is discouraged.) $)
  axi10 $p |- ( A. x x = y -> A. y y = x ) $=
    ( axc11n ) ABC $.

  $( Axiom of Quantifier Introduction (intuitionistic logic axiom ax-i12).  In
     classical logic, this is mostly a restatement of ~ axc9 (with one
     additional quantifier).  But in intuitionistic logic, changing the
     negations and implications to disjunctions makes it stronger.
     (Contributed by Jim Kingdon, 31-Dec-2017.)  Avoid ~ ax-11 .  (Revised by
     Wolf Lammen, 24-Apr-2023.) $)
  axi12 $p |- ( A. z z = x \/ ( A. z z = y \/
                A. z ( x = y -> A. z x = y ) ) ) $=
    ( weq wal wo wi nfa1 nfor 19.32 wn axc9 orrd orri orass mpbir mpgbi mpbi )
    CADZCEZCBDZCEZFZABDZUDCEGZCEZFZTUBUFFFUCUEFZUGCUCUECTUBCSCHUACHIJUHTUBUEFZF
    TUITKUBUEABCLMNTUBUEOPQTUBUFOR $.

  $( Obsolete version of ~ axi12 as of 24-Apr-2023.  (Contributed by Jim
     Kingdon, 31-Dec-2017.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  axi12OLD $p |- ( A. z z = x \/ ( A. z z = y \/
                A. z ( x = y -> A. z x = y ) ) ) $=
    ( weq wal wo wi nfae nfor 19.32 wn axc9 orrd orri orass mpbir mpgbi mpbi )
    CADCEZCBDCEZFZABDZUBCEGZCEZFZSTUDFFUAUCFZUECUAUCCSTCCACHCBCHIJUFSTUCFZFSUGS
    KTUCABCLMNSTUCOPQSTUDOR $.

  $( Axiom of Bundling (intuitionistic logic axiom ax-bnd).  In classical
     logic, this and ~ axi12 are fairly straightforward consequences of
     ~ axc9 .  But in intuitionistic logic, it is not easy to add the extra
     ` A. x ` to ~ axi12 and so we treat the two as separate axioms.
     (Contributed by Jim Kingdon, 22-Mar-2018.)  (Proof shortened by Wolf
     Lammen, 24-Apr-2023.) $)
  axbnd $p |- ( A. z z = x \/ ( A. z z = y \/
                 A. x A. z ( x = y -> A. z x = y ) ) ) $=
    ( weq wal wo wi nfae nfor 19.32 orass bitri axi12 mpbir mpgbi ) CADCEZCBDCE
    ZFZABDZSCEGCEZFZPQTAEZFFZAUAAERUBFUCRTAPQACAAHCBAHIJPQUBKLUAPQTFFABCMPQTKNO
    $.

  $( Obsolete version of ~ axbnd as of 24-Apr-2023.  (Contributed by Jim
     Kingdon, 22-Mar-2018.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  axbndOLD $p |- ( A. z z = x \/ ( A. z z = y \/
                 A. x A. z ( x = y -> A. z x = y ) ) ) $=
    ( weq wal wi wo wn wa nfnae nfan axc9 imp alrimi ex orrd orri ) CADCEZCBDCE
    ZABDZTCEFZCEZAEZGRHZSUCUDSHZUCUDUEIZUBAUDUEACAAJCBAJKUFUACUDUECCACJCBCJKUDU
    EUAABCLMNNOPQ $.

$( End $[ set-pred.mm $] $)


$( Begin $[ set-class.mm $] $)
$( Skip $[ set-pred.mm $] $)
$(
###############################################################################
  ZF (ZERMELO-FRAENKEL) SET THEORY
###############################################################################

  Set theory uses the formalism of propositional and predicate calculus to
  assert properties of arbitrary mathematical objects called "sets".  A set can
  be an element of another set, and this relationship is indicated by the
  ` e. ` symbol.  Starting with the simplest mathematical object, called the
  empty set, set theory builds up more and more complex structures whose
  existence follows from the axioms, eventually resulting in extremely
  complicated sets that we identify with the real numbers and other familiar
  mathematical objects.

  A simplistic concept of sets, sometimes called "naive set theory", is
  vulnerable to a paradox called "Russell's Paradox" ( ~ ru ), a discovery that
  revolutionized the foundations of mathematics and logic.  Russell's Paradox
  spawned the development of set theories that countered the paradox, including
  the ZF set theory that is most widely used and is defined here.

  Except for Extensionality, the axioms basically say, "given an arbitrary set
  x (and, in the cases of Replacement and Regularity, provided that an
  antecedent is satisfied), there exists another set y based on or constructed
  from it, with the stated properties".  (The axiom of Extensionality can also
  be restated this way as shown by ~ axext2 .) The individual axiom links
  provide more detailed descriptions.  We derive the redundant ZF axioms of
  Separation, Null Set, and Pairing from the others as theorems.

$)


$(
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
  Zermelo-Fraenkel Set Theory
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
$)


$(
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
  ZF Set Theory - start with the Axiom of Extensionality
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
$)


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Introduce the Axiom of Extensionality
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    $d x y z $.
    $( Axiom of Extensionality.  An axiom of Zermelo-Fraenkel set theory.  It
       states that two sets are identical if they contain the same elements.
       Axiom Ext of [BellMachover] p. 461.

       Set theory can also be formulated with a _single_ primitive predicate
       ` e. ` on top of traditional predicate calculus _without_ equality.  In
       that case the Axiom of Extensionality becomes
       ` ( A. w ( w e. x <-> w e. y ) -> ( x e. z -> y e. z ) ) ` , and
       equality ` x = y ` is _defined_ as ` A. w ( w e. x <-> w e. y ) ` .  All
       of the usual axioms of equality then become theorems of set theory.
       See, for example, Axiom 1 of [TakeutiZaring] p. 8.

       To use the above "equality-free" version of Extensionality with
       Metamath's predicate calculus axioms, we would rewrite all axioms
       involving equality with equality expanded according to the above
       definition.  Some of those axioms may be provable from ax-ext and would
       become redundant, but this hasn't been studied carefully.

       _General remarks_:  Our set theory axioms are presented using defined
       connectives ( ` <-> ` , ` E. ` , etc.) for convenience.  However, it is
       implicitly understood that the actual axioms use only the primitive
       connectives ` -> ` , ` -. ` , ` A. ` , ` = ` , and ` e. ` .  It is
       straightforward to establish the equivalence between the actual axioms
       and the ones we display, and we will not do so.

       It is important to understand that strictly speaking, all of our set
       theory axioms are really schemes that represent an infinite number of
       actual axioms.  This is inherent in the design of Metamath
       ("metavariable math"), which manipulates only metavariables.  For
       example, the metavariable ` x ` in ~ ax-ext can represent any actual
       variable _v1_, _v2_, _v3_,... .  Distinct variable restrictions ($d)
       prevent us from substituting say _v1_ for both ` x ` and ` z ` .  This
       is in contrast to typical textbook presentations that present actual
       axioms (except for Replacement ~ ax-rep , which involves a wff
       metavariable).  In practice, though, the theorems and proofs are
       essentially the same.  The $d restrictions make each of the infinite
       axioms generated by the ~ ax-ext scheme exactly logically equivalent to
       each other and in particular to the actual axiom of the textbook
       version.  (Contributed by NM, 21-May-1993.) $)
    ax-ext $a |- ( A. z ( z e. x <-> z e. y ) -> x = y ) $.

    $( The Axiom of Extensionality ( ~ ax-ext ) restated so that it postulates
       the existence of a set ` z ` given two arbitrary sets ` x ` and ` y ` .
       This way to express it follows the general idea of the other ZFC axioms,
       which is to postulate the existence of sets given other sets.
       (Contributed by NM, 28-Sep-2003.) $)
    axext2 $p |- E. z ( ( z e. x <-> z e. y ) -> x = y ) $=
      ( wel wb weq wi wex wal ax-ext 19.36v mpbir ) CADCBDEZABFZGCHMCINGABCJMNC
      KL $.
  $}

  ${
    $d z x w $.  $d z y w $.
    $( A generalization of the Axiom of Extensionality in which ` x ` and ` y `
       need not be distinct.  (Contributed by NM, 15-Sep-1993.)  (Proof
       shortened by Andrew Salmon, 12-Aug-2011.)  Remove dependencies on
       ~ ax-10 , ~ ax-12 , ~ ax-13 .  (Revised by Wolf Lammen, 9-Dec-2019.) $)
    axext3 $p |- ( A. z ( z e. x <-> z e. y ) -> x = y ) $=
      ( vw weq wel wb wal wi elequ2 bibi1d albidv ax-ext syl6bir ax7 syld ax6ev
      exlimiiv ) DAEZCAFZCBFZGZCHZABEZIDSUCDBEZUDSUCCDFZUAGZCHUESUGUBCSUFTUADAC
      JKLDBCMNDABOPDAQR $.

    $d z x w $.  $d z y w $.
    $( Alternate proof of ~ axext3 , shorter but uses more axioms.
       (Contributed by NM, 15-Sep-1993.)  (Proof shortened by Andrew Salmon,
       12-Aug-2011.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    axext3ALT $p |- ( A. z ( z e. x <-> z e. y ) -> x = y ) $=
      ( vw wel wb wal weq wi elequ2 bibi1d albidv equequ1 imbi12d ax-ext chvarv
      ) CDEZCBEZFZCGZDBHZICAEZRFZCGZABHZIDADAHZTUDUAUEUFSUCCUFQUBRDACJKLDABMNDB
      COP $.

    $( A bidirectional version of Extensionality.  Although this theorem
       "looks" like it is just a definition of equality, it requires the Axiom
       of Extensionality for its proof under our axiomatization.  See the
       comments for ~ ax-ext and ~ df-cleq .  (Contributed by NM,
       14-Nov-2008.) $)
    axext4 $p |- ( x = y <-> A. z ( z e. x <-> z e. y ) ) $=
      ( weq wel wb wal elequ2 alrimiv axext3 impbii ) ABDZCAECBEFZCGLMCABCHIABC
      JK $.
  $}

  ${
    $d x y z $.  $d ph z $.
    axextmo.1 $e |- F/ x ph $.
    $( There exists at most one set with prescribed elements.  Theorem 1.1 of
       [BellMachover] p. 462.  (Contributed by NM, 30-Jun-1994.)  (Proof
       shortened by Wolf Lammen, 13-Nov-2019.)  Use the at-most-one quantifier.
       (Revised by BJ, 17-Sep-2022.) $)
    axextmo $p |- E* x A. y ( y e. x <-> ph ) $=
      ( vz wel wb wal wmo wa weq biantr alanimi ax-ext syl gen2 nfv nfbi nfal
      wi elequ2 bibi1d albidv mo4f mpbir ) CBFZAGZCHZBIUHCEFZAGZCHZJZBEKZTZEHBH
      UNBEULUFUIGZCHUMUGUJUOCUFAUILMBECNOPUHUKBEUJBCUIABUIBQDRSUMUGUJCUMUFUIABE
      CUAUBUCUDUE $.

    $( Obsolete version of ~ axextmo as of 17-Sep-2022.  (Contributed by NM,
       30-Jun-1994.)  (Proof shortened by Wolf Lammen, 13-Nov-2019.)
       (Proof modification is discouraged.)  Use ~ axextmo instead.
       (New usage is discouraged.) $)
    bm1.1OLD $p |- ( E. x A. y ( y e. x <-> ph ) ->
                  E! x A. y ( y e. x <-> ph ) ) $=
      ( vz wel wb wal wa weq wi wex weu biantr alanimi ax-ext syl gen2 wmo nfv
      nfbi nfal elequ2 bibi1d albidv mo4f moeu bitr3i mpbi ) CBFZAGZCHZCEFZAGZC
      HZIZBEJZKZEHBHZULBLULBMKZURBEUPUJUMGZCHUQUKUNVACUJAUMNOBECPQRUSULBSUTULUO
      BEUNBCUMABUMBTDUAUBUQUKUNCUQUJUMABECUCUDUEUFULBUGUHUI $.
  $}

  ${
    $d x y $.
    $( There exists at most one empty set.  With either ~ axnul or ~ axnulALT
       or ~ ax-nul , this proves that there exists a unique empty set.  In
       practice, once the language of classes is available, we use the stronger
       characterization among classes ~ eq0 .  (Contributed by NM,
       22-Dec-2007.)  Use the at-most-one quantifier.  (Revised by BJ,
       17-Sep-2022.)  (Proof shortened by Wolf Lammen, 26-Apr-2023.) $)
    nulmo $p |- E* x A. y -. y e. x $=
      ( wel wn wal wmo wfal wb nfv axextmo nbfal albii mobii mpbir ) BACZDZBEZA
      FOGHZBEZAFGABGAIJQSAPRBOKLMN $.

    $( Obsolete version of ~ nulmo as of 26-Apr-2023.  (Contributed by NM,
       22-Dec-2007.)  Use the at-most-one quantifier.  (Revised by BJ,
       17-Sep-2022.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    nulmoOLD $p |- E* x A. y -. y e. x $=
      ( wel wfal wb wal wmo wn nfv axextmo nbfal bicomi albii mobii mpbi ) BACZ
      DEZBFZAGPHZBFZAGDABDAIJRTAQSBSQPKLMNO $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Class abstractions (a.k.a. class builders)
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Declare new constants use in class definition. $)
  $c { $.  $( Left brace $)
  $c | $.  $( Vertical bar $)
  $c } $.  $( Right brace $)

  $( Declare symbols as variables $)
  $v ./\ $.
  $v .\/ $.
  $v .<_ $.
  $v .< $.
  $v .+ $.
  $v .- $.
  $v .X. $.
  $v ./ $.
  $v .^ $.
  $v .0. $.
  $v .1. $.
  $v .|| $.
  $v .~ $.
  $v ._|_ $.
  $v .+^ $.
  $v .+b $.
  $v .(+) $.
  $v .* $.
  $v .x. $.
  $v .xb $.
  $v ., $.
  $v .(x) $.
  $v .o. $.
  $v .0b $.

  $( Declare variable symbols that will be used to represent classes.  Note
     that later on ` R ` , ` S ` , ` F ` and ` G ` denote relations and
     functions, but these letters serve as mnemonics only and in fact behave
     no differently from the variables ` A ` through ` D ` . $)
  $v A $.
  $v B $.
  $v C $.
  $v D $.
  $v P $.
  $v Q $.
  $v R $.
  $v S $.
  $v T $.
  $v U $.

  $( Introduce the class builder or class abstraction notation ("the class of
     sets ` x ` such that ` ph ` is true").  Our class variables ` A ` ,
     ` B ` , etc. range over class builders (implicitly in the case of defined
     class terms such as ~ df-nul ).  Note that a setvar variable can be
     expressed as a class builder per theorem ~ cvjust , justifying the
     assignment of setvar variables to class variables via the use of ~ cv . $)
  cab $a class { x | ph } $.

  $( $j primitive 'cv' 'wceq' 'wcel' 'cab'; $)

  $( Let ` A ` be a class variable. $)
  cA $f class A $.
  $( Let ` B ` be a class variable. $)
  cB $f class B $.
  $( Let ` C ` be a class variable. $)
  cC $f class C $.

  $( Define a connective symbol for use as a class variable. $)
  c.pa $f class .|| $.

  $( Let ` D ` be a class variable. $)
  cD $f class D $.

  $( Define a connective symbol for use as a class variable. $)
  c.dv $f class ./ $.

  $( Let ` P ` be a class variable. $)
  cP $f class P $.

  $( Define a connective symbol for use as a class variable. $)
  c.pl $f class .+ $.

  $( Define a connective symbol for use as a class variable. $)
  c.pd $f class .+^ $.

  $( Define a connective symbol for use as a class variable. $)
  c.pb $f class .+b $.

  $( Define a connective symbol for use as a class variable. $)
  c.po $f class .(+) $.

  $( Let ` Q ` be a class variable. $)
  cQ $f class Q $.

  $( Define a connective symbol for use as a class variable. $)
  c.sm $f class .~ $.

  $( Let ` R ` be a class variable. $)
  cR $f class R $.
  $( Let ` S ` be a class variable. $)
  cS $f class S $.

  $( Define a connective symbol for use as a class variable. $)
  c.lt $f class .< $.

  $( Define a connective symbol for use as a class variable. $)
  c.xb $f class .xb $.

  $( Let ` T ` be a class variable. $)
  cT $f class T $.

  $( Define a connective symbol for use as a class variable. $)
  c.x $f class .x. $.

  $( Define a connective symbol for use as a class variable. $)
  c.xp $f class .X. $.

  $( Define a connective symbol for use as a class variable. $)
  c.xo $f class .(x) $.

  $( Let ` U ` be a class variable. $)
  cU $f class U $.

  $( Define a connective symbol for use as a class variable. $)
  c.1 $f class .1. $.

  $v e $.
  $v f $.
  $v g $.
  $v h $.
  $v i $.
  $v j $.
  $v k $.
  $v m $.
  $v n $.
  $v o $.
  $v E $.
  $v F $.
  $v G $.
  $v H $.
  $v I $.
  $v J $.
  $v K $.
  $v L $.
  $v M $.
  $v N $.
  $v V $.
  $v W $.
  $v X $.
  $v Y $.
  $v Z $.
  $v O $.
  $v s $.
  $v r $.
  $v q $.
  $v p $.
  $v a $.
  $v b $.
  $v c $.
  $v d $.
  $v l $.

  $( Let ` e ` be an individual variable. $)
  ve $f setvar e $.
  $( Let ` f ` be an individual variable. $)
  vf $f setvar f $.
  $( Let ` g ` be an individual variable. $)
  vg $f setvar g $.
  $( Let ` h ` be an individual variable. $)
  vh $f setvar h $.
  $( Let ` i ` be an individual variable. $)
  vi $f setvar i $.
  $( Let ` j ` be an individual variable. $)
  vj $f setvar j $.
  $( Let ` k ` be an individual variable. $)
  vk $f setvar k $.
  $( Let ` m ` be an individual variable. $)
  vm $f setvar m $.
  $( Let ` n ` be an individual variable. $)
  vn $f setvar n $.
  $( Let ` o ` be an individual variable. $)
  vo $f setvar o $.
  $( Let ` E ` be a class variable. $)
  cE $f class E $.

  $( Define a connective symbol for use as a class variable. $)
  c.ex $f class .^ $.

  $( Let ` F ` be a class variable. $)
  cF $f class F $.
  $( Let ` G ` be a class variable. $)
  cG $f class G $.
  $( Let ` H ` be a class variable. $)
  cH $f class H $.

  $( Define a connective symbol for use as a class variable. $)
  c.xi $f class ., $.

  $( Let ` I ` be a class variable. $)
  cI $f class I $.

  $( Define a connective symbol for use as a class variable. $)
  c.as $f class .* $.

  $( Let ` J ` be a class variable. $)
  cJ $f class J $.

  $( Define a connective symbol for use as a class variable. $)
  c.or $f class .\/ $.

  $( Let ` K ` be a class variable. $)
  cK $f class K $.

  $( Let ` L ` be a class variable. $)
  cL $f class L $.

  $( Define a connective symbol for use as a class variable. $)
  c.le $f class .<_ $.

  $( Let ` M ` be a class variable. $)
  cM $f class M $.

  $( Define a connective symbol for use as a class variable. $)
  c.an $f class ./\ $.

  $( Define a connective symbol for use as a class variable. $)
  c.mi $f class .- $.

  $( Let ` N ` be a class variable. $)
  cN $f class N $.

  $( Define a connective symbol for use as a class variable. $)
  c.pe $f class ._|_ $.

  $( Let ` O ` be a class variable. $)
  cO $f class O $.
  $( Let ` V ` be a class variable. $)
  cV $f class V $.
  $( Let ` W ` be a class variable. $)
  cW $f class W $.
  $( Let ` X ` be a class variable. $)
  cX $f class X $.
  $( Let ` Y ` be a class variable. $)
  cY $f class Y $.

  $( Define a connective symbol for use as a class variable. $)
  c.0 $f class .0. $.

  $( Define a connective symbol for use as a class variable. $)
  c.0b $f class .0b $.

  $( Define a connective symbol for use as a class variable. $)
  c.op $f class .o. $.

  $( Let ` Z ` be a class variable. $)
  cZ $f class Z $.
  $( Let ` s ` be an individual variable. $)
  vs $f setvar s $.
  $( Let ` r ` be an individual variable. $)
  vr $f setvar r $.
  $( Let ` q ` be an individual variable. $)
  vq $f setvar q $.
  $( Let ` p ` be an individual variable. $)
  vp $f setvar p $.
  $( Let ` a ` be an individual variable. $)
  va $f setvar a $.
  $( Let ` b ` be an individual variable. $)
  vb $f setvar b $.
  $( Let ` c ` be an individual variable. $)
  vc $f setvar c $.
  $( Let ` d ` be an individual variable. $)
  vd $f setvar d $.
  $( Let ` l ` be an individual variable. $)
  vl $f setvar l $.

  $( Define class abstraction notation (so-called by Quine), also called a
     "class builder" in the literature. ` x ` and ` y ` need not be distinct.
     Definition 2.1 of [Quine] p. 16.  Typically, ` ph ` will have ` y ` as a
     free variable, and " ` { y | ph } ` " is read "the class of all sets ` y `
     such that ` ph ( y ) ` is true."  We do not define ` { y | ph } ` in
     isolation but only as part of an expression that extends or "overloads"
     the ` e. ` relationship.

     This is our first use of the ` e. ` symbol to connect classes instead of
     sets.  The syntax definition ~ wcel , which extends or "overloads" the
     ~ wel definition connecting setvar variables, requires that both sides of
     ` e. ` be classes.  In ~ df-cleq and ~ df-clel , we introduce a new kind
     of variable (class variable) that can be substituted with expressions such
     as ` { y | ph } ` .  In the present definition, the ` x ` on the left-hand
     side is a setvar variable.  Syntax definition ~ cv allows us to substitute
     a setvar variable ` x ` for a class variable: all sets are classes by
     ~ cvjust (but not necessarily vice-versa).  For a full description of how
     classes are introduced and how to recover the primitive language, see the
     discussion in Quine (and under ~ abeq2 for a quick overview).

     Because class variables can be substituted with compound expressions and
     setvar variables cannot, it is often useful to convert a theorem
     containing a free setvar variable to a more general version with a class
     variable.  This is done with theorems such as ~ vtoclg which is used, for
     example, to convert ~ elirrv to ~ elirr .

     This is called the "axiom of class comprehension" by [Levy] p. 338, who
     treats the theory of classes as an extralogical extension to our logic and
     set theory axioms.  He calls the construction ` { y | ph } ` a "class
     term".

     While the three class definitions ~ df-clab , ~ df-cleq , and ~ df-clel
     are eliminable and conservative and thus meet the requirements for sound
     definitions, they are technically axioms in that they do not satisfy the
     requirements for the current definition checker.  The proofs of
     conservativity require external justification that is beyond the scope of
     the definition checker.

     For a general discussion of the theory of classes, see
     ~ mmset.html#class .  (Contributed by NM, 26-May-1993.) $)
  df-clab $a |- ( x e. { y | ph } <-> [ x / y ] ph ) $.

  $( Simplification of class abstraction notation when the free and bound
     variables are identical.  (Contributed by NM, 26-May-1993.) $)
  abid $p |- ( x e. { x | ph } <-> ph ) $=
    ( cv cab wcel wsb df-clab sbid bitri ) BCABDEABBFAABBGABHI $.

  ${
    $d x y $.
    $( Bound-variable hypothesis builder for a class abstraction.  (Contributed
       by NM, 26-May-1993.) $)
    hbab1 $p |- ( y e. { x | ph } -> A. x y e. { x | ph } ) $=
      ( cv cab wcel wsb df-clab hbs1 hbxfrbi ) CDABEFABCGBACBHABCIJ $.

    $( Bound-variable hypothesis builder for a class abstraction.  (Contributed
       by Mario Carneiro, 11-Aug-2016.) $)
    nfsab1 $p |- F/ x y e. { x | ph } $=
      ( cv cab wcel hbab1 nf5i ) CDABEFBABCGH $.
  $}

  ${
    $d x z $.
    hbab.1 $e |- ( ph -> A. x ph ) $.
    $( Bound-variable hypothesis builder for a class abstraction.  (Contributed
       by NM, 1-Mar-1995.) $)
    hbab $p |- ( z e. { y | ph } -> A. x z e. { y | ph } ) $=
      ( cv cab wcel wsb df-clab hbsb hbxfrbi ) DFACGHACDIBADCJACDBEKL $.
  $}

  ${
    $d x z $.
    nfsab.1 $e |- F/ x ph $.
    $( Bound-variable hypothesis builder for a class abstraction.  (Contributed
       by Mario Carneiro, 11-Aug-2016.) $)
    nfsab $p |- F/ x z e. { y | ph } $=
      ( cv cab wcel nf5ri hbab nf5i ) DFACGHBABCDABEIJK $.
  $}

  ${
    $d x A $.  $d x B $.  $d x y z $.
    df-cleq.1 $e |- ( A. x ( x e. y <-> x e. z ) -> y = z ) $.
    $( Define the equality connective between classes.  Definition 2.7 of
       [Quine] p. 18.  Also Definition 4.5 of [TakeutiZaring] p. 13; Chapter 4
       provides its justification and methods for eliminating it.  Note that
       its elimination will not necessarily result in a single wff in the
       original language but possibly a "scheme" of wffs.

       This is an example of a somewhat "risky" definition, meaning that it has
       a more complex than usual soundness justification (outside of Metamath),
       because it "overloads" or reuses the existing equality symbol rather
       than introducing a new symbol.  This allows us to make statements that
       may not hold for the original symbol.  For example, it permits us to
       deduce ` y = z <-> A. x ( x e. y <-> x e. z ) ` , which is not a theorem
       of logic but rather presupposes the Axiom of Extensionality (see theorem
       ~ axext4 ).  We therefore include this axiom as a hypothesis, so that
       the use of Extensionality is properly indicated.

       See also comments under ~ df-clab , ~ df-clel , and ~ abeq2 .

       In the form of ~ dfcleq , this is called the "axiom of extensionality"
       by [Levy] p. 338, who treats the theory of classes as an extralogical
       extension to our logic and set theory axioms.

       While the three class definitions ~ df-clab , ~ df-cleq , and ~ df-clel
       are eliminable and conservative and thus meet the requirements for sound
       definitions, they are technically axioms in that they do not satisfy the
       requirements for the current definition checker.  The proofs of
       conservativity require external justification that is beyond the scope
       of the definition checker.

       For a general discussion of the theory of classes, see
       ~ mmset.html#class .  (Contributed by NM, 15-Sep-1993.) $)
    df-cleq $a |- ( A = B <-> A. x ( x e. A <-> x e. B ) ) $.
  $}

  ${
    $d x A $.  $d x B $.  $d x y z $.
    $( The same as ~ df-cleq with the hypothesis removed using the Axiom of
       Extensionality ~ ax-ext .  (Contributed by NM, 15-Sep-1993.)  Revised to
       make use of ~ axext3 instead of ~ ax-ext , so that ~ ax-9 will appear in
       lists of axioms used by a proof, since ~ df-cleq implies ~ ax-9 by
       theorem ~ bj-ax9 .  We may revisit this in the future.  (Revised by NM,
       28-Oct-2021.)  (Proof modification is discouraged.) $)
    dfcleq $p |- ( A = B <-> A. x ( x e. A <-> x e. B ) ) $=
      ( vy vz axext3 df-cleq ) ADEBCDEAFG $.
  $}

  ${
    $d x y z $.
    $( Every set is a class.  Proposition 4.9 of [TakeutiZaring] p. 13.  This
       theorem shows that a setvar variable can be expressed as a class
       abstraction.  This provides a motivation for the class syntax
       construction ~ cv , which allows us to substitute a setvar variable for
       a class variable.  See also ~ cab and ~ df-clab .  Note that this is not
       a rigorous justification, because ~ cv is used as part of the proof of
       this theorem, but a careful argument can be made outside of the
       formalism of Metamath, for example as is done in Chapter 4 of Takeuti
       and Zaring.  See also the discussion under the definition of class in
       [Jech] p. 4 showing that "Every set can be considered to be a class."
       See ~ abid1 for the version of ~ cvjust extended to classes.
       (Contributed by NM, 7-Nov-2006.)  Avoid ~ ax-13 .  (Revised by Wolf
       Lammen, 4-May-2023.) $)
    cvjust $p |- x = { y | y e. x } $=
      ( vz cv wel cab wceq wcel wb dfcleq wsb df-clab elsb3 bitr2i mpgbir ) ADZ
      BAEZBFZGCAEZCDRHZICCPRJTQBCKSQCBLCBAMNO $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Define the membership connective between classes.  Theorem 6.3 of
       [Quine] p. 41, or Proposition 4.6 of [TakeutiZaring] p. 13, which we
       adopt as a definition.  See these references for its metalogical
       justification.  Note that like ~ df-cleq it extends or "overloads" the
       use of the existing membership symbol, but unlike ~ df-cleq it does not
       strengthen the set of valid wffs of logic when the class variables are
       replaced with setvar variables (see ~ cleljust ), so we don't include
       any set theory axiom as a hypothesis.  See also comments about the
       syntax under ~ df-clab .  Alternate definitions of ` A e. B ` (but that
       require either ` A ` or ` B ` to be a set) are shown by ~ clel2 ,
       ~ clel3 , and ~ clel4 .

       This is called the "axiom of membership" by [Levy] p. 338, who treats
       the theory of classes as an extralogical extension to our logic and set
       theory axioms.

       While the three class definitions ~ df-clab , ~ df-cleq , and ~ df-clel
       are eliminable and conservative and thus meet the requirements for sound
       definitions, they are technically axioms in that they do not satisfy the
       requirements for the current definition checker.  The proofs of
       conservativity require external justification that is beyond the scope
       of the definition checker.

       For a general discussion of the theory of classes, see
       ~ mmset.html#class .  (Contributed by NM, 26-May-1993.) $)
    df-clel $a |- ( A e. B <-> E. x ( x = A /\ x e. B ) ) $.
  $}

  ${
    $d x A $.  $d x B $.
    eqriv.1 $e |- ( x e. A <-> x e. B ) $.
    $( Infer equality of classes from equivalence of membership.  (Contributed
       by NM, 21-Jun-1993.) $)
    eqriv $p |- A = B $=
      ( wceq cv wcel wb dfcleq mpgbir ) BCEAFZBGKCGHAABCIDJ $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ph $.
    eqrdv.1 $e |- ( ph -> ( x e. A <-> x e. B ) ) $.
    $( Deduce equality of classes from equivalence of membership.  (Contributed
       by NM, 17-Mar-1996.) $)
    eqrdv $p |- ( ph -> A = B ) $=
      ( cv wcel wb wal wceq alrimiv dfcleq sylibr ) ABFZCGNDGHZBICDJAOBEKBCDLM
      $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ph $.
    eqrdav.1 $e |- ( ( ph /\ x e. A ) -> x e. C ) $.
    eqrdav.2 $e |- ( ( ph /\ x e. B ) -> x e. C ) $.
    eqrdav.3 $e |- ( ( ph /\ x e. C ) -> ( x e. A <-> x e. B ) ) $.
    $( Deduce equality of classes from an equivalence of membership that
       depends on the membership variable.  (Contributed by NM, 7-Nov-2008.)
       (Proof shortened by Wolf Lammen, 19-Nov-2019.) $)
    eqrdav $p |- ( ph -> A = B ) $=
      ( cv wcel wa biimpd impancom mpd biimprd impbida eqrdv ) ABCDABIZCJZRDJZA
      SKREJZTFAUASTAUAKZSTHLMNATKUASGAUATSUBSTHOMNPQ $.
  $}

  ${
    $d x A $.
    $( Law of identity (reflexivity of class equality).  Theorem 6.4 of [Quine]
       p. 41.

       This is part of Frege's eighth axiom per Proposition 54 of [Frege1879]
       p. 50; see also ~ biid .  An early mention of this law can be found in
       Aristotle, _Metaphysics_, Z.17, 1041a10-20.  (Thanks to Stefan Allan and
       BJ for this information.)  (Contributed by NM, 21-Jun-1993.)  (Revised
       by BJ, 14-Oct-2017.) $)
    eqid $p |- A = A $=
      ( vx cv wcel biid eqriv ) BAABCADEF $.
  $}

  $( Class identity law with antecedent.  (Contributed by NM, 21-Aug-2008.) $)
  eqidd $p |- ( ph -> A = A ) $=
    ( wceq eqid a1i ) BBCABDE $.

  ${
    $d x A $.  $d x B $.  $d x C $.  $d x ph $.
    eqeq1d.1 $e |- ( ph -> A = B ) $.
    $( Deduction from equality to equivalence of equalities.  (Contributed by
       NM, 27-Dec-1993.)  Reduce dependencies on axioms.  (Revised by Wolf
       Lammen, 5-Dec-2019.) $)
    eqeq1d $p |- ( ph -> ( A = C <-> B = C ) ) $=
      ( vx cv wcel wb wal wceq dfcleq biimpi bibi1 alimi albi 4syl 3bitr4g ) AF
      GZBHZSDHZIZFJZSCHZUAIZFJZBDKCDKABCKZTUDIZFJZUBUEIZFJUCUFIEUGUIFBCLMUHUJFT
      UDUANOUBUEFPQFBDLFCDLR $.

    $( Shorter proof of ~ eqeq1d based on more axioms.  (Contributed by NM,
       27-Dec-1993.)  (Revised by Wolf Lammen, 19-Nov-2019.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    eqeq1dALT $p |- ( ph -> ( A = C <-> B = C ) ) $=
      ( vx cv wcel wb wal wceq dfcleq sylib 19.21bi bibi1d albidv 3bitr4g ) AFG
      ZBHZRDHZIZFJRCHZTIZFJBDKCDKAUAUCFASUBTASUBIZFABCKUDFJEFBCLMNOPFBDLFCDLQ
      $.
  $}

  $( Equality implies equivalence of equalities.  (Contributed by NM,
     26-May-1993.)  (Proof shortened by Wolf Lammen, 19-Nov-2019.) $)
  eqeq1 $p |- ( A = B -> ( A = C <-> B = C ) ) $=
    ( wceq id eqeq1d ) ABDZABCGEF $.

  ${
    eqeq1i.1 $e |- A = B $.
    $( Inference from equality to equivalence of equalities.  (Contributed by
       NM, 15-Jul-1993.) $)
    eqeq1i $p |- ( A = C <-> B = C ) $=
      ( wceq wb eqeq1 ax-mp ) ABEACEBCEFDABCGH $.
  $}

  ${
    eqcomd.1 $e |- ( ph -> A = B ) $.
    $( Deduction from commutative law for class equality.  (Contributed by NM,
       15-Aug-1994.)  Allow shortening of ~ eqcom .  (Revised by Wolf Lammen,
       19-Nov-2019.) $)
    eqcomd $p |- ( ph -> B = A ) $=
      ( wceq eqid eqeq1d mpbii ) ABBECBEBFABCBDGH $.
  $}

  $( Commutative law for class equality.  Theorem 6.5 of [Quine] p. 41.
     (Contributed by NM, 26-May-1993.)  (Proof shortened by Wolf Lammen,
     19-Nov-2019.) $)
  eqcom $p |- ( A = B <-> B = A ) $=
    ( wceq id eqcomd impbii ) ABCZBACZGABGDEHBAHDEF $.

  ${
    eqcoms.1 $e |- ( A = B -> ph ) $.
    $( Inference applying commutative law for class equality to an antecedent.
       (Contributed by NM, 24-Jun-1993.) $)
    eqcoms $p |- ( B = A -> ph ) $=
      ( wceq eqcom sylbi ) CBEBCEACBFDG $.
  $}

  ${
    eqcomi.1 $e |- A = B $.
    $( Inference from commutative law for class equality.  (Contributed by NM,
       26-May-1993.) $)
    eqcomi $p |- B = A $=
      ( wceq eqcom mpbi ) ABDBADCABEF $.
  $}

  ${
    eqeq2d.1 $e |- ( ph -> A = B ) $.
    $( Deduction from equality to equivalence of equalities.  (Contributed by
       NM, 27-Dec-1993.)  Allow shortening of ~ eqeq2 .  (Revised by Wolf
       Lammen, 19-Nov-2019.) $)
    eqeq2d $p |- ( ph -> ( C = A <-> C = B ) ) $=
      ( wceq eqeq1d eqcom 3bitr4g ) ABDFCDFDBFDCFABCDEGDBHDCHI $.
  $}

  $( Equality implies equivalence of equalities.  (Contributed by NM,
     26-May-1993.)  (Proof shortened by Wolf Lammen, 19-Nov-2019.) $)
  eqeq2 $p |- ( A = B -> ( C = A <-> C = B ) ) $=
    ( wceq id eqeq2d ) ABDZABCGEF $.

  ${
    eqeq2i.1 $e |- A = B $.
    $( Inference from equality to equivalence of equalities.  (Contributed by
       NM, 26-May-1993.) $)
    eqeq2i $p |- ( C = A <-> C = B ) $=
      ( wceq wb eqeq2 ax-mp ) ABECAECBEFDABCGH $.
  $}

  $( Equality relationship among 4 classes.  (Contributed by NM,
     3-Aug-1994.) $)
  eqeq12 $p |- ( ( A = B /\ C = D ) -> ( A = C <-> B = D ) ) $=
    ( wceq eqeq1 eqeq2 sylan9bb ) ABEACEBCECDEBDEABCFCDBGH $.

  ${
    eqeq12i.1 $e |- A = B $.
    eqeq12i.2 $e |- C = D $.
    $( A useful inference for substituting definitions into an equality.
       (Contributed by NM, 15-Jul-1993.)  (Proof shortened by Andrew Salmon,
       25-May-2011.)  (Proof shortened by Wolf Lammen, 20-Nov-2019.) $)
    eqeq12i $p |- ( A = C <-> B = D ) $=
      ( wceq eqeq1i eqeq2i bitri ) ACGBCGBDGABCEHCDBFIJ $.

    $( Theorem eqeq12i is the congruence law for equality. $)
    $( $j congruence 'eqeq12i'; $)
  $}

  ${
    eqeq12d.1 $e |- ( ph -> A = B ) $.
    eqeq12d.2 $e |- ( ph -> C = D ) $.
    $( A useful inference for substituting definitions into an equality.
       (Contributed by NM, 5-Aug-1993.)  (Proof shortened by Andrew Salmon,
       25-May-2011.) $)
    eqeq12d $p |- ( ph -> ( A = C <-> B = D ) ) $=
      ( wceq wb eqeq12 syl2anc ) ABCHDEHBDHCEHIFGBCDEJK $.
  $}

  ${
    eqeqan12d.1 $e |- ( ph -> A = B ) $.
    eqeqan12d.2 $e |- ( ps -> C = D ) $.
    $( A useful inference for substituting definitions into an equality.  See
       also ~ eqeqan12dALT .  (Contributed by NM, 9-Aug-1994.)  (Proof
       shortened by Andrew Salmon, 25-May-2011.)  (Proof shortened by Wolf
       Lammen, 20-Nov-2019.) $)
    eqeqan12d $p |- ( ( ph /\ ps ) -> ( A = C <-> B = D ) ) $=
      ( wa wceq adantr adantl eqeq12d ) ABICDEFACDJBGKBEFJAHLM $.

    $( Alternate proof of ~ eqeqan12d .  This proof has one more step but one
       fewer essential step.  (Contributed by NM, 9-Aug-1994.)  (Proof
       shortened by Andrew Salmon, 25-May-2011.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    eqeqan12dALT $p |- ( ( ph /\ ps ) -> ( A = C <-> B = D ) ) $=
      ( wceq wb eqeq12 syl2an ) ACDIEFICEIDFIJBGHCDEFKL $.
  $}

  ${
    eqeqan12rd.1 $e |- ( ph -> A = B ) $.
    eqeqan12rd.2 $e |- ( ps -> C = D ) $.
    $( A useful inference for substituting definitions into an equality.
       (Contributed by NM, 9-Aug-1994.) $)
    eqeqan12rd $p |- ( ( ps /\ ph ) -> ( A = C <-> B = D ) ) $=
      ( wceq wb eqeqan12d ancoms ) ABCEIDFIJABCDEFGHKL $.
  $}

  ${
    eqeqan1dOLD.1 $e |- ( ph -> A = B ) $.
    $( Implication of introducing a new equality.  Obsolete as of 14-Feb-2023.
       Use ~ eqeqan12d instead.  (Contributed by Peter Mazsa, 17-Apr-2019.)
       (Proof shortened by AV, 10-Feb-2023.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    eqeqan1dOLD $p |- ( ( ph /\ C = D ) -> ( A = C <-> B = D ) ) $=
      ( wceq id eqeqan12d ) ADEGZBCDEFJHI $.

    $( Obsolete proof of ~ eqeqan1dOLD as of 10-Feb-2023.  (Contributed by
       Peter Mazsa, 17-Apr-2019.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    eqeqan1dOLDOLD $p |- ( ( ph /\ C = D ) -> ( A = C <-> B = D ) ) $=
      ( wceq wb eqeq12 sylan ) ABCGDEGBDGCEGHFBCDEIJ $.
  $}

  $( Transitive law for class equality.  Proposition 4.7(3) of [TakeutiZaring]
     p. 13.  (Contributed by NM, 25-Jan-2004.) $)
  eqtr $p |- ( ( A = B /\ B = C ) -> A = C ) $=
    ( wceq eqeq1 biimpar ) ABDACDBCDABCEF $.

  $( A transitive law for class equality.  (Contributed by NM, 20-May-2005.)
     (Proof shortened by Andrew Salmon, 25-May-2011.) $)
  eqtr2 $p |- ( ( A = B /\ A = C ) -> B = C ) $=
    ( wceq eqcom eqtr sylanb ) ABDBADACDBCDABEBACFG $.

  $( A transitive law for class equality.  (Contributed by NM, 20-May-2005.) $)
  eqtr3 $p |- ( ( A = C /\ B = C ) -> A = B ) $=
    ( wceq eqcom eqtr sylan2b ) BCDACDCBDABDBCEACBFG $.

  ${
    eqtri.1 $e |- A = B $.
    eqtri.2 $e |- B = C $.
    $( An equality transitivity inference.  (Contributed by NM,
       26-May-1993.) $)
    eqtri $p |- A = C $=
      ( wceq eqeq2i mpbi ) ABFACFDBCAEGH $.
  $}

  ${
    eqtr2i.1 $e |- A = B $.
    eqtr2i.2 $e |- B = C $.
    $( An equality transitivity inference.  (Contributed by NM,
       21-Feb-1995.) $)
    eqtr2i $p |- C = A $=
      ( eqtri eqcomi ) ACABCDEFG $.
  $}

  ${
    eqtr3i.1 $e |- A = B $.
    eqtr3i.2 $e |- A = C $.
    $( An equality transitivity inference.  (Contributed by NM, 6-May-1994.) $)
    eqtr3i $p |- B = C $=
      ( eqcomi eqtri ) BACABDFEG $.
  $}

  ${
    eqtr4i.1 $e |- A = B $.
    eqtr4i.2 $e |- C = B $.
    $( An equality transitivity inference.  (Contributed by NM,
       26-May-1993.) $)
    eqtr4i $p |- A = C $=
      ( eqcomi eqtri ) ABCDCBEFG $.
  $}

  $( Register '=' as an equality for its type (class). $)
  $( $j equality 'wceq' from 'eqid' 'eqcomi' 'eqtri'; $)

  ${
    3eqtri.1 $e |- A = B $.
    3eqtri.2 $e |- B = C $.
    3eqtri.3 $e |- C = D $.
    $( An inference from three chained equalities.  (Contributed by NM,
       29-Aug-1993.) $)
    3eqtri $p |- A = D $=
      ( eqtri ) ABDEBCDFGHH $.

    $( An inference from three chained equalities.  (Contributed by NM,
       3-Aug-2006.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
    3eqtrri $p |- D = A $=
      ( eqtri eqtr2i ) ACDABCEFHGI $.
  $}

  ${
    3eqtr2i.1 $e |- A = B $.
    3eqtr2i.2 $e |- C = B $.
    3eqtr2i.3 $e |- C = D $.
    $( An inference from three chained equalities.  (Contributed by NM,
       3-Aug-2006.) $)
    3eqtr2i $p |- A = D $=
      ( eqtr4i eqtri ) ACDABCEFHGI $.

    $( An inference from three chained equalities.  (Contributed by NM,
       3-Aug-2006.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
    3eqtr2ri $p |- D = A $=
      ( eqtr4i eqtr2i ) ACDABCEFHGI $.
  $}

  ${
    3eqtr3i.1 $e |- A = B $.
    3eqtr3i.2 $e |- A = C $.
    3eqtr3i.3 $e |- B = D $.
    $( An inference from three chained equalities.  (Contributed by NM,
       6-May-1994.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
    3eqtr3i $p |- C = D $=
      ( eqtr3i ) BCDABCEFHGH $.

    $( An inference from three chained equalities.  (Contributed by NM,
       15-Aug-2004.) $)
    3eqtr3ri $p |- D = C $=
      ( eqtr3i ) BDCGABCEFHH $.
  $}

  ${
    3eqtr4i.1 $e |- A = B $.
    3eqtr4i.2 $e |- C = A $.
    3eqtr4i.3 $e |- D = B $.
    $( An inference from three chained equalities.  (Contributed by NM,
       26-May-1993.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
    3eqtr4i $p |- C = D $=
      ( eqtr4i ) CADFDBAGEHH $.

    $( An inference from three chained equalities.  (Contributed by NM,
       2-Sep-1995.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
    3eqtr4ri $p |- D = C $=
      ( eqtr4i ) DACDBAGEHFH $.
  $}

  ${
    eqtrd.1 $e |- ( ph -> A = B ) $.
    eqtrd.2 $e |- ( ph -> B = C ) $.
    $( An equality transitivity deduction.  (Contributed by NM,
       21-Jun-1993.) $)
    eqtrd $p |- ( ph -> A = C ) $=
      ( wceq eqeq2d mpbid ) ABCGBDGEACDBFHI $.
  $}

  ${
    eqtr2d.1 $e |- ( ph -> A = B ) $.
    eqtr2d.2 $e |- ( ph -> B = C ) $.
    $( An equality transitivity deduction.  (Contributed by NM,
       18-Oct-1999.) $)
    eqtr2d $p |- ( ph -> C = A ) $=
      ( eqtrd eqcomd ) ABDABCDEFGH $.
  $}

  ${
    eqtr3d.1 $e |- ( ph -> A = B ) $.
    eqtr3d.2 $e |- ( ph -> A = C ) $.
    $( An equality transitivity equality deduction.  (Contributed by NM,
       18-Jul-1995.) $)
    eqtr3d $p |- ( ph -> B = C ) $=
      ( eqcomd eqtrd ) ACBDABCEGFH $.
  $}

  ${
    eqtr4d.1 $e |- ( ph -> A = B ) $.
    eqtr4d.2 $e |- ( ph -> C = B ) $.
    $( An equality transitivity equality deduction.  (Contributed by NM,
       18-Jul-1995.) $)
    eqtr4d $p |- ( ph -> A = C ) $=
      ( eqcomd eqtrd ) ABCDEADCFGH $.
  $}

  ${
    3eqtrd.1 $e |- ( ph -> A = B ) $.
    3eqtrd.2 $e |- ( ph -> B = C ) $.
    3eqtrd.3 $e |- ( ph -> C = D ) $.
    $( A deduction from three chained equalities.  (Contributed by NM,
       29-Oct-1995.) $)
    3eqtrd $p |- ( ph -> A = D ) $=
      ( eqtrd ) ABCEFACDEGHII $.

    $( A deduction from three chained equalities.  (Contributed by NM,
       4-Aug-2006.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
    3eqtrrd $p |- ( ph -> D = A ) $=
      ( eqtrd eqtr2d ) ABDEABCDFGIHJ $.
  $}

  ${
    3eqtr2d.1 $e |- ( ph -> A = B ) $.
    3eqtr2d.2 $e |- ( ph -> C = B ) $.
    3eqtr2d.3 $e |- ( ph -> C = D ) $.
    $( A deduction from three chained equalities.  (Contributed by NM,
       4-Aug-2006.) $)
    3eqtr2d $p |- ( ph -> A = D ) $=
      ( eqtr4d eqtrd ) ABDEABCDFGIHJ $.

    $( A deduction from three chained equalities.  (Contributed by NM,
       4-Aug-2006.) $)
    3eqtr2rd $p |- ( ph -> D = A ) $=
      ( eqtr4d eqtr2d ) ABDEABCDFGIHJ $.
  $}

  ${
    3eqtr3d.1 $e |- ( ph -> A = B ) $.
    3eqtr3d.2 $e |- ( ph -> A = C ) $.
    3eqtr3d.3 $e |- ( ph -> B = D ) $.
    $( A deduction from three chained equalities.  (Contributed by NM,
       4-Aug-1995.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
    3eqtr3d $p |- ( ph -> C = D ) $=
      ( eqtr3d ) ACDEABCDFGIHI $.

    $( A deduction from three chained equalities.  (Contributed by NM,
       14-Jan-2006.) $)
    3eqtr3rd $p |- ( ph -> D = C ) $=
      ( eqtr3d ) ACEDHABCDFGII $.
  $}

  ${
    3eqtr4d.1 $e |- ( ph -> A = B ) $.
    3eqtr4d.2 $e |- ( ph -> C = A ) $.
    3eqtr4d.3 $e |- ( ph -> D = B ) $.
    $( A deduction from three chained equalities.  (Contributed by NM,
       4-Aug-1995.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
    3eqtr4d $p |- ( ph -> C = D ) $=
      ( eqtr4d ) ADBEGAECBHFII $.

    $( A deduction from three chained equalities.  (Contributed by NM,
       21-Sep-1995.) $)
    3eqtr4rd $p |- ( ph -> D = C ) $=
      ( eqtr4d ) AEBDAECBHFIGI $.
  $}

  ${
    syl5eq.1 $e |- A = B $.
    syl5eq.2 $e |- ( ph -> B = C ) $.
    $( An equality transitivity deduction.  (Contributed by NM,
       21-Jun-1993.) $)
    syl5eq $p |- ( ph -> A = C ) $=
      ( wceq a1i eqtrd ) ABCDBCGAEHFI $.
  $}

  ${
    syl5req.1 $e |- A = B $.
    syl5req.2 $e |- ( ph -> B = C ) $.
    $( An equality transitivity deduction.  (Contributed by NM,
       29-Mar-1998.) $)
    syl5req $p |- ( ph -> C = A ) $=
      ( syl5eq eqcomd ) ABDABCDEFGH $.
  $}

  ${
    syl5eqr.1 $e |- B = A $.
    syl5eqr.2 $e |- ( ph -> B = C ) $.
    $( An equality transitivity deduction.  (Contributed by NM, 5-Aug-1993.) $)
    syl5eqr $p |- ( ph -> A = C ) $=
      ( eqcomi syl5eq ) ABCDCBEGFH $.
  $}

  ${
    syl5reqr.1 $e |- B = A $.
    syl5reqr.2 $e |- ( ph -> B = C ) $.
    $( An equality transitivity deduction.  (Contributed by NM,
       29-Mar-1998.) $)
    syl5reqr $p |- ( ph -> C = A ) $=
      ( eqcomi syl5req ) ABCDCBEGFH $.
  $}

  ${
    syl6eq.1 $e |- ( ph -> A = B ) $.
    syl6eq.2 $e |- B = C $.
    $( An equality transitivity deduction.  (Contributed by NM,
       21-Jun-1993.) $)
    syl6eq $p |- ( ph -> A = C ) $=
      ( wceq a1i eqtrd ) ABCDECDGAFHI $.
  $}

  ${
    syl6req.1 $e |- ( ph -> A = B ) $.
    syl6req.2 $e |- B = C $.
    $( An equality transitivity deduction.  (Contributed by NM,
       29-Mar-1998.) $)
    syl6req $p |- ( ph -> C = A ) $=
      ( syl6eq eqcomd ) ABDABCDEFGH $.
  $}

  ${
    syl6eqr.1 $e |- ( ph -> A = B ) $.
    syl6eqr.2 $e |- C = B $.
    $( An equality transitivity deduction.  (Contributed by NM,
       21-Jun-1993.) $)
    syl6eqr $p |- ( ph -> A = C ) $=
      ( eqcomi syl6eq ) ABCDEDCFGH $.
  $}

  ${
    syl6reqr.1 $e |- ( ph -> A = B ) $.
    syl6reqr.2 $e |- C = B $.
    $( An equality transitivity deduction.  (Contributed by NM,
       29-Mar-1998.) $)
    syl6reqr $p |- ( ph -> C = A ) $=
      ( eqcomi syl6req ) ABCDEDCFGH $.
  $}

  ${
    sylan9eq.1 $e |- ( ph -> A = B ) $.
    sylan9eq.2 $e |- ( ps -> B = C ) $.
    $( An equality transitivity deduction.  (Contributed by NM, 8-May-1994.)
       (Proof shortened by Andrew Salmon, 25-May-2011.) $)
    sylan9eq $p |- ( ( ph /\ ps ) -> A = C ) $=
      ( wceq eqtr syl2an ) ACDHDEHCEHBFGCDEIJ $.
  $}

  ${
    sylan9req.1 $e |- ( ph -> B = A ) $.
    sylan9req.2 $e |- ( ps -> B = C ) $.
    $( An equality transitivity deduction.  (Contributed by NM,
       23-Jun-2007.) $)
    sylan9req $p |- ( ( ph /\ ps ) -> A = C ) $=
      ( eqcomd sylan9eq ) ABCDEADCFHGI $.
  $}

  ${
    sylan9eqr.1 $e |- ( ph -> A = B ) $.
    sylan9eqr.2 $e |- ( ps -> B = C ) $.
    $( An equality transitivity deduction.  (Contributed by NM, 8-May-1994.) $)
    sylan9eqr $p |- ( ( ps /\ ph ) -> A = C ) $=
      ( wceq sylan9eq ancoms ) ABCEHABCDEFGIJ $.
  $}

  ${
    3eqtr3g.1 $e |- ( ph -> A = B ) $.
    3eqtr3g.2 $e |- A = C $.
    3eqtr3g.3 $e |- B = D $.
    $( A chained equality inference, useful for converting from definitions.
       (Contributed by NM, 15-Nov-1994.) $)
    3eqtr3g $p |- ( ph -> C = D ) $=
      ( syl5eqr syl6eq ) ADCEADBCGFIHJ $.
  $}

  ${
    3eqtr3a.1 $e |- A = B $.
    3eqtr3a.2 $e |- ( ph -> A = C ) $.
    3eqtr3a.3 $e |- ( ph -> B = D ) $.
    $( A chained equality inference, useful for converting from definitions.
       (Contributed by Mario Carneiro, 6-Nov-2015.) $)
    3eqtr3a $p |- ( ph -> C = D ) $=
      ( syl5eq eqtr3d ) ABDEGABCEFHIJ $.
  $}

  ${
    3eqtr4g.1 $e |- ( ph -> A = B ) $.
    3eqtr4g.2 $e |- C = A $.
    3eqtr4g.3 $e |- D = B $.
    $( A chained equality inference, useful for converting to definitions.
       (Contributed by NM, 21-Jun-1993.) $)
    3eqtr4g $p |- ( ph -> C = D ) $=
      ( syl5eq syl6eqr ) ADCEADBCGFIHJ $.
  $}

  ${
    3eqtr4a.1 $e |- A = B $.
    3eqtr4a.2 $e |- ( ph -> C = A ) $.
    3eqtr4a.3 $e |- ( ph -> D = B ) $.
    $( A chained equality inference, useful for converting to definitions.
       (Contributed by NM, 2-Feb-2007.)  (Proof shortened by Andrew Salmon,
       25-May-2011.) $)
    3eqtr4a $p |- ( ph -> C = D ) $=
      ( syl6eq eqtr4d ) ADCEADBCGFIHJ $.
  $}

  ${
    eq2tri.1 $e |- ( A = C -> D = F ) $.
    eq2tri.2 $e |- ( B = D -> C = G ) $.
    $( A compound transitive inference for class equality.  (Contributed by NM,
       22-Jan-2004.) $)
    eq2tri $p |- ( ( A = C /\ B = F ) <-> ( B = D /\ A = G ) ) $=
      ( wceq wa ancom eqeq2d pm5.32i 3bitr3i ) ACIZBDIZJPOJOBEIZJPAFIZJOPKOPQOD
      EBGLMPORPCFAHLMN $.
  $}

  ${
    $d z x $.  $d z y $.  $d z A $.
    $( Weaker version of ~ eleq1 (but more general than ~ elequ1 ) not
       depending on ~ ax-ext nor ~ df-cleq .  (Contributed by BJ,
       24-Jun-2019.) $)
    eleq1w $p |- ( x = y -> ( x e. A <-> y e. A ) ) $=
      ( vz weq cv wcel wa wex equequ2 anbi1d exbidv df-clel 3bitr4g ) ABEZDAEZD
      FCGZHZDIDBEZQHZDIAFZCGBFZCGORTDOPSQABDJKLDUACMDUBCMN $.

    $( Weaker version of ~ eleq2 (but more general than ~ elequ2 ) not
       depending on ~ ax-ext nor ~ df-cleq .  (Contributed by BJ,
       29-Sep-2019.) $)
    eleq2w $p |- ( x = y -> ( A e. x <-> A e. y ) ) $=
      ( vz cv wceq wcel wa wex elequ2 anbi2d exbidv df-clel 3bitr4g ) AEZBEZFZD
      EZCFZROGZHZDISRPGZHZDICOGCPGQUAUCDQTUBSABDJKLDCOMDCPMN $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.  $d x ph $.
    eleq1d.1 $e |- ( ph -> A = B ) $.
    $( Deduction from equality to equivalence of membership.  (Contributed by
       NM, 21-Jun-1993.)  Allow shortening of ~ eleq1 .  (Revised by Wolf
       Lammen, 20-Nov-2019.) $)
    eleq1d $p |- ( ph -> ( A e. C <-> B e. C ) ) $=
      ( vx cv wceq wcel wa wex eqeq2d anbi1d exbidv df-clel 3bitr4g ) AFGZBHZQD
      IZJZFKQCHZSJZFKBDICDIATUBFARUASABCQELMNFBDOFCDOP $.

    $( Deduction from equality to equivalence of membership.  (Contributed by
       NM, 27-Dec-1993.)  Reduce dependencies on axioms.  (Revised by Wolf
       Lammen, 5-Dec-2019.) $)
    eleq2d $p |- ( ph -> ( C e. A <-> C e. B ) ) $=
      ( vx cv wceq wa wex wb wal dfcleq sylib anbi2 alexbii syl df-clel 3bitr4g
      wcel ) AFGZDHZUABTZIZFJZUBUACTZIZFJZDBTDCTAUCUFKZFLZUEUHKABCHUJEFBCMNUIUD
      UGFUCUFUBOPQFDBRFDCRS $.

    $( Alternate proof of ~ eleq2d , shorter at the expense of requiring
       ~ ax-12 .  (Contributed by NM, 27-Dec-1993.)  (Revised by Wolf Lammen,
       20-Nov-2019.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    eleq2dALT $p |- ( ph -> ( C e. A <-> C e. B ) ) $=
      ( vx cv wceq wcel wa wex wal dfcleq 19.21bi anbi2d exbidv df-clel 3bitr4g
      wb sylib ) AFGZDHZUABIZJZFKUBUACIZJZFKDBIDCIAUDUFFAUCUEUBAUCUESZFABCHUGFL
      EFBCMTNOPFDBQFDCQR $.
  $}

  $( Equality implies equivalence of membership.  (Contributed by NM,
     26-May-1993.)  (Proof shortened by Wolf Lammen, 20-Nov-2019.) $)
  eleq1 $p |- ( A = B -> ( A e. C <-> B e. C ) ) $=
    ( wceq id eleq1d ) ABDZABCGEF $.

  $( Equality implies equivalence of membership.  (Contributed by NM,
     26-May-1993.)  (Proof shortened by Wolf Lammen, 20-Nov-2019.) $)
  eleq2 $p |- ( A = B -> ( C e. A <-> C e. B ) ) $=
    ( wceq id eleq2d ) ABDZABCGEF $.

  $( Equality implies equivalence of membership.  (Contributed by NM,
     31-May-1999.) $)
  eleq12 $p |- ( ( A = B /\ C = D ) -> ( A e. C <-> B e. D ) ) $=
    ( wceq wcel eleq1 eleq2 sylan9bb ) ABEACFBCFCDEBDFABCGCDBHI $.

  ${
    eleq1i.1 $e |- A = B $.
    $( Inference from equality to equivalence of membership.  (Contributed by
       NM, 21-Jun-1993.) $)
    eleq1i $p |- ( A e. C <-> B e. C ) $=
      ( wceq wcel wb eleq1 ax-mp ) ABEACFBCFGDABCHI $.

    $( Inference from equality to equivalence of membership.  (Contributed by
       NM, 26-May-1993.) $)
    eleq2i $p |- ( C e. A <-> C e. B ) $=
      ( wceq wcel wb eleq2 ax-mp ) ABECAFCBFGDABCHI $.

    ${
      eleq12i.2 $e |- C = D $.
      $( Inference from equality to equivalence of membership.  (Contributed by
         NM, 31-May-1994.) $)
      eleq12i $p |- ( A e. C <-> B e. D ) $=
        ( wcel eleq2i eleq1i bitri ) ACGADGBDGCDAFHABDEIJ $.

      $( Theorem eleq12i is the congruence law for elementhood. $)
      $( $j congruence 'eleq12i'; $)
    $}
  $}

  ${
    eqneltri.1 $e |- A = B $.
    eqneltri.2 $e |- -. B e. C $.
    $( If a class is not an element of another class, an equal class is also
       not an element.  (Contributed by Glauco Siliprandi, 3-Jan-2021.) $)
    eqneltri $p |- -. A e. C $=
      ( wcel eleq1i mtbir ) ACFBCFEABCDGH $.
  $}

  ${
    eleq12d.1 $e |- ( ph -> A = B ) $.
    eleq12d.2 $e |- ( ph -> C = D ) $.
    $( Deduction from equality to equivalence of membership.  (Contributed by
       NM, 31-May-1994.) $)
    eleq12d $p |- ( ph -> ( A e. C <-> B e. D ) ) $=
      ( wcel eleq2d eleq1d bitrd ) ABDHBEHCEHADEBGIABCEFJK $.
  $}

  $( A transitive-type law relating membership and equality.  (Contributed by
     NM, 9-Apr-1994.) $)
  eleq1a $p |- ( A e. B -> ( C = A -> C e. B ) ) $=
    ( wceq wcel eleq1 biimprcd ) CADCBEABECABFG $.

  ${
    eqeltri.1 $e |- A = B $.
    eqeltri.2 $e |- B e. C $.
    $( Substitution of equal classes into membership relation.  (Contributed by
       NM, 21-Jun-1993.) $)
    eqeltri $p |- A e. C $=
      ( wcel eleq1i mpbir ) ACFBCFEABCDGH $.
  $}

  ${
    eqeltrri.1 $e |- A = B $.
    eqeltrri.2 $e |- A e. C $.
    $( Substitution of equal classes into membership relation.  (Contributed by
       NM, 21-Jun-1993.) $)
    eqeltrri $p |- B e. C $=
      ( eqcomi eqeltri ) BACABDFEG $.
  $}

  ${
    eleqtri.1 $e |- A e. B $.
    eleqtri.2 $e |- B = C $.
    $( Substitution of equal classes into membership relation.  (Contributed by
       NM, 15-Jul-1993.) $)
    eleqtri $p |- A e. C $=
      ( wcel eleq2i mpbi ) ABFACFDBCAEGH $.
  $}

  ${
    eleqtrri.1 $e |- A e. B $.
    eleqtrri.2 $e |- C = B $.
    $( Substitution of equal classes into membership relation.  (Contributed by
       NM, 15-Jul-1993.) $)
    eleqtrri $p |- A e. C $=
      ( eqcomi eleqtri ) ABCDCBEFG $.
  $}

  ${
    eqeltrd.1 $e |- ( ph -> A = B ) $.
    eqeltrd.2 $e |- ( ph -> B e. C ) $.
    $( Substitution of equal classes into membership relation, deduction form.
       (Contributed by Raph Levien, 10-Dec-2002.) $)
    eqeltrd $p |- ( ph -> A e. C ) $=
      ( wcel eleq1d mpbird ) ABDGCDGFABCDEHI $.
  $}

  ${
    eqeltrrd.1 $e |- ( ph -> A = B ) $.
    eqeltrrd.2 $e |- ( ph -> A e. C ) $.
    $( Deduction that substitutes equal classes into membership.  (Contributed
       by NM, 14-Dec-2004.) $)
    eqeltrrd $p |- ( ph -> B e. C ) $=
      ( eqcomd eqeltrd ) ACBDABCEGFH $.
  $}

  ${
    eleqtrd.1 $e |- ( ph -> A e. B ) $.
    eleqtrd.2 $e |- ( ph -> B = C ) $.
    $( Deduction that substitutes equal classes into membership.  (Contributed
       by NM, 14-Dec-2004.) $)
    eleqtrd $p |- ( ph -> A e. C ) $=
      ( wcel eleq2d mpbid ) ABCGBDGEACDBFHI $.
  $}

  ${
    eleqtrrd.1 $e |- ( ph -> A e. B ) $.
    eleqtrrd.2 $e |- ( ph -> C = B ) $.
    $( Deduction that substitutes equal classes into membership.  (Contributed
       by NM, 14-Dec-2004.) $)
    eleqtrrd $p |- ( ph -> A e. C ) $=
      ( eqcomd eleqtrd ) ABCDEADCFGH $.
  $}

  ${
    syl5eqel.1 $e |- A = B $.
    syl5eqel.2 $e |- ( ph -> B e. C ) $.
    $( A membership and equality inference.  (Contributed by NM,
       4-Jan-2006.) $)
    syl5eqel $p |- ( ph -> A e. C ) $=
      ( wceq a1i eqeltrd ) ABCDBCGAEHFI $.
  $}

  ${
    syl5eqelr.1 $e |- B = A $.
    syl5eqelr.2 $e |- ( ph -> B e. C ) $.
    $( A membership and equality inference.  (Contributed by NM,
       4-Jan-2006.) $)
    syl5eqelr $p |- ( ph -> A e. C ) $=
      ( eqcomi syl5eqel ) ABCDCBEGFH $.
  $}

  ${
    syl5eleq.1 $e |- A e. B $.
    syl5eleq.2 $e |- ( ph -> B = C ) $.
    $( A membership and equality inference.  (Contributed by NM,
       4-Jan-2006.) $)
    syl5eleq $p |- ( ph -> A e. C ) $=
      ( wcel a1i eleqtrd ) ABCDBCGAEHFI $.
  $}

  ${
    syl5eleqr.1 $e |- A e. B $.
    syl5eleqr.2 $e |- ( ph -> C = B ) $.
    $( A membership and equality inference.  (Contributed by NM,
       4-Jan-2006.) $)
    syl5eleqr $p |- ( ph -> A e. C ) $=
      ( eqcomd syl5eleq ) ABCDEADCFGH $.
  $}

  ${
    syl6eqel.1 $e |- ( ph -> A = B ) $.
    syl6eqel.2 $e |- B e. C $.
    $( A membership and equality inference.  (Contributed by NM,
       4-Jan-2006.) $)
    syl6eqel $p |- ( ph -> A e. C ) $=
      ( wcel a1i eqeltrd ) ABCDECDGAFHI $.
  $}

  ${
    syl6eqelr.1 $e |- ( ph -> B = A ) $.
    syl6eqelr.2 $e |- B e. C $.
    $( A membership and equality inference.  (Contributed by NM,
       4-Jan-2006.) $)
    syl6eqelr $p |- ( ph -> A e. C ) $=
      ( eqcomd syl6eqel ) ABCDACBEGFH $.
  $}

  ${
    syl6eleq.1 $e |- ( ph -> A e. B ) $.
    syl6eleq.2 $e |- B = C $.
    $( A membership and equality inference.  (Contributed by NM,
       4-Jan-2006.) $)
    syl6eleq $p |- ( ph -> A e. C ) $=
      ( wceq a1i eleqtrd ) ABCDECDGAFHI $.
  $}

  ${
    syl6eleqr.1 $e |- ( ph -> A e. B ) $.
    syl6eleqr.2 $e |- C = B $.
    $( A membership and equality inference.  (Contributed by NM,
       24-Apr-2005.) $)
    syl6eleqr $p |- ( ph -> A e. C ) $=
      ( eqcomi syl6eleq ) ABCDEDCFGH $.
  $}

  ${
    3eltr3i.1 $e |- A e. B $.
    3eltr3i.2 $e |- A = C $.
    3eltr3i.3 $e |- B = D $.
    $( Substitution of equal classes into membership relation.  (Contributed by
       Mario Carneiro, 6-Jan-2017.) $)
    3eltr3i $p |- C e. D $=
      ( eleqtri eqeltrri ) ACDFABDEGHI $.
  $}

  ${
    3eltr4i.1 $e |- A e. B $.
    3eltr4i.2 $e |- C = A $.
    3eltr4i.3 $e |- D = B $.
    $( Substitution of equal classes into membership relation.  (Contributed by
       Mario Carneiro, 6-Jan-2017.) $)
    3eltr4i $p |- C e. D $=
      ( eleqtrri eqeltri ) CADFABDEGHI $.
  $}

  ${
    3eltr3d.1 $e |- ( ph -> A e. B ) $.
    3eltr3d.2 $e |- ( ph -> A = C ) $.
    3eltr3d.3 $e |- ( ph -> B = D ) $.
    $( Substitution of equal classes into membership relation.  (Contributed by
       Mario Carneiro, 6-Jan-2017.) $)
    3eltr3d $p |- ( ph -> C e. D ) $=
      ( eleqtrd eqeltrrd ) ABDEGABCEFHIJ $.
  $}

  ${
    3eltr4d.1 $e |- ( ph -> A e. B ) $.
    3eltr4d.2 $e |- ( ph -> C = A ) $.
    3eltr4d.3 $e |- ( ph -> D = B ) $.
    $( Substitution of equal classes into membership relation.  (Contributed by
       Mario Carneiro, 6-Jan-2017.) $)
    3eltr4d $p |- ( ph -> C e. D ) $=
      ( eleqtrrd eqeltrd ) ADBEGABCEFHIJ $.
  $}

  ${
    3eltr3g.1 $e |- ( ph -> A e. B ) $.
    3eltr3g.2 $e |- A = C $.
    3eltr3g.3 $e |- B = D $.
    $( Substitution of equal classes into membership relation.  (Contributed by
       Mario Carneiro, 6-Jan-2017.)  (Proof shortened by Wolf Lammen,
       23-Nov-2019.) $)
    3eltr3g $p |- ( ph -> C e. D ) $=
      ( syl5eqelr syl6eleq ) ADCEADBCGFIHJ $.
  $}

  ${
    3eltr4g.1 $e |- ( ph -> A e. B ) $.
    3eltr4g.2 $e |- C = A $.
    3eltr4g.3 $e |- D = B $.
    $( Substitution of equal classes into membership relation.  (Contributed by
       Mario Carneiro, 6-Jan-2017.)  (Proof shortened by Wolf Lammen,
       23-Nov-2019.) $)
    3eltr4g $p |- ( ph -> C e. D ) $=
      ( syl5eqel syl6eleqr ) ADCEADBCGFIHJ $.
  $}

  ${
    eleq2s.1 $e |- ( A e. B -> ph ) $.
    eleq2s.2 $e |- C = B $.
    $( Substitution of equal classes into a membership antecedent.
       (Contributed by Jonathan Ben-Naim, 3-Jun-2011.) $)
    eleq2s $p |- ( A e. C -> ph ) $=
      ( wcel eleq2i sylbi ) BDGBCGADCBFHEI $.
  $}

  ${
    eqneltrd.1 $e |- ( ph -> A = B ) $.
    eqneltrd.2 $e |- ( ph -> -. B e. C ) $.
    $( If a class is not an element of another class, an equal class is also
       not an element.  Deduction form.  (Contributed by David Moews,
       1-May-2017.) $)
    eqneltrd $p |- ( ph -> -. A e. C ) $=
      ( wcel eleq1d mtbird ) ABDGCDGFABCDEHI $.
  $}

  ${
    eqneltrrd.1 $e |- ( ph -> A = B ) $.
    eqneltrrd.2 $e |- ( ph -> -. A e. C ) $.
    $( If a class is not an element of another class, an equal class is also
       not an element.  Deduction form.  (Contributed by David Moews,
       1-May-2017.)  (Proof shortened by Wolf Lammen, 13-Nov-2019.) $)
    eqneltrrd $p |- ( ph -> -. B e. C ) $=
      ( eqcomd eqneltrd ) ACBDABCEGFH $.
  $}

  ${
    neleqtrd.1 $e |- ( ph -> -. C e. A ) $.
    neleqtrd.2 $e |- ( ph -> A = B ) $.
    $( If a class is not an element of another class, it is also not an element
       of an equal class.  Deduction form.  (Contributed by David Moews,
       1-May-2017.) $)
    neleqtrd $p |- ( ph -> -. C e. B ) $=
      ( wcel eleq2d mtbid ) ADBGDCGEABCDFHI $.
  $}

  ${
    neleqtrrd.1 $e |- ( ph -> -. C e. B ) $.
    neleqtrrd.2 $e |- ( ph -> A = B ) $.
    $( If a class is not an element of another class, it is also not an element
       of an equal class.  Deduction form.  (Contributed by David Moews,
       1-May-2017.)  (Proof shortened by Wolf Lammen, 13-Nov-2019.) $)
    neleqtrrd $p |- ( ph -> -. C e. A ) $=
      ( eqcomd neleqtrd ) ACBDEABCFGH $.
  $}

  ${
    $d y A $.  $d y B $.  $d x y $.
    cleqh.1 $e |- ( y e. A -> A. x y e. A ) $.
    cleqh.2 $e |- ( y e. B -> A. x y e. B ) $.
    $( Establish equality between classes, using bound-variable hypotheses
       instead of distinct variable conditions.  See also ~ cleqf .
       (Contributed by NM, 26-May-1993.)  (Proof shortened by Wolf Lammen,
       14-Nov-2019.)  Remove dependency on ~ ax-13 .  (Revised by BJ,
       30-Nov-2020.) $)
    cleqh $p |- ( A = B <-> A. x ( x e. A <-> x e. B ) ) $=
      ( wceq cv wcel wal dfcleq nfv nf5i nfbi weq eleq1w bibi12d cbvalv1 bitr4i
      wb ) CDGBHZCIZUADIZTZBJAHZCIZUEDIZTZAJBCDKUHUDABUHBLUBUCAUBAEMUCAFMNABOUF
      UBUGUCABCPABDPQRS $.
  $}

  $( A way of showing two classes are not equal.  (Contributed by NM,
     1-Apr-1997.) $)
  nelneq $p |- ( ( A e. C /\ -. B e. C ) -> -. A = B ) $=
    ( wcel wceq eleq1 biimpcd con3dimp ) ACDZABEZBCDZJIKABCFGH $.

  $( A way of showing two classes are not equal.  (Contributed by NM,
     12-Jan-2002.) $)
  nelneq2 $p |- ( ( A e. B /\ -. A e. C ) -> -. B = C ) $=
    ( wcel wceq eleq2 biimpcd con3dimp ) ABDZBCEZACDZJIKBCAFGH $.

  ${
    $d y A $.  $d w y $.  $d w A $.  $d x w $.
    $( Substitution applied to an atomic wff (class version of ~ equsb3 ).
       (Contributed by Rodolfo Medina, 28-Apr-2010.) $)
    eqsb3 $p |- ( [ x / y ] y = A <-> x = A ) $=
      ( vw cv wceq eqeq1 sbievw2 ) BEZCFAEZCFDEZCFBADIKCGKJCGH $.
  $}

  ${
    $d w y A $.  $d w x $.
    $( Substitution applied to an atomic wff (class version of ~ elsb3 ).
       (Contributed by Rodolfo Medina, 28-Apr-2010.)  (Proof shortened by
       Andrew Salmon, 14-Jun-2011.) $)
    clelsb3 $p |- ( [ x / y ] y e. A <-> x e. A ) $=
      ( vw cv wcel eleq1w sbievw2 ) BECFAECFDECFBADBDCGDACGH $.

    $d x y $.
    $( Obsolete version of ~ clelsb3 as of 29-Jul-2023.  (Contributed by Wolf
       Lammen, 30-Apr-2023.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    clelsb3vOLD $p |- ( [ x / y ] y e. A <-> x e. A ) $=
      ( vw cv wcel wsb sbco2vv eleq1w sbievw sbbii 3bitr3i ) DECFZDBGZBAGMDAGBE
      CFZBAGAECFZMDABHNOBAMODBDBCIJKMPDADACIJL $.
  $}

  ${
    hbxfr.1 $e |- A = B $.
    hbxfr.2 $e |- ( y e. B -> A. x y e. B ) $.
    $( A utility lemma to transfer a bound-variable hypothesis builder into a
       definition.  See ~ hbxfrbi for equivalence version.  (Contributed by NM,
       21-Aug-2007.) $)
    hbxfreq $p |- ( y e. A -> A. x y e. A ) $=
      ( cv wcel eleq2i hbxfrbi ) BGZCHKDHACDKEIFJ $.
  $}

  ${
    $d y A $.  $d x z $.
    hblem.1 $e |- ( y e. A -> A. x y e. A ) $.
    $( Change the free variable of a hypothesis builder.  Lemma for ~ nfcrii .
       (Contributed by NM, 21-Jun-1993.)  (Revised by Andrew Salmon,
       11-Jul-2011.) $)
    hblem $p |- ( z e. A -> A. x z e. A ) $=
      ( cv wcel wsb wal hbsb clelsb3 albii 3imtr3i ) BFDGZBCHZOAICFDGZPAINBCAEJ
      CBDKZOPAQLM $.
  $}

  ${
    $d x A y $.  $d ph y $.
    $( Equality of a class variable and a class abstraction (also called a
       class builder).  Theorem 5.1 of [Quine] p. 34.  This theorem shows the
       relationship between expressions with class abstractions and expressions
       with class variables.  Note that ~ abbi and its relatives are among
       those useful for converting theorems with class variables to equivalent
       theorems with wff variables, by first substituting a class abstraction
       for each class variable.

       Class variables can always be eliminated from a theorem to result in an
       equivalent theorem with wff variables, and vice-versa.  The idea is
       roughly as follows.  To convert a theorem with a wff variable ` ph `
       (that has a free variable ` x ` ) to a theorem with a class variable
       ` A ` , we substitute ` x e. A ` for ` ph ` throughout and simplify,
       where ` A ` is a new class variable not already in the wff.  An example
       is the conversion of ~ zfauscl to ~ inex1 (look at the instance of
       ~ zfauscl that occurs in the proof of ~ inex1 ).  Conversely, to convert
       a theorem with a class variable ` A ` to one with ` ph ` , we substitute
       ` { x | ph } ` for ` A ` throughout and simplify, where ` x ` and ` ph `
       are new setvar and wff variables not already in the wff.  Examples
       include ~ dfsymdif2 and ~ cp ; the latter derives a formula containing
       wff variables from substitution instances of the class variables in its
       equivalent formulation ~ cplem2 .  For more information on class
       variables, see Quine pp. 15-21 and/or Takeuti and Zaring pp. 10-13.
       (Contributed by NM, 26-May-1993.) $)
    abeq2 $p |- ( A = { x | ph } <-> A. x ( x e. A <-> ph ) ) $=
      ( vy cab wceq cv wcel wb wal ax-5 hbab1 cleqh abid bibi2i albii bitri ) C
      ABEZFBGZCHZSRHZIZBJTAIZBJBDCRDGCHBKABDLMUBUCBUAATABNOPQ $.
  $}

  ${
    $d x A $.
    $( Equality of a class variable and a class abstraction.  Commuted form of
       ~ abeq2 .  (Contributed by NM, 20-Aug-1993.) $)
    abeq1 $p |- ( { x | ph } = A <-> A. x ( ph <-> x e. A ) ) $=
      ( cab wceq cv wcel wb wal abeq2 eqcom bicom albii 3bitr4i ) CABDZEBFCGZAH
      ZBIOCEAPHZBIABCJOCKRQBAPLMN $.
  $}

  ${
    abeq2d.1 $e |- ( ph -> A = { x | ps } ) $.
    $( Equality of a class variable and a class abstraction (deduction form of
       ~ abeq2 ).  (Contributed by NM, 16-Nov-1995.) $)
    abeq2d $p |- ( ph -> ( x e. A <-> ps ) ) $=
      ( cv wcel cab eleq2d abid syl6bb ) ACFZDGLBCHZGBADMLEIBCJK $.
  $}

  ${
    abeq2i.1 $e |- A = { x | ph } $.
    $( Equality of a class variable and a class abstraction (inference form).
       (Contributed by NM, 3-Apr-1996.)  (Proof shortened by Wolf Lammen,
       15-Nov-2019.) $)
    abeq2i $p |- ( x e. A <-> ph ) $=
      ( cv wcel wb wtru cab wceq a1i abeq2d mptru ) BECFAGHABCCABIJHDKLM $.
  $}

  ${
    abeq1i.1 $e |- { x | ph } = A $.
    $( Equality of a class variable and a class abstraction (inference form).
       (Contributed by NM, 31-Jul-1994.)  (Proof shortened by Wolf Lammen,
       15-Nov-2019.) $)
    abeq1i $p |- ( ph <-> x e. A ) $=
      ( cv wcel cab eqcomi abeq2i bicomi ) BECFAABCABGCDHIJ $.
  $}

  ${
    $d x y A $.  $d ph x y $.  $d ps y $.
    abbi2dv.1 $e |- ( ph -> ( x e. A <-> ps ) ) $.
    $( Deduction from a wff to a class abstraction.  (Contributed by NM,
       9-Jul-1994.)  Avoid ~ ax-11 .  (Revised by Wolf Lammen, 6-May-2023.) $)
    abbi2dv $p |- ( ph -> A = { x | ps } ) $=
      ( vy cab cv wcel wsb sbbidv clelsb3 bicomi df-clab 3bitr4g eqrdv ) AFDBCG
      ZACHDIZCFJZBCFJFHZDIZTQIARBCFEKSUAFCDLMBFCNOP $.
  $}

  ${
    $d x A $.  $d ph x $.
    abbi2dvOLD.1 $e |- ( ph -> ( x e. A <-> ps ) ) $.
    $( Obsolete version of ~ abbi2dv as of 6-May-2023.  (Contributed by NM,
       9-Jul-1994.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    abbi2dvOLD $p |- ( ph -> A = { x | ps } ) $=
      ( cv wcel wb wal cab wceq alrimiv abeq2 sylibr ) ACFDGBHZCIDBCJKAOCELBCDM
      N $.
  $}

  ${
    $d x A $.  $d ph x $.
    abbi1dv.1 $e |- ( ph -> ( ps <-> x e. A ) ) $.
    $( Deduction from a wff to a class abstraction.  (Contributed by NM,
       9-Jul-1994.)  (Proof shortened by Wolf Lammen, 16-Nov-2019.) $)
    abbi1dv $p |- ( ph -> { x | ps } = A ) $=
      ( cab cv wcel bicomd abbi2dv eqcomd ) ADBCFABCDABCGDHEIJK $.
  $}

  ${
    $d x A $.
    abbi2i.1 $e |- ( x e. A <-> ph ) $.
    $( Equality of a class variable and a class abstraction (inference form).
       (Contributed by NM, 26-May-1993.)  Avoid ~ ax-11 .  (Revised by Wolf
       Lammen, 6-May-2023.) $)
    abbi2i $p |- A = { x | ph } $=
      ( cab wceq wtru cv wcel wb a1i abbi2dv mptru ) CABEFGABCBHCIAJGDKLM $.
  $}

  ${
    $d x A $.
    abbi2iOLD.1 $e |- ( x e. A <-> ph ) $.
    $( Obsolete version of ~ abbi2i as of 6-May-2023.  (Contributed by NM,
       26-May-1993.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    abbi2iOLD $p |- A = { x | ph } $=
      ( cab wceq cv wcel wb abeq2 mpgbir ) CABEFBGCHAIBABCJDK $.
  $}

  ${
    $d ph y $.  $d ps y $.  $d x y $.
    $( Equivalent wff's correspond to equal class abstractions.  (Contributed
       by NM, 25-Nov-2013.)  (Revised by Mario Carneiro, 11-Aug-2016.)  (Proof
       shortened by Wolf Lammen, 16-Nov-2019.) $)
    abbi $p |- ( A. x ( ph <-> ps ) <-> { x | ph } = { x | ps } ) $=
      ( vy cab wceq cv wcel wb wal hbab1 cleqh abid bibi12i albii bitr2i ) ACEZ
      BCEZFCGZQHZSRHZIZCJABIZCJCDQRACDKBCDKLUBUCCTAUABACMBCMNOP $.
  $}

  ${
    $d x y $.  $d y ph $.  $d y ps $.  $d y ch $.
    abbilem.1 $e |- ( ph -> ( [ y / x ] ps <-> [ y / x ] ch ) ) $.
    $( Replace substitution expressions with class abstractions.  (Contributed
       by Wolf Lammen, 8-May-2023.) $)
    abbilem $p |- ( ph -> { x | ps } = { x | ch } ) $=
      ( cab wsb cv wcel df-clab 3bitr4g eqrdv ) AEBDGZCDGZABDEHCDEHEIZNJPOJFBED
      KCEDKLM $.
  $}

  ${
    abbid.1 $e |- F/ x ph $.
    abbid.2 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Equivalent wff's yield equal class abstractions (deduction form).
       (Contributed by NM, 21-Jun-1993.)  (Revised by Mario Carneiro,
       7-Oct-2016.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    abbidOLD $p |- ( ph -> { x | ps } = { x | ch } ) $=
      ( wb wal cab wceq alrimi abbi sylib ) ABCGZDHBDICDIJANDEFKBCDLM $.

    $d ph y $.  $d ps y $.  $d ch y $.  $d x y $.
    $( Equivalent wff's yield equal class abstractions (deduction form).
       (Contributed by NM, 21-Jun-1993.)  (Revised by Mario Carneiro,
       7-Oct-2016.)  Avoid ~ ax-11 and ~ ax-10 .  (Revised by Wolf Lammen,
       6-May-2023.) $)
    abbid $p |- ( ph -> { x | ps } = { x | ch } ) $=
      ( vy sbbid abbilem ) ABCDGABCDGEFHI $.
  $}

  ${
    $d x y ph $.  $d y ps $.  $d y ch $.
    abbidv.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Equivalent wff's yield equal class abstractions (deduction form).
       (Contributed by NM, 10-Aug-1993.)  Avoid ~ ax-12 , based on an idea of
       Steven Nguyen.  (Revised by Wolf Lammen, 6-May-2023.) $)
    abbidv $p |- ( ph -> { x | ps } = { x | ch } ) $=
      ( vy sbbidv abbilem ) ABCDFABCDFEGH $.
  $}

  ${
    $d x ph $.
    abbidvOLD.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Obsolete version of ~ abbidv as of 6-May-2023.  (Contributed by NM,
       10-Aug-1993.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    abbidvOLD $p |- ( ph -> { x | ps } = { x | ch } ) $=
      ( nfv abbid ) ABCDADFEG $.
  $}

  ${
    abbii.1 $e |- ( ph <-> ps ) $.
    $( Equivalent wff's yield equal class abstractions (inference form).
       (Contributed by NM, 26-May-1993.)  Remove dependency on ~ ax-10 ,
       ~ ax-11 , and ~ ax-12 .  (Revised by Steven Nguyen, 3-May-2023.) $)
    abbii $p |- { x | ph } = { x | ps } $=
      ( cab wceq wtru wb a1i abbidv mptru ) ACEBCEFGABCABHGDIJK $.

    $( Theorem abbii is the congruence law for class abstraction. $)
    $( $j congruence 'abbii'; $)
  $}

  ${
    $d ph y $.  $d ps y $.  $d x y $.
    abbiiOLD.1 $e |- ( ph <-> ps ) $.
    $( Obsolete version of ~ abbii as of 7-May-2023.  (Contributed by NM,
       26-May-1993.)  Remove dependency on ~ ax-10 , ~ ax-11 , and ~ ax-12 .
       (Revised by Steven Nguyen, 3-May-2023.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    abbiiOLD $p |- { x | ph } = { x | ps } $=
      ( vy cab wsb cv wcel sbbii df-clab 3bitr4i eqriv ) EACFZBCFZACEGBCEGEHZNI
      POIABCEDJAECKBECKLM $.
  $}

  ${
    abbiiOLDOLD.1 $e |- ( ph <-> ps ) $.
    $( Obsolete version of ~ abbii as of 3-May-2023.  Equivalent wff's yield
       equal class abstractions (inference form).  (Contributed by NM,
       26-May-1993.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    abbiiOLDOLD $p |- { x | ph } = { x | ps } $=
      ( wb cab wceq abbi mpgbi ) ABEACFBCFGCABCHDI $.
  $}

  ${
    $d x A $.
    $( Every class is equal to a class abstraction (the class of sets belonging
       to it).  Theorem 5.2 of [Quine] p. 35.  This is a generalization to
       classes of ~ cvjust .  The proof does not rely on ~ cvjust , so ~ cvjust
       could be proved as a special instance of it.  Note however that ~ abid1
       necessarily relies on ~ df-clel , whereas ~ cvjust does not.

       This theorem requires ~ ax-ext , ~ df-clab , ~ df-cleq , ~ df-clel , but
       to prove that any specific class term not containing class variables is
       a setvar or can be written as (is equal to) a class abstraction does not
       require these $a-statements.  This last fact is a metatheorem,
       consequence of the fact that the only $a-statements with typecode
       ` class ` are ~ cv , ~ cab and statements corresponding to defined class
       constructors.

       Note on the simultaneous presence in set.mm of this ~ abid1 and its
       commuted form ~ abid2 :  It is rare that two forms so closely related
       both appear in set.mm.  Indeed, such equalities are generally used in
       later proofs as parts of transitive inferences, and with the many
       variants of ~ eqtri (search for *eqtr*), it would be rare that either
       one would shorten a proof compared to the other.  There is typically a
       choice between (what we call) a "definitional form" where the shorter
       expression is on the lhs, and a "computational form" where the shorter
       expression is on the rhs.  An example is ~ df-2 versus ~ 1p1e2 .  We do
       not need ~ 1p1e2 , but because it occurs "naturally" in computations, it
       can be useful to have it directly, together with a uniform set of
       1-digit operations like ~ 1p2e3 , etc.  In most cases, we do not need
       both a definitional and a computational forms.  A definitional form
       would favor consistency with genuine definitions, while a computational
       form is often more natural.  The situation is similar with
       biconditionals in propositional calculus: see for instance ~ pm4.24 and
       ~ anidm , while other biconditionals generally appear in a single form
       (either definitional, but more often computational).  In the present
       case, the equality is important enough that both ~ abid1 and ~ abid2 are
       in set.mm.

       (Contributed by NM, 26-Dec-1993.)  (Revised by BJ, 10-Nov-2020.) $)
    abid1 $p |- A = { x | x e. A } $=
      ( cv wcel biid abbi2i ) ACBDZABGEF $.
  $}

  ${
    $d x A $.
    $( A simplification of class abstraction.  Commuted form of ~ abid1 .  See
       comments there.  (Contributed by NM, 26-Dec-1993.) $)
    abid2 $p |- { x | x e. A } = A $=
      ( cv wcel cab abid1 eqcomi ) BACBDAEABFG $.
  $}

  ${
    $d y z ph $.  $d x z ps $.  $d x y $.
    cbvabv.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Rule used to change bound variables, using implicit substitution.
       Version of ~ cbvab with disjoint variable conditions requiring fewer
       axioms.  (Contributed by NM, 26-May-1999.)  Require ` x ` , ` y ` be
       disjoint to avoid ~ ax-11 and ~ ax-13 .  (Revised by Steven Nguyen,
       4-Dec-2022.) $)
    cbvabv $p |- { x | ph } = { y | ps } $=
      ( vz cab wsb cv wcel sbco2vv sbievw sbbii bitr3i df-clab 3bitr4i eqriv )
      FACGZBDGZACFHZBDFHZFIZRJUBSJTACDHZDFHUAACFDKUCBDFABCDELMNAFCOBFDOPQ $.
  $}

  ${
    $d x z $.  $d y z $.  $d ph z $.  $d ps z $.
    cbvab.1 $e |- F/ y ph $.
    cbvab.2 $e |- F/ x ps $.
    cbvab.3 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Rule used to change bound variables, using implicit substitution.
       (Contributed by Andrew Salmon, 11-Jul-2011.)  (Proof shortened by Wolf
       Lammen, 16-Nov-2019.) $)
    cbvab $p |- { x | ph } = { y | ps } $=
      ( vz cab wsb cv wcel sbco2 sbie sbbii bitr3i df-clab 3bitr4i eqriv ) HACI
      ZBDIZACHJZBDHJZHKZTLUDUALUBACDJZDHJUCACHDEMUEBDHABCDFGNOPAHCQBHDQRS $.
  $}

  ${
    $d y ph $.  $d x ps $.
    cbvabvOLD.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Obsolete version of ~ cbvabv as of 9-May-2023.  (Contributed by NM,
       26-May-1999.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    cbvabvOLD $p |- { x | ph } = { y | ps } $=
      ( nfv cbvab ) ABCDADFBCFEG $.
  $}

  ${
    $d x A y $.  $d ph y $.
    $( Membership of a class variable in a class abstraction.  (Contributed by
       NM, 23-Dec-1993.)  (Proof shortened by Wolf Lammen, 16-Nov-2019.) $)
    clelab $p |- ( A e. { x | ph } <-> E. x ( x = A /\ ph ) ) $=
      ( vy cab wcel cv wceq wa wex df-clel nfv nfsab1 weq eqeq1 sbequ12 df-clab
      nfan wsb syl6bbr anbi12d cbvexv1 bitr4i ) CABEZFDGZCHZUEUDFZIZDJBGZCHZAIZ
      BJDCUDKUKUHBDUKDLUFUGBUFBLABDMRBDNZUJUFAUGUIUECOULAABDSUGABDPADBQTUAUBUC
      $.
  $}

  ${
    $d y A $.  $d y ph $.  $d x y $.
    $( Membership of a class abstraction in another class.  (Contributed by NM,
       17-Jan-2006.) $)
    clabel $p |- ( { x | ph } e. A <->
                 E. y ( y e. A /\ A. x ( x e. y <-> ph ) ) ) $=
      ( cab wcel cv wceq wa wex wb wal df-clel abeq2 anbi2ci exbii bitri ) ABEZ
      DFCGZRHZSDFZIZCJUABGSFAKBLZIZCJCRDMUBUDCTUCUAABSNOPQ $.
  $}

  ${
    $d z A $.  $d z x $.  $d z y $.
    $( The right-hand side of the second equality is a way of representing
       proper substitution of ` y ` for ` x ` into a class variable.
       (Contributed by NM, 14-Sep-2003.) $)
    sbab $p |- ( x = y -> A = { z | [ y / x ] z e. A } ) $=
      ( weq cv wcel wsb sbequ12 abbi2dv ) ABECFDGZABHCDKABIJ $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Class form not-free predicate
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $c F/_ $.  $( Underlined not-free symbol. $)

  $( Extend wff definition to include the not-free predicate for classes. $)
  wnfc $a wff F/_ x A $.

  ${
    $d x y z $.  $d y z A $.
    $( Justification theorem for ~ df-nfc .  (Contributed by Mario Carneiro,
       13-Oct-2016.) $)
    nfcjust $p |- ( A. y F/ x y e. A <-> A. z F/ x z e. A ) $=
      ( cv wcel wnf weq eleq1w nfbidv cbvalvw ) BEDFZAGCEDFZAGBCBCHLMABCDIJK $.
  $}

  ${
    $d x y $.  $d y A $.
    $( Define the not-free predicate for classes.  This is read " ` x ` is not
       free in ` A ` ".  Not-free means that the value of ` x ` cannot affect
       the value of ` A ` , e.g., any occurrence of ` x ` in ` A ` is
       effectively bound by a "for all" or something that expands to one (such
       as "there exists").  It is defined in terms of the not-free predicate
       ~ df-nf for wffs; see that definition for more information.
       (Contributed by Mario Carneiro, 11-Aug-2016.) $)
    df-nfc $a |- ( F/_ x A <-> A. y F/ x y e. A ) $.

    ${
      nfci.1 $e |- F/ x y e. A $.
      $( Deduce that a class ` A ` does not have ` x ` free in it.
         (Contributed by Mario Carneiro, 11-Aug-2016.) $)
      nfci $p |- F/_ x A $=
        ( wnfc cv wcel wnf df-nfc mpgbir ) ACEBFCGAHBABCIDJ $.
    $}

    ${
      nfcii.1 $e |- ( y e. A -> A. x y e. A ) $.
      $( Deduce that a class ` A ` does not have ` x ` free in it.
         (Contributed by Mario Carneiro, 11-Aug-2016.) $)
      nfcii $p |- F/_ x A $=
        ( cv wcel nf5i nfci ) ABCBECFADGH $.
    $}

    $( Consequence of the not-free predicate.  (Contributed by Mario Carneiro,
       11-Aug-2016.) $)
    nfcr $p |- ( F/_ x A -> F/ x y e. A ) $=
      ( wnfc cv wcel wnf wal df-nfc sp sylbi ) ACDBECFAGZBHLABCILBJK $.
  $}

  ${
    $d x y $.  $d y A $.
    nfcriv.1 $e |- F/_ x A $.
    $( Consequence of the not-free predicate, similiar to ~ nfcri .  Requires
       ` y ` and ` A ` be disjoint, but is not based on ~ ax-13 .  (Contributed
       by Wolf Lammen, 13-May-2023.) $)
    nfcriv $p |- F/ x y e. A $=
      ( wnfc cv wcel wnf nfcr ax-mp ) ACEBFCGAHDABCIJ $.
  $}

  ${
    $d x y $.  $d y A $.
    nfcd.1 $e |- F/ y ph $.
    nfcd.2 $e |- ( ph -> F/ x y e. A ) $.
    $( Deduce that a class ` A ` does not have ` x ` free in it.  (Contributed
       by Mario Carneiro, 11-Aug-2016.) $)
    nfcd $p |- ( ph -> F/_ x A ) $=
      ( cv wcel wnf wal wnfc alrimi df-nfc sylibr ) ACGDHBIZCJBDKAOCEFLBCDMN $.
  $}

  ${
    $d x y $.  $d y A $.
    nfcrd.1 $e |- ( ph -> F/_ x A ) $.
    $( Consequence of the not-free predicate.  (Contributed by Mario Carneiro,
       11-Aug-2016.) $)
    nfcrd $p |- ( ph -> F/ x y e. A ) $=
      ( wnfc cv wcel wnf nfcr syl ) ABDFCGDHBIEBCDJK $.
  $}

  ${
    $d x y z $.  $d z A $.
    nfcri.1 $e |- F/_ x A $.
    $( Consequence of the not-free predicate.  (Contributed by Mario Carneiro,
       11-Aug-2016.) $)
    nfcrii $p |- ( y e. A -> A. x y e. A ) $=
      ( vz cv wcel wsb wal nfcriv nfsbv nf5ri clelsb3 albii 3imtr3i ) EFCGZEBHZ
      QAIBFCGZRAIQAPEBAAECDJKLBECMZQRASNO $.

    $( Consequence of the not-free predicate.  (Note that unlike ~ nfcr , this
       does not require ` y ` and ` A ` to be disjoint.)  (Contributed by Mario
       Carneiro, 11-Aug-2016.) $)
    nfcri $p |- F/ x y e. A $=
      ( cv wcel nfcrii nf5i ) BECFAABCDGH $.
  $}

  ${
    $d x y $.  $d A y $.  $d B y $.  $d ph y $.
    nfceqdf.1 $e |- F/ x ph $.
    nfceqdf.2 $e |- ( ph -> A = B ) $.
    $( An equality theorem for effectively not free.  (Contributed by Mario
       Carneiro, 14-Oct-2016.) $)
    nfceqdf $p |- ( ph -> ( F/_ x A <-> F/_ x B ) ) $=
      ( vy cv wcel wnf wal wnfc eleq2d nfbidf albidv df-nfc 3bitr4g ) AGHZCIZBJ
      ZGKRDIZBJZGKBCLBDLATUBGASUABEACDRFMNOBGCPBGDPQ $.
  $}

  ${
    $d x y $.  $d A y $.  $d B y $.
    nfceqi.1 $e |- A = B $.
    $( Equality theorem for class not-free.  (Contributed by Mario Carneiro,
       11-Aug-2016.)  (Proof shortened by Wolf Lammen, 16-Nov-2019.)  Avoid
       ~ ax-12 .  (Revised by Wolf Lammen, 19-Jun-2023.) $)
    nfceqi $p |- ( F/_ x A <-> F/_ x B ) $=
      ( vy cv wcel wnf wal wnfc eleq2i nfbii albii df-nfc 3bitr4i ) EFZBGZAHZEI
      PCGZAHZEIABJACJRTEQSABCPDKLMAEBNAECNO $.

    $( $j usage 'nfceqi' avoids 'ax-8' 'ax-10' 'ax-11' 'ax-12' 'ax-13' ; $)
  $}


  ${
    nfcxfr.1 $e |- A = B $.
    $( Obsolete proof of ~ nfceqi as of 19-Jun-2023.  (Contributed by Mario
       Carneiro, 11-Aug-2016.)  (Proof shortened by Wolf Lammen, 16-Nov-2019.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    nfceqiOLD $p |- ( F/_ x A <-> F/_ x B ) $=
      ( wnfc wb wtru nftru wceq a1i nfceqdf mptru ) ABEACEFGABCAHBCIGDJKL $.

    ${
      nfcxfr.2 $e |- F/_ x B $.
      $( A utility lemma to transfer a bound-variable hypothesis builder into a
         definition.  (Contributed by Mario Carneiro, 11-Aug-2016.) $)
      nfcxfr $p |- F/_ x A $=
        ( wnfc nfceqi mpbir ) ABFACFEABCDGH $.
    $}

    ${
      nfcxfrd.2 $e |- ( ph -> F/_ x B ) $.
      $( A utility lemma to transfer a bound-variable hypothesis builder into a
         definition.  (Contributed by Mario Carneiro, 11-Aug-2016.) $)
      nfcxfrd $p |- ( ph -> F/_ x A ) $=
        ( wnfc nfceqi sylibr ) ABDGBCGFBCDEHI $.
    $}
  $}

  ${
    $d x y A $.
    $( If ` x ` is disjoint from ` A ` , then ` x ` is not free in ` A ` .
       (Contributed by Mario Carneiro, 11-Aug-2016.) $)
    nfcv $p |- F/_ x A $=
      ( vy cv wcel nfv nfci ) ACBCDBEAFG $.

    $( If ` x ` is disjoint from ` A ` , then ` x ` is not free in ` A ` .
       (Contributed by Mario Carneiro, 7-Oct-2016.) $)
    nfcvd $p |- ( ph -> F/_ x A ) $=
      ( wnfc nfcv a1i ) BCDABCEF $.
  $}

  ${
    $d x y $.  $d y A $.  $d y ph $.
    $( Bound-variable hypothesis builder for a class abstraction.  (Contributed
       by Mario Carneiro, 11-Aug-2016.) $)
    nfab1 $p |- F/_ x { x | ph } $=
      ( vy cab nfsab1 nfci ) BCABDABCEF $.

    $( The setvar ` x ` is bound in ` F/_ x A ` .  (Contributed by Mario
       Carneiro, 11-Aug-2016.) $)
    nfnfc1 $p |- F/ x F/_ x A $=
      ( vy wnfc cv wcel wnf wal df-nfc nfnf1 nfal nfxfr ) ABDCEBFZAGZCHAACBINAC
      MAJKL $.
  $}

  ${
    $d w y $.  $d w A $.  $d w x $.
    clelsb3f.1 $e |- F/_ y A $.
    $( Substitution applied to an atomic wff (class version of ~ elsb3 ).
       (Contributed by Rodolfo Medina, 28-Apr-2010.)  (Proof shortened by
       Andrew Salmon, 14-Jun-2011.)  (Revised by Thierry Arnoux, 13-Mar-2017.)
       (Proof shortened by Wolf Lammen, 7-May-2023.) $)
    clelsb3f $p |- ( [ x / y ] y e. A <-> x e. A ) $=
      ( vw cv wcel wsb nfcri sbco2 clelsb3 sbbii 3bitr3i ) EFCGZEBHZBAHNEAHBFCG
      ZBAHAFCGNEABBECDIJOPBABECKLAECKM $.

    $( Obsolete version of ~ clelsb3f as of 7-May-2023.  (Contributed by
       Rodolfo Medina, 28-Apr-2010.)  (Proof shortened by Andrew Salmon,
       14-Jun-2011.)  (Revised by Thierry Arnoux, 13-Mar-2017.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    clelsb3fOLD $p |- ( [ x / y ] y e. A <-> x e. A ) $=
      ( vw cv wcel wsb nfcri sbco2 nfv eleq1w sbie sbbii 3bitr3i ) EFCGZEBHZBAH
      PEAHBFCGZBAHAFCGZPEABBECDIJQRBAPREBREKEBCLMNPSEASEKEACLMO $.
  $}

  ${
    $d x z $.  $d y z $.  $d z ph $.
    nfab.1 $e |- F/ x ph $.
    $( Bound-variable hypothesis builder for a class abstraction.  (Contributed
       by Mario Carneiro, 11-Aug-2016.) $)
    nfab $p |- F/_ x { y | ph } $=
      ( vz cab nfsab nfci ) BEACFABCEDGH $.
  $}

  $( Bound-variable hypothesis builder for a class abstraction.  (Contributed
     by Mario Carneiro, 14-Oct-2016.) $)
  nfaba1 $p |- F/_ x { y | A. x ph } $=
    ( wal nfa1 nfab ) ABDBCABEF $.

  ${
    $d x y $.  $d y A $.  $d y B $.  $d y ph $.
    nfeqd.1 $e |- ( ph -> F/_ x A ) $.
    nfeqd.2 $e |- ( ph -> F/_ x B ) $.
    $( Hypothesis builder for equality.  (Contributed by Mario Carneiro,
       7-Oct-2016.) $)
    nfeqd $p |- ( ph -> F/ x A = B ) $=
      ( vy wceq cv wcel wb wal dfcleq nfv nfcrd nfbid nfald nfxfrd ) CDHGIZCJZS
      DJZKZGLABGCDMAUBBGAGNATUABABGCEOABGDFOPQR $.

    $( Hypothesis builder for elementhood.  (Contributed by Mario Carneiro,
       7-Oct-2016.) $)
    nfeld $p |- ( ph -> F/ x A e. B ) $=
      ( vy wcel cv wceq wa wex df-clel nfv nfcvd nfeqd nfcrd nfand nfexd nfxfrd
      ) CDHGIZCJZUADHZKZGLABGCDMAUDBGAGNAUBUCBABUACABUAOEPABGDFQRST $.
  $}

  ${
    $d x z $.  $d y z $.  $d z A $.  $d z B $.
    nfnfc.1 $e |- F/_ x A $.
    $( Hypothesis builder for ` F/_ y A ` .  (Contributed by Mario Carneiro,
       11-Aug-2016.)  Remove dependency on ~ ax-13 .  (Revised by Wolf Lammen,
       10-Dec-2019.) $)
    nfnfc $p |- F/ x F/_ y A $=
      ( vz wnfc cv wcel wnf wal df-nfc nfcriv nfnf nfal nfxfr ) BCFEGCHZBIZEJAB
      ECKQAEPABAECDLMNO $.

    nfeq.2 $e |- F/_ x B $.
    $( Hypothesis builder for equality.  (Contributed by NM, 21-Jun-1993.)
       (Revised by Mario Carneiro, 11-Aug-2016.)  (Proof shortened by Wolf
       Lammen, 16-Nov-2019.) $)
    nfeq $p |- F/ x A = B $=
      ( wceq wnf wtru wnfc a1i nfeqd mptru ) BCFAGHABCABIHDJACIHEJKL $.

    $( Hypothesis builder for elementhood.  (Contributed by NM, 1-Aug-1993.)
       (Revised by Mario Carneiro, 11-Aug-2016.)  (Proof shortened by Wolf
       Lammen, 16-Nov-2019.) $)
    nfel $p |- F/ x A e. B $=
      ( wcel wnf wtru wnfc a1i nfeld mptru ) BCFAGHABCABIHDJACIHEJKL $.
  $}

  ${
    $d x B $.
    nfeq1.1 $e |- F/_ x A $.
    $( Hypothesis builder for equality, special case.  (Contributed by Mario
       Carneiro, 10-Oct-2016.) $)
    nfeq1 $p |- F/ x A = B $=
      ( nfcv nfeq ) ABCDACEF $.

    $( Hypothesis builder for elementhood, special case.  (Contributed by Mario
       Carneiro, 10-Oct-2016.) $)
    nfel1 $p |- F/ x A e. B $=
      ( nfcv nfel ) ABCDACEF $.
  $}

  ${
    $d x A $.
    nfeq2.1 $e |- F/_ x B $.
    $( Hypothesis builder for equality, special case.  (Contributed by Mario
       Carneiro, 10-Oct-2016.) $)
    nfeq2 $p |- F/ x A = B $=
      ( nfcv nfeq ) ABCABEDF $.

    $( Hypothesis builder for elementhood, special case.  (Contributed by Mario
       Carneiro, 10-Oct-2016.) $)
    nfel2 $p |- F/ x A e. B $=
      ( nfcv nfel ) ABCABEDF $.
  $}

  ${
    $d w x $.  $d w y $.  $d w z $.  $d w A $.  $d w B $.
    drnfc1.1 $e |- ( A. x x = y -> A = B ) $.
    $( Formula-building lemma for use with the Distinctor Reduction Theorem.
       (Contributed by Mario Carneiro, 8-Oct-2016.)  Avoid ~ ax-11 .  (Revised
       by Wolf Lammen, 10-May-2023.) $)
    drnfc1 $p |- ( A. x x = y -> ( F/_ x A <-> F/_ y B ) ) $=
      ( vw weq wal cv wcel wnf wnfc eleq2d drnf1 albidv df-nfc 3bitr4g ) ABGAHZ
      FIZCJZAKZFHSDJZBKZFHACLBDLRUAUCFTUBABRCDSEMNOAFCPBFDPQ $.

    $( Obsolete version of ~ drnfc1 as of 10-May-2023.  (Contributed by Mario
       Carneiro, 8-Oct-2016.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    drnfc1OLD $p |- ( A. x x = y -> ( F/_ x A <-> F/_ y B ) ) $=
      ( vw weq wal cv wcel wnf wnfc eleq2d drnf1 dral2 df-nfc 3bitr4g ) ABGAHZF
      IZCJZAKZFHSDJZBKZFHACLBDLUAUCABFTUBABRCDSEMNOAFCPBFDPQ $.

    $( Formula-building lemma for use with the Distinctor Reduction Theorem.
       (Contributed by Mario Carneiro, 8-Oct-2016.) $)
    drnfc2 $p |- ( A. x x = y -> ( F/_ z A <-> F/_ z B ) ) $=
      ( vw weq wal cv wcel wnf wnfc eleq2d drnf2 albidv df-nfc 3bitr4g ) ABHAIZ
      GJZDKZCLZGITEKZCLZGICDMCEMSUBUDGUAUCABCSDETFNOPCGDQCGEQR $.
  $}

  ${
    $d x z $.  $d y z $.  $d z ph $.  $d z ps $.
    nfabd.1 $e |- F/ y ph $.
    nfabd.2 $e |- ( ph -> F/ x ps ) $.
    $( Bound-variable hypothesis builder for a class abstraction.  (Contributed
       by Mario Carneiro, 8-Oct-2016.)  Avoid ~ ax-9 and ~ ax-ext .  (Revised
       by Wolf Lammen, 23-May-2023.) $)
    nfabd $p |- ( ph -> F/_ x { y | ps } ) $=
      ( vz cab nfv cv wcel wsb df-clab nfsbd nfxfrd nfcd ) ACGBDHZAGIGJQKBDGLAC
      BGDMABDGCEFNOP $.
  $}

  ${
    nfabd2.1 $e |- F/ y ph $.
    nfabd2.2 $e |- ( ( ph /\ -. A. x x = y ) -> F/ x ps ) $.
    $( Bound-variable hypothesis builder for a class abstraction.  (Contributed
       by Mario Carneiro, 8-Oct-2016.)  (Proof shortened by Wolf Lammen,
       10-May-2023.) $)
    nfabd2 $p |- ( ph -> F/_ x { y | ps } ) $=
      ( weq wal cab wnfc wn wa nfnae nfan nfabd ex nfab1 eqidd drnfc1 mpbiri
      pm2.61d2 ) ACDGCHZCBDIZJZAUBKZUDAUELBCDAUEDECDDMNFOPUBUDDUCJBDQCDUCUCUBUC
      RSTUA $.

    $d x z $.  $d y z $.  $d z ph $.  $d z ps $.
    $( Obsolete version of ~ nfabd2 as of 23-May-2023.  (Contributed by Mario
       Carneiro, 8-Oct-2016.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    nfabd2OLD $p |- ( ph -> F/_ x { y | ps } ) $=
      ( vz weq wal cab wnfc wn wa nfv cv wcel wsb df-clab nfnae nfan nfsbd nfcd
      nfxfrd ex nfab1 eqidd drnfc1 mpbiri pm2.61d2 ) ACDHCIZCBDJZKZAUJLZULAUMMZ
      CGUKUNGNGOUKPBDGQUNCBGDRUNBDGCAUMDECDDSTFUAUCUBUDUJULDUKKBDUECDUKUKUJUKUF
      UGUHUI $.
  $}

  ${
    nfabdOLD.1 $e |- F/ y ph $.
    nfabdOLD.2 $e |- ( ph -> F/ x ps ) $.
    $( Obsolete version of ~ nfabd as of 10-May-2023.  (Contributed by Mario
       Carneiro, 8-Oct-2016.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    nfabdOLD $p |- ( ph -> F/_ x { y | ps } ) $=
      ( wnf weq wal wn adantr nfabd2 ) ABCDEABCGCDHCIJFKL $.
  $}

  ${
    $d w x $.  $d w y $.  $d w z $.  $d w A $.  $d w B $.  $d w ph $.
    dvelimdc.1 $e |- F/ x ph $.
    dvelimdc.2 $e |- F/ z ph $.
    dvelimdc.3 $e |- ( ph -> F/_ x A ) $.
    dvelimdc.4 $e |- ( ph -> F/_ z B ) $.
    dvelimdc.5 $e |- ( ph -> ( z = y -> A = B ) ) $.
    $( Deduction form of ~ dvelimc .  (Contributed by Mario Carneiro,
       8-Oct-2016.) $)
    dvelimdc $p |- ( ph -> ( -. A. x x = y -> F/_ x B ) ) $=
      ( vw weq wal wn wnfc wa nfv wcel nfcrd cv wnf wceq wb eleq2 syl6 dvelimdf
      imp nfcd ex ) ABCMBNOZBFPAUKQZBLFULLRAUKLUAZFSZBUBAUMESZUNBCDGHABLEITADLF
      JTADCMEFUCUOUNUDKEFUMUEUFUGUHUIUJ $.
  $}

  ${
    dvelimc.1 $e |- F/_ x A $.
    dvelimc.2 $e |- F/_ z B $.
    dvelimc.3 $e |- ( z = y -> A = B ) $.
    $( Version of ~ dvelim for classes.  (Contributed by Mario Carneiro,
       8-Oct-2016.) $)
    dvelimc $p |- ( -. A. x x = y -> F/_ x B ) $=
      ( weq wal wn wnfc wi wtru nftru a1i wceq dvelimdc mptru ) ABIAJKAELMNABCD
      EAOCOADLNFPCELNGPCBIDEQMNHPRS $.
  $}

  ${
    $d x w z $.  $d y w z $.
    $( If ` x ` and ` y ` are distinct, then ` x ` is not free in ` y ` .
       (Contributed by Mario Carneiro, 8-Oct-2016.)  Avoid ~ ax-ext .  (Revised
       by Wolf Lammen, 10-May-2023.) $)
    nfcvf $p |- ( -. A. x x = y -> F/_ x y ) $=
      ( vw vz weq wal wn cv nfv wel elequ2 dvelimnf nfcd ) ABEAFGZACBHNCICDJZCB
      JABDOAIDBCKLM $.

    $( If ` x ` and ` y ` are distinct, then ` y ` is not free in ` x ` .
       (Contributed by Mario Carneiro, 5-Dec-2016.) $)
    nfcvf2 $p |- ( -. A. x x = y -> F/_ y x ) $=
      ( cv wnfc nfcvf naecoms ) BACDBABAEF $.
  $}

  ${
    $d x z $.  $d y z $.
    $( Obsolete version of ~ nfcvf as of 10-May-2023.  (Contributed by Mario
       Carneiro, 8-Oct-2016.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    nfcvfOLD $p |- ( -. A. x x = y -> F/_ x y ) $=
      ( vz cv nfcv weq id dvelimc ) ABCCDZBDZAIECJECBFGH $.
  $}

  ${
    $d y A $.  $d y B $.  $d x y $.
    cleqf.1 $e |- F/_ x A $.
    cleqf.2 $e |- F/_ x B $.
    $( Establish equality between classes, using bound-variable hypotheses
       instead of distinct variable conditions.  See also ~ cleqh .
       (Contributed by NM, 26-May-1993.)  (Revised by Mario Carneiro,
       7-Oct-2016.)  (Proof shortened by Wolf Lammen, 17-Nov-2019.)  Avoid
       ~ ax-13 .  (Revised by Wolf Lammen, 10-May-2023.) $)
    cleqf $p |- ( A = B <-> A. x ( x e. A <-> x e. B ) ) $=
      ( vy cv wcel nfcriv nf5ri cleqh ) AFBCFGZBHAAFBDIJLCHAAFCEIJK $.

    $( Obsolete version of ~ cleqf as of 10-May-2023.  (Contributed by NM,
       26-May-1993.)  (Revised by Mario Carneiro, 7-Oct-2016.)  (Proof
       shortened by Wolf Lammen, 17-Nov-2019.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    cleqfOLD $p |- ( A = B <-> A. x ( x e. A <-> x e. B ) ) $=
      ( vy nfcrii cleqh ) AFBCAFBDGAFCEGH $.
  $}

  ${
    abid2f.1 $e |- F/_ x A $.
    $( A simplification of class abstraction.  Theorem 5.2 of [Quine] p. 35.
       (Contributed by NM, 5-Sep-2011.)  (Revised by Mario Carneiro,
       7-Oct-2016.)  (Proof shortened by Wolf Lammen, 17-Nov-2019.) $)
    abid2f $p |- { x | x e. A } = A $=
      ( cv wcel cab wceq wb nfab1 cleqf abid mpgbir ) ADZBEZAFZBGMOENHAAOBNAICJ
      NAKL $.
  $}

  ${
    abeq2f.0 $e |- F/_ x A $.
    $( Equality of a class variable and a class abstraction.  In this version,
       the fact that ` x ` is a non-free variable in ` A ` is explicitly stated
       as a hypothesis.  (Contributed by Thierry Arnoux, 11-May-2017.)  Avoid
       ~ ax-13 .  (Revised by Wolf Lammen, 13-May-2023.) $)
    abeq2f $p |- ( A = { x | ph } <-> A. x ( x e. A <-> ph ) ) $=
      ( cab wceq cv wcel wb wal nfab1 cleqf abid bibi2i albii bitri ) CABEZFBGZ
      CHZRQHZIZBJSAIZBJBCQDABKLUAUBBTASABMNOP $.

    $d x y $.  $d y A $.  $d y ph $.
    $( Equality of a class variable and a class abstraction.  In this version,
       the fact that ` x ` is a non-free variable in ` A ` is explicitly stated
       as a hypothesis.  (Contributed by Thierry Arnoux, 11-May-2017.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    abeq2fOLD $p |- ( A = { x | ph } <-> A. x ( x e. A <-> ph ) ) $=
      ( vy cab wceq cv wcel wb wal nfcrii hbab1 cleqh abid bibi2i albii bitri )
      CABFZGBHZCIZTSIZJZBKUAAJZBKBECSBECDLABEMNUCUDBUBAUAABOPQR $.
  $}

  ${
    $d v A $.  $d x z v $.  $d y z v $.  $d v ph $.
    sbabel.1 $e |- F/_ x A $.
    $( Theorem to move a substitution in and out of a class abstraction.
       (Contributed by NM, 27-Sep-2003.)  (Revised by Mario Carneiro,
       7-Oct-2016.)  (Proof shortened by Wolf Lammen, 26-Dec-2019.) $)
    sbabel $p |- ( [ y / x ] { z | ph } e. A <-> { z | [ y / x ] ph } e. A ) $=
      ( vv cv wcel wel wb wal wa wex wsb cab sbex sbf bitri clabel nfcri sbrbis
      sban nfv sbalv anbi12i exbii sbbii 3bitr4i ) GHEIZDGJZAKZDLZMZGNZBCOZUJUK
      ABCOZKZDLZMZGNZADPEIZBCOUQDPEIUPUNBCOZGNVAUNGBCQVCUTGVCUJBCOZUMBCOZMUTUJU
      MBCUCVDUJVEUSUJBCBGEFUARULURBCDUKUKABCUKBCUKBUDRUBUEUFSUGSVBUOBCADGETUHUQ
      DGETUI $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Negated equality and membership
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)


$(
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
  Negated equality
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
$)

  $c =/= $.  $( Not equal to (equal sign with slash through it). $)

  $( Extend wff notation to include inequality. $)
  wne $a wff A =/= B $.

  $( Define inequality.  (Contributed by NM, 26-May-1993.) $)
  df-ne $a |- ( A =/= B <-> -. A = B ) $.

  ${
    neii.1 $e |- A =/= B $.
    $( Inference associated with ~ df-ne .  (Contributed by BJ, 7-Jul-2018.) $)
    neii $p |- -. A = B $=
      ( wne wceq wn df-ne mpbi ) ABDABEFCABGH $.
  $}

  ${
    neir.1 $e |- -. A = B $.
    $( Inference associated with ~ df-ne .  (Contributed by BJ, 7-Jul-2018.) $)
    neir $p |- A =/= B $=
      ( wne wceq wn df-ne mpbir ) ABDABEFCABGH $.
  $}

  $( Negation of inequality.  (Contributed by NM, 9-Jun-2006.) $)
  nne $p |- ( -. A =/= B <-> A = B ) $=
    ( wceq wne wn df-ne con2bii bicomi ) ABCZABDZEJIABFGH $.

  ${
    neneqd.1 $e |- ( ph -> A =/= B ) $.
    $( Deduction eliminating inequality definition.  (Contributed by Jonathan
       Ben-Naim, 3-Jun-2011.) $)
    neneqd $p |- ( ph -> -. A = B ) $=
      ( wne wceq wn df-ne sylib ) ABCEBCFGDBCHI $.
  $}

  $( From inequality to non-equality.  (Contributed by Glauco Siliprandi,
     11-Dec-2019.) $)
  neneq $p |- ( A =/= B -> -. A = B ) $=
    ( wne id neneqd ) ABCZABFDE $.

  ${
    neqned.1 $e |- ( ph -> -. A = B ) $.
    $( If it is not the case that two classes are equal, then they are unequal.
       Converse of ~ neneqd .  One-way deduction form of ~ df-ne .
       (Contributed by David Moews, 28-Feb-2017.)  Allow a shortening of
       ~ necon3bi .  (Revised by Wolf Lammen, 22-Nov-2019.) $)
    neqned $p |- ( ph -> A =/= B ) $=
      ( wceq wn wne df-ne sylibr ) ABCEFBCGDBCHI $.
  $}

  $( From non-equality to inequality.  (Contributed by Glauco Siliprandi,
     11-Dec-2019.) $)
  neqne $p |- ( -. A = B -> A =/= B ) $=
    ( wceq wn id neqned ) ABCDZABGEF $.

  $( No class is unequal to itself.  Inequality is irreflexive.  (Contributed
     by Stefan O'Rear, 1-Jan-2015.) $)
  neirr $p |- -. A =/= A $=
    ( wne wn wceq eqid nne mpbir ) AABCAADAEAAFG $.

  $( Excluded middle with equality and inequality.  (Contributed by NM,
     3-Feb-2012.)  (Proof shortened by Wolf Lammen, 17-Nov-2019.) $)
  exmidne $p |- ( A = B \/ A =/= B ) $=
    ( wceq wne neqne orri ) ABCABDABEF $.

  $( A contradiction concerning equality implies anything.  (Contributed by
     Alexander van der Vekens, 25-Jan-2018.) $)
  eqneqall $p |- ( A = B -> ( A =/= B -> ph ) ) $=
    ( wne wceq wn df-ne pm2.24 syl5bi ) BCDBCEZFJABCGJAHI $.

  $( Law of noncontradiction with equality and inequality.  (Contributed by NM,
     3-Feb-2012.)  (Proof shortened by Wolf Lammen, 21-Dec-2019.) $)
  nonconne $p |- -. ( A = B /\ A =/= B ) $=
    ( wceq wne wa wfal fal eqneqall imp mto ) ABCZABDZEFGKLFFABHIJ $.

  ${
    necon3ad.1 $e |- ( ph -> ( ps -> A = B ) ) $.
    $( Contrapositive law deduction for inequality.  (Contributed by NM,
       2-Apr-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.)  (Proof
       shortened by Wolf Lammen, 23-Nov-2019.) $)
    necon3ad $p |- ( ph -> ( A =/= B -> -. ps ) ) $=
      ( wceq wne neneq nsyli ) ABCDFCDGECDHI $.
  $}

  ${
    necon3bd.1 $e |- ( ph -> ( A = B -> ps ) ) $.
    $( Contrapositive law deduction for inequality.  (Contributed by NM,
       2-Apr-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
    necon3bd $p |- ( ph -> ( -. ps -> A =/= B ) ) $=
      ( wne wn wceq nne syl5bi con1d ) ACDFZBLGCDHABCDIEJK $.
  $}

  ${
    necon2ad.1 $e |- ( ph -> ( A = B -> -. ps ) ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       19-Apr-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.)  (Proof
       shortened by Wolf Lammen, 23-Nov-2019.) $)
    necon2ad $p |- ( ph -> ( ps -> A =/= B ) ) $=
      ( wn wne notnot necon3bd syl5 ) BBFZFACDGBHAKCDEIJ $.
  $}

  ${
    necon2bd.1 $e |- ( ph -> ( ps -> A =/= B ) ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       13-Apr-2007.) $)
    necon2bd $p |- ( ph -> ( A = B -> -. ps ) ) $=
      ( wceq wne wn df-ne syl6ib con2d ) ABCDFZABCDGLHECDIJK $.
  $}

  ${
    necon1ad.1 $e |- ( ph -> ( -. ps -> A = B ) ) $.
    $( Contrapositive deduction for inequality.  (Contributed by NM,
       2-Apr-2007.)  (Proof shortened by Wolf Lammen, 23-Nov-2019.) $)
    necon1ad $p |- ( ph -> ( A =/= B -> ps ) ) $=
      ( wne wn necon3ad notnotr syl6 ) ACDFBGZGBAKCDEHBIJ $.
  $}

  ${
    necon1bd.1 $e |- ( ph -> ( A =/= B -> ps ) ) $.
    $( Contrapositive deduction for inequality.  (Contributed by NM,
       21-Mar-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.)  (Proof
       shortened by Wolf Lammen, 23-Nov-2019.) $)
    necon1bd $p |- ( ph -> ( -. ps -> A = B ) ) $=
      ( wceq wn wne df-ne syl5bir con1d ) ACDFZBLGCDHABCDIEJK $.
  $}

  ${
    necon4ad.1 $e |- ( ph -> ( A =/= B -> -. ps ) ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       2-Apr-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.)  (Proof
       shortened by Wolf Lammen, 23-Nov-2019.) $)
    necon4ad $p |- ( ph -> ( ps -> A = B ) ) $=
      ( wn wceq notnot necon1bd syl5 ) BBFZFACDGBHAKCDEIJ $.
  $}

  ${
    necon4bd.1 $e |- ( ph -> ( -. ps -> A =/= B ) ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       1-Jun-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.)  (Proof
       shortened by Wolf Lammen, 23-Nov-2019.) $)
    necon4bd $p |- ( ph -> ( A = B -> ps ) ) $=
      ( wceq wn necon2bd notnotr syl6 ) ACDFBGZGBAKCDEHBIJ $.
  $}

  ${
    necon3d.1 $e |- ( ph -> ( A = B -> C = D ) ) $.
    $( Contrapositive law deduction for inequality.  (Contributed by NM,
       10-Jun-2006.) $)
    necon3d $p |- ( ph -> ( C =/= D -> A =/= B ) ) $=
      ( wne wceq wn necon3ad df-ne syl6ibr ) ADEGBCHZIBCGAMDEFJBCKL $.
  $}

  ${
    necon1d.1 $e |- ( ph -> ( A =/= B -> C = D ) ) $.
    $( Contrapositive law deduction for inequality.  (Contributed by NM,
       28-Dec-2008.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
    necon1d $p |- ( ph -> ( C =/= D -> A = B ) ) $=
      ( wne wceq wn nne syl6ibr necon4ad ) ADEGZBCABCGDEHMIFDEJKL $.
  $}

  ${
    necon2d.1 $e |- ( ph -> ( A = B -> C =/= D ) ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       28-Dec-2008.) $)
    necon2d $p |- ( ph -> ( C = D -> A =/= B ) ) $=
      ( wceq wne wn df-ne syl6ib necon2ad ) ADEGZBCABCGDEHMIFDEJKL $.
  $}

  ${
    necon4d.1 $e |- ( ph -> ( A =/= B -> C =/= D ) ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       2-Apr-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
    necon4d $p |- ( ph -> ( C = D -> A = B ) ) $=
      ( wceq wne wn necon2bd nne syl6ib ) ADEGBCHZIBCGAMDEFJBCKL $.
  $}

  ${
    necon3ai.1 $e |- ( ph -> A = B ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       23-May-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
    necon3ai $p |- ( A =/= B -> -. ph ) $=
      ( wne wceq wn nne sylibr con2i ) ABCEZABCFKGDBCHIJ $.
  $}

  ${
    necon3bi.1 $e |- ( A = B -> ph ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       1-Jun-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.)  (Proof
       shortened by Wolf Lammen, 22-Nov-2019.) $)
    necon3bi $p |- ( -. ph -> A =/= B ) $=
      ( wn wceq con3i neqned ) AEBCBCFADGH $.
  $}

  ${
    necon1ai.1 $e |- ( -. ph -> A = B ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       12-Feb-2007.)  (Proof shortened by Wolf Lammen, 22-Nov-2019.) $)
    necon1ai $p |- ( A =/= B -> ph ) $=
      ( wne wn necon3ai notnotrd ) BCEAAFBCDGH $.
  $}

  ${
    necon1bi.1 $e |- ( A =/= B -> ph ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       18-Mar-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.)  (Proof
       shortened by Wolf Lammen, 22-Nov-2019.) $)
    necon1bi $p |- ( -. ph -> A = B ) $=
      ( wceq wn wne df-ne sylbir con1i ) BCEZAKFBCGABCHDIJ $.
  $}

  ${
    necon2ai.1 $e |- ( A = B -> -. ph ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       16-Jan-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.)  (Proof
       shortened by Wolf Lammen, 22-Nov-2019.) $)
    necon2ai $p |- ( ph -> A =/= B ) $=
      ( wceq con2i neqned ) ABCBCEADFG $.
  $}

  ${
    necon2bi.1 $e |- ( ph -> A =/= B ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       1-Apr-2007.) $)
    necon2bi $p |- ( A = B -> -. ph ) $=
      ( wceq neneqd con2i ) ABCEABCDFG $.
  $}

  ${
    necon4ai.1 $e |- ( A =/= B -> -. ph ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       16-Jan-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.)  (Proof
       shortened by Wolf Lammen, 22-Nov-2019.) $)
    necon4ai $p |- ( ph -> A = B ) $=
      ( wn wceq notnot necon1bi syl ) AAEZEBCFAGJBCDHI $.
  $}

  ${
    necon3i.1 $e |- ( A = B -> C = D ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       9-Aug-2006.)  (Proof shortened by Wolf Lammen, 22-Nov-2019.) $)
    necon3i $p |- ( C =/= D -> A =/= B ) $=
      ( wne wceq necon3ai neqned ) CDFABABGCDEHI $.
  $}

  ${
    necon1i.1 $e |- ( A =/= B -> C = D ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       18-Mar-2007.) $)
    necon1i $p |- ( C =/= D -> A = B ) $=
      ( wceq wn wne df-ne sylbir necon1ai ) ABFZCDLGABHCDFABIEJK $.
  $}

  ${
    necon2i.1 $e |- ( A = B -> C =/= D ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       18-Mar-2007.) $)
    necon2i $p |- ( C = D -> A =/= B ) $=
      ( wceq neneqd necon2ai ) CDFABABFCDEGH $.
  $}

  ${
    necon4i.1 $e |- ( A =/= B -> C =/= D ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       17-Mar-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.)  (Proof
       shortened by Wolf Lammen, 24-Nov-2019.) $)
    necon4i $p |- ( C = D -> A = B ) $=
      ( wceq wne neneqd necon4ai ) CDFABABGCDEHI $.
  $}

  ${
    necon3abid.1 $e |- ( ph -> ( A = B <-> ps ) ) $.
    $( Deduction from equality to inequality.  (Contributed by NM,
       21-Mar-2007.) $)
    necon3abid $p |- ( ph -> ( A =/= B <-> -. ps ) ) $=
      ( wne wceq wn df-ne notbid syl5bb ) CDFCDGZHABHCDIALBEJK $.
  $}

  ${
    necon3bbid.1 $e |- ( ph -> ( ps <-> A = B ) ) $.
    $( Deduction from equality to inequality.  (Contributed by NM,
       2-Jun-2007.) $)
    necon3bbid $p |- ( ph -> ( -. ps <-> A =/= B ) ) $=
      ( wne wn wceq bicomd necon3abid ) ACDFBGABCDABCDHEIJI $.
  $}

  ${
    necon1abid.1 $e |- ( ph -> ( -. ps <-> A = B ) ) $.
    $( Contrapositive deduction for inequality.  (Contributed by NM,
       21-Aug-2007.)  (Proof shortened by Wolf Lammen, 24-Nov-2019.) $)
    necon1abid $p |- ( ph -> ( A =/= B <-> ps ) ) $=
      ( wn wne notnotb necon3bbid syl5rbb ) BBFZFACDGBHAKCDEIJ $.
  $}

  ${
    necon1bbid.1 $e |- ( ph -> ( A =/= B <-> ps ) ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       31-Jan-2008.) $)
    necon1bbid $p |- ( ph -> ( -. ps <-> A = B ) ) $=
      ( wceq wn wne df-ne syl5bbr con1bid ) ACDFZBLGCDHABCDIEJK $.
  $}

  ${
    necon4abid.1 $e |- ( ph -> ( A =/= B <-> -. ps ) ) $.
    $( Contrapositive law deduction for inequality.  (Contributed by NM,
       11-Jan-2008.)  (Proof shortened by Wolf Lammen, 24-Nov-2019.) $)
    necon4abid $p |- ( ph -> ( A = B <-> ps ) ) $=
      ( wn wceq notnotb necon1bbid syl5rbb ) BBFZFACDGBHAKCDEIJ $.
  $}

  ${
    necon4bbid.1 $e |- ( ph -> ( -. ps <-> A =/= B ) ) $.
    $( Contrapositive law deduction for inequality.  (Contributed by NM,
       9-May-2012.) $)
    necon4bbid $p |- ( ph -> ( ps <-> A = B ) ) $=
      ( wceq wn wne bicomd necon4abid ) ACDFBABCDABGCDHEIJI $.
  $}

  ${
    necon2abid.1 $e |- ( ph -> ( A = B <-> -. ps ) ) $.
    $( Contrapositive deduction for inequality.  (Contributed by NM,
       18-Jul-2007.)  (Proof shortened by Wolf Lammen, 24-Nov-2019.) $)
    necon2abid $p |- ( ph -> ( ps <-> A =/= B ) ) $=
      ( wne wn necon3abid notnotb syl6rbbr ) ACDFBGZGBAKCDEHBIJ $.
  $}

  ${
    necon2bbid.1 $e |- ( ph -> ( ps <-> A =/= B ) ) $.
    $( Contrapositive deduction for inequality.  (Contributed by NM,
       13-Apr-2007.)  (Proof shortened by Wolf Lammen, 24-Nov-2019.) $)
    necon2bbid $p |- ( ph -> ( A = B <-> -. ps ) ) $=
      ( wn wne notnotb syl5rbbr necon4abid ) ABFZCDKFBACDGBHEIJ $.
  $}

  ${
    necon3bid.1 $e |- ( ph -> ( A = B <-> C = D ) ) $.
    $( Deduction from equality to inequality.  (Contributed by NM,
       23-Feb-2005.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
    necon3bid $p |- ( ph -> ( A =/= B <-> C =/= D ) ) $=
      ( wne wceq wn df-ne necon3bbid syl5bb ) BCGBCHZIADEGBCJAMDEFKL $.
  $}

  ${
    necon4bid.1 $e |- ( ph -> ( A =/= B <-> C =/= D ) ) $.
    $( Contrapositive law deduction for inequality.  (Contributed by NM,
       29-Jun-2007.) $)
    necon4bid $p |- ( ph -> ( A = B <-> C = D ) ) $=
      ( wceq wne wn necon2bbid nne syl6rbb ) ADEGBCHZIBCGAMDEFJBCKL $.
  $}

  ${
    necon3abii.1 $e |- ( A = B <-> ph ) $.
    $( Deduction from equality to inequality.  (Contributed by NM,
       9-Nov-2007.) $)
    necon3abii $p |- ( A =/= B <-> -. ph ) $=
      ( wne wceq df-ne xchbinx ) BCEBCFABCGDH $.
  $}

  ${
    necon3bbii.1 $e |- ( ph <-> A = B ) $.
    $( Deduction from equality to inequality.  (Contributed by NM,
       13-Apr-2007.) $)
    necon3bbii $p |- ( -. ph <-> A =/= B ) $=
      ( wne wn wceq bicomi necon3abii ) BCEAFABCABCGDHIH $.
  $}

  ${
    necon1abii.1 $e |- ( -. ph <-> A = B ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       17-Mar-2007.)  (Proof shortened by Wolf Lammen, 25-Nov-2019.) $)
    necon1abii $p |- ( A =/= B <-> ph ) $=
      ( wn wne notnotb necon3bbii bitr2i ) AAEZEBCFAGJBCDHI $.
  $}

  ${
    necon1bbii.1 $e |- ( A =/= B <-> ph ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       17-Mar-2007.)  (Proof shortened by Wolf Lammen, 24-Nov-2019.) $)
    necon1bbii $p |- ( -. ph <-> A = B ) $=
      ( wne wceq nne xchnxbi ) BCEBCFABCGDH $.
  $}

  ${
    necon2abii.1 $e |- ( A = B <-> -. ph ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       2-Mar-2007.) $)
    necon2abii $p |- ( ph <-> A =/= B ) $=
      ( wne wceq wn bicomi necon1abii ) BCEAABCBCFAGDHIH $.
  $}

  ${
    necon2bbii.1 $e |- ( ph <-> A =/= B ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       13-Apr-2007.) $)
    necon2bbii $p |- ( A = B <-> -. ph ) $=
      ( wn wceq wne bicomi necon1bbii ) AEBCFABCABCGDHIH $.
  $}

  ${
    necon3bii.1 $e |- ( A = B <-> C = D ) $.
    $( Inference from equality to inequality.  (Contributed by NM,
       23-Feb-2005.) $)
    necon3bii $p |- ( A =/= B <-> C =/= D ) $=
      ( wne wceq wn necon3abii df-ne bitr4i ) ABFCDGZHCDFLABEICDJK $.
  $}

  $( Commutation of inequality.  (Contributed by NM, 14-May-1999.) $)
  necom $p |- ( A =/= B <-> B =/= A ) $=
    ( eqcom necon3bii ) ABBAABCD $.

  ${
    necomi.1 $e |- A =/= B $.
    $( Inference from commutative law for inequality.  (Contributed by NM,
       17-Oct-2012.) $)
    necomi $p |- B =/= A $=
      ( wne necom mpbi ) ABDBADCABEF $.
  $}

  ${
    necomd.1 $e |- ( ph -> A =/= B ) $.
    $( Deduction from commutative law for inequality.  (Contributed by NM,
       12-Feb-2008.) $)
    necomd $p |- ( ph -> B =/= A ) $=
      ( wne necom sylib ) ABCECBEDBCFG $.
  $}

  $( Characterization of inequality in terms of reversed equality (see
     ~ bicom ).  (Contributed by BJ, 7-Jul-2018.) $)
  nesym $p |- ( A =/= B <-> -. B = A ) $=
    ( wceq eqcom necon3abii ) BACABABDE $.

  ${
    nesymi.1 $e |- A =/= B $.
    $( Inference associated with ~ nesym .  (Contributed by BJ, 7-Jul-2018.)
       (Proof shortened by Wolf Lammen, 25-Nov-2019.) $)
    nesymi $p |- -. B = A $=
      ( necomi neii ) BAABCDE $.
  $}

  ${
    nesymir.1 $e |- -. A = B $.
    $( Inference associated with ~ nesym .  (Contributed by BJ, 7-Jul-2018.)
       (Proof shortened by Wolf Lammen, 25-Nov-2019.) $)
    nesymir $p |- B =/= A $=
      ( neir necomi ) ABABCDE $.
  $}

  ${
    neeq1d.1 $e |- ( ph -> A = B ) $.
    $( Deduction for inequality.  (Contributed by NM, 25-Oct-1999.)  (Proof
       shortened by Wolf Lammen, 19-Nov-2019.) $)
    neeq1d $p |- ( ph -> ( A =/= C <-> B =/= C ) ) $=
      ( eqeq1d necon3bid ) ABDCDABCDEFG $.

    $( Deduction for inequality.  (Contributed by NM, 25-Oct-1999.)  (Proof
       shortened by Wolf Lammen, 19-Nov-2019.) $)
    neeq2d $p |- ( ph -> ( C =/= A <-> C =/= B ) ) $=
      ( eqeq2d necon3bid ) ADBDCABCDEFG $.

    neeq12d.2 $e |- ( ph -> C = D ) $.
    $( Deduction for inequality.  (Contributed by NM, 24-Jul-2012.)  (Proof
       shortened by Wolf Lammen, 25-Nov-2019.) $)
    neeq12d $p |- ( ph -> ( A =/= C <-> B =/= D ) ) $=
      ( eqeq12d necon3bid ) ABDCEABCDEFGHI $.
  $}

  $( Equality theorem for inequality.  (Contributed by NM, 19-Nov-1994.)
     (Proof shortened by Wolf Lammen, 18-Nov-2019.) $)
  neeq1 $p |- ( A = B -> ( A =/= C <-> B =/= C ) ) $=
    ( wceq id neeq1d ) ABDZABCGEF $.

  $( Equality theorem for inequality.  (Contributed by NM, 19-Nov-1994.)
     (Proof shortened by Wolf Lammen, 18-Nov-2019.) $)
  neeq2 $p |- ( A = B -> ( C =/= A <-> C =/= B ) ) $=
    ( wceq id neeq2d ) ABDZABCGEF $.

  ${
    neeq1i.1 $e |- A = B $.
    $( Inference for inequality.  (Contributed by NM, 29-Apr-2005.)  (Proof
       shortened by Wolf Lammen, 19-Nov-2019.) $)
    neeq1i $p |- ( A =/= C <-> B =/= C ) $=
      ( eqeq1i necon3bii ) ACBCABCDEF $.

    $( Inference for inequality.  (Contributed by NM, 29-Apr-2005.)  (Proof
       shortened by Wolf Lammen, 19-Nov-2019.) $)
    neeq2i $p |- ( C =/= A <-> C =/= B ) $=
      ( eqeq2i necon3bii ) CACBABCDEF $.

    neeq12i.2 $e |- C = D $.
    $( Inference for inequality.  (Contributed by NM, 24-Jul-2012.)  (Proof
       shortened by Wolf Lammen, 25-Nov-2019.) $)
    neeq12i $p |- ( A =/= C <-> B =/= D ) $=
      ( eqeq12i necon3bii ) ACBDABCDEFGH $.
  $}

  ${
    eqnetrd.1 $e |- ( ph -> A = B ) $.
    eqnetrd.2 $e |- ( ph -> B =/= C ) $.
    $( Substitution of equal classes into an inequality.  (Contributed by NM,
       4-Jul-2012.) $)
    eqnetrd $p |- ( ph -> A =/= C ) $=
      ( wne neeq1d mpbird ) ABDGCDGFABCDEHI $.
  $}

  ${
    eqnetrrd.1 $e |- ( ph -> A = B ) $.
    eqnetrrd.2 $e |- ( ph -> A =/= C ) $.
    $( Substitution of equal classes into an inequality.  (Contributed by NM,
       4-Jul-2012.) $)
    eqnetrrd $p |- ( ph -> B =/= C ) $=
      ( eqcomd eqnetrd ) ACBDABCEGFH $.
  $}

  ${
    neeqtrd.1 $e |- ( ph -> A =/= B ) $.
    neeqtrd.2 $e |- ( ph -> B = C ) $.
    $( Substitution of equal classes into an inequality.  (Contributed by NM,
       4-Jul-2012.) $)
    neeqtrd $p |- ( ph -> A =/= C ) $=
      ( wne neeq2d mpbid ) ABCGBDGEACDBFHI $.
  $}

  ${
    eqnetr.1 $e |- A = B $.
    eqnetr.2 $e |- B =/= C $.
    $( Substitution of equal classes into an inequality.  (Contributed by NM,
       4-Jul-2012.) $)
    eqnetri $p |- A =/= C $=
      ( wne neeq1i mpbir ) ACFBCFEABCDGH $.
  $}

  ${
    eqnetrr.1 $e |- A = B $.
    eqnetrr.2 $e |- A =/= C $.
    $( Substitution of equal classes into an inequality.  (Contributed by NM,
       4-Jul-2012.) $)
    eqnetrri $p |- B =/= C $=
      ( eqcomi eqnetri ) BACABDFEG $.
  $}

  ${
    neeqtr.1 $e |- A =/= B $.
    neeqtr.2 $e |- B = C $.
    $( Substitution of equal classes into an inequality.  (Contributed by NM,
       4-Jul-2012.) $)
    neeqtri $p |- A =/= C $=
      ( wne neeq2i mpbi ) ABFACFDBCAEGH $.
  $}

  ${
    neeqtrr.1 $e |- A =/= B $.
    neeqtrr.2 $e |- C = B $.
    $( Substitution of equal classes into an inequality.  (Contributed by NM,
       4-Jul-2012.) $)
    neeqtrri $p |- A =/= C $=
      ( eqcomi neeqtri ) ABCDCBEFG $.
  $}

  ${
    neeqtrrd.1 $e |- ( ph -> A =/= B ) $.
    neeqtrrd.2 $e |- ( ph -> C = B ) $.
    $( Substitution of equal classes into an inequality.  (Contributed by NM,
       4-Jul-2012.) $)
    neeqtrrd $p |- ( ph -> A =/= C ) $=
      ( eqcomd neeqtrd ) ABCDEADCFGH $.
  $}

  ${
    syl5eqner.1 $e |- B = A $.
    syl5eqner.2 $e |- ( ph -> B =/= C ) $.
    $( A chained equality inference for inequality.  (Contributed by NM,
       6-Jun-2012.)  (Proof shortened by Wolf Lammen, 19-Nov-2019.) $)
    syl5eqner $p |- ( ph -> A =/= C ) $=
      ( wceq a1i eqnetrrd ) ACBDCBGAEHFI $.
  $}

  ${
    3netr3d.1 $e |- ( ph -> A =/= B ) $.
    3netr3d.2 $e |- ( ph -> A = C ) $.
    3netr3d.3 $e |- ( ph -> B = D ) $.
    $( Substitution of equality into both sides of an inequality.  (Contributed
       by NM, 24-Jul-2012.)  (Proof shortened by Wolf Lammen, 19-Nov-2019.) $)
    3netr3d $p |- ( ph -> C =/= D ) $=
      ( neeqtrd eqnetrrd ) ABDEGABCEFHIJ $.
  $}

  ${
    3netr4d.1 $e |- ( ph -> A =/= B ) $.
    3netr4d.2 $e |- ( ph -> C = A ) $.
    3netr4d.3 $e |- ( ph -> D = B ) $.
    $( Substitution of equality into both sides of an inequality.  (Contributed
       by NM, 24-Jul-2012.)  (Proof shortened by Wolf Lammen, 21-Nov-2019.) $)
    3netr4d $p |- ( ph -> C =/= D ) $=
      ( eqnetrd neeqtrrd ) ADCEADBCGFIHJ $.
  $}

  ${
    3netr3g.1 $e |- ( ph -> A =/= B ) $.
    3netr3g.2 $e |- A = C $.
    3netr3g.3 $e |- B = D $.
    $( Substitution of equality into both sides of an inequality.  (Contributed
       by NM, 24-Jul-2012.) $)
    3netr3g $p |- ( ph -> C =/= D ) $=
      ( wne neeq12i sylib ) ABCIDEIFBDCEGHJK $.
  $}

  ${
    3netr4g.1 $e |- ( ph -> A =/= B ) $.
    3netr4g.2 $e |- C = A $.
    3netr4g.3 $e |- D = B $.
    $( Substitution of equality into both sides of an inequality.  (Contributed
       by NM, 14-Jun-2012.) $)
    3netr4g $p |- ( ph -> C =/= D ) $=
      ( wne neeq12i sylibr ) ABCIDEIFDBECGHJK $.
  $}

  $( Contraposition law for inequality.  (Contributed by NM, 28-Dec-2008.) $)
  nebi $p |- ( ( A = B <-> C = D ) <-> ( A =/= B <-> C =/= D ) ) $=
    ( wceq wb wne id necon3bid necon4bid impbii ) ABECDEFZABGCDGFZLABCDLHIMABCD
    MHJK $.

  $( Theorem *13.18 in [WhiteheadRussell] p. 178.  (Contributed by Andrew
     Salmon, 3-Jun-2011.)  (Proof shortened by Wolf Lammen, 14-May-2023.) $)
  pm13.18 $p |- ( ( A = B /\ A =/= C ) -> B =/= C ) $=
    ( wceq wne neeq1 biimpd imp ) ABDZACEZBCEZIJKABCFGH $.

  $( Obsolete version of ~ pm13.18 as of 14-May-2023.  (Contributed by Andrew
     Salmon, 3-Jun-2011.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  pm13.18OLD $p |- ( ( A = B /\ A =/= C ) -> B =/= C ) $=
    ( wceq wne eqeq1 biimprd necon3d imp ) ABDZACEBCEJBCACJACDBCDABCFGHI $.

  $( Theorem *13.181 in [WhiteheadRussell] p. 178.  (Contributed by Andrew
     Salmon, 3-Jun-2011.) $)
  pm13.181 $p |- ( ( A = B /\ B =/= C ) -> A =/= C ) $=
    ( wceq wne eqcom pm13.18 sylanb ) ABDBADBCEACEABFBACGH $.

  ${
    pm2.61ine.1 $e |- ( A = B -> ph ) $.
    pm2.61ine.2 $e |- ( A =/= B -> ph ) $.
    $( Inference eliminating an inequality in an antecedent.  (Contributed by
       NM, 16-Jan-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
    pm2.61ine $p |- ph $=
      ( wne wn wceq nne sylbi pm2.61i ) BCFZAELGBCHABCIDJK $.
  $}

  ${
    pm2.21ddne.1 $e |- ( ph -> A = B ) $.
    pm2.21ddne.2 $e |- ( ph -> A =/= B ) $.
    $( A contradiction implies anything.  Equality/inequality deduction form.
       (Contributed by David Moews, 28-Feb-2017.) $)
    pm2.21ddne $p |- ( ph -> ps ) $=
      ( wceq neneqd pm2.21dd ) ACDGBEACDFHI $.
  $}

  ${
    pm2.61ne.1 $e |- ( A = B -> ( ps <-> ch ) ) $.
    pm2.61ne.2 $e |- ( ( ph /\ A =/= B ) -> ps ) $.
    pm2.61ne.3 $e |- ( ph -> ch ) $.
    $( Deduction eliminating an inequality in an antecedent.  (Contributed by
       NM, 24-May-2006.)  (Proof shortened by Andrew Salmon, 25-May-2011.)
       (Proof shortened by Wolf Lammen, 25-Nov-2019.) $)
    pm2.61ne $p |- ( ph -> ps ) $=
      ( wi wceq syl5ibr wne expcom pm2.61ine ) ABIDEABDEJCHFKADELBGMN $.
  $}

  ${
    pm2.61dne.1 $e |- ( ph -> ( A = B -> ps ) ) $.
    pm2.61dne.2 $e |- ( ph -> ( A =/= B -> ps ) ) $.
    $( Deduction eliminating an inequality in an antecedent.  (Contributed by
       NM, 1-Jun-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
    pm2.61dne $p |- ( ph -> ps ) $=
      ( wne wn wceq nne syl5bi pm2.61d ) ACDGZBFMHCDIABCDJEKL $.
  $}

  ${
    pm2.61dane.1 $e |- ( ( ph /\ A = B ) -> ps ) $.
    pm2.61dane.2 $e |- ( ( ph /\ A =/= B ) -> ps ) $.
    $( Deduction eliminating an inequality in an antecedent.  (Contributed by
       NM, 30-Nov-2011.) $)
    pm2.61dane $p |- ( ph -> ps ) $=
      ( wceq ex wne pm2.61dne ) ABCDACDGBEHACDIBFHJ $.
  $}

  ${
    pm2.61da2ne.1 $e |- ( ( ph /\ A = B ) -> ps ) $.
    pm2.61da2ne.2 $e |- ( ( ph /\ C = D ) -> ps ) $.
    pm2.61da2ne.3 $e |- ( ( ph /\ ( A =/= B /\ C =/= D ) ) -> ps ) $.
    $( Deduction eliminating two inequalities in an antecedent.  (Contributed
       by NM, 29-May-2013.) $)
    pm2.61da2ne $p |- ( ph -> ps ) $=
      ( wne wa wceq adantlr anassrs pm2.61dane ) ABCDGACDJZKBEFAEFLBPHMAPEFJBIN
      OO $.
  $}

  ${
    pm2.61da3ne.1 $e |- ( ( ph /\ A = B ) -> ps ) $.
    pm2.61da3ne.2 $e |- ( ( ph /\ C = D ) -> ps ) $.
    pm2.61da3ne.3 $e |- ( ( ph /\ E = F ) -> ps ) $.
    pm2.61da3ne.4 $e |- ( ( ph /\ ( A =/= B /\ C =/= D /\ E =/= F ) )
          -> ps ) $.
    $( Deduction eliminating three inequalities in an antecedent.  (Contributed
       by NM, 15-Jun-2013.)  (Proof shortened by Wolf Lammen, 25-Nov-2019.) $)
    pm2.61da3ne $p |- ( ph -> ps ) $=
      ( wne wa wi wceq a1d 3exp2 imp4b pm2.61dane imp pm2.61da2ne ) ABEFGHJKAEF
      MZGHMZNZBAUEBOCDACDPNBUEIQACDMZUCUDBAUFUCUDBLRSTUAUB $.
  $}

  ${
    pm2.61iine.1 $e |- ( ( A =/= C /\ B =/= D ) -> ph ) $.
    pm2.61iine.2 $e |- ( A = C -> ph ) $.
    pm2.61iine.3 $e |- ( B = D -> ph ) $.
    $( Equality version of ~ pm2.61ii .  (Contributed by Scott Fenton,
       13-Jun-2013.)  (Proof shortened by Wolf Lammen, 25-Nov-2019.) $)
    pm2.61iine $p |- ph $=
      ( wne wceq adantl pm2.61dane pm2.61ine ) ABDGBDIZACECEJANHKFLM $.
  $}

  $( Logical OR with an equality.  (Contributed by NM, 29-Apr-2007.) $)
  neor $p |- ( ( A = B \/ ps ) <-> ( A =/= B -> ps ) ) $=
    ( wceq wo wn wi wne df-or df-ne imbi1i bitr4i ) BCDZAEMFZAGBCHZAGMAIONABCJK
    L $.

  $( A De Morgan's law for inequality.  (Contributed by NM, 18-May-2007.) $)
  neanior $p |- ( ( A =/= B /\ C =/= D ) <-> -. ( A = B \/ C = D ) ) $=
    ( wne wa wceq wn wo df-ne anbi12i pm4.56 bitri ) ABEZCDEZFABGZHZCDGZHZFPRIH
    NQOSABJCDJKPRLM $.

  $( A De Morgan's law for inequality.  (Contributed by NM, 30-Sep-2013.) $)
  ne3anior $p |- ( ( A =/= B /\ C =/= D /\ E =/= F )
        <-> -. ( A = B \/ C = D \/ E = F ) ) $=
    ( wne w3a wn w3o wceq 3anor nne 3orbi123i xchbinx ) ABGZCDGZEFGZHPIZQIZRIZJ
    ABKZCDKZEFKZJPQRLSUBTUCUAUDABMCDMEFMNO $.

  $( A De Morgan's law for inequality.  (Contributed by NM, 18-May-2007.) $)
  neorian $p |- ( ( A =/= B \/ C =/= D ) <-> -. ( A = B /\ C = D ) ) $=
    ( wne wo wceq wn wa df-ne orbi12i ianor bitr4i ) ABEZCDEZFABGZHZCDGZHZFPRIH
    NQOSABJCDJKPRLM $.

  ${
    nemtbir.1 $e |- A =/= B $.
    nemtbir.2 $e |- ( ph <-> A = B ) $.
    $( An inference from an inequality, related to modus tollens.  (Contributed
       by NM, 13-Apr-2007.) $)
    nemtbir $p |- -. ph $=
      ( wceq neii mtbir ) ABCFBCDGEH $.
  $}

  $( Two classes are different if they don't contain the same element.
     (Contributed by NM, 3-Feb-2012.)  (Proof shortened by Wolf Lammen,
     14-May-2023.) $)
  nelne1 $p |- ( ( A e. B /\ -. A e. C ) -> B =/= C ) $=
    ( wcel wn wa nelneq2 neqned ) ABDACDEFBCABCGH $.

  $( Obsolete version of ~ nelne1 asw of 14-May-2023.  (Contributed by NM,
     3-Feb-2012.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  nelne1OLD $p |- ( ( A e. B /\ -. A e. C ) -> B =/= C ) $=
    ( wcel wn wne wceq eleq2 biimpcd necon3bd imp ) ABDZACDZEBCFLMBCBCGLMBCAHIJ
    K $.

  $( Two classes are different if they don't belong to the same class.
     (Contributed by NM, 25-Jun-2012.)  (Proof shortened by Wolf Lammen,
     14-May-2023.) $)
  nelne2 $p |- ( ( A e. C /\ -. B e. C ) -> A =/= B ) $=
    ( wcel wn wa nelneq neqned ) ACDBCDEFABABCGH $.

  $( Obsolete version of ~ nelne2 asw of 14-May-2023.  (Contributed by NM,
     25-Jun-2012.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  nelne2OLD $p |- ( ( A e. C /\ -. B e. C ) -> A =/= B ) $=
    ( wcel wn wne wceq eleq1 biimpcd necon3bd imp ) ACDZBCDZEABFLMABABGLMABCHIJ
    K $.

  $( Two classes are different if they don't belong to the same class.
     (Contributed by Rodolfo Medina, 17-Oct-2010.)  (Proof shortened by AV,
     10-May-2020.) $)
  nelelne $p |- ( -. A e. B -> ( C e. B -> C =/= A ) ) $=
    ( wcel wn wne nelne2 expcom ) CBDABDECAFCABGH $.

  $( If two classes are different, a third class must be different of at least
     one of them.  (Contributed by Thierry Arnoux, 8-Aug-2020.) $)
  neneor $p |- ( A =/= B -> ( A =/= C \/ B =/= C ) ) $=
    ( wne wceq wa wn wo eqtr3 necon3ai neorian sylibr ) ABDACEBCEFZGACDBCDHMABA
    BCIJACBCKL $.

  ${
    nfne.1 $e |- F/_ x A $.
    nfne.2 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for inequality.  (Contributed by NM,
       10-Nov-2007.)  (Revised by Mario Carneiro, 7-Oct-2016.) $)
    nfne $p |- F/ x A =/= B $=
      ( wne wceq wn df-ne nfeq nfn nfxfr ) BCFBCGZHABCIMAABCDEJKL $.
  $}

  ${
    nfned.1 $e |- ( ph -> F/_ x A ) $.
    nfned.2 $e |- ( ph -> F/_ x B ) $.
    $( Bound-variable hypothesis builder for inequality.  (Contributed by NM,
       10-Nov-2007.)  (Revised by Mario Carneiro, 7-Oct-2016.) $)
    nfned $p |- ( ph -> F/ x A =/= B ) $=
      ( wne wceq wn df-ne nfeqd nfnd nfxfrd ) CDGCDHZIABCDJANBABCDEFKLM $.
  $}

  $( Not equivalent wff's correspond to not equal class abstractions.
     (Contributed by AV, 7-Apr-2019.)  (Proof shortened by Wolf Lammen,
     25-Nov-2019.) $)
  nabbi $p |- ( E. x ( ph <-> -. ps ) <-> { x | ph } =/= { x | ps } ) $=
    ( cab wne wceq wn wex df-ne wal exnal xor3 exbii bitr3i abbi xchnxbi bitr2i
    wb ) ACDZBCDZESTFZGABGRZCHZSTIABRZCJZUCUAUEGUDGZCHUCUDCKUFUBCABLMNABCOPQ $.


$(
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
  Negated membership
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
$)

  $c e/ $.  $( Not an element of (membership symbol with slash through it). $)

  $( Extend wff notation to include negated membership. $)
  wnel $a wff A e/ B $.

  $( Define negated membership.  (Contributed by NM, 7-Aug-1994.) $)
  df-nel $a |- ( A e/ B <-> -. A e. B ) $.

  ${
    neli.1 $e |- A e/ B $.
    $( Inference associated with ~ df-nel .  (Contributed by BJ,
       7-Jul-2018.) $)
    neli $p |- -. A e. B $=
      ( wnel wcel wn df-nel mpbi ) ABDABEFCABGH $.
  $}

  ${
    nelir.1 $e |- -. A e. B $.
    $( Inference associated with ~ df-nel .  (Contributed by BJ,
       7-Jul-2018.) $)
    nelir $p |- A e/ B $=
      ( wnel wcel wn df-nel mpbir ) ABDABEFCABGH $.
  $}

  ${
    neleq12d.1 $e |- ( ph -> A = B ) $.
    neleq12d.2 $e |- ( ph -> C = D ) $.
    $( Equality theorem for negated membership.  (Contributed by FL,
       10-Aug-2016.)  (Proof shortened by Wolf Lammen, 25-Nov-2019.) $)
    neleq12d $p |- ( ph -> ( A e/ C <-> B e/ D ) ) $=
      ( wcel wn wnel eleq12d notbid df-nel 3bitr4g ) ABDHZICEHZIBDJCEJAOPABCDEF
      GKLBDMCEMN $.
  $}

  $( Equality theorem for negated membership.  (Contributed by NM,
     20-Nov-1994.)  (Proof shortened by Wolf Lammen, 25-Nov-2019.) $)
  neleq1 $p |- ( A = B -> ( A e/ C <-> B e/ C ) ) $=
    ( wceq id eqidd neleq12d ) ABDZABCCHEHCFG $.

  $( Equality theorem for negated membership.  (Contributed by NM,
     20-Nov-1994.)  (Proof shortened by Wolf Lammen, 25-Nov-2019.) $)
  neleq2 $p |- ( A = B -> ( C e/ A <-> C e/ B ) ) $=
    ( wceq eqidd id neleq12d ) ABDZCCABHCEHFG $.

  ${
    nfnel.1 $e |- F/_ x A $.
    nfnel.2 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for negated membership.  (Contributed
       by David Abernethy, 26-Jun-2011.)  (Revised by Mario Carneiro,
       7-Oct-2016.) $)
    nfnel $p |- F/ x A e/ B $=
      ( wnel wcel wn df-nel nfel nfn nfxfr ) BCFBCGZHABCIMAABCDEJKL $.
  $}

  ${
    nfneld.1 $e |- ( ph -> F/_ x A ) $.
    nfneld.2 $e |- ( ph -> F/_ x B ) $.
    $( Bound-variable hypothesis builder for negated membership.  (Contributed
       by David Abernethy, 26-Jun-2011.)  (Revised by Mario Carneiro,
       7-Oct-2016.) $)
    nfneld $p |- ( ph -> F/ x A e/ B ) $=
      ( wnel wcel wn df-nel nfeld nfnd nfxfrd ) CDGCDHZIABCDJANBABCDEFKLM $.
  $}

  $( Negation of negated membership, analogous to ~ nne .  (Contributed by
     Alexander van der Vekens, 18-Jan-2018.)  (Proof shortened by Wolf Lammen,
     25-Nov-2019.) $)
  nnel $p |- ( -. A e/ B <-> A e. B ) $=
    ( wcel wnel wn df-nel bicomi con1bii ) ABCZABDZJIEABFGH $.

  $( Two classes are different if they don't contain the same element.
     (Contributed by AV, 28-Jan-2020.) $)
  elnelne1 $p |- ( ( A e. B /\ A e/ C ) -> B =/= C ) $=
    ( wnel wcel wn wne df-nel nelne1 sylan2b ) ACDABEACEFBCGACHABCIJ $.

  $( Two classes are different if they don't belong to the same class.
     (Contributed by AV, 28-Jan-2020.) $)
  elnelne2 $p |- ( ( A e. C /\ B e/ C ) -> A =/= B ) $=
    ( wnel wcel wn wne df-nel nelne2 sylan2b ) BCDACEBCEFABGBCHABCIJ $.

  ${
    nelcon3d.1 $e |- ( ph -> ( A e. B -> C e. D ) ) $.
    $( Contrapositive law deduction for negated membership.  (Contributed by
       AV, 28-Jan-2020.) $)
    nelcon3d $p |- ( ph -> ( C e/ D -> A e/ B ) ) $=
      ( wcel wn wnel con3d df-nel 3imtr4g ) ADEGZHBCGZHDEIBCIANMFJDEKBCKL $.
  $}

  $( A contradiction concerning membership implies anything.  (Contributed by
     Alexander van der Vekens, 25-Jan-2018.) $)
  elnelall $p |- ( A e. B -> ( A e/ B -> ph ) ) $=
    ( wnel wcel wn df-nel pm2.24 syl5bi ) BCDBCEZFJABCGJAHI $.

  ${
    pm2.61danel.1 $e |- ( ( ph /\ A e. B ) -> ps ) $.
    pm2.61danel.2 $e |- ( ( ph /\ A e/ B ) -> ps ) $.
    $( Deduction eliminating an elementhood in an antecedent.  (Contributed by
       AV, 5-Dec-2021.) $)
    pm2.61danel $p |- ( ph -> ps ) $=
      ( wcel wn wnel df-nel sylan2br pm2.61dan ) ACDGZBEMHACDIBCDJFKL $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Restricted quantification
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Extend wff notation to include restricted universal quantification. $)
  wral $a wff A. x e. A ph $.

  $( Extend wff notation to include restricted existential quantification. $)
  wrex $a wff E. x e. A ph $.

  $( Extend wff notation to include restricted existential uniqueness. $)
  wreu $a wff E! x e. A ph $.

  $( Extend wff notation to include restricted "at most one." $)
  wrmo $a wff E* x e. A ph $.

  $( Extend class notation to include the restricted class abstraction (class
     builder). $)
  crab $a class { x e. A | ph } $.

  $( Define restricted universal quantification.  Special case of Definition
     4.15(3) of [TakeutiZaring] p. 22.

     Note:  This notation is most often used to express that ` ph ` holds for
     all elements of a given class ` A ` .  For this reading ` F/_ x A ` is
     required, though, for example, asserted when ` x ` and ` A ` are disjoint.

     Should instead ` A ` depend on ` x ` , you rather focus on those ` x `
     that happen to be contained in the corresponding ` A ( x ) ` .  This
     hardly used interpretation could still occur naturally.  For some
     examples, look at ~ ralndv1 or ~ ralndv2 , courtesy of AV.

     So be careful to either keep ` A ` independent of ` x ` , or adjust your
     comments to include such exotic cases.  (Contributed by NM,
     19-Aug-1993.) $)
  df-ral $a |- ( A. x e. A ph <-> A. x ( x e. A -> ph ) ) $.

  $( Define restricted existential quantification.  Special case of Definition
     4.15(4) of [TakeutiZaring] p. 22.

     Note:  This notation is most often used to express that ` ph ` holds for
     at least one element of a given class ` A ` .  For this reading
     ` F/_ x A ` is required, though, for example, asserted when ` x ` and
     ` A ` are disjoint.

     Should instead ` A ` depend on ` x ` , you rather assert at least one
     ` x ` fulfilling ` ph ` happens to be contained in the corresponding
     ` A ( x ) ` .  This interpretation is rarely needed (see also ~ df-ral ).
     (Contributed by NM, 30-Aug-1993.) $)
  df-rex $a |- ( E. x e. A ph <-> E. x ( x e. A /\ ph ) ) $.

  $( Define restricted existential uniqueness.

     Note:  This notation is most often used to express that ` ph ` holds for
     exactly one element of a given class ` A ` .  For this reading ` F/_ x A `
     is required, though, for example, asserted when ` x ` and ` A ` are
     disjoint.

     Should instead ` A ` depend on ` x ` , you rather assert exactly one ` x `
     fulfilling ` ph ` happens to be contained in the corresponding
     ` A ( x ) ` .  This interpretation is rarely needed (see also ~ df-ral ).
     (Contributed by NM, 22-Nov-1994.) $)
  df-reu $a |- ( E! x e. A ph <-> E! x ( x e. A /\ ph ) ) $.

  $( Define restricted "at most one".

     Note:  This notation is most often used to express that ` ph ` holds for
     at most one element of a given class ` A ` .  For this reading ` F/_ x A `
     is required, though, for example, asserted when ` x ` and ` A ` are
     disjoint.

     Should instead ` A ` depend on ` x ` , you rather assert at most one ` x `
     fulfilling ` ph ` happens to be contained in the corresponding
     ` A ( x ) ` .  This interpretation is rarely needed (see also ~ df-ral ).
     (Contributed by NM, 16-Jun-2017.) $)
  df-rmo $a |- ( E* x e. A ph <-> E* x ( x e. A /\ ph ) ) $.

  $( Define a restricted class abstraction (class builder), which is the class
     of all ` x ` in ` A ` such that ` ph ` is true.  Definition of
     [TakeutiZaring] p. 20.

     Note:  For the reading given above ` F/_ x A ` is required, though, for
     example, asserted when ` x ` and ` A ` are disjoint.

     Should instead ` A ` depend on ` x ` , you rather get a class of all those
     ` x ` fulfilling ` ph ` that happen to be contained in the corresponding
     ` A ( x ) ` .  This need not be a subset of any of the ` A ( x ) ` at all.
     Such interpretation is rarely needed (see also ~ df-ral ).  (Contributed
     by NM, 22-Nov-1994.) $)
  df-rab $a |- { x e. A | ph } = { x | ( x e. A /\ ph ) } $.

  ${
    rgen.1 $e |- ( x e. A -> ph ) $.
    $( Generalization rule for restricted quantification.  (Contributed by NM,
       19-Nov-1994.) $)
    rgen $p |- A. x e. A ph $=
      ( wral cv wcel wi df-ral mpgbir ) ABCEBFCGAHBABCIDJ $.
  $}

  $( All elements of a class are elements of the class.  (Contributed by AV,
     30-Oct-2020.) $)
  ralel $p |- A. x e. A x e. A $=
    ( cv wcel id rgen ) ACBDZABGEF $.

  ${
    rgenw.1 $e |- ph $.
    $( Generalization rule for restricted quantification.  (Contributed by NM,
       18-Jun-2014.) $)
    rgenw $p |- A. x e. A ph $=
      ( cv wcel a1i rgen ) ABCABECFDGH $.

    $( Generalization rule for restricted quantification.  Note that ` x ` and
       ` y ` needn't be distinct.  (Contributed by NM, 18-Jun-2014.) $)
    rgen2w $p |- A. x e. A A. y e. B ph $=
      ( wral rgenw ) ACEGBDACEFHH $.
  $}

  ${
    mprg.1 $e |- ( A. x e. A ph -> ps ) $.
    mprg.2 $e |- ( x e. A -> ph ) $.
    $( Modus ponens combined with restricted generalization.  (Contributed by
       NM, 10-Aug-2004.) $)
    mprg $p |- ps $=
      ( wral rgen ax-mp ) ACDGBACDFHEI $.
  $}

  ${
    mprgbir.1 $e |- ( ph <-> A. x e. A ps ) $.
    mprgbir.2 $e |- ( x e. A -> ps ) $.
    $( Modus ponens on biconditional combined with restricted generalization.
       (Contributed by NM, 21-Mar-2004.) $)
    mprgbir $p |- ph $=
      ( wral rgen mpbir ) ABCDGBCDFHEI $.
  $}

  $( Universal quantification implies restricted quantification.  (Contributed
     by NM, 20-Oct-2006.) $)
  alral $p |- ( A. x ph -> A. x e. A ph ) $=
    ( wal cv wcel wi wral ala1 df-ral sylibr ) ABDBECFZAGBDABCHALBIABCJK $.

  $( Restricted universally quantified negation expressed as a universally
     quantified negation.  (Contributed by BJ, 16-Jul-2021.) $)
  raln $p |- ( A. x e. A -. ph <-> A. x -. ( x e. A /\ ph ) ) $=
    ( wn wral cv wcel wi wal wa df-ral imnang bitri ) ADZBCEBFCGZNHBIOAJDBINBCK
    OABLM $.

  ${
    ral2imi.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Inference quantifying antecedent, nested antecedent, and consequent,
       with a strong hypothesis.  (Contributed by NM, 19-Dec-2006.)  Allow
       shortening of ~ ralim .  (Revised by Wolf Lammen, 1-Dec-2019.) $)
    ral2imi $p |- ( A. x e. A ph -> ( A. x e. A ps -> A. x e. A ch ) ) $=
      ( wral cv wcel wi wal df-ral imim3i al2imi 3imtr4g sylbi ) ADEGDHEIZAJZDK
      ZBDEGZCDEGZJADELSQBJZDKQCJZDKTUARUBUCDABCQFMNBDELCDELOP $.
  $}

  ${
    ralimi2.1 $e |- ( ( x e. A -> ph ) -> ( x e. B -> ps ) ) $.
    $( Inference quantifying both antecedent and consequent.  (Contributed by
       NM, 22-Feb-2004.) $)
    ralimi2 $p |- ( A. x e. A ph -> A. x e. B ps ) $=
      ( cv wcel wi wal wral alimi df-ral 3imtr4i ) CGZDHAIZCJOEHBIZCJACDKBCEKPQ
      CFLACDMBCEMN $.
  $}

  ${
    ralimia.1 $e |- ( x e. A -> ( ph -> ps ) ) $.
    $( Inference quantifying both antecedent and consequent.  (Contributed by
       NM, 19-Jul-1996.) $)
    ralimia $p |- ( A. x e. A ph -> A. x e. A ps ) $=
      ( cv wcel a2i ralimi2 ) ABCDDCFDGABEHI $.
  $}

  ${
    ralimiaa.1 $e |- ( ( x e. A /\ ph ) -> ps ) $.
    $( Inference quantifying both antecedent and consequent.  (Contributed by
       NM, 4-Aug-2007.) $)
    ralimiaa $p |- ( A. x e. A ph -> A. x e. A ps ) $=
      ( cv wcel ex ralimia ) ABCDCFDGABEHI $.
  $}

  ${
    ralimi.1 $e |- ( ph -> ps ) $.
    $( Inference quantifying both antecedent and consequent, with strong
       hypothesis.  (Contributed by NM, 4-Mar-1997.) $)
    ralimi $p |- ( A. x e. A ph -> A. x e. A ps ) $=
      ( wi cv wcel a1i ralimia ) ABCDABFCGDHEIJ $.

    $( Inference quantifying both antecedent and consequent two times, with
       strong hypothesis.  (Contributed by AV, 3-Dec-2021.) $)
    2ralimi $p |- ( A. x e. A A. y e. B ph -> A. x e. A A. y e. B ps ) $=
      ( wral ralimi ) ADFHBDFHCEABDFGII $.
  $}

  $( Distribution of restricted quantification over implication.  (Contributed
     by NM, 9-Feb-1997.)  (Proof shortened by Wolf Lammen, 1-Dec-2019.) $)
  ralim $p |- ( A. x e. A ( ph -> ps ) ->
               ( A. x e. A ph -> A. x e. A ps ) ) $=
    ( wi id ral2imi ) ABEZABCDHFG $.

  ${
    ralbii2.1 $e |- ( ( x e. A -> ph ) <-> ( x e. B -> ps ) ) $.
    $( Inference adding different restricted universal quantifiers to each side
       of an equivalence.  (Contributed by NM, 15-Aug-2005.) $)
    ralbii2 $p |- ( A. x e. A ph <-> A. x e. B ps ) $=
      ( cv wcel wi wal wral albii df-ral 3bitr4i ) CGZDHAIZCJOEHBIZCJACDKBCEKPQ
      CFLACDMBCEMN $.
  $}

  ${
    ralbiia.1 $e |- ( x e. A -> ( ph <-> ps ) ) $.
    $( Inference adding restricted universal quantifier to both sides of an
       equivalence.  (Contributed by NM, 26-Nov-2000.) $)
    ralbiia $p |- ( A. x e. A ph <-> A. x e. A ps ) $=
      ( cv wcel pm5.74i ralbii2 ) ABCDDCFDGABEHI $.
  $}

  ${
    ralbii.1 $e |- ( ph <-> ps ) $.
    $( Inference adding restricted universal quantifier to both sides of an
       equivalence.  (Contributed by NM, 23-Nov-1994.)  (Revised by Mario
       Carneiro, 17-Oct-2016.)  (Proof shortened by Wolf Lammen,
       4-Dec-2019.) $)
    ralbii $p |- ( A. x e. A ph <-> A. x e. A ps ) $=
      ( cv wcel imbi2i ralbii2 ) ABCDDABCFDGEHI $.

    $( Inference adding two restricted universal quantifiers to both sides of
       an equivalence.  (Contributed by NM, 1-Aug-2004.) $)
    2ralbii $p |- ( A. x e. A A. y e. B ph <-> A. x e. A A. y e. B ps ) $=
      ( wral ralbii ) ADFHBDFHCEABDFGII $.
  $}

  $( Distribute a restricted universal quantifier over a biconditional.
     Restricted quantification version of ~ albi .  (Contributed by NM,
     6-Oct-2003.)  Reduce axiom usage.  (Revised by Wolf Lammen,
     17-Jun-2023.) $)
  ralbi $p |- ( A. x e. A ( ph <-> ps ) ->
               ( A. x e. A ph <-> A. x e. A ps ) ) $=
    ( wb wral biimp ral2imi biimpr impbid ) ABEZCDFACDFBCDFKABCDABGHKBACDABIHJ
    $.

  $( $j usage 'ralbi' avoids 'ax-5' 'ax-6' 'ax-7' 'ax-10' 'ax-12' ; $)

  $( Cancellation law for restricted universal quantification.  (Contributed by
     Peter Mazsa, 30-Dec-2018.)  (Proof shortened by Wolf Lammen,
     29-Jun-2023.) $)
  ralanid $p |- ( A. x e. A ( x e. A /\ ph ) <-> A. x e. A ph ) $=
    ( cv wcel wa ibar bicomd ralbiia ) BDCEZAFZABCJAKJAGHI $.

  $( Obsolete version of ~ ralanid as of 29-Jun-2023.  (Contributed by Peter
     Mazsa, 30-Dec-2018.)  (New usage is discouraged.)
     (Proof modification is discouraged.) $)
  ralanidOLD $p |- ( A. x e. A ( x e. A /\ ph ) <-> A. x e. A ph ) $=
    ( cv wcel wi wal wa wral anclb albii df-ral 3bitr4ri ) BDCEZAFZBGNNAHZFZBGA
    BCIPBCIOQBNAJKABCLPBCLM $.

  $( Restricted quantifier version of ~ 19.26 .  (Contributed by NM,
     28-Jan-1997.)  (Proof shortened by Andrew Salmon, 30-May-2011.) $)
  r19.26 $p |- ( A. x e. A ( ph /\ ps ) <->
               ( A. x e. A ph /\ A. x e. A ps ) ) $=
    ( wa wral simpl ralimi simpr jca pm3.2 ral2imi imp impbii ) ABEZCDFZACDFZBC
    DFZEPQROACDABGHOBCDABIHJQRPABOCDABKLMN $.

  $( Restricted quantifier version of ~ 19.26-2 .  Version of ~ r19.26 with two
     quantifiers.  (Contributed by NM, 10-Aug-2004.) $)
  r19.26-2 $p |- ( A. x e. A A. y e. B ( ph /\ ps ) <->
               ( A. x e. A A. y e. B ph /\ A. x e. A A. y e. B ps ) ) $=
    ( wa wral r19.26 ralbii bitri ) ABGDFHZCEHADFHZBDFHZGZCEHMCEHNCEHGLOCEABDFI
    JMNCEIK $.

  $( Version of ~ r19.26 with three quantifiers.  (Contributed by FL,
     22-Nov-2010.) $)
  r19.26-3 $p |- ( A. x e. A ( ph /\ ps /\ ch ) <->
               ( A. x e. A ph /\ A. x e. A ps /\ A. x e. A ch ) ) $=
    ( w3a wral wa df-3an ralbii r19.26 anbi1i bitr4i 3bitri ) ABCFZDEGABHZCHZDE
    GPDEGZCDEGZHZADEGZBDEGZSFZOQDEABCIJPCDEKTUAUBHZSHUCRUDSABDEKLUAUBSIMN $.

  $( Version of ~ 19.26 and ~ r19.26 with restricted quantifiers ranging over
     different classes.  (Contributed by NM, 22-Feb-2004.) $)
  r19.26m $p |- ( A. x ( ( x e. A -> ph ) /\ ( x e. B -> ps ) ) <->
               ( A. x e. A ph /\ A. x e. B ps ) ) $=
    ( cv wcel wi wa wal wral 19.26 df-ral anbi12i bitr4i ) CFZDGAHZPEGBHZICJQCJ
    ZRCJZIACDKZBCEKZIQRCLUASUBTACDMBCEMNO $.

  $( Split a biconditional and distribute quantifier.  Restricted quantifier
     version of ~ albiim .  (Contributed by NM, 3-Jun-2012.) $)
  ralbiim $p |- ( A. x e. A ( ph <-> ps ) <->
             ( A. x e. A ( ph -> ps ) /\ A. x e. A ( ps -> ph ) ) ) $=
    ( wb wral wi wa dfbi2 ralbii r19.26 bitri ) ABEZCDFABGZBAGZHZCDFNCDFOCDFHMP
    CDABIJNOCDKL $.

  ${
    $d x ph $.
    $( Restricted quantifier version of ~ 19.21v .  (Contributed by NM,
       15-Oct-2003.)  (Proof shortened by Andrew Salmon, 30-May-2011.)  Reduce
       dependencies on axioms.  (Revised by Wolf Lammen, 2-Jan-2020.) $)
    r19.21v $p |- ( A. x e. A ( ph -> ps ) <-> ( ph -> A. x e. A ps ) ) $=
      ( cv wcel wi wal wral bi2.04 albii 19.21v bitri df-ral imbi2i 3bitr4i ) C
      EDFZABGZGZCHZAQBGZCHZGZRCDIABCDIZGTAUAGZCHUCSUECQABJKAUACLMRCDNUDUBABCDNO
      P $.
  $}

  ${
    $d x ph $.
    ralimdv2.1 $e |- ( ph -> ( ( x e. A -> ps ) -> ( x e. B -> ch ) ) ) $.
    $( Inference quantifying both antecedent and consequent.  (Contributed by
       NM, 1-Feb-2005.) $)
    ralimdv2 $p |- ( ph -> ( A. x e. A ps -> A. x e. B ch ) ) $=
      ( cv wcel wi wal wral alimdv df-ral 3imtr4g ) ADHZEIBJZDKPFICJZDKBDELCDFL
      AQRDGMBDENCDFNO $.
  $}

  ${
    $d x ph $.
    ralimdva.1 $e |- ( ( ph /\ x e. A ) -> ( ps -> ch ) ) $.
    $( Deduction quantifying both antecedent and consequent, based on Theorem
       19.20 of [Margaris] p. 90.  (Contributed by NM, 22-May-1999.)  Reduce
       dependencies on axioms.  (Revised by Wolf Lammen, 5-Dec-2019.) $)
    ralimdva $p |- ( ph -> ( A. x e. A ps -> A. x e. A ch ) ) $=
      ( cv wcel wi ex a2d ralimdv2 ) ABCDEEADGEHZBCAMBCIFJKL $.
  $}

  ${
    $d x ph $.
    ralimdv.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Deduction quantifying both antecedent and consequent, based on Theorem
       19.20 of [Margaris] p. 90 ( ~ alim ).  (Contributed by NM,
       8-Oct-2003.) $)
    ralimdv $p |- ( ph -> ( A. x e. A ps -> A. x e. A ch ) ) $=
      ( wi cv wcel adantr ralimdva ) ABCDEABCGDHEIFJK $.
  $}

  ${
    $d y A $.  $d x y ph $.
    ralimdvva.1 $e |- ( ( ph /\ ( x e. A /\ y e. B ) ) -> ( ps -> ch ) ) $.
    $( Deduction doubly quantifying both antecedent and consequent, based on
       Theorem 19.20 of [Margaris] p. 90 ( ~ alim ).  (Contributed by AV,
       27-Nov-2019.) $)
    ralimdvva $p |- ( ph
                   -> ( A. x e. A A. y e. B ps -> A. x e. A A. y e. B ch ) ) $=
      ( wral cv wcel wa wi anassrs ralimdva ) ABEGICEGIDFADJFKZLBCEGAPEJGKBCMHN
      OO $.
  $}

  ${
    hbralrimi.1 $e |- ( ph -> A. x ph ) $.
    hbralrimi.2 $e |- ( ph -> ( x e. A -> ps ) ) $.
    $( Inference from Theorem 19.21 of [Margaris] p. 90 (restricted quantifier
       version).  This theorem contains the common proof steps for ~ ralrimi
       and ~ ralrimiv .  Its main advantage over these two is its minimal
       references to axioms.  The proof is extracted from NM's previous work.
       (Contributed by Wolf Lammen, 4-Dec-2019.) $)
    hbralrimi $p |- ( ph -> A. x e. A ps ) $=
      ( cv wcel wi wal wral alrimih df-ral sylibr ) ACGDHBIZCJBCDKAOCEFLBCDMN
      $.
  $}

  ${
    $d x ph $.
    ralrimiv.1 $e |- ( ph -> ( x e. A -> ps ) ) $.
    $( Inference from Theorem 19.21 of [Margaris] p. 90.  (Restricted
       quantifier version.)  (Contributed by NM, 22-Nov-1994.)  Reduce
       dependencies on axioms.  (Revised by Wolf Lammen, 4-Dec-2019.) $)
    ralrimiv $p |- ( ph -> A. x e. A ps ) $=
      ( ax-5 hbralrimi ) ABCDACFEG $.
  $}

  ${
    $d x ph $.
    ralrimiva.1 $e |- ( ( ph /\ x e. A ) -> ps ) $.
    $( Inference from Theorem 19.21 of [Margaris] p. 90.  (Restricted
       quantifier version.)  (Contributed by NM, 2-Jan-2006.) $)
    ralrimiva $p |- ( ph -> A. x e. A ps ) $=
      ( cv wcel ex ralrimiv ) ABCDACFDGBEHI $.
  $}

  ${
    $d x ph $.
    ralrimivw.1 $e |- ( ph -> ps ) $.
    $( Inference from Theorem 19.21 of [Margaris] p. 90.  (Restricted
       quantifier version.)  (Contributed by NM, 18-Jun-2014.) $)
    ralrimivw $p |- ( ph -> A. x e. A ps ) $=
      ( cv wcel a1d ralrimiv ) ABCDABCFDGEHI $.
  $}

  ${
    $d x ps $.
    $( Restricted quantitifer version of one direction of ~ 19.27 .  (The other
       direction holds when ` A ` is nonempty, see ~ r19.27zv .)  (Contributed
       by NM, 3-Jun-2004.)  (Proof shortened by Andrew Salmon, 30-May-2011.)
       (Proof shortened by Wolf Lammen, 17-Jun-2023.) $)
    r19.27v $p |- ( ( A. x e. A ph /\ ps ) -> A. x e. A ( ph /\ ps ) ) $=
      ( wral wa id ralrimivw anim2i r19.26 sylibr ) ACDEZBFLBCDEZFABFCDEBMLBBCD
      BGHIABCDJK $.

    $( Obsolete version of ~ r19.27v as of 17-Jun-2023.  (Contributed by NM,
       3-Jun-2004.)  (Proof shortened by Andrew Salmon, 30-May-2011.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    r19.27vOLD $p |- ( ( A. x e. A ph /\ ps ) -> A. x e. A ( ph /\ ps ) ) $=
      ( wral wa cv wcel ax-1 ralrimiv anim2i r19.26 sylibr ) ACDEZBFNBCDEZFABFC
      DEBONBBCDBCGDHIJKABCDLM $.
  $}

  ${
    $d x ph $.
    $( Restricted quantifier version of one direction of ~ 19.28 .  (The other
       direction holds when ` A ` is nonempty, see ~ r19.28zv .)  (Contributed
       by NM, 2-Apr-2004.)  (Proof shortened by Wolf Lammen, 17-Jun-2023.) $)
    r19.28v $p |- ( ( ph /\ A. x e. A ps ) -> A. x e. A ( ph /\ ps ) ) $=
      ( wral wa id ralrimivw anim1i r19.26 sylibr ) ABCDEZFACDEZLFABFCDEAMLAACD
      AGHIABCDJK $.

    $( Obsolete version of ~ r19.28v as of 17-Jun-2023.  (Contributed by NM,
       2-Apr-2004.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    r19.28vOLD $p |- ( ( ph /\ A. x e. A ps ) -> A. x e. A ( ph /\ ps ) ) $=
      ( wral wa r19.27v ancom ralbii 3imtr4i ) BCDEZAFBAFZCDEAKFABFZCDEBACDGAKH
      MLCDABHIJ $.
  $}

  ${
    $d x ph $.  $d x ps $.
    ralrimdv.1 $e |- ( ph -> ( ps -> ( x e. A -> ch ) ) ) $.
    $( Inference from Theorem 19.21 of [Margaris] p. 90.  (Restricted
       quantifier version.)  (Contributed by NM, 27-May-1998.)  Reduce
       dependencies on axioms.  (Revised by Wolf Lammen, 28-Dec-2019.) $)
    ralrimdv $p |- ( ph -> ( ps -> A. x e. A ch ) ) $=
      ( wral wa cv wcel wi imp ralrimiv ex ) ABCDEGABHCDEABDIEJCKFLMN $.
  $}

  ${
    $d x ph $.  $d x ps $.
    ralrimdva.1 $e |- ( ( ph /\ x e. A ) -> ( ps -> ch ) ) $.
    $( Inference from Theorem 19.21 of [Margaris] p. 90.  (Restricted
       quantifier version.)  (Contributed by NM, 2-Feb-2008.)  (Proof shortened
       by Wolf Lammen, 28-Dec-2019.) $)
    ralrimdva $p |- ( ph -> ( ps -> A. x e. A ch ) ) $=
      ( cv wcel expimpd expcomd ralrimdv ) ABCDEADGEHZBCALBCFIJK $.
  $}

  ${
    $d x y ph $.  $d y A $.
    ralrimivv.1 $e |- ( ph -> ( ( x e. A /\ y e. B ) -> ps ) ) $.
    $( Inference from Theorem 19.21 of [Margaris] p. 90.  (Restricted
       quantifier version with double quantification.)  (Contributed by NM,
       24-Jul-2004.) $)
    ralrimivv $p |- ( ph -> A. x e. A A. y e. B ps ) $=
      ( wral cv wcel expd ralrimdv ralrimiv ) ABDFHCEACIEJZBDFANDIFJBGKLM $.
  $}

  ${
    $d ph x y $.  $d A y $.
    ralrimivva.1 $e |- ( ( ph /\ ( x e. A /\ y e. B ) ) -> ps ) $.
    $( Inference from Theorem 19.21 of [Margaris] p. 90.  (Restricted
       quantifier version with double quantification.)  (Contributed by Jeff
       Madsen, 19-Jun-2011.) $)
    ralrimivva $p |- ( ph -> A. x e. A A. y e. B ps ) $=
      ( cv wcel wa ex ralrimivv ) ABCDEFACHEIDHFIJBGKL $.
  $}

  ${
    $d ph x y z $.  $d A y z $.  $d B z $.
    ralrimivvva.1 $e |- ( ( ph /\ ( x e. A /\ y e. B /\ z e. C ) ) -> ps ) $.
    $( Inference from Theorem 19.21 of [Margaris] p. 90.  (Restricted
       quantifier version with triple quantification.)  (Contributed by Mario
       Carneiro, 9-Jul-2014.) $)
    ralrimivvva $p |- ( ph -> A. x e. A A. y e. B A. z e. C ps ) $=
      ( wral cv wcel wa 3anassrs ralrimiva ) ABEHJZDGJCFACKFLZMZPDGRDKGLZMBEHAQ
      SEKHLBINOOO $.
  $}

  ${
    $d x y ph $.  $d x y ps $.  $d y A $.
    ralrimdvv.1 $e |- ( ph -> ( ps -> ( ( x e. A /\ y e. B ) -> ch ) ) ) $.
    $( Inference from Theorem 19.21 of [Margaris] p. 90.  (Restricted
       quantifier version with double quantification.)  (Contributed by NM,
       1-Jun-2005.) $)
    ralrimdvv $p |- ( ph -> ( ps -> A. x e. A A. y e. B ch ) ) $=
      ( wral wa cv wcel wi imp ralrimivv ex ) ABCEGIDFIABJCDEFGABDKFLEKGLJCMHNO
      P $.
  $}

  ${
    $d x y ph $.  $d x y ps $.  $d y A $.
    ralrimdvva.1 $e |- ( ( ph /\ ( x e. A /\ y e. B ) ) -> ( ps -> ch ) ) $.
    $( Inference from Theorem 19.21 of [Margaris] p. 90.  (Restricted
       quantifier version with double quantification.)  (Contributed by NM,
       2-Feb-2008.) $)
    ralrimdvva $p |- ( ph -> ( ps -> A. x e. A A. y e. B ch ) ) $=
      ( cv wcel wa wi ex com23 ralrimdvv ) ABCDEFGADIFJEIGJKZBCAPBCLHMNO $.
  $}

  ${
    $d x ph $.
    ralbidv2.1 $e |- ( ph -> ( ( x e. A -> ps ) <-> ( x e. B -> ch ) ) ) $.
    $( Formula-building rule for restricted universal quantifier (deduction
       form).  (Contributed by NM, 6-Apr-1997.) $)
    ralbidv2 $p |- ( ph -> ( A. x e. A ps <-> A. x e. B ch ) ) $=
      ( cv wcel wi wal wral albidv df-ral 3bitr4g ) ADHZEIBJZDKPFICJZDKBDELCDFL
      AQRDGMBDENCDFNO $.
  $}

  ${
    $d x ph $.
    ralbidva.1 $e |- ( ( ph /\ x e. A ) -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted universal quantifier (deduction
       form).  (Contributed by NM, 4-Mar-1997.)  Reduce dependencies on axioms.
       (Revised by Wolf Lammen, 29-Dec-2019.) $)
    ralbidva $p |- ( ph -> ( A. x e. A ps <-> A. x e. A ch ) ) $=
      ( cv wcel pm5.74da ralbidv2 ) ABCDEEADGEHBCFIJ $.
  $}

  ${
    $d x ph $.
    ralbidv.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted universal quantifier (deduction
       form).  (Contributed by NM, 20-Nov-1994.)  Reduce dependencies on
       axioms.  (Revised by Wolf Lammen, 5-Dec-2019.) $)
    ralbidv $p |- ( ph -> ( A. x e. A ps <-> A. x e. A ch ) ) $=
      ( wb cv wcel adantr ralbidva ) ABCDEABCGDHEIFJK $.
  $}

  ${
    $d x y ph $.  $d y A $.
    2ralbidva.1 $e |- ( ( ph /\ ( x e. A /\ y e. B ) ) -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted universal quantifiers (deduction
       form).  (Contributed by NM, 4-Mar-1997.)  Reduce dependencies on axioms.
       (Revised by Wolf Lammen, 9-Dec-2019.) $)
    2ralbidva $p |- ( ph ->
                     ( A. x e. A A. y e. B ps <-> A. x e. A A. y e. B ch ) ) $=
      ( wral cv wcel wa wb anassrs ralbidva ) ABEGICEGIDFADJFKZLBCEGAPEJGKBCMHN
      OO $.
  $}

  ${
    $d x ph $.  $d y ph $.
    2ralbidv.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted universal quantifiers (deduction
       form).  (Contributed by NM, 28-Jan-2006.)  (Revised by Szymon
       Jaroszewicz, 16-Mar-2007.) $)
    2ralbidv $p |- ( ph ->
                     ( A. x e. A A. y e. B ps <-> A. x e. A A. y e. B ch ) ) $=
      ( wral ralbidv ) ABEGICEGIDFABCEGHJJ $.
  $}

  ${
    r2allem.1 $e |- ( A. y ( x e. A -> ( y e. B -> ph ) )
                      <-> ( x e. A -> A. y ( y e. B -> ph ) ) ) $.
    $( Lemma factoring out common proof steps of ~ r2alf and ~ r2al .
       Introduced to reduce dependencies on axioms.  (Contributed by Wolf
       Lammen, 9-Jan-2020.) $)
    r2allem $p |- ( A. x e. A A. y e. B ph <->
               A. x A. y ( ( x e. A /\ y e. B ) -> ph ) ) $=
      ( wral cv wcel wi wal wa df-ral impexp albii imbi2i 3bitr4i bitr4i ) ACEG
      ZBDGBHDIZSJZBKTCHEIZLAJZCKZBKSBDMUDUABTUBAJZJZCKTUECKZJUDUAFUCUFCTUBANOSU
      GTACEMPQOR $.
  $}

  ${
    $d x y $.  $d y A $.
    $( Double restricted universal quantification.  (Contributed by NM,
       19-Nov-1995.)  Reduce dependencies on axioms.  (Revised by Wolf Lammen,
       9-Jan-2020.) $)
    r2al $p |- ( A. x e. A A. y e. B ph <->
               A. x A. y ( ( x e. A /\ y e. B ) -> ph ) ) $=
      ( cv wcel wi 19.21v r2allem ) ABCDEBFDGCFEGAHCIJ $.
  $}

  ${
    $d x y z $.  $d y z A $.  $d z B $.
    $( Triple restricted universal quantification.  (Contributed by NM,
       19-Nov-1995.)  (Proof shortened by Wolf Lammen, 30-Dec-2019.) $)
    r3al $p |- ( A. x e. A A. y e. B A. z e. C ph <->
               A. x A. y A. z ( ( x e. A /\ y e. B /\ z e. C ) -> ph ) ) $=
      ( wral cv wcel wa wi wal w3a r2al 19.21v df-3an imbi1i impexp bitri albii
      df-ral imbi2i 3bitr4ri 2albii ) ADGHZCFHBEHBIEJZCIFJZKZUFLZCMBMUGUHDIGJZN
      ZALZDMZCMBMUFBCEFOUJUNBCUIUKALZLZDMUIUODMZLUNUJUIUODPUMUPDUMUIUKKZALUPULU
      RAUGUHUKQRUIUKASTUAUFUQUIADGUBUCUDUET $.
  $}

  ${
    $d x y $.  $d y A $.
    rgen2.1 $e |- ( ( x e. A /\ y e. B ) -> ph ) $.
    $( Generalization rule for restricted quantification, with two quantifiers.
       (Contributed by NM, 30-May-1999.) $)
    rgen2 $p |- A. x e. A A. y e. B ph $=
      ( wral cv wcel ralrimiva rgen ) ACEGBDBHDIACEFJK $.
  $}

  ${
    $d y z A $.  $d z B $.  $d x y z $.
    rgen3.1 $e |- ( ( x e. A /\ y e. B /\ z e. C ) -> ph ) $.
    $( Generalization rule for restricted quantification, with three
       quantifiers.  (Contributed by NM, 12-Jan-2008.) $)
    rgen3 $p |- A. x e. A A. y e. B A. z e. C ph $=
      ( wral cv wcel wa 3expa ralrimiva rgen2 ) ADGIBCEFBJEKZCJFKZLADGPQDJGKAHM
      NO $.
  $}

  $( Restricted specialization.  (Contributed by NM, 17-Oct-1996.) $)
  rsp $p |- ( A. x e. A ph -> ( x e. A -> ph ) ) $=
    ( wral cv wcel wi wal df-ral sp sylbi ) ABCDBECFAGZBHLABCILBJK $.

  $( Restricted specialization.  (Contributed by Glauco Siliprandi,
     11-Dec-2019.) $)
  rspa $p |- ( ( A. x e. A ph /\ x e. A ) -> ph ) $=
    ( wral cv wcel rsp imp ) ABCDBECFAABCGH $.

  ${
    rspec.1 $e |- A. x e. A ph $.
    $( Specialization rule for restricted quantification.  (Contributed by NM,
       19-Nov-1994.) $)
    rspec $p |- ( x e. A -> ph ) $=
      ( wral cv wcel wi rsp ax-mp ) ABCEBFCGAHDABCIJ $.
  $}

  ${
    r19.21bi.1 $e |- ( ph -> A. x e. A ps ) $.
    $( Inference from Theorem 19.21 of [Margaris] p. 90.  (Restricted
       quantifier version.)  (Contributed by NM, 20-Nov-1994.)  (Proof
       shortened by Wolf Lammen, 11-Jun-2023.) $)
    r19.21bi $p |- ( ( ph /\ x e. A ) -> ps ) $=
      ( wral cv wcel rspa sylan ) ABCDFCGDHBEBCDIJ $.

    $( Obsolete version of ~ r19.21bi as of 11-Jun-2023.  (Contributed by NM,
       20-Nov-1994.)  (Proof shortened by Wolf Lammen, 1-Jan-2020.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    r19.21biOLD $p |- ( ( ph /\ x e. A ) -> ps ) $=
      ( cv wcel wral wi rsp syl imp ) ACFDGZBABCDHMBIEBCDJKL $.
  $}

  ${
    r19.21be.1 $e |- ( ph -> A. x e. A ps ) $.
    $( Inference from Theorem 19.21 of [Margaris] p. 90.  (Restricted
       quantifier version.)  (Contributed by NM, 21-Nov-1994.) $)
    r19.21be $p |- A. x e. A ( ph -> ps ) $=
      ( wi cv wcel r19.21bi expcom rgen ) ABFCDACGDHBABCDEIJK $.
  $}

  ${
    rspec2.1 $e |- A. x e. A A. y e. B ph $.
    $( Specialization rule for restricted quantification, with two quantifiers.
       (Contributed by NM, 20-Nov-1994.) $)
    rspec2 $p |- ( ( x e. A /\ y e. B ) -> ph ) $=
      ( cv wcel wral rspec r19.21bi ) BGDHACEACEIBDFJK $.
  $}

  ${
    rspec3.1 $e |- A. x e. A A. y e. B A. z e. C ph $.
    $( Specialization rule for restricted quantification, with three
       quantifiers.  (Contributed by NM, 20-Nov-1994.) $)
    rspec3 $p |- ( ( x e. A /\ y e. B /\ z e. C ) -> ph ) $=
      ( cv wcel wa wral rspec2 r19.21bi 3impa ) BIEJZCIFJZDIGJAPQKADGADGLBCEFHM
      NO $.
  $}

  $( Restricted specialization, with two quantifiers.  (Contributed by NM,
     11-Feb-1997.) $)
  rsp2 $p |- ( A. x e. A A. y e. B ph -> ( ( x e. A /\ y e. B ) -> ph ) ) $=
    ( wral cv wcel wi rsp syl6 impd ) ACEFZBDFZBGDHZCGEHZANOMPAIMBDJACEJKL $.

  $( Restricted quantifier version of ~ 19.21t ; closed form of ~ r19.21 .
     (Contributed by NM, 1-Mar-2008.)  (Proof shortened by Wolf Lammen,
     2-Jan-2020.) $)
  r19.21t $p |- ( F/ x ph ->
           ( A. x e. A ( ph -> ps ) <-> ( ph -> A. x e. A ps ) ) ) $=
    ( wnf cv wcel wi wal wral 19.21t df-ral bi2.04 albii bitri imbi2i 3bitr4g )
    ACEACFDGZBHZHZCIZASCIZHABHZCDJZABCDJZHASCKUDRUCHZCIUAUCCDLUFTCRABMNOUEUBABC
    DLPQ $.

  ${
    r19.21.1 $e |- F/ x ph $.
    $( Restricted quantifier version of ~ 19.21 .  (Contributed by Scott
       Fenton, 30-Mar-2011.) $)
    r19.21 $p |- ( A. x e. A ( ph -> ps ) <-> ( ph -> A. x e. A ps ) ) $=
      ( wnf wi wral wb r19.21t ax-mp ) ACFABGCDHABCDHGIEABCDJK $.
  $}

  ${
    ralrimi.1 $e |- F/ x ph $.
    ralrimi.2 $e |- ( ph -> ( x e. A -> ps ) ) $.
    $( Inference from Theorem 19.21 of [Margaris] p. 90 (restricted quantifier
       version).  (Contributed by NM, 10-Oct-1999.)  Shortened after
       introduction of ~ hbralrimi .  (Revised by Wolf Lammen, 4-Dec-2019.) $)
    ralrimi $p |- ( ph -> A. x e. A ps ) $=
      ( nf5ri hbralrimi ) ABCDACEGFH $.
  $}

  ${
    ralimdaa.1 $e |- F/ x ph $.
    ralimdaa.2 $e |- ( ( ph /\ x e. A ) -> ( ps -> ch ) ) $.
    $( Deduction quantifying both antecedent and consequent, based on Theorem
       19.20 of [Margaris] p. 90.  (Contributed by NM, 22-Sep-2003.)  (Proof
       shortened by Wolf Lammen, 29-Dec-2019.) $)
    ralimdaa $p |- ( ph -> ( A. x e. A ps -> A. x e. A ch ) ) $=
      ( wi wral cv wcel ex ralrimi ralim syl ) ABCHZDEIBDEICDEIHAPDEFADJEKPGLMB
      CDENO $.
  $}

  ${
    ralrimd.1 $e |- F/ x ph $.
    ralrimd.2 $e |- F/ x ps $.
    ralrimd.3 $e |- ( ph -> ( ps -> ( x e. A -> ch ) ) ) $.
    $( Inference from Theorem 19.21 of [Margaris] p. 90.  (Restricted
       quantifier version.)  (Contributed by NM, 16-Feb-2004.) $)
    ralrimd $p |- ( ph -> ( ps -> A. x e. A ch ) ) $=
      ( cv wcel wi wal wral alrimd df-ral syl6ibr ) ABDIEJCKZDLCDEMABQDFGHNCDEO
      P $.
  $}

  $( The setvar ` x ` is not free in ` A. x e. A ph ` .  (Contributed by NM,
     18-Oct-1996.)  (Revised by Mario Carneiro, 7-Oct-2016.) $)
  nfra1 $p |- F/ x A. x e. A ph $=
    ( wral cv wcel wi wal df-ral nfa1 nfxfr ) ABCDBECFAGZBHBABCILBJK $.

  $( The setvar ` x ` is not free in ` A. x e. A ph ` .  (Contributed by NM,
     18-Oct-1996.)  (Proof shortened by Wolf Lammen, 7-Dec-2019.) $)
  hbra1 $p |- ( A. x e. A ph -> A. x A. x e. A ph ) $=
    ( wral nfra1 nf5ri ) ABCDBABCEF $.

  ${
    hbral.1 $e |- ( y e. A -> A. x y e. A ) $.
    hbral.2 $e |- ( ph -> A. x ph ) $.
    $( Bound-variable hypothesis builder for restricted quantification.
       (Contributed by NM, 1-Sep-1999.)  (Revised by David Abernethy,
       13-Dec-2009.) $)
    hbral $p |- ( A. y e. A ph -> A. x A. y e. A ph ) $=
      ( wral cv wcel wi wal df-ral hbim hbal hbxfrbi ) ACDGCHDIZAJZCKBACDLQBCPA
      BEFMNO $.
  $}

  ${
    $d x y $.
    r2alf.1 $e |- F/_ y A $.
    $( Double restricted universal quantification.  (Contributed by Mario
       Carneiro, 14-Oct-2016.)  Use ~ r2allem .  (Revised by Wolf Lammen,
       9-Jan-2020.) $)
    r2alf $p |- ( A. x e. A A. y e. B ph <->
               A. x A. y ( ( x e. A /\ y e. B ) -> ph ) ) $=
      ( cv wcel wi nfcri 19.21 r2allem ) ABCDEBGDHCGEHAICCBDFJKL $.
  $}

  ${
    nfrald.1 $e |- F/ y ph $.
    nfrald.2 $e |- ( ph -> F/_ x A ) $.
    nfrald.3 $e |- ( ph -> F/ x ps ) $.
    $( Deduction version of ~ nfral .  (Contributed by NM, 15-Feb-2013.)
       (Revised by Mario Carneiro, 7-Oct-2016.) $)
    nfrald $p |- ( ph -> F/ x A. y e. A ps ) $=
      ( wral cv wcel wi wal df-ral weq wn wa wnfc nfcvf adantr adantl nfeld wnf
      nfimd nfald2 nfxfrd ) BDEIDJZEKZBLZDMACBDENAUICDFACDOCMPZQZUHBCUKCUGEUJCU
      GRACDSUAACERUJGTUBABCUCUJHTUDUEUF $.
  $}

  ${
    nfral.1 $e |- F/_ x A $.
    nfral.2 $e |- F/ x ph $.
    $( Bound-variable hypothesis builder for restricted quantification.
       (Contributed by NM, 1-Sep-1999.)  (Revised by Mario Carneiro,
       7-Oct-2016.) $)
    nfral $p |- F/ x A. y e. A ph $=
      ( wral wnf wtru nftru wnfc a1i nfrald mptru ) ACDGBHIABCDCJBDKIELABHIFLMN
      $.
  $}

  ${
    $d A y $.
    $( Similar to Lemma 24 of [Monk2] p. 114, except the quantification of the
       antecedent is restricted.  Derived automatically from ~ hbra2VD .
       Contributed by Alan Sare 31-Dec-2011.  (Contributed by NM,
       31-Dec-2011.) $)
    nfra2 $p |- F/ y A. x e. A A. y e. B ph $=
      ( wral nfcv nfra1 nfral ) ACEFCBDCDGACEHI $.
  $}

  ${
    $d y z A $.  $d x z $.
    rgen2a.1 $e |- ( ( x e. A /\ y e. A ) -> ph ) $.
    $( Generalization rule for restricted quantification.  Note that ` x ` and
       ` y ` are not required to be disjoint.  This proof illustrates the use
       of ~ dvelim .  (Contributed by NM, 23-Nov-1994.)  (Proof shortened by
       Andrew Salmon, 25-May-2011.)  (Proof shortened by Wolf Lammen,
       1-Jan-2020.)  (Proof modification is discouraged.) $)
    rgen2a $p |- A. x e. A A. y e. A ph $=
      ( vz wral cv wcel wi wal weq wn eleq1 dvelimv alimi syl6com biimpd syli
      ex pm2.61d2 df-ral sylibr rgen ) ACDGZBDBHZDIZCHZDIZAJZCKZUEUGCBLZCKZUKUM
      MUGUGCKUKFHZDIUGCBFUNUFDNOUGUJCUGUIAETZPQULUJCUIULUGAULUIUGUHUFDNRUOSPUAA
      CDUBUCUD $.
  $}

  ${
    ralbida.1 $e |- F/ x ph $.
    ralbida.2 $e |- ( ( ph /\ x e. A ) -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted universal quantifier (deduction
       form).  (Contributed by NM, 6-Oct-2003.) $)
    ralbida $p |- ( ph -> ( A. x e. A ps <-> A. x e. A ch ) ) $=
      ( cv wcel wi wal wral pm5.74da albid df-ral 3bitr4g ) ADHEIZBJZDKQCJZDKBD
      ELCDELARSDFAQBCGMNBDEOCDEOP $.
  $}

  ${
    ralbid.1 $e |- F/ x ph $.
    ralbid.2 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted universal quantifier (deduction
       form).  (Contributed by NM, 27-Jun-1998.) $)
    ralbid $p |- ( ph -> ( A. x e. A ps <-> A. x e. A ch ) ) $=
      ( wb cv wcel adantr ralbida ) ABCDEFABCHDIEJGKL $.
  $}

  ${
    $d x y $.  $d y A $.
    2ralbida.1 $e |- F/ x ph $.
    2ralbida.2 $e |- F/ y ph $.
    2ralbida.3 $e |- ( ( ph /\ ( x e. A /\ y e. B ) ) -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted universal quantifier (deduction
       form).  (Contributed by NM, 24-Feb-2004.) $)
    2ralbida $p |- ( ph ->
                     ( A. x e. A A. y e. B ps <-> A. x e. A A. y e. B ch ) ) $=
      ( wral cv wcel wa nfv nfan wb anassrs ralbida ) ABEGKCEGKDFHADLFMZNBCEGAT
      EITEOPATELGMBCQJRSS $.
  $}

  $( Obsolete version of ~ ralbi as of 17-Jun-2023.  (Contributed by NM,
     6-Oct-2003.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  ralbiOLD $p |- ( A. x e. A ( ph <-> ps ) ->
               ( A. x e. A ph <-> A. x e. A ps ) ) $=
    ( wb wral nfra1 rspa ralbida ) ABEZCDFABCDJCDGJCDHI $.

  ${
    raleqbii.1 $e |- A = B $.
    raleqbii.2 $e |- ( ps <-> ch ) $.
    $( Equality deduction for restricted universal quantifier, changing both
       formula and quantifier domain.  Inference form.  (Contributed by David
       Moews, 1-May-2017.) $)
    raleqbii $p |- ( A. x e. A ps <-> A. x e. B ch ) $=
      ( cv wcel eleq2i imbi12i ralbii2 ) ABCDECHZDIMEIABDEMFJGKL $.
  $}

  $( Relationship between restricted universal and existential quantifiers.
     (Contributed by NM, 21-Jan-1997.)  (Proof shortened by BJ,
     16-Jul-2021.) $)
  ralnex $p |- ( A. x e. A -. ph <-> -. E. x e. A ph ) $=
    ( wn wral cv wcel wa wal wrex raln wex alnex df-rex xchbinxr bitri ) ADBCEB
    FCGAHZDBIZABCJZDABCKRQBLSQBMABCNOP $.

  $( Relationship between restricted universal and existential quantifiers.
     (Contributed by NM, 21-Jan-1997.)  Allow shortening of ~ rexnal .
     (Revised by Wolf Lammen, 9-Dec-2019.) $)
  dfral2 $p |- ( A. x e. A ph <-> -. E. x e. A -. ph ) $=
    ( wral wn wrex notnotb ralbii ralnex bitri ) ABCDAEZEZBCDKBCFEALBCAGHKBCIJ
    $.

  $( Relationship between restricted universal and existential quantifiers.
     (Contributed by NM, 21-Jan-1997.)  (Proof shortened by Wolf Lammen,
     9-Dec-2019.) $)
  rexnal $p |- ( E. x e. A -. ph <-> -. A. x e. A ph ) $=
    ( wral wn wrex dfral2 con2bii ) ABCDAEBCFABCGH $.

  $( Relationship between restricted universal and existential quantifiers.
     (Contributed by NM, 21-Jan-1997.)  (Proof shortened by Wolf Lammen,
     26-Nov-2019.) $)
  dfrex2 $p |- ( E. x e. A ph <-> -. A. x e. A -. ph ) $=
    ( wn wral wrex ralnex con2bii ) ADBCEABCFABCGH $.

  $( Restricted existence implies existence.  (Contributed by NM,
     11-Nov-1995.) $)
  rexex $p |- ( E. x e. A ph -> E. x ph ) $=
    ( wrex cv wcel wa wex df-rex exsimpr sylbi ) ABCDBECFZAGBHABHABCILABJK $.

  $( Theorem 19.22 of [Margaris] p. 90.  (Restricted quantifier version.)
     (Contributed by NM, 22-Nov-1994.)  (Proof shortened by Andrew Salmon,
     30-May-2011.) $)
  rexim $p |- ( A. x e. A ( ph -> ps ) ->
               ( E. x e. A ph -> E. x e. A ps ) ) $=
    ( wi wral wn wrex con3 ral2imi con3d dfrex2 3imtr4g ) ABEZCDFZAGZCDFZGBGZCD
    FZGACDHBCDHOSQNRPCDABIJKACDLBCDLM $.

  ${
    reximia.1 $e |- ( x e. A -> ( ph -> ps ) ) $.
    $( Inference quantifying both antecedent and consequent.  (Contributed by
       NM, 10-Feb-1997.) $)
    reximia $p |- ( E. x e. A ph -> E. x e. A ps ) $=
      ( wi wrex rexim mprg ) ABFACDGBCDGFCDABCDHEI $.
  $}

  ${
    reximi.1 $e |- ( ph -> ps ) $.
    $( Inference quantifying both antecedent and consequent.  (Contributed by
       NM, 18-Oct-1996.) $)
    reximi $p |- ( E. x e. A ph -> E. x e. A ps ) $=
      ( wi cv wcel a1i reximia ) ABCDABFCGDHEIJ $.
  $}

  ${
    reximi2.1 $e |- ( ( x e. A /\ ph ) -> ( x e. B /\ ps ) ) $.
    $( Inference quantifying both antecedent and consequent, based on Theorem
       19.22 of [Margaris] p. 90.  (Contributed by NM, 8-Nov-2004.) $)
    reximi2 $p |- ( E. x e. A ph -> E. x e. B ps ) $=
      ( cv wcel wa wex wrex eximi df-rex 3imtr4i ) CGZDHAIZCJOEHBIZCJACDKBCEKPQ
      CFLACDMBCEMN $.
  $}

  ${
    rexbii2.1 $e |- ( ( x e. A /\ ph ) <-> ( x e. B /\ ps ) ) $.
    $( Inference adding different restricted existential quantifiers to each
       side of an equivalence.  (Contributed by NM, 4-Feb-2004.) $)
    rexbii2 $p |- ( E. x e. A ph <-> E. x e. B ps ) $=
      ( cv wcel wa wex wrex exbii df-rex 3bitr4i ) CGZDHAIZCJOEHBIZCJACDKBCEKPQ
      CFLACDMBCEMN $.
  $}

  ${
    rexbiia.1 $e |- ( x e. A -> ( ph <-> ps ) ) $.
    $( Inference adding restricted existential quantifier to both sides of an
       equivalence.  (Contributed by NM, 26-Oct-1999.) $)
    rexbiia $p |- ( E. x e. A ph <-> E. x e. A ps ) $=
      ( cv wcel pm5.32i rexbii2 ) ABCDDCFDGABEHI $.
  $}

  ${
    rexbii.1 $e |- ( ph <-> ps ) $.
    $( Inference adding restricted existential quantifier to both sides of an
       equivalence.  (Contributed by NM, 23-Nov-1994.)  (Revised by Mario
       Carneiro, 17-Oct-2016.)  (Proof shortened by Wolf Lammen,
       6-Dec-2019.) $)
    rexbii $p |- ( E. x e. A ph <-> E. x e. A ps ) $=
      ( cv wcel anbi2i rexbii2 ) ABCDDABCFDGEHI $.

    $( Inference adding two restricted existential quantifiers to both sides of
       an equivalence.  (Contributed by NM, 11-Nov-1995.) $)
    2rexbii $p |- ( E. x e. A E. y e. B ph <-> E. x e. A E. y e. B ps ) $=
      ( wrex rexbii ) ADFHBDFHCEABDFGII $.
  $}

  $( Cancellation law for restricted existential quantification.  (Contributed
     by Peter Mazsa, 24-May-2018.)  (Proof shortened by Wolf Lammen,
     8-Jul-2023.) $)
  rexanid $p |- ( E. x e. A ( x e. A /\ ph ) <-> E. x e. A ph ) $=
    ( cv wcel wa ibar bicomd rexbiia ) BDCEZAFZABCJAKJAGHI $.

  $( Obsolete version of ~ rexanid as of 8-Jul-2023.  (Contributed by Peter
     Mazsa, 24-May-2018.)  (New usage is discouraged.)
     (Proof modification is discouraged.) $)
  rexanidOLD $p |- ( E. x e. A ( x e. A /\ ph ) <-> E. x e. A ph ) $=
    ( cv wcel wa wex wrex anabs5 exbii df-rex 3bitr4i ) BDCEZMAFZFZBGNBGNBCHABC
    HONBMAIJNBCKABCKL $.

  $( Restricted quantifier version of ~ 19.29 .  See also ~ r19.29r .
     (Contributed by NM, 31-Aug-1999.)  (Proof shortened by Andrew Salmon,
     30-May-2011.) $)
  r19.29 $p |- ( ( A. x e. A ph /\ E. x e. A ps ) ->
               E. x e. A ( ph /\ ps ) ) $=
    ( wral wrex wa wi pm3.2 ralimi rexim syl imp ) ACDEZBCDFZABGZCDFZNBPHZCDEOQ
    HARCDABIJBPCDKLM $.

  $( Restricted quantifier version of ~ 19.29r ; variation of ~ r19.29 .
     (Contributed by NM, 31-Aug-1999.)  (Proof shortened by Wolf Lammen,
     29-Jun-2023.) $)
  r19.29r $p |- ( ( E. x e. A ph /\ A. x e. A ps ) ->
                E. x e. A ( ph /\ ps ) ) $=
    ( wrex wral wa r19.29 ancoms pm3.22 reximi syl ) ACDEZBCDFZGBAGZCDEZABGZCDE
    NMPBACDHIOQCDBAJKL $.

  $( Obsolete version of ~ r19.29r as of 29-Jun-2023.  (Contributed by NM,
     31-Aug-1999.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  r19.29rOLD $p |- ( ( E. x e. A ph /\ A. x e. A ps ) ->
                E. x e. A ( ph /\ ps ) ) $=
    ( wral wrex wa r19.29 ancom rexbii 3imtr4i ) BCDEZACDFZGBAGZCDFMLGABGZCDFBA
    CDHMLIONCDABIJK $.

  ${
    r19.29imd.1 $e |- ( ph -> E. x e. A ps ) $.
    r19.29imd.2 $e |- ( ph -> A. x e. A ( ps -> ch ) ) $.
    $( Theorem 19.29 of [Margaris] p. 90 with an implication in the hypothesis
       containing the generalization, deduction version.  (Contributed by AV,
       19-Jan-2019.) $)
    r19.29imd $p |- ( ph -> E. x e. A ( ps /\ ch ) ) $=
      ( wi wa wrex wral r19.29r syl2anc abai rexbii sylibr ) ABBCHZIZDEJZBCIZDE
      JABDEJQDEKSFGBQDELMTRDEBCNOP $.
  $}

  $( Relationship between two restricted universal and existential quantifiers.
     (Contributed by Glauco Siliprandi, 11-Dec-2019.) $)
  rexnal2 $p |- ( E. x e. A E. y e. B -. ph <-> -. A. x e. A A. y e. B ph ) $=
    ( wn wrex wral rexnal rexbii bitri ) AFCEGZBDGACEHZFZBDGMBDHFLNBDACEIJMBDIK
    $.

  $( Relationship between three restricted universal and existential
     quantifiers.  (Contributed by Thierry Arnoux, 12-Jul-2020.) $)
  rexnal3 $p |- ( E. x e. A E. y e. B E. z e. C -. ph
    <-> -. A. x e. A A. y e. B A. z e. C ph ) $=
    ( wn wrex wral rexnal 2rexbii rexnal2 bitri ) AHDGIZCFIBEIADGJZHZCFIBEIPCFJ
    BEJHOQBCEFADGKLPBCEFMN $.

  $( Relationship between two restricted universal and existential quantifiers.
     (Contributed by Glauco Siliprandi, 11-Dec-2019.)  (Proof shortened by Wolf
     Lammen, 18-May-2023.) $)
  ralnex2 $p |- ( A. x e. A A. y e. B -. ph <-> -. E. x e. A E. y e. B ph ) $=
    ( wn wral wrex ralnex ralbii bitri ) AFCEGZBDGACEHZFZBDGMBDHFLNBDACEIJMBDIK
    $.

  $( Obsolete version of ~ ralnex2 as of 18-May-2023.  (Contributed by Glauco
     Siliprandi, 11-Dec-2019.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  ralnex2OLD $p |- ( A. x e. A A. y e. B -. ph
    <-> -. E. x e. A E. y e. B ph ) $=
    ( wn wral wrex notnotb 2rexbii rexnal2 bitr2i xchbinx ) AFZCEGBDGZOFZACEHBD
    HZOIQNFZCEHBDHPARBCDEAIJNBCDEKLM $.

  $( Relationship between three restricted universal and existential
     quantifiers.  (Contributed by Thierry Arnoux, 12-Jul-2020.)  (Proof
     shortened by Wolf Lammen, 18-May-2023.) $)
  ralnex3 $p |- ( A. x e. A A. y e. B A. z e. C -. ph
    <-> -. E. x e. A E. y e. B E. z e. C ph ) $=
    ( wn wral wrex ralnex 2ralbii ralnex2 bitri ) AHDGIZCFIBEIADGJZHZCFIBEIPCFJ
    BEJHOQBCEFADGKLPBCEFMN $.

  $( Obsolete version of ~ ralnex3 as of 18-May-2023.  (Contributed by Thierry
     Arnoux, 12-Jul-2020.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  ralnex3OLD $p |- ( A. x e. A A. y e. B A. z e. C -. ph
    <-> -. E. x e. A E. y e. B E. z e. C ph ) $=
    ( wn wral wrex notnotb rexbii 2rexbii rexnal3 bitr2i xchbinx ) AHZDGICFIBEI
    ZRHZADGJZCFJBEJZRKUAQHZDGJZCFJBEJSTUCBCEFAUBDGAKLMQBCDEFGNOP $.

  $( A transformation of restricted quantifiers and logical connectives.
     (Contributed by NM, 4-Sep-2005.) $)
  ralinexa $p |- ( A. x e. A ( ph -> -. ps ) <-> -. E. x e. A ( ph /\ ps ) ) $=
    ( wn wi wral wa wrex imnan ralbii ralnex bitri ) ABEFZCDGABHZEZCDGOCDIENPCD
    ABJKOCDLM $.

  $( A transformation of restricted quantifiers and logical connectives.
     (Contributed by NM, 4-Sep-2005.)  (Proof shortened by Wolf Lammen,
     27-Dec-2019.) $)
  rexanali $p |- ( E. x e. A ( ph /\ -. ps ) <-> -. A. x e. A ( ph -> ps ) ) $=
    ( wn wa wrex wral wi dfrex2 iman ralbii xchbinxr ) ABEFZCDGNEZCDHABIZCDHNCD
    JPOCDABKLM $.

  $( Negation of a complex predicate calculus formula.  (Contributed by FL,
     31-Jul-2009.) $)
  nrexralim $p |- ( -. E. x e. A A. y e. B ( ph -> ps )
     <-> A. x e. A E. y e. B ( ph /\ -. ps ) ) $=
    ( wn wa wrex wral wi rexanali ralbii ralnex bitr2i ) ABGHDFIZCEJABKDFJZGZCE
    JQCEIGPRCEABDFLMQCENO $.

  ${
    $d x A $.  $d x B $.
    $( Two ways to say " ` A ` belongs to ` B ` ".  (Contributed by NM,
       22-Nov-1994.) $)
    risset $p |- ( A e. B <-> E. x e. B x = A ) $=
      ( cv wcel wceq wa wex wrex exancom df-rex df-clel 3bitr4ri ) ADZCEZNBFZGA
      HPOGAHPACIBCEOPAJPACKABCLM $.
  $}

  ${
    nrex.1 $e |- ( x e. A -> -. ps ) $.
    $( Inference adding restricted existential quantifier to negated wff.
       (Contributed by NM, 16-Oct-2003.) $)
    nrex $p |- -. E. x e. A ps $=
      ( wn wral wrex rgen ralnex mpbi ) AEZBCFABCGEKBCDHABCIJ $.
  $}

  ${
    $d x ph $.
    nrexdv.1 $e |- ( ( ph /\ x e. A ) -> -. ps ) $.
    $( Deduction adding restricted existential quantifier to negated wff.
       (Contributed by NM, 16-Oct-2003.)  (Proof shortened by Wolf Lammen,
       5-Jan-2020.) $)
    nrexdv $p |- ( ph -> -. E. x e. A ps ) $=
      ( wn wral wrex ralrimiva ralnex sylib ) ABFZCDGBCDHFALCDEIBCDJK $.
  $}

  ${
    $d x ph $.
    reximdv2.1 $e |- ( ph -> ( ( x e. A /\ ps ) -> ( x e. B /\ ch ) ) ) $.
    $( Deduction quantifying both antecedent and consequent, based on Theorem
       19.22 of [Margaris] p. 90.  (Contributed by NM, 17-Sep-2003.) $)
    reximdv2 $p |- ( ph -> ( E. x e. A ps -> E. x e. B ch ) ) $=
      ( cv wcel wa wex wrex eximdv df-rex 3imtr4g ) ADHZEIBJZDKPFICJZDKBDELCDFL
      AQRDGMBDENCDFNO $.
  $}

  ${
    $d x ph $.
    reximdvai.1 $e |- ( ph -> ( x e. A -> ( ps -> ch ) ) ) $.
    $( Deduction quantifying both antecedent and consequent, based on Theorem
       19.22 of [Margaris] p. 90.  (Contributed by NM, 14-Nov-2002.)  Reduce
       dependencies on axioms.  (Revised by Wolf Lammen, 8-Jan-2020.) $)
    reximdvai $p |- ( ph -> ( E. x e. A ps -> E. x e. A ch ) ) $=
      ( wi wral wrex ralrimiv rexim syl ) ABCGZDEHBDEICDEIGAMDEFJBCDEKL $.
  $}

  ${
    $d x ph $.
    reximdv.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Deduction from Theorem 19.22 of [Margaris] p. 90.  (Restricted
       quantifier version with strong hypothesis.)  (Contributed by NM,
       24-Jun-1998.) $)
    reximdv $p |- ( ph -> ( E. x e. A ps -> E. x e. A ch ) ) $=
      ( wi cv wcel a1d reximdvai ) ABCDEABCGDHEIFJK $.
  $}

  ${
    $d x ph $.
    reximdva.1 $e |- ( ( ph /\ x e. A ) -> ( ps -> ch ) ) $.
    $( Deduction quantifying both antecedent and consequent, based on Theorem
       19.22 of [Margaris] p. 90.  (Contributed by NM, 22-May-1999.) $)
    reximdva $p |- ( ph -> ( E. x e. A ps -> E. x e. A ch ) ) $=
      ( cv wcel wi ex reximdvai ) ABCDEADGEHBCIFJK $.
  $}

  ${
    $d x ph $.
    reximddva.1 $e |- ( ( ph /\ ( x e. A /\ ps ) ) -> ch ) $.
    reximddva.2 $e |- ( ph -> E. x e. A ps ) $.
    $( Deduction from Theorem 19.22 of [Margaris] p. 90.  (Contributed by
       Thierry Arnoux, 7-Dec-2016.) $)
    reximddv $p |- ( ph -> E. x e. A ch ) $=
      ( wrex cv wcel expr reximdva mpd ) ABDEHCDEHGABCDEADIEJBCFKLM $.
  $}

  ${
    $d x ph $.
    reximssdv.1 $e |- ( ph -> E. x e. B ps ) $.
    reximssdv.2 $e |- ( ( ph /\ ( x e. B /\ ps ) ) -> x e. A ) $.
    reximssdv.3 $e |- ( ( ph /\ ( x e. B /\ ps ) ) -> ch ) $.
    $( Derivation of a restricted existential quantification over a subset (the
       second hypothesis implies ` A C_ B ` ), deduction form.  (Contributed by
       AV, 21-Aug-2022.) $)
    reximssdv $p |- ( ph -> E. x e. A ch ) $=
      ( wrex cv wcel wa jca ex reximdv2 mpd ) ABDFJCDEJGABCDFEADKZFLBMZRELZCMAS
      MTCHINOPQ $.
  $}

  ${
    $d y A $.  $d x y ph $.
    reximdvva.1 $e |- ( ( ph /\ ( x e. A /\ y e. B ) ) -> ( ps -> ch ) ) $.
    $( Deduction doubly quantifying both antecedent and consequent, based on
       Theorem 19.22 of [Margaris] p. 90.  (Contributed by AV, 5-Jan-2022.) $)
    reximdvva $p |- ( ph
                   -> ( E. x e. A E. y e. B ps -> E. x e. A E. y e. B ch ) ) $=
      ( wrex cv wcel wa wi anassrs reximdva ) ABEGICEGIDFADJFKZLBCEGAPEJGKBCMHN
      OO $.
  $}

  ${
    $d A y $.  $d ph x y $.
    reximddv2.1 $e |- ( ( ( ( ph /\ x e. A ) /\ y e. B ) /\ ps ) -> ch ) $.
    reximddv2.2 $e |- ( ph -> E. x e. A E. y e. B ps ) $.
    $( Double deduction from Theorem 19.22 of [Margaris] p. 90.  (Contributed
       by Thierry Arnoux, 15-Dec-2019.) $)
    reximddv2 $p |- ( ph -> E. x e. A E. y e. B ch ) $=
      ( wrex cv wcel wa ex reximdva impr reximddv ) ABEGJZCEGJZDFADKFLZRSATMZBC
      EGUAEKGLMBCHNOPIQ $.
  $}

  ${
    $d x ps $.
    $( Restricted quantifier version of ~ 19.23v .  Version of ~ r19.23 with a
       disjoint variable condition.  (Contributed by NM, 31-Aug-1999.)  Reduce
       dependencies on axioms.  (Revised by Wolf Lammen, 14-Jan-2020.) $)
    r19.23v $p |- ( A. x e. A ( ph -> ps ) <-> ( E. x e. A ph -> ps ) ) $=
      ( wi wral wn wrex con34b ralbii r19.21v dfrex2 imbi1i con1b bitr2i 3bitri
      ) ABEZCDFBGZAGZEZCDFRSCDFZEZACDHZBEZQTCDABIJRSCDKUDUAGZBEUBUCUEBACDLMUABN
      OP $.
  $}

  ${
    $d x ps $.
    rexlimiv.1 $e |- ( x e. A -> ( ph -> ps ) ) $.
    $( Inference from Theorem 19.23 of [Margaris] p. 90.  (Restricted
       quantifier version.)  (Contributed by NM, 20-Nov-1994.)  Reduce
       dependencies on axioms.  (Revised by Wolf Lammen, 14-Jan-2020.) $)
    rexlimiv $p |- ( E. x e. A ph -> ps ) $=
      ( wi wral wrex rgen r19.23v mpbi ) ABFZCDGACDHBFLCDEIABCDJK $.
  $}

  ${
    $d x ps $.
    rexlimiva.1 $e |- ( ( x e. A /\ ph ) -> ps ) $.
    $( Inference from Theorem 19.23 of [Margaris] p. 90 (restricted quantifier
       version).  (Contributed by NM, 18-Dec-2006.) $)
    rexlimiva $p |- ( E. x e. A ph -> ps ) $=
      ( cv wcel ex rexlimiv ) ABCDCFDGABEHI $.
  $}

  ${
    $d ps x $.
    rexlimivw.1 $e |- ( ph -> ps ) $.
    $( Weaker version of ~ rexlimiv .  (Contributed by FL, 19-Sep-2011.) $)
    rexlimivw $p |- ( E. x e. A ph -> ps ) $=
      ( wi cv wcel a1i rexlimiv ) ABCDABFCGDHEIJ $.
  $}

  ${
    $d x ph $.  $d x ch $.
    rexlimdv.1 $e |- ( ph -> ( x e. A -> ( ps -> ch ) ) ) $.
    $( Inference from Theorem 19.23 of [Margaris] p. 90 (restricted quantifier
       version).  (Contributed by NM, 14-Nov-2002.)  (Proof shortened by Eric
       Schmidt, 22-Dec-2006.)  Reduce dependencies on axioms.  (Revised by Wolf
       Lammen, 14-Jan-2020.) $)
    rexlimdv $p |- ( ph -> ( E. x e. A ps -> ch ) ) $=
      ( wrex wi cv wcel com3l rexlimiv com12 ) BDEGACBACHDEADIEJBCFKLM $.
  $}

  ${
    $d x ph $.  $d x ch $.
    rexlimdva.1 $e |- ( ( ph /\ x e. A ) -> ( ps -> ch ) ) $.
    $( Inference from Theorem 19.23 of [Margaris] p. 90 (restricted quantifier
       version).  (Contributed by NM, 20-Jan-2007.) $)
    rexlimdva $p |- ( ph -> ( E. x e. A ps -> ch ) ) $=
      ( cv wcel wi ex rexlimdv ) ABCDEADGEHBCIFJK $.
  $}

  ${
    $d x ph $.  $d x ch $.
    rexlimdvaa.1 $e |- ( ( ph /\ ( x e. A /\ ps ) ) -> ch ) $.
    $( Inference from Theorem 19.23 of [Margaris] p. 90 (restricted quantifier
       version).  (Contributed by Mario Carneiro, 15-Jun-2016.) $)
    rexlimdvaa $p |- ( ph -> ( E. x e. A ps -> ch ) ) $=
      ( cv wcel expr rexlimdva ) ABCDEADGEHBCFIJ $.
  $}

  ${
    $d x ph $.  $d x ch $.
    rexlimdv3a.1 $e |- ( ( ph /\ x e. A /\ ps ) -> ch ) $.
    $( Inference from Theorem 19.23 of [Margaris] p. 90 (restricted quantifier
       version).  Frequently-used variant of ~ rexlimdv .  (Contributed by NM,
       7-Jun-2015.) $)
    rexlimdv3a $p |- ( ph -> ( E. x e. A ps -> ch ) ) $=
      ( cv wcel 3exp rexlimdv ) ABCDEADGEHBCFIJ $.
  $}

  ${
    $d ch x $.  $d ph x $.
    rexlimdva2.1 $e |- ( ( ( ph /\ x e. A ) /\ ps ) -> ch ) $.
    $( Inference from Theorem 19.23 of [Margaris] p. 90 (restricted quantifier
       version).  (Contributed by Glauco Siliprandi, 2-Jan-2022.) $)
    rexlimdva2 $p |- ( ph -> ( E. x e. A ps -> ch ) ) $=
      ( cv wcel exp31 rexlimdv ) ABCDEADGEHBCFIJ $.

    $( A commonly used pattern in the spirit of ~ r19.29 .  (Contributed by
       Thierry Arnoux, 29-Dec-2019.)  (Proof shortened by Wolf Lammen,
       17-Jun-2023.) $)
    r19.29an $p |- ( ( ph /\ E. x e. A ps ) -> ch ) $=
      ( wrex rexlimdva2 imp ) ABDEGCABCDEFHI $.

    r19.29a.1 $e |- ( ph -> E. x e. A ps ) $.
    $( A commonly used pattern in the spirit of ~ r19.29 .  (Contributed by
       Thierry Arnoux, 22-Nov-2017.)  Reduce axiom usage.  (Revised by Wolf
       Lammen, 17-Jun-2023.) $)
    r19.29a $p |- ( ph -> ch ) $=
      ( wrex rexlimdva2 mpd ) ABDEHCGABCDEFIJ $.
  $}

  ${
    $d x ph $.  $d x ch $.
    rexlimdvw.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Inference from Theorem 19.23 of [Margaris] p. 90 (restricted quantifier
       version).  (Contributed by NM, 18-Jun-2014.) $)
    rexlimdvw $p |- ( ph -> ( E. x e. A ps -> ch ) ) $=
      ( wi cv wcel a1d rexlimdv ) ABCDEABCGDHEIFJK $.
  $}

  ${
    $d x ph $.  $d x ch $.
    rexlimddv.1 $e |- ( ph -> E. x e. A ps ) $.
    rexlimddv.2 $e |- ( ( ph /\ ( x e. A /\ ps ) ) -> ch ) $.
    $( Restricted existential elimination rule of natural deduction.
       (Contributed by Mario Carneiro, 15-Jun-2016.) $)
    rexlimddv $p |- ( ph -> ch ) $=
      ( wrex rexlimdvaa mpd ) ABDEHCFABCDEGIJ $.
  $}

  ${
    $d x y ps $.  $d y A $.
    rexlimivv.1 $e |- ( ( x e. A /\ y e. B ) -> ( ph -> ps ) ) $.
    $( Inference from Theorem 19.23 of [Margaris] p. 90 (restricted quantifier
       version).  (Contributed by NM, 17-Feb-2004.) $)
    rexlimivv $p |- ( E. x e. A E. y e. B ph -> ps ) $=
      ( wrex cv wcel rexlimdva rexlimiv ) ADFHBCECIEJABDFGKL $.
  $}

  ${
    $d x y ph $.  $d x y ch $.  $d y A $.
    rexlimdvv.1 $e |- ( ph -> ( ( x e. A /\ y e. B ) -> ( ps -> ch ) ) ) $.
    $( Inference from Theorem 19.23 of [Margaris] p. 90.  (Restricted
       quantifier version.)  (Contributed by NM, 22-Jul-2004.) $)
    rexlimdvv $p |- ( ph -> ( E. x e. A E. y e. B ps -> ch ) ) $=
      ( wrex cv wcel wa wi expdimp rexlimdv rexlimdva ) ABEGICDFADJFKZLBCEGAQEJ
      GKBCMHNOP $.
  $}

  ${
    $d x y ph $.  $d x y ch $.  $d y A $.
    rexlimdvva.1 $e |- ( ( ph /\ ( x e. A /\ y e. B ) ) -> ( ps -> ch ) ) $.
    $( Inference from Theorem 19.23 of [Margaris] p. 90.  (Restricted
       quantifier version.)  (Contributed by NM, 18-Jun-2014.) $)
    rexlimdvva $p |- ( ph -> ( E. x e. A E. y e. B ps -> ch ) ) $=
      ( cv wcel wa wi ex rexlimdvv ) ABCDEFGADIFJEIGJKBCLHMN $.
  $}

  ${
    $d x ph $.
    rexbidv2.1 $e |- ( ph -> ( ( x e. A /\ ps ) <-> ( x e. B /\ ch ) ) ) $.
    $( Formula-building rule for restricted existential quantifier (deduction
       form).  (Contributed by NM, 22-May-1999.) $)
    rexbidv2 $p |- ( ph -> ( E. x e. A ps <-> E. x e. B ch ) ) $=
      ( cv wcel wa wex wrex exbidv df-rex 3bitr4g ) ADHZEIBJZDKPFICJZDKBDELCDFL
      AQRDGMBDENCDFNO $.
  $}

  ${
    $d x ph $.
    rexbidva.1 $e |- ( ( ph /\ x e. A ) -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted existential quantifier (deduction
       form).  (Contributed by NM, 9-Mar-1997.)  Reduce dependencies on axioms.
       (Revised by Wolf Lammen, 6-Dec-2019.)  (Proof shortened by Wolf Lammen,
       10-Dec-2019.) $)
    rexbidva $p |- ( ph -> ( E. x e. A ps <-> E. x e. A ch ) ) $=
      ( cv wcel pm5.32da rexbidv2 ) ABCDEEADGEHBCFIJ $.
  $}

  ${
    $d x ph $.
    rexbidv.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted existential quantifier (deduction
       form).  (Contributed by NM, 20-Nov-1994.)  Reduce dependencies on
       axioms.  (Revised by Wolf Lammen, 6-Dec-2019.) $)
    rexbidv $p |- ( ph -> ( E. x e. A ps <-> E. x e. A ch ) ) $=
      ( wb cv wcel adantr rexbidva ) ABCDEABCGDHEIFJK $.
  $}

  ${
    $d x y $.  $d y A $.
    2rexbiia.1 $e |- ( ( x e. A /\ y e. B ) -> ( ph <-> ps ) ) $.
    $( Inference adding two restricted existential quantifiers to both sides of
       an equivalence.  (Contributed by NM, 1-Aug-2004.) $)
    2rexbiia $p |- ( E. x e. A E. y e. B ph <-> E. x e. A E. y e. B ps ) $=
      ( wrex cv wcel rexbidva rexbiia ) ADFHBDFHCECIEJABDFGKL $.
  $}

  ${
    $d x y ph $.  $d y A $.
    2rexbidva.1 $e |- ( ( ph /\ ( x e. A /\ y e. B ) ) -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted existential quantifiers (deduction
       form).  (Contributed by NM, 15-Dec-2004.) $)
    2rexbidva $p |- ( ph ->
                    ( E. x e. A E. y e. B ps <-> E. x e. A E. y e. B ch ) ) $=
      ( wrex cv wcel wa wb anassrs rexbidva ) ABEGICEGIDFADJFKZLBCEGAPEJGKBCMHN
      OO $.
  $}

  ${
    $d x ph $.  $d y ph $.
    2rexbidv.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted existential quantifiers (deduction
       form).  (Contributed by NM, 28-Jan-2006.) $)
    2rexbidv $p |- ( ph ->
                    ( E. x e. A E. y e. B ps <-> E. x e. A E. y e. B ch ) ) $=
      ( wrex rexbidv ) ABEGICEGIDFABCEGHJJ $.

    $( Formula-building rule for restricted quantifiers (deduction form).
       (Contributed by NM, 28-Jan-2006.) $)
    rexralbidv $p |- ( ph ->
                    ( E. x e. A A. y e. B ps <-> E. x e. A A. y e. B ch ) ) $=
      ( wral ralbidv rexbidv ) ABEGICEGIDFABCEGHJK $.
  $}

  ${
    r2exlem.1 $e |- ( A. x e. A A. y e. B -. ph <->
               A. x A. y ( ( x e. A /\ y e. B ) -> -. ph ) ) $.
    $( Lemma factoring out common proof steps in ~ r2exf an ~ r2ex .
       Introduced to reduce dependencies on axioms.  (Contributed by Wolf
       Lammen, 10-Jan-2020.) $)
    r2exlem $p |- ( E. x e. A E. y e. B ph <->
                E. x E. y ( ( x e. A /\ y e. B ) /\ ph ) ) $=
      ( cv wcel wa wn wi wal wex wral wrex exnal xchbinxr alinexa con2bii exbii
      ralnex2 3bitr4ri ) BGDHCGEHIZAJZKCLZJZBMZUDCENBDNZJUCAICMZBMACEOBDOZUGUEB
      LUHUEBPFQUIUFBUEUIUCACRSTUHUJABCDEUASUB $.
  $}

  ${
    $d x y $.  $d y A $.
    $( Double restricted existential quantification.  (Contributed by NM,
       11-Nov-1995.)  Reduce dependencies on axioms.  (Revised by Wolf Lammen,
       10-Jan-2020.) $)
    r2ex $p |- ( E. x e. A E. y e. B ph <->
               E. x E. y ( ( x e. A /\ y e. B ) /\ ph ) ) $=
      ( wn r2al r2exlem ) ABCDEAFBCDEGH $.
  $}

  $( Restricted specialization.  (Contributed by NM, 12-Oct-1999.) $)
  rspe $p |- ( ( x e. A /\ ph ) -> E. x e. A ph ) $=
    ( cv wcel wa wex wrex 19.8a df-rex sylibr ) BDCEAFZLBGABCHLBIABCJK $.

  $( Restricted specialization.  (Contributed by FL, 4-Jun-2012.)  (Proof
     shortened by Wolf Lammen, 7-Jan-2020.) $)
  rsp2e $p |- ( ( x e. A /\ y e. B /\ ph ) -> E. x e. A E. y e. B ph ) $=
    ( cv wcel wrex wa rspe sylan2 3impb ) BFDGZCFEGZAACEHZBDHZNAIMOPACEJOBDJKL
    $.

  $( The setvar ` x ` is not free in ` E. x e. A ph ` .  (Contributed by NM,
     19-Mar-1997.)  (Revised by Mario Carneiro, 7-Oct-2016.) $)
  nfre1 $p |- F/ x E. x e. A ph $=
    ( wrex cv wcel wa wex df-rex nfe1 nfxfr ) ABCDBECFAGZBHBABCILBJK $.

  ${
    nfrexd.1 $e |- F/ y ph $.
    nfrexd.2 $e |- ( ph -> F/_ x A ) $.
    nfrexd.3 $e |- ( ph -> F/ x ps ) $.
    $( Deduction version of ~ nfrex .  (Contributed by Mario Carneiro,
       14-Oct-2016.) $)
    nfrexd $p |- ( ph -> F/ x E. y e. A ps ) $=
      ( wrex wn wral dfrex2 nfnd nfrald nfxfrd ) BDEIBJZDEKZJACBDELAQCAPCDEFGAB
      CHMNMO $.
  $}

  ${
    nfrex.1 $e |- F/_ x A $.
    nfrex.2 $e |- F/ x ph $.
    $( Bound-variable hypothesis builder for restricted quantification.
       (Contributed by NM, 1-Sep-1999.)  (Revised by Mario Carneiro,
       7-Oct-2016.)  (Proof shortened by Wolf Lammen, 30-Dec-2019.) $)
    nfrex $p |- F/ x E. y e. A ph $=
      ( wrex wnf wtru nftru wnfc a1i nfrexd mptru ) ACDGBHIABCDCJBDKIELABHIFLMN
      $.
  $}

  ${
    reximdai.1 $e |- F/ x ph $.
    reximdai.2 $e |- ( ph -> ( x e. A -> ( ps -> ch ) ) ) $.
    $( Deduction from Theorem 19.22 of [Margaris] p. 90.  (Restricted
       quantifier version.)  (Contributed by NM, 31-Aug-1999.) $)
    reximdai $p |- ( ph -> ( E. x e. A ps -> E. x e. A ch ) ) $=
      ( wi wral wrex ralrimi rexim syl ) ABCHZDEIBDEJCDEJHANDEFGKBCDELM $.
  $}

  ${
    reximd2a.1 $e |- F/ x ph $.
    reximd2a.2 $e |- ( ( ( ph /\ x e. A ) /\ ps ) -> x e. B ) $.
    reximd2a.3 $e |- ( ( ( ph /\ x e. A ) /\ ps ) -> ch ) $.
    reximd2a.4 $e |- ( ph -> E. x e. A ps ) $.
    $( Deduction quantifying both antecedent and consequent, based on Theorem
       19.22 of [Margaris] p. 90.  (Contributed by Thierry Arnoux,
       27-Jan-2020.) $)
    reximd2a $p |- ( ph -> E. x e. B ch ) $=
      ( wrex cv wcel wa wex jca expl eximd df-rex 3imtr4g mpd ) ABDEKZCDFKZJADL
      ZEMZBNZDOUDFMZCNZDOUBUCAUFUHDGAUEBUHAUENBNUGCHIPQRBDESCDFSTUA $.
  $}

  $( Closed theorem form of ~ r19.23 .  (Contributed by NM, 4-Mar-2013.)
     (Revised by Mario Carneiro, 8-Oct-2016.) $)
  r19.23t $p |- ( F/ x ps ->
    ( A. x e. A ( ph -> ps ) <-> ( E. x e. A ph -> ps ) ) ) $=
    ( wnf cv wcel wa wal wex wral wrex 19.23t df-ral impexp albii bitr4i df-rex
    wi imbi1i 3bitr4g ) BCECFDGZAHZBSZCIZUCCJZBSABSZCDKZACDLZBSUCBCMUHUBUGSZCIU
    EUGCDNUDUJCUBABOPQUIUFBACDRTUA $.

  ${
    r19.23.1 $e |- F/ x ps $.
    $( Restricted quantifier version of ~ 19.23 .  See ~ r19.23v for a version
       requiring fewer axioms.  (Contributed by NM, 22-Oct-2010.)  (Proof
       shortened by Mario Carneiro, 8-Oct-2016.) $)
    r19.23 $p |- ( A. x e. A ( ph -> ps ) <-> ( E. x e. A ph -> ps ) ) $=
      ( wnf wi wral wrex wb r19.23t ax-mp ) BCFABGCDHACDIBGJEABCDKL $.
  $}

  ${
    rexlimi.1 $e |- F/ x ps $.
    rexlimi.2 $e |- ( x e. A -> ( ph -> ps ) ) $.
    $( Restricted quantifier version of ~ exlimi .  (Contributed by NM,
       30-Nov-2003.)  (Proof shortened by Andrew Salmon, 30-May-2011.) $)
    rexlimi $p |- ( E. x e. A ph -> ps ) $=
      ( wi wral wrex rgen r19.23 mpbi ) ABGZCDHACDIBGMCDFJABCDEKL $.
  $}

  ${
    rexlimd2.1 $e |- F/ x ph $.
    rexlimd2.2 $e |- ( ph -> F/ x ch ) $.
    rexlimd2.3 $e |- ( ph -> ( x e. A -> ( ps -> ch ) ) ) $.
    $( Version of ~ rexlimd with deduction version of second hypothesis.
       (Contributed by NM, 21-Jul-2013.)  (Revised by Mario Carneiro,
       8-Oct-2016.) $)
    rexlimd2 $p |- ( ph -> ( E. x e. A ps -> ch ) ) $=
      ( wi wral wrex ralrimi wnf wb r19.23t syl mpbid ) ABCIZDEJZBDEKCIZARDEFHL
      ACDMSTNGBCDEOPQ $.
  $}

  ${
    rexlimd.1 $e |- F/ x ph $.
    rexlimd.2 $e |- F/ x ch $.
    rexlimd.3 $e |- ( ph -> ( x e. A -> ( ps -> ch ) ) ) $.
    $( Deduction form of ~ rexlimd .  (Contributed by NM, 27-May-1998.)  (Proof
       shortened by Andrew Salmon, 30-May-2011.)  (Proof shortened by Wolf
       Lammen, 14-Jan-2020.) $)
    rexlimd $p |- ( ph -> ( E. x e. A ps -> ch ) ) $=
      ( wnf a1i rexlimd2 ) ABCDEFCDIAGJHK $.
  $}

  ${
    rexbida.1 $e |- F/ x ph $.
    rexbida.2 $e |- ( ( ph /\ x e. A ) -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted existential quantifier (deduction
       form).  (Contributed by NM, 6-Oct-2003.) $)
    rexbida $p |- ( ph -> ( E. x e. A ps <-> E. x e. A ch ) ) $=
      ( cv wcel wa wex wrex pm5.32da exbid df-rex 3bitr4g ) ADHEIZBJZDKQCJZDKBD
      ELCDELARSDFAQBCGMNBDEOCDEOP $.
  $}

  ${
    $d x ph $.
    rexbidvaALT.1 $e |- ( ( ph /\ x e. A ) -> ( ps <-> ch ) ) $.
    $( Alternate proof of ~ rexbida , shorter but requires more axioms.
       (Contributed by NM, 9-Mar-1997.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    rexbidvaALT $p |- ( ph -> ( E. x e. A ps <-> E. x e. A ch ) ) $=
      ( nfv rexbida ) ABCDEADGFH $.
  $}

  ${
    rexbid.1 $e |- F/ x ph $.
    rexbid.2 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted existential quantifier (deduction
       form).  (Contributed by NM, 27-Jun-1998.) $)
    rexbid $p |- ( ph -> ( E. x e. A ps <-> E. x e. A ch ) ) $=
      ( wb cv wcel adantr rexbida ) ABCDEFABCHDIEJGKL $.
  $}

  ${
    $d x ph $.
    rexbidvALT.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Alternate proof of ~ rexbidv , shorter but requires more axioms.
       (Contributed by NM, 20-Nov-1994.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    rexbidvALT $p |- ( ph -> ( E. x e. A ps <-> E. x e. A ch ) ) $=
      ( nfv rexbid ) ABCDEADGFH $.
  $}

  ${
    $d x y $.  $d y A $.  $d x B $.
    $( Restricted quantifier version of ~ 19.12 .  (Contributed by NM,
       15-Oct-2003.)  (Proof shortened by Andrew Salmon, 30-May-2011.)  Avoid
       ~ ax-13 , ~ ax-ext .  (Revised by Wolf Lammen, 17-Jun-2023.) $)
    r19.12 $p |- ( E. x e. A A. y e. B ph -> A. y e. B E. x e. A ph ) $=
      ( wral wrex cv wcel wex df-rex nfv nfra1 nfan nfex nfxfr ax-1 rsp com12
      wa reximdv sylcom ralrimi ) ACEFZBDGZABDGZCEUEBHDIZUDTZBJCUDBDKUHCBUGUDCU
      GCLACEMNOPUECHEIZUEUFUEUIQUIUDABDUDUIAACERSUAUBUC $.
  $}

  $( $j usage 'r19.12' avoids 'ax-13' 'ax-ext'; $)

  ${
    $d x y $.
    r2exf.1 $e |- F/_ y A $.
    $( Double restricted existential quantification.  (Contributed by Mario
       Carneiro, 14-Oct-2016.)  Use ~ r2exlem .  (Revised by Wolf Lammen,
       10-Jan-2020.) $)
    r2exf $p |- ( E. x e. A E. y e. B ph <->
               E. x E. y ( ( x e. A /\ y e. B ) /\ ph ) ) $=
      ( wn r2alf r2exlem ) ABCDEAGBCDEFHI $.
  $}

  ${
    rexeqbii.1 $e |- A = B $.
    rexeqbii.2 $e |- ( ps <-> ch ) $.
    $( Equality deduction for restricted existential quantifier, changing both
       formula and quantifier domain.  Inference form.  (Contributed by David
       Moews, 1-May-2017.) $)
    rexeqbii $p |- ( E. x e. A ps <-> E. x e. B ch ) $=
      ( cv wcel eleq2i anbi12i rexbii2 ) ABCDECHZDIMEIABDEMFJGKL $.
  $}

  ${
    $d x y $.  $d y A $.  $d x B $.
    $( Obsolete version of ~ r19.12 as of 19-May-2023.  (Contributed by NM,
       15-Oct-2003.)  (Proof shortened by Andrew Salmon, 30-May-2011.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    r19.12OLD $p |- ( E. x e. A A. y e. B ph -> A. y e. B E. x e. A ph ) $=
      ( wral wrex nfcv nfra1 nfrex cv wcel ax-1 ralrimi rsp reximdv ralimia syl
      com12 ) ACEFZBDGZUACEFABDGZCEFUAUACETCBDCDHACEIJUACKELZMNUAUBCEUCTABDTUCA
      ACEOSPQR $.
  $}

  $( Cancellation law for restricted unique existential quantification.
     (Contributed by Peter Mazsa, 12-Feb-2018.) $)
  reuanid $p |- ( E! x e. A ( x e. A /\ ph ) <-> E! x e. A ph ) $=
    ( cv wcel wa weu wreu anabs5 eubii df-reu 3bitr4i ) BDCEZMAFZFZBGNBGNBCHABC
    HONBMAIJNBCKABCKL $.

  $( Cancellation law for restricted at-most-one quantification.  (Contributed
     by Peter Mazsa, 24-May-2018.) $)
  rmoanid $p |- ( E* x e. A ( x e. A /\ ph ) <-> E* x e. A ph ) $=
    ( cv wcel wa wmo wrmo anabs5 mobii df-rmo 3bitr4i ) BDCEZMAFZFZBGNBGNBCHABC
    HONBMAIJNBCKABCKL $.

  ${
    r19.29af2.p $e |- F/ x ph $.
    r19.29af2.c $e |- F/ x ch $.
    r19.29af2.1 $e |- ( ( ( ph /\ x e. A ) /\ ps ) -> ch ) $.
    r19.29af2.2 $e |- ( ph -> E. x e. A ps ) $.
    $( A commonly used pattern based on ~ r19.29 .  (Contributed by Thierry
       Arnoux, 17-Dec-2017.)  (Proof shortened by OpenAI, 25-Mar-2020.) $)
    r19.29af2 $p |- ( ph -> ch ) $=
      ( wrex cv wcel exp31 rexlimd mpd ) ABDEJCIABCDEFGADKELBCHMNO $.
  $}

  ${
    $d x ch $.
    r19.29af.0 $e |- F/ x ph $.
    r19.29af.1 $e |- ( ( ( ph /\ x e. A ) /\ ps ) -> ch ) $.
    r19.29af.2 $e |- ( ph -> E. x e. A ps ) $.
    $( A commonly used pattern based on ~ r19.29 .  See ~ r19.29a , ~ r19.29an
       for a variant when ` x ` is disjoint from ` ph ` .  (Contributed by
       Thierry Arnoux, 29-Nov-2017.) $)
    r19.29af $p |- ( ph -> ch ) $=
      ( nfv r19.29af2 ) ABCDEFCDIGHJ $.
  $}

  ${
    $d x ch $.  $d x ph $.
    r19.29anOLD.1 $e |- ( ( ( ph /\ x e. A ) /\ ps ) -> ch ) $.
    $( Obsolete version of ~ r19.29an as of 17-Jun-2023.  (Contributed by
       Thierry Arnoux, 29-Dec-2019.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    r19.29anOLD $p |- ( ( ph /\ E. x e. A ps ) -> ch ) $=
      ( wrex wa nfv nfre1 nfan cv wcel adantllr simpr r19.29af ) ABDEGZHBCDEAQD
      ADIBDEJKADLEMBCQFNAQOP $.
  $}

  ${
    $d x ch $.  $d x ph $.
    r19.29aOLD.1 $e |- ( ( ( ph /\ x e. A ) /\ ps ) -> ch ) $.
    r19.29aOLD.2 $e |- ( ph -> E. x e. A ps ) $.
    $( Obsolete proof of ~ r19.29a as of 17-Jun-2023.  (Contributed by Thierry
       Arnoux, 22-Nov-2017.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    r19.29aOLD $p |- ( ph -> ch ) $=
      ( nfv r19.29af ) ABCDEADHFGI $.
  $}

  $( Theorem ~ r19.29 with two quantifiers.  (Contributed by Rodolfo Medina,
     25-Sep-2010.) $)
  2r19.29 $p |- ( ( A. x e. A A. y e. B ph /\ E. x e. A E. y e. B ps )
                        -> E. x e. A E. y e. B ( ph /\ ps ) ) $=
    ( wral wrex wa r19.29 reximi syl ) ADFGZCEGBDFHZCEHIMNIZCEHABIDFHZCEHMNCEJO
    PCEABDFJKL $.

  ${
    r19.29d2r.1 $e |- ( ph -> A. x e. A A. y e. B ps ) $.
    r19.29d2r.2 $e |- ( ph -> E. x e. A E. y e. B ch ) $.
    $( Theorem 19.29 of [Margaris] p. 90 with two restricted quantifiers,
       deduction version.  (Contributed by Thierry Arnoux, 30-Jan-2017.) $)
    r19.29d2r $p |- ( ph -> E. x e. A E. y e. B ( ps /\ ch ) ) $=
      ( wral wrex wa r19.29 syl2anc reximi syl ) ABEGJZCEGKZLZDFKZBCLEGKZDFKAQD
      FJRDFKTHIQRDFMNSUADFBCEGMOP $.
  $}

  ${
    $d y A $.  $d x y ch $.  $d x y ph $.
    r19.29vva.1 $e |- ( ( ( ( ph /\ x e. A ) /\ y e. B ) /\ ps ) -> ch ) $.
    r19.29vva.2 $e |- ( ph -> E. x e. A E. y e. B ps ) $.
    $( A commonly used pattern based on ~ r19.29 , version with two restricted
       quantifiers.  (Contributed by Thierry Arnoux, 26-Nov-2017.)  (Proof
       shortened by Wolf Lammen, 29-Jun-2023.) $)
    r19.29vva $p |- ( ph -> ch ) $=
      ( wrex reximddv2 id rexlimivw reximi 3syl ) ACEGJZDFJCDFJCABCDEFGHIKPCDFC
      CEGCLZMNCCDFQMO $.

    $( Obsolete version of ~ r19.29vva as of 28-Jun-2023.  (Contributed by
       Thierry Arnoux, 26-Nov-2017.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    r19.29vvaOLD $p |- ( ph -> ch ) $=
      ( wi wa wrex wral cv wcel ex ralrimiva r19.29d2r pm3.35 rexlimivw ancoms
      syl ) ABCJZBKZEGLZDFLCAUCBDEFGAUCEGMDFADNFOKZUCEGUFENGOKBCHPQQIRUECDFUDCE
      GBUCCBCSUATTUB $.
  $}

  $( Restricted quantifier version of ~ 19.30 .  (Contributed by Scott Fenton,
     25-Feb-2011.)  (Proof shortened by Wolf Lammen, 18-Jun-2023.) $)
  r19.30 $p |- ( A. x e. A ( ph \/ ps ) ->
                 ( A. x e. A ph \/ E. x e. A ps ) ) $=
    ( wo wral wn wi wrex pm2.53 orcoms ralimi ralnex biimpri imim1i orrd orcomd
    ralim 3syl ) ABEZCDFBGZAHZCDFUACDFZACDFZHZUDBCDIZETUBCDBAUBBAJKLUAACDRUEUFU
    DUEUFUDUFGZUCUDUCUGBCDMNOPQS $.

  $( Obsolete version of ~ r19.30 as of 18-Jun-2023.  (Contributed by Scott
     Fenton, 25-Feb-2011.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  r19.30OLD $p |- ( A. x e. A ( ph \/ ps ) ->
                 ( A. x e. A ph \/ E. x e. A ps ) ) $=
    ( wn wi wral wrex ralim orcom df-or bitri ralbii dfrex2 orbi2i imor 3bitr4i
    wo 3imtr4i ) BEZAFZCDGTCDGZACDGZFZABRZCDGUCBCDHZRZTACDIUEUACDUEBARUAABJBAKL
    MUCUBEZRUHUCRUGUDUCUHJUFUHUCBCDNOUBUCPQS $.

  ${
    $d x ph $.
    $( Restricted quantifier version of ~ 19.32v .  (Contributed by NM,
       25-Nov-2003.) $)
    r19.32v $p |- ( A. x e. A ( ph \/ ps ) <-> ( ph \/ A. x e. A ps ) ) $=
      ( wn wi wral wo r19.21v df-or ralbii 3bitr4i ) AEZBFZCDGMBCDGZFABHZCDGAOH
      MBCDIPNCDABJKAOJL $.
  $}

  $( Restricted quantifier version of ~ 19.35 .  (Contributed by NM,
     20-Sep-2003.) $)
  r19.35 $p |- ( E. x e. A ( ph -> ps ) <->
               ( A. x e. A ph -> E. x e. A ps ) ) $=
    ( wi wrex wral pm2.27 ralimi rexim syl com12 wn rexnal pm2.21 reximi sylbir
    ax-1 ja impbii ) ABEZCDFZACDGZBCDFZEUCUBUDUCUABEZCDGUBUDEAUECDABHIUABCDJKLU
    CUDUBUCMAMZCDFUBACDNUFUACDABOPQBUACDBARPST $.

  ${
    $d x ps $.
    $( Restricted quantifier version of one direction of ~ 19.36 .  (The other
       direction holds iff ` A ` is nonempty, see ~ r19.36zv .)  (Contributed
       by NM, 22-Oct-2003.) $)
    r19.36v $p |- ( E. x e. A ( ph -> ps ) -> ( A. x e. A ph -> ps ) ) $=
      ( wi wrex wral r19.35 id rexlimivw imim2i sylbi ) ABECDFACDGZBCDFZEMBEABC
      DHNBMBBCDBIJKL $.
  $}

  ${
    r19.37.1 $e |- F/ x ph $.
    $( Restricted quantifier version of one direction of ~ 19.37 .  (The other
       direction does not hold when ` A ` is empty.)  (Contributed by FL,
       13-May-2012.)  (Revised by Mario Carneiro, 11-Dec-2016.) $)
    r19.37 $p |- ( E. x e. A ( ph -> ps ) -> ( ph -> E. x e. A ps ) ) $=
      ( wi wrex wral r19.35 cv wcel ax-1 ralrimi imim1i sylbi ) ABFCDGACDHZBCDG
      ZFAQFABCDIAPQAACDEACJDKLMNO $.
  $}

  ${
    $d x ph $.
    $( Restricted quantifier version of one direction of ~ 19.37v .  (The other
       direction holds iff ` A ` is nonempty, see ~ r19.37zv .)  (Contributed
       by NM, 2-Apr-2004.)  Reduce axiom usage.  (Revised by Wolf Lammen,
       18-Jun-2023.) $)
    r19.37v $p |- ( E. x e. A ( ph -> ps ) -> ( ph -> E. x e. A ps ) ) $=
      ( wral wi wrex id ralrimivw r19.35 biimpi syl5 ) AACDEZABFCDGZBCDGZAACDAH
      INMOFABCDJKL $.

    $( Obsolete version of ~ r19.37v as of 18-Jun-2023.  (Contributed by NM,
       2-Apr-2004.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    r19.37vOLD $p |- ( E. x e. A ( ph -> ps ) -> ( ph -> E. x e. A ps ) ) $=
      ( nfv r19.37 ) ABCDACEF $.
  $}

  $( Restricted quantifier version of Theorem 19.40 of [Margaris] p. 90.
     (Contributed by NM, 2-Apr-2004.) $)
  r19.40 $p |- ( E. x e. A ( ph /\ ps )
        -> ( E. x e. A ph /\ E. x e. A ps ) ) $=
    ( wa wrex simpl reximi simpr jca ) ABEZCDFACDFBCDFKACDABGHKBCDABIHJ $.

  ${
    $d x ps $.
    $( Restricted quantifier version ~ 19.41v .  Version of ~ r19.41 with a
       disjoint variable condition, requiring fewer axioms.  (Contributed by
       NM, 17-Dec-2003.)  Reduce dependencies on axioms.  (Revised by BJ,
       29-Mar-2020.) $)
    r19.41v $p |- ( E. x e. A ( ph /\ ps ) <-> ( E. x e. A ph /\ ps ) ) $=
      ( cv wcel wa wex wrex anass exbii 19.41v bitr3i df-rex anbi1i 3bitr4i ) C
      EDFZABGZGZCHZQAGZCHZBGZRCDIACDIZBGTUABGZCHUCUESCQABJKUABCLMRCDNUDUBBACDNO
      P $.
  $}

  ${
    r19.41.1 $e |- F/ x ps $.
    $( Restricted quantifier version of ~ 19.41 .  See ~ r19.41v for a version
       with a disjoint variable condition, requiring fewer axioms.
       (Contributed by NM, 1-Nov-2010.) $)
    r19.41 $p |- ( E. x e. A ( ph /\ ps ) <-> ( E. x e. A ph /\ ps ) ) $=
      ( cv wcel wa wex wrex anass exbii 19.41 bitr3i df-rex anbi1i 3bitr4i ) CF
      DGZABHZHZCIZRAHZCIZBHZSCDJACDJZBHUAUBBHZCIUDUFTCRABKLUBBCEMNSCDOUEUCBACDO
      PQ $.
  $}

  ${
    $d x ps $.  $d y ps $.
    $( Version of ~ r19.41v with two quantifiers.  (Contributed by Thierry
       Arnoux, 25-Jan-2017.) $)
    r19.41vv $p |- ( E. x e. A E. y e. B ( ph /\ ps )
         <-> ( E. x e. A E. y e. B ph /\ ps ) ) $=
      ( wa wrex r19.41v rexbii bitri ) ABGDFHZCEHADFHZBGZCEHMCEHBGLNCEABDFIJMBC
      EIK $.
  $}

  ${
    $d x ph $.
    $( Restricted quantifier version of ~ 19.42v (see also ~ 19.42 ).
       (Contributed by NM, 27-May-1998.) $)
    r19.42v $p |- ( E. x e. A ( ph /\ ps ) <-> ( ph /\ E. x e. A ps ) ) $=
      ( wa wrex r19.41v ancom rexbii 3bitr4i ) BAEZCDFBCDFZAEABEZCDFALEBACDGMKC
      DABHIALHJ $.
  $}

  $( Restricted quantifier version of ~ 19.43 .  (Contributed by NM,
     27-May-1998.)  (Proof shortened by Andrew Salmon, 30-May-2011.) $)
  r19.43 $p |- ( E. x e. A ( ph \/ ps )
         <-> ( E. x e. A ph \/ E. x e. A ps ) ) $=
    ( wn wi wrex wral wo r19.35 df-or rexbii ralnex imbi1i bitr4i 3bitr4i ) AEZ
    BFZCDGQCDHZBCDGZFZABIZCDGACDGZTIZQBCDJUBRCDABKLUDUCEZTFUAUCTKSUETACDMNOP $.

  ${
    $d x ps $.
    $( One direction of a restricted quantifier version of ~ 19.44 .  The other
       direction holds when ` A ` is nonempty, see ~ r19.44zv .  (Contributed
       by NM, 2-Apr-2004.) $)
    r19.44v $p |- ( E. x e. A ( ph \/ ps ) -> ( E. x e. A ph \/ ps ) ) $=
      ( wo wrex r19.43 id rexlimivw orim2i sylbi ) ABECDFACDFZBCDFZELBEABCDGMBL
      BBCDBHIJK $.
  $}

  ${
    $d x ph $.
    $( Restricted quantifier version of one direction of ~ 19.45 .  The other
       direction holds when ` A ` is nonempty, see ~ r19.45zv .  (Contributed
       by NM, 2-Apr-2004.) $)
    r19.45v $p |- ( E. x e. A ( ph \/ ps ) -> ( ph \/ E. x e. A ps ) ) $=
      ( wo wrex r19.43 id rexlimivw orim1i sylbi ) ABECDFACDFZBCDFZEAMEABCDGLAM
      AACDAHIJK $.
  $}

  ${
    $d x y $.
    ralcomf.1 $e |- F/_ y A $.
    ralcomf.2 $e |- F/_ x B $.
    $( Commutation of restricted universal quantifiers.  (Contributed by Mario
       Carneiro, 14-Oct-2016.) $)
    ralcomf $p |- ( A. x e. A A. y e. B ph <-> A. y e. B A. x e. A ph ) $=
      ( cv wcel wa wi wal wral ancomst 2albii alcom bitri r2alf 3bitr4i ) BHDIZ
      CHEIZJAKZCLBLZUATJAKZBLCLZACEMBDMABDMCEMUCUDCLBLUEUBUDBCTUAANOUDBCPQABCDE
      FRACBEDGRS $.

    $( Commutation of restricted existential quantifiers.  (Contributed by
       Mario Carneiro, 14-Oct-2016.) $)
    rexcomf $p |- ( E. x e. A E. y e. B ph <-> E. y e. B E. x e. A ph ) $=
      ( cv wcel wa wex wrex ancom anbi1i 2exbii excom bitri r2exf 3bitr4i ) BHD
      IZCHEIZJZAJZCKBKZUATJZAJZBKCKZACELBDLABDLCELUDUFCKBKUGUCUFBCUBUEATUAMNOUF
      BCPQABCDEFRACBEDGRS $.
  $}

  ${
    $d x y $.  $d x B $.  $d y A $.
    $( Commutation of restricted universal quantifiers.  See ~ ralcom2 for a
       version without disjoint variable condition on ` x , y ` .  (Contributed
       by NM, 13-Oct-1999.)  (Revised by Mario Carneiro, 14-Oct-2016.) $)
    ralcom $p |- ( A. x e. A A. y e. B ph <-> A. y e. B A. x e. A ph ) $=
      ( cv wcel wa wi wal wral ancomst 2albii alcom bitri r2al 3bitr4i ) BFDGZC
      FEGZHAIZCJBJZSRHAIZBJCJZACEKBDKABDKCEKUAUBCJBJUCTUBBCRSALMUBBCNOABCDEPACB
      EDPQ $.

    $( Commutation of restricted existential quantifiers.  (Contributed by NM,
       19-Nov-1995.)  (Revised by Mario Carneiro, 14-Oct-2016.) $)
    rexcom $p |- ( E. x e. A E. y e. B ph <-> E. y e. B E. x e. A ph ) $=
      ( cv wcel wa wex wrex ancom anbi1i 2exbii excom bitri r2ex 3bitr4i ) BFDG
      ZCFEGZHZAHZCIBIZSRHZAHZBICIZACEJBDJABDJCEJUBUDCIBIUEUAUDBCTUCARSKLMUDBCNO
      ABCDEPACBEDPQ $.
  $}

  ${
    $d y z A $.  $d x z B $.  $d x y C $.
    $( Swap first and third restricted universal quantifiers.  (Contributed by
       AV, 3-Dec-2021.) $)
    ralcom13 $p |- ( A. x e. A A. y e. B A. z e. C ph
         <-> A. z e. C A. y e. B A. x e. A ph ) $=
      ( wral ralcom ralbii 3bitri ) ADGHZCFHBEHLBEHZCFHABEHZDGHZCFHNCFHDGHLBCEF
      IMOCFABDEGIJNCDFGIK $.

    $( Swap first and third restricted existential quantifiers.  (Contributed
       by NM, 8-Apr-2015.) $)
    rexcom13 $p |- ( E. x e. A E. y e. B E. z e. C ph
         <-> E. z e. C E. y e. B E. x e. A ph ) $=
      ( wrex rexcom rexbii 3bitri ) ADGHZCFHBEHLBEHZCFHABEHZDGHZCFHNCFHDGHLBCEF
      IMOCFABDEGIJNCDFGIK $.
  $}

  ${
    $d z A $.  $d z B $.  $d x y C $.  $d x y z $.
    $( Rotate three restricted universal quantifiers.  (Contributed by AV,
       3-Dec-2021.) $)
    ralrot3 $p |- ( A. x e. A A. y e. B A. z e. C ph
                    <-> A. z e. C A. x e. A A. y e. B ph ) $=
      ( wral ralcom ralbii bitri ) ADGHCFHZBEHACFHZDGHZBEHMBEHDGHLNBEACDFGIJMBD
      EGIK $.
  $}

  ${
    $d w z A $.  $d w z B $.  $d w x y C $.  $d x y z D $.
    $( Rotate four restricted existential quantifiers twice.  (Contributed by
       NM, 8-Apr-2015.) $)
    rexrot4 $p |- ( E. x e. A E. y e. B E. z e. C E. w e. D ph
        <-> E. z e. C E. w e. D E. x e. A E. y e. B ph ) $=
      ( wrex rexcom13 rexbii bitri ) AEIJDHJCGJZBFJACGJZDHJEIJZBFJOBFJEIJDHJNPB
      FACDEGHIKLOBEDFIHKM $.
  $}

  ${
    $d y A $.  $d x A $.
    $( Commutation of restricted universal quantifiers.  Note that ` x ` and
       ` y ` need not be disjoint (this makes the proof longer).  If ` x ` and
       ` y ` are disjoint, then one may use ~ ralcom .  (Contributed by NM,
       24-Nov-1994.)  (Proof shortened by Mario Carneiro, 17-Oct-2016.) $)
    ralcom2 $p |- ( A. x e. A A. y e. A ph -> A. y e. A A. x e. A ph ) $=
      ( weq wal wral wi cv wcel wb eleq1w dral1 df-ral 3bitr4g wa nfnae ralrimi
      nfan ex sps imbi1d bicomd imbi12d biimpd wn nfra2 nfra1 wnfc nfcvf adantr
      nfcvd nfeld nfan1 rsp2 ancomsd expdimp adantll pm2.61i ) BCEZBFZACDGZBDGZ
      ABDGZCDGZHVAVCVEVABIDJZVBHZBFCIZDJZVDHZCFVCVEVGVJBCVAVFVIVBVDUTVFVIKBBCDL
      UAZVAVIAHZCFZVFAHZBFZVBVDVAVOVMVNVLBCVAVFVIAVKUBMUCACDNABDNOUDMVBBDNVDCDN
      OUEVAUFZVCVEVPVCPZVDCDVPVCCBCCQABCDDUGSVQVIVDVQVIPABDVQVIBVPVCBBCBQVBBDUH
      SVQBVHDVPBVHUIVCBCUJUKVQBDULUMUNVCVIVNVPVCVIVFAVCVFVIAABCDDUOUPUQURRTRTUS
      $.
  $}

  $( A commutation law for restricted universal quantifiers that swaps the
     domains of the restriction.  (Contributed by NM, 22-Feb-2004.) $)
  ralcom3 $p |- ( A. x e. A ( x e. B -> ph ) <->
                  A. x e. B ( x e. A -> ph ) ) $=
    ( cv wcel wi wral pm2.04 ralimi2 impbii ) BEZDFZAGZBCHLCFZAGZBDHNPBCDOMAIJP
    NBDCMOAIJK $.

  ${
    $d y A $.  $d x B $.  $d x y $.
    reean.1 $e |- F/ y ph $.
    reean.2 $e |- F/ x ps $.
    $( Rearrange restricted existential quantifiers.  (Contributed by NM,
       27-Oct-2010.)  (Proof shortened by Andrew Salmon, 30-May-2011.) $)
    reean $p |- ( E. x e. A E. y e. B ( ph /\ ps ) <->
                 ( E. x e. A ph /\ E. y e. B ps ) ) $=
      ( cv wcel wa wex wrex an4 2exbii nfv nfan eean bitri df-rex r2ex anbi12i
      3bitr4i ) CIEJZDIFJZKABKZKZDLCLZUDAKZCLZUEBKZDLZKZUFDFMCEMACEMZBDFMZKUHUI
      UKKZDLCLUMUGUPCDUDUEABNOUIUKCDUDADUDDPGQUEBCUECPHQRSUFCDEFUAUNUJUOULACETB
      DFTUBUC $.
  $}

  ${
    $d y ph $.  $d x ps $.  $d x y $.  $d y A $.  $d x B $.
    $( Rearrange restricted existential quantifiers.  (Contributed by NM,
       9-May-1999.) $)
    reeanv $p |- ( E. x e. A E. y e. B ( ph /\ ps ) <->
                 ( E. x e. A ph /\ E. y e. B ps ) ) $=
      ( nfv reean ) ABCDEFADGBCGH $.
  $}

  ${
    $d ph y z $.  $d ps x z $.  $d ch x y $.  $d A y $.  $d B x z $.
    $d C x y $.
    $( Rearrange three restricted existential quantifiers.  (Contributed by
       Jeff Madsen, 11-Jun-2010.) $)
    3reeanv $p |- ( E. x e. A E. y e. B E. z e. C ( ph /\ ps /\ ch )
                      <-> ( E. x e. A ph /\ E. y e. B ps /\ E. z e. C ch ) ) $=
      ( wa wrex w3a r19.41v reeanv anbi1i bitri df-3an 2rexbii rexbii 3bitr4i )
      ABJZEHKZCFIKZJZDGKZADGKZBEHKZJZUCJZABCLZFIKEHKZDGKUFUGUCLUEUBDGKZUCJUIUBU
      CDGMULUHUCABDEGHNOPUKUDDGUKUACJZFIKEHKUDUJUMEFHIABCQRUACEFHINPSUFUGUCQT
      $.
  $}

  ${
    $d ph y $.  $d ps x $.  $d A y $.  $d B x $.  $d x y $.
    $( Distribute restricted universal quantification over "or".  (Contributed
       by Jeff Madsen, 19-Jun-2010.) $)
    2ralor $p |- ( A. x e. A A. y e. B ( ph \/ ps ) <->
                  ( A. x e. A ph \/ A. y e. B ps ) ) $=
      ( wo wral wn wrex wa rexnal anbi12i rexbii bitr3i reeanv 3bitr3ri 3bitr4i
      ioran con4bii ) ABGZDFHZCEHZACEHZBDFHZGZAIZCEJZBIZDFJZKZUDIZUEIZKUCIZUFIU
      HULUJUMACELBDFLMUGUIKZDFJZCEJUBIZCEJUKUNUPUQCEUPUAIZDFJUQURUODFABSNUADFLO
      NUGUICDEFPUBCELQUDUESRT $.
  $}

  $( The setvar ` x ` is not free in ` E! x e. A ph ` .  (Contributed by NM,
     19-Mar-1997.) $)
  nfreu1 $p |- F/ x E! x e. A ph $=
    ( wreu cv wcel wa weu df-reu nfeu1 nfxfr ) ABCDBECFAGZBHBABCILBJK $.

  $( The setvar ` x ` is not free in ` E* x e. A ph ` .  (Contributed by NM,
     16-Jun-2017.) $)
  nfrmo1 $p |- F/ x E* x e. A ph $=
    ( wrmo cv wcel wa wmo df-rmo nfmo1 nfxfr ) ABCDBECFAGZBHBABCILBJK $.

  ${
    nfreud.1 $e |- F/ y ph $.
    nfreud.2 $e |- ( ph -> F/_ x A ) $.
    nfreud.3 $e |- ( ph -> F/ x ps ) $.
    $( Deduction version of ~ nfreu .  (Contributed by NM, 15-Feb-2013.)
       (Revised by Mario Carneiro, 8-Oct-2016.) $)
    nfreud $p |- ( ph -> F/ x E! y e. A ps ) $=
      ( wreu cv wcel wa weu df-reu weq wal wn wnfc nfcvf adantr nfeld wnf nfand
      adantl nfeud2 nfxfrd ) BDEIDJZEKZBLZDMACBDENAUICDFACDOCPQZLZUHBCUKCUGEUJC
      UGRACDSUDACERUJGTUAABCUBUJHTUCUEUF $.

    $( Deduction version of ~ nfrmo .  (Contributed by NM, 17-Jun-2017.) $)
    nfrmod $p |- ( ph -> F/ x E* y e. A ps ) $=
      ( wrmo cv wcel wa wmo df-rmo weq wal wn wnfc nfcvf adantr nfeld wnf nfand
      adantl nfmod2 nfxfrd ) BDEIDJZEKZBLZDMACBDENAUICDFACDOCPQZLZUHBCUKCUGEUJC
      UGRACDSUDACERUJGTUAABCUBUJHTUCUEUF $.
  $}

  ${
    nfreu.1 $e |- F/_ x A $.
    nfreu.2 $e |- F/ x ph $.
    $( Bound-variable hypothesis builder for restricted unique existence.
       (Contributed by NM, 30-Oct-2010.)  (Revised by Mario Carneiro,
       8-Oct-2016.) $)
    nfreu $p |- F/ x E! y e. A ph $=
      ( wreu wnf wtru nftru wnfc a1i nfreud mptru ) ACDGBHIABCDCJBDKIELABHIFLMN
      $.

    $( Bound-variable hypothesis builder for restricted uniqueness.
       (Contributed by NM, 16-Jun-2017.) $)
    nfrmo $p |- F/ x E* y e. A ph $=
      ( wrmo cv wcel wa wmo df-rmo wnf wtru nftru weq wal wn nfcvf a1i adantl
      wnfc nfeld nfand nfmod2 mptru nfxfr ) ACDGCHZDIZAJZCKZBACDLUKBMNUJBCCOBCP
      BQRZUJBMNULUIABULBUHDBCSBDUBULETUCABMULFTUDUAUEUFUG $.
  $}

  $( An "identity" law of concretion for restricted abstraction.  Special case
     of Definition 2.1 of [Quine] p. 16.  (Contributed by NM, 9-Oct-2003.) $)
  rabid $p |- ( x e. { x e. A | ph } <-> ( x e. A /\ ph ) ) $=
    ( cv wcel wa crab df-rab abeq2i ) BDCEAFBABCGABCHI $.

  $( Abstract builder restricted to another restricted abstract builder.
     (Contributed by Thierry Arnoux, 30-Aug-2017.) $)
  rabrab $p |- { x e. { x e. A | ph } | ps } = { x e. A | ( ph /\ ps ) } $=
    ( cv crab wcel wa cab rabid anbi1i anass bitri abbii df-rab 3eqtr4i ) CEZAC
    DFZGZBHZCIQDGZABHZHZCIBCRFUBCDFTUCCTUAAHZBHUCSUDBACDJKUAABLMNBCROUBCDOP $.

  $( Membership in a restricted abstraction, implication.  (Contributed by
     Glauco Siliprandi, 26-Jun-2021.) $)
  rabidim1 $p |- ( x e. { x e. A | ph } -> x e. A ) $=
    ( cv crab wcel rabid simplbi ) BDZABCEFICFAABCGH $.

  ${
    $d x A $.
    $( An "identity" law for restricted class abstraction.  (Contributed by NM,
       9-Oct-2003.)  (Proof shortened by Andrew Salmon, 30-May-2011.) $)
    rabid2 $p |- ( A = { x e. A | ph } <-> A. x e. A ph ) $=
      ( cv wcel wa cab wceq wi wal crab abeq2 pm4.71 albii bitr4i df-rab eqeq2i
      wral wb df-ral 3bitr4i ) CBDCEZAFZBGZHZUBAIZBJZCABCKZHABCRUEUBUCSZBJUGUCB
      CLUFUIBUBAMNOUHUDCABCPQABCTUA $.
  $}

  ${
    rabid2f.1 $e |- F/_ x A $.
    $( An "identity" law for restricted class abstraction.  (Contributed by NM,
       9-Oct-2003.)  (Proof shortened by Andrew Salmon, 30-May-2011.)  (Revised
       by Thierry Arnoux, 13-Mar-2017.) $)
    rabid2f $p |- ( A = { x e. A | ph } <-> A. x e. A ph ) $=
      ( cv wcel wa cab wceq wi wal crab wral abeq2f pm4.71 bitr4i df-rab eqeq2i
      wb albii df-ral 3bitr4i ) CBECFZAGZBHZIZUCAJZBKZCABCLZIABCMUFUCUDSZBKUHUD
      BCDNUGUJBUCAOTPUIUECABCQRABCUAUB $.
  $}

  $( Equivalent wff's correspond to equal restricted class abstractions.
     Closed theorem form of ~ rabbidva .  (Contributed by NM, 25-Nov-2013.) $)
  rabbi $p |- ( A. x e. A ( ps <-> ch )
       <-> { x e. A | ps } = { x e. A | ch } ) $=
    ( cv wcel wa wb wal wceq wral crab abbi wi df-ral pm5.32 albii bitri df-rab
    cab eqeq12i 3bitr4i ) CEDFZAGZUCBGZHZCIZUDCTZUECTZJABHZCDKZACDLZBCDLZJUDUEC
    MUKUCUJNZCIUGUJCDOUNUFCUCABPQRULUHUMUIACDSBCDSUAUB $.

  $( Swap with a membership relation in a restricted class abstraction.
     (Contributed by NM, 4-Jul-2005.) $)
  rabswap $p |- { x e. A | x e. B } = { x e. B | x e. A } $=
    ( cv wcel wa cab crab ancom abbii df-rab 3eqtr4i ) ADZBEZMCEZFZAGONFZAGOABH
    NACHPQANOIJOABKNACKL $.

  $( The abstraction variable in a restricted class abstraction isn't free.
     (Contributed by NM, 19-Mar-1997.) $)
  nfrab1 $p |- F/_ x { x e. A | ph } $=
    ( crab cv wcel wa cab df-rab nfab1 nfcxfr ) BABCDBECFAGZBHABCILBJK $.

  ${
    $d x z $.  $d y z $.  $d z A $.
    nfrab.1 $e |- F/ x ph $.
    nfrab.2 $e |- F/_ x A $.
    $( A variable not free in a wff remains so in a restricted class
       abstraction.  (Contributed by NM, 13-Oct-2003.)  (Revised by Mario
       Carneiro, 9-Oct-2016.) $)
    nfrab $p |- F/_ x { y e. A | ph } $=
      ( vz crab cv wcel wa cab df-rab wnfc wtru nftru weq wal wn wnf eleq1w a1i
      nfcri dvelimnf nfand adantl nfabd2 mptru nfcxfr ) BACDHCIDJZAKZCLZACDMBUL
      NOUKBCCPBCQBRSZUKBTOUMUJABGIDJUJBCGBGDFUCGCDUAUDABTUMEUBUEUFUGUHUI $.
  $}

  ${
    reubida.1 $e |- F/ x ph $.
    reubida.2 $e |- ( ( ph /\ x e. A ) -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted existential quantifier (deduction
       form).  (Contributed by Mario Carneiro, 19-Nov-2016.) $)
    reubida $p |- ( ph -> ( E! x e. A ps <-> E! x e. A ch ) ) $=
      ( cv wcel wa weu wreu pm5.32da eubid df-reu 3bitr4g ) ADHEIZBJZDKQCJZDKBD
      ELCDELARSDFAQBCGMNBDEOCDEOP $.
  $}

  ${
    $d x ph $.
    reubidva.1 $e |- ( ( ph /\ x e. A ) -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted existential quantifier (deduction
       form).  (Contributed by NM, 13-Nov-2004.)  Reduce axiom usage.  (Revised
       by Wolf Lammen, 14-Jan-2023.) $)
    reubidva $p |- ( ph -> ( E! x e. A ps <-> E! x e. A ch ) ) $=
      ( cv wcel wa weu wreu pm5.32da eubidv df-reu 3bitr4g ) ADGEHZBIZDJPCIZDJB
      DEKCDEKAQRDAPBCFLMBDENCDENO $.
  $}

  ${
    $d x ph $.
    reubidvaOLD.1 $e |- ( ( ph /\ x e. A ) -> ( ps <-> ch ) ) $.
    $( Obsolete version of ~ reubidva as of 14-Jan-2023.  (Contributed by NM,
       13-Nov-2004.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    reubidvaOLD $p |- ( ph -> ( E! x e. A ps <-> E! x e. A ch ) ) $=
      ( nfv reubida ) ABCDEADGFH $.
  $}

  ${
    $d x ph $.
    reubidv.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted existential quantifier (deduction
       form).  (Contributed by NM, 17-Oct-1996.) $)
    reubidv $p |- ( ph -> ( E! x e. A ps <-> E! x e. A ch ) ) $=
      ( wb cv wcel adantr reubidva ) ABCDEABCGDHEIFJK $.
  $}

  ${
    reubiia.1 $e |- ( x e. A -> ( ph <-> ps ) ) $.
    $( Formula-building rule for restricted existential quantifier (inference
       form).  (Contributed by NM, 14-Nov-2004.) $)
    reubiia $p |- ( E! x e. A ph <-> E! x e. A ps ) $=
      ( cv wcel wa weu wreu pm5.32i eubii df-reu 3bitr4i ) CFDGZAHZCIOBHZCIACDJ
      BCDJPQCOABEKLACDMBCDMN $.
  $}

  ${
    reubii.1 $e |- ( ph <-> ps ) $.
    $( Formula-building rule for restricted existential quantifier (inference
       form).  (Contributed by NM, 22-Oct-1999.) $)
    reubii $p |- ( E! x e. A ph <-> E! x e. A ps ) $=
      ( wb cv wcel a1i reubiia ) ABCDABFCGDHEIJ $.
  $}

  ${
    rmobida.1 $e |- F/ x ph $.
    rmobida.2 $e |- ( ( ph /\ x e. A ) -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted existential quantifier (deduction
       form).  (Contributed by NM, 16-Jun-2017.) $)
    rmobida $p |- ( ph -> ( E* x e. A ps <-> E* x e. A ch ) ) $=
      ( cv wcel wa wmo wrmo pm5.32da mobid df-rmo 3bitr4g ) ADHEIZBJZDKQCJZDKBD
      ELCDELARSDFAQBCGMNBDEOCDEOP $.
  $}

  ${
    $d x ph $.
    rmobidva.1 $e |- ( ( ph /\ x e. A ) -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted existential quantifier (deduction
       form).  (Contributed by NM, 16-Jun-2017.) $)
    rmobidva $p |- ( ph -> ( E* x e. A ps <-> E* x e. A ch ) ) $=
      ( nfv rmobida ) ABCDEADGFH $.
  $}

  ${
    $d x ph $.
    rmobidv.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted existential quantifier (deduction
       form).  (Contributed by NM, 16-Jun-2017.) $)
    rmobidv $p |- ( ph -> ( E* x e. A ps <-> E* x e. A ch ) ) $=
      ( wb cv wcel adantr rmobidva ) ABCDEABCGDHEIFJK $.
  $}

  ${
    rmobiia.1 $e |- ( x e. A -> ( ph <-> ps ) ) $.
    $( Formula-building rule for restricted existential quantifier (inference
       form).  (Contributed by NM, 16-Jun-2017.) $)
    rmobiia $p |- ( E* x e. A ph <-> E* x e. A ps ) $=
      ( cv wcel wa wmo wrmo pm5.32i mobii df-rmo 3bitr4i ) CFDGZAHZCIOBHZCIACDJ
      BCDJPQCOABEKLACDMBCDMN $.
  $}

  ${
    rmobii.1 $e |- ( ph <-> ps ) $.
    $( Formula-building rule for restricted existential quantifier (inference
       form).  (Contributed by NM, 16-Jun-2017.) $)
    rmobii $p |- ( E* x e. A ph <-> E* x e. A ps ) $=
      ( wb cv wcel a1i rmobiia ) ABCDABFCGDHEIJ $.
  $}

  ${
    raleq1f.1 $e |- F/_ x A $.
    raleq1f.2 $e |- F/_ x B $.
    $( Equality theorem for restricted universal quantifier, with
       bound-variable hypotheses instead of distinct variable restrictions.
       (Contributed by NM, 7-Mar-2004.)  (Revised by Andrew Salmon,
       11-Jul-2011.) $)
    raleqf $p |- ( A = B -> ( A. x e. A ph <-> A. x e. B ph ) ) $=
      ( wceq cv wcel wi wal wral nfeq eleq2 imbi1d albid df-ral 3bitr4g ) CDGZB
      HZCIZAJZBKTDIZAJZBKABCLABDLSUBUDBBCDEFMSUAUCACDTNOPABCQABDQR $.

    $( Equality theorem for restricted existential quantifier, with
       bound-variable hypotheses instead of distinct variable restrictions.
       (Contributed by NM, 9-Oct-2003.)  (Revised by Andrew Salmon,
       11-Jul-2011.) $)
    rexeqf $p |- ( A = B -> ( E. x e. A ph <-> E. x e. B ph ) ) $=
      ( wceq cv wcel wa wex wrex nfeq eleq2 anbi1d exbid df-rex 3bitr4g ) CDGZB
      HZCIZAJZBKTDIZAJZBKABCLABDLSUBUDBBCDEFMSUAUCACDTNOPABCQABDQR $.

    $( Equality theorem for restricted unique existential quantifier, with
       bound-variable hypotheses instead of distinct variable restrictions.
       (Contributed by NM, 5-Apr-2004.)  (Revised by Andrew Salmon,
       11-Jul-2011.) $)
    reueq1f $p |- ( A = B -> ( E! x e. A ph <-> E! x e. B ph ) ) $=
      ( wceq cv wcel wa weu wreu nfeq eleq2 anbi1d eubid df-reu 3bitr4g ) CDGZB
      HZCIZAJZBKTDIZAJZBKABCLABDLSUBUDBBCDEFMSUAUCACDTNOPABCQABDQR $.

    $( Equality theorem for restricted at-most-one quantifier, with
       bound-variable hypotheses instead of distinct variable restrictions.
       (Contributed by Alexander van der Vekens, 17-Jun-2017.) $)
    rmoeq1f $p |- ( A = B -> ( E* x e. A ph <-> E* x e. B ph ) ) $=
      ( wceq cv wcel wa wmo wrmo nfeq eleq2 anbi1d mobid df-rmo 3bitr4g ) CDGZB
      HZCIZAJZBKTDIZAJZBKABCLABDLSUBUDBBCDEFMSUAUCACDTNOPABCQABDQR $.
  $}

  ${
    $d x ph $.
    raleqbidv.1 $e |- ( ph -> A = B ) $.
    raleqbidv.2 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Equality deduction for restricted universal quantifier.  (Contributed by
       NM, 6-Nov-2007.)  Remove usage of ~ ax-10 , ~ ax-11 , and ~ ax-12 and
       reduce distinct variable conditions.  (Revised by Steven Nguyen,
       30-Apr-2023.) $)
    raleqbidv $p |- ( ph -> ( A. x e. A ps <-> A. x e. B ch ) ) $=
      ( cv wcel eleq2d imbi12d ralbidv2 ) ABCDEFADIZEJNFJBCAEFNGKHLM $.

    $( Equality deduction for restricted universal quantifier.  (Contributed by
       NM, 6-Nov-2007.)  Remove usage of ~ ax-10 , ~ ax-11 , and ~ ax-12 and
       reduce distinct variable conditions.  (Revised by Steven Nguyen,
       30-Apr-2023.) $)
    rexeqbidv $p |- ( ph -> ( E. x e. A ps <-> E. x e. B ch ) ) $=
      ( cv wcel eleq2d anbi12d rexbidv2 ) ABCDEFADIZEJNFJBCAEFNGKHLM $.
  $}

  ${
    $d x A $.  $d x B $.
    raleqbi1dv.1 $e |- ( A = B -> ( ph <-> ps ) ) $.
    $( Equality deduction for restricted universal quantifier.  (Contributed by
       NM, 16-Nov-1995.)  (Proof shortened by Steven Nguyen, 5-May-2023.) $)
    raleqbi1dv $p |- ( A = B -> ( A. x e. A ph <-> A. x e. B ps ) ) $=
      ( wceq id raleqbidv ) DEGZABCDEJHFI $.

    $( Equality deduction for restricted existential quantifier.  (Contributed
       by NM, 18-Mar-1997.)  (Proof shortened by Steven Nguyen, 5-May-2023.) $)
    rexeqbi1dv $p |- ( A = B -> ( E. x e. A ph <-> E. x e. B ps ) ) $=
      ( wceq id rexeqbidv ) DEGZABCDEJHFI $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Equality theorem for restricted universal quantifier.  (Contributed by
       NM, 16-Nov-1995.)  Remove usage of ~ ax-10 , ~ ax-11 , and ~ ax-12 .
       (Revised by Steven Nguyen, 30-Apr-2023.) $)
    raleq $p |- ( A = B -> ( A. x e. A ph <-> A. x e. B ph ) ) $=
      ( wceq biidd raleqbi1dv ) AABCDCDEAFG $.

    $( Equality theorem for restricted existential quantifier.  (Contributed by
       NM, 29-Oct-1995.)  Remove usage of ~ ax-10 , ~ ax-11 , and ~ ax-12 .
       (Revised by Steven Nguyen, 30-Apr-2023.) $)
    rexeq $p |- ( A = B -> ( E. x e. A ph <-> E. x e. B ph ) ) $=
      ( wceq biidd rexeqbi1dv ) AABCDCDEAFG $.

    $( Equality theorem for restricted unique existential quantifier.
       (Contributed by NM, 5-Apr-2004.)  Remove usage of ~ ax-10 , ~ ax-11 ,
       and ~ ax-12 .  (Revised by Steven Nguyen, 30-Apr-2023.) $)
    reueq1 $p |- ( A = B -> ( E! x e. A ph <-> E! x e. B ph ) ) $=
      ( wceq cv wcel wa weu wreu eleq2 anbi1d eubidv df-reu 3bitr4g ) CDEZBFZCG
      ZAHZBIQDGZAHZBIABCJABDJPSUABPRTACDQKLMABCNABDNO $.

    $( Equality theorem for restricted at-most-one quantifier.  (Contributed by
       Alexander van der Vekens, 17-Jun-2017.)  Remove usage of ~ ax-10 ,
       ~ ax-11 , and ~ ax-12 .  (Revised by Steven Nguyen, 30-Apr-2023.) $)
    rmoeq1 $p |- ( A = B -> ( E* x e. A ph <-> E* x e. B ph ) ) $=
      ( wceq cv wcel wa wmo wrmo eleq2 anbi1d mobidv df-rmo 3bitr4g ) CDEZBFZCG
      ZAHZBIQDGZAHZBIABCJABDJPSUABPRTACDQKLMABCNABDNO $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Obsolete version of ~ raleq as of 5-May-2023.  Equality theorem for
       restricted universal quantifier.  (Contributed by NM, 16-Nov-1995.)
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    raleqOLD $p |- ( A = B -> ( A. x e. A ph <-> A. x e. B ph ) ) $=
      ( nfcv raleqf ) ABCDBCEBDEF $.

    $( Obsolete version of ~ rexeq as of 5-May-2023.  Equality theorem for
       restricted existential quantifier.  (Contributed by NM, 29-Oct-1995.)
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    rexeqOLD $p |- ( A = B -> ( E. x e. A ph <-> E. x e. B ph ) ) $=
      ( nfcv rexeqf ) ABCDBCEBDEF $.

    $( Obsolete version of ~ reueq1 as of 5-May-2023.  Equality theorem for
       restricted unique existential quantifier.  (Contributed by NM,
       5-Apr-2004.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    reueq1OLD $p |- ( A = B -> ( E! x e. A ph <-> E! x e. B ph ) ) $=
      ( nfcv reueq1f ) ABCDBCEBDEF $.

    $( Obsolete version of ~ rmoeq1 as of 5-May-2023.  Equality theorem for
       restricted at-most-one quantifier.  (Contributed by Alexander van der
       Vekens, 17-Jun-2017.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    rmoeq1OLD $p |- ( A = B -> ( E* x e. A ph <-> E* x e. B ph ) ) $=
      ( nfcv rmoeq1f ) ABCDBCEBDEF $.
  $}

  ${
    $d A x $.  $d B x $.
    raleq1i.1 $e |- A = B $.
    $( Equality inference for restricted universal quantifier.  (Contributed by
       Paul Chapman, 22-Jun-2011.) $)
    raleqi $p |- ( A. x e. A ph <-> A. x e. B ph ) $=
      ( wceq wral wb raleq ax-mp ) CDFABCGABDGHEABCDIJ $.

    $( Equality inference for restricted existential quantifier.  (Contributed
       by Mario Carneiro, 23-Apr-2015.) $)
    rexeqi $p |- ( E. x e. A ph <-> E. x e. B ph ) $=
      ( wceq wrex wb rexeq ax-mp ) CDFABCGABDGHEABCDIJ $.
  $}

  ${
    $d x A $.  $d x B $.
    raleq1d.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for restricted universal quantifier.  (Contributed by
       NM, 13-Nov-2005.) $)
    raleqdv $p |- ( ph -> ( A. x e. A ps <-> A. x e. B ps ) ) $=
      ( wceq wral wb raleq syl ) ADEGBCDHBCEHIFBCDEJK $.

    $( Equality deduction for restricted existential quantifier.  (Contributed
       by NM, 14-Jan-2007.) $)
    rexeqdv $p |- ( ph -> ( E. x e. A ps <-> E. x e. B ps ) ) $=
      ( wceq wrex wb rexeq syl ) ADEGBCDHBCEHIFBCDEJK $.
  $}

  ${
    $d x A $.  $d x B $.
    raleqd.1 $e |- ( A = B -> ( ph <-> ps ) ) $.
    $( Obsolete version of ~ raleqbi1dv as of 5-May-2023.  Equality deduction
       for restricted universal quantifier.  (Contributed by NM, 16-Nov-1995.)
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    raleqbi1dvOLD $p |- ( A = B -> ( A. x e. A ph <-> A. x e. B ps ) ) $=
      ( wceq wral raleq ralbidv bitrd ) DEGZACDHACEHBCEHACDEILABCEFJK $.

    $( Obsolete version of ~ rexeqbi1dv as of 5-May-2023.  Equality deduction
       for restricted existential quantifier.  (Contributed by NM,
       18-Mar-1997.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    rexeqbi1dvOLD $p |- ( A = B -> ( E. x e. A ph <-> E. x e. B ps ) ) $=
      ( wceq wrex rexeq rexbidv bitrd ) DEGZACDHACEHBCEHACDEILABCEFJK $.

    $( Equality deduction for restricted unique existential quantifier.
       (Contributed by NM, 5-Apr-2004.) $)
    reueqd $p |- ( A = B -> ( E! x e. A ph <-> E! x e. B ps ) ) $=
      ( wceq wreu reueq1 reubidv bitrd ) DEGZACDHACEHBCEHACDEILABCEFJK $.

    $( Equality deduction for restricted at-most-one quantifier.  (Contributed
       by Alexander van der Vekens, 17-Jun-2017.) $)
    rmoeqd $p |- ( A = B -> ( E* x e. A ph <-> E* x e. B ps ) ) $=
      ( wceq wrmo rmoeq1 rmobidv bitrd ) DEGZACDHACEHBCEHACDEILABCEFJK $.
  $}

  ${
    raleqbid.0 $e |- F/ x ph $.
    raleqbid.1 $e |- F/_ x A $.
    raleqbid.2 $e |- F/_ x B $.
    raleqbid.3 $e |- ( ph -> A = B ) $.
    raleqbid.4 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Equality deduction for restricted universal quantifier.  (Contributed by
       Thierry Arnoux, 8-Mar-2017.) $)
    raleqbid $p |- ( ph -> ( A. x e. A ps <-> A. x e. B ch ) ) $=
      ( wral wceq wb raleqf syl ralbid bitrd ) ABDELZBDFLZCDFLAEFMSTNJBDEFHIOPA
      BCDFGKQR $.

    $( Equality deduction for restricted existential quantifier.  (Contributed
       by Thierry Arnoux, 8-Mar-2017.) $)
    rexeqbid $p |- ( ph -> ( E. x e. A ps <-> E. x e. B ch ) ) $=
      ( wrex wceq wb rexeqf syl rexbid bitrd ) ABDELZBDFLZCDFLAEFMSTNJBDEFHIOPA
      BCDFGKQR $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ph $.
    raleqbidvOLD.1 $e |- ( ph -> A = B ) $.
    raleqbidvOLD.2 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Obsolete version of ~ raleqbidv as of 30-Apr-2023.  Equality deduction
       for restricted universal quantifier.  (Contributed by NM, 6-Nov-2007.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    raleqbidvOLD $p |- ( ph -> ( A. x e. A ps <-> A. x e. B ch ) ) $=
      ( wral raleqdv ralbidv bitrd ) ABDEIBDFICDFIABDEFGJABCDFHKL $.

    $( Obsolete version of ~ rexeqbidv as of 30-Apr-2023.  Equality deduction
       for restricted existential quantifier.  (Contributed by NM, 6-Nov-2007.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    rexeqbidvOLD $p |- ( ph -> ( E. x e. A ps <-> E. x e. B ch ) ) $=
      ( wrex rexeqdv rexbidv bitrd ) ABDEIBDFICDFIABDEFGJABCDFHKL $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ph $.
    raleqbidva.1 $e |- ( ph -> A = B ) $.
    raleqbidva.2 $e |- ( ( ph /\ x e. A ) -> ( ps <-> ch ) ) $.
    $( Equality deduction for restricted universal quantifier.  (Contributed by
       Mario Carneiro, 5-Jan-2017.) $)
    raleqbidva $p |- ( ph -> ( A. x e. A ps <-> A. x e. B ch ) ) $=
      ( wral ralbidva raleqdv bitrd ) ABDEICDEICDFIABCDEHJACDEFGKL $.

    $( Equality deduction for restricted universal quantifier.  (Contributed by
       Mario Carneiro, 5-Jan-2017.) $)
    rexeqbidva $p |- ( ph -> ( E. x e. A ps <-> E. x e. B ch ) ) $=
      ( wrex rexbidva rexeqdv bitrd ) ABDEICDEICDFIABCDEHJACDEFGKL $.
  $}

  ${
    $d A x $.  $d B x $.
    $( All elements of a class are elements of a class equal to this class.
       (Contributed by AV, 30-Oct-2020.) $)
    raleleq $p |- ( A = B -> A. x e. A x e. B ) $=
      ( wceq cv wcel eleq2 biimpd ralrimiv ) BCDZAEZCFZABJKBFLBCKGHI $.

    $( Alternate proof of ~ raleleq using ~ ralel , being longer and using more
       axioms.  (Contributed by AV, 30-Oct-2020.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    raleleqALT $p |- ( A = B -> A. x e. A x e. B ) $=
      ( wceq cv wcel wral ralel id raleqdv mpbiri ) BCDZAECFZABGMACGACHLMABCLIJ
      K $.
  $}

  $( Unrestricted "at most one" implies restricted "at most one".  (Contributed
     by NM, 16-Jun-2017.) $)
  mormo $p |- ( E* x ph -> E* x e. A ph ) $=
    ( wmo cv wcel wa wrmo moan df-rmo sylibr ) ABDBECFZAGBDABCHALBIABCJK $.

  $( Restricted uniqueness in terms of "at most one."  (Contributed by NM,
     23-May-1999.)  (Revised by NM, 16-Jun-2017.) $)
  reu5 $p |- ( E! x e. A ph <-> ( E. x e. A ph /\ E* x e. A ph ) ) $=
    ( cv wcel wa weu wex wmo wreu wrex wrmo df-eu df-reu df-rex anbi12i 3bitr4i
    df-rmo ) BDCEAFZBGSBHZSBIZFABCJABCKZABCLZFSBMABCNUBTUCUAABCOABCRPQ $.

  $( Restricted unique existence implies restricted existence.  (Contributed by
     NM, 19-Aug-1999.) $)
  reurex $p |- ( E! x e. A ph -> E. x e. A ph ) $=
    ( wreu wrex wrmo reu5 simplbi ) ABCDABCEABCFABCGH $.

  $( Double restricted existential uniqueness, analogous to ~ 2eu2ex .
     (Contributed by Alexander van der Vekens, 25-Jun-2017.) $)
  2reu2rex $p |- ( E! x e. A E! y e. B ph -> E. x e. A E. y e. B ph ) $=
    ( wreu wrex reurex reximi syl ) ACEFZBDFKBDGACEGZBDGKBDHKLBDACEHIJ $.

  $( Restricted existential uniqueness implies restricted "at most one."
     (Contributed by NM, 16-Jun-2017.) $)
  reurmo $p |- ( E! x e. A ph -> E* x e. A ph ) $=
    ( wreu wrex wrmo reu5 simprbi ) ABCDABCEABCFABCGH $.

  $( Restricted "at most one" in term of uniqueness.  (Contributed by NM,
     16-Jun-2017.) $)
  rmo5 $p |- ( E* x e. A ph <-> ( E. x e. A ph -> E! x e. A ph ) ) $=
    ( cv wcel wa wmo wex wi wrmo wrex wreu df-rmo df-rex df-reu imbi12i 3bitr4i
    weu moeu ) BDCEAFZBGTBHZTBRZIABCJABCKZABCLZITBSABCMUCUAUDUBABCNABCOPQ $.

  $( Nonexistence implies restricted "at most one".  (Contributed by NM,
     17-Jun-2017.) $)
  nrexrmo $p |- ( -. E. x e. A ph -> E* x e. A ph ) $=
    ( wrex wn wreu wi wrmo pm2.21 rmo5 sylibr ) ABCDZELABCFZGABCHLMIABCJK $.

  ${
    $d ph x $.
    reueubd.1 $e |- ( ( ph /\ ps ) -> x e. V ) $.
    $( Restricted existential uniqueness is equivalent to existential
       uniqueness if the unique element is in the restricting class.
       (Contributed by AV, 4-Jan-2021.) $)
    reueubd $p |- ( ph -> ( E! x e. V ps <-> E! x ps ) ) $=
      ( weu cv wcel wa wreu ex pm4.71rd eubidv df-reu syl6rbbr ) ABCFCGDHZBIZCF
      BCDJABQCABPABPEKLMBCDNO $.
  $}

  ${
    $d x z $.  $d y z $.  $d z A $.  $d z ps $.  $d z ph $.
    cbvralf.1 $e |- F/_ x A $.
    cbvralf.2 $e |- F/_ y A $.
    cbvralf.3 $e |- F/ y ph $.
    cbvralf.4 $e |- F/ x ps $.
    cbvralf.5 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Rule used to change bound variables, using implicit substitution.
       (Contributed by NM, 7-Mar-2004.)  (Revised by Mario Carneiro,
       9-Oct-2016.) $)
    cbvralf $p |- ( A. x e. A ph <-> A. y e. A ps ) $=
      ( vz cv wcel wi wal wral wsb nfv nfcri nfim nfs1v sbequ12 imbi12d cbvalv1
      weq eleq1w nfsb sbequ sbie syl6bb bitri df-ral 3bitr4i ) CLEMZANZCOZDLEMZ
      BNZDOZACEPBDEPUPKLEMZACKQZNZKOUSUOVBCKUOKRUTVACCKEFSACKUATCKUEUNUTAVACKEU
      FACKUBUCUDVBURKDUTVADDKEGSACKDHUGTURKRKDUEZUTUQVABKDEUFVCVAACDQBAKDCUHABC
      DIJUIUJUCUDUKACEULBDEULUM $.

    $( Rule used to change bound variables, using implicit substitution.
       (Contributed by FL, 27-Apr-2008.)  (Revised by Mario Carneiro,
       9-Oct-2016.) $)
    cbvrexf $p |- ( E. x e. A ph <-> E. y e. A ps ) $=
      ( wn wral wrex nfn weq notbid cbvralf notbii dfrex2 3bitr4i ) AKZCELZKBKZ
      DELZKACEMBDEMUBUDUAUCCDEFGADHNBCINCDOABJPQRACESBDEST $.
  $}

  ${
    $d x z A $.  $d y z A $.  $d z ph $.  $d z ps $.
    cbvral.1 $e |- F/ y ph $.
    cbvral.2 $e |- F/ x ps $.
    cbvral.3 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Rule used to change bound variables, using implicit substitution.
       (Contributed by NM, 31-Jul-2003.) $)
    cbvral $p |- ( A. x e. A ph <-> A. y e. A ps ) $=
      ( nfcv cbvralf ) ABCDECEIDEIFGHJ $.

    $( Rule used to change bound variables, using implicit substitution.
       (Contributed by NM, 31-Jul-2003.)  (Proof shortened by Andrew Salmon,
       8-Jun-2011.) $)
    cbvrex $p |- ( E. x e. A ph <-> E. y e. A ps ) $=
      ( nfcv cbvrexf ) ABCDECEIDEIFGHJ $.

    $( Change the bound variable of a restricted unique existential quantifier
       using implicit substitution.  (Contributed by Mario Carneiro,
       15-Oct-2016.) $)
    cbvreu $p |- ( E! x e. A ph <-> E! y e. A ps ) $=
      ( vz cv wcel wa weu wreu wsb nfv sb8eu sban eubii df-reu anbi1i nfsb nfan
      clelsb3 weq eleq1w sbequ sbie syl6bb anbi12d cbveu bitri 3bitri 3bitr4i )
      CJEKZALZCMZDJEKZBLZDMZACENBDENUQUPCIOZIMUOCIOZACIOZLZIMZUTUPCIUPIPQVAVDIU
      OACIRSVEIJEKZVCLZIMUTVDVGIVBVFVCICEUDUASVGUSIDVFVCDVFDPACIDFUBUCUSIPIDUEZ
      VFURVCBIDEUFVHVCACDOBAIDCUGABCDGHUHUIUJUKULUMACETBDETUN $.

    $( Change the bound variable of a restricted at-most-one quantifier using
       implicit substitution.  (Contributed by NM, 16-Jun-2017.) $)
    cbvrmo $p |- ( E* x e. A ph <-> E* y e. A ps ) $=
      ( wrex wreu wi wrmo cbvrex cbvreu imbi12i rmo5 3bitr4i ) ACEIZACEJZKBDEIZ
      BDEJZKACELBDELRTSUAABCDEFGHMABCDEFGHNOACEPBDEPQ $.
  $}

  ${
    $d x A $.  $d y A $.  $d y ph $.  $d x ps $.
    cbvralv.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Change the bound variable of a restricted universal quantifier using
       implicit substitution.  (Contributed by NM, 28-Jan-1997.) $)
    cbvralv $p |- ( A. x e. A ph <-> A. y e. A ps ) $=
      ( nfv cbvral ) ABCDEADGBCGFH $.

    $( Change the bound variable of a restricted existential quantifier using
       implicit substitution.  (Contributed by NM, 2-Jun-1998.) $)
    cbvrexv $p |- ( E. x e. A ph <-> E. y e. A ps ) $=
      ( nfv cbvrex ) ABCDEADGBCGFH $.

    $( Change the bound variable of a restricted unique existential quantifier
       using implicit substitution.  (Contributed by NM, 5-Apr-2004.)  (Revised
       by Mario Carneiro, 15-Oct-2016.) $)
    cbvreuv $p |- ( E! x e. A ph <-> E! y e. A ps ) $=
      ( nfv cbvreu ) ABCDEADGBCGFH $.

    $( Change the bound variable of a restricted at-most-one quantifier using
       implicit substitution.  (Contributed by Alexander van der Vekens,
       17-Jun-2017.) $)
    cbvrmov $p |- ( E* x e. A ph <-> E* y e. A ps ) $=
      ( nfv cbvrmo ) ABCDEADGBCGFH $.
  $}

  ${
    $d A y $.  $d ps y $.  $d B x $.  $d ch x $.  $d x ph y $.
    cbvraldva2.1 $e |- ( ( ph /\ x = y ) -> ( ps <-> ch ) ) $.
    cbvraldva2.2 $e |- ( ( ph /\ x = y ) -> A = B ) $.
    $( Rule used to change the bound variable in a restricted universal
       quantifier with implicit substitution which also changes the quantifier
       domain.  Deduction form.  (Contributed by David Moews, 1-May-2017.) $)
    cbvraldva2 $p |- ( ph -> ( A. x e. A ps <-> A. y e. B ch ) ) $=
      ( cv wcel wi wal wral weq wb wa simpr 19.21v df-ral eleq12d pm5.74ri
      imbi12d expcom pm5.74d cbvalvw 3bitr3i 3bitr4g ) ADJZFKZBLZDMZEJZGKZCLZEM
      ZBDFNCEGNAULUPAUKLZDMAUOLZEMAULLAUPLUQURDEDEOZAUKUOAUSUKUOPAUSQZUJUNBCUTU
      IUMFGAUSRIUAHUCUDUEUFAUKDSAUOESUGUBBDFTCEGTUH $.

    $( Rule used to change the bound variable in a restricted existential
       quantifier with implicit substitution which also changes the quantifier
       domain.  Deduction form.  (Contributed by David Moews, 1-May-2017.)
       (Proof shortened by Wolf Lammen, 12-Aug-2023.) $)
    cbvrexdva2 $p |- ( ph -> ( E. x e. A ps <-> E. y e. B ch ) ) $=
      ( cv wcel wa wex wrex wb wi weq simpr 19.42v df-rex eleq12d ancoms pm5.32
      anbi12d pm5.32da cbvexvw 3bitr3i mpbir 3bitr4g ) ADJZFKZBLZDMZEJZGKZCLZEM
      ZBDFNCEGNAUMUQOPAUMLZAUQLZOAULLZDMAUPLZEMURUSUTVADEDEQZAULUPAVBULUPOAVBLZ
      UKUOBCVCUJUNFGAVBRIUAHUDUBUEUFAULDSAUPESUGAUMUQUCUHBDFTCEGTUI $.

    $( Obsolete version of ~ cbvrexdva as of 12-Aug-2023.  (Contributed by
       David Moews, 1-May-2017.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    cbvrexdva2OLD $p |- ( ph -> ( E. x e. A ps <-> E. y e. B ch ) ) $=
      ( cv wcel wa wex wrex wn wal wi 19.21v alnex df-rex simpr eleq12d anbi12d
      wb notbid expcom pm5.74d cbvalvw 3bitr3i pm5.74ri 3bitr3g con4bid 3bitr4g
      weq ) ADJZFKZBLZDMZEJZGKZCLZEMZBDFNCEGNAURVBAUQOZDPZVAOZEPZUROVBOAVDVFAVC
      QZDPAVEQZEPAVDQAVFQVGVHDEDEUNZAVCVEAVIVCVEUDAVILZUQVAVJUPUTBCVJUOUSFGAVIU
      AIUBHUCUEUFUGUHAVCDRAVEERUIUJUQDSVAESUKULBDFTCEGTUM $.
  $}

  ${
    $d ps y $.  $d ch x $.  $d A x y $.  $d x ph y $.
    cbvraldva.1 $e |- ( ( ph /\ x = y ) -> ( ps <-> ch ) ) $.
    $( Rule used to change the bound variable in a restricted universal
       quantifier with implicit substitution.  Deduction form.  (Contributed by
       David Moews, 1-May-2017.) $)
    cbvraldva $p |- ( ph -> ( A. x e. A ps <-> A. y e. A ch ) ) $=
      ( weq wa eqidd cbvraldva2 ) ABCDEFFGADEHIFJK $.

    $( Rule used to change the bound variable in a restricted existential
       quantifier with implicit substitution.  Deduction form.  (Contributed by
       David Moews, 1-May-2017.) $)
    cbvrexdva $p |- ( ph -> ( E. x e. A ps <-> E. y e. A ch ) ) $=
      ( weq wa eqidd cbvrexdva2 ) ABCDEFFGADEHIFJK $.
  $}

  ${
    $d x A $.  $d z A $.  $d x y B $.  $d z y B $.  $d w B $.  $d z ph $.
    $d y ps $.  $d x ch $.  $d w ch $.
    cbvral2v.1 $e |- ( x = z -> ( ph <-> ch ) ) $.
    cbvral2v.2 $e |- ( y = w -> ( ch <-> ps ) ) $.
    $( Change bound variables of double restricted universal quantification,
       using implicit substitution.  (Contributed by NM, 10-Aug-2004.) $)
    cbvral2v $p |- ( A. x e. A A. y e. B ph <-> A. z e. A A. w e. B ps ) $=
      ( wral weq ralbidv cbvralv ralbii bitri ) AEILZDHLCEILZFHLBGILZFHLRSDFHDF
      MACEIJNOSTFHCBEGIKOPQ $.
  $}

  ${
    $d A x $.  $d A z $.  $d B w $.  $d B x y $.  $d B z y $.  $d ch w $.
    $d ch x $.  $d ph z $.  $d ps y $.
    cbvrex2v.1 $e |- ( x = z -> ( ph <-> ch ) ) $.
    cbvrex2v.2 $e |- ( y = w -> ( ch <-> ps ) ) $.
    $( Change bound variables of double restricted universal quantification,
       using implicit substitution.  (Contributed by FL, 2-Jul-2012.) $)
    cbvrex2v $p |- ( E. x e. A E. y e. B ph <-> E. z e. A E. w e. B ps ) $=
      ( wrex weq rexbidv cbvrexv rexbii bitri ) AEILZDHLCEILZFHLBGILZFHLRSDFHDF
      MACEIJNOSTFHCBEGIKOPQ $.
  $}

  ${
    $d w ph $.  $d z ps $.  $d x ch $.  $d v ch $.  $d y u th $.  $d x A $.
    $d w A $.  $d x y B $.  $d w y B $.  $d v B $.  $d x y z C $.
    $d w y z C $.  $d v z C $.  $d z y C $.  $d z C $.  $d u C $.
    cbvral3v.1 $e |- ( x = w -> ( ph <-> ch ) ) $.
    cbvral3v.2 $e |- ( y = v -> ( ch <-> th ) ) $.
    cbvral3v.3 $e |- ( z = u -> ( th <-> ps ) ) $.
    $( Change bound variables of triple restricted universal quantification,
       using implicit substitution.  (Contributed by NM, 10-May-2005.) $)
    cbvral3v $p |- ( A. x e. A A. y e. B A. z e. C ph <->
                     A. w e. A A. v e. B A. u e. C ps ) $=
      ( wral weq 2ralbidv cbvralv cbvral2v ralbii bitri ) AGMQFLQZEKQCGMQFLQZHK
      QBJMQILQZHKQUDUEEHKEHRACFGLMNSTUEUFHKCBDFGIJLMOPUAUBUC $.
  $}

  ${
    $d z x A $.  $d y A $.  $d z y ph $.
    $( Change bound variable by using a substitution.  (Contributed by NM,
       20-Nov-2005.)  (Revised by Andrew Salmon, 11-Jul-2011.) $)
    cbvralsv $p |- ( A. x e. A ph <-> A. y e. A [ y / x ] ph ) $=
      ( vz wral wsb nfv nfs1v sbequ12 cbvral nfsb sbequ bitri ) ABDFABEGZEDFABC
      GZCDFAOBEDAEHABEIABEJKOPECDABECACHLPEHAECBMKN $.
  $}

  ${
    $d z x A $.  $d y z ph $.  $d y A $.
    $( Change bound variable by using a substitution.  (Contributed by NM,
       2-Mar-2008.)  (Revised by Andrew Salmon, 11-Jul-2011.) $)
    cbvrexsv $p |- ( E. x e. A ph <-> E. y e. A [ y / x ] ph ) $=
      ( vz wrex wsb nfv nfs1v sbequ12 cbvrex nfsb sbequ bitri ) ABDFABEGZEDFABC
      GZCDFAOBEDAEHABEIABEJKOPECDABECACHLPEHAECBMKN $.
  $}

  ${
    $d x y z $.  $d y z ph $.  $d x z ps $.
    sbralie.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Implicit to explicit substitution that swaps variables in a quantified
       expression.  (Contributed by NM, 5-Sep-2004.) $)
    sbralie $p |- ( [ x / y ] A. x e. y ph <-> A. y e. x ps ) $=
      ( vz cv wral wsb cbvralsv sbbii nfv raleq sbie bitri sbco2 ralbii ) ACDGZ
      HZDCIZACFIZFCGZHZBDUBHZTUAFRHZDCIUCSUEDCACFRJKUEUCDCUCDLUAFRUBMNOUCUAFDIZ
      DUBHUDUAFDUBJUFBDUBUFACDIBACDFAFLPABCDBCLENOQOO $.
  $}

  ${
    rabbiia.1 $e |- ( x e. A -> ( ph <-> ps ) ) $.
    $( Equivalent wff's yield equal restricted class abstractions (inference
       form).  (Contributed by NM, 22-May-1999.) $)
    rabbiia $p |- { x e. A | ph } = { x e. A | ps } $=
      ( cv wcel wa cab crab pm5.32i abbii df-rab 3eqtr4i ) CFDGZAHZCIOBHZCIACDJ
      BCDJPQCOABEKLACDMBCDMN $.
  $}

  ${
    rabbii.1 $e |- ( ph <-> ps ) $.
    $( Equivalent wff's correspond to equal restricted class abstractions.
       Inference form of ~ rabbidv .  (Contributed by Peter Mazsa,
       1-Nov-2019.) $)
    rabbii $p |- { x e. A | ph } = { x e. A | ps } $=
      ( wb cv wcel a1i rabbiia ) ABCDABFCGDHEIJ $.
  $}

  ${
    $d x ph $.
    rabbidva2.1 $e |- ( ph -> ( ( x e. A /\ ps ) <-> ( x e. B /\ ch ) ) ) $.
    $( Equivalent wff's yield equal restricted class abstractions.
       (Contributed by Thierry Arnoux, 4-Feb-2017.) $)
    rabbidva2 $p |- ( ph -> { x e. A | ps } = { x e. B | ch } ) $=
      ( cv wcel wa cab crab abbidv df-rab 3eqtr4g ) ADHZEIBJZDKPFICJZDKBDELCDFL
      AQRDGMBDENCDFNO $.
  $}

  ${
    rabbia2.1 $e |- ( ( x e. A /\ ps ) <-> ( x e. B /\ ch ) ) $.
    $( Equivalent wff's yield equal restricted class abstractions.
       (Contributed by Glauco Siliprandi, 26-Jun-2021.) $)
    rabbia2 $p |- { x e. A | ps } = { x e. B | ch } $=
      ( crab wceq wtru cv wcel wa wb a1i rabbidva2 mptru ) ACDGBCEGHIABCDECJZDK
      ALQEKBLMIFNOP $.
  $}

  ${
    $d x ph $.
    rabbidva.1 $e |- ( ( ph /\ x e. A ) -> ( ps <-> ch ) ) $.
    $( Equivalent wff's yield equal restricted class abstractions (deduction
       form).  (Contributed by NM, 28-Nov-2003.) $)
    rabbidva $p |- ( ph -> { x e. A | ps } = { x e. A | ch } ) $=
      ( wb wral crab wceq ralrimiva rabbi sylib ) ABCGZDEHBDEICDEIJANDEFKBCDELM
      $.
  $}

  ${
    $d x ph $.
    rabbidv.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Equivalent wff's yield equal restricted class abstractions (deduction
       form).  (Contributed by NM, 10-Feb-1995.) $)
    rabbidv $p |- ( ph -> { x e. A | ps } = { x e. A | ch } ) $=
      ( wb cv wcel adantr rabbidva ) ABCDEABCGDHEIFJK $.
  $}

  ${
    rabeqf.1 $e |- F/_ x A $.
    rabeqf.2 $e |- F/_ x B $.
    $( Equality theorem for restricted class abstractions, with bound-variable
       hypotheses instead of distinct variable restrictions.  (Contributed by
       NM, 7-Mar-2004.) $)
    rabeqf $p |- ( A = B -> { x e. A | ph } = { x e. B | ph } ) $=
      ( wceq cv wcel wa cab crab nfeq eleq2 anbi1d abbid df-rab 3eqtr4g ) CDGZB
      HZCIZAJZBKTDIZAJZBKABCLABDLSUBUDBBCDEFMSUAUCACDTNOPABCQABDQR $.

    rabeqif.3 $e |- A = B $.
    $( Equality theorem for restricted class abstractions.  Inference form of
       ~ rabeqf .  (Contributed by Glauco Siliprandi, 26-Jun-2021.) $)
    rabeqif $p |- { x e. A | ph } = { x e. B | ph } $=
      ( wceq crab rabeqf ax-mp ) CDHABCIABDIHGABCDEFJK $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Equality theorem for restricted class abstractions.  (Contributed by NM,
       15-Oct-2003.) $)
    rabeq $p |- ( A = B -> { x e. A | ph } = { x e. B | ph } ) $=
      ( nfcv rabeqf ) ABCDBCEBDEF $.

    ${
      rabeqi.1 $e |- A = B $.
      $( Equality theorem for restricted class abstractions.  Inference form of
         ~ rabeq .  (Contributed by Glauco Siliprandi, 26-Jun-2021.) $)
      rabeqi $p |- { x e. A | ph } = { x e. B | ph } $=
        ( nfcv rabeqif ) ABCDBCFBDFEG $.
    $}

    rabeqdv.1 $e |- ( ph -> A = B ) $.
    $( Equality of restricted class abstractions.  Deduction form of ~ rabeq .
       (Contributed by Glauco Siliprandi, 5-Apr-2020.) $)
    rabeqdv $p |- ( ph -> { x e. A | ps } = { x e. B | ps } ) $=
      ( wceq crab rabeq syl ) ADEGBCDHBCEHGFBCDEIJ $.
  $}

  ${
    $d A x $.  $d B x $.  $d ph x $.
    rabeqbidv.1 $e |- ( ph -> A = B ) $.
    rabeqbidv.2 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Equality of restricted class abstractions.  (Contributed by Jeff Madsen,
       1-Dec-2009.) $)
    rabeqbidv $p |- ( ph -> { x e. A | ps } = { x e. B | ch } ) $=
      ( crab rabeqdv rabbidv eqtrd ) ABDEIBDFICDFIABDEFGJABCDFHKL $.
  $}

  ${
    $d A x $.  $d B x $.  $d ph x $.
    rabeqbidva.1 $e |- ( ph -> A = B ) $.
    rabeqbidva.2 $e |- ( ( ph /\ x e. A ) -> ( ps <-> ch ) ) $.
    $( Equality of restricted class abstractions.  (Contributed by Mario
       Carneiro, 26-Jan-2017.) $)
    rabeqbidva $p |- ( ph -> { x e. A | ps } = { x e. B | ch } ) $=
      ( crab rabbidva rabeqdv eqtrd ) ABDEICDEICDFIABCDEHJACDEFGKL $.
  $}

  ${
    rabeq2i.1 $e |- A = { x e. B | ph } $.
    $( Inference from equality of a class variable and a restricted class
       abstraction.  (Contributed by NM, 16-Feb-2004.) $)
    rabeq2i $p |- ( x e. A <-> ( x e. B /\ ph ) ) $=
      ( cv wcel crab wa eleq2i rabid bitri ) BFZCGMABDHZGMDGAICNMEJABDKL $.
  $}

  ${
    $d x z $.  $d y z $.  $d A z $.  $d ph z $.  $d ps z $.
    cbvrab.1 $e |- F/_ x A $.
    cbvrab.2 $e |- F/_ y A $.
    cbvrab.3 $e |- F/ y ph $.
    cbvrab.4 $e |- F/ x ps $.
    cbvrab.5 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Rule to change the bound variable in a restricted class abstraction,
       using implicit substitution.  This version has bound-variable hypotheses
       in place of distinct variable conditions.  (Contributed by Andrew
       Salmon, 11-Jul-2011.)  (Revised by Mario Carneiro, 9-Oct-2016.) $)
    cbvrab $p |- { x e. A | ph } = { y e. A | ps } $=
      ( vz cv wcel wa cab crab wsb nfv nfcri nfan nfs1v weq eleq1w sbequ12 nfsb
      anbi12d cbvab sbequ sbie syl6bb eqtri df-rab 3eqtr4i ) CLEMZANZCOZDLEMZBN
      ZDOZACEPBDEPUPKLEMZACKQZNZKOUSUOVBCKUOKRUTVACCKEFSACKUATCKUBUNUTAVACKEUCA
      CKUDUFUGVBURKDUTVADDKEGSACKDHUETURKRKDUBZUTUQVABKDEUCVCVAACDQBAKDCUHABCDI
      JUIUJUFUGUKACEULBDEULUM $.
  $}

  ${
    $d x y A $.  $d y ph $.  $d x ps $.
    cbvrabv.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Rule to change the bound variable in a restricted class abstraction,
       using implicit substitution.  (Contributed by NM, 26-May-1999.)  Require
       ` x ` , ` y ` be disjoint to avoid ~ ax-11 and ~ ax-13 .  (Revised by
       Steven Nguyen, 4-Dec-2022.) $)
    cbvrabv $p |- { x e. A | ph } = { y e. A | ps } $=
      ( cv wcel wa cab crab weq eleq1w anbi12d cbvabv df-rab 3eqtr4i ) CGEHZAIZ
      CJDGEHZBIZDJACEKBDEKSUACDCDLRTABCDEMFNOACEPBDEPQ $.
  $}

  ${
    $d x A $.  $d y A $.  $d y ph $.  $d x ps $.
    cbvrabvOLD.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Obsolete version of ~ cbvrabv as of 14-Jun-2023.  Rule to change the
       bound variable in a restricted class abstraction, using implicit
       substitution.  (Contributed by NM, 26-May-1999.)
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    cbvrabvOLD $p |- { x e. A | ph } = { y e. A | ps } $=
      ( nfcv nfv cbvrab ) ABCDECEGDEGADHBCHFI $.
  $}

  ${
    $d A x y $.  $d ph x $.  $d ch y $.
    rabrabi.1 $e |- ( x = y -> ( ch <-> ph ) ) $.
    $( Abstract builder restricted to another restricted abstract builder with
       implicit substitution.  (Contributed by AV, 2-Aug-2022.) $)
    rabrabi $p |- { x e. { y e. A | ph } | ps } = { x e. A | ( ch /\ ps ) } $=
      ( crab wa nfcv nfrab1 wb weq bicomd equcoms cbvrabv rabeqif rabrab eqtri
      ) BDAEFHZHBDCDFHZHCBIDFHBDTUADTJCDFKACEDFACLDEDEMCAGNOPQCBDFRS $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  The universal class
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Declare the symbol for the universal class. $)
  $c _V $.  $( Upright uppercase letter V (for the universal class) $)

  $( Extend class notation to include the universal class symbol. $)
  cvv $a class _V $.

  ${
    $d z x $.  $d z y $.
    $( Soundness justification theorem for ~ df-v .  (Contributed by Rodolfo
       Medina, 27-Apr-2010.) $)
    vjust $p |- { x | x = x } = { y | y = y } $=
      ( vz weq cab wsb cv wcel equid sbt 2th df-clab 3bitr4i eqriv ) CAADZAEZBB
      DZBEZOACFZQBCFZCGZPHUARHSTOACAIJQBCBIJKOCALQCBLMN $.
  $}

  $( Define the universal class.  Definition 5.20 of [TakeutiZaring] p. 21.
     Also Definition 2.9 of [Quine] p. 19.  The class ` _V ` can be described
     as the "class of all sets"; ~ vprc proves that ` _V ` is not itself a set
     in ZFC. We will frequently use the expression ` A e. _V ` as a short way
     to say " ` A ` is a set", and ~ isset proves that this expression has the
     same meaning as ` E. x x = A ` .  The class ` _V ` is called the "von
     Neumann universe", however, the letter "V" is not a tribute to the name of
     von Neumann.  The letter "V" was used earlier by Peano in 1889 for the
     universe of sets, where the letter V is derived from the word "Verum".
     Peano's notation V was adopted by Whitehead and Russell in Principia
     Mathematica for the class of all sets in 1910.  For a general discussion
     of the theory of classes, see ~ mmset.html#class .  (Contributed by NM,
     26-May-1993.) $)
  df-v $a |- _V = { x | x = x } $.

  $( All setvar variables are sets (see ~ isset ).  Theorem 6.8 of [Quine]
     p. 43.  (Contributed by NM, 26-May-1993.) $)
  vex $p |- x e. _V $=
    ( cv cvv wcel weq equid df-v abeq2i mpbir ) ABCDAAEZAFJACAGHI $.

  ${
    elv.1 $e |- ( x e. _V -> ph ) $.
    $( If a proposition is implied by ` x e. _V ` (which is true, see ~ vex ),
       then it is true.  (Contributed by Peter Mazsa, 13-Oct-2018.) $)
    elv $p |- ph $=
      ( cv cvv wcel vex ax-mp ) BDEFABGCH $.
  $}

  ${
    elvd.1 $e |- ( ( ph /\ x e. _V ) -> ps ) $.
    $( If a proposition is implied by ` x e. _V ` (which is true, see ~ vex )
       and another antecedent, then it is implied by that other antecedent.
       Deduction associated with ~ elv .  (Contributed by Peter Mazsa,
       23-Oct-2018.) $)
    elvd $p |- ( ph -> ps ) $=
      ( cv cvv wcel vex mpan2 ) ACEFGBCHDI $.
  $}

  ${
    el2v.1 $e |- ( ( x e. _V /\ y e. _V ) -> ph ) $.
    $( If a proposition is implied by ` x e. _V ` and ` y e. _V ` (which is
       true, see ~ vex ), then it is true.  (Contributed by Peter Mazsa,
       13-Oct-2018.) $)
    el2v $p |- ph $=
      ( cv cvv wcel vex mp2an ) BEFGCEFGABHCHDI $.
  $}

  ${
    $d x A $.
    $( The universe contains every set.  (Contributed by NM, 11-Sep-2006.)
       Remove dependency on ~ ax-10 , ~ ax-11 , ~ ax-13 .  (Revised by BJ,
       10-Aug-2022.) $)
    eqv $p |- ( A = _V <-> A. x x e. A ) $=
      ( cvv wceq cv wcel wb wal dfcleq vex tbt albii bitr4i ) BCDAEZBFZNCFZGZAH
      OAHABCIOQAPOAJKLM $.
  $}

  ${
    eqvf.1 $e |- F/_ x A $.
    $( The universe contains every set.  (Contributed by BJ, 15-Jul-2021.) $)
    eqvf $p |- ( A = _V <-> A. x x e. A ) $=
      ( cvv wceq cv wcel wb wal nfcv cleqf vex tbt albii bitr4i ) BDEAFZBGZPDGZ
      HZAIQAIABDCADJKQSARQALMNO $.
  $}

  ${
    $d y x $.  $d y ph $.
    $( The class of sets verifying a property is the universal class if and
       only if that property is a tautology.  The reverse implication
       ( ~ bj-abv ) requires fewer axioms.  (Contributed by BJ,
       19-Mar-2021.) $)
    abv $p |- ( { x | ph } = _V <-> A. x ph ) $=
      ( vy cv cab wcel wal wsb cvv wceq df-clab albii eqv nfv sb8v 3bitr4i ) CD
      ABEZFZCGABCHZCGQIJABGRSCACBKLCQMABCACNOP $.
  $}

  ${
    $d x A $.
    $( Two ways to say " ` A ` is a set":  A class ` A ` is a member of the
       universal class ` _V ` (see ~ df-v ) if and only if the class ` A `
       exists (i.e. there exists some set ` x ` equal to class ` A ` ).
       Theorem 6.9 of [Quine] p. 43. _Notational convention_:  We will use the
       notational device " ` A e. _V ` " to mean " ` A ` is a set" very
       frequently, for example in ~ uniex .  Note that a class ` A ` which is
       not a set is called a _proper class_.  In some theorems, such as
       ~ uniexg , in order to shorten certain proofs we use the more general
       antecedent ` A e. V ` instead of ` A e. _V ` to mean " ` A ` is a set."

       Note that a constant is implicitly considered distinct from all
       variables.  This is why ` _V ` is not included in the distinct variable
       list, even though ~ df-clel requires that the expression substituted for
       ` B ` not contain ` x ` .  (Also, the Metamath spec does not allow
       constants in the distinct variable list.)  (Contributed by NM,
       26-May-1993.) $)
    isset $p |- ( A e. _V <-> E. x x = A ) $=
      ( cvv wcel cv wceq wa wex df-clel vex biantru exbii bitr4i ) BCDAEZBFZNCD
      ZGZAHOAHABCIOQAPOAJKLM $.
  $}

  ${
    $d A y $.  $d x y $.
    issetf.1 $e |- F/_ x A $.
    $( A version of ~ isset that does not require ` x ` and ` A ` to be
       distinct.  (Contributed by Andrew Salmon, 6-Jun-2011.)  (Revised by
       Mario Carneiro, 10-Oct-2016.) $)
    issetf $p |- ( A e. _V <-> E. x x = A ) $=
      ( vy cvv wcel cv wceq wex isset nfeq2 nfv eqeq1 cbvexv1 bitri ) BEFDGZBHZ
      DIAGZBHZAIDBJQSDAAPBCKSDLPRBMNO $.
  $}

  ${
    $d x A $.
    isseti.1 $e |- A e. _V $.
    $( A way to say " ` A ` is a set" (inference form).  (Contributed by NM,
       24-Jun-1993.) $)
    isseti $p |- E. x x = A $=
      ( cvv wcel cv wceq wex isset mpbi ) BDEAFBGAHCABIJ $.
  $}

  ${
    $d x A $.
    issetri.1 $e |- E. x x = A $.
    $( A way to say " ` A ` is a set" (inference form).  (Contributed by NM,
       21-Jun-1993.) $)
    issetri $p |- A e. _V $=
      ( cvv wcel cv wceq wex isset mpbir ) BDEAFBGAHCABIJ $.
  $}

  $( A class equal to a variable is a set.  Note the absence of disjoint
     variable condition, contrary to ~ isset and ~ issetri .  (Contributed by
     BJ, 27-Apr-2019.) $)
  eqvisset $p |- ( x = A -> A e. _V ) $=
    ( cv wceq cvv wcel vex eleq1 mpbii ) ACZBDJEFBEFAGJBEHI $.

  ${
    $d x A $.  $d x B $.
    $( If a class is a member of another class, then it is a set.  Theorem 6.12
       of [Quine] p. 44.  (Contributed by NM, 26-May-1993.)  (Proof shortened
       by Andrew Salmon, 8-Jun-2011.) $)
    elex $p |- ( A e. B -> A e. _V ) $=
      ( vx cv wceq wcel wa wex cvv exsimpl df-clel isset 3imtr4i ) CDZAEZNBFZGC
      HOCHABFAIFOPCJCABKCALM $.
  $}

  ${
    elexi.1 $e |- A e. B $.
    $( If a class is a member of another class, then it is a set.  Inference
       associated with ~ elex .  (Contributed by NM, 11-Jun-1994.) $)
    elexi $p |- A e. _V $=
      ( wcel cvv elex ax-mp ) ABDAEDCABFG $.
  $}

  ${
    elexd.1 $e |- ( ph -> A e. V ) $.
    $( If a class is a member of another class, then it is a set.  Deduction
       associated with ~ elex .  (Contributed by Glauco Siliprandi,
       11-Oct-2020.) $)
    elexd $p |- ( ph -> A e. _V ) $=
      ( wcel cvv elex syl ) ABCEBFEDBCGH $.
  $}

  ${
    $d x A $.
    $( An element of a class exists.  (Contributed by NM, 1-May-1995.) $)
    elisset $p |- ( A e. V -> E. x x = A ) $=
      ( wcel cvv cv wceq wex elex isset sylib ) BCDBEDAFBGAHBCIABJK $.
  $}

  ${
    $d x A $.  $d x B $.
    $( If a class contains another class, then it contains some set.
       (Contributed by Alan Sare, 25-Sep-2011.) $)
    elex2 $p |- ( A e. B -> E. x x e. B ) $=
      ( wcel cv wceq wi wal wex eleq1a alrimiv elisset exim sylc ) BCDZAEZBFZPC
      DZGZAHQAIRAIOSABCPJKABCLQRAMN $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( If two classes each contain another class, then both contain some set.
       (Contributed by Alan Sare, 24-Oct-2011.) $)
    elex22 $p |- ( ( A e. B /\ A e. C ) -> E. x ( x e. B /\ x e. C ) ) $=
      ( wcel wa cv wceq wi wal eleq1a anim12ii alrimiv elisset adantr exim sylc
      wex ) BCEZBDEZFZAGZBHZUBCEZUBDEZFZIZAJUCARZUFARUAUGASUCUDTUEBCUBKBDUBKLMS
      UHTABCNOUCUFAPQ $.
  $}

  $( A proper class doesn't belong to any class.  (Contributed by Glauco
     Siliprandi, 17-Aug-2020.)  (Proof shortened by AV, 14-Nov-2020.) $)
  prcnel $p |- ( -. A e. _V -> -. A e. V ) $=
    ( wcel cvv elex con3i ) ABCADCABEF $.

  $( A universal quantifier restricted to the universe is unrestricted.
     (Contributed by NM, 26-Mar-2004.) $)
  ralv $p |- ( A. x e. _V ph <-> A. x ph ) $=
    ( cvv wral cv wcel wi wal df-ral vex a1bi albii bitr4i ) ABCDBECFZAGZBHABHA
    BCIAOBNABJKLM $.

  $( An existential quantifier restricted to the universe is unrestricted.
     (Contributed by NM, 26-Mar-2004.) $)
  rexv $p |- ( E. x e. _V ph <-> E. x ph ) $=
    ( cvv wrex cv wcel wa wex df-rex vex biantrur exbii bitr4i ) ABCDBECFZAGZBH
    ABHABCIAOBNABJKLM $.

  $( A unique existential quantifier restricted to the universe is
     unrestricted.  (Contributed by NM, 1-Nov-2010.) $)
  reuv $p |- ( E! x e. _V ph <-> E! x ph ) $=
    ( cvv wreu cv wcel wa weu df-reu vex biantrur eubii bitr4i ) ABCDBECFZAGZBH
    ABHABCIAOBNABJKLM $.

  $( An at-most-one quantifier restricted to the universe is unrestricted.
     (Contributed by Alexander van der Vekens, 17-Jun-2017.) $)
  rmov $p |- ( E* x e. _V ph <-> E* x ph ) $=
    ( cvv wrmo cv wcel wa wmo df-rmo vex biantrur mobii bitr4i ) ABCDBECFZAGZBH
    ABHABCIAOBNABJKLM $.

  $( A class abstraction restricted to the universe is unrestricted.
     (Contributed by NM, 27-Dec-2004.)  (Proof shortened by Andrew Salmon,
     8-Jun-2011.) $)
  rabab $p |- { x e. _V | ph } = { x | ph } $=
    ( cvv crab cv wcel wa cab df-rab vex biantrur abbii eqtr4i ) ABCDBECFZAGZBH
    ABHABCIAOBNABJKLM $.

  ${
    $d x y $.  $d y A $.
    $( Commutation of restricted and unrestricted universal quantifiers.
       (Contributed by NM, 26-Mar-2004.)  (Proof shortened by Andrew Salmon,
       8-Jun-2011.) $)
    ralcom4 $p |- ( A. x e. A A. y ph <-> A. y A. x e. A ph ) $=
      ( cvv wral wal ralcom ralv ralbii 3bitr3i ) ACEFZBDFABDFZCEFACGZBDFMCGABC
      DEHLNBDACIJMCIK $.

    $( Commutation of restricted and unrestricted existential quantifiers.
       (Contributed by NM, 12-Apr-2004.)  (Proof shortened by Andrew Salmon,
       8-Jun-2011.) $)
    rexcom4 $p |- ( E. x e. A E. y ph <-> E. y E. x e. A ph ) $=
      ( cvv wrex wex rexcom rexv rexbii 3bitr3i ) ACEFZBDFABDFZCEFACGZBDFMCGABC
      DEHLNBDACIJMCIK $.
  $}

  ${
    $d A x $.  $d x y $.  $d ph x $.
    $( Specialized existential commutation lemma.  (Contributed by Jeff Madsen,
       1-Jun-2011.) $)
    rexcom4a $p |- ( E. x E. y e. A ( ph /\ ps )
                          <-> E. y e. A ( ph /\ E. x ps ) ) $=
      ( wa wrex wex rexcom4 19.42v rexbii bitr3i ) ABFZDEGCHMCHZDEGABCHFZDEGMDC
      EINODEABCJKL $.

    $d B x $.
    rexcom4b.1 $e |- B e. _V $.
    $( Specialized existential commutation lemma.  (Contributed by Jeff Madsen,
       1-Jun-2011.) $)
    rexcom4b $p |- ( E. x E. y e. A ( ph /\ x = B ) <-> E. y e. A ph ) $=
      ( cv wceq wa wrex wex rexcom4a isseti biantru rexbii bitr4i ) ABGEHZICDJB
      KAQBKZIZCDJACDJAQBCDLASCDRABEFMNOP $.
  $}

  ${
    $d x A $.
    $( Closed theorem version of ~ ceqsalg .  (Contributed by NM, 28-Feb-2013.)
       (Revised by Mario Carneiro, 10-Oct-2016.) $)
    ceqsalt $p |- ( ( F/ x ps /\ A. x ( x = A -> ( ph <-> ps ) ) /\ A e. V )
         -> ( A. x ( x = A -> ph ) <-> ps ) ) $=
      ( wnf cv wceq wb wi wal wcel w3a elisset 3ad2ant3 biimp 3ad2ant2 3ad2ant1
      wex imim3i al2imi 19.23t sylibd biimpr imim2i com23 alimi 19.21t impbid
      mpid mpbid ) BCFZCGDHZABIZJZCKZDELZMZUMAJZCKZBURUTUMCSZBUQULVAUPCDENOURUT
      UMBJZCKZVABJZUPULUTVCJUQUOUSVBCUNABUMABPTUAQULUPVCVDIUQUMBCUBRUCUJURBUSJZ
      CKZBUTJZUPULVFUQUOVECUOUMBAUNBAJUMABUDUEUFUGQULUPVFVGIUQBUSCUHRUKUI $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Restricted quantifier version of ~ ceqsalt .  (Contributed by NM,
       28-Feb-2013.)  (Revised by Mario Carneiro, 10-Oct-2016.) $)
    ceqsralt $p |- ( ( F/ x ps
              /\ A. x ( x = A -> ( ph <-> ps ) ) /\ A e. B )
         -> ( A. x e. B ( x = A -> ph ) <-> ps ) ) $=
      ( wnf cv wceq wb wi wal wcel w3a wral df-ral eleq1 pm5.32ri imbi1i impexp
      wa 3bitr3i albii 19.21v 3bitri a1i biimt 3ad2ant3 ceqsalt 3bitr2d ) BCFZC
      GZDHZABIJCKZDELZMZULAJZCENZUNUPCKZJZURBUQUSIUOUQUKELZUPJZCKUNUPJZCKUSUPCE
      OVAVBCUTULTZAJUNULTZAJVAVBVCVDAULUTUNUKDEPQRUTULASUNULASUAUBUNUPCUCUDUEUN
      UJURUSIUMUNURUFUGABCDEUHUI $.
  $}

  ${
    $d x A $.
    ceqsalg.1 $e |- F/ x ps $.
    ceqsalg.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( A representation of explicit substitution of a class for a variable,
       inferred from an implicit substitution hypothesis.  For an alternate
       proof, see ~ ceqsalgALT .  (Contributed by NM, 29-Oct-2003.)  (Proof
       shortened by BJ, 29-Sep-2019.) $)
    ceqsalg $p |- ( A e. V -> ( A. x ( x = A -> ph ) <-> ps ) ) $=
      ( wnf cv wceq wb wi wal wcel ax-gen ceqsalt mp3an12 ) BCHCIDJZABKLZCMDENR
      ALCMBKFSCGOABCDEPQ $.

    $( Alternate proof of ~ ceqsalg , not using ~ ceqsalt .  (Contributed by
       NM, 29-Oct-2003.)  (Proof shortened by Andrew Salmon, 8-Jun-2011.)
       (Revised by BJ, 29-Sep-2019.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    ceqsalgALT $p |- ( A e. V -> ( A. x ( x = A -> ph ) <-> ps ) ) $=
      ( wcel cv wceq wi wal wex elisset nfa1 biimpd a2i sps exlimd syl5com
      biimprcd alrimi impbid1 ) DEHZCIDJZAKZCLZBUDUECMUGBCDENUGUEBCUFCOFUFUEBKC
      UEABUEABGPQRSTBUFCFUEABGUAUBUC $.
  $}

  ${
    $d x A $.
    ceqsal.1 $e |- F/ x ps $.
    ceqsal.2 $e |- A e. _V $.
    ceqsal.3 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( A representation of explicit substitution of a class for a variable,
       inferred from an implicit substitution hypothesis.  (Contributed by NM,
       18-Aug-1993.) $)
    ceqsal $p |- ( A. x ( x = A -> ph ) <-> ps ) $=
      ( cvv wcel cv wceq wi wal wb ceqsalg ax-mp ) DHICJDKALCMBNFABCDHEGOP $.
  $}

  ${
    $d x A $.  $d x ps $.
    ceqsalv.1 $e |- A e. _V $.
    ceqsalv.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( A representation of explicit substitution of a class for a variable,
       inferred from an implicit substitution hypothesis.  (Contributed by NM,
       18-Aug-1993.) $)
    ceqsalv $p |- ( A. x ( x = A -> ph ) <-> ps ) $=
      ( nfv ceqsal ) ABCDBCGEFH $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ps $.
    ceqsralv.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Restricted quantifier version of ~ ceqsalv .  (Contributed by NM,
       21-Jun-2013.) $)
    ceqsralv $p |- ( A e. B -> ( A. x e. B ( x = A -> ph ) <-> ps ) ) $=
      ( wnf cv wceq wb wi wal wcel wral nfv ax-gen ceqsralt mp3an12 ) BCGCHDIZA
      BJKZCLDEMSAKCENBJBCOTCFPABCDEQR $.
  $}

  ${
    $d x ps $.
    gencl.1 $e |- ( th <-> E. x ( ch /\ A = B ) ) $.
    gencl.2 $e |- ( A = B -> ( ph <-> ps ) ) $.
    gencl.3 $e |- ( ch -> ph ) $.
    $( Implicit substitution for class with embedded variable.  (Contributed by
       NM, 17-May-1996.) $)
    gencl $p |- ( th -> ps ) $=
      ( wceq wa wex syl5ib impcom exlimiv sylbi ) DCFGKZLZEMBHSBERCBCARBJINOPQ
      $.
  $}

  ${
    $d x y $.  $d x R $.  $d x ps $.  $d y C $.  $d y S $.  $d y ch $.
    2gencl.1 $e |- ( C e. S <-> E. x e. R A = C ) $.
    2gencl.2 $e |- ( D e. S <-> E. y e. R B = D ) $.
    2gencl.3 $e |- ( A = C -> ( ph <-> ps ) ) $.
    2gencl.4 $e |- ( B = D -> ( ps <-> ch ) ) $.
    2gencl.5 $e |- ( ( x e. R /\ y e. R ) -> ph ) $.
    $( Implicit substitution for class with embedded variable.  (Contributed by
       NM, 17-May-1996.) $)
    2gencl $p |- ( ( C e. S /\ D e. S ) -> ch ) $=
      ( wcel wi cv wceq wrex wa wex df-rex bitri imbi2d ex gencl com12 impcom )
      IKQZHKQZCULBRULCRESJQZUKEGIUKGITZEJUAUMUNUBEUCMUNEJUDUEUNBCULOUFULUMBUMAR
      UMBRDSJQZULDFHULFHTZDJUAUOUPUBDUCLUPDJUDUEUPABUMNUFUOUMAPUGUHUIUHUJ $.
  $}

  ${
    $d x y z $.  $d y z D $.  $d z F $.  $d x y R $.  $d y z S $.  $d x ps $.
    $d y ch $.  $d z th $.
    3gencl.1 $e |- ( D e. S <-> E. x e. R A = D ) $.
    3gencl.2 $e |- ( F e. S <-> E. y e. R B = F ) $.
    3gencl.3 $e |- ( G e. S <-> E. z e. R C = G ) $.
    3gencl.4 $e |- ( A = D -> ( ph <-> ps ) ) $.
    3gencl.5 $e |- ( B = F -> ( ps <-> ch ) ) $.
    3gencl.6 $e |- ( C = G -> ( ch <-> th ) ) $.
    3gencl.7 $e |- ( ( x e. R /\ y e. R /\ z e. R ) -> ph ) $.
    $( Implicit substitution for class with embedded variable.  (Contributed by
       NM, 17-May-1996.) $)
    3gencl $p |- ( ( D e. S /\ F e. S /\ G e. S ) -> th ) $=
      ( wcel wa wi wceq wrex wex df-rex bitri imbi2d 3expia 2gencl com12 3impia
      cv gencl ) KMUCZNMUCZOMUCZDUTURUSUDZDVACUEVADUEGUPLUCZUTGJOUTJOUFZGLUGVBV
      CUDGUHRVCGLUIUJVCCDVAUAUKVAVBCVBAUEVBBUEVBCUEEFHIKNLMPQHKUFABVBSUKINUFBCV
      BTUKEUPLUCFUPLUCVBAUBULUMUNUQUNUO $.
  $}

  ${
    $d x A $.  $d x ps $.
    cgsexg.1 $e |- ( x = A -> ch ) $.
    cgsexg.2 $e |- ( ch -> ( ph <-> ps ) ) $.
    $( Implicit substitution inference for general classes.  (Contributed by
       NM, 26-Aug-2007.) $)
    cgsexg $p |- ( A e. V ->
                     ( E. x ( ch /\ ph ) <-> ps ) ) $=
      ( wcel wa wex biimpa exlimiv cv wceq elisset eximi syl biimprcd ancld
      eximdv syl5com impbid2 ) EFIZCAJZDKZBUEBDCABHLMUDCDKZBUFUDDNEOZDKUGDEFPUH
      CDGQRBCUEDBCACABHSTUAUBUC $.
  $}

  ${
    $d x y ps $.  $d x y A $.  $d x y B $.
    cgsex2g.1 $e |- ( ( x = A /\ y = B ) -> ch ) $.
    cgsex2g.2 $e |- ( ch -> ( ph <-> ps ) ) $.
    $( Implicit substitution inference for general classes.  (Contributed by
       NM, 26-Jul-1995.) $)
    cgsex2g $p |- ( ( A e. V /\ B e. W ) ->
                     ( E. x E. y ( ch /\ ph ) <-> ps ) ) $=
      ( wcel wa wex biimpa exlimivv cv wceq elisset anim12i exdistrv sylibr syl
      2eximi biimprcd ancld 2eximdv syl5com impbid2 ) FHLZGILZMZCAMZENDNZBUMBDE
      CABKOPULCENDNZBUNULDQFRZEQGRZMZENDNZUOULUPDNZUQENZMUSUJUTUKVADFHSEGISTUPU
      QDEUAUBURCDEJUDUCBCUMDEBCACABKUEUFUGUHUI $.
  $}

  ${
    $d x y z w A $.  $d x y z w B $.  $d x y z w C $.  $d x y z w D $.
    $d x y z w ps $.
    cgsex4g.1 $e |- ( ( ( x = A /\ y = B ) /\ ( z = C /\ w = D ) ) -> ch ) $.
    cgsex4g.2 $e |- ( ch -> ( ph <-> ps ) ) $.
    $( An implicit substitution inference for 4 general classes.  (Contributed
       by NM, 5-Aug-1995.) $)
    cgsex4g $p |- ( ( ( A e. R /\ B e. S ) /\ ( C e. R /\ D e. S ) ) ->
                    ( E. x E. y E. z E. w ( ch /\ ph ) <-> ps ) ) $=
      ( wcel wa wex cv wceq biimpa exlimivv elisset anim12i exdistrv sylibr syl
      ee4anv 2eximi biimprcd ancld 2eximdv syl5com impbid2 ) HLPZIMPZQZJLPZKMPZ
      QZQZCAQZGRFRZERDRZBVCBDEVBBFGCABOUAUBUBVACGRFRZERDRZBVDVADSHTZESITZQZFSJT
      ZGSKTZQZQZGRFRZERDRZVFVAVIERDRZVLGRFRZQVOUQVPUTVQUQVGDRZVHERZQVPUOVRUPVSD
      HLUCEIMUCUDVGVHDEUEUFUTVJFRZVKGRZQVQURVTUSWAFJLUCGKMUCUDVJVKFGUEUFUDVIVLD
      EFGUHUFVNVEDEVMCFGNUIUIUGBVEVCDEBCVBFGBCACABOUJUKULULUMUN $.
  $}

  ${
    $d x A $.
    ceqsex.1 $e |- F/ x ps $.
    ceqsex.2 $e |- A e. _V $.
    ceqsex.3 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Elimination of an existential quantifier, using implicit substitution.
       (Contributed by NM, 2-Mar-1995.)  (Revised by Mario Carneiro,
       10-Oct-2016.) $)
    ceqsex $p |- ( E. x ( x = A /\ ph ) <-> ps ) $=
      ( cv wceq wa wex biimpa exlimi wal biimprcd alrimi isseti exintr mpisyl
      wi impbii ) CHDIZAJZCKZBUCBCEUBABGLMBUBATZCNUBCKUDBUECEUBABGOPCDFQUBACRSU
      A $.
  $}

  ${
    $d x A $.  $d x ps $.
    ceqsexv.1 $e |- A e. _V $.
    ceqsexv.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Elimination of an existential quantifier, using implicit substitution.
       (Contributed by NM, 2-Mar-1995.) $)
    ceqsexv $p |- ( E. x ( x = A /\ ph ) <-> ps ) $=
      ( nfv ceqsex ) ABCDBCGEFH $.
  $}

  ${
    $d x A $.  $d x ps $.
    ceqsexv2d.1 $e |- A e. _V $.
    ceqsexv2d.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    ceqsexv2d.3 $e |- ps $.
    $( Elimination of an existential quantifier, using implicit substitution.
       (Contributed by Thierry Arnoux, 10-Sep-2016.) $)
    ceqsexv2d $p |- E. x ph $=
      ( cv wceq wa wex ceqsexv biimpri exsimpr mp2b ) BCHDIZAJCKZACKGQBABCDEFLM
      PACNO $.
  $}

  ${
    $d x y A $.  $d x y B $.
    ceqsex2.1 $e |- F/ x ps $.
    ceqsex2.2 $e |- F/ y ch $.
    ceqsex2.3 $e |- A e. _V $.
    ceqsex2.4 $e |- B e. _V $.
    ceqsex2.5 $e |- ( x = A -> ( ph <-> ps ) ) $.
    ceqsex2.6 $e |- ( y = B -> ( ps <-> ch ) ) $.
    $( Elimination of two existential quantifiers, using implicit substitution.
       (Contributed by Scott Fenton, 7-Jun-2006.) $)
    ceqsex2 $p |- ( E. x E. y ( x = A /\ y = B /\ ph ) <-> ch ) $=
      ( cv wceq w3a wex wa exbii ceqsex 3anass 19.42v nfan anbi2d exbidv 3bitri
      bitri nfv nfex ) DNFOZENGOZAPZEQZDQUJUKARZEQZRZDQUKBRZEQZCUMUPDUMUJUNRZEQ
      UPULUSEUJUKAUASUJUNEUBUGSUOURDFUQDEUKBDUKDUHHUCUIJUJUNUQEUJABUKLUDUETBCEG
      IKMTUF $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x ps $.  $d y ch $.
    ceqsex2v.1 $e |- A e. _V $.
    ceqsex2v.2 $e |- B e. _V $.
    ceqsex2v.3 $e |- ( x = A -> ( ph <-> ps ) ) $.
    ceqsex2v.4 $e |- ( y = B -> ( ps <-> ch ) ) $.
    $( Elimination of two existential quantifiers, using implicit substitution.
       (Contributed by Scott Fenton, 7-Jun-2006.) $)
    ceqsex2v $p |- ( E. x E. y ( x = A /\ y = B /\ ph ) <-> ch ) $=
      ( nfv ceqsex2 ) ABCDEFGBDLCELHIJKM $.
  $}

  ${
    $d x y z A $.  $d x y z B $.  $d x y z C $.  $d x ps $.  $d y ch $.
    $d z th $.
    ceqsex3v.1 $e |- A e. _V $.
    ceqsex3v.2 $e |- B e. _V $.
    ceqsex3v.3 $e |- C e. _V $.
    ceqsex3v.4 $e |- ( x = A -> ( ph <-> ps ) ) $.
    ceqsex3v.5 $e |- ( y = B -> ( ps <-> ch ) ) $.
    ceqsex3v.6 $e |- ( z = C -> ( ch <-> th ) ) $.
    $( Elimination of three existential quantifiers, using implicit
       substitution.  (Contributed by NM, 16-Aug-2011.) $)
    ceqsex3v $p |- ( E. x E. y E. z ( ( x = A /\ y = B /\ z = C ) /\ ph )
                 <-> th ) $=
      ( cv wceq wa wex anass 3anass anbi1i df-3an anbi2i 3bitr4i 2exbii 19.42vv
      w3a bitri exbii 3anbi3d 2exbidv ceqsexv ceqsex2v ) EQHRZFQIRZGQJRZUIZASZG
      TFTZETUPUQURAUIZGTFTZSZETZDVAVDEVAUPVBSZGTFTVDUTVFFGUPUQURSZSZASUPVGASZSU
      TVFUPVGAUAUSVHAUPUQURUBUCVBVIUPUQURAUDUEUFUGUPVBFGUHUJUKVEUQURBUIZGTFTZDV
      CVKEHKUPVBVJFGUPABUQURNULUMUNBCDFGIJLMOPUOUJUJ $.
  $}

  ${
    $d x y z w A $.  $d x y z w B $.  $d x y z w C $.  $d x y z w D $.
    $d x ps $.  $d y ch $.  $d z th $.  $d w ta $.
    ceqsex4v.1 $e |- A e. _V $.
    ceqsex4v.2 $e |- B e. _V $.
    ceqsex4v.3 $e |- C e. _V $.
    ceqsex4v.4 $e |- D e. _V $.
    ceqsex4v.7 $e |- ( x = A -> ( ph <-> ps ) ) $.
    ceqsex4v.8 $e |- ( y = B -> ( ps <-> ch ) ) $.
    ceqsex4v.9 $e |- ( z = C -> ( ch <-> th ) ) $.
    ceqsex4v.10 $e |- ( w = D -> ( th <-> ta ) ) $.
    $( Elimination of four existential quantifiers, using implicit
       substitution.  (Contributed by NM, 23-Sep-2011.) $)
    ceqsex4v $p |- ( E. x E. y E. z E. w
          ( ( x = A /\ y = B ) /\ ( z = C /\ w = D ) /\ ph ) <-> ta ) $=
      ( wceq w3a wex 19.42vv 3anass df-3an anbi2i bitr4i 2exbii 3bitr4i 3anbi3d
      cv wa 2exbidv ceqsex2v 3bitri ) FUMJUBZGUMKUBZUNZHUMLUBZIUMMUBZUNZAUCZIUD
      HUDZGUDFUDURUSVAVBAUCZIUDHUDZUCZGUDFUDVAVBCUCZIUDHUDZEVEVHFGUTVFUNZIUDHUD
      UTVGUNVEVHUTVFHIUEVDVKHIVDUTVCAUNZUNVKUTVCAUFVFVLUTVAVBAUGUHUIUJURUSVGUGU
      KUJVGVAVBBUCZIUDHUDVJFGJKNOURVFVMHIURABVAVBRULUOUSVMVIHIUSBCVAVBSULUOUPCD
      EHILMPQTUAUPUQ $.
  $}

  ${
    $d x y z w v u A $.  $d x y z w v u B $.  $d x y z w v u C $.
    $d x y z w v u D $.  $d x y z w v u E $.  $d x y z w v u F $.  $d x ps $.
    $d y ch $.  $d z th $.  $d w ta $.  $d v et $.  $d u ze $.
    ceqsex6v.1 $e |- A e. _V $.
    ceqsex6v.2 $e |- B e. _V $.
    ceqsex6v.3 $e |- C e. _V $.
    ceqsex6v.4 $e |- D e. _V $.
    ceqsex6v.5 $e |- E e. _V $.
    ceqsex6v.6 $e |- F e. _V $.
    ceqsex6v.7 $e |- ( x = A -> ( ph <-> ps ) ) $.
    ceqsex6v.8 $e |- ( y = B -> ( ps <-> ch ) ) $.
    ceqsex6v.9 $e |- ( z = C -> ( ch <-> th ) ) $.
    ceqsex6v.10 $e |- ( w = D -> ( th <-> ta ) ) $.
    ceqsex6v.11 $e |- ( v = E -> ( ta <-> et ) ) $.
    ceqsex6v.12 $e |- ( u = F -> ( et <-> ze ) ) $.
    $( Elimination of six existential quantifiers, using implicit substitution.
       (Contributed by NM, 21-Sep-2011.) $)
    ceqsex6v $p |- ( E. x E. y E. z E. w E. v E. u
          ( ( x = A /\ y = B /\ z = C ) /\ ( w = D /\ v = E /\ u = F ) /\ ph )
                 <-> ze ) $=
      ( cv wceq w3a wex wa 3anass 3exbii 19.42vvv bitri anbi2d 3exbidv ceqsex3v
      ) HULNUMZIULOUMZJULPUMZUNZKULQUMLULRUMMULSUMUNZAUNZMUOLUOKUOZJUOIUOHUOVGV
      HAUPZMUOLUOKUOZUPZJUOIUOHUOZGVJVMHIJVJVGVKUPZMUOLUOKUOVMVIVOKLMVGVHAUQURV
      GVKKLMUSUTURVNVHDUPZMUOLUOKUOZGVLVHBUPZMUOLUOKUOVHCUPZMUOLUOKUOVQHIJNOPTU
      AUBVDVKVRKLMVDABVHUFVAVBVEVRVSKLMVEBCVHUGVAVBVFVSVPKLMVFCDVHUHVAVBVCDEFGK
      LMQRSUCUDUEUIUJUKVCUTUT $.
  $}

  ${
    $d x y z w v u t s A $.  $d x y z w v u t s B $.  $d x y z w v u t s C $.
    $d x y z w v u t s D $.  $d x y z w v u t s E $.  $d x y z w v u t s F $.
    $d x y z w v u t s G $.  $d x y z w v u t s H $.  $d x ps $.  $d y ch $.
    $d z th $.  $d w ta $.  $d v et $.  $d u ze $.  $d t si $.  $d s rh $.
    ceqsex8v.1 $e |- A e. _V $.
    ceqsex8v.2 $e |- B e. _V $.
    ceqsex8v.3 $e |- C e. _V $.
    ceqsex8v.4 $e |- D e. _V $.
    ceqsex8v.5 $e |- E e. _V $.
    ceqsex8v.6 $e |- F e. _V $.
    ceqsex8v.7 $e |- G e. _V $.
    ceqsex8v.8 $e |- H e. _V $.
    ceqsex8v.9 $e |- ( x = A -> ( ph <-> ps ) ) $.
    ceqsex8v.10 $e |- ( y = B -> ( ps <-> ch ) ) $.
    ceqsex8v.11 $e |- ( z = C -> ( ch <-> th ) ) $.
    ceqsex8v.12 $e |- ( w = D -> ( th <-> ta ) ) $.
    ceqsex8v.13 $e |- ( v = E -> ( ta <-> et ) ) $.
    ceqsex8v.14 $e |- ( u = F -> ( et <-> ze ) ) $.
    ceqsex8v.15 $e |- ( t = G -> ( ze <-> si ) ) $.
    ceqsex8v.16 $e |- ( s = H -> ( si <-> rh ) ) $.
    $( Elimination of eight existential quantifiers, using implicit
       substitution.  (Contributed by NM, 23-Sep-2011.) $)
    ceqsex8v $p |- ( E. x E. y E. z E. w E. v E. u E. t E. s
              ( ( ( x = A /\ y = B ) /\ ( z = C /\ w = D ) )
         /\ ( ( v = E /\ u = F ) /\ ( t = G /\ s = H ) ) /\ ph ) <-> rh ) $=
      ( cv wceq wa w3a 19.42vv 2exbii bitri 3anass df-3an anbi2i bitr4i 3bitr4i
      wex 3anbi3d 4exbidv ceqsex4v ) JVBQVCZKVBRVCZVDZLVBSVCZMVBTVCZVDZVDZNVBUA
      VCOVBUBVCVDZPVBUCVCUEVBUDVCVDZVDZAVEZUEVNPVNZOVNNVNZMVNLVNZKVNJVNVTWCWEWF
      AVEZUEVNPVNZOVNNVNZVEZMVNLVNZKVNJVNZIWKWPJKWJWOLMWDWLVDZUEVNPVNZOVNNVNZWD
      WNVDZWJWOWTWDWMVDZOVNNVNXAWSXBNOWDWLPUEVFVGWDWMNOVFVHWIWSNOWHWRPUEWHWDWGA
      VDZVDWRWDWGAVIWLXCWDWEWFAVJVKVLVGVGVTWCWNVJVMVGVGWQWEWFEVEZUEVNPVNOVNNVNZ
      IWNWEWFBVEZUEVNPVNOVNNVNWEWFCVEZUEVNPVNOVNNVNWEWFDVEZUEVNPVNOVNNVNXEJKLMQ
      RSTUFUGUHUIVRWLXFNOPUEVRABWEWFUNVOVPVSXFXGNOPUEVSBCWEWFUOVOVPWAXGXHNOPUEW
      ACDWEWFUPVOVPWBXHXDNOPUEWBDEWEWFUQVOVPVQEFGHINOPUEUAUBUCUDUJUKULUMURUSUTV
      AVQVHVH $.
  $}

  ${
    $d x ps $.  $d y ph $.  $d x th $.  $d y ch $.  $d y A $.
    gencbvex.1 $e |- A e. _V $.
    gencbvex.2 $e |- ( A = y -> ( ph <-> ps ) ) $.
    gencbvex.3 $e |- ( A = y -> ( ch <-> th ) ) $.
    gencbvex.4 $e |- ( th <-> E. x ( ch /\ A = y ) ) $.
    $( Change of bound variable using implicit substitution.  (Contributed by
       NM, 17-May-1996.)  (Proof shortened by Andrew Salmon, 8-Jun-2011.) $)
    gencbvex $p |- ( E. x ( ch /\ ph ) <-> E. y ( th /\ ps ) ) $=
      ( cv wceq wa wex excom wb anbi12d bicomd exbii eqcoms ceqsexv simpr eqcom
      19.41v biimpi adantl eximi sylbi adantr ancri impbii bitri 3bitr3i ) FLZG
      MZDBNZNZFOZEOUREOZFOCANZEOUQFOUREFPUSVAEUQVAFGHUQVAQGUOGUOMZVAUQVBCDABJIR
      SUAUBTUTUQFUTUPEOZUQNZUQUPUQEUEVDUQVCUQUCUQVCDVCBDCVBNZEOVCKVEUPEVBUPCVBU
      PGUOUDUFUGUHUIUJUKULUMTUN $.
  $}

  ${
    $d x ps $.  $d y ph $.  $d x th $.  $d y ch $.  $d y A $.
    gencbvex2.1 $e |- A e. _V $.
    gencbvex2.2 $e |- ( A = y -> ( ph <-> ps ) ) $.
    gencbvex2.3 $e |- ( A = y -> ( ch <-> th ) ) $.
    gencbvex2.4 $e |- ( th -> E. x ( ch /\ A = y ) ) $.
    $( Restatement of ~ gencbvex with weaker hypotheses.  (Contributed by Jeff
       Hankins, 6-Dec-2006.) $)
    gencbvex2 $p |- ( E. x ( ch /\ ph ) <-> E. y ( th /\ ps ) ) $=
      ( cv wceq wa wex biimpac exlimiv impbii gencbvex ) ABCDEFGHIJDCGFLMZNZEOK
      UADETCDJPQRS $.
  $}

  ${
    $d x ps $.  $d y ph $.  $d x th $.  $d y ch $.  $d y A $.
    gencbval.1 $e |- A e. _V $.
    gencbval.2 $e |- ( A = y -> ( ph <-> ps ) ) $.
    gencbval.3 $e |- ( A = y -> ( ch <-> th ) ) $.
    gencbval.4 $e |- ( th <-> E. x ( ch /\ A = y ) ) $.
    $( Change of bound variable using implicit substitution.  (Contributed by
       NM, 17-May-1996.) $)
    gencbval $p |- ( A. x ( ch -> ph ) <-> A. y ( th -> ps ) ) $=
      ( wi wal wn wa wex cv wceq notbid exanali gencbvex 3bitr3i con4bii ) CALE
      MZDBLFMZCANZOEPDBNZOFPUDNUENUFUGCDEFGHGFQRABISJKUACAETDBFTUBUC $.
  $}

  ${
    $d A x $.  $d x y $.
    sbhypf.1 $e |- F/ x ps $.
    sbhypf.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Introduce an explicit substitution into an implicit substitution
       hypothesis.  See also ~ csbhypf .  (Contributed by Raph Levien,
       10-Apr-2004.) $)
    sbhypf $p |- ( y = A -> ( [ y / x ] ph <-> ps ) ) $=
      ( cv wceq wa wex wsb wb eqeq1 equsexvw nfs1v nfbi sbequ12 bicomd sylan9bb
      exlimi sylbir ) DHZEIZCHZUCIZUEEIZJZCKACDLZBMZUGUDCDUEUCENOUHUJCUIBCACDPF
      QUFUIAUGBUFAUIACDRSGTUAUB $.
  $}

  ${
    $d z A $.  $d x z $.
    $( Closed theorem form of ~ vtoclgf .  (Contributed by NM, 17-Feb-2013.)
       (Revised by Mario Carneiro, 12-Oct-2016.)  (Proof shortened by JJ,
       11-Aug-2021.) $)
    vtoclgft $p |- ( ( ( F/_ x A /\ F/ x ps )
                  /\ ( A. x ( x = A -> ( ph <-> ps ) )
                     /\ A. x ph ) /\ A e. V ) -> ps ) $=
      ( vz wnfc wnf wa cv wceq wb wi wal wcel w3a wex elisset syl5ib imp nfnfc1
      nfcvd id nfeqd weq eqeq1 cbvexd ad2antrr 3impia biimp imim2i com23 19.23t
      a1i alanimi adantl 3adant3 mpd ) CDGZBCHZIZCJZDKZABLZMZCNACNIZDEOZPVCCQZB
      VAVFVGVHUSVGVHMUTVFVGFJZDKZFQUSVHFDERUSVJVCFCCDUAUSCVIDUSCVIUBUSUCUDFCUEV
      JVCLMUSVIVBDUFUNUGSUHUIVAVFVHBMZVGVAVFVKVFVCBMZCNZVAVKVEAVLCVEAVLVEVCABVD
      ABMVCABUJUKULTUOUTVMVKLUSVCBCUMUPSTUQUR $.
  $}

  ${
    vtocld.1 $e |- ( ph -> A e. V ) $.
    vtocld.2 $e |- ( ( ph /\ x = A ) -> ( ps <-> ch ) ) $.
    vtocld.3 $e |- ( ph -> ps ) $.
    ${
      vtocldf.4 $e |- F/ x ph $.
      vtocldf.5 $e |- ( ph -> F/_ x A ) $.
      vtocldf.6 $e |- ( ph -> F/ x ch ) $.
      $( Implicit substitution of a class for a setvar variable.  (Contributed
         by Mario Carneiro, 15-Oct-2016.) $)
      vtocldf $p |- ( ph -> ch ) $=
        ( wnfc wnf cv wceq wb wi wal alrimi wcel ex vtoclgft syl221anc ) ADEMCD
        NDOEPZBCQZRZDSBDSEFUACKLAUGDJAUEUFHUBTABDJITGBCDEFUCUD $.
    $}

    $d x A $.  $d x ph $.  $d x ch $.
    $( Implicit substitution of a class for a setvar variable.  (Contributed by
       Mario Carneiro, 15-Oct-2016.) $)
    vtocld $p |- ( ph -> ch ) $=
      ( nfv nfcvd nfvd vtocldf ) ABCDEFGHIADJADEKACDLM $.
  $}

  ${
    $d x A $.
    vtoclf.1 $e |- F/ x ps $.
    vtoclf.2 $e |- A e. _V $.
    vtoclf.3 $e |- ( x = A -> ( ph <-> ps ) ) $.
    vtoclf.4 $e |- ph $.
    $( Implicit substitution of a class for a setvar variable.  This is a
       generalization of ~ chvar .  (Contributed by NM, 30-Aug-1993.) $)
    vtoclf $p |- ps $=
      ( cv wceq wi isseti biimpd eximii 19.36i mpg ) ABCABCECIDJZABKCCDFLQABGMN
      OHP $.
  $}

  ${
    $d x A $.  $d x ps $.
    vtocl.1 $e |- A e. _V $.
    vtocl.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    vtocl.3 $e |- ph $.
    $( Implicit substitution of a class for a setvar variable.  See also
       ~ vtoclALT .  (Contributed by NM, 30-Aug-1993.)  Remove dependency on
       ~ ax-10 .  (Revised by BJ, 29-Nov-2020.) $)
    vtocl $p |- ps $=
      ( cv wceq wi isseti biimpd eximii 19.36iv mpg ) ABCABCCHDIZABJCCDEKPABFLM
      NGO $.

    $( Alternate proof of ~ vtocl .  Shorter but requires more axioms.
       (Contributed by NM, 30-Aug-1993.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    vtoclALT $p |- ps $=
      ( nfv vtoclf ) ABCDBCHEFGI $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y ps $.
    vtocl2.1 $e |- A e. _V $.
    vtocl2.2 $e |- B e. _V $.
    vtocl2.3 $e |- ( ( x = A /\ y = B ) -> ( ph <-> ps ) ) $.
    vtocl2.4 $e |- ph $.
    $( Implicit substitution of classes for setvar variables.  (Contributed by
       NM, 26-Jul-1995.)  (Proof shortened by Andrew Salmon, 8-Jun-2011.) $)
    vtocl2 $p |- ps $=
      ( wal wi wex cv wceq isseti wa exdistrv biimpd 2eximi sylbir mp2an 19.36v
      exbii mpbi 19.36iv ax-gen mpg ) ADKZBCUIBCABLZDMZCMZUIBLZCMCNEOZCMZDNFOZD
      MZULCEGPDFHPUOUQQUNUPQZDMCMULUNUPCDRURUJCDURABISTUAUBUKUMCABDUCUDUEUFADJU
      GUH $.
  $}

  ${
    $d x y z A $.  $d x y z B $.  $d x y z C $.  $d x y z ps $.
    vtocl3.1 $e |- A e. _V $.
    vtocl3.2 $e |- B e. _V $.
    vtocl3.3 $e |- C e. _V $.
    vtocl3.4 $e |- ( ( x = A /\ y = B /\ z = C ) -> ( ph <-> ps ) ) $.
    vtocl3.5 $e |- ph $.
    $( Implicit substitution of classes for setvar variables.  (Contributed by
       NM, 3-Jun-1995.)  (Proof shortened by Andrew Salmon, 8-Jun-2011.) $)
    vtocl3 $p |- ps $=
      ( wal wi wex cv wceq isseti w3a eeeanv biimpd 2eximi sylbir 19.36v 2exbii
      eximi mp3an mpbi exbii 19.36iv gen2 mpg ) AENZDNZBCUOBCUNBOZDPZCPZUOBOZCP
      ABOZEPZDPCPZURCQFRZCPZDQGRZDPZEQHRZEPZVBCFISDGJSEHKSVDVFVHTVCVEVGTZEPZDPC
      PVBVCVEVGCDEUAVJVACDVIUTEVIABLUBUGUCUDUHVAUPCDABEUEUFUIUQUSCUNBDUEUJUIUKA
      DEMULUM $.
  $}

  ${
    $d x A $.  $d x ch $.  $d x th $.
    vtoclb.1 $e |- A e. _V $.
    vtoclb.2 $e |- ( x = A -> ( ph <-> ch ) ) $.
    vtoclb.3 $e |- ( x = A -> ( ps <-> th ) ) $.
    vtoclb.4 $e |- ( ph <-> ps ) $.
    $( Implicit substitution of a class for a setvar variable.  (Contributed by
       NM, 23-Dec-1993.) $)
    vtoclb $p |- ( ch <-> th ) $=
      ( wb cv wceq bibi12d vtocl ) ABKCDKEFGELFMACBDHINJO $.
  $}

  ${
    vtoclgf.1 $e |- F/_ x A $.
    vtoclgf.2 $e |- F/ x ps $.
    vtoclgf.3 $e |- ( x = A -> ( ph <-> ps ) ) $.
    vtoclgf.4 $e |- ph $.
    $( Implicit substitution of a class for a setvar variable, with
       bound-variable hypotheses in place of disjoint variable restrictions.
       (Contributed by NM, 21-Sep-2003.)  (Proof shortened by Mario Carneiro,
       10-Oct-2016.) $)
    vtoclgf $p |- ( A e. V -> ps ) $=
      ( wcel cvv elex cv wceq wex issetf mpbii exlimi sylbi syl ) DEJDKJZBDELUA
      CMDNZCOBCDFPUBBCGUBABIHQRST $.
  $}

  ${
    $d x A $.
    vtoclg1f.nf $e |- F/ x ps $.
    vtoclg1f.maj $e |- ( x = A -> ( ph <-> ps ) ) $.
    vtoclg1f.min $e |- ph $.
    $( Version of ~ vtoclgf with one non-freeness hypothesis replaced with a
       disjoint variable condition, thus avoiding dependency on ~ ax-11 and
       ~ ax-13 .  (Contributed by BJ, 1-May-2019.) $)
    vtoclg1f $p |- ( A e. V -> ps ) $=
      ( wcel cvv elex cv wceq wex isset mpbii exlimi sylbi syl ) DEIDJIZBDEKTCL
      DMZCNBCDOUABCFUAABHGPQRS $.
  $}

  ${
    $d x A $.  $d x ps $.
    vtoclg.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    vtoclg.2 $e |- ph $.
    $( Implicit substitution of a class expression for a setvar variable.
       (Contributed by NM, 17-Apr-1995.) $)
    vtoclg $p |- ( A e. V -> ps ) $=
      ( nfv vtoclg1f ) ABCDEBCHFGI $.
  $}

  ${
    $d x A $.  $d x ch $.  $d x th $.
    vtoclbg.1 $e |- ( x = A -> ( ph <-> ch ) ) $.
    vtoclbg.2 $e |- ( x = A -> ( ps <-> th ) ) $.
    vtoclbg.3 $e |- ( ph <-> ps ) $.
    $( Implicit substitution of a class for a setvar variable.  (Contributed by
       NM, 29-Apr-1994.) $)
    vtoclbg $p |- ( A e. V -> ( ch <-> th ) ) $=
      ( wb cv wceq bibi12d vtoclg ) ABKCDKEFGELFMACBDHINJO $.
  $}

  ${
    vtocl2gf.1 $e |- F/_ x A $.
    vtocl2gf.2 $e |- F/_ y A $.
    vtocl2gf.3 $e |- F/_ y B $.
    vtocl2gf.4 $e |- F/ x ps $.
    vtocl2gf.5 $e |- F/ y ch $.
    vtocl2gf.6 $e |- ( x = A -> ( ph <-> ps ) ) $.
    vtocl2gf.7 $e |- ( y = B -> ( ps <-> ch ) ) $.
    vtocl2gf.8 $e |- ph $.
    $( Implicit substitution of a class for a setvar variable.  (Contributed by
       NM, 25-Apr-1995.) $)
    vtocl2gf $p |- ( ( A e. V /\ B e. W ) -> ch ) $=
      ( wcel cvv wi elex nfel1 nfim cv wceq imbi2d vtoclgf mpan9 ) FHRFSRZGIRCF
      HUAUIBTUICTEGILUICEEFSKUBNUCEUDGUEBCUIPUFABDFSJMOQUGUGUH $.
  $}

  ${
    vtocl3gf.a $e |- F/_ x A $.
    vtocl3gf.b $e |- F/_ y A $.
    vtocl3gf.c $e |- F/_ z A $.
    vtocl3gf.d $e |- F/_ y B $.
    vtocl3gf.e $e |- F/_ z B $.
    vtocl3gf.f $e |- F/_ z C $.
    vtocl3gf.1 $e |- F/ x ps $.
    vtocl3gf.2 $e |- F/ y ch $.
    vtocl3gf.3 $e |- F/ z th $.
    vtocl3gf.4 $e |- ( x = A -> ( ph <-> ps ) ) $.
    vtocl3gf.5 $e |- ( y = B -> ( ps <-> ch ) ) $.
    vtocl3gf.6 $e |- ( z = C -> ( ch <-> th ) ) $.
    vtocl3gf.7 $e |- ph $.
    $( Implicit substitution of a class for a setvar variable.  (Contributed by
       NM, 10-Aug-2013.)  (Revised by Mario Carneiro, 10-Oct-2016.) $)
    vtocl3gf $p |- ( ( A e. V /\ B e. W /\ C e. X ) -> th ) $=
      ( wcel cvv wa elex wi nfel1 nfim wceq imbi2d vtoclgf vtocl2gf mpan9 3impb
      cv ) HKUGZILUGZJMUGZDVAHUHUGZVBVCUIDHKUJVDBUKVDCUKVDDUKFGIJLMQRSVDCFFHUHO
      ULUAUMVDDGGHUHPULUBUMFUTIUNBCVDUDUOGUTJUNCDVDUEUOABEHUHNTUCUFUPUQURUS $.
  $}

  ${
    $d x A $.  $d y A $.  $d y B $.  $d x ps $.  $d y ch $.
    vtocl2g.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    vtocl2g.2 $e |- ( y = B -> ( ps <-> ch ) ) $.
    vtocl2g.3 $e |- ph $.
    $( Implicit substitution of 2 classes for 2 setvar variables.  (Contributed
       by NM, 25-Apr-1995.)  Remove dependency on ~ ax-10 , ~ ax-11 , and
       ~ ax-13 .  (Revised by Steven Nguyen, 29-Nov-2022.) $)
    vtocl2g $p |- ( ( A e. V /\ B e. W ) -> ch ) $=
      ( wcel cvv elex wi cv wceq imbi2d vtoclg mpan9 ) FHMFNMZGIMCFHOUBBPUBCPEG
      IEQGRBCUBKSABDFNJLTTUA $.

    $( Obsolete version of ~ vtocl2g as of 29-Nov-2022.  Implicit substitution
       of 2 classes for 2 setvar variables.  (Contributed by NM, 25-Apr-1995.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    vtocl2gOLD $p |- ( ( A e. V /\ B e. W ) -> ch ) $=
      ( nfcv nfv vtocl2gf ) ABCDEFGHIDFMEFMEGMBDNCENJKLO $.
  $}

  ${
    $d x B $.
    vtoclgaf.1 $e |- F/_ x A $.
    vtoclgaf.2 $e |- F/ x ps $.
    vtoclgaf.3 $e |- ( x = A -> ( ph <-> ps ) ) $.
    vtoclgaf.4 $e |- ( x e. B -> ph ) $.
    $( Implicit substitution of a class for a setvar variable.  (Contributed by
       NM, 17-Feb-2006.)  (Revised by Mario Carneiro, 10-Oct-2016.) $)
    vtoclgaf $p |- ( A e. B -> ps ) $=
      ( wcel cv wi nfel1 nfim wceq eleq1 imbi12d vtoclgf pm2.43i ) DEJZBCKZEJZA
      LTBLCDEFTBCCDEFMGNUADOUBTABUADEPHQIRS $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ps $.
    vtoclga.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    vtoclga.2 $e |- ( x e. B -> ph ) $.
    $( Implicit substitution of a class for a setvar variable.  (Contributed by
       NM, 20-Aug-1995.) $)
    vtoclga $p |- ( A e. B -> ps ) $=
      ( nfcv nfv vtoclgaf ) ABCDECDHBCIFGJ $.
  $}

  ${
    $d x y C $.  $d x y D $.
    vtocl2gaf.a $e |- F/_ x A $.
    vtocl2gaf.b $e |- F/_ y A $.
    vtocl2gaf.c $e |- F/_ y B $.
    vtocl2gaf.1 $e |- F/ x ps $.
    vtocl2gaf.2 $e |- F/ y ch $.
    vtocl2gaf.3 $e |- ( x = A -> ( ph <-> ps ) ) $.
    vtocl2gaf.4 $e |- ( y = B -> ( ps <-> ch ) ) $.
    vtocl2gaf.5 $e |- ( ( x e. C /\ y e. D ) -> ph ) $.
    $( Implicit substitution of 2 classes for 2 setvar variables.  (Contributed
       by NM, 10-Aug-2013.) $)
    vtocl2gaf $p |- ( ( A e. C /\ B e. D ) -> ch ) $=
      ( wcel wa wi cv nfel1 nfan nfim wceq eleq1 anbi1d imbi12d anbi2d vtocl2gf
      nfv pm2.43i ) FHRZGIRZSZCDUAZHRZEUAZIRZSZATUMUSSZBTUOCTDEFGHIJKLVABDUMUSD
      DFHJUBUSDUKUCMUDUOCEUMUNEEFHKUBEGILUBUCNUDUPFUEZUTVAABVBUQUMUSUPFHUFUGOUH
      URGUEZVAUOBCVCUSUNUMURGIUFUIPUHQUJUL $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x y C $.  $d x y D $.  $d x ps $.  $d y ch $.
    vtocl2ga.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    vtocl2ga.2 $e |- ( y = B -> ( ps <-> ch ) ) $.
    vtocl2ga.3 $e |- ( ( x e. C /\ y e. D ) -> ph ) $.
    $( Implicit substitution of 2 classes for 2 setvar variables.  (Contributed
       by NM, 20-Aug-1995.) $)
    vtocl2ga $p |- ( ( A e. C /\ B e. D ) -> ch ) $=
      ( nfcv nfv vtocl2gaf ) ABCDEFGHIDFMEFMEGMBDNCENJKLO $.
  $}

  ${
    $d x y z R $.  $d x y z S $.  $d x y z T $.
    vtocl3gaf.a $e |- F/_ x A $.
    vtocl3gaf.b $e |- F/_ y A $.
    vtocl3gaf.c $e |- F/_ z A $.
    vtocl3gaf.d $e |- F/_ y B $.
    vtocl3gaf.e $e |- F/_ z B $.
    vtocl3gaf.f $e |- F/_ z C $.
    vtocl3gaf.1 $e |- F/ x ps $.
    vtocl3gaf.2 $e |- F/ y ch $.
    vtocl3gaf.3 $e |- F/ z th $.
    vtocl3gaf.4 $e |- ( x = A -> ( ph <-> ps ) ) $.
    vtocl3gaf.5 $e |- ( y = B -> ( ps <-> ch ) ) $.
    vtocl3gaf.6 $e |- ( z = C -> ( ch <-> th ) ) $.
    vtocl3gaf.7 $e |- ( ( x e. R /\ y e. S /\ z e. T ) -> ph ) $.
    $( Implicit substitution of 3 classes for 3 setvar variables.  (Contributed
       by NM, 10-Aug-2013.)  (Revised by Mario Carneiro, 11-Oct-2016.) $)
    vtocl3gaf $p |- ( ( A e. R /\ B e. S /\ C e. T ) -> th ) $=
      ( wcel w3a cv nfel1 nf3an nfim wceq eleq1 3anbi1d imbi12d 3anbi2d 3anbi3d
      wi nfv vtocl3gf pm2.43i ) HKUGZILUGZJMUGZUHZDEUIZKUGZFUIZLUGZGUIZMUGZUHZA
      USVCVJVLUHZBUSVCVDVLUHZCUSVFDUSEFGHIJKLMNOPQRSVNBEVCVJVLEEHKNUJVJEUTVLEUT
      UKTULVOCFVCVDVLFFHKOUJFILQUJVLFUTUKUAULVFDGVCVDVEGGHKPUJGILRUJGJMSUJUKUBU
      LVGHUMZVMVNABVPVHVCVJVLVGHKUNUOUCUPVIIUMZVNVOBCVQVJVDVCVLVIILUNUQUDUPVKJU
      MZVOVFCDVRVLVEVCVDVKJMUNURUEUPUFVAVB $.
  $}

  ${
    $d x y z A $.  $d y z B $.  $d z C $.  $d x y z D $.  $d x y z R $.
    $d x y z S $.  $d x ps $.  $d y ch $.  $d z th $.
    vtocl3ga.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    vtocl3ga.2 $e |- ( y = B -> ( ps <-> ch ) ) $.
    vtocl3ga.3 $e |- ( z = C -> ( ch <-> th ) ) $.
    vtocl3ga.4 $e |- ( ( x e. D /\ y e. R /\ z e. S ) -> ph ) $.
    $( Implicit substitution of 3 classes for 3 setvar variables.  (Contributed
       by NM, 20-Aug-1995.) $)
    vtocl3ga $p |- ( ( A e. D /\ B e. R /\ C e. S ) -> th ) $=
      ( nfcv nfv vtocl3gaf ) ABCDEFGHIJKLMEHRFHRGHRFIRGIRGJRBESCFSDGSNOPQT $.
  $}

  ${
    $d w x y z A $.  $d w y z B $.  $d w z C $.  $d w D $.  $d w x y z R $.
    $d w x y z S $.  $d w x y z T $.  $d w x y z Q $.  $d x ps $.  $d z rh $.
    $d w th $.  $d y ch $.
    vtocl4ga.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    vtocl4ga.2 $e |- ( y = B -> ( ps <-> ch ) ) $.
    vtocl4ga.3 $e |- ( z = C -> ( ch <-> rh ) ) $.
    vtocl4ga.4 $e |- ( w = D -> ( rh <-> th ) ) $.
    ${
      vtocl4g.5 $e |- ph $.
      $( Implicit substitution of 4 classes for 4 setvar variables.
         (Contributed by AV, 22-Jan-2019.) $)
      vtocl4g $p |- ( ( ( A e. Q /\ B e. R )
                       /\ ( C e. S /\ D e. T ) ) -> th ) $=
        ( wcel wa wi cv wceq imbi2d vtocl2g impcom ) LPUCMQUCUDJNUCKOUCUDZDUKCU
        EUKEUEUKDUEHILMPQHUFLUGCEUKTUHIUFMUGEDUKUAUHABCFGJKNORSUBUIUIUJ $.
    $}

    vtocl4ga.5 $e |- ( ( ( x e. Q /\ y e. R )
                         /\ ( z e. S /\ w e. T ) ) -> ph ) $.
    $( Implicit substitution of 4 classes for 4 setvar variables.  (Contributed
       by AV, 22-Jan-2019.) $)
    vtocl4ga $p |- ( ( ( A e. Q /\ B e. R )
                       /\ ( C e. S /\ D e. T ) ) -> th ) $=
      ( wcel wa cv wi wceq eleq1 anbi1d imbi12d anbi2d vtocl4g pm2.43i ) JNUCZK
      OUCZUDZLPUCZMQUCZUDZUDZDFUEZNUCZGUEZOUCZUDZHUEZPUCZIUEZQUCZUDZUDZAUFUNVDU
      DZVJUDZBUFUPVJUDZCUFUTDUFUPUQVIUDZUDZEUFFGHIJKLMNOPQVAJUGZVKVMABVQVEVLVJV
      QVBUNVDVAJNUHUIUIRUJVCKUGZVMVNBCVRVLUPVJVRVDUOUNVCKOUHUKUISUJVFLUGZVNVPCE
      VSVJVOUPVSVGUQVIVFLPUHUIUKTUJVHMUGZVPUTEDVTVOUSUPVTVIURUQVHMQUHUKUKUAUJUB
      ULUM $.
  $}

  ${
    $d x A $.  $d x ph $.
    vtocleg.1 $e |- ( x = A -> ph ) $.
    $( Implicit substitution of a class for a setvar variable.  (Contributed by
       NM, 21-Jun-1993.) $)
    vtocleg $p |- ( A e. V -> ph ) $=
      ( wcel cv wceq wex elisset exlimiv syl ) CDFBGCHZBIABCDJMABEKL $.
  $}

  ${
    $d x A $.
    $( Implicit substitution of a class for a setvar variable.  (Closed theorem
       version of ~ vtoclef .)  (Contributed by NM, 7-Nov-2005.)  (Revised by
       Mario Carneiro, 11-Oct-2016.) $)
    vtoclegft $p |- ( ( A e. B /\ F/ x ph /\
                   A. x ( x = A -> ph ) ) -> ph ) $=
      ( wcel wnf cv wceq wi wal w3a wex elisset mpan9 3adant2 wb 19.9t 3ad2ant2
      exim mpbid ) CDEZABFZBGCHZAIBJZKABLZAUAUDUEUBUAUCBLUDUEBCDMUCABSNOUBUAUEA
      PUDABQRT $.
  $}

  ${
    $d x A $.
    vtoclef.1 $e |- F/ x ph $.
    vtoclef.2 $e |- A e. _V $.
    vtoclef.3 $e |- ( x = A -> ph ) $.
    $( Implicit substitution of a class for a setvar variable.  (Contributed by
       NM, 18-Aug-1993.) $)
    vtoclef $p |- ph $=
      ( cv wceq wex isseti exlimi ax-mp ) BGCHZBIABCEJMABDFKL $.
  $}

  ${
    $d x A $.  $d x ph $.
    vtocle.1 $e |- A e. _V $.
    vtocle.2 $e |- ( x = A -> ph ) $.
    $( Implicit substitution of a class for a setvar variable.  (Contributed by
       NM, 9-Sep-1993.) $)
    vtocle $p |- ph $=
      ( cvv wcel vtocleg ax-mp ) CFGADABCFEHI $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ps $.
    vtoclri.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    vtoclri.2 $e |- A. x e. B ph $.
    $( Implicit substitution of a class for a setvar variable.  (Contributed by
       NM, 21-Nov-1994.) $)
    vtoclri $p |- ( A e. B -> ps ) $=
      ( rspec vtoclga ) ABCDEFACEGHI $.
  $}

  ${
    spcimgft.1 $e |- F/ x ps $.
    spcimgft.2 $e |- F/_ x A $.
    $( A closed version of ~ spcimgf .  (Contributed by Mario Carneiro,
       4-Jan-2017.) $)
    spcimgft $p |- ( A. x ( x = A -> ( ph -> ps ) ) -> ( A e. B ->
                      ( A. x ph -> ps ) ) ) $=
      ( wcel cvv cv wceq wi wal elex wex issetf exim syl5bi 19.36 syl6ib syl5 )
      DEHDIHZCJDKZABLZLCMZACMBLZDENUEUBUDCOZUFUBUCCOUEUGCDGPUCUDCQRABCFSTUA $.

    $( A closed version of ~ spcgf .  (Contributed by Andrew Salmon,
       6-Jun-2011.)  (Revised by Mario Carneiro, 4-Jan-2017.) $)
    spcgft $p |- ( A. x ( x = A -> ( ph <-> ps ) ) -> ( A e. B ->
                      ( A. x ph -> ps ) ) ) $=
      ( cv wceq wb wi wal wcel biimp imim2i alimi spcimgft syl ) CHDIZABJZKZCLS
      ABKZKZCLDEMACLBKKUAUCCTUBSABNOPABCDEFGQR $.
  $}

  ${
    spcimgf.1 $e |- F/_ x A $.
    spcimgf.2 $e |- F/ x ps $.
    ${
      spcimgf.3 $e |- ( x = A -> ( ph -> ps ) ) $.
      $( Rule of specialization, using implicit substitution.  Compare Theorem
         7.3 of [Quine] p. 44.  (Contributed by Mario Carneiro, 4-Jan-2017.) $)
      spcimgf $p |- ( A e. V -> ( A. x ph -> ps ) ) $=
        ( cv wceq wi wcel wal spcimgft mpg ) CIDJABKKDELACMBKKCABCDEGFNHO $.
    $}

    spcimegf.3 $e |- ( x = A -> ( ps -> ph ) ) $.
    $( Existential specialization, using implicit substitution.  (Contributed
       by Mario Carneiro, 4-Jan-2017.) $)
    spcimegf $p |- ( A e. V -> ( ps -> E. x ph ) ) $=
      ( wcel wn wal wex nfn cv wceq con3d spcimgf con2d df-ex syl6ibr ) DEIZBAJ
      ZCKZJACLUAUCBUBBJCDEFBCGMCNDOBAHPQRACST $.
  $}

  ${
    spcgf.1 $e |- F/_ x A $.
    spcgf.2 $e |- F/ x ps $.
    spcgf.3 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Rule of specialization, using implicit substitution.  Compare Theorem
       7.3 of [Quine] p. 44.  (Contributed by NM, 2-Feb-1997.)  (Revised by
       Andrew Salmon, 12-Aug-2011.) $)
    spcgf $p |- ( A e. V -> ( A. x ph -> ps ) ) $=
      ( cv wceq wb wi wcel wal spcgft mpg ) CIDJABKLDEMACNBLLCABCDEGFOHP $.

    $( Existential specialization, using implicit substitution.  (Contributed
       by NM, 2-Feb-1997.) $)
    spcegf $p |- ( A e. V -> ( ps -> E. x ph ) ) $=
      ( wcel wn wal wex nfn cv wceq notbid spcgf con2d df-ex syl6ibr ) DEIZBAJZ
      CKZJACLUAUCBUBBJCDEFBCGMCNDOABHPQRACST $.
  $}

  ${
    $d x A $.  $d x ph $.  $d x ch $.
    spcimdv.1 $e |- ( ph -> A e. B ) $.
    ${
      spcimdv.2 $e |- ( ( ph /\ x = A ) -> ( ps -> ch ) ) $.
      $( Restricted specialization, using implicit substitution.  (Contributed
         by Mario Carneiro, 4-Jan-2017.) $)
      spcimdv $p |- ( ph -> ( A. x ps -> ch ) ) $=
        ( cv wceq wi wal wcel ex alrimiv nfv nfcv spcimgft sylc ) ADIEJZBCKZKZD
        LEFMBDLCKAUBDATUAHNOGBCDEFCDPDEQRS $.
    $}

    ${
      spcdv.2 $e |- ( ( ph /\ x = A ) -> ( ps <-> ch ) ) $.
      $( Rule of specialization, using implicit substitution.  Analogous to
         ~ rspcdv .  (Contributed by David Moews, 1-May-2017.) $)
      spcdv $p |- ( ph -> ( A. x ps -> ch ) ) $=
        ( cv wceq wa biimpd spcimdv ) ABCDEFGADIEJKBCHLM $.
    $}

    spcimedv.2 $e |- ( ( ph /\ x = A ) -> ( ch -> ps ) ) $.
    $( Restricted existential specialization, using implicit substitution.
       (Contributed by Mario Carneiro, 4-Jan-2017.) $)
    spcimedv $p |- ( ph -> ( ch -> E. x ps ) ) $=
      ( wn wal wex cv wceq wa con3d spcimdv con2d df-ex syl6ibr ) ACBIZDJZIBDKA
      UACATCIDEFGADLEMNCBHOPQBDRS $.
  $}

  ${
    $d x ps $.  $d x A $.
    spcgv.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Rule of specialization, using implicit substitution.  Compare Theorem
       7.3 of [Quine] p. 44.  (Contributed by NM, 22-Jun-1994.) $)
    spcgv $p |- ( A e. V -> ( A. x ph -> ps ) ) $=
      ( nfcv nfv spcgf ) ABCDECDGBCHFI $.

    $( Existential specialization, using implicit substitution.  (Contributed
       by NM, 14-Aug-1994.) $)
    spcegv $p |- ( A e. V -> ( ps -> E. x ph ) ) $=
      ( nfcv nfv spcegf ) ABCDECDGBCHFI $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y ps $.
    spc2egv.1 $e |- ( ( x = A /\ y = B ) -> ( ph <-> ps ) ) $.
    $( Existential specialization with two quantifiers, using implicit
       substitution.  (Contributed by NM, 3-Aug-1995.) $)
    spc2egv $p |- ( ( A e. V /\ B e. W ) -> ( ps -> E. x E. y ph ) ) $=
      ( wcel wa cv wceq wex elisset anim12i exdistrv sylibr biimprcd 2eximdv
      syl5com ) EGJZFHJZKZCLEMZDLFMZKZDNCNZBADNCNUDUECNZUFDNZKUHUBUIUCUJCEGODFH
      OPUEUFCDQRBUGACDUGABISTUA $.

    $( Specialization with two quantifiers, using implicit substitution.
       (Contributed by NM, 27-Apr-2004.) $)
    spc2gv $p |- ( ( A e. V /\ B e. W ) -> ( A. x A. y ph -> ps ) ) $=
      ( wcel wa wal wn wex cv wceq notbid spc2egv 2nalexn syl6ibr con4d ) EGJFH
      JKZBADLCLZUBBMZAMZDNCNUCMUEUDCDEFGHCOEPDOFPKABIQRACDSTUA $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y ph $.
    spc2ed.x $e |- F/ x ch $.
    spc2ed.y $e |- F/ y ch $.
    spc2ed.1 $e |- ( ( ph /\ ( x = A /\ y = B ) ) -> ( ps <-> ch ) ) $.
    $( Existential specialization with 2 quantifiers, using implicit
       substitution.  (Contributed by Thierry Arnoux, 23-Aug-2017.) $)
    spc2ed $p |- ( ( ph /\ ( A e. V /\ B e. W ) ) -> ( ch -> E. x E. y ps ) )
      $=
      ( wcel wa cv wceq wex elisset nfv nfan exdistrv sylibr anass ancom anbi1i
      wi anim12i bitr3i biimparc sylbir ex eximd impancom sylan2 ) FHMZGIMZNZAD
      OFPZEOGPZNZEQZDQZCBEQZDQZUFUQURDQZUSEQZNVBUOVEUPVFDFHREGIRUGURUSDEUAUBACV
      BVDACNZVAVCDACDADSJTVGUTBEACEAESKTVGUTBVGUTNZCAUTNZNZBVJCANZUTNVHCAUTUCVK
      VGUTCAUDUEUHVIBCLUIUJUKULULUMUN $.

    $( Specialization with 2 quantifiers, using implicit substitution.
       (Contributed by Thierry Arnoux, 23-Aug-2017.) $)
    spc2d $p |- ( ( ph /\ ( A e. V /\ B e. W ) ) -> ( A. x A. y ps -> ch ) ) $=
      ( wal wn wex wcel wa nfn cv wceq 2nalexn con1bii notbid spc2ed syl5bir
      con1d ) BEMDMZBNZEODOZNAFHPGIPQQZCUGUIBDEUAUBUJCUIAUHCNDEFGHICDJRCEKRADSF
      TESGTQQBCLUCUDUFUE $.
  $}

  ${
    $d x y z A $.  $d x y z B $.  $d x y z C $.  $d x y z ps $.
    spc3egv.1 $e |- ( ( x = A /\ y = B /\ z = C ) -> ( ph <-> ps ) ) $.
    $( Existential specialization with three quantifiers, using implicit
       substitution.  (Contributed by NM, 12-May-2008.) $)
    spc3egv $p |- ( ( A e. V /\ B e. W /\ C e. X ) ->
               ( ps -> E. x E. y E. z ph ) ) $=
      ( wcel w3a cv wceq wex elisset 3anim123i eeeanv biimprcd 2eximdv syl5com
      sylibr eximdv ) FIMZGJMZHKMZNZCOFPZDOGPZEOHPZNZEQZDQCQZBAEQZDQCQUIUJCQZUK
      DQZULEQZNUOUFUQUGURUHUSCFIRDGJREHKRSUJUKULCDETUDBUNUPCDBUMAEUMABLUAUEUBUC
      $.

    $( Specialization with three quantifiers, using implicit substitution.
       (Contributed by NM, 12-May-2008.) $)
    spc3gv $p |- ( ( A e. V /\ B e. W /\ C e. X ) ->
               ( A. x A. y A. z ph -> ps ) ) $=
      ( wcel w3a wal wn wex cv wceq exnal notbid spc3egv exbii bitr2i syl6ibr
      bitri con4d ) FIMGJMHKMNZBAEOZDOZCOZUHBPZAPZEQZDQZCQZUKPZUMULCDEFGHIJKCRF
      SDRGSERHSNABLUAUBUPUJPZCQUQUOURCUOUIPZDQURUNUSDAETUCUIDTUFUCUJCTUDUEUG $.
  $}

  ${
    $d x A $.  $d x ps $.
    spcv.1 $e |- A e. _V $.
    spcv.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Rule of specialization, using implicit substitution.  (Contributed by
       NM, 22-Jun-1994.) $)
    spcv $p |- ( A. x ph -> ps ) $=
      ( cvv wcel wal wi spcgv ax-mp ) DGHACIBJEABCDGFKL $.

    $( Existential specialization, using implicit substitution.  (Contributed
       by NM, 31-Dec-1993.)  (Proof shortened by Eric Schmidt, 22-Dec-2006.) $)
    spcev $p |- ( ps -> E. x ph ) $=
      ( cvv wcel wex wi spcegv ax-mp ) DGHBACIJEABCDGFKL $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y ps $.
    spc2ev.1 $e |- A e. _V $.
    spc2ev.2 $e |- B e. _V $.
    spc2ev.3 $e |- ( ( x = A /\ y = B ) -> ( ph <-> ps ) ) $.
    $( Existential specialization, using implicit substitution.  (Contributed
       by NM, 3-Aug-1995.) $)
    spc2ev $p |- ( ps -> E. x E. y ph ) $=
      ( cvv wcel wex wi spc2egv mp2an ) EJKFJKBADLCLMGHABCDEFJJINO $.
  $}

  ${
    $d x A $.  $d x B $.
    rspct.1 $e |- F/ x ps $.
    $( A closed version of ~ rspc .  (Contributed by Andrew Salmon,
       6-Jun-2011.) $)
    rspct $p |- ( A. x ( x = A -> ( ph <-> ps ) ) -> ( A e. B ->
                   ( A. x e. B ph -> ps ) ) ) $=
      ( cv wceq wb wi wal wcel wral df-ral wa eleq1 adantr simpr imbi12d ex a2i
      alimi nfv nfim nfcv spcgft syl syl7bi com34 pm2.43d ) CGZDHZABIZJZCKZDELZ
      ACEMZBJUOUPUQUPBUQUKELZAJZCKZUOUPUPBJZACENUOULUSVAIZJZCKUPUTVAJJUNVCCULUM
      VBULUMVBULUMOURUPABULURUPIUMUKDEPQULUMRSTUAUBUSVACDEUPBCUPCUCFUDCDUEUFUGU
      HUIUJ $.
  $}

  ${
    $d x A $.  $d x B $.
    rspcdf.1 $e |- F/ x ph $.
    rspcdf.2 $e |- F/ x ch $.
    rspcdf.3 $e |- ( ph -> A e. B ) $.
    rspcdf.4 $e |- ( ( ph /\ x = A ) -> ( ps <-> ch ) ) $.
    $( Restricted specialization, using implicit substitution.  (Contributed by
       Emmett Weisz, 16-Jan-2020.) $)
    rspcdf $p |- ( ph -> ( A. x e. B ps -> ch ) ) $=
      ( cv wceq wb wi wal wcel wral ex alrimi rspct sylc ) ADKELZBCMZNZDOEFPBDF
      QCNAUDDGAUBUCJRSIBCDEFHTUA $.
  $}

  ${
    $d x A $.  $d x B $.
    rspc.1 $e |- F/ x ps $.
    rspc.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Restricted specialization, using implicit substitution.  (Contributed by
       NM, 19-Apr-2005.)  (Revised by Mario Carneiro, 11-Oct-2016.) $)
    rspc $p |- ( A e. B -> ( A. x e. B ph -> ps ) ) $=
      ( wral cv wcel wi wal df-ral nfcv nfv nfim wceq eleq1 imbi12d spcgf
      pm2.43a syl5bi ) ACEHCIZEJZAKZCLZDEJZBACEMUFUGBUEUGBKCDECDNUGBCUGCOFPUCDQ
      UDUGABUCDERGSTUAUB $.

    $( Restricted existential specialization, using implicit substitution.
       (Contributed by NM, 26-May-1998.)  (Revised by Mario Carneiro,
       11-Oct-2016.) $)
    rspce $p |- ( ( A e. B /\ ps ) -> E. x e. B ph ) $=
      ( wcel wa cv wex wrex nfcv nfv nfan wceq eleq1 anbi12d spcegf anabsi5
      df-rex sylibr ) DEHZBIZCJZEHZAIZCKZACELUCBUHUGUDCDECDMUCBCUCCNFOUEDPUFUCA
      BUEDEQGRSTACEUAUB $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ps $.
    rspcv.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Restricted specialization, using implicit substitution.  (Contributed by
       NM, 26-May-1998.) $)
    rspcv $p |- ( A e. B -> ( A. x e. B ph -> ps ) ) $=
      ( nfv rspc ) ABCDEBCGFH $.

    $( Restricted specialization, using implicit substitution.  (Contributed by
       NM, 2-Feb-2006.) $)
    rspccv $p |- ( A. x e. B ph -> ( A e. B -> ps ) ) $=
      ( wcel wral rspcv com12 ) DEGACEHBABCDEFIJ $.

    $( Restricted specialization, using implicit substitution.  (Contributed by
       NM, 13-Sep-2005.) $)
    rspcva $p |- ( ( A e. B /\ A. x e. B ph ) -> ps ) $=
      ( wcel wral rspcv imp ) DEGACEHBABCDEFIJ $.

    $( Restricted specialization, using implicit substitution.  (Contributed by
       NM, 26-Jul-2006.)  (Proof shortened by Andrew Salmon, 8-Jun-2011.) $)
    rspccva $p |- ( ( A. x e. B ph /\ A e. B ) -> ps ) $=
      ( wcel wral rspcv impcom ) DEGACEHBABCDEFIJ $.

    $( Restricted existential specialization, using implicit substitution.
       (Contributed by NM, 26-May-1998.) $)
    rspcev $p |- ( ( A e. B /\ ps ) -> E. x e. B ph ) $=
      ( nfv rspce ) ABCDEBCGFH $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ph $.  $d x ch $.
    rspcimdv.1 $e |- ( ph -> A e. B ) $.
    ${
      rspcimdv.2 $e |- ( ( ph /\ x = A ) -> ( ps -> ch ) ) $.
      $( Restricted specialization, using implicit substitution.  (Contributed
         by Mario Carneiro, 4-Jan-2017.) $)
      rspcimdv $p |- ( ph -> ( A. x e. B ps -> ch ) ) $=
        ( wral cv wcel wi wal df-ral wceq wa simpr eleq1d biimprd imim12d mpid
        spcimdv syl5bi ) BDFIDJZFKZBLZDMZACBDFNAUGEFKZCGAUFUHCLDEFGAUDEOZPZUHUE
        BCUJUEUHUJUDEFAUIQRSHTUBUAUC $.
    $}

    rspcimedv.2 $e |- ( ( ph /\ x = A ) -> ( ch -> ps ) ) $.
    $( Restricted existential specialization, using implicit substitution.
       (Contributed by Mario Carneiro, 4-Jan-2017.) $)
    rspcimedv $p |- ( ph -> ( ch -> E. x e. B ps ) ) $=
      ( wn wral wrex cv wceq wa con3d rspcimdv con2d dfrex2 syl6ibr ) ACBIZDFJZ
      IBDFKAUACATCIDEFGADLEMNCBHOPQBDFRS $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ph $.  $d x ch $.
    rspcdv.1 $e |- ( ph -> A e. B ) $.
    rspcdv.2 $e |- ( ( ph /\ x = A ) -> ( ps <-> ch ) ) $.
    $( Restricted specialization, using implicit substitution.  (Contributed by
       NM, 17-Feb-2007.)  (Revised by Mario Carneiro, 4-Jan-2017.) $)
    rspcdv $p |- ( ph -> ( A. x e. B ps -> ch ) ) $=
      ( cv wceq wa biimpd rspcimdv ) ABCDEFGADIEJKBCHLM $.

    $( Restricted existential specialization, using implicit substitution.
       (Contributed by FL, 17-Apr-2007.)  (Revised by Mario Carneiro,
       4-Jan-2017.) $)
    rspcedv $p |- ( ph -> ( ch -> E. x e. B ps ) ) $=
      ( cv wceq wa biimprd rspcimedv ) ABCDEFGADIEJKBCHLM $.

    rspcebdv.1 $e |- ( ( ph /\ ps ) -> x = A ) $.
    $( Restricted existential specialization, using implicit substitution in
       both directions.  (Contributed by AV, 8-Jan-2022.) $)
    rspcebdv $p |- ( ph -> ( E. x e. B ps <-> ch ) ) $=
      ( wrex wi wa cv wceq wb syldan biimpd expcom pm2.43b rexlimdvw rspcedv
      impbid ) ABDFJCABCDFABCABBCKABLBCABDMENBCOIHPQRSTABCDEFGHUAUB $.
  $}

  ${
    $d A x $.  $d C x $.  $d ch x $.
    rspcdva.1 $e |- ( x = C -> ( ps <-> ch ) ) $.
    rspcdva.2 $e |- ( ph -> A. x e. A ps ) $.
    rspcdva.3 $e |- ( ph -> C e. A ) $.
    $( Restricted specialization, using implicit substitution.  (Contributed by
       Thierry Arnoux, 21-Jun-2020.) $)
    rspcdva $p |- ( ph -> ch ) $=
      ( wcel wral rspcv sylc ) AFEJBDEKCIHBCDFEGLM $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ph $.  $d x ch $.
    rspcedvd.1 $e |- ( ph -> A e. B ) $.
    rspcedvd.2 $e |- ( ( ph /\ x = A ) -> ( ps <-> ch ) ) $.
    rspcedvd.3 $e |- ( ph -> ch ) $.
    $( Restricted existential specialization, using implicit substitution.
       Variant of ~ rspcedv .  (Contributed by AV, 27-Nov-2019.) $)
    rspcedvd $p |- ( ph -> E. x e. B ps ) $=
      ( wrex rspcedv mpd ) ACBDFJIABCDEFGHKL $.
  $}

  ${
    $d x y A $.  $d x B $.  $d x C $.  $d x ps $.  $d x ch $.
    rspceaimv.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Restricted existential specialization of a universally quantified
       implication.  (Contributed by BJ, 24-Aug-2022.) $)
    rspceaimv $p |- ( ( A e. B /\ A. y e. C ( ps -> ch ) ) ->
                                          E. x e. B A. y e. C ( ph -> ch ) ) $=
      ( wi wral cv wceq imbi1d ralbidv rspcev ) ACJZEHKBCJZEHKDFGDLFMZQREHSABCI
      NOP $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ph $.
    rspcedeqvd.1 $e |- ( ph -> A e. B ) $.
    rspcedeqvd.2 $e |- ( ( ph /\ x = A ) -> C = D ) $.
    ${
      $d x D $.
      $( Restricted existential specialization, using implicit substitution.
         Variant of ~ rspcedvd for equations, in which the left hand side
         depends on the quantified variable.  (Contributed by AV,
         24-Dec-2019.) $)
      rspcedeq1vd $p |- ( ph -> E. x e. B C = D ) $=
        ( wceq cv wa eqeq1d eqidd rspcedvd ) AEFIFFIBCDGABJCIKEFFHLAFMN $.
    $}

    $d x C $.
    $( Restricted existential specialization, using implicit substitution.
       Variant of ~ rspcedvd for equations, in which the right hand side
       depends on the quantified variable.  (Contributed by AV,
       24-Dec-2019.) $)
    rspcedeq2vd $p |- ( ph -> E. x e. B C = D ) $=
      ( wceq cv wa eqcomd eqeq2d eqidd rspcedvd ) AEFIEEIBCDGABJCIKZFEEPEFHLMAE
      NO $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x C $.  $d x y D $.
    rspc2.1 $e |- F/ x ch $.
    rspc2.2 $e |- F/ y ps $.
    rspc2.3 $e |- ( x = A -> ( ph <-> ch ) ) $.
    rspc2.4 $e |- ( y = B -> ( ch <-> ps ) ) $.
    $( Restricted specialization with two quantifiers, using implicit
       substitution.  (Contributed by NM, 9-Nov-2012.) $)
    rspc2 $p |- ( ( A e. C /\ B e. D ) -> ( A. x e. C A. y e. D ph ->
                  ps ) ) $=
      ( wcel wral nfcv nfral cv wceq rspc ralbidv sylan9 ) FHNAEIOZDHOCEIOZGINB
      UCUDDFHCDEIDIPJQDRFSACEILUATCBEGIKMTUB $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y V $.  $d x y W $.  $d x y ps $.
    rspc2gv.1 $e |- ( ( x = A /\ y = B ) -> ( ph <-> ps ) ) $.
    $( Restricted specialization with two quantifiers, using implicit
       substitution.  (Contributed by BJ, 2-Dec-2021.) $)
    rspc2gv $p |- ( ( A e. V /\ B e. W ) ->
                                          ( A. x e. V A. y e. W ph -> ps ) ) $=
      ( wral cv wcel wi wal wa df-ral albii wceq eleq1 syl5bi bi2anan9 imbi12d
      imbi2i 19.21v bicomi impexp syl5bbr spc2gv pm2.43a ) ADHJZCGJCKZGLZUJMZCN
      ZEGLZFHLZOZBUJCGPUNULDKZHLZAMZDNZMZCNZUQBUMVBCUJVAULADHPUCQVCULUTMZDNZCNZ
      UQBVBVECVEVBULUTDUDUEQVFUQBVDUQBMZCDEFGHVDULUSOZAMUKERZURFRZOZVGULUSAUFVK
      VHUQABVIULUOVJUSUPUKEGSURFHSUAIUBUGUHUITTT $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x C $.  $d x y D $.  $d x ch $.  $d y ps $.
    rspc2v.1 $e |- ( x = A -> ( ph <-> ch ) ) $.
    rspc2v.2 $e |- ( y = B -> ( ch <-> ps ) ) $.
    $( 2-variable restricted specialization, using implicit substitution.
       (Contributed by NM, 13-Sep-1999.) $)
    rspc2v $p |- ( ( A e. C /\ B e. D ) -> ( A. x e. C A. y e. D ph ->
                  ps ) ) $=
      ( wcel wral cv wceq ralbidv rspcv sylan9 ) FHLAEIMZDHMCEIMZGILBSTDFHDNFOA
      CEIJPQCBEGIKQR $.

    $( 2-variable restricted specialization, using implicit substitution.
       (Contributed by NM, 18-Jun-2014.) $)
    rspc2va $p |- ( ( ( A e. C /\ B e. D ) /\ A. x e. C A. y e. D ph ) ->
                  ps ) $=
      ( wcel wa wral rspc2v imp ) FHLGILMAEINDHNBABCDEFGHIJKOP $.

    $( 2-variable restricted existential specialization, using implicit
       substitution.  (Contributed by NM, 16-Oct-1999.) $)
    rspc2ev $p |- ( ( A e. C /\ B e. D /\ ps ) -> E. x e. C E. y e. D ph ) $=
      ( wcel w3a wrex wa rspcev anim2i 3impb cv wceq rexbidv syl ) FHLZGILZBMUC
      CEINZOZAEINZDHNUCUDBUFUDBOUEUCCBEGIKPQRUGUEDFHDSFTACEIJUAPUB $.
  $}

  ${
    $d z ps $.  $d x ch $.  $d y th $.  $d x y z A $.  $d y z B $.  $d z C $.
    $d x R $.  $d x y S $.  $d x y z T $.
    rspc3v.1 $e |- ( x = A -> ( ph <-> ch ) ) $.
    rspc3v.2 $e |- ( y = B -> ( ch <-> th ) ) $.
    rspc3v.3 $e |- ( z = C -> ( th <-> ps ) ) $.
    $( 3-variable restricted specialization, using implicit substitution.
       (Contributed by NM, 10-May-2005.) $)
    rspc3v $p |- ( ( A e. R /\ B e. S /\ C e. T ) ->
                  ( A. x e. R A. y e. S A. z e. T ph -> ps ) ) $=
      ( wcel wral cv wceq wi wa ralbidv rspc2v rspcv sylan9 3impa ) HKQZILQZJMQ
      ZAGMRZFLREKRZBUAUHUIUBULDGMRZUJBUKUMCGMREFHIKLESHTACGMNUCFSITCDGMOUCUDDBG
      JMPUEUFUG $.

    $( 3-variable restricted existential specialization, using implicit
       substitution.  (Contributed by NM, 25-Jul-2012.) $)
    rspc3ev $p |- ( ( ( A e. R /\ B e. S /\ C e. T ) /\ ps ) ->
                  E. x e. R E. y e. S E. z e. T ph ) $=
      ( wcel wrex cv wceq w3a wa simpl1 simpl2 rspcev 3ad2antl3 rexbidv rspc2ev
      syl3anc ) HKQZILQZJMQZUABUBUJUKDGMRZAGMRZFLREKRUJUKULBUCUJUKULBUDULUJBUMU
      KDBGJMPUEUFUNUMCGMREFHIKLESHTACGMNUGFSITCDGMOUGUHUI $.
  $}

  ${
    $d A x $.  $d B x $.  $d D x $.  $d E x $.
    rspceeqv.1 $e |- ( x = A -> C = D ) $.
    $( Restricted existential specialization in an equality, using implicit
       substitution.  (Contributed by BJ, 2-Sep-2022.) $)
    rspceeqv $p |- ( ( A e. B /\ E = D ) -> E. x e. B E = C ) $=
      ( wceq cv eqeq2d rspcev ) FDHFEHABCAIBHDEFGJK $.
  $}

  ${
    $d ph x z $.  $d ph x y $.  $d ps y $.  $d ps z $.  $d A x $.  $d C x $.
    $d D x $.  $d ch x $.
    ralxpxfr2d.a $e |- A e. _V $.
    ralxpxfr2d.b $e |- ( ph -> ( x e. B <-> E. y e. C E. z e. D x = A ) ) $.
    ralxpxfr2d.c $e |- ( ( ph /\ x = A ) -> ( ps <-> ch ) ) $.
    $( Transfer a universal quantifier between one variable with pair-like
       semantics and two.  (Contributed by Stefan O'Rear, 27-Feb-2015.) $)
    ralxpxfr2d $p |- ( ph -> ( A. x e. B ps <-> A. y e. C A. z e. D ch ) ) $=
      ( wral wi wal wrex albidv ralcom4 ralbii wceq df-ral imbi1d syl5bb bitr2i
      wcel r19.23v albii 3bitr4ri syl6bb pm5.74da biidd ceqsalv 2ralbidv bitrd
      cv ) ABDHNZDUPZGUAZBOZDPZFJNZEINZCFJNEINAUQUSFJQZEIQZBOZDPZVCUQURHUFZBOZD
      PAVGBDHUBAVIVFDAVHVEBLUCRUDUTFJNZDPZEINVJEINZDPVCVGVJEDISVBVKEIUTFDJSTVFV
      LDVLVDBOZEINVFVJVMEIUSBFJUGTVDBEIUGUEUHUIUJAVACEFIJAVAUSCOZDPCAUTVNDAUSBC
      MUKRCCDGKUSCULUMUJUNUO $.
  $}

  ${
    $d A x z $.  $d Y x z $.  $d ph x $.  $d ps z $.  $d th z $.
    rexraleqim.1 $e |- ( x = z -> ( ps <-> ph ) ) $.
    rexraleqim.2 $e |- ( z = Y -> ( ph <-> th ) ) $.
    $( Statement following from existence and generalization with equality.
       (Contributed by AV, 9-Feb-2019.) $)
    rexraleqim $p |- ( ( E. z e. A ph /\ A. x e. A ( ps -> x = Y ) ) -> th ) $=
      ( wrex cv wceq wi wral wcel wa weq eqeq1 imbi12d rspcva syli impancom imp
      biimpd rexlimiva ) AEFJBDKZGLZMZDFNZCAUICMEFEKZFOZUIACAUKUIPUJGLZCUHAULMD
      UJFDEQBAUGULHUFUJGRSTULACIUDUAUBUEUC $.
  $}

  ${
    $d x A $.  $d x B $.
    $( A variable introduction law for class equality, closed form.
       (Contributed by Thierry Arnoux, 2-Mar-2017.) $)
    eqvincg $p |- ( A e. V -> ( A = B <-> E. x ( x = A /\ x = B ) ) ) $=
      ( wcel wceq cv wa wex wi elisset ax-1 eqtr ex jca eximi pm3.43 3syl sylib
      19.37v eqtr2 exlimiv impbid1 ) BDEZBCFZAGZBFZUFCFZHZAIZUDUEUIJZAIZUEUJJUD
      UGAIUEUGJZUEUHJZHZAIULABDKUGUOAUGUMUNUGUELUGUEUHUFBCMNOPUOUKAUEUGUHQPRUEU
      IATSUIUEAUFBCUAUBUC $.

    eqvinc.1 $e |- A e. _V $.
    $( A variable introduction law for class equality.  (Contributed by NM,
       14-Apr-1995.)  (Proof shortened by Andrew Salmon, 8-Jun-2011.)  (Proof
       shortened by Thierry Arnoux, 23-Jan-2022.) $)
    eqvinc $p |- ( A = B <-> E. x ( x = A /\ x = B ) ) $=
      ( cvv wcel wceq cv wa wex wb eqvincg ax-mp ) BEFBCGAHZBGNCGIAJKDABCELM $.
  $}

  ${
    $d A y $.  $d B y $.  $d x y $.
    eqvincf.1 $e |- F/_ x A $.
    eqvincf.2 $e |- F/_ x B $.
    eqvincf.3 $e |- A e. _V $.
    $( A variable introduction law for class equality, using bound-variable
       hypotheses instead of distinct variable conditions.  (Contributed by NM,
       14-Sep-2003.) $)
    eqvincf $p |- ( A = B <-> E. x ( x = A /\ x = B ) ) $=
      ( vy wceq cv wa wex eqvinc nfeq2 nfan nfv eqeq1 anbi12d cbvexv1 bitri ) B
      CHGIZBHZTCHZJZGKAIZBHZUDCHZJZAKGBCFLUCUGGAUAUBAATBDMATCEMNUGGOTUDHUAUEUBU
      FTUDBPTUDCPQRS $.
  $}

  ${
    $d x y A $.  $d y ph $.
    $( Two ways to express substitution of ` A ` for ` x ` in ` ph ` .  This is
       the analogue for classes of ~ sb56 .  (Contributed by NM, 2-Mar-1995.)
       (Revised by BJ, 27-Apr-2019.) $)
    alexeqg $p |- ( A e. V -> ( A. x ( x = A -> ph )
                                                <-> E. x ( x = A /\ ph ) ) ) $=
      ( vy wcel cv wceq wa wex wi wal eqeq2 anbi1d exbidv imbi1d albidv vtoclbg
      sb56 bicomd ) CDFBGZCHZAIZBJZUBAKZBLZUAEGZHZAIZBJUHAKZBLUDUFECDUGCHZUIUCB
      UKUHUBAUGCUAMZNOUKUJUEBUKUHUBAULPQABESRT $.
  $}

  ${
    $d x A $.
    $( Equality implies equivalence with substitution.  (Contributed by NM,
       2-Mar-1995.)  (Proof shortened by BJ, 1-May-2019.) $)
    ceqex $p |- ( x = A -> ( ph <-> E. x ( x = A /\ ph ) ) ) $=
      ( cv wceq wa wex 19.8a ex wi wal cvv wcel wb eqvisset alexeqg syl sylbird
      sp com12 impbid ) BDCEZAUBAFZBGZUBAUDUCBHIUBUDUBAJZBKZAUBCLMUFUDNBCOABCLP
      QUFUBAUEBSTRUA $.
  $}

  ${
    $d x A $.
    ceqsexg.1 $e |- F/ x ps $.
    ceqsexg.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( A representation of explicit substitution of a class for a variable,
       inferred from an implicit substitution hypothesis.  (Contributed by NM,
       11-Oct-2004.) $)
    ceqsexg $p |- ( A e. V -> ( E. x ( x = A /\ ph ) <-> ps ) ) $=
      ( wb cv wceq wa wex nfe1 nfbi ceqex bibi12d biid vtoclg1f ) AAHCIDJZAKZCL
      ZBHCDEUABCTCMFNSAUAABACDOGPAQR $.
  $}

  ${
    $d x A $.  $d x ps $.
    ceqsexgv.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Elimination of an existential quantifier, using implicit substitution.
       (Contributed by NM, 29-Dec-1996.) $)
    ceqsexgv $p |- ( A e. V -> ( E. x ( x = A /\ ph ) <-> ps ) ) $=
      ( nfv ceqsexg ) ABCDEBCGFH $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ps $.
    ceqsrexv.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Elimination of a restricted existential quantifier, using implicit
       substitution.  (Contributed by NM, 30-Apr-2004.) $)
    ceqsrexv $p |- ( A e. B -> ( E. x e. B ( x = A /\ ph ) <-> ps ) ) $=
      ( cv wceq wa wrex wcel wex df-rex an12 exbii bitr4i eleq1 anbi12d bianabs
      ceqsexgv syl5bb ) CGZDHZAIZCEJZUCUBEKZAIZIZCLZDEKZBUEUFUDIZCLUIUDCEMUHUKC
      UCUFANOPUJUIBUGUJBICDEUCUFUJABUBDEQFRTSUA $.

    $( Elimination of a restricted existential quantifier, using implicit
       substitution.  (Contributed by Mario Carneiro, 14-Mar-2014.) $)
    ceqsrexbv $p |- ( E. x e. B ( x = A /\ ph ) <-> ( A e. B /\ ps ) ) $=
      ( wcel cv wceq wa wrex r19.42v eleq1 adantr pm5.32ri bicomi baib ceqsrexv
      wb rexbiia pm5.32i 3bitr3i ) DEGZCHZDIZAJZJZCEKUCUFCEKZJUHUCBJUCUFCELUGUF
      CEUGUDEGZUFUIUFJUGUFUIUCUEUIUCSAUDDEMNOPQTUCUHBABCDEFRUAUB $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x C $.  $d x y D $.  $d x ps $.  $d y ch $.
    ceqsrex2v.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    ceqsrex2v.2 $e |- ( y = B -> ( ps <-> ch ) ) $.
    $( Elimination of a restricted existential quantifier, using implicit
       substitution.  (Contributed by NM, 29-Oct-2005.) $)
    ceqsrex2v $p |- ( ( A e. C /\ B e. D ) ->
      ( E. x e. C E. y e. D ( ( x = A /\ y = B ) /\ ph ) <-> ch ) ) $=
      ( wcel cv wceq wa wrex anass rexbii r19.42v ceqsrexv bitri anbi2d rexbidv
      syl5bb sylan9bb ) FHLZDMFNZEMGNZOAOZEIPZDHPZUHBOZEIPZGILCUKUGUHAOZEIPZOZD
      HPUFUMUJUPDHUJUGUNOZEIPUPUIUQEIUGUHAQRUGUNEISUARUOUMDFHUGUNULEIUGABUHJUBU
      CTUDBCEGIKTUE $.
  $}

  ${
    $d x A $.  $d x B $.
    $( An alternate definition of class membership when the class is a set.
       (Contributed by NM, 18-Aug-1993.)  (Revised by BJ, 12-Feb-2022.) $)
    clel2g $p |- ( A e. V -> ( A e. B <-> A. x ( x = A -> x e. B ) ) ) $=
      ( wcel cv wceq wi wal nfv eleq1 ceqsalg bicomd ) BDEAFZBGNCEZHAIBCEZOPABD
      PAJNBCKLM $.
  $}

  ${
    $d x A $.  $d x B $.
    clel2.1 $e |- A e. _V $.
    $( An alternate definition of class membership when the class is a set.
       (Contributed by NM, 18-Aug-1993.) $)
    clel2 $p |- ( A e. B <-> A. x ( x = A -> x e. B ) ) $=
      ( cvv wcel cv wceq wi wal wb clel2g ax-mp ) BEFBCFAGZBHNCFIAJKDABCELM $.
  $}

  ${
    $d x A $.  $d x B $.
    $( An alternate definition of class membership when the class is a set.
       (Contributed by NM, 13-Aug-2005.) $)
    clel3g $p |- ( B e. V -> ( A e. B <-> E. x ( x = B /\ A e. x ) ) ) $=
      ( wcel cv wceq wa wex eleq2 ceqsexgv bicomd ) CDEAFZCGBMEZHAIBCEZNOACDMCB
      JKL $.
  $}

  ${
    $d x A $.  $d x B $.
    clel3.1 $e |- B e. _V $.
    $( An alternate definition of class membership when the class is a set.
       (Contributed by NM, 18-Aug-1993.) $)
    clel3 $p |- ( A e. B <-> E. x ( x = B /\ A e. x ) ) $=
      ( cvv wcel cv wceq wa wex wb clel3g ax-mp ) CEFBCFAGZCHBNFIAJKDABCELM $.
  $}

  ${
    $d x A $.  $d x B $.
    clel4.1 $e |- B e. _V $.
    $( An alternate definition of class membership when the class is a set.
       (Contributed by NM, 18-Aug-1993.) $)
    clel4 $p |- ( A e. B <-> A. x ( x = B -> A e. x ) ) $=
      ( cv wceq wcel wi wal eleq2 ceqsalv bicomi ) AEZCFBMGZHAIBCGZNOACDMCBJKL
      $.
  $}

  ${
    $d A x $.  $d X x $.
    $( Alternate definition of class membership: a class ` X ` is an element of
       another class ` A ` iff there is an element of ` A ` equal to ` X ` .
       (Contributed by AV, 13-Nov-2020.)  Remove use of ~ ax-10 , ~ ax-11 , and
       ~ ax-12 .  (Revised by Steven Nguyen, 19-May-2023.) $)
    clel5 $p |- ( X e. A <-> E. x e. A X = x ) $=
      ( wcel cv wceq wrex risset eqcom rexbii bitri ) CBDAEZCFZABGCLFZABGACBHMN
      ABLCIJK $.
  $}

  ${
    $d A x $.  $d X x $.
    $( Obsolete version of ~ clel5 as of 19-May-2023.  Alternate definition of
       class membership: a class ` X ` is an element of another class ` A ` iff
       there is an element of ` A ` equal to ` X ` .  (Contributed by AV,
       13-Nov-2020.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    clel5OLD $p |- ( X e. A <-> E. x e. A X = x ) $=
      ( wcel cv wceq wrex id eqeq2 adantl eqidd rspcedvd eleq1a rexlimiv impbii
      wb ) CBDZCAEZFZABGQSCCFZACBQHRCFSTPQRCCIJQCKLSQABRBCMNO $.
  $}

  ${
    $d y A z $.  $d y B z $.
    $( Compare theorem *13.183 in [WhiteheadRussell] p. 178.  Only ` A ` is
       required to be a set.  (Contributed by Andrew Salmon, 3-Jun-2011.)
       Avoid ~ ax-13 .  (Revised by Wolf Lammen, 29-Apr-2023.) $)
    pm13.183 $p |- ( A e. V -> ( A = B <-> A. z ( z = A <-> z = B ) ) ) $=
      ( vy cv wceq weq wb wal eqeq1 eqeq2 bibi1d albidv alrimiv wsb stdpc4 sbbi
      eqsb3 sylbi bibi2i equsb1v biimp mpi syl impbii vtoclbg ) EFZCGZAEHZAFZCG
      ZIZAJZBCGUKBGZULIZAJEBDUHBCKUHBGZUMUPAUQUJUOULUHBUKLMNUIUNUIUMAUHCUKLOUNU
      MAEPZUIUMAEQURUJAEPZULAEPZIZUIUJULAERVAUSUIIZUIUTUIUSEACSUAVBUSUIAEUBUSUI
      UCUDTTUEUFUG $.

    $( Obsolete version of ~ pm13.183 as of 29-Apr-2023.  (Contributed by
       Andrew Salmon, 3-Jun-2011.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    pm13.183OLD $p |- ( A e. V -> ( A = B <-> A. z ( z = A <-> z = B ) ) ) $=
      ( vy cv wceq wal eqeq1 eqeq2 bibi1d albidv alrimiv wsb stdpc4 sbbi bibi2i
      wb eqsb3 sylbi equsb1 biimp mpi syl impbii vtoclbg ) EFZCGZAFZUGGZUICGZRZ
      AHZBCGUIBGZUKRZAHEBDUGBCIUGBGZULUOAUPUJUNUKUGBUIJKLUHUMUHULAUGCUIJMUMULAE
      NZUHULAEOUQUJAENZUKAENZRZUHUJUKAEPUTURUHRZUHUSUHUREACSQVAURUHAEUAURUHUBUC
      TTUDUEUF $.
  $}

  ${
    $d y A $.  $d x y $.  $d y ph $.
    $( Restricted quantifier version of Theorem 19.3 of [Margaris] p. 89.  We
       don't need the nonempty class condition of ~ r19.3rzv when there is an
       outer quantifier.  (Contributed by NM, 25-Oct-2012.) $)
    rr19.3v $p |- ( A. x e. A A. y e. A ph <-> A. x e. A ph ) $=
      ( wral cv weq biidd rspcv ralimia wcel ax-1 ralrimiv ralimi impbii ) ACDE
      ZBDEABDEPABDAACBFDCBGAHIJAPBDAACDACFDKLMNO $.

    $( Restricted quantifier version of Theorem 19.28 of [Margaris] p. 90.  We
       don't need the nonempty class condition of ~ r19.28zv when there is an
       outer quantifier.  (Contributed by NM, 29-Oct-2012.) $)
    rr19.28v $p |- ( A. x e. A A. y e. A ( ph /\ ps )
                      <-> A. x e. A ( ph /\ A. y e. A ps ) ) $=
      ( wa wral cv wcel simpl ralimi weq biidd rspcv syl5 simpr ralimia r19.28v
      jca2 impbii ) ABFZDEGZCEGABDEGZFZCEGUBUDCECHZEIZUBAUCUBADEGUFAUAADEABJKAA
      DUEEDCLAMNOUABDEABPKSQUDUBCEABDERKT $.
  $}

  ${
    $d x A $.  $d x ps $.
    $( Membership in a class abstraction, using implicit substitution.  (Closed
       theorem version of ~ elabg .)  (Contributed by NM, 7-Nov-2005.)  (Proof
       shortened by Andrew Salmon, 8-Jun-2011.) $)
    elabgt $p |- ( ( A e. B /\ A. x ( x = A -> ( ph <-> ps ) ) ) ->
                 ( A e. { x | ph } <-> ps ) ) $=
      ( wcel cv wceq cab wb wi wal nfcv nfab1 nfel2 nfv nfbi pm5.5 spcgf abid
      eleq1 syl5bbr bibi1d biimpd a2i alimi impel ) DEFCGZDHZDACIZFZBJZKZCLULUI
      ABJZKZCLUMULCDECDMUKBCCDUJACNOBCPQUIULRSUOUMCUIUNULUIUNULUIAUKBAUHUJFUIUK
      ACTUHDUJUAUBUCUDUEUFUG $.
  $}

  ${
    elabgf.1 $e |- F/_ x A $.
    elabgf.2 $e |- F/ x ps $.
    elabgf.3 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Membership in a class abstraction, using implicit substitution.  Compare
       Theorem 6.13 of [Quine] p. 44.  This version has bound-variable
       hypotheses in place of distinct variable restrictions.  (Contributed by
       NM, 21-Sep-2003.)  (Revised by Mario Carneiro, 12-Oct-2016.) $)
    elabgf $p |- ( A e. B -> ( A e. { x | ph } <-> ps ) ) $=
      ( cv cab wcel wb nfab1 nfel nfbi wceq eleq1 bibi12d abid vtoclgf ) CIZACJ
      ZKZALDUBKZBLCDEFUDBCCDUBFACMNGOUADPUCUDABUADUBQHRACST $.
  $}

  ${
    $d x A $.
    elabf.1 $e |- F/ x ps $.
    elabf.2 $e |- A e. _V $.
    elabf.3 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Membership in a class abstraction, using implicit substitution.
       (Contributed by NM, 1-Aug-1994.)  (Revised by Mario Carneiro,
       12-Oct-2016.) $)
    elabf $p |- ( A e. { x | ph } <-> ps ) $=
      ( cvv wcel cab wb nfcv elabgf ax-mp ) DHIDACJIBKFABCDHCDLEGMN $.
  $}

  ${
    $d x ps $.  $d x A $.
    elabg.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Membership in a class abstraction, using implicit substitution.  Compare
       Theorem 6.13 of [Quine] p. 44.  (Contributed by NM, 14-Apr-1995.)
       Remove dependency on ~ ax-13 .  (Revised by Steven Nguyen,
       23-Nov-2022.) $)
    elabg $p |- ( A e. V -> ( A e. { x | ph } <-> ps ) ) $=
      ( cv cab wcel wb nfab1 nfel2 nfv nfbi wceq eleq1 bibi12d abid vtoclg1f )
      CGZACHZIZAJDUAIZBJCDEUCBCCDUAACKLBCMNTDOUBUCABTDUAPFQACRS $.

    $( Obsolete version of ~ elabg as of 23-Nov-2022.  Membership in a class
       abstraction, using implicit substitution.  Compare Theorem 6.13 of
       [Quine] p. 44.  (Contributed by NM, 14-Apr-1995.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    elabgOLD $p |- ( A e. V -> ( A e. { x | ph } <-> ps ) ) $=
      ( nfcv nfv elabgf ) ABCDECDGBCHFI $.
  $}

  ${
    $d x ps $.  $d x A $.
    elab.1 $e |- A e. _V $.
    elab.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Membership in a class abstraction, using implicit substitution.  Compare
       Theorem 6.13 of [Quine] p. 44.  (Contributed by NM, 1-Aug-1994.) $)
    elab $p |- ( A e. { x | ph } <-> ps ) $=
      ( nfv elabf ) ABCDBCGEFH $.
  $}

  ${
    elab.xex $e |- ( ph -> X e. _V ) $.
    elab.xmaj $e |- ( ph -> ch ) $.
    elab.xsub $e |- ( x = X -> ( ps <-> ch ) ) $.
    $d x ch $.  $d x X $.
    $( Explicit demonstration the class ` { x | ps } ` is not empty by the
       example ` X ` .  (Contributed by RP, 12-Aug-2020.) $)
    elabd $p |- ( ph -> E. x ps ) $=
      ( cvv wcel wex spcegv sylc ) AEIJCBDKFGBCDEIHLM $.
  $}

  ${
    $d x ps $.  $d x A $.
    elab2g.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    elab2g.2 $e |- B = { x | ph } $.
    $( Membership in a class abstraction, using implicit substitution.
       (Contributed by NM, 13-Sep-1995.) $)
    elab2g $p |- ( A e. V -> ( A e. B <-> ps ) ) $=
      ( wcel cab eleq2i elabg syl5bb ) DEIDACJZIDFIBENDHKABCDFGLM $.
  $}

  ${
    $d x ps $.  $d x A $.
    elab2.1 $e |- A e. _V $.
    elab2.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    elab2.3 $e |- B = { x | ph } $.
    $( Membership in a class abstraction, using implicit substitution.
       (Contributed by NM, 13-Sep-1995.) $)
    elab2 $p |- ( A e. B <-> ps ) $=
      ( cvv wcel wb elab2g ax-mp ) DIJDEJBKFABCDEIGHLM $.
  $}

  ${
    $d x ps $.  $d x A $.
    elab4g.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    elab4g.2 $e |- B = { x | ph } $.
    $( Membership in a class abstraction, using implicit substitution.
       (Contributed by NM, 17-Oct-2012.) $)
    elab4g $p |- ( A e. B <-> ( A e. _V /\ ps ) ) $=
      ( wcel cvv elex elab2g biadanii ) DEHDIHBDEJABCDEIFGKL $.
  $}

  ${
    elab3gf.1 $e |- F/_ x A $.
    elab3gf.2 $e |- F/ x ps $.
    elab3gf.3 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Membership in a class abstraction, with a weaker antecedent than
       ~ elabgf .  (Contributed by NM, 6-Sep-2011.) $)
    elab3gf $p |- ( ( ps -> A e. B ) -> ( A e. { x | ph } <-> ps ) ) $=
      ( wcel cab wb wn elabgf ibi pm2.21 impbid2 ja ) BDEIDACJZIZBKBLSBSBABCDRF
      GHMNBSOPABCDEFGHMQ $.
  $}

  ${
    $d x ps $.  $d x A $.
    elab3g.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Membership in a class abstraction, with a weaker antecedent than
       ~ elabg .  (Contributed by NM, 29-Aug-2006.) $)
    elab3g $p |- ( ( ps -> A e. B ) -> ( A e. { x | ph } <-> ps ) ) $=
      ( nfcv nfv elab3gf ) ABCDECDGBCHFI $.
  $}

  ${
    $d x ps $.  $d x A $.
    elab3.1 $e |- ( ps -> A e. _V ) $.
    elab3.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Membership in a class abstraction using implicit substitution.
       (Contributed by NM, 10-Nov-2000.) $)
    elab3 $p |- ( A e. { x | ph } <-> ps ) $=
      ( cvv wcel wi cab wb elab3g ax-mp ) BDGHIDACJHBKEABCDGFLM $.
  $}

  ${
    $d A x $.  $d V x $.
    $( Implication for the membership in a restricted class abstraction.
       (Contributed by Alexander van der Vekens, 31-Dec-2017.) $)
    elrabi $p |- ( A e. { x e. V | ph } -> A e. V ) $=
      ( wcel cv wa cab crab wceq wex clelab eleq1 anbi1d simprbda exlimiv sylbi
      df-rab eleq2s ) CDEZCBFZDEZAGZBHZABDICUDEUACJZUCGZBKTUCBCLUFTBUEUCTAUEUBT
      AUACDMNOPQABDRS $.
  $}

  ${
    elrabf.1 $e |- F/_ x A $.
    elrabf.2 $e |- F/_ x B $.
    elrabf.3 $e |- F/ x ps $.
    elrabf.4 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Membership in a restricted class abstraction, using implicit
       substitution.  This version has bound-variable hypotheses in place of
       distinct variable restrictions.  (Contributed by NM, 21-Sep-2003.) $)
    elrabf $p |- ( A e. { x e. B | ph } <-> ( A e. B /\ ps ) ) $=
      ( crab wcel cvv wa elex adantr cv cab df-rab eleq2i nfel nfan wceq elabgf
      eleq1 anbi12d syl5bb pm5.21nii ) DACEJZKZDLKZDEKZBMZDUHNUKUJBDENOUIDCPZEK
      ZAMZCQZKUJULUHUPDACERSUOULCDLFUKBCCDEFGTHUAUMDUBUNUKABUMDEUDIUEUCUFUG $.
  $}

  ${
    $d x y $.  $d A y $.
    rabtru.1 $e |- F/_ x A $.
    $( Abstract builder using the constant wff ` T. ` (Contributed by Thierry
       Arnoux, 4-May-2020.) $)
    rabtru $p |- { x e. A | T. } = A $=
      ( vy wtru crab cv wcel tru nfcv nftru weq biidd elrabf mpbiran2 eqriv ) D
      EABFZBDGZQHRBHEIEEARBARJCAKADLEMNOP $.
  $}

  ${
    $d A x $.
    rabeqc.1 $e |- ( x e. A -> ph ) $.
    $( A restricted class abstraction equals the restricting class if its
       condition follows from the membership of the free setvar variable in the
       restricting class.  (Contributed by AV, 20-Apr-2022.) $)
    rabeqc $p |- { x e. A | ph } = A $=
      ( crab cv wcel wa cab df-rab wceq wb abeq1 pm4.71i bicomi mpgbir eqtri )
      ABCEBFCGZAHZBIZCABCJTCKSRLBSBCMRSRADNOPQ $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ps $.
    $( Membership in a restricted class abstraction, using implicit
       substitution.  (Closed theorem version of ~ elrab3 .)  (Contributed by
       Thierry Arnoux, 31-Aug-2017.) $)
    elrab3t $p |- ( ( A. x ( x = A -> ( ph <-> ps ) ) /\ A e. B ) ->
                                           ( A e. { x e. B | ph } <-> ps ) ) $=
      ( crab wcel cv wa cab wceq wb wi wal df-rab eleq2i id nfa1 nfv nfan eleq1
      sp biimparc biantrurd bibi1d pm5.74da syl5ibcom imp alrimi elabgt syl2an2
      syl5bb ) DACEFZGDCHZEGZAIZCJZGZUNDKZABLZMZCNZDEGZIZBUMUQDACEOPVCVCVBUSUPB
      LZMZCNURBLVCQVDVFCVBVCCVACRVCCSTVBVCVFVBVAVCVFVACUBVCUSUTVEVCUSIZAUPBVGUO
      AUSUOVCUNDEUAUCUDUEUFUGUHUIUPBCDEUJUKUL $.
  $}

  ${
    $d x ps $.  $d x A $.  $d x B $.
    elrab.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Membership in a restricted class abstraction, using implicit
       substitution.  (Contributed by NM, 21-May-1999.)  Remove dependency on
       ~ ax-13 .  (Revised by Steven Nguyen, 23-Nov-2022.) $)
    elrab $p |- ( A e. { x e. B | ph } <-> ( A e. B /\ ps ) ) $=
      ( crab wcel cvv wa elex adantr wceq eleq1 anbi12d df-rab elab2g pm5.21nii
      cv ) DACEGZHDIHZDEHZBJZDTKUBUABDEKLCSZEHZAJUCCDTIUDDMUEUBABUDDENFOACEPQR
      $.

    $( Obsolete version of ~ elrab as of 23-Nov-2022.  Membership in a
       restricted class abstraction, using implicit substitution.  (Contributed
       by NM, 21-May-1999.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    elrabOLD $p |- ( A e. { x e. B | ph } <-> ( A e. B /\ ps ) ) $=
      ( nfcv nfv elrabf ) ABCDECDGCEGBCHFI $.

    $( Membership in a restricted class abstraction, using implicit
       substitution.  (Contributed by NM, 5-Oct-2006.) $)
    elrab3 $p |- ( A e. B -> ( A e. { x e. B | ph } <-> ps ) ) $=
      ( crab wcel elrab baib ) DACEGHDEHBABCDEFIJ $.
  $}

  ${
    $d A x $.  $d B x $.  $d ch x $.
    elrabd.1 $e |- ( x = A -> ( ps <-> ch ) ) $.
    elrabd.2 $e |- ( ph -> A e. B ) $.
    elrabd.3 $e |- ( ph -> ch ) $.
    $( Membership in a restricted class abstraction, using implicit
       substitution.  Deduction version of ~ elrab .  (Contributed by Glauco
       Siliprandi, 23-Oct-2021.) $)
    elrabd $p |- ( ph -> A e. { x e. B | ps } ) $=
      ( wcel crab elrab sylanbrc ) AEFJCEBDFKJHIBCDEFGLM $.
  $}

  ${
    $d x ps $.  $d x A $.  $d x B $.
    elrab2.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    elrab2.2 $e |- C = { x e. B | ph } $.
    $( Membership in a class abstraction, using implicit substitution.
       (Contributed by NM, 2-Nov-2006.) $)
    elrab2 $p |- ( A e. C <-> ( A e. B /\ ps ) ) $=
      ( wcel crab wa eleq2i elrab bitri ) DFIDACEJZIDEIBKFODHLABCDEGMN $.
  $}

  ${
    $d x y $.  $d y A $.  $d y ps $.
    ralab.1 $e |- ( y = x -> ( ph <-> ps ) ) $.
    $( Universal quantification over a class abstraction.  (Contributed by Jeff
       Madsen, 10-Jun-2010.) $)
    ralab $p |- ( A. x e. { y | ph } ch <-> A. x ( ps -> ch ) ) $=
      ( cab wral cv wcel wi wal df-ral vex elab imbi1i albii bitri ) CDAEGZHDIZ
      SJZCKZDLBCKZDLCDSMUBUCDUABCABETDNFOPQR $.

    $( Universal quantification over a restricted class abstraction.
       (Contributed by Jeff Madsen, 10-Jun-2010.) $)
    ralrab $p |- ( A. x e. { y e. A | ph } ch <-> A. x e. A ( ps -> ch ) ) $=
      ( wi crab cv wcel wa elrab imbi1i impexp bitri ralbii2 ) CBCHZDAEFIZFDJZS
      KZCHTFKZBLZCHUBRHUAUCCABETFGMNUBBCOPQ $.

    $( Existential quantification over a class abstraction.  (Contributed by
       Mario Carneiro, 23-Jan-2014.)  (Revised by Mario Carneiro,
       3-Sep-2015.) $)
    rexab $p |- ( E. x e. { y | ph } ch <-> E. x ( ps /\ ch ) ) $=
      ( cab wrex cv wcel wa wex df-rex vex elab anbi1i exbii bitri ) CDAEGZHDIZ
      SJZCKZDLBCKZDLCDSMUBUCDUABCABETDNFOPQR $.

    $( Existential quantification over a class abstraction.  (Contributed by
       Jeff Madsen, 17-Jun-2011.)  (Revised by Mario Carneiro, 3-Sep-2015.) $)
    rexrab $p |- ( E. x e. { y e. A | ph } ch <-> E. x e. A ( ps /\ ch ) ) $=
      ( wa crab cv wcel elrab anbi1i anass bitri rexbii2 ) CBCHZDAEFIZFDJZRKZCH
      SFKZBHZCHUAQHTUBCABESFGLMUABCNOP $.
  $}

  ${
    $d x y $.  $d x A $.  $d x ch $.  $d x ph $.  $d y ps $.
    ralab2.1 $e |- ( x = y -> ( ps <-> ch ) ) $.
    $( Universal quantification over a class abstraction.  (Contributed by
       Mario Carneiro, 3-Sep-2015.) $)
    ralab2 $p |- ( A. x e. { y | ph } ps <-> A. y ( ph -> ch ) ) $=
      ( cab wral cv wcel wi wal df-ral nfsab1 nfv nfim weq eleq1w abid syl6bb
      imbi12d cbvalv1 bitri ) BDAEGZHDIUDJZBKZDLACKZELBDUDMUFUGDEUEBEAEDNBEOPUG
      DODEQZUEABCUHUEEIUDJADEUDRAESTFUAUBUC $.

    $( Universal quantification over a restricted class abstraction.
       (Contributed by Mario Carneiro, 3-Sep-2015.) $)
    ralrab2 $p |- ( A. x e. { y e. A | ph } ps <-> A. y e. A ( ph -> ch ) ) $=
      ( crab wral cv wcel wa cab wi wal df-rab raleqi ralab2 impexp albii
      df-ral bitr4i 3bitri ) BDAEFHZIBDEJFKZALZEMZIUFCNZEOZACNZEFIZBDUDUGAEFPQU
      FBCDEGRUIUEUJNZEOUKUHULEUEACSTUJEFUAUBUC $.

    $( Existential quantification over a class abstraction.  (Contributed by
       Mario Carneiro, 3-Sep-2015.) $)
    rexab2 $p |- ( E. x e. { y | ph } ps <-> E. y ( ph /\ ch ) ) $=
      ( cab wrex cv wcel wa wex df-rex nfsab1 nfv nfan weq eleq1w abid syl6bb
      anbi12d cbvexv1 bitri ) BDAEGZHDIUDJZBKZDLACKZELBDUDMUFUGDEUEBEAEDNBEOPUG
      DODEQZUEABCUHUEEIUDJADEUDRAESTFUAUBUC $.

    $( Existential quantification over a class abstraction.  (Contributed by
       Mario Carneiro, 3-Sep-2015.) $)
    rexrab2 $p |- ( E. x e. { y e. A | ph } ps <-> E. y e. A ( ph /\ ch ) ) $=
      ( crab wrex cv wcel wa cab wex df-rab rexeqi rexab2 anass exbii df-rex
      bitr4i 3bitri ) BDAEFHZIBDEJFKZALZEMZIUECLZENZACLZEFIZBDUCUFAEFOPUEBCDEGQ
      UHUDUILZENUJUGUKEUDACRSUIEFTUAUB $.
  $}

  ${
    $d x z $.  $d A z $.
    $( Identity used to create closed-form versions of bound-variable
       hypothesis builders for class expressions.  (Contributed by NM,
       10-Nov-2005.)  (Proof shortened by Mario Carneiro, 12-Oct-2016.) $)
    abidnf $p |- ( F/_ x A -> { z | A. x z e. A } = A ) $=
      ( wnfc cv wcel wal sp nfcr nf5rd impbid2 abbi1dv ) ACDZBECFZAGZBCMONNAHMN
      AABCIJKL $.
  $}

  ${
    $d x z $.  $d z A $.
    dedhb.1 $e |- ( A = { z | A. x z e. A } -> ( ph <-> ps ) ) $.
    dedhb.2 $e |- ps $.
    $( A deduction theorem for converting the inference ` |- F/_ x A ` =>
       ` |- ph ` into a closed theorem.  Use ~ nfa1 and ~ nfab to eliminate the
       hypothesis of the substitution instance ` ps ` of the inference.  For
       converting the inference form into a deduction form, ~ abidnf is useful.
       (Contributed by NM, 8-Dec-2006.) $)
    dedhb $p |- ( F/_ x A -> ph ) $=
      ( wnfc cv wcel wal cab wceq wb abidnf eqcomd syl mpbiri ) CEHZABGSEDIEJCK
      DLZMABNSTECDEOPFQR $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ph $.
    nelrdva.1 $e |- ( ( ph /\ x e. A ) -> x =/= B ) $.
    $( Deduce negative membership from an implication.  (Contributed by Thierry
       Arnoux, 27-Nov-2017.) $)
    nelrdva $p |- ( ph -> -. B e. A ) $=
      ( wcel wceq wa eqidd wne cv wi eleq1 anbi2d imbi12d vtoclg anabsi7 neneqd
      neeq1 pm2.65da ) ADCFZDDGAUAHZDIUBDDAUADDJZABKZCFZHZUDDJZLUBUCLBDCUDDGZUF
      UBUGUCUHUEUAAUDDCMNUDDDSOEPQRT $.
  $}


  ${
    $d y ph $.  $d x y ps $.  $d x y A $.
    eqeu.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( A condition which implies existential uniqueness.  (Contributed by Jeff
       Hankins, 8-Sep-2009.) $)
    eqeu $p |- ( ( A e. B /\ ps /\ A. x ( ph -> x = A ) ) -> E! x ph ) $=
      ( vy wcel cv wceq wi wal w3a wex weq weu spcegv imp 3adant3 eqeq2 3adant2
      imbi2d albidv eu3v sylanbrc ) DEHZBACIZDJZKZCLZMACNZACGOZKZCLZGNZACPUFBUK
      UJUFBUKABCDEFQRSUFUJUOBUFUJUOUNUJGDEGIZDJZUMUICUQULUHAUPDUGTUBUCQRUAACGUD
      UE $.
  $}

  ${
    $d x y A $.
    $( There exists at most one set equal to a given class.  (Contributed by
       NM, 8-Mar-1995.)  Shorten combined proofs of ~ moeq and ~ eueq .  (Proof
       shortened by BJ, 24-Sep-2022.) $)
    moeq $p |- E* x x = A $=
      ( vy cv wceq wmo wa weq wi wal eqtr3 gen2 eqeq1 mo4 mpbir ) ADZBEZAFQCDZB
      EZGACHIZCJAJTACPRBKLQSACPRBMNO $.
  $}

  ${
    $d x A $.
    $( A class is a set if and only if there exists a unique set equal to it.
       (Contributed by NM, 25-Nov-1994.)  Shorten combined proofs of ~ moeq and
       ~ eueq .  (Proof shortened by BJ, 24-Sep-2022.) $)
    eueq $p |- ( A e. _V <-> E! x x = A ) $=
      ( cv wceq wex wmo wa cvv wcel weu moeq biantru isset df-eu 3bitr4i ) ACBD
      ZAEZQPAFZGBHIPAJRQABKLABMPANO $.
  $}

  ${
    $d x y A $.
    $( Obsolete proof of ~ eueq as of 24-Sep-2022.  (Contributed by NM,
       25-Nov-1994.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    eueqOLD $p |- ( A e. _V <-> E! x x = A ) $=
      ( vy cv wceq wex wa wi wal cvv wcel weu eqtr3 biantru isset eqeq1 3bitr4i
      gen2 eu4 ) ADZBEZAFZUBUACDZBEZGTUCEHZCIAIZGBJKUAALUFUBUEACTUCBMRNABOUAUDA
      CTUCBPSQ $.
  $}

  ${
    $d x A $.
    eueqi.1 $e |- A e. _V $.
    $( There exists a unique set equal to a given set.  Inference associated
       with ~ euequ .  See ~ euequ in the case of a setvar.  (Contributed by
       NM, 5-Apr-1995.) $)
    eueqi $p |- E! x x = A $=
      ( cvv wcel cv wceq weu eueq mpbi ) BDEAFBGAHCABIJ $.
  $}

  ${
    $d x ph $.  $d x A $.  $d x B $.
    eueq2.1 $e |- A e. _V $.
    eueq2.2 $e |- B e. _V $.
    $( Equality has existential uniqueness (split into 2 cases).  (Contributed
       by NM, 5-Apr-1995.) $)
    eueq2 $p |- E! x ( ( ph /\ x = A ) \/ ( -. ph /\ x = B ) ) $=
      ( cv wceq wa wn weu eueqi euanv biimpri mpan2 euorv bianfd eubidv mpbid
      wo notnot syl2anc orcom orbi2d syl5bb mpdan id orbi1d pm2.61i ) AABGZCHZI
      ZAJZUJDHZIZTZBKZAUMULTZBKZUQAUMJULBKZUSAUAZAUKBKZUTBCELUTAVBIAUKBMNOUMULB
      PUBAURUPBURULUMTAUPUMULUCAUMUOULAUMUNVAQUDUERSUMAUOTZBKZUQUMUOBKZVDUMUNBK
      ZVEBDFLVEUMVFIUMUNBMNOAUOBPUFUMVCUPBUMAULUOUMAUKUMUGQUHRSUI $.
  $}

  ${
    $d x ph $.  $d x ps $.  $d x A $.  $d x B $.  $d x C $.
    eueq3.1 $e |- A e. _V $.
    eueq3.2 $e |- B e. _V $.
    eueq3.3 $e |- C e. _V $.
    eueq3.4 $e |- -. ( ph /\ ps ) $.
    $( Equality has existential uniqueness (split into 3 cases).  (Contributed
       by NM, 5-Apr-1995.)  (Proof shortened by Mario Carneiro,
       28-Sep-2015.) $)
    eueq3 $p |- E! x ( ( ph /\ x = A ) \/ ( -. ( ph \/ ps ) /\ x = B )
                \/ ( ps /\ x = C ) ) $=
      ( wceq wa wo wn w3o weu eueqi ibar wb con2i cv pm2.45 imnani jaoi orbi12d
      bianfd mtbid biorf bitrd 3orrot df-3or bitri syl6bbr eubidv adantr pm2.46
      syl mpbii simpl orim12i con3i 3orcomb ecase3 ) ABACUAZDKZLZABMZNZVDEKZLZB
      VDFKZLZOZCPZAVECPVNCDGQAVEVMCAVEVJVLMZVFMZVMAVEVFVPAVERAVONVFVPSAVHBMZVOV
      QAVHANBABUBZABABJUCZTUDTAVHVJBVLAVHVIVHAVRTUFABVKVSUFUEUGVOVFUHUQUIVMVJVL
      VFOVPVFVJVLUJVJVLVFUKULUMUNURBVKCPVNCFIQBVKVMCBVKVFVJMZVLMZVMBVKVLWABVKRB
      VTNVLWASVTBVFBNZVJAWBVEVSUOVHWBVIABUPUOUDTVTVLUHUQUIVFVJVLUKUMUNURVHVICPV
      NCEHQVHVIVMCVHVIVFVLMZVJMZVMVHVIVJWDVHVIRVHWCNVJWDSWCVGVFAVLBAVEUSBVKUSUT
      VAWCVJUHUQUIVMVFVLVJOWDVFVJVLVBVFVLVJUKULUMUNURVC $.
  $}

  ${
    $d x A $.
    $( Obsolete proof of ~ moeq as of 24-Sep-2022.  (Contributed by NM,
       8-Mar-1995.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    moeqOLD $p |- E* x x = A $=
      ( cv wceq wmo wex weu wi cvv wcel isset eueqOLD sylbb1 moeu mpbir ) ACBDZ
      AEPAFZPAGZHBIJQRABKABLMPANO $.
  $}

  ${
    $d x y ph $.  $d x y ps $.  $d x y A $.  $d x y B $.  $d x y C $.
    moeq3.1 $e |- B e. _V $.
    moeq3.2 $e |- C e. _V $.
    moeq3.3 $e |- -. ( ph /\ ps ) $.
    $( "At most one" property of equality (split into 3 cases).  (The first two
       hypotheses could be eliminated with longer proof.)  (Contributed by NM,
       23-Apr-1995.) $)
    moeq3 $p |- E* x ( ( ph /\ x = A ) \/ ( -. ( ph \/ ps ) /\ x = B )
                \/ ( ps /\ x = C ) ) $=
      ( vy cvv cv wceq wa wo wn w3o weu biidd 3orass wmo eqeq2 anbi2d 3orbi123d
      wcel eubidv vex vtoclg eumo syl wi wal eqvisset pm2.21 syl5 anim2d orim1d
      eueq3 3imtr4g alrimiv euimmo mpisyl pm2.61i ) DKUEZACLZDMZNZABOPVEEMNZBVE
      FMNZQZCUAZVDVJCRZVKAVEJLZMZNZVHVIQZCRZVLJDKVMDMZVPVJCVRVOVGVHVHVIVIVRVNVF
      AVMDVEUBUCVRVHSVRVISUDUFABCVMEFJUGGHIURZUHVJCUIUJVDPZVJVPUKZCULVQVKVTWACV
      TVGVHVIOZOVOWBOVJVPVTVGVOWBVTVFVNAVFVDVTVNCDUMVDVNUNUOUPUQVGVHVITVOVHVITU
      SUTVSVJVPCVAVBVC $.
  $}

  ${
    $d x y A $.
    mosub.1 $e |- E* x ph $.
    $( "At most one" remains true after substitution.  (Contributed by NM,
       9-Mar-1995.) $)
    mosub $p |- E* x E. y ( y = A /\ ph ) $=
      ( cv wceq wmo wal wa wex moeq ax-gen moexexv mp2an ) CFDGZCHABHZCIPAJCKBH
      CDLQCEMPACBNO $.
  $}

  ${
    $d x y A $.  $d y ph $.
    $( Theorem for inferring "at most one."  (Contributed by NM,
       17-Oct-1996.) $)
    mo2icl $p |- ( A. x ( ph -> x = A ) -> E* x ph ) $=
      ( vy cvv wcel cv wceq wi wal wmo weq eqeq2 imbi2d albidv imbi1d wex 19.8a
      df-mo wn sylibr vtoclg eqvisset imim2i con3rr3 alimdv alnex nexmo pm2.61i
      sylbi syl6 ) CEFZABGZCHZIZBJZABKZIZABDLZIZBJZUQIURDCEDGZCHZVAUPUQVCUTUOBV
      CUSUNAVBCUMMNOPVAVADQUQVADRABDSUAUBULTZUPATZBJZUQVDUOVEBUOAULUNULABCUCUDU
      EUFVFABQTUQABUGABUHUJUKUI $.
  $}

  ${
    $d x y A $.  $d y ph $.  $d x y ps $.
    moi2.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Consequence of "at most one."  (Contributed by NM, 2-Jan-2015.) $)
    mob2 $p |- ( ( A e. B /\ E* x ph /\ ph ) -> ( x = A <-> ps ) ) $=
      ( vy wcel wmo w3a cv wceq simp3 syl5ibcom wi wa wsb wal nfv sbhypf anbi2d
      eqeq2 imbi12d spcgv nfs1v sbequ12 mo4f sp sylbi impel expd 3impia impbid
      ) DEHZACIZAJZCKZDLZBUPAURBUNUOAMFNUNUOABUROUNUOPABURUNAACGQZPZUQGKZLZOZGR
      ZABPZUROZUOVCVFGDEVADLZUTVEVBURVGUSBAABCGDBCSFTUAVADUQUBUCUDUOVDCRVDAUSCG
      ACGUEACGUFUGVDCUHUIUJUKULUM $.

    $( Consequence of "at most one."  (Contributed by NM, 29-Jun-2008.) $)
    moi2 $p |- ( ( ( A e. B /\ E* x ph ) /\ ( ph /\ ps ) ) -> x = A ) $=
      ( wcel wmo wa cv wceq wb mob2 3expa biimprd impr ) DEGZACHZIZABCJDKZSAITB
      QRATBLABCDEFMNOP $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ch $.  $d x ps $.
    moi.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    moi.2 $e |- ( x = B -> ( ph <-> ch ) ) $.
    $( Equality implied by "at most one."  (Contributed by NM, 18-Feb-2006.) $)
    mob $p |- ( ( ( A e. C /\ B e. D ) /\ E* x ph /\ ps ) ->
                ( A = B <-> ch ) ) $=
      ( wcel wa wmo wceq wb wi cvv elex w3a nfv nfmo1 nf3an nfim 3anbi3d bibi1d
      cv eqeq1 imbi12d mob2 vtoclg1f com12 3expib syl com3r imp 3impib ) EGKZFH
      KZLADMZBEFNZCOZUQURUSBLZVAPURVBUQVAURFQKZVBUQVAPZPFHRVCUSBVDUQVCUSBSZVAVC
      USASZDUFZFNZCOZPVEVAPDEGVEVADVCUSBDVCDTADUABDTUBVADTUCVGENZVFVEVIVAVJABVC
      USIUDVJVHUTCVGEFUGUEUHACDFQJUIUJUKULUMUNUOUP $.

    $( Equality implied by "at most one."  (Contributed by NM, 18-Feb-2006.) $)
    moi $p |- ( ( ( A e. C /\ B e. D ) /\ E* x ph /\ ( ps /\ ch ) ) ->
              A = B ) $=
      ( wcel wa wmo wceq wi w3a mob biimprd 3expia impd 3impia ) EGKFHKLZADMZBC
      LEFNZUBUCLBCUDUBUCBCUDOUBUCBPUDCABCDEFGHIJQRSTUA $.
  $}

  ${
    $d B x $.  $d A x $.  $d ps x $.
    morex.1 $e |- B e. _V $.
    morex.2 $e |- ( x = B -> ( ph <-> ps ) ) $.
    $( Derive membership from uniqueness.  (Contributed by Jeff Madsen,
       2-Sep-2009.) $)
    morex $p |- ( ( E. x e. A ph /\ E* x ph ) -> ( ps -> B e. A ) ) $=
      ( wmo wrex wcel wi cv wa wex df-rex exancom bitri wal nfmo1 nfe1 nfan syl
      mopick alrimi wceq eleq1 imbi12d spcv sylan2b ancoms ) ACHZACDIZBEDJZKZUL
      UKACLZDJZMZCNZUNULUPAMCNURACDOUPACPQUKURMZAUPKZCRUNUSUTCUKURCACSUQCTUAAUP
      CUCUDUTUNCEFUOEUEABUPUMGUOEDUFUGUHUBUIUJ $.
  $}

  ${
    $d x ph $.  $d x A $.
    euxfr2.1 $e |- A e. _V $.
    euxfr2.2 $e |- E* y x = A $.
    $( Transfer existential uniqueness from a variable ` x ` to another
       variable ` y ` contained in expression ` A ` .  (Contributed by NM,
       14-Nov-2004.) $)
    euxfr2 $p |- ( E! x E. y ( x = A /\ ph ) <-> E! y ph ) $=
      ( cv wceq wa wex weu wmo wi 2euswap moani ancom mobii mpbi mpg moeq biidd
      impbii ceqsexv eubii bitri ) BGDHZAIZCJBKZUGBJZCKZACKUHUJUGCLZUHUJMBUGBCN
      AUFIZCLUKUFACFOULUGCAUFPZQRSUGBLZUJUHMCUGCBNULBLUNUFABBDTOULUGBUMQRSUBUIA
      CAABDEUFAUAUCUDUE $.
  $}

  ${
    $d x ps $.  $d y ph $.  $d x A $.
    euxfr.1 $e |- A e. _V $.
    euxfr.2 $e |- E! y x = A $.
    euxfr.3 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Transfer existential uniqueness from a variable ` x ` to another
       variable ` y ` contained in expression ` A ` .  (Contributed by NM,
       14-Nov-2004.) $)
    euxfr $p |- ( E! x ph <-> E! y ps ) $=
      ( weu cv wceq wa wex euex ax-mp biantrur 19.41v pm5.32i exbii 3bitr2i
      eubii eumoi euxfr2 bitri ) ACICJEKZBLZDMZCIBDIAUGCAUEDMZALUEALZDMUGUHAUED
      IUHGUEDNOPUEADQUIUFDUEABHRSTUABCDEFUEDGUBUCUD $.
  $}

  ${
    $d y z w ph $.  $d x z ps $.  $d y z w A $.  $d x z B $.  $d x y w $.
    euind.1 $e |- B e. _V $.
    euind.2 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Existential uniqueness via an indirect equality.  (Contributed by NM,
       11-Oct-2010.) $)
    euind $p |- ( ( A. x A. y ( ( ph /\ ps ) -> A = B ) /\ E. x ph )
                 -> E! z A. x ( ph -> z = A ) ) $=
      ( vw wa wceq wi wal wex cv exbii bitri imim2i sylib cbvexvw isseti 19.41v
      weu biantrur excom 3bitr2i wb eqeq2 biimpr an31 imbi1i impexp 3bitr3i syl
      2alimi 19.23v albii 19.21v eximdv syl5bi pm4.24 biimpi prth eqtr3 alanimi
      imp syl56 com12 alrimivv adantl eqeq1 imbi2d albidv eu4 sylanbrc ) ABKZFG
      LZMZDNCNZACOZKAEPZFLZMZCNZEOZWEAJPZFLZMZCNZKZWBWGLZMZJNENZWEEUDVTWAWFWAWB
      GLZBKZDOZEOZVTWFWABDOZWRABCDIUAWSWOEOZBKZDOWPEOZDOWRBXADWTBEGHUBUEQXBXADW
      OBEUCQWPDEUFUGRVTWQWEEVTWPWDMZDNZCNZWQWEMZVSXCCDVSVQWCWOUHZMZXCVRXGVQFGWB
      UISXHVQWOWCMZMZXCXGXIVQWCWOUJSVQWOKZWCMWPAKZWCMXJXCXKXLWCABWOUKULVQWOWCUM
      WPAWCUMUNTUOUPXEWQWDMZCNXFXDXMCWPWDDUQURWQWDCUSRTUTVAVGWAWNVTWAWMEJWKWAWL
      WKAWLMZCNWAWLMWDWIXNCAAAKZWDWIKWCWHKWLAXOAVBVCAWCAWHVDWBWGFVEVHVFAWLCUQTV
      IVJVKWEWJEJWLWDWICWLWCWHAWBWGFVLVMVNVOVP $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d y ph $.  $d x ps $.
    $( A way to express restricted uniqueness.  (Contributed by NM,
       22-Nov-1994.) $)
    reu2 $p |- ( E! x e. A ph <-> ( E. x e. A ph /\
               A. x e. A A. y e. A ( ( ph /\ [ y / x ] ph ) -> x = y ) ) ) $=
      ( cv wcel wa weu wex wsb weq wi wal wreu wral df-ral impexp albii 3bitr4i
      nfv wrex eu2 df-reu df-rex 19.21v nfs1v nfan eleq1w sbequ12 anbi12d sbiev
      anbi2i an4 bitri imbi1i 3bitri imbi2i bitr4i anbi12i ) BEDFZAGZBHVABIZVAV
      ABCJZGZBCKZLZCMZBMZGABDNABDUAZAABCJZGZVELZCDOZBDOZGVABCVACTUBABDUCVIVBVNV
      HABDUDVNUTVMLZBMVHVMBDPVGVOBUTCEDFZVLLZLZCMUTVQCMZLVGVOUTVQCUEVFVRCVFUTVP
      GZVKGZVELVTVLLVRVDWAVEVDVAVPVJGZGWAVCWBVAVAWBBCVPVJBVPBTABCUFUGVEUTVPAVJB
      CDUHABCUIUJUKULUTAVPVJUMUNUOVTVKVEQUTVPVLQUPRVMVSUTVLCDPUQSRURUSS $.

    $( A way to express restricted uniqueness.  (Contributed by NM,
       20-Oct-2006.) $)
    reu6 $p |- ( E! x e. A ph <-> E. y e. A A. x e. A ( ph <-> x = y ) ) $=
      ( wreu cv wcel wa weu weq wb wral wrex df-reu wal wex imim2i imp 3bitr4i
      wi 19.28v wsb eleq1w sbequ12 anbi12d equequ1 bibi12d sylbir syl6bi spimvw
      equid tbt simpl ibar bibi1d biimprcd sps axc4i biimp adantl eleq1a adantr
      impd biimpr com23 adantll jcai ex impbid alimi impbii df-ral anbi2i exbii
      jca eu6 df-rex bitri ) ABDEBFZDGZAHZBIZABCJZKZBDLZCDMZABDNWAWCKZBOZCPCFZD
      GZWEHZCPWBWFWHWKCWJVTWDTZHZBOZWJWLBOZHWHWKWJWLBUAWHWNWGWMBWHWJWLWGWJBCWCW
      GWJABCUBZHZCCJZKZWJWCWAWQWCWRWCVTWJAWPBCDUCABCUDUEBCCUFUGWSWQWJWRWQCUKULW
      JWPUMUHUIUJWGWLBVTWDWGVTAWAWCVTAUNUOUPUQVOURWMWGBWMWAWCWLWAWCTWJWLVTAWCWD
      AWCTVTAWCUSQVCUTWMWCWAWMWCHVTAWMWCVTWJWCVTTWLWIDVSVAVBRWLWCVTATZWJWLWCWTW
      LVTWCAWDWCATVTAWCVDQVERVFVGVHVIVJVKWEWOWJWDBDVLVMSVNWABCVPWECDVQSVR $.

    $( A way to express restricted uniqueness.  (Contributed by NM,
       24-Oct-2006.) $)
    reu3 $p |- ( E! x e. A ph <->
               ( E. x e. A ph /\ E. y e. A A. x e. A ( ph -> x = y ) ) ) $=
      ( wreu wrex weq wi wral wa reurex wb reu6 biimp ralimi reximi jca wex wal
      sylbi rexex anim2i wcel weu eu3v df-reu df-rex df-ral impexp albii bitr4i
      cv exbii anbi12i 3bitr4i sylibr impbii ) ABDEZABDFZABCGZHZBDIZCDFZJZURUSV
      CABDKURAUTLZBDIZCDFVCABCDMVFVBCDVEVABDAUTNOPTQVDUSVBCRZJZURVCVGUSVBCDUAUB
      BULDUCZAJZBUDVJBRZVJUTHZBSZCRZJURVHVJBCUEABDUFUSVKVGVNABDUGVBVMCVBVIVAHZB
      SVMVABDUHVLVOBVIAUTUIUJUKUMUNUOUPUQ $.

    $( A condition which implies existential uniqueness.  (Contributed by Mario
       Carneiro, 2-Oct-2015.) $)
    reu6i $p |- ( ( B e. A /\ A. x e. A ( ph <-> x = B ) ) -> E! x e. A ph ) $=
      ( vy wcel cv wceq wb wral wa wrex wreu eqeq2 bibi2d ralbidv rspcev sylibr
      reu6 ) DCFABGZDHZIZBCJZKATEGZHZIZBCJZECLABCMUGUCEDCUDDHZUFUBBCUHUEUAAUDDT
      NOPQABECSR $.

    eqreu.1 $e |- ( x = B -> ( ph <-> ps ) ) $.
    $( A condition which implies existential uniqueness.  (Contributed by Mario
       Carneiro, 2-Oct-2015.) $)
    eqreu $p |- ( ( B e. A /\ ps /\ A. x e. A ( ph -> x = B ) ) ->
      E! x e. A ph ) $=
      ( wcel cv wceq wi wral wreu wa wb ralbiim ceqsralv anbi2d syl5bb reu6i ex
      sylbird 3impib 3com23 ) EDGZACHEIZJCDKZBACDLZUDUFBUGUDUFBMZAUENCDKZUGUIUF
      UEAJCDKZMUDUHAUECDOUDUJBUFABCEDFPQRUDUIUGACDESTUAUBUC $.
  $}

  ${
    $d x y z A $.  $d y z ph $.  $d x z ps $.
    rmo4.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Restricted "at most one" using implicit substitution.  (Contributed by
       NM, 24-Oct-2006.)  (Revised by NM, 16-Jun-2017.) $)
    rmo4 $p |- ( E* x e. A ph <->
               A. x e. A A. y e. A ( ( ph /\ ps ) -> x = y ) ) $=
      ( wrmo cv wcel wa wmo weq wi wral df-rmo wal bitri impexp albii df-ral
      an4 ancom anbi1i imbi1i 3bitri r19.21v 3bitr2i eleq1w anbi12d mo4 3bitr4i
      ) ACEGCHEIZAJZCKZABJZCDLZMZDENZCENZACEOUMDHEIZBJZJZUPMZDPZCPULURMZCPUNUSV
      DVECVDUTULUQMZMZDPVFDENVEVCVGDVCUTULJZUOJZUPMVHUQMVGVBVIUPVBULUTJZUOJVIUL
      AUTBUAVJVHUOULUTUBUCQUDVHUOUPRUTULUQRUESVFDETULUQDEUFUGSUMVACDUPULUTABCDE
      UHFUIUJURCETUKQ $.

    $( Restricted uniqueness using implicit substitution.  (Contributed by NM,
       23-Nov-1994.) $)
    reu4 $p |- ( E! x e. A ph <-> ( E. x e. A ph /\
             A. x e. A A. y e. A ( ( ph /\ ps ) -> x = y ) ) ) $=
      ( wreu wrex wrmo wa weq wi wral reu5 rmo4 anbi2i bitri ) ACEGACEHZACEIZJR
      ABJCDKLDEMCEMZJACENSTRABCDEFOPQ $.

    $( Restricted uniqueness using implicit substitution.  (Contributed by NM,
       24-Oct-2006.) $)
    reu7 $p |- ( E! x e. A ph <-> ( E. x e. A ph /\
             E. x e. A A. y e. A ( ps -> x = y ) ) ) $=
      ( vz wreu wrex weq wi wral wa equequ1 equcom syl6bb imbi12d cbvralv bitri
      reu3 rexbii imbi2d ralbidv cbvrexv anbi2i ) ACEHACEIZACGJZKZCELZGEIZMUFBC
      DJZKZDELZCEIZMACGETUJUNUFUJBGDJZKZDELZGEIUNUIUQGEUHUPCDEUKABUGUOFUKUGDGJU
      OCDGNDGOPQRUAUQUMGCEGCJZUPULDEURUOUKBGCDNUBUCUDSUES $.

    $( Restricted uniqueness using implicit substitution.  (Contributed by NM,
       24-Oct-2006.) $)
    reu8 $p |- ( E! x e. A ph <-> E. x e. A ( ph /\
                A. y e. A ( ps -> x = y ) ) ) $=
      ( wreu weq wb wral wrex wi wa cbvreuv reu6 cv wcel ralbii wal syl5bb a1i
      dfbi2 ancom equcom imbi2i biimt df-ral bi2.04 albii eleq1w imbi12d bicomd
      equcoms equsalvw 3bitrri syl6bb anbi12d r19.26 syl6rbbr rexbiia 3bitri )
      ACEGBDEGBDCHZIZDEJZCEKABCDHZLZDEJZMZCEKABCDEFNBDCEOVDVHCEVDBVBLZVBBLZMZDE
      JZCPEQZVHVCVKDEBVBUBRVMVHVIDEJZVJDEJZMZVLVHVGAMVMVPAVGUCVMVGVNAVOVGVNIVMV
      FVIDEVEVBBCDUDUERUAVMAVMALZVOVMAUFVODPEQZVJLZDSVBVRBLZLZDSVQVJDEUGVSWADVR
      VBBUHUIVTVQDCVTVQICDVEVQVTVEVMVRABCDEUJFUKULUMUNUOUPUQTVIVJDEURUSTUTVA $.
  $}

  ${
    $d x y $.
    rmo3f.1 $e |- F/_ x A $.
    rmo3f.2 $e |- F/_ y A $.
    rmo3f.3 $e |- F/ y ph $.
    $( Restricted "at most one" using explicit substitution.  (Contributed by
       NM, 4-Nov-2012.)  (Revised by NM, 16-Jun-2017.)  (Revised by Thierry
       Arnoux, 8-Oct-2017.) $)
    rmo3f $p |- ( E* x e. A ph <->
               A. x e. A A. y e. A ( ( ph /\ [ y / x ] ph ) -> x = y ) ) $=
      ( cv wcel wa wsb wi wral wal anbi1i bitri 3bitri impexp albii df-ral wrmo
      wmo weq df-rmo sban clelsb3f anbi2i an4 ancom imbi1i nfcri r19.21 3bitr2i
      nfan mo3 3bitr4i ) ABDUABHDIZAJZBUBZAABCKZJZBCUCZLZCDMZBDMZABDUDURURBCKZJ
      ZVBLZCNZBNUQVDLZBNUSVEVIVJBVICHDIZUQVCLZLZCNVLCDMVJVHVMCVHVKUQJZVAJZVBLVN
      VCLVMVGVOVBVGURVKUTJZJUQVKJZVAJVOVFVPURVFUQBCKZUTJVPUQABCUEVRVKUTCBDEUFOP
      UGUQAVKUTUHVQVNVAUQVKUIOQUJVNVAVBRVKUQVCRQSVLCDTUQVCCDCBDFUKZULUMSURBCUQA
      CVSGUNUOVDBDTUPP $.
  $}

  ${
    $d x y $.  $d y ph $.
    rmo4f.1 $e |- F/_ x A $.
    rmo4f.2 $e |- F/_ y A $.
    rmo4f.3 $e |- F/ x ps $.
    rmo4f.4 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Restricted "at most one" using implicit substitution.  (Contributed by
       NM, 24-Oct-2006.)  (Revised by Thierry Arnoux, 11-Oct-2016.)  (Revised
       by Thierry Arnoux, 8-Mar-2017.)  (Revised by Thierry Arnoux,
       8-Oct-2017.) $)
    rmo4f $p |- ( E* x e. A ph <->
               A. x e. A A. y e. A ( ( ph /\ ps ) -> x = y ) ) $=
      ( wrmo wsb wa weq wi wral nfv rmo3f sbie anbi2i imbi1i 2ralbii bitri ) AC
      EJAACDKZLZCDMZNZDEOCEOABLZUENZDEOCEOACDEFGADPQUFUHCDEEUDUGUEUCBAABCDHIRST
      UAUB $.
  $}

  ${
    $d A x y $.  $d B x y $.  $d C x y $.  $d ch x y $.  $d ps y $.
    $d th x y $.
    reu2eqd.1 $e |- ( x = B -> ( ps <-> ch ) ) $.
    reu2eqd.2 $e |- ( x = C -> ( ps <-> th ) ) $.
    reu2eqd.3 $e |- ( ph -> E! x e. A ps ) $.
    reu2eqd.4 $e |- ( ph -> B e. A ) $.
    reu2eqd.5 $e |- ( ph -> C e. A ) $.
    reu2eqd.6 $e |- ( ph -> ch ) $.
    reu2eqd.7 $e |- ( ph -> th ) $.
    $( Deduce equality from restricted uniqueness, deduction version.
       (Contributed by Thierry Arnoux, 27-Nov-2019.) $)
    reu2eqd $p |- ( ph -> B = C ) $=
      ( vy wceq wa wi nfv wsb cv wral wrex wreu reu2 sylib wcel nfs1v nfan nfim
      simprd anbi1d eqeq1 imbi12d sbhypf anbi2d eqeq2 rspc2 syl2anc mpd mp2and
      ) ACDGHQZNOABBEPUAZRZEUBZPUBZQZSZPFUCEFUCZCDRZVCSZABEFUDZVJABEFUEVMVJRKBE
      PFUFUGULAGFUHHFUHVJVLSLMVIVLCVDRZGVGQZSEPGHFFVNVOECVDECETBEPUIUJVOETUKVLP
      TVFGQZVEVNVHVOVPBCVDIUMVFGVGUNUOVGHQZVNVKVOVCVQVDDCBDEPHDETJUPUQVGHGURUOU
      SUTVAVB $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Equality has existential uniqueness.  (Contributed by Mario Carneiro,
       1-Sep-2015.) $)
    reueq $p |- ( B e. A <-> E! x e. A x = B ) $=
      ( wcel cv wceq wrex wreu risset wrmo wmo moeq mormo ax-mp mpbiran2 bitr4i
      reu5 ) CBDAECFZABGZRABHZACBITSRABJZRAKUAACLRABMNRABQOP $.
  $}

  ${
    $d x A $.
    $( Equality's restricted existential "at most one" property.  (Contributed
       by Thierry Arnoux, 30-Mar-2018.)  (Revised by AV, 27-Oct-2020.)  (Proof
       shortened by NM, 29-Oct-2020.) $)
    rmoeq $p |- E* x e. B x = A $=
      ( cv wceq wrmo wcel wa wmo moeq moani df-rmo mpbir ) ADZBEZACFNCGZOHAIOPA
      ABJKOACLM $.
  $}

  $( Restricted "at most one" still holds when a conjunct is added.
     (Contributed by NM, 16-Jun-2017.) $)
  rmoan $p |- ( E* x e. A ph -> E* x e. A ( ps /\ ph ) ) $=
    ( cv wcel wa wmo wrmo moan an12 mobii sylib df-rmo 3imtr4i ) CEDFZAGZCHZPBA
    GZGZCHZACDISCDIRBQGZCHUAQBCJUBTCBPAKLMACDNSCDNO $.

  $( Restricted "at most one" is preserved through implication (note wff
     reversal).  (Contributed by Alexander van der Vekens, 17-Jun-2017.) $)
  rmoim $p |- ( A. x e. A ( ph -> ps ) -> ( E* x e. A ps -> E* x e. A ph ) ) $=
    ( wi wral cv wcel wa wal wrmo df-ral imdistan albii wmo moim df-rmo 3imtr4g
    bitri sylbi ) ABEZCDFZCGDHZAIZUCBIZEZCJZBCDKZACDKZEUBUCUAEZCJUGUACDLUJUFCUC
    ABMNSUGUECOUDCOUHUIUDUECPBCDQACDQRT $.

  ${
    rmoimia.1 $e |- ( x e. A -> ( ph -> ps ) ) $.
    $( Restricted "at most one" is preserved through implication (note wff
       reversal).  (Contributed by Alexander van der Vekens, 17-Jun-2017.) $)
    rmoimia $p |- ( E* x e. A ps -> E* x e. A ph ) $=
      ( wi wrmo rmoim mprg ) ABFBCDGACDGFCDABCDHEI $.
  $}

  ${
    rmoimi.1 $e |- ( ph -> ps ) $.
    $( Restricted "at most one" is preserved through implication (note wff
       reversal).  (Contributed by Alexander van der Vekens, 17-Jun-2017.) $)
    rmoimi $p |- ( E* x e. A ps -> E* x e. A ph ) $=
      ( wi cv wcel a1i rmoimia ) ABCDABFCGDHEIJ $.
  $}

  ${
    rmoimi2.1 $e |- A. x ( ( x e. A /\ ph ) -> ( x e. B /\ ps ) ) $.
    $( Restricted "at most one" is preserved through implication (note wff
       reversal).  (Contributed by Alexander van der Vekens, 17-Jun-2017.) $)
    rmoimi2 $p |- ( E* x e. B ps -> E* x e. A ph ) $=
      ( cv wcel wa wmo wrmo wi wal moim ax-mp df-rmo 3imtr4i ) CGZEHBIZCJZRDHAI
      ZCJZBCEKACDKUASLCMTUBLFUASCNOBCEPACDPQ $.
  $}

  $( Double restricted existential uniqueness in terms of restricted existence
     and restricted "at most one."  (Contributed by Alexander van der Vekens,
     17-Jun-2017.) $)
  2reu5a $p |- ( E! x e. A E! y e. B ph <->
                ( E. x e. A ( E. y e. B ph /\ E* y e. B ph )
                  /\ E* x e. A ( E. y e. B ph /\ E* y e. B ph ) ) ) $=
    ( wreu wrex wrmo wa reu5 rexbii rmobii anbi12i bitri ) ACEFZBDFOBDGZOBDHZIA
    CEGACEHIZBDGZRBDHZIOBDJPSQTORBDACEJZKORBDUALMN $.

  $( Restricted uniqueness implies restricted "at most one" through
     implication, analogous to ~ euimmo .  (Contributed by Alexander van der
     Vekens, 25-Jun-2017.) $)
  reuimrmo $p |- ( A. x e. A ( ph -> ps )
                   -> ( E! x e. A ps -> E* x e. A ph ) ) $=
    ( wreu wrmo wi wral reurmo rmoim syl5 ) BCDEBCDFABGCDHACDFBCDIABCDJK $.

  ${
    $d x y A $.  $d x B $.
    $( A condition allowing swap of uniqueness and existential quantifiers.
       (Contributed by Thierry Arnoux, 7-Apr-2017.)  (Revised by NM,
       16-Jun-2017.) $)
    2reuswap $p |- ( A. x e. A E* y e. B ph ->
                   ( E! x e. A E. y e. B ph -> E! y e. B E. x e. A ph ) ) $=
      ( wral cv wcel wa wmo wrex wreu wal wex weu df-reu r19.42v df-rex bitri
      wi wrmo df-rmo ralbii df-ral moanimv albii bitr4i bitr3i an12 exbii eubii
      2euswap 3imtr4g sylbi ) ACEUAZBDFCGEHZAIZCJZBDFZACEKZBDLZABDKZCELZTZUOURB
      DACEUBUCUSBGDHZUQIZCJZBMZVDUSVEURTZBMVHURBDUDVGVIBVEUQCUEUFUGVHVFCNZBOZVF
      BNZCOZVAVCVFBCULVAVEUTIZBOVKUTBDPVNVJBVNUPVEAIZIZCNZVJVNVOCEKVQVEACEQVOCE
      RUHVPVFCUPVEAUIUJSUKSVCUPVBIZCOVMVBCEPVRVLCVRUQBDKVLUPABDQUQBDRUHUKSUMUNU
      N $.
  $}

  ${
    $d x y A $.  $d x B $.
    $( A condition allowing swap of uniqueness and existential quantifiers.
       (Contributed by Thierry Arnoux, 7-Apr-2017.) $)
    2reuswap2 $p |- ( A. x e. A E* y ( y e. B /\ ph ) ->
                   ( E! x e. A E. y e. B ph -> E! y e. B E. x e. A ph ) ) $=
      ( cv wcel wa wmo wal wrex wreu wex weu df-reu r19.42v df-rex bitr3i bitri
      wi wral df-ral moanimv albii bitr4i 2euswap exbii eubii 3imtr4g sylbi
      an12 ) CFEGZAHZCIZBDUAZBFDGZUMHZCIZBJZACEKZBDLZABDKZCELZTUOUPUNTZBJUSUNBD
      UBURVDBUPUMCUCUDUEUSUQCMZBNZUQBMZCNZVAVCUQBCUFVAUPUTHZBNVFUTBDOVIVEBVIULU
      PAHZHZCMZVEVIVJCEKVLUPACEPVJCEQRVKUQCULUPAUKUGSUHSVCULVBHZCNVHVBCEOVMVGCV
      MUMBDKVGULABDPUMBDQRUHSUIUJ $.
  $}

  ${
    $d x y ph $.  $d x ps $.  $d x A $.  $d x y B $.  $d x y C $.
    reuxfr3d.1 $e |- ( ( ph /\ y e. C ) -> A e. B ) $.
    reuxfr3d.2 $e |- ( ( ph /\ x e. B ) -> E* y e. C x = A ) $.
    $( Transfer existential uniqueness from a variable ` x ` to another
       variable ` y ` contained in expression ` A ` .  (Contributed by NM,
       16-Jan-2012.)  Separate variables B and C. (Revised by Thierry Arnoux,
       8-Oct-2017.) $)
    reuxfr3d $p |- ( ph
        -> ( E! x e. B E. y e. C ( x = A /\ ps ) <-> E! y e. C ps ) ) $=
      ( cv wceq wa wrex wreu wrmo wi wcel syl ancom wmo wral rmoan rmobii sylib
      ralrimiva 2reuswap 2reuswap2 moeq moani an12 bitri mobii mpbi a1i impbid1
      mprg wb biidd ceqsrexv reubidva bitrd ) ACJZEKZBLZDGMCFNZVDCFMZDGNZBDGNAV
      EVGAVDDGOZCFUAVEVGPAVHCFAVBFQZLZBVCLZDGOZVHVJVCDGOVLIVCBDGUBRVKVDDGBVCSUC
      UDUEVDCDFGUFRVIVDLZCTZVGVEPDGVDDCGFUGVNDJGQZVIBLZVCLZCTVNVCVPCCEUHUIVQVMC
      VQVCVPLVMVPVCSVCVIBUJUKULUMUNUPUOAVFBDGAVOLEFQVFBUQHBBCEFVCBURUSRUTVA $.
  $}

  ${
    $d x y ph $.  $d y ps $.  $d x ch $.  $d x A $.  $d x y B $.  $d x y C $.
    reuxfr4d.1 $e |- ( ( ph /\ y e. C ) -> A e. B ) $.
    reuxfr4d.2 $e |- ( ( ph /\ x e. B ) -> E! y e. C x = A ) $.
    reuxfr4d.3 $e |- ( ( ph /\ x = A ) -> ( ps <-> ch ) ) $.
    $( Transfer existential uniqueness from a variable ` x ` to another
       variable ` y ` contained in expression ` A ` .  Cf. ~ reuxfrd .
       (Contributed by Thierry Arnoux, 7-Apr-2017.) $)
    reuxfr4d $p |- ( ph -> ( E! x e. B ps <-> E! y e. C ch ) ) $=
      ( wreu cv wceq wa wrex wcel reurex syl bitrd biantrurd wb r19.41v rexbidv
      pm5.32da syl5bbr adantr reubidva wrmo reurmo reuxfr3d ) ABDGLDMZFNZCOZEHP
      ZDGLCEHLABUODGAULGQZOZBUMEHPZBOZUOUQURBUQUMEHLZURJUMEHRSUAAUSUOUBUPUSUMBO
      ZEHPAUOUMBEHUCAVAUNEHAUMBCKUEUDUFUGTUHACDEFGHIUQUTUMEHUIJUMEHUJSUKT $.
  $}

  ${
    $d w y z A $.  $d x z B $.  $d w x y z C $.  $d w y z ph $.  $d x z ps $.
    reuind.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    reuind.2 $e |- ( x = y -> A = B ) $.
    $( Existential uniqueness via an indirect equality.  (Contributed by NM,
       16-Oct-2010.) $)
    reuind $p |- ( ( A. x A. y ( ( ( A e. C /\ ph ) /\ ( B e. C /\ ps ) )
         -> A = B ) /\ E. x ( A e. C /\ ph ) )
                 -> E! z e. C A. x ( ( A e. C /\ ph ) -> z = A ) ) $=
      ( vw wcel wa wceq wi wal wex cv wrex bitri eleq1d anbi12d cbvexvw r19.41v
      wral wreu exbii rexcom4 risset anbi1i 3bitr4ri eqeq2 imim2i biimpr imbi1i
      wb an31 impexp 3bitr3i sylib syl 2alimi 19.23v an12 eleq1 adantr pm5.32ri
      bitr4i 19.42v albii 19.21v expd reximdvai syl5bi pm4.24 biimpi prth eqtr3
      imp syl56 alanimi com12 a1d ralrimivv adantl eqeq1 imbi2d albidv sylanbrc
      reu4 ) FHLZAMZGHLZBMZMZFGNZOZDPCPZWLCQZMWLERZFNZOZCPZEHSZXCWLKRZFNZOZCPZM
      ZWTXENZOZKHUEEHUEZXCEHUFWRWSXDWSWTGNZBMZDQZEHSZWRXDWSWNDQZXPWLWNCDCRDRNZW
      KWMABXRFGHJUAIUBUCXNEHSZDQXMEHSZBMZDQXPXQXSYADXMBEHUDUGXNEDHUHWNYADWMXTBE
      GHUIUJUGUKTWRXOXCEHWRWTHLZXOXCWRXMWNMZXBOZDPZCPZYBXOMZXCOZWQYDCDWQWOXAXMU
      PZOZYDWPYIWOFGWTULUMYJWOXMXAOZOZYDYIYKWOXAXMUNUMWOXMMZXAOYCWLMZXAOYLYDYMY
      NXAWLWNXMUQUOWOXMXAURYCWLXAURUSUTVAVBYFYGXBOZCPYHYEYOCYEYCDQZXBOYOYCXBDVC
      YPYGXBYPYBXNMZDQYGYCYQDYCWMXNMYQXMWMBVDXNYBWMXMYBWMUPBWTGHVEVFVGVHUGYBXND
      VITUOTVJYGXBCVKTUTVLVMVNVSWSXLWRWSXKEKHHWSXKYBXEHLMXIWSXJXIWLXJOZCPWSXJOX
      BXGYRCWLWLWLMZXBXGMXAXFMXJWLYSWLVOVPWLXAWLXFVQWTXEFVRVTWAWLXJCVCUTWBWCWDW
      EXCXHEKHXJXBXGCXJXAXFWLWTXEFWFWGWHWJWI $.
  $}

  ${
    $d y A $.  $d x B $.  $d x y $.
    $( Double restricted quantification with "at most one", analogous to
       ~ 2moex .  (Contributed by Alexander van der Vekens, 17-Jun-2017.) $)
    2rmorex $p |- ( E* x e. A E. y e. B ph -> A. y e. B E* x e. A ph ) $=
      ( wrex wrmo nfcv nfre1 nfrmo wi wral cv wcel rmoim rspe ralrimivw ralrimi
      ex syl11 ) ACEFZBDGZABDGZCEUACBDCDHACEIJAUAKZBDLUBUCCMENZAUABDOUEUDBDUEAU
      AACEPSQTR $.

    $( Lemma for ~ 2reu5 .  Note that ` E! x e. A E! y e. B ph ` does not mean
       "there is exactly one ` x ` in ` A ` and exactly one ` y ` in ` B ` such
       that ` ph ` holds"; see comment for ~ 2eu5 .  (Contributed by Alexander
       van der Vekens, 17-Jun-2017.) $)
    2reu5lem1 $p |- ( E! x e. A E! y e. B ph <->
                   E! x E! y ( x e. A /\ y e. B /\ ph ) ) $=
      ( wreu cv wcel wa weu w3a df-reu reubii euanv bicomi 3anass eubii bitri )
      ACEFZBDFCGEHZAIZCJZBDFZBGDHZTAKZCJZBJZSUBBDACELMUCUDUBIZBJUGUBBDLUHUFBUHU
      DUAIZCJZUFUJUHUDUACNOUIUECUEUIUDTAPOQRQRR $.

    $( Lemma for ~ 2reu5 .  (Contributed by Alexander van der Vekens,
       17-Jun-2017.) $)
    2reu5lem2 $p |- ( A. x e. A E* y e. B ph <->
                   A. x E* y ( x e. A /\ y e. B /\ ph ) ) $=
      ( wrmo wral cv wcel wa wmo w3a wal df-rmo ralbii wi df-ral moanimv bicomi
      bitri 3anass mobii albii ) ACEFZBDGCHEIZAJZCKZBDGZBHDIZUEALZCKZBMZUDUGBDA
      CENOUHUIUGPZBMULUGBDQUMUKBUMUIUFJZCKZUKUOUMUIUFCRSUNUJCUJUNUIUEAUASUBTUCT
      T $.
  $}

  ${
    $d w y z A $.  $d w x z B $.  $d x y $.  $d ph w $.  $d ph z $.
    $( Lemma for ~ 2reu5 .  This lemma is interesting in its own right, showing
       that existential restriction in the last conjunct (the "at most one"
       part) is optional; compare ~ rmo2 .  (Contributed by Alexander van der
       Vekens, 17-Jun-2017.) $)
    2reu5lem3 $p |- ( ( E! x e. A E! y e. B ph /\ A. x e. A E* y e. B ph )
                   <-> ( E. x e. A E. y e. B ph
                         /\ E. z E. w A. x e. A A. y e. B
                            ( ph -> ( x = z /\ y = w ) ) ) ) $=
      ( wreu wral wa cv wcel weu wal wex weq wi wrex exbii 3bitri w3a 2reu5lem1
      wrmo wmo 2reu5lem2 anbi12i 2eu5 3anass 19.42v df-rex bicomi anbi2i bitr4i
      3anan12 imbi1i impexp imbi2i albii df-ral r19.21v 3bitr2i ) ACGHBFHZACGUC
      BFIZJBKFLZCKGLZAUAZCMBMZVFCUDBNZJVFCOZBOZVFBDPCEPJZQZCNZBNZEOZDOZJACGRZBF
      RZAVKQZCGIZBFIZEOZDOZJVBVGVCVHABCFGUBABCFGUEUFVFBCDEUGVJVRVPWCVJVDVQJZBOV
      RVIWDBVIVDVEAJZJZCOVDWECOZJWDVFWFCVDVEAUHSVDWECUIWGVQVDVQWGACGUJUKULTSVQB
      FUJUMVOWBDVNWAEVNVDVTQZBNWAVMWHBVMVEVDVSQZQZCNWICGIWHVLWJCVLVEVDAJZJZVKQV
      EWKVKQZQWJVFWLVKVDVEAUNUOVEWKVKUPWMWIVEVDAVKUPUQTURWICGUSVDVSCGUTVAURVTBF
      USUMSSUFT $.

    $d x A $.  $d y B $.
    $( Double restricted existential uniqueness in terms of restricted
       existential quantification and restricted universal quantification,
       analogous to ~ 2eu5 and ~ reu3 .  (Contributed by Alexander van der
       Vekens, 17-Jun-2017.) $)
    2reu5 $p |- ( ( E! x e. A E! y e. B ph /\ A. x e. A E* y e. B ph )
                  <-> ( E. x e. A E. y e. B ph
                        /\ E. z e. A E. w e. B A. x e. A A. y e. B
                           ( ph -> ( x = z /\ y = w ) ) ) ) $=
      ( wrex weq wa wral wex cv wcel wreu r19.29r reximi eleq1w ex df-rex anass
      wi wrmo pm3.35 bi2anan9 biimpac ancomd rexlimivv pm4.71rd 2exbidv pm5.32i
      4syl syl6bb 2reu5lem3 r19.42v bitr3i exbii bitri anbi2i 3bitr4i ) ACGHZBF
      HZABDIZCEIZJZUBZCGKZBFKZELDLZJVBEMGNZDMFNZVHJZJZELZDLZJACGOBFOACGUCBFKJVB
      VHEGHZDFHZJVBVIVOVBVHVMDEVBVHVJVKJZVHJVMVBVHVRVBVHVRVBVHJVAVGJZBFHAVFJZCG
      HZBFHVECGHZBFHVRVAVGBFPVSWABFAVFCGPQWAWBBFVTVECGAVEUDQQVEVRBCFGBMFNZCMGNZ
      JZVEVRWEVEJVKVJVEWEVKVJJVCWCVKVDWDVJBDFRCEGRUEUFUGSUHULSUIVJVKVHUAUMUJUKA
      BCDEFGUNVQVOVBVQVKVPJZDLVOVPDFTWFVNDWFVLEGHVNVKVHEGUOVLEGTUPUQURUSUT $.
  $}

  ${
    $d y A $.  $d x y $.  $d x B $.
    $( Double restricted quantification with existential uniqueness, analogous
       to ~ 2euex .  (Contributed by Alexander van der Vekens, 24-Jun-2017.) $)
    2reurex $p |- ( E! x e. A E. y e. B ph -> E. y e. B E! x e. A ph ) $=
      ( wrex wreu wrmo wa reu5 rexcom nfcv nfre1 nfrmo cv wcel wi wral impcom
      ex rspe ralrimivw rmoim syl rmo5 sylib reximdai syl5bi sylbi ) ACEFZBDGUJ
      BDFZUJBDHZIABDGZCEFZUJBDJULUKUNUKABDFZCEFULUNABCDEKULUOUMCEUJCBDCDLACEMNU
      LCOEPZUOUMQZULUPIABDHZUQUPULURUPAUJQZBDRULURQUPUSBDUPAUJACEUATUBAUJBDUCUD
      SABDUEUFTUGUHSUI $.

    $( Double restricted quantification with restricted existential uniqueness
       and restricted "at most one", analogous to ~ 2eumo .  (Contributed by
       Alexander van der Vekens, 24-Jun-2017.) $)
    2reurmo $p |- ( E! x e. A E* y e. B ph -> E* x e. A E! y e. B ph ) $=
      ( wreu wrmo wi reuimrmo cv wcel reurmo a1i mprg ) ACEFZACEGZHZPBDFOBDGHBD
      OPBDIQBJDKACELMN $.

    $( A condition allowing to swap restricted "at most one" and restricted
       existential quantifiers, analogous to ~ 2moswap .  (Contributed by
       Alexander van der Vekens, 25-Jun-2017.) $)
    2rmoswap $p |- ( A. x e. A E* y e. B ph
                   -> ( E* x e. A E. y e. B ph -> E* y e. B E. x e. A ph ) ) $=
      ( wrmo wral cv wcel wa wmo wrex wi df-rmo wal r19.42v df-rex bitri bitr3i
      wex ralbii df-ral moanimv albii bitr4i 2moswap exbii mobii 3imtr4g sylbi
      an12 ) ACEFZBDGCHEIZAJZCKZBDGZACELZBDFZABDLZCEFZMZULUOBDACENUAUPBHDIZUNJZ
      CKZBOZVAUPVBUOMZBOVEUOBDUBVDVFBVBUNCUCUDUEVEVCCTZBKZVCBTZCKZURUTVCBCUFURV
      BUQJZBKVHUQBDNVKVGBVKVBAJZCELZVGVBACEPVMUMVLJZCTVGVLCEQVNVCCUMVBAUKUGRSUH
      RUTUMUSJZCKVJUSCENVOVICVOUNBDLVIUMABDPUNBDQSUHRUIUJUJ $.

    $( Double restricted existential uniqueness implies double restricted
       unique existential quantification, analogous to ~ 2exeu .  (Contributed
       by Alexander van der Vekens, 25-Jun-2017.) $)
    2rexreu $p |- ( ( E! x e. A E. y e. B ph /\ E! y e. B E. x e. A ph )
                  -> E! x e. A E! y e. B ph ) $=
      ( wrex wreu wa wrmo reurmo reurex rmoimi syl 2reurex anim12ci reu5 sylibr
      ) ACEFZBDGZABDFCEGZHACEGZBDFZUABDIZHUABDGSUCTUBSRBDIUCRBDJUARBDACEKLMACBE
      DNOUABDPQ $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Conditional equality (experimental)
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  This is a very useless definition, which "abbreviates" ` ( x = y -> ph ) ` as
  ` CondEq ( x = y -> ph ) ` . What this display hides, though, is that the
  first expression, even though it has a shorter constant string, is actually
  much more complicated in its parse tree: it is parsed as
  (wi (wceq (cv vx) (cv vy)) wph), while the ` CondEq ` version is parsed as
  (wcdeq vx vy wph).  It also allows us to give a name to the specific ternary
  operation ` ( x = y -> ph ) ` .

  This is all used as part of a metatheorem: we want to say that
  ` |- ( x = y -> ( ph ( x ) <-> ph ( y ) ) ) ` and
  ` |- ( x = y -> A ( x ) = A ( y ) ) ` are provable, for any expressions
  ` ph ( x ) ` or ` A ( x ) ` in the language.  The proof is by induction, so
  the base case is each of the primitives, which is why you will see a theorem
  for each of the set.mm primitive operations.

  The metatheorem comes with a disjoint variables assumption: every variable in
  ` ph ( x ) ` is assumed disjoint from ` x ` except ` x ` itself.  For such a
  proof by induction, we must consider each of the possible forms of
  ` ph ( x ) ` .  If it is a variable other than ` x ` , then we have
  ` CondEq ( x = y -> A = A ) ` or ` CondEq ( x = y -> ( ph <-> ph ) ) ` ,
  which is provable by ~ cdeqth and reflexivity.  Since we are only working
  with class and wff expressions, it can't be ` x ` itself in set.mm, but if it
  was we'd have to also prove ` CondEq ( x = y -> x = y ) ` (where _set_
  equality is being used on the right).

  Otherwise, it is a primitive operation applied to smaller expressions.  In
  these cases, for each setvar variable parameter to the operation, we must
  consider if it is equal to ` x ` or not, which yields 2^n proof obligations.
  Luckily, all primitive operations in set.mm have either zero or one setvar
  variable, so we only need to prove one statement for the non-set constructors
  (like implication) and two for the constructors taking a set (the forall and
  the class builder).

  In each of the primitive proofs, we are allowed to assume that ` y ` is
  disjoint from ` ph ( x ) ` and vice versa, because this is maintained through
  the induction.  This is how we satisfy the disjoint variable conditions of
  ~ cdeqab1 and ~ cdeqab .

$)

  $c CondEq $.  $( conditional equality $)

  $( Extend wff notation to include conditional equality.  This is a technical
     device used in the proof that ` F/ ` is the not-free predicate, and that
     definitions are conservative as a result. $)
  wcdeq $a wff CondEq ( x = y -> ph ) $.

  $( Indicate that the variables "x" and "y" are free in wcdeq. $)
  $( $j free_var 'wcdeq' with 'x' 'y'; $)

  $( Define conditional equality.  All the notation to the left of the ` <-> `
     is fake; the parentheses and arrows are all part of the notation, which
     could equally well be written ` CondEq x y ph ` .  On the right side is
     the actual implication arrow.  The reason for this definition is to
     "flatten" the structure on the right side (whose tree structure is
     something like (wi (wceq (cv vx) (cv vy)) wph) ) into just (wcdeq vx vy
     wph).  (Contributed by Mario Carneiro, 11-Aug-2016.) $)
  df-cdeq $a |- ( CondEq ( x = y -> ph ) <-> ( x = y -> ph ) ) $.

  ${
    cdeqi.1 $e |- ( x = y -> ph ) $.
    $( Deduce conditional equality.  (Contributed by Mario Carneiro,
       11-Aug-2016.) $)
    cdeqi $p |- CondEq ( x = y -> ph ) $=
      ( wcdeq weq wi df-cdeq mpbir ) ABCEBCFAGDABCHI $.
  $}

  ${
    cdeqri.1 $e |- CondEq ( x = y -> ph ) $.
    $( Property of conditional equality.  (Contributed by Mario Carneiro,
       11-Aug-2016.) $)
    cdeqri $p |- ( x = y -> ph ) $=
      ( wcdeq weq wi df-cdeq mpbi ) ABCEBCFAGDABCHI $.
  $}

  ${
    cdeqth.1 $e |- ph $.
    $( Deduce conditional equality from a theorem.  (Contributed by Mario
       Carneiro, 11-Aug-2016.) $)
    cdeqth $p |- CondEq ( x = y -> ph ) $=
      ( weq a1i cdeqi ) ABCABCEDFG $.
  $}

  ${
    cdeqnot.1 $e |- CondEq ( x = y -> ( ph <-> ps ) ) $.
    $( Distribute conditional equality over negation.  (Contributed by Mario
       Carneiro, 11-Aug-2016.) $)
    cdeqnot $p |- CondEq ( x = y -> ( -. ph <-> -. ps ) ) $=
      ( wn wb weq cdeqri notbid cdeqi ) AFBFGCDCDHABABGCDEIJK $.

    ${
      $d x z $.  $d y z $.
      $( Distribute conditional equality over quantification.  (Contributed by
         Mario Carneiro, 11-Aug-2016.) $)
      cdeqal $p |- CondEq ( x = y -> ( A. z ph <-> A. z ps ) ) $=
        ( wal wb weq cdeqri albidv cdeqi ) AEGBEGHCDCDIABEABHCDFJKL $.

      $( Distribute conditional equality over abstraction.  (Contributed by
         Mario Carneiro, 11-Aug-2016.) $)
      cdeqab $p |- CondEq ( x = y -> { z | ph } = { z | ps } ) $=
        ( cab wceq weq wb cdeqri abbidv cdeqi ) AEGBEGHCDCDIABEABJCDFKLM $.
    $}

    ${
      $d x ps $.  $d y ph $.
      $( Distribute conditional equality over quantification.  (Contributed by
         Mario Carneiro, 11-Aug-2016.) $)
      cdeqal1 $p |- CondEq ( x = y -> ( A. x ph <-> A. y ps ) ) $=
        ( wal wb cdeqri cbvalv cdeqth ) ACFBDFGCDABCDABGCDEHIJ $.

      $( Distribute conditional equality over abstraction.  (Contributed by
         Mario Carneiro, 11-Aug-2016.) $)
      cdeqab1 $p |- CondEq ( x = y -> { x | ph } = { y | ps } ) $=
        ( cab wceq nfv wb cdeqri cbvab cdeqth ) ACFBDFGCDABCDADHBCHABICDEJKL $.
    $}

    cdeqim.1 $e |- CondEq ( x = y -> ( ch <-> th ) ) $.
    $( Distribute conditional equality over implication.  (Contributed by Mario
       Carneiro, 11-Aug-2016.) $)
    cdeqim $p |- CondEq ( x = y -> ( ( ph -> ch ) <-> ( ps -> th ) ) ) $=
      ( wi wb weq cdeqri imbi12d cdeqi ) ACIBDIJEFEFKABCDABJEFGLCDJEFHLMN $.
  $}

  $( Conditional equality for set-to-class promotion.  (Contributed by Mario
     Carneiro, 11-Aug-2016.) $)
  cdeqcv $p |- CondEq ( x = y -> x = y ) $=
    ( weq id cdeqi ) ABCZABFDE $.

  ${
    cdeqeq.1 $e |- CondEq ( x = y -> A = B ) $.
    cdeqeq.2 $e |- CondEq ( x = y -> C = D ) $.
    $( Distribute conditional equality over equality.  (Contributed by Mario
       Carneiro, 11-Aug-2016.) $)
    cdeqeq $p |- CondEq ( x = y -> ( A = C <-> B = D ) ) $=
      ( wceq wb weq cdeqri eqeq12d cdeqi ) CEIDFIJABABKCDEFCDIABGLEFIABHLMN $.

    $( Distribute conditional equality over elementhood.  (Contributed by Mario
       Carneiro, 11-Aug-2016.) $)
    cdeqel $p |- CondEq ( x = y -> ( A e. C <-> B e. D ) ) $=
      ( wcel wb weq wceq cdeqri eleq12d cdeqi ) CEIDFIJABABKCDEFCDLABGMEFLABHMN
      O $.
  $}

  ${
    $d x ps $.  $d y ph $.
    nfcdeq.1 $e |- F/ x ph $.
    nfcdeq.2 $e |- CondEq ( x = y -> ( ph <-> ps ) ) $.
    $( If we have a conditional equality proof, where ` ph ` is ` ph ( x ) `
       and ` ps ` is ` ph ( y ) ` , and ` ph ( x ) ` in fact does not have
       ` x ` free in it according to ` F/ ` , then ` ph ( x ) <-> ph ( y ) `
       unconditionally.  This proves that ` F/ x ph ` is actually a not-free
       predicate.  (Contributed by Mario Carneiro, 11-Aug-2016.) $)
    nfcdeq $p |- ( ph <-> ps ) $=
      ( wsb sbf nfv wb cdeqri sbie bitr3i ) AACDGBACDEHABCDBCIABJCDFKLM $.
  $}

  ${
    $d x z B $.  $d y z A $.
    nfccdeq.1 $e |- F/_ x A $.
    nfccdeq.2 $e |- CondEq ( x = y -> A = B ) $.
    $( Variation of ~ nfcdeq for classes.  (Contributed by Mario Carneiro,
       11-Aug-2016.)  Avoid ~ ax-11 .  (Revised by Gino Giotto,
       19-May-2023.) $)
    nfccdeq $p |- A = B $=
      ( vz cv wcel nfcriv weq eqid cdeqth cdeqel nfcdeq eqriv ) GCDGHZCIQDIABAG
      CEJABQQCDGGKABQLMFNOP $.
  $}

  $( Let the computer know the theorems to look for to prove the metatheorem $)
  $( $j
    condequality 'wcdeq' from 'cdeqth';
    condcongruence 'cdeqnot' 'cdeqim' 'cdeqal1' 'cdeqal' 'cdeqcv' 'cdeqeq'
      'cdeqel' 'cdeqab1' 'cdeqab';
    notfree 'wnf' from 'nfcdeq';
    notfree 'wnfc' from 'nfccdeq';
  $)


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Russell's Paradox
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    $d x y A $.
    $( Relative version of Russell's paradox ~ ru (which corresponds to the
       case ` A = _V ` ).

       Originally a subproof in ~ pwnss .  (Contributed by Stefan O'Rear,
       22-Feb-2015.)  Avoid ~ df-nel .  (Revised by Steven Nguyen,
       23-Nov-2022.) $)
    rru $p |- -. { x e. A | -. x e. x } e. A $=
      ( vy wel wn crab wcel wa wb cv eleq12 anidms notbid cbvrabv elrab2 pclem6
      wceq weq ax-mp ) AADZEZABFZUBGZUBBGZUCEZHIUDECCDZEZUECUBBUBCJZUBQZUFUCUIU
      FUCIUHUBUHUBKLMUAUGACBACRZTUFUJTUFIAJZUHUKUHKLMNOUCUDPS $.
  $}

  ${
    $d x y $.
    $( Russell's Paradox.  Proposition 4.14 of [TakeutiZaring] p. 14.

       In the late 1800s, Frege's Axiom of (unrestricted) Comprehension,
       expressed in our notation as ` A e. _V ` , asserted that any collection
       of sets ` A ` is a set i.e. belongs to the universe ` _V ` of all sets.
       In particular, by substituting ` { x | x e/ x } ` (the "Russell class")
       for ` A ` , it asserted ` { x | x e/ x } e. _V ` , meaning that the
       "collection of all sets which are not members of themselves" is a set.
       However, here we prove ` { x | x e/ x } e/ _V ` .  This contradiction
       was discovered by Russell in 1901 (published in 1903), invalidating the
       Comprehension Axiom and leading to the collapse of Frege's system.

       In 1908, Zermelo rectified this fatal flaw by replacing Comprehension
       with a weaker Subset (or Separation) Axiom ~ ssex asserting that ` A `
       is a set only when it is smaller than some other set ` B ` .  However,
       Zermelo was then faced with a "chicken and egg" problem of how to show
       ` B ` is a set, leading him to introduce the set-building axioms of Null
       Set ~ 0ex , Pairing ~ prex , Union ~ uniex , Power Set ~ pwex , and
       Infinity ~ omex to give him some starting sets to work with (all of
       which, before Russell's Paradox, were immediate consequences of Frege's
       Comprehension).  In 1922 Fraenkel strengthened the Subset Axiom with our
       present Replacement Axiom ~ funimaex (whose modern formalization is due
       to Skolem, also in 1922).  Thus, in a very real sense Russell's Paradox
       spawned the invention of ZF set theory and completely revised the
       foundations of mathematics!

       Another mainstream formalization of set theory, devised by von Neumann,
       Bernays, and Goedel, uses class variables rather than setvar variables
       as its primitives.  The axiom system NBG in [Mendelson] p. 225 is
       suitable for a Metamath encoding.  NBG is a conservative extension of ZF
       in that it proves exactly the same theorems as ZF that are expressible
       in the language of ZF. An advantage of NBG is that it is finitely
       axiomatizable - the Axiom of Replacement can be broken down into a
       finite set of formulas that eliminate its wff metavariable.  Finite
       axiomatizability is required by some proof languages (although not by
       Metamath).  There is a stronger version of NBG called Morse-Kelley
       (axiom system MK in [Mendelson] p. 287).

       Russell himself continued in a different direction, avoiding the paradox
       with his "theory of types."  Quine extended Russell's ideas to formulate
       his New Foundations set theory (axiom system NF of [Quine] p. 331).  In
       NF, the collection of all sets is a set, contradicting ZF and NBG set
       theories, and it has other bizarre consequences: when sets become too
       huge (beyond the size of those used in standard mathematics), the Axiom
       of Choice ~ ac4 and Cantor's Theorem ~ canth are provably false!  (See
       ~ ncanth for some intuition behind the latter.)  Recent results (as of
       2014) seem to show that NF is equiconsistent to Z (ZF in which ~ ax-sep
       replaces ~ ax-rep ) with ~ ax-sep restricted to only bounded
       quantifiers.  NF is finitely axiomatizable and can be encoded in
       Metamath using the axioms from T. Hailperin, "A set of axioms for
       logic", _J. Symb.  Logic_ 9:1-19 (1944).

       Under our ZF set theory, every set is a member of the Russell class by
       ~ elirrv (derived from the Axiom of Regularity), so for us the Russell
       class equals the universe ` _V ` (theorem ~ ruv ).  See ~ ruALT for an
       alternate proof of ~ ru derived from that fact.  (Contributed by NM,
       7-Aug-1994.)  Remove use of ~ ax-13 .  (Revised by BJ, 12-Oct-2019.)
       (Proof modification is discouraged.) $)
    ru $p |- { x | x e/ x } e/ _V $=
      ( vy cv wnel cab cvv wcel wceq wex wel wb wn pm5.19 eleq1w df-nel eleq12d
      wal id notbid mtbir syl5bb bibi12d spvv mto abeq2 nex isset nelir ) ACZUI
      DZAEZFUKFGBCZUKHZBIUMBUMABJZUJKZAQZUPBBJZUQLZKZUQMUOUSABUIULHZUNUQUJURABU
      LNUJAAJZLUTURUIUIOUTVAUQUTUIULUIULUTRZVBPSUAUBUCUDUJAULUETUFBUKUGTUH $.
    $( $j usage 'ru' avoids 'ax-13' 'ax-reg'; $)
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Proper substitution of classes for sets
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $c [. $.
  $c ]. $.

  $( Extend wff notation to include the proper substitution of a class for a
     set.  Read this notation as "the proper substitution of class ` A ` for
     setvar variable ` x ` in wff ` ph ` ". $)
  wsbc $a wff [. A / x ]. ph $.

  $( Indicate that "x" is not bound in "A" in the definition of wsbc.
     This is similar to $d x A $. $)
  $( $j free_var_in 'wsbc' with 'A' 'x'; $)

  $( Define the proper substitution of a class for a set.

     When ` A ` is a proper class, our definition evaluates to false (see
     ~ sbcex ).  This is somewhat arbitrary: we could have, instead, chosen the
     conclusion of ~ sbc6 for our definition, whose right-hand side always
     evaluates to true for proper classes.

     Our definition also does not produce the same results as discussed in the
     proof of Theorem 6.6 of [Quine] p. 42 (although Theorem 6.6 itself does
     hold, as shown by ~ dfsbcq below).  For example, if ` A ` is a proper
     class, Quine's substitution of ` A ` for ` y ` in ` 0 e. y ` evaluates to
     ` 0 e. A ` rather than our falsehood.  (This can be seen by substituting
     ` A ` , ` y ` , and ` 0 ` for alpha, beta, and gamma in Subcase 1 of
     Quine's discussion on p. 42.)  Unfortunately, Quine's definition requires
     a recursive syntactic breakdown of ` ph ` , and it does not seem possible
     to express it with a single closed formula.

     If we did not want to commit to any specific proper class behavior, we
     could use this definition _only_ to prove theorem ~ dfsbcq , which holds
     for both our definition and Quine's, and from which we can derive a weaker
     version of ~ df-sbc in the form of ~ sbc8g .  However, the behavior of
     Quine's definition at proper classes is similarly arbitrary, and for
     practical reasons (to avoid having to prove sethood of ` A ` in every use
     of this definition) we allow direct reference to ~ df-sbc and assert that
     ` [. A / x ]. ph ` is always false when ` A ` is a proper class.

     The theorem ~ sbc2or shows the apparently "strongest" statement we can
     make regarding behavior at proper classes if we start from ~ dfsbcq .

     The related definition ~ df-csb defines proper substitution into a class
     variable (as opposed to a wff variable).  (Contributed by NM,
     14-Apr-1995.)  (Revised by NM, 25-Dec-2016.) $)
  df-sbc $a |- ( [. A / x ]. ph <-> A e. { x | ph } ) $.

  $( Proper substitution of a class for a set in a wff given equal classes.
     This is the essence of the sixth axiom of Frege, specifically Proposition
     52 of [Frege1879] p. 50.

     This theorem, which is similar to Theorem 6.7 of [Quine] p. 42 and holds
     under both our definition and Quine's, provides us with a weak definition
     of the proper substitution of a class for a set.  Since our ~ df-sbc does
     not result in the same behavior as Quine's for proper classes, if we
     wished to avoid conflict with Quine's definition we could start with this
     theorem and ~ dfsbcq2 instead of ~ df-sbc .  ( ~ dfsbcq2 is needed because
     unlike Quine we do not overload the ~ df-sb syntax.)  As a consequence of
     these theorems, we can derive ~ sbc8g , which is a weaker version of
     ~ df-sbc that leaves substitution undefined when ` A ` is a proper class.

     However, it is often a nuisance to have to prove the sethood hypothesis of
     ~ sbc8g , so we will allow direct use of ~ df-sbc after theorem ~ sbc2or
     below.  Proper substitution with a proper class is rarely needed, and when
     it is, we can simply use the expansion of Quine's definition.
     (Contributed by NM, 14-Apr-1995.) $)
  dfsbcq $p |- ( A = B -> ( [. A / x ]. ph <-> [. B / x ]. ph ) ) $=
    ( wceq cab wcel wsbc eleq1 df-sbc 3bitr4g ) CDECABFZGDLGABCHABDHCDLIABCJABD
    JK $.

  $( This theorem, which is similar to Theorem 6.7 of [Quine] p. 42 and holds
     under both our definition and Quine's, relates logic substitution ~ df-sb
     and substitution for class variables ~ df-sbc .  Unlike Quine, we use a
     different syntax for each in order to avoid overloading it.  See remarks
     in ~ dfsbcq .  (Contributed by NM, 31-Dec-2016.) $)
  dfsbcq2 $p |- ( y = A -> ( [ y / x ] ph <-> [. A / x ]. ph ) ) $=
    ( cv wceq cab wcel wsb wsbc eleq1 df-clab df-sbc bicomi 3bitr3g ) CEZDFPABG
    ZHDQHZABCIABDJZPDQKACBLSRABDMNO $.

  $( Show that ~ df-sb and ~ df-sbc are equivalent when the class term ` A ` in
     ~ df-sbc is a setvar variable.  This theorem lets us reuse theorems based
     on ~ df-sb for proofs involving ~ df-sbc .  (Contributed by NM,
     31-Dec-2016.)  (Proof modification is discouraged.) $)
  sbsbc $p |- ( [ y / x ] ph <-> [. y / x ]. ph ) $=
    ( weq wsb cv wsbc wb eqid dfsbcq2 ax-mp ) CCDABCEABCFZGHLIABCLJK $.

  ${
    sbceq1d.1 $e |- ( ph -> A = B ) $.
    $( Equality theorem for class substitution.  (Contributed by Mario
       Carneiro, 9-Feb-2017.)  (Revised by NM, 30-Jun-2018.) $)
    sbceq1d $p |- ( ph -> ( [. A / x ]. ps <-> [. B / x ]. ps ) ) $=
      ( wceq wsbc wb dfsbcq syl ) ADEGBCDHBCEHIFBCDEJK $.

    sbceq1dd.2 $e |- ( ph -> [. A / x ]. ps ) $.
    $( Equality theorem for class substitution.  (Contributed by Mario
       Carneiro, 9-Feb-2017.)  (Revised by NM, 30-Jun-2018.) $)
    sbceq1dd $p |- ( ph -> [. B / x ]. ps ) $=
      ( wsbc sbceq1d mpbid ) ABCDHBCEHGABCDEFIJ $.
  $}

  ${
    $d x ph $.
    sbceqbid.1 $e |- ( ph -> A = B ) $.
    sbceqbid.2 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Equality theorem for class substitution.  (Contributed by Thierry
       Arnoux, 4-Sep-2018.) $)
    sbceqbid $p |- ( ph -> ( [. A / x ]. ps <-> [. B / x ]. ch ) ) $=
      ( cab wcel wsbc abbidv eleq12d df-sbc 3bitr4g ) AEBDIZJFCDIZJBDEKCDFKAEFP
      QGABCDHLMBDENCDFNO $.
  $}

  ${
    $d y A $.  $d y ph $.  $d x y $.
    $( This is the closest we can get to ~ df-sbc if we start from ~ dfsbcq
       (see its comments) and ~ dfsbcq2 .  (Contributed by NM, 18-Nov-2008.)
       (Proof shortened by Andrew Salmon, 29-Jun-2011.)
       (Proof modification is discouraged.) $)
    sbc8g $p |- ( A e. V -> ( [. A / x ]. ph <-> A e. { x | ph } ) ) $=
      ( vy cv wsbc cab wcel dfsbcq eleq1 wsb df-clab weq wb equid dfsbcq2 ax-mp
      bitr2i vtoclbg ) ABEFZGZUAABHZIZABCGCUCIECDABUACJUACUCKUDABELZUBAEBMEENUE
      UBOEPABEUAQRST $.
  $}

  ${
    $d x y A $.  $d y ph $.
    $( The disjunction of two equivalences for class substitution does not
       require a class existence hypothesis.  This theorem tells us that there
       are only 2 possibilities for ` [ A / x ] ph ` behavior at proper
       classes, matching the ~ sbc5 (false) and ~ sbc6 (true) conclusions.
       This is interesting since ~ dfsbcq and ~ dfsbcq2 (from which it is
       derived) do not appear to say anything obvious about proper class
       behavior.  Note that this theorem does not tell us that it is always one
       or the other at proper classes; it could "flip" between false (the first
       disjunct) and true (the second disjunct) as a function of some other
       variable ` y ` that ` ph ` or ` A ` may contain.  (Contributed by NM,
       11-Oct-2004.)  (Proof modification is discouraged.) $)
    sbc2or $p |- ( ( [. A / x ]. ph <-> E. x ( x = A /\ ph ) ) \/
                  ( [. A / x ]. ph <-> A. x ( x = A -> ph ) ) ) $=
      ( vy cvv wcel wsbc cv wceq wa wex wb wi wal wo wsb weq wn mpbii con3i sb5
      dfsbcq2 eqeq2 anbi1d exbidv vtoclbg pm5.15 vex eleq1 adantr nexdv pm2.21d
      orcd alrimiv 2thd bibi2d orbi2d pm2.61i ) CEFZABCGZBHZCIZAJZBKZLZUTVBAMZB
      NZLZOZUSVEVHABDPBDQZAJZBKUTVDDCEABDCUBDHZCIZVKVCBVMVJVBAVLCVAUCUDUEABDUAU
      FUMUSRZVEUTVDRZLZOVIUTVDUGVNVPVHVEVNVOVGUTVNVOVGVNVCBVCUSVBUSAVBVAEFUSBUH
      VACEUISZUJTUKVNVFBVNVBAVBUSVQTULUNUOUPUQSUR $.
  $}

  $( Direct use of ~ df-sbc is allowed from here on. -NM $)

  $( By our definition of proper substitution, it can only be true if the
     substituted expression is a set.  (Contributed by Mario Carneiro,
     13-Oct-2016.) $)
  sbcex $p |- ( [. A / x ]. ph -> A e. _V ) $=
    ( wsbc cab wcel cvv df-sbc elex sylbi ) ABCDCABEZFCGFABCHCKIJ $.

  $( Equality theorem for class substitution.  Class version of ~ sbequ12 .
     (Contributed by NM, 26-Sep-2003.) $)
  sbceq1a $p |- ( x = A -> ( ph <-> [. A / x ]. ph ) ) $=
    ( wsb cv wceq wsbc sbid dfsbcq2 syl5bbr ) AABBDBECFABCGABHABBCIJ $.

  $( Equality theorem for class substitution.  Class version of ~ sbequ12r .
     (Contributed by NM, 4-Jan-2017.) $)
  sbceq2a $p |- ( A = x -> ( [. A / x ]. ph <-> ph ) ) $=
    ( cv wceq wsbc wb sbceq1a eqcoms bicomd ) CBDZEAABCFZALGKCABCHIJ $.

  ${
    $d ph y $.  $d A y $.  $d x y $.
    $( Specialization: if a formula is true for all sets, it is true for any
       class which is a set.  Similar to Theorem 6.11 of [Quine] p. 44.  This
       is Frege's ninth axiom per Proposition 58 of [Frege1879] p. 51.  See
       also ~ stdpc4 and ~ rspsbc .  (Contributed by NM, 16-Jan-2004.) $)
    spsbc $p |- ( A e. V -> ( A. x ph -> [. A / x ]. ph ) ) $=
      ( vy wal wsbc wi cv wceq wsb stdpc4 sbsbc sylib dfsbcq syl5ib vtocleg ) A
      BFZABCGZHECDRABEIZGZTCJSRABEKUAABELABEMNABTCOPQ $.

    spsbcd.1 $e |- ( ph -> A e. V ) $.
    spsbcd.2 $e |- ( ph -> A. x ps ) $.
    $( Specialization: if a formula is true for all sets, it is true for any
       class which is a set.  Similar to Theorem 6.11 of [Quine] p. 44.  See
       also ~ stdpc4 and ~ rspsbc .  (Contributed by Mario Carneiro,
       9-Feb-2017.) $)
    spsbcd $p |- ( ph -> [. A / x ]. ps ) $=
      ( wcel wal wsbc spsbc sylc ) ADEHBCIBCDJFGBCDEKL $.
  $}

  ${
    sbcth.1 $e |- ph $.
    $( A substitution into a theorem remains true (when ` A ` is a set).
       (Contributed by NM, 5-Nov-2005.) $)
    sbcth $p |- ( A e. V -> [. A / x ]. ph ) $=
      ( wcel wal wsbc ax-gen spsbc mpi ) CDFABGABCHABEIABCDJK $.
  $}

  ${
    $d x ph $.
    sbcthdv.1 $e |- ( ph -> ps ) $.
    $( Deduction version of ~ sbcth .  (Contributed by NM, 30-Nov-2005.)
       (Proof shortened by Andrew Salmon, 8-Jun-2011.) $)
    sbcthdv $p |- ( ( ph /\ A e. V ) -> [. A / x ]. ps ) $=
      ( wal wcel wsbc alrimiv spsbc mpan9 ) ABCGDEHBCDIABCFJBCDEKL $.
  $}

  $( An identity theorem for substitution.  See ~ sbid .  (Contributed by Mario
     Carneiro, 18-Feb-2017.) $)
  sbcid $p |- ( [. x / x ]. ph <-> ph ) $=
    ( cv wsbc wsb sbsbc sbid bitr3i ) ABBCDABBEAABBFABGH $.

  ${
    nfsbc1d.2 $e |- ( ph -> F/_ x A ) $.
    $( Deduction version of ~ nfsbc1 .  (Contributed by NM, 23-May-2006.)
       (Revised by Mario Carneiro, 12-Oct-2016.) $)
    nfsbc1d $p |- ( ph -> F/ x [. A / x ]. ps ) $=
      ( wsbc cab wcel df-sbc wnfc nfab1 a1i nfeld nfxfrd ) BCDFDBCGZHACBCDIACDO
      ECOJABCKLMN $.
  $}

  ${
    nfsbc1.1 $e |- F/_ x A $.
    $( Bound-variable hypothesis builder for class substitution.  (Contributed
       by NM, 5-Aug-1993.)  (Revised by Mario Carneiro, 12-Oct-2016.) $)
    nfsbc1 $p |- F/ x [. A / x ]. ph $=
      ( wsbc wnf wtru wnfc a1i nfsbc1d mptru ) ABCEBFGABCBCHGDIJK $.
  $}

  ${
    $d x A $.
    $( Bound-variable hypothesis builder for class substitution.  (Contributed
       by Mario Carneiro, 12-Oct-2016.) $)
    nfsbc1v $p |- F/ x [. A / x ]. ph $=
      ( nfcv nfsbc1 ) ABCBCDE $.
  $}

  ${
    nfsbcd.1 $e |- F/ y ph $.
    nfsbcd.2 $e |- ( ph -> F/_ x A ) $.
    nfsbcd.3 $e |- ( ph -> F/ x ps ) $.
    $( Deduction version of ~ nfsbc .  (Contributed by NM, 23-Nov-2005.)
       (Revised by Mario Carneiro, 12-Oct-2016.) $)
    nfsbcd $p |- ( ph -> F/ x [. A / y ]. ps ) $=
      ( wsbc cab wcel df-sbc nfabd nfeld nfxfrd ) BDEIEBDJZKACBDELACEPGABCDFHMN
      O $.
  $}

  ${
    nfsbc.1 $e |- F/_ x A $.
    nfsbc.2 $e |- F/ x ph $.
    $( Bound-variable hypothesis builder for class substitution.  (Contributed
       by NM, 7-Sep-2014.)  (Revised by Mario Carneiro, 12-Oct-2016.) $)
    nfsbc $p |- F/ x [. A / y ]. ph $=
      ( wsbc wnf wtru nftru wnfc a1i nfsbcd mptru ) ACDGBHIABCDCJBDKIELABHIFLMN
      $.
  $}

  ${
    $d x z $.  $d z A $.  $d y z ph $.
    $( A composition law for class substitution.  (Contributed by NM,
       26-Sep-2003.)  (Revised by Mario Carneiro, 13-Oct-2016.) $)
    sbcco $p |- ( [. A / y ]. [. y / x ]. ph <-> [. A / x ]. ph ) $=
      ( vz cv wsbc cvv wcel sbcex dfsbcq wsb sbsbc sbbii sbco2 3bitr3ri vtoclbg
      nfv bitri pm5.21nii ) ABCFGZCDGZDHIABDGZUACDJABDJUACEFZGZABUDGZUBUCEDHUAC
      UDDKABUDDKUEABELZUFABCLZCELUACELUGUEUHUACEABCMNABECACROUACEMPABEMSQT $.
  $}

  ${
    $d x y $.  $d y ph $.  $d A y $.
    sbcco2.1 $e |- ( x = y -> A = B ) $.
    $( A composition law for class substitution.  Importantly, ` x ` may occur
       free in the class expression substituted for ` A ` .  (Contributed by
       NM, 5-Sep-2004.)  (Proof shortened by Andrew Salmon, 8-Jun-2011.) $)
    sbcco2 $p |- ( [. x / y ]. [. B / x ]. ph <-> [. A / x ]. ph ) $=
      ( wsbc cv wsb sbsbc weq wceq wb equcoms dfsbcq bicomd syl sbievw bitr3i )
      ABEGZCBHGTCBIABDGZTCBJTUACBCBKDELZTUAMUBBCFNUBUATABDEOPQRS $.
  $}

  ${
    $d x y A $.  $d y ph $.
    $( An equivalence for class substitution.  (Contributed by NM,
       23-Aug-1993.)  (Revised by Mario Carneiro, 12-Oct-2016.) $)
    sbc5 $p |- ( [. A / x ]. ph <-> E. x ( x = A /\ ph ) ) $=
      ( vy wsbc cvv wcel cv wceq wex sbcex exsimpl isset sylibr wsb weq dfsbcq2
      wa eqeq2 anbi1d exbidv sb5 vtoclbg pm5.21nii ) ABCEZCFGZBHZCIZARZBJZABCKU
      JUHBJUFUHABLBCMNABDOBDPZARZBJUEUJDCFABDCQDHZCIZULUIBUNUKUHAUMCUGSTUAABDUB
      UCUD $.
  $}

  ${
    $d x A $.
    $( An equivalence for class substitution.  (Contributed by NM,
       11-Oct-2004.)  (Proof shortened by Andrew Salmon, 8-Jun-2011.) $)
    sbc6g $p |- ( A e. V -> ( [. A / x ]. ph <-> A. x ( x = A -> ph ) ) ) $=
      ( wcel cv wceq wi wal wa wex wsbc alexeqg sbc5 syl6rbbr ) CDEBFCGZAHBIPAJ
      BKABCLABCDMABCNO $.
  $}

  ${
    $d x A $.
    sbc6.1 $e |- A e. _V $.
    $( An equivalence for class substitution.  (Contributed by NM,
       23-Aug-1993.)  (Proof shortened by Eric Schmidt, 17-Jan-2007.) $)
    sbc6 $p |- ( [. A / x ]. ph <-> A. x ( x = A -> ph ) ) $=
      ( cvv wcel wsbc cv wceq wi wal wb sbc6g ax-mp ) CEFABCGBHCIAJBKLDABCEMN
      $.
  $}

  ${
    $d y A $.  $d y ph $.  $d x y $.
    $( An equivalence for class substitution in the spirit of ~ df-clab .  Note
       that ` x ` and ` A ` don't have to be distinct.  (Contributed by NM,
       18-Nov-2008.)  (Revised by Mario Carneiro, 13-Oct-2016.) $)
    sbc7 $p |- ( [. A / x ]. ph <-> E. y ( y = A /\ [. y / x ]. ph ) ) $=
      ( wsbc cv wceq wa wex sbcco sbc5 bitr3i ) ABDEABCFZEZCDEMDGNHCIABCDJNCDKL
      $.
  $}

  ${
    cbvsbc.1 $e |- F/ y ph $.
    cbvsbc.2 $e |- F/ x ps $.
    cbvsbc.3 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Change bound variables in a wff substitution.  (Contributed by Jeff
       Hankins, 19-Sep-2009.)  (Proof shortened by Andrew Salmon,
       8-Jun-2011.) $)
    cbvsbc $p |- ( [. A / x ]. ph <-> [. A / y ]. ps ) $=
      ( cab wcel wsbc cbvab eleq2i df-sbc 3bitr4i ) EACIZJEBDIZJACEKBDEKPQEABCD
      FGHLMACENBDENO $.
  $}

  ${
    $d y ph $.  $d x ps $.
    cbvsbcv.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Change the bound variable of a class substitution using implicit
       substitution.  (Contributed by NM, 30-Sep-2008.)  (Revised by Mario
       Carneiro, 13-Oct-2016.) $)
    cbvsbcv $p |- ( [. A / x ]. ph <-> [. A / y ]. ps ) $=
      ( nfv cbvsbc ) ABCDEADGBCGFH $.
  $}

  ${
    $d x A $.
    $( Conversion of implicit substitution to explicit class substitution,
       using a bound-variable hypothesis instead of distinct variables.
       (Closed theorem version of ~ sbciegf .)  (Contributed by NM,
       10-Nov-2005.)  (Revised by Mario Carneiro, 13-Oct-2016.) $)
    sbciegft $p |- ( ( A e. V /\ F/ x ps /\
            A. x ( x = A -> ( ph <-> ps ) ) ) -> ( [. A / x ]. ph <-> ps ) ) $=
      ( wcel wnf cv wceq wb wi wal w3a wsbc imim2i alimi biimpa sylan2 3adant1
      wa wex sbc5 biimp impd 19.23t syl5bi biimpr com23 19.21t 3ad2ant1 sylibrd
      sbc6g impbid ) DEFZBCGZCHDIZABJZKZCLZMZACDNZBVAUPATZCUAZUTBACDUBUOUSVCBKZ
      UNUSUOVBBKZCLZVDURVECURUPABUQABKUPABUCOUDPUOVFVDVBBCUEQRSUFUTBUPAKZCLZVAU
      OUSBVHKZUNUSUOBVGKZCLZVIURVJCURUPBAUQBAKUPABUGOUHPUOVKVIBVGCUIQRSUNUOVAVH
      JUSACDEULUJUKUM $.
  $}

  ${
    $d x A $.
    sbciegf.1 $e |- F/ x ps $.
    sbciegf.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Conversion of implicit substitution to explicit class substitution.
       (Contributed by NM, 14-Dec-2005.)  (Revised by Mario Carneiro,
       13-Oct-2016.) $)
    sbciegf $p |- ( A e. V -> ( [. A / x ]. ph <-> ps ) ) $=
      ( wcel wnf cv wceq wb wi wal wsbc ax-gen sbciegft mp3an23 ) DEHBCICJDKABL
      MZCNACDOBLFSCGPABCDEQR $.
  $}

  ${
    $d x A $.  $d x ps $.
    sbcieg.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Conversion of implicit substitution to explicit class substitution.
       (Contributed by NM, 10-Nov-2005.) $)
    sbcieg $p |- ( A e. V -> ( [. A / x ]. ph <-> ps ) ) $=
      ( nfv sbciegf ) ABCDEBCGFH $.
  $}

  ${
    $d x y $.  $d A y $.  $d ch y $.  $d ph y $.  $d ps x $.
    sbcie2g.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    sbcie2g.2 $e |- ( y = A -> ( ps <-> ch ) ) $.
    $( Conversion of implicit substitution to explicit class substitution.
       This version of ~ sbcie avoids a disjointness condition on ` x , A ` by
       substituting twice.  (Contributed by Mario Carneiro, 15-Oct-2016.) $)
    sbcie2g $p |- ( A e. V -> ( [. A / x ]. ph <-> ch ) ) $=
      ( cv wsbc dfsbcq wsb sbsbc sbievw bitr3i vtoclbg ) ADEJZKZBADFKCEFGADRFLI
      SADEMBADENABDEHOPQ $.
  $}

  ${
    $d x A $.  $d x ps $.
    sbcie.1 $e |- A e. _V $.
    sbcie.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Conversion of implicit substitution to explicit class substitution.
       (Contributed by NM, 4-Sep-2004.) $)
    sbcie $p |- ( [. A / x ]. ph <-> ps ) $=
      ( cvv wcel wsbc wb sbcieg ax-mp ) DGHACDIBJEABCDGFKL $.
  $}

  ${
    $d x A $.
    sbcied.1 $e |- ( ph -> A e. V ) $.
    sbcied.2 $e |- ( ( ph /\ x = A ) -> ( ps <-> ch ) ) $.
    ${
      sbciedf.3 $e |- F/ x ph $.
      sbciedf.4 $e |- ( ph -> F/ x ch ) $.
      $( Conversion of implicit substitution to explicit class substitution,
         deduction form.  (Contributed by NM, 29-Dec-2014.) $)
      sbciedf $p |- ( ph -> ( [. A / x ]. ps <-> ch ) ) $=
        ( wcel wnf cv wceq wb wi wal wsbc ex alrimi sbciegft syl3anc ) AEFKCDLD
        MENZBCOZPZDQBDERCOGJAUEDIAUCUDHSTBCDEFUAUB $.
    $}

    $d x ph $.  $d x ch $.
    $( Conversion of implicit substitution to explicit class substitution,
       deduction form.  (Contributed by NM, 13-Dec-2014.) $)
    sbcied $p |- ( ph -> ( [. A / x ]. ps <-> ch ) ) $=
      ( nfv nfvd sbciedf ) ABCDEFGHADIACDJK $.
  $}

  ${
    $d x A $.  $d x ph $.  $d x ch $.
    sbcied2.1 $e |- ( ph -> A e. V ) $.
    sbcied2.2 $e |- ( ph -> A = B ) $.
    sbcied2.3 $e |- ( ( ph /\ x = B ) -> ( ps <-> ch ) ) $.
    $( Conversion of implicit substitution to explicit class substitution,
       deduction form.  (Contributed by NM, 13-Dec-2014.) $)
    sbcied2 $p |- ( ph -> ( [. A / x ]. ps <-> ch ) ) $=
      ( cv wceq wb id sylan9eqr syldan sbcied ) ABCDEGHADKZELZRFLBCMSAREFSNIOJP
      Q $.
  $}

  ${
    $d y A $.  $d y B $.  $d y ph $.  $d x y $.
    elrabsf.1 $e |- F/_ x B $.
    $( Membership in a restricted class abstraction, expressed with explicit
       class substitution.  (The variation ~ elrabf has implicit substitution).
       The hypothesis specifies that ` x ` must not be a free variable in
       ` B ` .  (Contributed by NM, 30-Sep-2003.)  (Proof shortened by Mario
       Carneiro, 13-Oct-2016.) $)
    elrabsf $p |- ( A e. { x e. B | ph }
          <-> ( A e. B /\ [. A / x ]. ph ) ) $=
      ( vy cv wsbc crab dfsbcq nfcv nfv nfsbc1v sbceq1a cbvrab elrab2 ) ABFGZHZ
      ABCHFCDABDIABQCJARBFDEFDKAFLABQMABQNOP $.
  $}

  ${
    $d x y B $.  $d y A $.
    $( Substitution applied to an atomic wff.  Class version of ~ eqsb3 .
       (Contributed by Andrew Salmon, 29-Jun-2011.)  Avoid ~ ax-13 .  (Revised
       by Wolf Lammen, 29-Apr-2023.) $)
    eqsbc3 $p |- ( A e. V -> ( [. A / x ]. x = B <-> A = B ) ) $=
      ( vy cv wceq wsbc dfsbcq eqeq1 wsb sbsbc eqsb3 bitr3i vtoclbg ) AFCGZAEFZ
      HZQCGZPABHBCGEBDPAQBIQBCJRPAEKSPAELEACMNO $.

    $( Obsolete version of ~ eqsbc3 as of 29-Apr-2023.  (Contributed by Andrew
       Salmon, 29-Jun-2011.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    eqsbc3OLD $p |- ( A e. V -> ( [. A / x ]. x = B <-> A = B ) ) $=
      ( vy cv wceq wsbc dfsbcq eqeq1 wsb sbsbc eqsb3 bitr3i vtoclbg ) AFCGZAEFZ
      HZQCGZPABHBCGEBDPAQBIQBCJRPAEKSPAELEACMNO $.
  $}

  ${
    $d x y $.  $d y A $.  $d y ph $.  $d y ps $.
    $( Move negation in and out of class substitution.  (Contributed by NM,
       16-Jan-2004.) $)
    sbcng $p |- ( A e. V -> ( [. A / x ]. -. ph <-> -. [. A / x ]. ph ) ) $=
      ( vy wn wsb wsbc dfsbcq2 cv wceq notbid sbn vtoclbg ) AFZBEGABEGZFOBCHABC
      HZFECDOBECIEJCKPQABECILABEMN $.

    $( Distribution of class substitution over implication.  (Contributed by
       NM, 16-Jan-2004.) $)
    sbcimg $p |- ( A e. V ->
     ( [. A / x ]. ( ph -> ps ) <-> ( [. A / x ]. ph -> [. A / x ]. ps ) ) ) $=
      ( vy wi wsb wsbc dfsbcq2 cv wceq imbi12d sbim vtoclbg ) ABGZCFHACFHZBCFHZ
      GPCDIACDIZBCDIZGFDEPCFDJFKDLQSRTACFDJBCFDJMABCFNO $.

    $( Distribution of class substitution over conjunction.  (Contributed by
       NM, 31-Dec-2016.)  (Revised by NM, 17-Aug-2018.) $)
    sbcan $p |- ( [. A / x ]. ( ph /\ ps )
        <-> ( [. A / x ]. ph /\ [. A / x ]. ps ) ) $=
      ( vy wa wsbc cvv wcel sbcex adantl dfsbcq2 cv wceq anbi12d sban pm5.21nii
      wsb vtoclbg ) ABFZCDGZDHIZACDGZBCDGZFZTCDJUDUBUCBCDJKTCERACERZBCERZFUAUEE
      DHTCEDLEMDNUFUCUGUDACEDLBCEDLOABCEPSQ $.

    $( Distribution of class substitution over disjunction.  (Contributed by
       NM, 31-Dec-2016.)  (Revised by NM, 17-Aug-2018.) $)
    sbcor $p |- ( [. A / x ]. ( ph \/ ps )
         <-> ( [. A / x ]. ph \/ [. A / x ]. ps ) ) $=
      ( vy wo wsbc cvv wcel sbcex jaoi wsb dfsbcq2 cv wceq orbi12d sbor vtoclbg
      pm5.21nii ) ABFZCDGZDHIZACDGZBCDGZFZTCDJUCUBUDACDJBCDJKTCELACELZBCELZFUAU
      EEDHTCEDMENDOUFUCUGUDACEDMBCEDMPABCEQRS $.

    $( Distribution of class substitution over biconditional.  (Contributed by
       Raph Levien, 10-Apr-2004.) $)
    sbcbig $p |- ( A e. V ->
   ( [. A / x ]. ( ph <-> ps ) <-> ( [. A / x ]. ph <-> [. A / x ]. ps ) ) ) $=
      ( vy wb wsb wsbc dfsbcq2 cv wceq bibi12d sbbi vtoclbg ) ABGZCFHACFHZBCFHZ
      GPCDIACDIZBCDIZGFDEPCFDJFKDLQSRTACFDJBCFDJMABCFNO $.
  $}

  $( Move negation in and out of class substitution.  One direction of ~ sbcng
     that holds for proper classes.  (Contributed by NM, 17-Aug-2018.) $)
  sbcn1 $p |- ( [. A / x ]. -. ph -> -. [. A / x ]. ph ) $=
    ( cvv wcel wn wsbc sbcex sbcng biimpd mpcom ) CDEZAFZBCGZABCGFZMBCHLNOABCDI
    JK $.

  $( Distribution of class substitution over implication.  One direction of
     ~ sbcimg that holds for proper classes.  (Contributed by NM,
     17-Aug-2018.) $)
  sbcim1 $p |- ( [. A / x ]. ( ph -> ps )
          -> ( [. A / x ]. ph -> [. A / x ]. ps ) ) $=
    ( cvv wcel wi wsbc sbcex sbcimg biimpd mpcom ) DEFZABGZCDHZACDHBCDHGZNCDIMO
    PABCDEJKL $.

  ${
    sbcbid.1 $e |- F/ x ph $.
    sbcbid.2 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Formula-building deduction for class substitution.  (Contributed by NM,
       29-Dec-2014.) $)
    sbcbid $p |- ( ph -> ( [. A / x ]. ps <-> [. A / x ]. ch ) ) $=
      ( cab wcel wsbc abbid eleq2d df-sbc 3bitr4g ) AEBDHZIECDHZIBDEJCDEJAOPEAB
      CDFGKLBDEMCDEMN $.
  $}

  ${
    $d x ph $.
    sbcbidv.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Formula-building deduction for class substitution.  (Contributed by NM,
       29-Dec-2014.) $)
    sbcbidv $p |- ( ph -> ( [. A / x ]. ps <-> [. A / x ]. ch ) ) $=
      ( nfv sbcbid ) ABCDEADGFH $.
  $}

  ${
    sbcbii.1 $e |- ( ph <-> ps ) $.
    $( Formula-building inference for class substitution.  (Contributed by NM,
       11-Nov-2005.) $)
    sbcbii $p |- ( [. A / x ]. ph <-> [. A / x ]. ps ) $=
      ( wsbc wb wtru a1i sbcbidv mptru ) ACDFBCDFGHABCDABGHEIJK $.
  $}

  $( Distribution of class substitution over biconditional.  One direction of
     ~ sbcbig that holds for proper classes.  (Contributed by NM,
     17-Aug-2018.) $)
  sbcbi1 $p |- ( [. A / x ]. ( ph <-> ps )
       -> ( [. A / x ]. ph <-> [. A / x ]. ps ) ) $=
    ( cvv wcel wb wsbc sbcex sbcbig biimpd mpcom ) DEFZABGZCDHZACDHBCDHGZNCDIMO
    PABCDEJKL $.


  $( Substituting into equivalent wff's gives equivalent results.  (Contributed
     by Giovanni Mascellani, 9-Apr-2018.)  (Proof shortened by Wolf Lammen,
     4-May-2023.) $)
  sbcbi2 $p |- ( A. x ( ph <-> ps ) ->
       ( [. A / x ]. ph <-> [. A / x ]. ps ) ) $=
    ( wb wal nfa1 sp sbcbid ) ABEZCFABCDJCGJCHI $.

  $( Obsolete proof of ~ sbcbi2 as of 4-May-2023.  (Contributed by Giovanni
     Mascellani, 9-Apr-2018.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  sbcbi2OLD $p |- ( A. x ( ph <-> ps ) ->
       ( [. A / x ]. ph <-> [. A / x ]. ps ) ) $=
    ( wb wal cab wcel wsbc wceq abbi eleq2 sylbi df-sbc 3bitr4g ) ABECFZDACGZHZ
    DBCGZHZACDIBCDIPQSJRTEABCKQSDLMACDNBCDNO $.

  ${
    $d x z A $.  $d x y z $.  $d z ph $.
    $( Move universal quantifier in and out of class substitution.
       (Contributed by NM, 31-Dec-2016.)  (Revised by NM, 18-Aug-2018.) $)
    sbcal $p |- ( [. A / y ]. A. x ph <-> A. x [. A / y ]. ph ) $=
      ( vz wal wsbc cvv wcel sbcex sps dfsbcq2 cv wceq albidv vtoclbg pm5.21nii
      wsb sbal ) ABFZCDGZDHIZACDGZBFZTCDJUCUBBACDJKTCERACERZBFUAUDEDHTCEDLEMDNU
      EUCBACEDLOABCESPQ $.

    $( Move existential quantifier in and out of class substitution.
       (Contributed by NM, 21-May-2004.)  (Revised by NM, 18-Aug-2018.) $)
    sbcex2 $p |- ( [. A / y ]. E. x ph <-> E. x [. A / y ]. ph ) $=
      ( vz wex wsbc cvv wcel sbcex exlimiv wsb dfsbcq2 wceq exbidv sbex vtoclbg
      cv pm5.21nii ) ABFZCDGZDHIZACDGZBFZTCDJUCUBBACDJKTCELACELZBFUAUDEDHTCEDME
      RDNUEUCBACEDMOABCEPQS $.
  $}

  ${
    $d x B $.  $d x A $.
    $( Class version of one implication of ~ equvelv .  (Contributed by Andrew
       Salmon, 28-Jun-2011.) $)
    sbceqal $p |- ( A e. V -> ( A. x ( x = A -> x = B ) -> A = B ) ) $=
      ( wcel cv wceq wi wal wsbc spsbc sbcimg wb eqsbc3 mpbiri pm5.5 syl 3bitrd
      eqid sylibd ) BDEZAFZBGZUBCGZHZAIUEABJZBCGZUEABDKUAUFUCABJZUDABJZHZUIUGUC
      UDABDLUAUHUJUIMUAUHBBGBSABBDNOUHUIPQABCDNRT $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Theorem *14.121 in [WhiteheadRussell] p. 185.  (Contributed by Andrew
       Salmon, 28-Jun-2011.)  (Proof shortened by Wolf Lammen, 9-May-2013.) $)
    sbeqalb $p |- ( A e. V -> ( ( A. x ( ph <-> x = A ) /\ A. x ( ph <->
      x = B ) ) -> A = B ) ) $=
      ( cv wceq wb wal wa wi wcel bibi1 biimpa biimpd alanimi sbceqal syl5 ) AB
      FZCGZHZBIASDGZHZBIJTUBKZBICELCDGUAUCUDBUAUCJTUBUAUCTUBHATUBMNOPBCDEQR $.
  $}

  ${
    $d x B $.
    $( ~ eqsbc3 with setvar variable on right side of equals sign.
       (Contributed by Alan Sare, 24-Oct-2011.)  (Proof shortened by JJ,
       7-Jul-2021.) $)
    eqsbc3r $p |- ( A e. V -> ( [. A / x ]. B = x <-> B = A ) ) $=
      ( wcel cv wceq wsbc eqsbc3 eqcom sbcbii 3bitr4g ) BDEAFZCGZABHBCGCMGZABHC
      BGABCDIONABCMJKCBJL $.
  $}

  $( Distribution of class substitution over triple conjunction.  (Contributed
     by NM, 14-Dec-2006.)  (Revised by NM, 17-Aug-2018.) $)
  sbc3an $p |- ( [. A / x ]. ( ph /\ ps /\ ch ) <->
              ( [. A / x ]. ph /\ [. A / x ]. ps /\ [. A / x ]. ch ) ) $=
    ( w3a wsbc wa df-3an sbcbii sbcan anbi1i 3bitri bitr4i ) ABCFZDEGZADEGZBDEG
    ZHZCDEGZHZQRTFPABHZCHZDEGUBDEGZTHUAOUCDEABCIJUBCDEKUDSTABDEKLMQRTIN $.

  ${
    $d y A $.  $d x y B $.
    $( Class substitution into a membership relation.  (Contributed by NM,
       17-Aug-2018.)  Avoid ~ ax-13 .  (Revised by Wolf Lammen,
       30-Apr-2023.) $)
    sbcel1v $p |- ( [. A / x ]. x e. B <-> A e. B ) $=
      ( vy wcel wsbc cvv sbcex elex wsb dfsbcq2 eleq1 clelsb3 vtoclbg pm5.21nii
      cv ) APCEZABFZBGEBCEZQABHBCIQADJDPZCERSDBGQADBKTBCLDACMNO $.

    $( Obsolete version of ~ sbcel1v as of 30-Apr-2023.  (Contributed by NM,
       17-Aug-2018.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    sbcel1vOLD $p |- ( [. A / x ]. x e. B <-> A e. B ) $=
      ( vy wcel wsbc cvv sbcex elex wsb dfsbcq2 eleq1 clelsb3 vtoclbg pm5.21nii
      cv ) APCEZABFZBGEBCEZQABHBCIQADJDPZCERSDBGQADBKTBCLDACMNO $.
  $}

  ${
    $d y B $.  $d x y A $.
    $( Class substitution into a membership relation.  (Contributed by NM,
       17-Nov-2006.)  (Proof shortened by Andrew Salmon, 29-Jun-2011.) $)
    sbcel2gv $p |- ( B e. V -> ( [. B / x ]. A e. x <-> A e. B ) ) $=
      ( vy cv wcel eleq2 sbcie2g ) BAFZGBEFZGBCGAECDJKBHKCBHI $.

    $( Class substitution into a membership relation.  One direction of
       ~ sbcel2gv that holds for proper classes.  (Contributed by NM,
       17-Aug-2018.) $)
    sbcel21v $p |- ( [. B / x ]. A e. x -> A e. B ) $=
      ( cvv wcel cv wsbc sbcex sbcel2gv biimpd mpcom ) CDEZBAFEZACGZBCEZMACHLNO
      ABCDIJK $.
  $}

  ${
    $d x ph $.
    sbcimdv.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Substitution analogue of Theorem 19.20 of [Margaris] p. 90 ( ~ alim ).
       (Contributed by NM, 11-Nov-2005.)  (Revised by NM, 17-Aug-2018.)  (Proof
       shortened by JJ, 7-Jul-2021.) $)
    sbcimdv $p |- ( ph -> ( [. A / x ]. ps -> [. A / x ]. ch ) ) $=
      ( wsbc cvv wcel sbcex wi wal alrimiv spsbc sbcim1 syl56 com3l mpdi ) ABDE
      GZEHIZCDEGZBDEJTASUAABCKZDLTUBDEGSUAKAUBDFMUBDEHNBCDEOPQR $.
  $}

  ${
    $d x y $.  $d y A $.  $d y ph $.
    $( Substitution for a variable not free in a wff does not affect it.
       (Contributed by Mario Carneiro, 14-Oct-2016.) $)
    sbctt $p |- ( ( A e. V /\ F/ x ph ) -> ( [. A / x ]. ph <-> ph ) ) $=
      ( vy wcel wnf wsbc wb wsb wi wceq dfsbcq2 bibi1d imbi2d sbft vtoclg imp
      cv ) CDFABGZABCHZAIZTABEJZAIZKTUBKECDESCLZUDUBTUEUCUAAABECMNOABEPQR $.
  $}

  ${
    sbcgf.1 $e |- F/ x ph $.
    $( Substitution for a variable not free in a wff does not affect it.
       (Contributed by NM, 11-Oct-2004.)  (Proof shortened by Andrew Salmon,
       29-Jun-2011.) $)
    sbcgf $p |- ( A e. V -> ( [. A / x ]. ph <-> ph ) ) $=
      ( wcel wnf wsbc wb sbctt mpan2 ) CDFABGABCHAIEABCDJK $.

    $( Substitution for a variable not free in antecedent affects only the
       consequent.  (Contributed by NM, 11-Oct-2004.) $)
    sbc19.21g $p |- ( A e. V ->
            ( [. A / x ]. ( ph -> ps ) <-> ( ph -> [. A / x ]. ps ) ) ) $=
      ( wcel wi wsbc sbcimg sbcgf imbi1d bitrd ) DEGZABHCDIACDIZBCDIZHAPHABCDEJ
      NOAPACDEFKLM $.
  $}

  ${
    $d x ph $.
    $( Substitution for a variable not occurring in a wff does not affect it.
       Distinct variable form of ~ sbcgf .  (Contributed by Alan Sare,
       10-Nov-2012.) $)
    sbcg $p |- ( A e. V -> ( [. A / x ]. ph <-> ph ) ) $=
      ( nfv sbcgf ) ABCDABEF $.
  $}

  ${
    sbcgfi.1 $e |- A e. _V $.
    sbcgfi.2 $e |- F/ x ph $.
    $( Substitution for a variable not free in a wff does not affect it, in
       inference form.  (Contributed by Giovanni Mascellani, 1-Jun-2019.) $)
    sbcgfi $p |- ( [. A / x ]. ph <-> ph ) $=
      ( cvv wcel wsbc wb sbcgf ax-mp ) CFGABCHAIDABCFEJK $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x V $.  $d y W $.
    sbc2iegf.1 $e |- F/ x ps $.
    sbc2iegf.2 $e |- F/ y ps $.
    sbc2iegf.3 $e |- F/ x B e. W $.
    sbc2iegf.4 $e |- ( ( x = A /\ y = B ) -> ( ph <-> ps ) ) $.
    $( Conversion of implicit substitution to explicit class substitution.
       (Contributed by Mario Carneiro, 19-Dec-2013.) $)
    sbc2iegf $p |- ( ( A e. V /\ B e. W ) ->
            ( [. A / x ]. [. B / y ]. ph <-> ps ) ) $=
      ( wcel wa simpl cv wceq wb adantll nfv wsbc wnf a1i sbciedf nfan ) EGMZFH
      MZNZADFUAZBCEGUFUGOUGCPEQZUIBRUFUGUJNZABDFHUGUJOUJDPFQABRUGLSUKDTBDUBUKJU
      CUDSUFUGCUFCTKUEBCUBUHIUCUD $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x y ps $.
    sbc2ie.1 $e |- A e. _V $.
    sbc2ie.2 $e |- B e. _V $.
    sbc2ie.3 $e |- ( ( x = A /\ y = B ) -> ( ph <-> ps ) ) $.
    $( Conversion of implicit substitution to explicit class substitution.
       (Contributed by NM, 16-Dec-2008.)  (Revised by Mario Carneiro,
       19-Dec-2013.) $)
    sbc2ie $p |- ( [. A / x ]. [. B / y ]. ph <-> ps ) $=
      ( cvv wcel wsbc wb nfv nfth sbc2iegf mp2an ) EJKFJKZADFLCELBMGHABCDEFJJBC
      NBDNRCHOIPQ $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x y ph $.  $d x y ch $.
    sbc2iedv.1 $e |- A e. _V $.
    sbc2iedv.2 $e |- B e. _V $.
    sbc2iedv.3 $e |- ( ph -> ( ( x = A /\ y = B ) -> ( ps <-> ch ) ) ) $.
    $( Conversion of implicit substitution to explicit class substitution.
       (Contributed by NM, 16-Dec-2008.)  (Proof shortened by Mario Carneiro,
       18-Oct-2016.) $)
    sbc2iedv $p |- ( ph -> ( [. A / x ]. [. B / y ]. ps <-> ch ) ) $=
      ( wsbc cvv wcel a1i cv wceq wa wb impl sbcied ) ABEGKCDFLFLMAHNADOFPZQZBC
      EGLGLMUBINAUAEOGPBCRJSTT $.
  $}

  ${
    $d x y z A $.  $d y z B $.  $d z C $.  $d x y z ps $.
    sbc3ie.1 $e |- A e. _V $.
    sbc3ie.2 $e |- B e. _V $.
    sbc3ie.3 $e |- C e. _V $.
    sbc3ie.4 $e |- ( ( x = A /\ y = B /\ z = C ) -> ( ph <-> ps ) ) $.
    $( Conversion of implicit substitution to explicit class substitution.
       (Contributed by Mario Carneiro, 19-Jun-2014.)  (Revised by Mario
       Carneiro, 29-Dec-2014.) $)
    sbc3ie $p |- ( [. A / x ]. [. B / y ]. [. C / z ]. ph <-> ps ) $=
      ( wsbc cv wceq wa cvv wcel a1i wb 3expa sbcied sbc2ie ) AEHMBCDFGIJCNFOZD
      NGOZPZABEHQHQRUFKSUDUEENHOABTLUAUBUC $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( Lemma for ~ sbccom .  (Contributed by NM, 14-Nov-2005.)  (Revised by
       Mario Carneiro, 18-Oct-2016.) $)
    sbccomlem $p |- ( [. A / x ]. [. B / y ]. ph
         <-> [. B / y ]. [. A / x ]. ph ) $=
      ( cv wceq wa wex wsbc excom exdistr an12 exbii bitri 3bitr3i sbc5 3bitr4i
      19.42v sbcbii ) CFEGZAHZCIZBDJZBFDGZAHZBIZCEJZACEJZBDJABDJZCEJUEUCHBIZUAU
      GHZCIZUDUHUEUBHZCIBIUNBIZCIUKUMUNBCKUEUBBCLUOULCUOUAUFHZBIULUNUPBUEUAAMNU
      AUFBSONPUCBDQUGCEQRUIUCBDACEQTUJUGCEABDQTR $.
  $}

  ${
    $d w y z A $.  $d w x z B $.  $d w z ph $.  $d x y $.
    $( Commutative law for double class substitution.  (Contributed by NM,
       15-Nov-2005.)  (Proof shortened by Mario Carneiro, 18-Oct-2016.) $)
    sbccom $p |- ( [. A / x ]. [. B / y ]. ph
          <-> [. B / y ]. [. A / x ]. ph ) $=
      ( vw vz cv wsbc sbccomlem sbcbii bitri 3bitr3i sbcco ) ACFHZIZFEIZBDIZABG
      HZIZGDIZCEIZACEIZBDIABDIZCEIQBSIZGDIZUACOIZFEIZRUBTCOIZFEIZGDIUIGDIZFEIUF
      UHUIGFDEJUJUEGDUJPBSIZFEIUEUIULFEACBOSJKPFBESJLKUKUGFETGCDOJKMQBGDNUACFEN
      MQUCBDACFENKUAUDCEABGDNKM $.
  $}

  ${
    $d x y z $.  $d A z $.  $d B x z $.  $d V z $.  $d ph z $.
    $( Interchange class substitution and restricted quantifier.  (Contributed
       by NM, 1-Mar-2008.)  (Revised by David Abernethy, 22-Feb-2010.) $)
    sbcralt $p |- ( ( A e. V /\ F/_ y A ) ->
           ( [. A / x ]. A. y e. B ph <-> A. y e. B [. A / x ]. ph ) ) $=
      ( vz wral wsbc cv wcel wnfc wa sbcco simpl wsb wceq sbsbc nfcv wb sbequ12
      nfs1v nfral weq ralbidv bitr3i nfnfc1 nfcvd id nfeqd nfan1 dfsbcq2 adantl
      sbie ralbid adantll syl5bb sbcied syl5bbr ) ACEHZBDIUTBGJZIZGDIDFKZCDLZMZ
      ABDIZCEHZUTBGDNVEVBVGGDFVCVDOVBABGPZCEHZVEVADQZMVGVBUTBGPVIUTBGRUTVIBGVHB
      CEBESABGUBUCBGUDAVHCEABGUAUEUNUFVDVJVIVGTVCVDVJMVHVFCEVDVJCCDUGVDCVADVDCV
      AUHVDUIUJUKVJVHVFTVDABGDULUMUOUPUQURUS $.

    $( Interchange class substitution and restricted existential quantifier.
       (Contributed by NM, 1-Mar-2008.)  (Proof shortened by Mario Carneiro,
       13-Oct-2016.)  (Revised by NM, 18-Aug-2018.)  (Proof shortened by JJ,
       7-Jul-2021.) $)
    sbcrext $p |- ( F/_ y A ->
          ( [. A / x ]. E. y e. B ph <-> E. y e. B [. A / x ]. ph ) ) $=
      ( wnfc cvv wcel wrex wsbc wi sbcex a1i wb wral sbcng adantl bitrd dfrex2
      wn nfnfc1 id nfcvd nfeld cv 2a1i rexlimd2 wa sbcralt ancoms ralbid notbid
      nfan1 sbcbii 3bitr4g ex pm5.21ndd ) CDFZDGHZACEIZBDJZABDJZCEIZVAUSKURUTBD
      LMURVBUSCECDUAZURCDGURUBURCGUCUDZVBUSKURCUEEHABDLUFUGURUSVAVCNURUSUHZATZC
      EOZTZBDJZVBTZCEOZTZVAVCVFVJVHBDJZTZVMUSVJVONURVHBDGPQVFVNVLVFVNVGBDJZCEOZ
      VLUSURVNVQNVGBCDEGUIUJVFVPVKCEURUSCVDVEUMUSVPVKNURABDGPQUKRULRUTVIBDACESU
      NVBCESUOUPUQ $.
  $}

  ${
    $d y z A $.  $d x B $.  $d x y z $.  $d ph z $.  $d B z $.
    $( Interchange class substitution and restricted quantifier.  (Contributed
       by NM, 15-Nov-2005.)  (Proof shortened by Andrew Salmon,
       29-Jun-2011.) $)
    sbcralg $p |- ( A e. V ->
                 ( [. A / x ]. A. y e. B ph <-> A. y e. B [. A / x ]. ph ) ) $=
      ( wcel wnfc wral wsbc wb nfcv sbcralt mpan2 ) DFGCDHACEIBDJABDJCEIKCDLABC
      DEFMN $.

    $( Interchange class substitution and restricted existential quantifier.
       (Contributed by NM, 15-Nov-2005.)  (Revised by NM, 18-Aug-2018.) $)
    sbcrex $p |- ( [. A / x ]. E. y e. B ph <-> E. y e. B [. A / x ]. ph ) $=
      ( wnfc wrex wsbc wb nfcv sbcrext ax-mp ) CDFACEGBDHABDHCEGICDJABCDEKL $.

    $( Interchange class substitution and restricted unique existential
       quantifier.  (Contributed by NM, 24-Feb-2013.)  (Revised by NM,
       18-Aug-2018.) $)
    sbcreu $p |- ( [. A / x ]. E! y e. B ph <-> E! y e. B [. A / x ]. ph ) $=
      ( vz wreu wsbc cvv wcel sbcex reurex rexlimivw syl wsb dfsbcq2 cv reubidv
      wrex wceq nfcv nfs1v nfreu weq sbequ12 sbie vtoclbg pm5.21nii ) ACEGZBDHZ
      DIJZABDHZCEGZUIBDKUMULCESUKULCELULUKCEABDKMNUIBFOABFOZCEGZUJUMFDIUIBFDPFQ
      DTUNULCEABFDPRUIUOBFUNBCEBEUAABFUBUCBFUDAUNCEABFUERUFUGUH $.
  $}

  ${
    $d w x y A $.  $d w ph $.  $d w ps $.  $d y ch $.
    reu8nf.1 $e |- F/ x ps $.
    reu8nf.2 $e |- F/ x ch $.
    reu8nf.3 $e |- ( x = w -> ( ph <-> ch ) ) $.
    reu8nf.4 $e |- ( w = y -> ( ch <-> ps ) ) $.
    $( Restricted uniqueness using implicit substitution.  This version of
       ~ reu8 uses a non-freeness hypothesis for ` x ` and ` ps ` instead of
       distinct variable conditions.  (Contributed by AV, 21-Jan-2022.) $)
    reu8nf $p |- ( E! x e. A ph <-> E. x e. A ( ph /\
                A. y e. A ( ps -> x = y ) ) ) $=
      ( wreu weq wi wral wa wrex nfv cbvreu reu8 nfcv nfim nfral nfan wb bicomd
      equcoms equequ1 imbi2d ralbidv anbi12d cbvrex 3bitri ) ADGLCFGLCBFEMZNZEG
      OZPZFGQABDEMZNZEGOZPZDGQACDFGAFRIJSCBFEGKTUQVAFDGCUPDIUODEGDGUABUNDHUNDRU
      BUCUDVAFRFDMZCAUPUTCAUEDFDFMACJUFUGVBUOUSEGVBUNURBFDEUHUIUJUKULUM $.
  $}

  ${
    $d y w A $.  $d w B $.  $d w ph $.  $d x y $.  $d w x $.
    sbcabel.1 $e |- F/_ x B $.
    $( Interchange class substitution and class abstraction.  (Contributed by
       NM, 5-Nov-2005.) $)
    sbcabel $p |- ( A e. V -> ( [. A / x ]. { y | ph } e. B <->
                  { y | [. A / x ]. ph } e. B ) ) $=
      ( vw wcel cvv cab wsbc wb cv wceq wa wex wal syl5bb abeq2 elex sbcan sbcg
      sbcex2 sbcal sbcbig bibi1d bitrd albidv sbcbii 3bitr4g nfcri sbcgf exbidv
      anbi12d df-clel syl ) DFIDJIZACKZEIZBDLZABDLZCKZEIZMDFUAURHNZUSOZVEEIZPZH
      QZBDLZVEVCOZVGPZHQZVAVDVJVHBDLZHQURVMVHHBDUDURVNVLHVNVFBDLZVGBDLZPURVLVFV
      GBDUBURVOVKVPVGURCNVEIZAMZCRZBDLZVQVBMZCRZVOVKVTVRBDLZCRURWBVRCBDUEURWCWA
      CURWCVQBDLZVBMWAVQABDJUFURWDVQVBVQBDJUCUGUHUISVFVSBDACVETUJVBCVETUKVGBDJB
      HEGULUMUOSUNSUTVIBDHUSEUPUJHVCEUPUKUQ $.
  $}

  ${
    $d y A $.  $d x y B $.  $d y ph $.
    $( Restricted quantifier version of Axiom 4 of [Mendelson] p. 69.  This
       provides an axiom for a predicate calculus for a restricted domain.
       This theorem generalizes the unrestricted ~ stdpc4 and ~ spsbc .  See
       also ~ rspsbca and ~ rspcsbela .  (Contributed by NM, 17-Nov-2006.)
       (Proof shortened by Mario Carneiro, 13-Oct-2016.) $)
    rspsbc $p |- ( A e. B -> ( A. x e. B ph -> [. A / x ]. ph ) ) $=
      ( vy wral wsb wcel wsbc cbvralsv dfsbcq2 rspcv syl5bi ) ABDFABEGZEDFCDHAB
      CIZABEDJNOECDABECKLM $.

    $( Restricted quantifier version of Axiom 4 of [Mendelson] p. 69.
       (Contributed by NM, 14-Dec-2005.) $)
    rspsbca $p |- ( ( A e. B /\ A. x e. B ph ) -> [. A / x ]. ph ) $=
      ( wcel wral wsbc rspsbc imp ) CDEABDFABCGABCDHI $.

    $( Existence form of ~ rspsbca .  (Contributed by NM, 29-Feb-2008.)  (Proof
       shortened by Mario Carneiro, 13-Oct-2016.) $)
    rspesbca $p |- ( ( A e. B /\ [. A / x ]. ph ) -> E. x e. B ph ) $=
      ( vy wcel wsbc wa wsb wrex dfsbcq2 rspcev cbvrexsv sylibr ) CDFABCGZHABEI
      ZEDJABDJPOECDABECKLABEDMN $.

    $( Existence form of ~ spsbc .  (Contributed by Mario Carneiro,
       18-Nov-2016.) $)
    spesbc $p |- ( [. A / x ]. ph -> E. x ph ) $=
      ( wsbc cvv wrex wex wcel sbcex rspesbca mpancom rexv sylib ) ABCDZABEFZAB
      GCEHNOABCIABCEJKABLM $.

    spesbcd.1 $e |- ( ph -> [. A / x ]. ps ) $.
    $( form of ~ spsbc .  (Contributed by Mario Carneiro, 9-Feb-2017.) $)
    spesbcd $p |- ( ph -> E. x ps ) $=
      ( wsbc wex spesbc syl ) ABCDFBCGEBCDHI $.
  $}

  ${
    $d x B $.
    sbcth2.1 $e |- ( x e. B -> ph ) $.
    $( A substitution into a theorem.  (Contributed by NM, 1-Mar-2008.)  (Proof
       shortened by Mario Carneiro, 13-Oct-2016.) $)
    sbcth2 $p |- ( A e. B -> [. A / x ]. ph ) $=
      ( wcel wral wsbc rgen rspsbc mpi ) CDFABDGABCHABDEIABCDJK $.
  $}

  ${
    $d x ph $.
    $( Version of ~ ra4 with a disjoint variable condition, requiring fewer
       axioms.  This is ~ stdpc5v for a restricted domain.  (Contributed by BJ,
       27-Mar-2020.) $)
    ra4v $p |- ( A. x e. A ( ph -> ps ) -> ( ph -> A. x e. A ps ) ) $=
      ( wi wral r19.21v biimpi ) ABECDFABCDFEABCDGH $.
  $}

  ${
    ra4.1 $e |- F/ x ph $.
    $( Restricted quantifier version of Axiom 5 of [Mendelson] p. 69.  This is
       the axiom ~ stdpc5 of standard predicate calculus for a restricted
       domain.  See ~ ra4v for a version requiring fewer axioms.  (Contributed
       by NM, 16-Jan-2004.)  (Proof shortened by BJ, 27-Mar-2020.) $)
    ra4 $p |- ( A. x e. A ( ph -> ps ) -> ( ph -> A. x e. A ps ) ) $=
      ( wi wral r19.21 biimpi ) ABFCDGABCDGFABCDEHI $.
  $}

  ${
    $d x y A $.
    rmo2.1 $e |- F/ y ph $.
    $( Alternate definition of restricted "at most one."  Note that
       ` E* x e. A ph ` is not equivalent to
       ` E. y e. A A. x e. A ( ph -> x = y ) ` (in analogy to ~ reu6 ); to see
       this, let ` A ` be the empty set.  However, one direction of this
       pattern holds; see ~ rmo2i .  (Contributed by NM, 17-Jun-2017.) $)
    rmo2 $p |- ( E* x e. A ph <-> E. y A. x e. A ( ph -> x = y ) ) $=
      ( wrmo cv wcel wa wmo weq wi wal wex wral df-rmo nfv nfan mof impexp
      albii df-ral bitr4i exbii 3bitri ) ABDFBGDHZAIZBJUGBCKZLZBMZCNAUHLZBDOZCN
      ABDPUGBCUFACUFCQERSUJULCUJUFUKLZBMULUIUMBUFAUHTUAUKBDUBUCUDUE $.

    $( Condition implying restricted "at most one."  (Contributed by NM,
       17-Jun-2017.) $)
    rmo2i $p |- ( E. y e. A A. x e. A ( ph -> x = y ) -> E* x e. A ph ) $=
      ( weq wi wral wrex wex wrmo rexex rmo2 sylibr ) ABCFGBDHZCDIOCJABDKOCDLAB
      CDEMN $.

    $( Restricted "at most one" using explicit substitution.  (Contributed by
       NM, 4-Nov-2012.)  (Revised by NM, 16-Jun-2017.)  Avoid ~ ax-13 .
       (Revised by Wolf Lammen, 30-Apr-2023.) $)
    rmo3 $p |- ( E* x e. A ph <->
               A. x e. A A. y e. A ( ( ph /\ [ y / x ] ph ) -> x = y ) ) $=
      ( wrmo cv wcel wa wmo wsb wi wral anbi1i bitri 3bitri impexp albii df-ral
      wal weq df-rmo sban clelsb3 anbi2i an4 ancom r19.21v 3bitr2i nfv nfan mo3
      imbi1i 3bitr4i ) ABDFBGDHZAIZBJZAABCKZIZBCUAZLZCDMZBDMZABDUBUPUPBCKZIZUTL
      ZCTZBTUOVBLZBTUQVCVGVHBVGCGDHZUOVALZLZCTVJCDMVHVFVKCVFVIUOIZUSIZUTLVLVALV
      KVEVMUTVEUPVIURIZIUOVIIZUSIVMVDVNUPVDUOBCKZURIVNUOABCUCVPVIURCBDUDNOUEUOA
      VIURUFVOVLUSUOVIUGNPUMVLUSUTQVIUOVAQPRVJCDSUOVACDUHUIRUPBCUOACUOCUJEUKULV
      BBDSUNO $.

    $( Obsolete version of ~ rmo3 as of 30-Apr-2023.  (Contributed by NM,
       4-Nov-2012.)  (Revised by NM, 16-Jun-2017.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    rmo3OLD $p |- ( E* x e. A ph <->
               A. x e. A A. y e. A ( ( ph /\ [ y / x ] ph ) -> x = y ) ) $=
      ( wrmo cv wcel wa wmo wsb wi wral anbi1i bitri 3bitri impexp albii df-ral
      wal weq df-rmo sban clelsb3 anbi2i an4 ancom r19.21v 3bitr2i nfv nfan mo3
      imbi1i 3bitr4i ) ABDFBGDHZAIZBJZAABCKZIZBCUAZLZCDMZBDMZABDUBUPUPBCKZIZUTL
      ZCTZBTUOVBLZBTUQVCVGVHBVGCGDHZUOVALZLZCTVJCDMVHVFVKCVFVIUOIZUSIZUTLVLVALV
      KVEVMUTVEUPVIURIZIUOVIIZUSIVMVDVNUPVDUOBCKZURIVNUOABCUCVPVIURCBDUDNOUEUOA
      VIURUFVOVLUSUOVIUGNPUMVLUSUTQVIUOVAQPRVJCDSUOVACDUHUIRUPBCUOACUOCUJEUKULV
      BBDSUNO $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.  $d x ps $.  $d x ch $.
    rmoi.b $e |- ( x = B -> ( ph <-> ps ) ) $.
    rmoi.c $e |- ( x = C -> ( ph <-> ch ) ) $.
    $( Consequence of "at most one", using implicit substitution.  (Contributed
       by NM, 2-Jan-2015.)  (Revised by NM, 16-Jun-2017.) $)
    rmob $p |- ( ( E* x e. A ph /\ ( B e. A /\ ps ) ) ->
        ( B = C <-> ( C e. A /\ ch ) ) ) $=
      ( wrmo cv wcel wa wmo wceq wb df-rmo simprl eleq1 anbi12d syl5ibcom simpl
      wi a1i anim1i simpll simplr mob syl3anc ex pm5.21ndd sylanb ) ADEJDKZELZA
      MZDNZFELZBMZFGOZGELZCMZPZADEQUPURMZUTUSVAVCUQUSUTUPUQBRZFGESUAVAUTUCVCUTC
      UBUDVCUTVBVCUTMUQUTMUPURVBVCUQUTVDUEUPURUTUFUPURUTUGUOURVADFGEEUMFOUNUQAB
      UMFESHTUMGOUNUTACUMGESITUHUIUJUKUL $.

    $( Consequence of "at most one", using implicit substitution.  (Contributed
       by NM, 4-Nov-2012.)  (Revised by NM, 16-Jun-2017.) $)
    rmoi $p |- ( ( E* x e. A ph
          /\ ( B e. A /\ ps ) /\ ( C e. A /\ ch ) ) -> B = C ) $=
      ( wrmo wcel wa wceq rmob biimp3ar ) ADEJFEKBLFGMGEKCLABCDEFGHINO $.
  $}

  ${
    $d A x $.  $d B x $.  $d ch x $.
    rmoi2.1 $e |- ( x = B -> ( ps <-> ch ) ) $.
    rmoi2.2 $e |- ( ph -> B e. A ) $.
    rmoi2.3 $e |- ( ph -> E* x e. A ps ) $.
    rmoi2.4 $e |- ( ph -> x e. A ) $.
    rmoi2.5 $e |- ( ph -> ps ) $.
    $( Consequence of "restricted at most one."  (Contributed by Thierry
       Arnoux, 9-Dec-2019.) $)
    rmob2 $p |- ( ph -> ( x = B <-> ch ) ) $=
      ( cv wceq wcel wa wmo wb wrmo df-rmo sylib eleq1 mob2 syl112anc mpbirand
      anbi12d ) ADLZFMZFENZCHAUHUFENZBOZDPZUIBUGUHCOZQHABDERUKIBDESTJKUJULDFEUG
      UIUHBCUFFEUAGUEUBUCUD $.

    rmoi2.6 $e |- ( ph -> ch ) $.
    $( Consequence of "restricted at most one."  (Contributed by Thierry
       Arnoux, 9-Dec-2019.) $)
    rmoi2 $p |- ( ph -> x = B ) $=
      ( cv wceq rmob2 mpbird ) ADMFNCLABCDEFGHIJKOP $.
  $}

  ${
    $d x y A $.  $d y ph $.  $d y ps $.
    rmoanim.1 $e |- F/ x ph $.
    $( Introduction of a conjunct into restricted "at most one" quantifier,
       analogous to ~ moanim .  (Contributed by Alexander van der Vekens,
       25-Jun-2017.) $)
    rmoanim $p |- ( E* x e. A ( ph /\ ps ) <-> ( ph -> E* x e. A ps ) ) $=
      ( vy wa weq wi wral wex wrmo impexp ralbii r19.21 bitri exbii rmo2 imbi2i
      nfv 19.37v bitr4i 3bitr4i ) ABGZCFHZIZCDJZFKABUEIZCDJZIZFKZUDCDLABCDLZIZU
      GUJFUGAUHIZCDJUJUFUNCDABUEMNAUHCDEOPQUDCFDUDFTRUMAUIFKZIUKULUOABCFDBFTRSA
      UIFUAUBUC $.

    $( Introduction of a conjunct into restricted unique existential
       quantifier, analogous to ~ euan .  (Contributed by Alexander van der
       Vekens, 2-Jul-2017.) $)
    reuan $p |- ( E! x e. A ( ph /\ ps ) <-> ( ph /\ E! x e. A ps ) ) $=
      ( wa wreu wrex wrmo wi cv wcel simpl a1i rexlimi adantr simpr reximi reu5
      biimpa nfre1 ancrd impbid2 rmobida jca32 anbi2i 3imtr4i wb reubida impbii
      a1d ibar ) ABFZCDGZABCDGZFZUMCDHZUMCDIZFZABCDHZBCDIZFZFUNUPUSAUTVAUQAURUM
      ACDEUMAJCKDLZABMNOZPUQUTURUMBCDABQZRPUQURVAUQUMBCDUMCDUAUQVCFZUMBVEVFBAVF
      ABUQAVCVDPUKUBUCUDTUEUMCDSUOVBABCDSUFUGAUOUNABUMCDEABUMUHVCABULPUITUJ $.
  $}

  ${
    $d x y A $.  $d x B $.
    $( Double restricted existential uniqueness.  This theorem shows a
       condition under which a "naive" definition matches the correct one,
       analogous to ~ 2eu1 .  (Contributed by Alexander van der Vekens,
       25-Jun-2017.) $)
    2reu1 $p |- ( A. x e. A E* y e. B ph -> ( E! x e. A E! y e. B ph
                <-> ( E! x e. A E. y e. B ph /\ E! y e. B E. x e. A ph ) ) ) $=
      ( wrmo wral wreu wrex wa wi 2reu5a wcel simprr rsp jca sylib com12 reu5
      cv adantr impcom rmoimia nfra1 rmoanim ancrd 2rmoswap imdistani simplbiim
      ex syl6 2reu2rex rexcom jctild anbi12i an4 bitri syl6ibr 2rexreu impbid1
      ) ACEFZBDGZACEHBDHZACEIZBDHZABDIZCEHZJZVCVBVHVCVBVDBDIZVFCEIZJZVDBDFZVFCE
      FZJZJZVHVCVBVNVKVCVDVAJZBDIVPBDFZVBVNKABCDELVQVBVLVBJVNVQVBVLVQVBVDJZBDFV
      BVLKVRVPBDBTDMZVRVPVSVRJVDVAVSVBVDNVRVSVAVBVSVAKVDVABDOUAUBPUJUCVBVDBDVAB
      DUDUEQUFVLVBVMVBVLVMABCDEUGRUHUKUIVCVIVJABCDEULZVCVIVJVTABCDEUMQPUNVHVIVL
      JZVJVMJZJVOVEWAVGWBVDBDSVFCESUOVIVLVJVMUPUQURRABCDEUSUT $.

    $( Double restricted existential uniqueness, analogous to ~ 2eu2 .
       (Contributed by Alexander van der Vekens, 29-Jun-2017.) $)
    2reu2 $p |- ( E! y e. B E. x e. A ph
                  -> ( E! x e. A E! y e. B ph <-> E! x e. A E. y e. B ph ) ) $=
      ( wrex wreu wrmo wral wi reurmo 2rmorex wa 2reu1 simpl syl6bi 3syl expcom
      2rexreu impbid ) ABDFZCEGZACEGBDGZACEFBDGZUBUACEHACEHBDIZUCUDJUACEKACBEDL
      UEUCUDUBMUDABCDENUDUBOPQUDUBUCABCDESRT $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Proper substitution of classes for sets into classes
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $c [_ $.  $( Underlined left bracket $)
  $c ]_ $.  $( Underlined right bracket $)

  $( Extend class notation to include the proper substitution of a class for a
     set into another class. $)
  csb $a class [_ A / x ]_ B $.

  $( Indicate that "x" is not bound in "A" in the definition of csb.
     This is similar to $d x A $. $)
  $( $j free_var_in 'csb' with 'A' 'x'; $)

  ${
    $d y A $.  $d y B $.  $d x y $.
    $( Define the proper substitution of a class for a set into another class.
       The underlined brackets distinguish it from the substitution into a wff,
       ~ wsbc , to prevent ambiguity.  Theorem ~ sbcel1g shows an example of
       how ambiguity could arise if we did not use distinguished brackets.
       When ` A ` is a proper class, this evaluates to the empty set (see
       ~ csbprc ).  Theorem ~ sbccsb recovers substitution into a wff from this
       definition.  (Contributed by NM, 10-Nov-2005.) $)
    df-csb $a |- [_ A / x ]_ B = { y | [. A / x ]. y e. B } $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x y $.
    $( Alternate expression for the proper substitution into a class, without
       referencing substitution into a wff.  Note that ` x ` can be free in
       ` B ` but cannot occur in ` A ` .  (Contributed by NM, 2-Dec-2013.) $)
    csb2 $p |- [_ A / x ]_ B = { y | E. x ( x = A /\ y e. B ) } $=
      ( csb cv wcel wsbc cab wceq wa wex df-csb sbc5 abbii eqtri ) ACDEBFDGZACH
      ZBIAFCJQKALZBIABCDMRSBQACNOP $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.  $d y C $.
    $( Analogue of ~ dfsbcq for proper substitution into a class.  (Contributed
       by NM, 10-Nov-2005.) $)
    csbeq1 $p |- ( A = B -> [_ A / x ]_ C = [_ B / x ]_ C ) $=
      ( vy wceq cv wcel wsbc cab csb dfsbcq abbidv df-csb 3eqtr4g ) BCFZEGDHZAB
      IZEJQACIZEJABDKACDKPRSEQABCLMAEBDNAECDNO $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.  $d y C $.
    $( Substituting into equivalent classes gives equivalent results.
       (Contributed by Giovanni Mascellani, 9-Apr-2018.) $)
    csbeq2 $p |- ( A. x B = C -> [_ A / x ]_ B = [_ A / x ]_ C ) $=
      ( vy wceq wal cv wcel cab csb wb eleq2 alimi sbcbi2 abbidv df-csb 3eqtr4g
      wsbc syl ) CDFZAGZEHZCIZABSZEJUCDIZABSZEJABCKABDKUBUEUGEUBUDUFLZAGUEUGLUA
      UHACDUCMNUDUFABOTPAEBCQAEBDQR $.
  $}

  ${
    $d x z $.  $d y z $.  $d z A $.  $d z C $.  $d z D $.
    cbvcsb.1 $e |- F/_ y C $.
    cbvcsb.2 $e |- F/_ x D $.
    cbvcsb.3 $e |- ( x = y -> C = D ) $.
    $( Change bound variables in a class substitution.  Interestingly, this
       does not require any bound variable conditions on ` A ` .  (Contributed
       by Jeff Hankins, 13-Sep-2009.)  (Revised by Mario Carneiro,
       11-Dec-2016.) $)
    cbvcsb $p |- [_ A / x ]_ C = [_ A / y ]_ D $=
      ( vz cv wcel wsbc cab csb nfcri weq eleq2d cbvsbc abbii df-csb 3eqtr4i )
      IJZDKZACLZIMUBEKZBCLZIMACDNBCENUDUFIUCUEABCBIDFOAIEGOABPDEUBHQRSAICDTBICE
      TUA $.
  $}

  ${
    $d x y $.  $d y B $.  $d x C $.
    cbvcsbv.1 $e |- ( x = y -> B = C ) $.
    $( Change the bound variable of a proper substitution into a class using
       implicit substitution.  (Contributed by NM, 30-Sep-2008.)  (Revised by
       Mario Carneiro, 13-Oct-2016.) $)
    cbvcsbv $p |- [_ A / x ]_ B = [_ A / y ]_ C $=
      ( nfcv cbvcsb ) ABCDEBDGAEGFH $.
  $}

  ${
    csbeq1d.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for proper substitution into a class.  (Contributed
       by NM, 3-Dec-2005.) $)
    csbeq1d $p |- ( ph -> [_ A / x ]_ C = [_ B / x ]_ C ) $=
      ( wceq csb csbeq1 syl ) ACDGBCEHBDEHGFBCDEIJ $.
  $}

  ${
    $d x y $.  $d y A $.
    $( Analogue of ~ sbid for proper substitution into a class.  (Contributed
       by NM, 10-Nov-2005.) $)
    csbid $p |- [_ x / x ]_ A = A $=
      ( vy cv csb wcel wsbc cab df-csb sbcid abbii abid2 3eqtri ) AADZBECDBFZAN
      GZCHOCHBACNBIPOCOAJKCBLM $.
  $}

  $( Equality theorem for proper substitution into a class.  (Contributed by
     NM, 10-Nov-2005.) $)
  csbeq1a $p |- ( x = A -> B = [_ A / x ]_ B ) $=
    ( cv wceq csb csbid csbeq1 syl5eqr ) ADZBECAJCFABCFACGAJBCHI $.

  ${
    $d z A $.  $d y z B $.  $d x z $.
    $( Composition law for chained substitutions into a class.  (Contributed by
       NM, 10-Nov-2005.) $)
    csbco $p |- [_ A / y ]_ [_ y / x ]_ B = [_ A / x ]_ B $=
      ( vz cv csb wcel wsbc cab df-csb abeq2i sbcbii sbcco bitri abbii 3eqtr4i
      ) EFZABFZDGZHZBCIZEJRDHZACIZEJBCTGACDGUBUDEUBUCASIZBCIUDUAUEBCUEETAESDKLM
      UCABCNOPBECTKAECDKQ $.
  $}

  ${
    $d y A $.  $d y B $.  $d y V $.  $d x y $.
    $( Substitution doesn't affect a constant ` B ` (in which ` x ` is not
       free).  (Contributed by Mario Carneiro, 14-Oct-2016.) $)
    csbtt $p |- ( ( A e. V /\ F/_ x B ) -> [_ A / x ]_ B = B ) $=
      ( vy wcel wnfc wa csb cv wsbc cab df-csb wnf wb nfcr sbctt sylan2 abbi1dv
      syl5eq ) BDFZACGZHZABCIEJCFZABKZELCAEBCMUCUEECUBUAUDANUEUDOAECPUDABDQRST
      $.
  $}

  ${
    csbconstgf.1 $e |- F/_ x B $.
    $( Substitution doesn't affect a constant ` B ` (in which ` x ` is not
       free).  (Contributed by NM, 10-Nov-2005.) $)
    csbconstgf $p |- ( A e. V -> [_ A / x ]_ B = B ) $=
      ( wcel wnfc csb wceq csbtt mpan2 ) BDFACGABCHCIEABCDJK $.
  $}

  ${
    $d B x $.
    $( Substitution doesn't affect a constant ` B ` (in which ` x ` does not
       occur). ~ csbconstgf with distinct variable requirement.  (Contributed
       by Alan Sare, 22-Jul-2012.) $)
    csbconstg $p |- ( A e. V -> [_ A / x ]_ B = B ) $=
      ( nfcv csbconstgf ) ABCDACEF $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.
    csbgfi.1 $e |- A e. _V $.
    csbgfi.2 $e |- F/_ x B $.
    $( Substitution for a variable not free in a class does not affect it, in
       inference form.  (Contributed by Giovanni Mascellani, 4-Jun-2019.) $)
    csbgfi $p |- [_ A / x ]_ B = B $=
      ( vy csb cv wcel wsbc df-csb abeq2i nfcri sbcgfi bitri eqriv ) FABCGZCFHZ
      QIRCIZABJZSTFQAFBCKLSABDAFCEMNOP $.
  $}

  ${
    $d x y $.
    csbconstgi.1 $e |- A e. _V $.
    $( The proper substitution of a class for a variable in another variable
       does not modify it, in inference form.  (Contributed by Giovanni
       Mascellani, 30-May-2019.) $)
    csbconstgi $p |- [_ A / x ]_ y = y $=
      ( cvv wcel cv csb wceq csbconstg ax-mp ) CEFACBGZHLIDACLEJK $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.  $d y ph $.
    nfcsb1d.1 $e |- ( ph -> F/_ x A ) $.
    $( Bound-variable hypothesis builder for substitution into a class.
       (Contributed by Mario Carneiro, 12-Oct-2016.) $)
    nfcsb1d $p |- ( ph -> F/_ x [_ A / x ]_ B ) $=
      ( vy csb cv wcel wsbc cab df-csb nfv nfsbc1d nfabd nfcxfrd ) ABBCDGFHDIZB
      CJZFKBFCDLARBFAFMAQBCENOP $.
  $}

  ${
    nfcsb1.1 $e |- F/_ x A $.
    $( Bound-variable hypothesis builder for substitution into a class.
       (Contributed by Mario Carneiro, 12-Oct-2016.) $)
    nfcsb1 $p |- F/_ x [_ A / x ]_ B $=
      ( csb wnfc wtru a1i nfcsb1d mptru ) AABCEFGABCABFGDHIJ $.
  $}

  ${
    $d x A $.
    $( Bound-variable hypothesis builder for substitution into a class.
       (Contributed by NM, 17-Aug-2006.)  (Revised by Mario Carneiro,
       12-Oct-2016.) $)
    nfcsb1v $p |- F/_ x [_ A / x ]_ B $=
      ( nfcv nfcsb1 ) ABCABDE $.
  $}

  ${
    $d x z $.  $d y z $.  $d z A $.  $d z B $.  $d z ph $.
    nfcsbd.1 $e |- F/ y ph $.
    nfcsbd.2 $e |- ( ph -> F/_ x A ) $.
    nfcsbd.3 $e |- ( ph -> F/_ x B ) $.
    $( Deduction version of ~ nfcsb .  (Contributed by NM, 21-Nov-2005.)
       (Revised by Mario Carneiro, 12-Oct-2016.) $)
    nfcsbd $p |- ( ph -> F/_ x [_ A / y ]_ B ) $=
      ( vz csb cv wcel wsbc cab df-csb nfv nfcrd nfsbcd nfabd nfcxfrd ) ABCDEJI
      KELZCDMZINCIDEOAUBBIAIPAUABCDFGABIEHQRST $.
  $}

  ${
    nfcsb.1 $e |- F/_ x A $.
    nfcsb.2 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for substitution into a class.
       (Contributed by Mario Carneiro, 12-Oct-2016.) $)
    nfcsb $p |- F/_ x [_ A / y ]_ B $=
      ( csb wnfc wtru nftru a1i nfcsbd mptru ) ABCDGHIABCDBJACHIEKADHIFKLM $.
  $}

  ${
    $d x y $.
    csbhypf.1 $e |- F/_ x A $.
    csbhypf.2 $e |- F/_ x C $.
    csbhypf.3 $e |- ( x = A -> B = C ) $.
    $( Introduce an explicit substitution into an implicit substitution
       hypothesis.  See ~ sbhypf for class substitution version.  (Contributed
       by NM, 19-Dec-2008.) $)
    csbhypf $p |- ( y = A -> [_ y / x ]_ B = C ) $=
      ( cv wceq wi csb nfeq2 nfcsb1v nfeq nfim eqeq1 csbeq1a eqeq1d imbi12d
      chvar ) AIZCJZDEJZKBIZCJZAUEDLZEJZKABUFUHAAUECFMAUGEAUEDNGOPUBUEJZUCUFUDU
      HUBUECQUIDUGEAUEDRSTHUA $.
  $}

  ${
    $d x A $.
    $( Conversion of implicit substitution to explicit substitution into a
       class.  (Closed theorem version of ~ csbiegf .)  (Contributed by NM,
       11-Nov-2005.) $)
    csbiebt $p |- ( ( A e. V /\ F/_ x C ) ->
                 ( A. x ( x = A -> B = C ) <-> [_ A / x ]_ B = C ) ) $=
      ( wcel cvv wnfc cv wceq wi wal csb wb elex wa wsbc adantl a1i nfeqd spsbc
      adantr simpl biimt csbeq1a eqeq1d bitr3d nfv nfnfc1 nfcsb1v simpr sbciedf
      nfan sylibd id nfan1 biimprcd alrimi ex impbid sylan ) BEFBGFZADHZAIBJZCD
      JZKZALZABCMZDJZNBEOVBVCPZVGVIVJVGVFABQZVIVBVGVKKVCVFABGUAUBVJVFVIABGVBVCU
      CVDVFVINVJVDVEVFVIVDVEUDVDCVHDABCUEUFZUGRVBVCAVBAUHADUIZUMVJAVHDAVHHZVJAB
      CUJZSVBVCUKTULUNVCVIVGKVBVCVIVGVCVIPVFAVCVIAVMVCAVHDVNVCVOSVCUOTUPVIVFVCV
      DVEVIVLUQRURUSRUTVA $.

    csbiedf.1 $e |- F/ x ph $.
    csbiedf.2 $e |- ( ph -> F/_ x C ) $.
    csbiedf.3 $e |- ( ph -> A e. V ) $.
    csbiedf.4 $e |- ( ( ph /\ x = A ) -> B = C ) $.
    $( Conversion of implicit substitution to explicit substitution into a
       class.  (Contributed by Mario Carneiro, 13-Oct-2016.) $)
    csbiedf $p |- ( ph -> [_ A / x ]_ B = C ) $=
      ( cv wceq wi wal csb ex alrimi wcel wnfc wb csbiebt syl2anc mpbid ) ABKCL
      ZDELZMZBNZBCDOELZAUFBGAUDUEJPQACFRBESUGUHTIHBCDEFUAUBUC $.
  $}

  ${
    $d x A $.
    csbieb.1 $e |- A e. _V $.
    csbieb.2 $e |- F/_ x C $.
    $( Bidirectional conversion between an implicit class substitution
       hypothesis ` x = A -> B = C ` and its explicit substitution equivalent.
       (Contributed by NM, 2-Mar-2008.) $)
    csbieb $p |- ( A. x ( x = A -> B = C ) <-> [_ A / x ]_ B = C ) $=
      ( cvv wcel wnfc cv wceq wi wal csb wb csbiebt mp2an ) BGHADIAJBKCDKLAMABC
      NDKOEFABCDGPQ $.
  $}

  ${
    $d a x A $.  $d a B $.  $d a C $.
    csbiebg.2 $e |- F/_ x C $.
    $( Bidirectional conversion between an implicit class substitution
       hypothesis ` x = A -> B = C ` and its explicit substitution equivalent.
       (Contributed by NM, 24-Mar-2013.)  (Revised by Mario Carneiro,
       11-Dec-2016.) $)
    csbiebg $p |- ( A e. V ->
          ( A. x ( x = A -> B = C ) <-> [_ A / x ]_ B = C ) ) $=
      ( va cv wceq wal csb eqeq2 imbi1d albidv csbeq1 eqeq1d vex csbieb vtoclbg
      wi ) AHZGHZIZCDIZTZAJAUBCKZDIUABIZUDTZAJABCKZDIGBEUBBIZUEUHAUJUCUGUDUBBUA
      LMNUJUFUIDAUBBCOPAUBCDGQFRS $.
  $}

  ${
    $d x A $.  $d x V $.
    csbiegf.1 $e |- ( A e. V -> F/_ x C ) $.
    csbiegf.2 $e |- ( x = A -> B = C ) $.
    $( Conversion of implicit substitution to explicit substitution into a
       class.  (Contributed by NM, 11-Nov-2005.)  (Revised by Mario Carneiro,
       13-Oct-2016.) $)
    csbiegf $p |- ( A e. V -> [_ A / x ]_ B = C ) $=
      ( wcel cv wceq wi wal csb ax-gen wnfc wb csbiebt mpdan mpbii ) BEHZAIBJCD
      JKZALZABCMDJZUAAGNTADOUBUCPFABCDEQRS $.
  $}

  ${
    $d x A $.
    csbief.1 $e |- A e. _V $.
    csbief.2 $e |- F/_ x C $.
    csbief.3 $e |- ( x = A -> B = C ) $.
    $( Conversion of implicit substitution to explicit substitution into a
       class.  (Contributed by NM, 26-Nov-2005.)  (Revised by Mario Carneiro,
       13-Oct-2016.) $)
    csbief $p |- [_ A / x ]_ B = C $=
      ( cvv wcel csb wceq wnfc a1i csbiegf ax-mp ) BHIZABCJDKEABCDHADLPFMGNO $.
  $}

  ${
    $d x A $.  $d x C $.
    csbie.1 $e |- A e. _V $.
    csbie.2 $e |- ( x = A -> B = C ) $.
    $( Conversion of implicit substitution to explicit substitution into a
       class.  (Contributed by AV, 2-Dec-2019.) $)
    csbie $p |- [_ A / x ]_ B = C $=
      ( nfcv csbief ) ABCDEADGFH $.
  $}

  ${
    $d x A $.  $d x C $.  $d x ph $.
    csbied.1 $e |- ( ph -> A e. V ) $.
    csbied.2 $e |- ( ( ph /\ x = A ) -> B = C ) $.
    $( Conversion of implicit substitution to explicit substitution into a
       class.  (Contributed by Mario Carneiro, 2-Dec-2014.)  (Revised by Mario
       Carneiro, 13-Oct-2016.) $)
    csbied $p |- ( ph -> [_ A / x ]_ B = C ) $=
      ( nfv nfcvd csbiedf ) ABCDEFABIABEJGHK $.
  $}

  ${
    $d x A $.  $d x ph $.  $d x D $.
    csbied2.1 $e |- ( ph -> A e. V ) $.
    csbied2.2 $e |- ( ph -> A = B ) $.
    csbied2.3 $e |- ( ( ph /\ x = B ) -> C = D ) $.
    $( Conversion of implicit substitution to explicit class substitution,
       deduction form.  (Contributed by Mario Carneiro, 2-Jan-2017.) $)
    csbied2 $p |- ( ph -> [_ A / x ]_ C = D ) $=
      ( cv wceq id sylan9eqr syldan csbied ) ABCEFGHABKZCLZQDLEFLRAQCDRMINJOP
      $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y D $.
    csbie2t.1 $e |- A e. _V $.
    csbie2t.2 $e |- B e. _V $.
    $( Conversion of implicit substitution to explicit substitution into a
       class (closed form of ~ csbie2 ).  (Contributed by NM, 3-Sep-2007.)
       (Revised by Mario Carneiro, 13-Oct-2016.) $)
    csbie2t $p |- ( A. x A. y ( ( x = A /\ y = B ) -> C = D ) ->
                  [_ A / x ]_ [_ B / y ]_ C = D ) $=
      ( cv wceq wa wi wal csb cvv nfa1 nfcvd wcel a1i csbiedf nfa2 nfv nfan 2sp
      impl ) AICJZBIDJZKEFJZLZBMZAMZACBDENFOUJAPUKAFQCORUKGSUKUFKZBDEFOUKUFBUIB
      AUAUFBUBUCULBFQDORULHSUKUFUGUHUIABUDUETT $.

    csbie2.3 $e |- ( ( x = A /\ y = B ) -> C = D ) $.
    $( Conversion of implicit substitution to explicit substitution into a
       class.  (Contributed by NM, 27-Aug-2007.) $)
    csbie2 $p |- [_ A / x ]_ [_ B / y ]_ C = D $=
      ( cv wceq wa wi wal csb gen2 csbie2t ax-mp ) AJCKBJDKLEFKMZBNANACBDEOOFKS
      ABIPABCDEFGHQR $.
  $}

  ${
    $d x y z $.  $d A y z $.  $d B y z $.  $d C x $.  $d D y z $.  $d V z $.
    csbie2g.1 $e |- ( x = y -> B = C ) $.
    csbie2g.2 $e |- ( y = A -> C = D ) $.
    $( Conversion of implicit substitution to explicit class substitution.
       This version of ~ csbie avoids a disjointness condition on ` x , A ` and
       ` x , D ` by substituting twice.  (Contributed by Mario Carneiro,
       11-Nov-2016.) $)
    csbie2g $p |- ( A e. V -> [_ A / x ]_ B = D ) $=
      ( vz wcel csb cv wsbc cab df-csb wceq eleq2d sbcie2g abbi1dv syl5eq ) CGK
      ZACDLJMZDKZACNZJOFAJCDPUBUEJFUDUCEKUCFKABCGAMBMZQDEUCHRUFCQEFUCIRSTUA $.
  $}

  ${
    $d x v z $.  $d y v z $.  $d A v z $.  $d B v z $.  $d ph v z $.
    $d ps v z $.
    cbvralcsf.1 $e |- F/_ y A $.
    cbvralcsf.2 $e |- F/_ x B $.
    cbvralcsf.3 $e |- F/ y ph $.
    cbvralcsf.4 $e |- F/ x ps $.
    cbvralcsf.5 $e |- ( x = y -> A = B ) $.
    cbvralcsf.6 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( A more general version of ~ cbvralf that doesn't require ` A ` and ` B `
       to be distinct from ` x ` or ` y ` .  Changes bound variables using
       implicit substitution.  (Contributed by Andrew Salmon, 13-Jul-2011.) $)
    cbvralcsf $p |- ( A. x e. A ph <-> A. y e. B ps ) $=
      ( vz vv cv wcel wi wal wsbc nfcri wral csb nfv nfcsb1v nfsbc1v id csbeq1a
      nfim weq eleq12d sbceq1a imbi12d cbvalv1 nfcv nfcsb csbeq1 cab df-csb wsb
      nfsbc eleq2d sbsbc bitr3i abbi2i eqtr4i syl6eq dfsbcq syl6bb bitri df-ral
      sbie 3bitr4i ) COZEPZAQZCRZDOZFPZBQZDRZACEUABDFUAVPMOZCWAEUBZPZACWASZQZMR
      VTVOWECMVOMUCWCWDCCMWBCWAEUDTACWAUEUHCMUIZVNWCAWDWFVMWAEWBWFUFCWAEUGUJACW
      AUKULUMWEVSMDWCWDDDMWBDCWAEDWAUNZGUOTADCWAWGIUTUHVSMUCMDUIZWCVRWDBWHWAVQW
      BFWHUFWHWBCVQEUBZFCWAVQEUPWINOZEPZCVQSZNUQFCNVQEURWLNFWJFPZWKCDUSWLWKWMCD
      CNFHTCDUIEFWJKVAVKWKCDVBVCVDVEVFUJWHWDACVQSZBACWAVQVGWNACDUSBACDVBABCDJLV
      KVCVHULUMVIACEVJBDFVJVL $.

    $( A more general version of ~ cbvrexf that has no distinct variable
       restrictions.  Changes bound variables using implicit substitution.
       (Contributed by Andrew Salmon, 13-Jul-2011.)  (Proof shortened by Mario
       Carneiro, 7-Dec-2014.) $)
    cbvrexcsf $p |- ( E. x e. A ph <-> E. y e. B ps ) $=
      ( wn wral wrex nfn weq notbid cbvralcsf dfrex2 notbii 3bitr4i ) AMZCENZMB
      MZDFNZMACEOBDFOUDUFUCUECDEFGHADIPBCJPKCDQABLRSUAACETBDFTUB $.

    $( A more general version of ~ cbvreuv that has no distinct variable
       restrictions.  Changes bound variables using implicit substitution.
       (Contributed by Andrew Salmon, 13-Jul-2011.) $)
    cbvreucsf $p |- ( E! x e. A ph <-> E! y e. B ps ) $=
      ( vz vv cv wcel wa weu wsb nfcri wreu csb nfv nfcsb1v nfan weq id csbeq1a
      nfs1v eleq12d sbequ12 anbi12d cbveu nfcv nfcsb nfsb csbeq1 cab wsbc sbsbc
      abbii eleq2d sbie bicomi abbi2i df-csb 3eqtr4ri syl6eq sbequ syl6bb bitri
      df-reu 3bitr4i ) COZEPZAQZCRZDOZFPZBQZDRZACEUABDFUAVQMOZCWBEUBZPZACMSZQZM
      RWAVPWFCMVPMUCWDWECCMWCCWBEUDTACMUIUECMUFZVOWDAWEWGVNWBEWCWGUGCWBEUHUJACM
      UKULUMWFVTMDWDWEDDMWCDCWBEDWBUNGUOTACMDIUPUEVTMUCMDUFZWDVSWEBWHWBVRWCFWHU
      GWHWCCVREUBZFCWBVREUQNOZEPZCDSZNURWKCVRUSZNURFWIWLWMNWKCDUTVAWLNFWLWJFPZW
      KWNCDCNFHTCDUFEFWJKVBVCVDVECNVREVFVGVHUJWHWEACDSBAMDCVIABCDJLVCVJULUMVKAC
      EVLBDFVLVM $.

    $( A more general version of ~ cbvrab with no distinct variable
       restrictions.  (Contributed by Andrew Salmon, 13-Jul-2011.) $)
    cbvrabcsf $p |- { x e. A | ph } = { y e. B | ps } $=
      ( vz vv cv wcel wa cab wsb nfcri crab csb nfv nfcsb1v nfan weq id csbeq1a
      nfs1v eleq12d sbequ12 anbi12d cbvab nfcv nfcsb csbeq1 df-csb eleq2d sbsbc
      nfsb wsbc bitr3i abbi2i eqtr4i syl6eq sbequ syl6bb eqtri df-rab 3eqtr4i
      sbie ) COZEPZAQZCRZDOZFPZBQZDRZACEUABDFUAVOMOZCVTEUBZPZACMSZQZMRVSVNWDCMV
      NMUCWBWCCCMWACVTEUDTACMUIUECMUFZVMWBAWCWEVLVTEWAWEUGCVTEUHUJACMUKULUMWDVR
      MDWBWCDDMWADCVTEDVTUNGUOTACMDIUTUEVRMUCMDUFZWBVQWCBWFVTVPWAFWFUGWFWACVPEU
      BZFCVTVPEUPWGNOZEPZCVPVAZNRFCNVPEUQWJNFWHFPZWICDSWJWIWKCDCNFHTCDUFEFWHKUR
      VKWICDUSVBVCVDVEUJWFWCACDSBAMDCVFABCDJLVKVGULUMVHACEVIBDFVIVJ $.
  $}

  ${
    $d A y $.  $d ps y $.  $d B x $.  $d ch x $.
    cbvralv2.1 $e |- ( x = y -> ( ps <-> ch ) ) $.
    cbvralv2.2 $e |- ( x = y -> A = B ) $.
    $( Rule used to change the bound variable in a restricted universal
       quantifier with implicit substitution which also changes the quantifier
       domain.  (Contributed by David Moews, 1-May-2017.) $)
    cbvralv2 $p |- ( A. x e. A ps <-> A. y e. B ch ) $=
      ( nfcv nfv cbvralcsf ) ABCDEFDEICFIADJBCJHGK $.

    $( Rule used to change the bound variable in a restricted existential
       quantifier with implicit substitution which also changes the quantifier
       domain.  (Contributed by David Moews, 1-May-2017.) $)
    cbvrexv2 $p |- ( E. x e. A ps <-> E. y e. B ch ) $=
      ( nfcv nfv cbvrexcsf ) ABCDEFDEICFIADJBCJHGK $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Define basic set operations and relations
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Declare new symbols. $)
  $c \ $.  $( Backslash (difference) $)
  $c u. $.  $( Cup (union) $)
  $c i^i $.  $( Cap (intersection) $)
  $c C_ $.  $( Subclass or subset symbol $)
  $c C. $.  $( Proper subclass or subset symbol $)

  $( Extend class notation to include class difference (read:  " ` A ` minus
     ` B ` "). $)
  cdif $a class ( A \ B ) $.

  $( Extend class notation to include union of two classes (read:  " ` A `
     union ` B ` "). $)
  cun $a class ( A u. B ) $.

  $( Extend class notation to include the intersection of two classes (read:
      " ` A ` intersect ` B ` "). $)
  cin $a class ( A i^i B ) $.

  $( Extend wff notation to include the subclass relation.  This is
     read " ` A ` is a subclass of ` B ` " or " ` B ` includes ` A ` ".  When
     ` A ` exists as a set, it is also read " ` A ` is a subset of ` B ` ". $)
  wss $a wff A C_ B $.

  $( Extend wff notation with proper subclass relation. $)
  wpss $a wff A C. B $.

  ${
    $d x A $.  $d x B $.  $d y A $.  $d y B $.  $d z x $.  $d z y $.  $d z A $.
    $d z B $.
    $( Soundness justification theorem for ~ df-dif .  (Contributed by Rodolfo
       Medina, 27-Apr-2010.)  (Proof shortened by Andrew Salmon,
       9-Jul-2011.) $)
    difjust $p |- { x | ( x e. A /\ -. x e. B ) }
                = { y | ( y e. A /\ -. y e. B ) } $=
      ( vz cv wcel wn wa cab weq eleq1w notbid anbi12d cbvabv eqtri ) AFZCGZQDG
      ZHZIZAJEFZCGZUBDGZHZIZEJBFZCGZUGDGZHZIZBJUAUFAEAEKZRUCTUEAECLULSUDAEDLMNO
      UFUKEBEBKZUCUHUEUJEBCLUMUDUIEBDLMNOP $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Define class difference, also called relative complement.  Definition
       5.12 of [TakeutiZaring] p. 20.  For example,
       ` ( { 1 , 3 } \ { 1 , 8 } ) = { 3 } ` ( ~ ex-dif ).  Contrast this
       operation with union ` ( A u. B ) ` ( ~ df-un ) and intersection
       ` ( A i^i B ) ` ( ~ df-in ).  Several notations are used in the
       literature; we chose the ` \ ` convention used in Definition 5.3 of
       [Eisenberg] p. 67 instead of the more common minus sign to reserve the
       latter for later use in, e.g., arithmetic.  We will use the
       terminology " ` A ` excludes ` B ` " to mean ` A \ B ` .  We will
       use " ` B ` is removed from ` A ` " to mean ` A \ { B } ` i.e. the
       removal of an element or equivalently the exclusion of a singleton.
       (Contributed by NM, 29-Apr-1994.) $)
    df-dif $a |- ( A \ B ) = { x | ( x e. A /\ -. x e. B ) } $.
  $}

  ${
    $d x A $.  $d x B $.  $d y A $.  $d y B $.  $d z x $.  $d z y $.  $d z A $.
    $d z B $.
    $( Soundness justification theorem for ~ df-un .  (Contributed by Rodolfo
       Medina, 28-Apr-2010.)  (Proof shortened by Andrew Salmon,
       9-Jul-2011.) $)
    unjust $p |- { x | ( x e. A \/ x e. B ) } = { y | ( y e. A \/ y e. B ) } $=
      ( vz cv wcel wo cab weq eleq1w orbi12d cbvabv eqtri ) AFZCGZODGZHZAIEFZCG
      ZSDGZHZEIBFZCGZUCDGZHZBIRUBAEAEJPTQUAAECKAEDKLMUBUFEBEBJTUDUAUEEBCKEBDKLM
      N $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Define the union of two classes.  Definition 5.6 of [TakeutiZaring]
       p. 16.  For example, ` ( { 1 , 3 } u. { 1 , 8 } ) = { 1 , 3 , 8 } `
       ( ~ ex-un ).  Contrast this operation with difference ` ( A \ B ) `
       ( ~ df-dif ) and intersection ` ( A i^i B ) ` ( ~ df-in ).  For an
       alternate definition in terms of class difference, requiring no dummy
       variables, see ~ dfun2 .  For union defined in terms of intersection,
       see ~ dfun3 .  (Contributed by NM, 23-Aug-1993.) $)
    df-un $a |- ( A u. B ) = { x | ( x e. A \/ x e. B ) } $.
  $}

  ${
    $d x A $.  $d x B $.  $d y A $.  $d y B $.  $d z x $.  $d z y $.  $d z A $.
    $d z B $.
    $( Soundness justification theorem for ~ df-in .  (Contributed by Rodolfo
       Medina, 28-Apr-2010.)  (Proof shortened by Andrew Salmon,
       9-Jul-2011.) $)
    injust $p |- { x | ( x e. A /\ x e. B ) }
               = { y | ( y e. A /\ y e. B ) } $=
      ( vz cv wcel wa cab weq eleq1w anbi12d cbvabv eqtri ) AFZCGZODGZHZAIEFZCG
      ZSDGZHZEIBFZCGZUCDGZHZBIRUBAEAEJPTQUAAECKAEDKLMUBUFEBEBJTUDUAUEEBCKEBDKLM
      N $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Define the intersection of two classes.  Definition 5.6 of
       [TakeutiZaring] p. 16.  For example,
       ` ( { 1 , 3 } i^i { 1 , 8 } ) = { 1 } ` ( ~ ex-in ).  Contrast this
       operation with union ` ( A u. B ) ` ( ~ df-un ) and difference
       ` ( A \ B ) ` ( ~ df-dif ).  For alternate definitions in terms of class
       difference, requiring no dummy variables, see ~ dfin2 and ~ dfin4 .  For
       intersection defined in terms of union, see ~ dfin3 .  (Contributed by
       NM, 29-Apr-1994.) $)
    df-in $a |- ( A i^i B ) = { x | ( x e. A /\ x e. B ) } $.

    $( Alternate definition for the intersection of two classes.  (Contributed
       by NM, 6-Jul-2005.) $)
    dfin5 $p |- ( A i^i B ) = { x e. A | x e. B } $=
      ( cin cv wcel wa cab crab df-in df-rab eqtr4i ) BCDAEZBFMCFZGAHNABIABCJNA
      BKL $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Alternate definition of class difference.  (Contributed by NM,
       25-Mar-2004.) $)
    dfdif2 $p |- ( A \ B ) = { x e. A | -. x e. B } $=
      ( cdif cv wcel wn wa cab crab df-dif df-rab eqtr4i ) BCDAEZBFNCFGZHAIOABJ
      ABCKOABLM $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Expansion of membership in a class difference.  (Contributed by NM,
       29-Apr-1994.) $)
    eldif $p |- ( A e. ( B \ C ) <-> ( A e. B /\ -. A e. C ) ) $=
      ( vx cdif wcel cvv wn wa elex adantr cv wceq notbid anbi12d df-dif elab2g
      eleq1 pm5.21nii ) ABCEZFAGFZABFZACFZHZIZATJUBUAUDABJKDLZBFZUFCFZHZIUEDATG
      UFAMZUGUBUIUDUFABRUJUHUCUFACRNODBCPQS $.
  $}

  ${
    eldifd.1 $e |- ( ph -> A e. B ) $.
    eldifd.2 $e |- ( ph -> -. A e. C ) $.
    $( If a class is in one class and not another, it is also in their
       difference.  One-way deduction form of ~ eldif .  (Contributed by David
       Moews, 1-May-2017.) $)
    eldifd $p |- ( ph -> A e. ( B \ C ) ) $=
      ( wcel wn cdif eldif sylanbrc ) ABCGBDGHBCDIGEFBCDJK $.
  $}

  ${
    eldifad.1 $e |- ( ph -> A e. ( B \ C ) ) $.
    $( If a class is in the difference of two classes, it is also in the
       minuend.  One-way deduction form of ~ eldif .  (Contributed by David
       Moews, 1-May-2017.) $)
    eldifad $p |- ( ph -> A e. B ) $=
      ( wcel wn cdif wa eldif sylib simpld ) ABCFZBDFGZABCDHFMNIEBCDJKL $.
  $}

  ${
    eldifbd.1 $e |- ( ph -> A e. ( B \ C ) ) $.
    $( If a class is in the difference of two classes, it is not in the
       subtrahend.  One-way deduction form of ~ eldif .  (Contributed by David
       Moews, 1-May-2017.) $)
    eldifbd $p |- ( ph -> -. A e. C ) $=
      ( wcel wn cdif wa eldif sylib simprd ) ABCFZBDFGZABCDHFMNIEBCDJKL $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Subclasses and subsets
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Define the subclass relationship.  Exercise 9 of [TakeutiZaring] p. 18.
     For example, ` { 1 , 2 } C_ { 1 , 2 , 3 } ` ( ~ ex-ss ).  Note that
     ` A C_ A ` (proved in ~ ssid ).  Contrast this relationship with the
     relationship ` A C. B ` (as will be defined in ~ df-pss ).  For a more
     traditional definition, but requiring a dummy variable, see ~ dfss2 .
     Other possible definitions are given by ~ dfss3 , ~ dfss4 , ~ sspss ,
     ~ ssequn1 , ~ ssequn2 , ~ sseqin2 , and ~ ssdif0 .

     We prefer the label "ss" ("subset") for ` C_ ` , despite the fact that it
     applies to classes.  It is much more common to refer to this as the subset
     relation than subclass, especially since most of the time the arguments
     are in fact sets (and for pragmatic reasons we don't want to need to use
     different operations for sets).  The way set.mm is set up, many things are
     technically classes despite morally (and provably) being sets, like ` 1 `
     (cf. ~ df-1 and ~ 1ex ) or ` RR ` ( cf. ~ df-r and ~ reex ).  This has to
     do with the fact that there are no "set expressions": classes are
     expressions but there are only set variables in set.mm (cf.
     ~ http://us.metamath.org/downloads/grammar-ambiguity.txt ).  This is why
     we use ` C_ ` both for subclass relations and for subset relations and
     call it "subset".  (Contributed by NM, 27-Apr-1994.) $)
  df-ss $a |- ( A C_ B <-> ( A i^i B ) = A ) $.

  $( Variant of subclass definition ~ df-ss .  (Contributed by NM,
     21-Jun-1993.) $)
  dfss $p |- ( A C_ B <-> A = ( A i^i B ) ) $=
    ( wss cin wceq df-ss eqcom bitri ) ABCABDZAEAIEABFIAGH $.

  $( Define proper subclass relationship between two classes.  Definition 5.9
     of [TakeutiZaring] p. 17.  For example, ` { 1 , 2 } C. { 1 , 2 , 3 } `
     ( ~ ex-pss ).  Note that ` -. A C. A ` (proved in ~ pssirr ).  Contrast
     this relationship with the relationship ` A C_ B ` (as defined in
     ~ df-ss ).  Other possible definitions are given by ~ dfpss2 and
     ~ dfpss3 .  (Contributed by NM, 7-Feb-1996.) $)
  df-pss $a |- ( A C. B <-> ( A C_ B /\ A =/= B ) ) $.

  ${
    $d x A $.  $d x B $.
    $( Alternate definition of the subclass relationship between two classes.
       Definition 5.9 of [TakeutiZaring] p. 17.  (Contributed by NM,
       8-Jan-2002.) $)
    dfss2 $p |- ( A C_ B <-> A. x ( x e. A -> x e. B ) ) $=
      ( wss cv wcel wa wb wal wi cin wceq dfss df-in eqeq2i abeq2 3bitri pm4.71
      cab albii bitr4i ) BCDZAEZBFZUDUCCFZGZHZAIZUDUEJZAIUBBBCKZLBUFASZLUHBCMUJ
      UKBABCNOUFABPQUIUGAUDUERTUA $.

    $( Alternate definition of subclass relationship.  (Contributed by NM,
       14-Oct-1999.) $)
    dfss3 $p |- ( A C_ B <-> A. x e. A x e. B ) $=
      ( wss cv wcel wi wal wral dfss2 df-ral bitr4i ) BCDAEZBFMCFZGAHNABIABCJNA
      BKL $.

    $( Alternate definition of subclass relationship.  (Contributed by RP,
       16-Apr-2020.) $)
    dfss6 $p |- ( A C_ B <-> -. E. x ( x e. A /\ -. x e. B ) ) $=
      ( wss cv wcel wi wal wn wa wex dfss2 notnotb bitri exanali xchbinxr ) BCD
      ZAEZBFZRCFZGAHZIZSTIJAKQUAUBIABCLUAMNSTAOP $.
  $}

  ${
    $d z A $.  $d z B $.  $d x z $.
    dfss2f.1 $e |- F/_ x A $.
    dfss2f.2 $e |- F/_ x B $.
    $( Equivalence for subclass relation, using bound-variable hypotheses
       instead of distinct variable conditions.  (Contributed by NM,
       3-Jul-1994.)  (Revised by Andrew Salmon, 27-Aug-2011.)  Avoid ~ ax-13 .
       (Revised by Gino Giotto, 19-May-2023.) $)
    dfss2f $p |- ( A C_ B <-> A. x ( x e. A -> x e. B ) ) $=
      ( vz wss cv wcel wi wal dfss2 nfcriv nfv weq eleq1w imbi12d cbvalv1 bitri
      nfim ) BCGFHZBIZUACIZJZFKAHZBIZUECIZJZAKFBCLUDUHFAUBUCAAFBDMAFCEMTUHFNFAO
      UBUFUCUGFABPFACPQRS $.

    $( Equivalence for subclass relation, using bound-variable hypotheses
       instead of distinct variable conditions.  (Contributed by NM,
       20-Mar-2004.) $)
    dfss3f $p |- ( A C_ B <-> A. x e. A x e. B ) $=
      ( wss cv wcel wi wal wral dfss2f df-ral bitr4i ) BCFAGZBHOCHZIAJPABKABCDE
      LPABMN $.

    $( If ` x ` is not free in ` A ` and ` B ` , it is not free in ` A C_ B ` .
       (Contributed by NM, 27-Dec-1996.) $)
    nfss $p |- F/ x A C_ B $=
      ( wss cv wcel wral dfss3f nfra1 nfxfr ) BCFAGCHZABIAABCDEJMABKL $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Membership relationships follow from a subclass relationship.
       (Contributed by NM, 5-Aug-1993.) $)
    ssel $p |- ( A C_ B -> ( C e. A -> C e. B ) ) $=
      ( vx wss cv wceq wa wex wi wal dfss2 biimpi 19.21bi anim2d eximdv df-clel
      wcel 3imtr4g ) ABEZDFZCGZUAARZHZDIUBUABRZHZDICARCBRTUDUFDTUCUEUBTUCUEJZDT
      UGDKDABLMNOPDCAQDCBQS $.
  $}

  $( Membership relationships follow from a subclass relationship.
     (Contributed by NM, 7-Jun-2004.) $)
  ssel2 $p |- ( ( A C_ B /\ C e. A ) -> C e. B ) $=
    ( wss wcel ssel imp ) ABDCAECBEABCFG $.

  ${
    sseli.1 $e |- A C_ B $.
    $( Membership inference from subclass relationship.  (Contributed by NM,
       5-Aug-1993.) $)
    sseli $p |- ( C e. A -> C e. B ) $=
      ( wss wcel wi ssel ax-mp ) ABECAFCBFGDABCHI $.

    ${
      sselii.2 $e |- C e. A $.
      $( Membership inference from subclass relationship.  (Contributed by NM,
         31-May-1999.) $)
      sselii $p |- C e. B $=
        ( wcel sseli ax-mp ) CAFCBFEABCDGH $.
    $}

    ${
      sseldi.2 $e |- ( ph -> C e. A ) $.
      $( Membership inference from subclass relationship.  (Contributed by NM,
         25-Jun-2014.) $)
      sseldi $p |- ( ph -> C e. B ) $=
        ( wcel sseli syl ) ADBGDCGFBCDEHI $.
    $}
  $}

  ${
    sseld.1 $e |- ( ph -> A C_ B ) $.
    $( Membership deduction from subclass relationship.  (Contributed by NM,
       15-Nov-1995.) $)
    sseld $p |- ( ph -> ( C e. A -> C e. B ) ) $=
      ( wss wcel wi ssel syl ) ABCFDBGDCGHEBCDIJ $.

    $( Membership deduction from subclass relationship.  (Contributed by NM,
       26-Jun-2014.) $)
    sselda $p |- ( ( ph /\ C e. A ) -> C e. B ) $=
      ( wcel sseld imp ) ADBFDCFABCDEGH $.

    ${
      sseldd.2 $e |- ( ph -> C e. A ) $.
      $( Membership inference from subclass relationship.  (Contributed by NM,
         14-Dec-2004.) $)
      sseldd $p |- ( ph -> C e. B ) $=
        ( wcel sseld mpd ) ADBGDCGFABCDEHI $.
    $}
  $}

  ${
    ssneld.1 $e |- ( ph -> A C_ B ) $.
    $( If a class is not in another class, it is also not in a subclass of that
       class.  Deduction form.  (Contributed by David Moews, 1-May-2017.) $)
    ssneld $p |- ( ph -> ( -. C e. B -> -. C e. A ) ) $=
      ( wcel sseld con3d ) ADBFDCFABCDEGH $.

    ssneldd.2 $e |- ( ph -> -. C e. B ) $.
    $( If an element is not in a class, it is also not in a subclass of that
       class.  Deduction form.  (Contributed by David Moews, 1-May-2017.) $)
    ssneldd $p |- ( ph -> -. C e. A ) $=
      ( wcel wn ssneld mpd ) ADCGHDBGHFABCDEIJ $.
  $}

  ${
    $d x A $.  $d x B $.
    ssriv.1 $e |- ( x e. A -> x e. B ) $.
    $( Inference based on subclass definition.  (Contributed by NM,
       21-Jun-1993.) $)
    ssriv $p |- A C_ B $=
      ( wss cv wcel wi dfss2 mpgbir ) BCEAFZBGKCGHAABCIDJ $.
  $}

  ${
    ssrd.0 $e |- F/ x ph $.
    ssrd.1 $e |- F/_ x A $.
    ssrd.2 $e |- F/_ x B $.
    ssrd.3 $e |- ( ph -> ( x e. A -> x e. B ) ) $.
    $( Deduction based on subclass definition.  (Contributed by Thierry Arnoux,
       8-Mar-2017.) $)
    ssrd $p |- ( ph -> A C_ B ) $=
      ( cv wcel wi wal wss alrimi dfss2f sylibr ) ABIZCJQDJKZBLCDMARBEHNBCDFGOP
      $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ph $.
    ssrdv.1 $e |- ( ph -> ( x e. A -> x e. B ) ) $.
    $( Deduction based on subclass definition.  (Contributed by NM,
       15-Nov-1995.) $)
    ssrdv $p |- ( ph -> A C_ B ) $=
      ( cv wcel wi wal wss alrimiv dfss2 sylibr ) ABFZCGNDGHZBICDJAOBEKBCDLM $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Transitivity of subclasses.  Exercise 5 of [TakeutiZaring] p. 17.
       (Contributed by NM, 24-Jun-1993.)  (Proof shortened by Andrew Salmon,
       14-Jun-2011.) $)
    sstr2 $p |- ( A C_ B -> ( B C_ C -> A C_ C ) ) $=
      ( vx wss cv wcel wi wal ssel imim1d alimdv dfss2 3imtr4g ) ABEZDFZBGZPCGZ
      HZDIPAGZRHZDIBCEACEOSUADOTQRABPJKLDBCMDACMN $.
  $}

  $( Transitivity of subclasses.  Theorem 6 of [Suppes] p. 23.  (Contributed by
     NM, 5-Sep-2003.) $)
  sstr $p |- ( ( A C_ B /\ B C_ C ) -> A C_ C ) $=
    ( wss sstr2 imp ) ABDBCDACDABCEF $.

  ${
    sstri.1 $e |- A C_ B $.
    sstri.2 $e |- B C_ C $.
    $( Subclass transitivity inference.  (Contributed by NM, 5-May-2000.) $)
    sstri $p |- A C_ C $=
      ( wss sstr2 mp2 ) ABFBCFACFDEABCGH $.
  $}

  ${
    sstrd.1 $e |- ( ph -> A C_ B ) $.
    sstrd.2 $e |- ( ph -> B C_ C ) $.
    $( Subclass transitivity deduction.  (Contributed by NM, 2-Jun-2004.) $)
    sstrd $p |- ( ph -> A C_ C ) $=
      ( wss sstr syl2anc ) ABCGCDGBDGEFBCDHI $.
  $}

  ${
    syl5ss.1 $e |- A C_ B $.
    syl5ss.2 $e |- ( ph -> B C_ C ) $.
    $( Subclass transitivity deduction.  (Contributed by NM, 6-Feb-2014.) $)
    syl5ss $p |- ( ph -> A C_ C ) $=
      ( wss a1i sstrd ) ABCDBCGAEHFI $.
  $}

  ${
    syl6ss.1 $e |- ( ph -> A C_ B ) $.
    syl6ss.2 $e |- B C_ C $.
    $( Subclass transitivity deduction.  (Contributed by Jonathan Ben-Naim,
       3-Jun-2011.) $)
    syl6ss $p |- ( ph -> A C_ C ) $=
      ( wss a1i sstrd ) ABCDECDGAFHI $.
  $}

  ${
    sylan9ss.1 $e |- ( ph -> A C_ B ) $.
    sylan9ss.2 $e |- ( ps -> B C_ C ) $.
    $( A subclass transitivity deduction.  (Contributed by NM, 27-Sep-2004.)
       (Proof shortened by Andrew Salmon, 14-Jun-2011.) $)
    sylan9ss $p |- ( ( ph /\ ps ) -> A C_ C ) $=
      ( wss sstr syl2an ) ACDHDEHCEHBFGCDEIJ $.
  $}

  ${
    sylan9ssr.1 $e |- ( ph -> A C_ B ) $.
    sylan9ssr.2 $e |- ( ps -> B C_ C ) $.
    $( A subclass transitivity deduction.  (Contributed by NM, 27-Sep-2004.) $)
    sylan9ssr $p |- ( ( ps /\ ph ) -> A C_ C ) $=
      ( wss sylan9ss ancoms ) ABCEHABCDEFGIJ $.
  $}

  ${
    $d x A $.  $d x B $.
    $( The subclass relationship is antisymmetric.  Compare Theorem 4 of
       [Suppes] p. 22.  (Contributed by NM, 21-May-1993.) $)
    eqss $p |- ( A = B <-> ( A C_ B /\ B C_ A ) ) $=
      ( vx cv wcel wb wal wi wa wceq wss albiim dfcleq dfss2 anbi12i 3bitr4i )
      CDZAEZQBEZFCGRSHCGZSRHCGZIABJABKZBAKZIRSCLCABMUBTUCUACABNCBANOP $.
  $}

  ${
    eqssi.1 $e |- A C_ B $.
    eqssi.2 $e |- B C_ A $.
    $( Infer equality from two subclass relationships.  Compare Theorem 4 of
       [Suppes] p. 22.  (Contributed by NM, 9-Sep-1993.) $)
    eqssi $p |- A = B $=
      ( wceq wss eqss mpbir2an ) ABEABFBAFCDABGH $.
  $}

  ${
    eqssd.1 $e |- ( ph -> A C_ B ) $.
    eqssd.2 $e |- ( ph -> B C_ A ) $.
    $( Equality deduction from two subclass relationships.  Compare Theorem 4
       of [Suppes] p. 22.  (Contributed by NM, 27-Jun-2004.) $)
    eqssd $p |- ( ph -> A = B ) $=
      ( wss wceq eqss sylanbrc ) ABCFCBFBCGDEBCHI $.
  $}

  $( If a class is a subclass of another class, the classes are equal iff the
     other class is a subclass of the first class.  (Contributed by AV,
     23-Dec-2020.) $)
  sssseq $p |- ( B C_ A -> ( A C_ B <-> A = B ) ) $=
    ( wceq wss eqss rbaibr ) ABCABDBADABEF $.

  ${
    eqrd.0 $e |- F/ x ph $.
    eqrd.1 $e |- F/_ x A $.
    eqrd.2 $e |- F/_ x B $.
    eqrd.3 $e |- ( ph -> ( x e. A <-> x e. B ) ) $.
    $( Deduce equality of classes from equivalence of membership.  (Contributed
       by Thierry Arnoux, 21-Mar-2017.)  (Proof shortened by BJ,
       1-Dec-2021.) $)
    eqrd $p |- ( ph -> A = B ) $=
      ( cv wcel wb wal wceq alrimi cleqf sylibr ) ABIZCJQDJKZBLCDMARBEHNBCDFGOP
      $.
  $}

  ${
    $d A x $.  $d B x $.  $d ph x $.
    eqelssd.1 $e |- ( ph -> A C_ B ) $.
    eqelssd.2 $e |- ( ( ph /\ x e. B ) -> x e. A ) $.
    $( Equality deduction from subclass relationship and membership.
       (Contributed by AV, 21-Aug-2022.) $)
    eqelssd $p |- ( ph -> A = B ) $=
      ( cv wcel ex ssrdv eqssd ) ACDEABDCABGZDHLCHFIJK $.
  $}

  ${
    $d A x $.
    $( Any class is a subclass of itself.  Exercise 10 of [TakeutiZaring]
       p. 18.  (Contributed by NM, 21-Jun-1993.)  (Proof shortened by Andrew
       Salmon, 14-Jun-2011.) $)
    ssid $p |- A C_ A $=
      ( vx cv wcel id ssriv ) BAABCADEF $.
  $}

  $( Weakening of ~ ssid .  (Contributed by BJ, 1-Sep-2022.) $)
  ssidd $p |- ( ph -> A C_ A ) $=
    ( wss ssid a1i ) BBCABDE $.

  ${
    $d A x $.
    $( Any class is a subclass of the universal class.  (Contributed by NM,
       31-Oct-1995.) $)
    ssv $p |- A C_ _V $=
      ( vx cvv cv elex ssriv ) BACBDAEF $.
  $}

  $( Equality theorem for subclasses.  (Contributed by NM, 24-Jun-1993.)
     (Proof shortened by Andrew Salmon, 21-Jun-2011.) $)
  sseq1 $p |- ( A = B -> ( A C_ C <-> B C_ C ) ) $=
    ( wceq wss wa wb eqss wi sstr2 adantl adantr impbid sylbi ) ABDABEZBAEZFZAC
    EZBCEZGABHQRSPRSIOBACJKOSRIPABCJLMN $.

  $( Equality theorem for the subclass relationship.  (Contributed by NM,
     25-Jun-1998.) $)
  sseq2 $p |- ( A = B -> ( C C_ A <-> C C_ B ) ) $=
    ( wss wa wi wceq wb sstr2 com12 anim12i eqss dfbi2 3imtr4i ) ABDZBADZECADZC
    BDZFZRQFZEABGQRHOSPTQORCABIJRPQCBAIJKABLQRMN $.

  $( Equality theorem for the subclass relationship.  (Contributed by NM,
     31-May-1999.) $)
  sseq12 $p |- ( ( A = B /\ C = D ) -> ( A C_ C <-> B C_ D ) ) $=
    ( wceq wss sseq1 sseq2 sylan9bb ) ABEACFBCFCDEBDFABCGCDBHI $.

  ${
    sseq1i.1 $e |- A = B $.
    $( An equality inference for the subclass relationship.  (Contributed by
       NM, 18-Aug-1993.) $)
    sseq1i $p |- ( A C_ C <-> B C_ C ) $=
      ( wceq wss wb sseq1 ax-mp ) ABEACFBCFGDABCHI $.

    $( An equality inference for the subclass relationship.  (Contributed by
       NM, 30-Aug-1993.) $)
    sseq2i $p |- ( C C_ A <-> C C_ B ) $=
      ( wceq wss wb sseq2 ax-mp ) ABECAFCBFGDABCHI $.

    ${
      sseq12i.2 $e |- C = D $.
      $( An equality inference for the subclass relationship.  (Contributed by
         NM, 31-May-1999.)  (Proof shortened by Eric Schmidt, 26-Jan-2007.) $)
      sseq12i $p |- ( A C_ C <-> B C_ D ) $=
        ( wceq wss wb sseq12 mp2an ) ABGCDGACHBDHIEFABCDJK $.
    $}
  $}

  ${
    sseq1d.1 $e |- ( ph -> A = B ) $.
    $( An equality deduction for the subclass relationship.  (Contributed by
       NM, 14-Aug-1994.) $)
    sseq1d $p |- ( ph -> ( A C_ C <-> B C_ C ) ) $=
      ( wceq wss wb sseq1 syl ) ABCFBDGCDGHEBCDIJ $.

    $( An equality deduction for the subclass relationship.  (Contributed by
       NM, 14-Aug-1994.) $)
    sseq2d $p |- ( ph -> ( C C_ A <-> C C_ B ) ) $=
      ( wceq wss wb sseq2 syl ) ABCFDBGDCGHEBCDIJ $.

    ${
      sseq12d.2 $e |- ( ph -> C = D ) $.
      $( An equality deduction for the subclass relationship.  (Contributed by
         NM, 31-May-1999.) $)
      sseq12d $p |- ( ph -> ( A C_ C <-> B C_ D ) ) $=
        ( wss sseq1d sseq2d bitrd ) ABDHCDHCEHABCDFIADECGJK $.
    $}
  $}

  ${
    eqsstr.1 $e |- A = B $.
    eqsstr.2 $e |- B C_ C $.
    $( Substitution of equality into a subclass relationship.  (Contributed by
       NM, 16-Jul-1995.) $)
    eqsstri $p |- A C_ C $=
      ( wss sseq1i mpbir ) ACFBCFEABCDGH $.
  $}

  ${
    eqsstr3.1 $e |- B = A $.
    eqsstr3.2 $e |- B C_ C $.
    $( Substitution of equality into a subclass relationship.  (Contributed by
       NM, 19-Oct-1999.) $)
    eqsstr3i $p |- A C_ C $=
      ( eqcomi eqsstri ) ABCBADFEG $.
  $}

  ${
    sseqtr.1 $e |- A C_ B $.
    sseqtr.2 $e |- B = C $.
    $( Substitution of equality into a subclass relationship.  (Contributed by
       NM, 28-Jul-1995.) $)
    sseqtri $p |- A C_ C $=
      ( wss sseq2i mpbi ) ABFACFDBCAEGH $.
  $}

  ${
    sseqtr4.1 $e |- A C_ B $.
    sseqtr4.2 $e |- C = B $.
    $( Substitution of equality into a subclass relationship.  (Contributed by
       NM, 4-Apr-1995.) $)
    sseqtr4i $p |- A C_ C $=
      ( eqcomi sseqtri ) ABCDCBEFG $.
  $}

  ${
    eqsstrd.1 $e |- ( ph -> A = B ) $.
    eqsstrd.2 $e |- ( ph -> B C_ C ) $.
    $( Substitution of equality into a subclass relationship.  (Contributed by
       NM, 25-Apr-2004.) $)
    eqsstrd $p |- ( ph -> A C_ C ) $=
      ( wss sseq1d mpbird ) ABDGCDGFABCDEHI $.
  $}

  ${
    eqsstr3d.1 $e |- ( ph -> B = A ) $.
    eqsstr3d.2 $e |- ( ph -> B C_ C ) $.
    $( Substitution of equality into a subclass relationship.  (Contributed by
       NM, 25-Apr-2004.) $)
    eqsstr3d $p |- ( ph -> A C_ C ) $=
      ( eqcomd eqsstrd ) ABCDACBEGFH $.
  $}

  ${
    sseqtrd.1 $e |- ( ph -> A C_ B ) $.
    sseqtrd.2 $e |- ( ph -> B = C ) $.
    $( Substitution of equality into a subclass relationship.  (Contributed by
       NM, 25-Apr-2004.) $)
    sseqtrd $p |- ( ph -> A C_ C ) $=
      ( wss sseq2d mpbid ) ABCGBDGEACDBFHI $.
  $}

  ${
    sseqtr4d.1 $e |- ( ph -> A C_ B ) $.
    sseqtr4d.2 $e |- ( ph -> C = B ) $.
    $( Substitution of equality into a subclass relationship.  (Contributed by
       NM, 25-Apr-2004.) $)
    sseqtr4d $p |- ( ph -> A C_ C ) $=
      ( eqcomd sseqtrd ) ABCDEADCFGH $.
  $}

  ${
    3sstr3.1 $e |- A C_ B $.
    3sstr3.2 $e |- A = C $.
    3sstr3.3 $e |- B = D $.
    $( Substitution of equality in both sides of a subclass relationship.
       (Contributed by NM, 13-Jan-1996.)  (Proof shortened by Eric Schmidt,
       26-Jan-2007.) $)
    3sstr3i $p |- C C_ D $=
      ( wss sseq12i mpbi ) ABHCDHEACBDFGIJ $.
  $}

  ${
    3sstr4.1 $e |- A C_ B $.
    3sstr4.2 $e |- C = A $.
    3sstr4.3 $e |- D = B $.
    $( Substitution of equality in both sides of a subclass relationship.
       (Contributed by NM, 13-Jan-1996.)  (Proof shortened by Eric Schmidt,
       26-Jan-2007.) $)
    3sstr4i $p |- C C_ D $=
      ( wss sseq12i mpbir ) CDHABHECADBFGIJ $.
  $}

  ${
    3sstr3g.1 $e |- ( ph -> A C_ B ) $.
    3sstr3g.2 $e |- A = C $.
    3sstr3g.3 $e |- B = D $.
    $( Substitution of equality into both sides of a subclass relationship.
       (Contributed by NM, 1-Oct-2000.) $)
    3sstr3g $p |- ( ph -> C C_ D ) $=
      ( wss sseq12i sylib ) ABCIDEIFBDCEGHJK $.
  $}

  ${
    3sstr4g.1 $e |- ( ph -> A C_ B ) $.
    3sstr4g.2 $e |- C = A $.
    3sstr4g.3 $e |- D = B $.
    $( Substitution of equality into both sides of a subclass relationship.
       (Contributed by NM, 16-Aug-1994.)  (Proof shortened by Eric Schmidt,
       26-Jan-2007.) $)
    3sstr4g $p |- ( ph -> C C_ D ) $=
      ( wss sseq12i sylibr ) ABCIDEIFDBECGHJK $.
  $}

  ${
    3sstr3d.1 $e |- ( ph -> A C_ B ) $.
    3sstr3d.2 $e |- ( ph -> A = C ) $.
    3sstr3d.3 $e |- ( ph -> B = D ) $.
    $( Substitution of equality into both sides of a subclass relationship.
       (Contributed by NM, 1-Oct-2000.) $)
    3sstr3d $p |- ( ph -> C C_ D ) $=
      ( wss sseq12d mpbid ) ABCIDEIFABDCEGHJK $.
  $}

  ${
    3sstr4d.1 $e |- ( ph -> A C_ B ) $.
    3sstr4d.2 $e |- ( ph -> C = A ) $.
    3sstr4d.3 $e |- ( ph -> D = B ) $.
    $( Substitution of equality into both sides of a subclass relationship.
       (Contributed by NM, 30-Nov-1995.)  (Proof shortened by Eric Schmidt,
       26-Jan-2007.) $)
    3sstr4d $p |- ( ph -> C C_ D ) $=
      ( wss sseq12d mpbird ) ADEIBCIFADBECGHJK $.
  $}

  ${
    syl5eqss.1 $e |- A = B $.
    syl5eqss.2 $e |- ( ph -> B C_ C ) $.
    $( A chained subclass and equality deduction.  (Contributed by NM,
       25-Apr-2004.) $)
    syl5eqss $p |- ( ph -> A C_ C ) $=
      ( wss sseq1i sylibr ) ACDGBDGFBCDEHI $.
  $}

  ${
    syl5eqssr.1 $e |- B = A $.
    syl5eqssr.2 $e |- ( ph -> B C_ C ) $.
    $( A chained subclass and equality deduction.  (Contributed by NM,
       25-Apr-2004.) $)
    syl5eqssr $p |- ( ph -> A C_ C ) $=
      ( eqcomi syl5eqss ) ABCDCBEGFH $.
  $}

  ${
    syl6sseq.1 $e |- ( ph -> A C_ B ) $.
    syl6sseq.2 $e |- B = C $.
    $( A chained subclass and equality deduction.  (Contributed by NM,
       25-Apr-2004.) $)
    syl6sseq $p |- ( ph -> A C_ C ) $=
      ( wss sseq2i sylib ) ABCGBDGECDBFHI $.
  $}

  ${
    syl6ssr.1 $e |- ( ph -> A C_ B ) $.
    syl6ssr.2 $e |- C = B $.
    $( A chained subclass and equality deduction.  (Contributed by NM,
       25-Apr-2004.) $)
    syl6sseqr $p |- ( ph -> A C_ C ) $=
      ( eqcomi syl6sseq ) ABCDEDCFGH $.
  $}

  ${
    syl5sseq.1 $e |- B C_ A $.
    syl5sseq.2 $e |- ( ph -> A = C ) $.
    $( Subclass transitivity deduction.  (Contributed by Jonathan Ben-Naim,
       3-Jun-2011.) $)
    syl5sseq $p |- ( ph -> B C_ C ) $=
      ( wceq wss sseq2 biimpa sylancl ) ABDGZCBHZCDHZFELMNBDCIJK $.
  $}

  ${
    syl5sseqr.1 $e |- B C_ A $.
    syl5sseqr.2 $e |- ( ph -> C = A ) $.
    $( Subclass transitivity deduction.  (Contributed by Jonathan Ben-Naim,
       3-Jun-2011.) $)
    syl5sseqr $p |- ( ph -> B C_ C ) $=
      ( wss a1i sseqtr4d ) ACBDCBGAEHFI $.
  $}

  ${
    syl6eqss.1 $e |- ( ph -> A = B ) $.
    syl6eqss.2 $e |- B C_ C $.
    $( A chained subclass and equality deduction.  (Contributed by Mario
       Carneiro, 2-Jan-2017.) $)
    syl6eqss $p |- ( ph -> A C_ C ) $=
      ( wss a1i eqsstrd ) ABCDECDGAFHI $.
  $}

  ${
    syl6eqssr.1 $e |- ( ph -> B = A ) $.
    syl6eqssr.2 $e |- B C_ C $.
    $( A chained subclass and equality deduction.  (Contributed by Mario
       Carneiro, 2-Jan-2017.) $)
    syl6eqssr $p |- ( ph -> A C_ C ) $=
      ( eqcomd syl6eqss ) ABCDACBEGFH $.
  $}

  $( Equality implies the subclass relation.  (Contributed by NM, 21-Jun-1993.)
     (Proof shortened by Andrew Salmon, 21-Jun-2011.) $)
  eqimss $p |- ( A = B -> A C_ B ) $=
    ( wceq wss eqss simplbi ) ABCABDBADABEF $.

  $( Equality implies the subclass relation.  (Contributed by NM,
     23-Nov-2003.) $)
  eqimss2 $p |- ( B = A -> A C_ B ) $=
    ( wss eqimss eqcoms ) ABCABABDE $.

  ${
    eqimssi.1 $e |- A = B $.
    $( Infer subclass relationship from equality.  (Contributed by NM,
       6-Jan-2007.) $)
    eqimssi $p |- A C_ B $=
      ( ssid sseqtri ) AABADCE $.

    $( Infer subclass relationship from equality.  (Contributed by NM,
       7-Jan-2007.) $)
    eqimss2i $p |- B C_ A $=
      ( ssid sseqtr4i ) BBABDCE $.
  $}

  $( Two classes are different if they don't include the same class.
     (Contributed by NM, 23-Apr-2015.) $)
  nssne1 $p |- ( ( A C_ B /\ -. A C_ C ) -> B =/= C ) $=
    ( wss wn wne wceq sseq2 biimpcd necon3bd imp ) ABDZACDZEBCFLMBCBCGLMBCAHIJK
    $.

  $( Two classes are different if they are not subclasses of the same class.
     (Contributed by NM, 23-Apr-2015.) $)
  nssne2 $p |- ( ( A C_ C /\ -. B C_ C ) -> A =/= B ) $=
    ( wss wn wne wceq sseq1 biimpcd necon3bd imp ) ACDZBCDZEABFLMABABGLMABCHIJK
    $.

  ${
    $d x A $.  $d x B $.
    $( Negation of subclass relationship.  Exercise 13 of [TakeutiZaring]
       p. 18.  (Contributed by NM, 25-Feb-1996.)  (Proof shortened by Andrew
       Salmon, 21-Jun-2011.) $)
    nss $p |- ( -. A C_ B <-> E. x ( x e. A /\ -. x e. B ) ) $=
      ( cv wcel wn wa wex wss wi wal exanali dfss2 xchbinxr bicomi ) ADZBEZPCEZ
      FGAHZBCIZFSQRJAKTQRALABCMNO $.
  $}

  $( Demonstrate by witnesses that two classes lack a subclass relation.
     (Contributed by Stefan O'Rear, 5-Feb-2015.) $)
  nelss $p |- ( ( A e. B /\ -. A e. C ) -> -. B C_ C ) $=
    ( wcel wss ssel com12 con3dimp ) ABDZBCEZACDZJIKBCAFGH $.

  ${
    ssrexf.1 $e |- F/_ x A $.
    ssrexf.2 $e |- F/_ x B $.
    $( restricted existential quantification follows from a subclass
       relationship.  (Contributed by Glauco Siliprandi, 20-Apr-2017.) $)
    ssrexf $p |- ( A C_ B -> ( E. x e. A ph -> E. x e. B ph ) ) $=
      ( wss cv wcel wa wex wrex nfss ssel anim1d eximd df-rex 3imtr4g ) CDGZBHZ
      CIZAJZBKTDIZAJZBKABCLABDLSUBUDBBCDEFMSUAUCACDTNOPABCQABDQR $.

    $( "At most one" existential quantification restricted to a subclass.
       (Contributed by Thierry Arnoux, 8-Oct-2017.) $)
    ssrmof $p |- ( A C_ B -> ( E* x e. B ph -> E* x e. A ph ) ) $=
      ( wss cv wcel wa wmo wrmo wi wal dfss2f biimpi pm3.45 alimi moim df-rmo
      3syl 3imtr4g ) CDGZBHZDIZAJZBKZUDCIZAJZBKZABDLABCLUCUHUEMZBNZUIUFMZBNUGUJ
      MUCULBCDEFOPUKUMBUHUEAQRUIUFBSUAABDTABCTUB $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Quantification restricted to a subclass.  (Contributed by NM,
       11-Mar-2006.) $)
    ssralv $p |- ( A C_ B -> ( A. x e. B ph -> A. x e. A ph ) ) $=
      ( wss cv wcel ssel imim1d ralimdv2 ) CDEZAABDCKBFZCGLDGACDLHIJ $.

    $( Existential quantification restricted to a subclass.  (Contributed by
       NM, 11-Jan-2007.) $)
    ssrexv $p |- ( A C_ B -> ( E. x e. A ph -> E. x e. B ph ) ) $=
      ( wss cv wcel ssel anim1d reximdv2 ) CDEZAABCDKBFZCGLDGACDLHIJ $.

    $d y A $.  $d y B $.
    $( Two quantifications restricted to a subclass.  (Contributed by AV,
       11-Mar-2023.) $)
    ss2ralv $p |- ( A C_ B -> ( A. x e. B A. y e. B ph
                                -> A. x e. A A. y e. A ph ) ) $=
      ( wss wral ssralv ralimdv syld ) DEFZACEGZBEGACDGZBEGMBDGKLMBEACDEHIMBDEH
      J $.

    $( Two existential quantifications restricted to a subclass.  (Contributed
       by AV, 11-Mar-2023.) $)
    ss2rexv $p |- ( A C_ B -> ( E. x e. A E. y e. A ph
                                -> E. x e. B E. y e. B ph ) ) $=
      ( wss wrex ssrexv reximdv syld ) DEFZACDGZBDGACEGZBDGMBEGKLMBDACDEHIMBDEH
      J $.
  $}

  ${
    $d A x $.  $d B x $.
    $( Restricted universal quantification on a subset in terms of superset.
       (Contributed by Stefan O'Rear, 3-Apr-2015.) $)
    ralss $p |- ( A C_ B -> ( A. x e. A ph <->
          A. x e. B ( x e. A -> ph ) ) ) $=
      ( wss cv wcel wi wa ssel pm4.71rd imbi1d impexp syl6bb ralbidv2 ) CDEZABF
      ZCGZAHZBCDPSQDGZRIZAHTSHPRUAAPRTCDQJKLTRAMNO $.

    $( Restricted existential quantification on a subset in terms of superset.
       (Contributed by Stefan O'Rear, 3-Apr-2015.) $)
    rexss $p |- ( A C_ B -> ( E. x e. A ph <->
          E. x e. B ( x e. A /\ ph ) ) ) $=
      ( wss cv wcel wa ssel pm4.71rd anbi1d anass syl6bb rexbidv2 ) CDEZABFZCGZ
      AHZBCDORPDGZQHZAHSRHOQTAOQSCDPIJKSQALMN $.
  $}

  $( Class abstractions in a subclass relationship.  (Contributed by NM,
     3-Jul-1994.) $)
  ss2ab $p |- ( { x | ph } C_ { x | ps } <-> A. x ( ph -> ps ) ) $=
    ( cab wss cv wcel wi wal nfab1 dfss2f abid imbi12i albii bitri ) ACDZBCDZEC
    FZPGZRQGZHZCIABHZCICPQACJBCJKUAUBCSATBACLBCLMNO $.

  ${
    $d x A $.
    $( Class abstraction in a subclass relationship.  (Contributed by NM,
       16-Aug-2006.) $)
    abss $p |- ( { x | ph } C_ A <-> A. x ( ph -> x e. A ) ) $=
      ( cab wss cv wcel wi wal abid2 sseq2i ss2ab bitr3i ) ABDZCENBFCGZBDZEAOHB
      IPCNBCJKAOBLM $.

    $( Subclass of a class abstraction.  (Contributed by NM, 16-Aug-2006.) $)
    ssab $p |- ( A C_ { x | ph } <-> A. x ( x e. A -> ph ) ) $=
      ( cab wss cv wcel wi wal abid2 sseq1i ss2ab bitr3i ) CABDZEBFCGZBDZNEOAHB
      IPCNBCJKOABLM $.

    $( The relation for a subclass of a class abstraction is equivalent to
       restricted quantification.  (Contributed by NM, 6-Sep-2006.) $)
    ssabral $p |- ( A C_ { x | ph } <-> A. x e. A ph ) $=
      ( cab wss cv wcel wi wal wral ssab df-ral bitr4i ) CABDEBFCGAHBIABCJABCKA
      BCLM $.
  $}

  ${
    ss2abi.1 $e |- ( ph -> ps ) $.
    $( Inference of abstraction subclass from implication.  (Contributed by NM,
       31-Mar-1995.) $)
    ss2abi $p |- { x | ph } C_ { x | ps } $=
      ( cab wss wi ss2ab mpgbir ) ACEBCEFABGCABCHDI $.
  $}

  ${
    $d x ph $.
    ss2abdv.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Deduction of abstraction subclass from implication.  (Contributed by NM,
       29-Jul-2011.) $)
    ss2abdv $p |- ( ph -> { x | ps } C_ { x | ch } ) $=
      ( wi wal cab wss alrimiv ss2ab sylibr ) ABCFZDGBDHCDHIAMDEJBCDKL $.
  $}

  ${
    $d x ph $.  $d x A $.
    abssdv.1 $e |- ( ph -> ( ps -> x e. A ) ) $.
    $( Deduction of abstraction subclass from implication.  (Contributed by NM,
       20-Jan-2006.) $)
    abssdv $p |- ( ph -> { x | ps } C_ A ) $=
      ( cv wcel wi wal cab wss alrimiv abss sylibr ) ABCFDGHZCIBCJDKAOCELBCDMN
      $.
  $}

  ${
    $d x A $.
    abssi.1 $e |- ( ph -> x e. A ) $.
    $( Inference of abstraction subclass from implication.  (Contributed by NM,
       20-Jan-2006.) $)
    abssi $p |- { x | ph } C_ A $=
      ( cab cv wcel ss2abi abid2 sseqtri ) ABEBFCGZBECAKBDHBCIJ $.
  $}

  $( Restricted abstraction classes in a subclass relationship.  (Contributed
     by NM, 30-May-1999.) $)
  ss2rab $p |- ( { x e. A | ph } C_ { x e. A | ps } <->
               A. x e. A ( ph -> ps ) ) $=
    ( crab wss cv wcel wa cab wi wal df-rab sseq12i ss2ab df-ral imdistan albii
    wral bitr2i 3bitri ) ACDEZBCDEZFCGDHZAIZCJZUDBIZCJZFUEUGKZCLZABKZCDSZUBUFUC
    UHACDMBCDMNUEUGCOULUDUKKZCLUJUKCDPUMUICUDABQRTUA $.

  ${
    $d x B $.
    $( Restricted class abstraction in a subclass relationship.  (Contributed
       by NM, 16-Aug-2006.) $)
    rabss $p |- ( { x e. A | ph } C_ B <-> A. x e. A ( ph -> x e. B ) ) $=
      ( crab wss cv wcel wa cab wal wral df-rab sseq1i abss impexp albii df-ral
      wi bitr4i 3bitri ) ABCEZDFBGZCHZAIZBJZDFUEUCDHZSZBKZAUGSZBCLZUBUFDABCMNUE
      BDOUIUDUJSZBKUKUHULBUDAUGPQUJBCRTUA $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Subclass of a restricted class abstraction.  (Contributed by NM,
       16-Aug-2006.) $)
    ssrab $p |- ( B C_ { x e. A | ph } <-> ( B C_ A /\ A. x e. B ph ) ) $=
      ( crab wss cv wcel wa cab wal wral df-rab sseq2i ssab dfss3 anbi1i r19.26
      wi df-ral 3bitr2ri 3bitri ) DABCEZFDBGZCHZAIZBJZFUDDHUFSBKZDCFZABDLZIZUCU
      GDABCMNUFBDOUKUEBDLZUJIUFBDLUHUIULUJBDCPQUEABDRUFBDTUAUB $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ph $.
    ssrabdv.1 $e |- ( ph -> B C_ A ) $.
    ssrabdv.2 $e |- ( ( ph /\ x e. B ) -> ps ) $.
    $( Subclass of a restricted class abstraction (deduction form).
       (Contributed by NM, 31-Aug-2006.) $)
    ssrabdv $p |- ( ph -> B C_ { x e. A | ps } ) $=
      ( wss wral crab ralrimiva ssrab sylanbrc ) AEDHBCEIEBCDJHFABCEGKBCDELM $.
  $}

  ${
    $d x B $.  $d x ph $.
    rabssdv.1 $e |- ( ( ph /\ x e. A /\ ps ) -> x e. B ) $.
    $( Subclass of a restricted class abstraction (deduction form).
       (Contributed by NM, 2-Feb-2015.) $)
    rabssdv $p |- ( ph -> { x e. A | ps } C_ B ) $=
      ( cv wcel wi wral crab wss 3exp ralrimiv rabss sylibr ) ABCGZEHZIZCDJBCDK
      ELASCDAQDHBRFMNBCDEOP $.
  $}

  ${
    $d x ph $.
    ss2rabdv.1 $e |- ( ( ph /\ x e. A ) -> ( ps -> ch ) ) $.
    $( Deduction of restricted abstraction subclass from implication.
       (Contributed by NM, 30-May-2006.) $)
    ss2rabdv $p |- ( ph -> { x e. A | ps } C_ { x e. A | ch } ) $=
      ( wi wral crab wss ralrimiva ss2rab sylibr ) ABCGZDEHBDEICDEIJANDEFKBCDEL
      M $.
  $}

  ${
    ss2rabi.1 $e |- ( x e. A -> ( ph -> ps ) ) $.
    $( Inference of restricted abstraction subclass from implication.
       (Contributed by NM, 14-Oct-1999.) $)
    ss2rabi $p |- { x e. A | ph } C_ { x e. A | ps } $=
      ( crab wss wi ss2rab mprgbir ) ACDFBCDFGABHCDABCDIEJ $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Subclass law for restricted abstraction.  (Contributed by NM,
       18-Dec-2004.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
    rabss2 $p |- ( A C_ B -> { x e. A | ph } C_ { x e. B | ph } ) $=
      ( wss cv wcel wa cab crab wi wal pm3.45 alimi dfss2 ss2ab 3imtr4i 3sstr4g
      df-rab ) CDEZBFZCGZAHZBIZUADGZAHZBIZABCJABDJUBUEKZBLUCUFKZBLTUDUGEUHUIBUB
      UEAMNBCDOUCUFBPQABCSABDSR $.

    $( Subclass relation for the restriction of a class abstraction.
       (Contributed by NM, 31-Mar-1995.) $)
    ssab2 $p |- { x | ( x e. A /\ ph ) } C_ A $=
      ( cv wcel wa simpl abssi ) BDCEZAFBCIAGH $.

    $( Subclass relation for a restricted class.  (Contributed by NM,
       19-Mar-1997.) $)
    ssrab2 $p |- { x e. A | ph } C_ A $=
      ( crab cv wcel wa cab df-rab ssab2 eqsstri ) ABCDBECFAGBHCABCIABCJK $.
  $}

  ${
    $d A x $.
    ssrab3.1 $e |- B = { x e. A | ph } $.
    $( Subclass relation for a restricted class abstraction.  (Contributed by
       Jonathan Ben-Naim, 3-Jun-2011.) $)
    ssrab3 $p |- B C_ A $=
      ( crab ssrab2 eqsstri ) DABCFCEABCGH $.
  $}

  ${
    $d A x $.  $d B x $.  $d ph x $.
    rabssrabd.1 $e |- ( ph -> A C_ B ) $.
    rabssrabd.2 $e |- ( ( ph /\ ps /\ x e. A ) -> ch ) $.
    $( Subclass of a restricted class abstraction.  (Contributed by AV,
       4-Jun-2022.) $)
    rabssrabd $p |- ( ph -> { x e. A | ps } C_ { x e. B | ch } ) $=
      ( crab cv wcel wa w3a 3anan32 sylbir ex ss2rabdv wss rabss2 syl sstrd ) A
      BDEICDEIZCDFIZABCDEADJEKZLZBCUEBLABUDMCABUDNHOPQAEFRUBUCRGCDEFSTUA $.
  $}

  ${
    $d V x $.
    $( If the restricting class of a restricted class abstraction is a subset
       of this restricted class abstraction, it is equal to this restricted
       class abstraction.  (Contributed by Alexander van der Vekens,
       31-Dec-2017.) $)
    ssrabeq $p |- ( V C_ { x e. V | ph } <-> V = { x e. V | ph } ) $=
      ( crab wss wa wceq ssrab2 biantru eqss bitr4i ) CABCDZEZMLCEZFCLGNMABCHIC
      LJK $.
  $}

  $( A restricted class is a subclass of the corresponding unrestricted class.
     (Contributed by Mario Carneiro, 23-Dec-2016.) $)
  rabssab $p |- { x e. A | ph } C_ { x | ph } $=
    ( crab cv wcel wa cab df-rab simpr ss2abi eqsstri ) ABCDBECFZAGZBHABHABCINA
    BMAJKL $.

  ${
    $d x y $.  $d y z A $.  $d y z B $.  $d x z C $.
    $( A subset relationship useful for converting union to indexed union using
       ~ dfiun2 or ~ dfiun2g and intersection to indexed intersection using
       ~ dfiin2 .  (Contributed by NM, 5-Oct-2006.)  (Proof shortened by Mario
       Carneiro, 26-Sep-2015.) $)
    uniiunlem $p |- ( A. x e. A B e. D ->
                     ( A. x e. A B e. C <-> { y | E. x e. A y = B } C_ C ) ) $=
      ( vz cv wceq wrex cab wss wcel wi wal wral eqeq1 rexbidv cbvabv wb sseq1i
      r19.23v albii ralcom4 abss 3bitr4i bitr4i nfv eleq1 ceqsalg ralbi syl5rbb
      ralimi syl ) BHZDIZACJZBKZELZGHZDIZUTEMZNZGOZACPZDFMZACPZDEMZACPZUSVAACJZ
      GKZELZVEURVKEUQVJBGUOUTIUPVAACUOUTDQRSUAVCACPZGOVJVBNZGOVEVLVMVNGVAVBACUB
      UCVCAGCUDVJGEUEUFUGVGVDVHTZACPVEVITVFVOACVBVHGDFVHGUHUTDEUIUJUMVDVHACUKUN
      UL $.
  $}

  $( Alternate definition of proper subclass.  (Contributed by NM,
     7-Feb-1996.) $)
  dfpss2 $p |- ( A C. B <-> ( A C_ B /\ -. A = B ) ) $=
    ( wpss wss wne wa wceq wn df-pss df-ne anbi2i bitri ) ABCABDZABEZFMABGHZFAB
    INOMABJKL $.

  $( Alternate definition of proper subclass.  (Contributed by NM, 7-Feb-1996.)
     (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
  dfpss3 $p |- ( A C. B <-> ( A C_ B /\ -. B C_ A ) ) $=
    ( wpss wss wceq wn wa dfpss2 eqss baib notbid pm5.32i bitri ) ABCABDZABEZFZ
    GNBADZFZGABHNPRNOQONQABIJKLM $.

  $( Equality theorem for proper subclass.  (Contributed by NM, 7-Feb-1996.) $)
  psseq1 $p |- ( A = B -> ( A C. C <-> B C. C ) ) $=
    ( wceq wss wne wa wpss sseq1 neeq1 anbi12d df-pss 3bitr4g ) ABDZACEZACFZGBC
    EZBCFZGACHBCHNOQPRABCIABCJKACLBCLM $.

  $( Equality theorem for proper subclass.  (Contributed by NM, 7-Feb-1996.) $)
  psseq2 $p |- ( A = B -> ( C C. A <-> C C. B ) ) $=
    ( wceq wss wne wa wpss sseq2 neeq2 anbi12d df-pss 3bitr4g ) ABDZCAEZCAFZGCB
    EZCBFZGCAHCBHNOQPRABCIABCJKCALCBLM $.

  ${
    psseq1i.1 $e |- A = B $.
    $( An equality inference for the proper subclass relationship.
       (Contributed by NM, 9-Jun-2004.) $)
    psseq1i $p |- ( A C. C <-> B C. C ) $=
      ( wceq wpss wb psseq1 ax-mp ) ABEACFBCFGDABCHI $.

    $( An equality inference for the proper subclass relationship.
       (Contributed by NM, 9-Jun-2004.) $)
    psseq2i $p |- ( C C. A <-> C C. B ) $=
      ( wceq wpss wb psseq2 ax-mp ) ABECAFCBFGDABCHI $.

    ${
      psseq12i.2 $e |- C = D $.
      $( An equality inference for the proper subclass relationship.
         (Contributed by NM, 9-Jun-2004.) $)
      psseq12i $p |- ( A C. C <-> B C. D ) $=
        ( wpss psseq1i psseq2i bitri ) ACGBCGBDGABCEHCDBFIJ $.
    $}
  $}

  ${
    psseq1d.1 $e |- ( ph -> A = B ) $.
    $( An equality deduction for the proper subclass relationship.
       (Contributed by NM, 9-Jun-2004.) $)
    psseq1d $p |- ( ph -> ( A C. C <-> B C. C ) ) $=
      ( wceq wpss wb psseq1 syl ) ABCFBDGCDGHEBCDIJ $.

    $( An equality deduction for the proper subclass relationship.
       (Contributed by NM, 9-Jun-2004.) $)
    psseq2d $p |- ( ph -> ( C C. A <-> C C. B ) ) $=
      ( wceq wpss wb psseq2 syl ) ABCFDBGDCGHEBCDIJ $.

    ${
      psseq12d.2 $e |- ( ph -> C = D ) $.
      $( An equality deduction for the proper subclass relationship.
         (Contributed by NM, 9-Jun-2004.) $)
      psseq12d $p |- ( ph -> ( A C. C <-> B C. D ) ) $=
        ( wpss psseq1d psseq2d bitrd ) ABDHCDHCEHABCDFIADECGJK $.
    $}
  $}

  $( A proper subclass is a subclass.  Theorem 10 of [Suppes] p. 23.
     (Contributed by NM, 7-Feb-1996.) $)
  pssss $p |- ( A C. B -> A C_ B ) $=
    ( wpss wss wne df-pss simplbi ) ABCABDABEABFG $.

  $( Two classes in a proper subclass relationship are not equal.  (Contributed
     by NM, 16-Feb-2015.) $)
  pssne $p |- ( A C. B -> A =/= B ) $=
    ( wpss wss wne df-pss simprbi ) ABCABDABEABFG $.

  ${
    pssssd.1 $e |- ( ph -> A C. B ) $.
    $( Deduce subclass from proper subclass.  (Contributed by NM,
       29-Feb-1996.) $)
    pssssd $p |- ( ph -> A C_ B ) $=
      ( wpss wss pssss syl ) ABCEBCFDBCGH $.

    $( Proper subclasses are unequal.  Deduction form of ~ pssne .
       (Contributed by David Moews, 1-May-2017.) $)
    pssned $p |- ( ph -> A =/= B ) $=
      ( wpss wne pssne syl ) ABCEBCFDBCGH $.
  $}

  $( Subclass in terms of proper subclass.  (Contributed by NM,
     25-Feb-1996.) $)
  sspss $p |- ( A C_ B <-> ( A C. B \/ A = B ) ) $=
    ( wss wpss wceq wo wn dfpss2 simplbi2 con1d orrd pssss eqimss jaoi impbii )
    ABCZABDZABEZFPQRPRQQPRGABHIJKQPRABLABMNO $.

  $( Proper subclass is irreflexive.  Theorem 7 of [Suppes] p. 23.
     (Contributed by NM, 7-Feb-1996.) $)
  pssirr $p |- -. A C. A $=
    ( wpss wss wn wa pm3.24 dfpss3 mtbir ) AABAACZIDEIFAAGH $.

  $( Proper subclass has no 2-cycle loops.  Compare Theorem 8 of [Suppes]
     p. 23.  (Contributed by NM, 7-Feb-1996.)  (Proof shortened by Andrew
     Salmon, 26-Jun-2011.) $)
  pssn2lp $p |- -. ( A C. B /\ B C. A ) $=
    ( wpss wn wi wa wss dfpss3 simprbi pssss nsyl imnan mpbi ) ABCZBACZDENOFDNB
    AGZONABGPDABHIBAJKNOLM $.

  $( Two ways of stating trichotomy with respect to inclusion.  (Contributed by
     NM, 12-Aug-2004.) $)
  sspsstri $p |- ( ( A C_ B \/ B C_ A ) <-> ( A C. B \/ A = B \/ B C. A ) ) $=
    ( wpss wo wceq wss w3o or32 sspss eqcom orbi2i bitri orbi12i orordir bitr4i
    df-3or 3bitr4i ) ABCZBACZDABEZDZRTDZSDABFZBAFZDZRTSGRSTHUEUBSTDZDUAUCUBUDUF
    ABIUDSBAEZDUFBAIUGTSBAJKLMRSTNORTSPQ $.

  $( Partial trichotomy law for subclasses.  (Contributed by NM, 16-May-1996.)
     (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
  ssnpss $p |- ( A C_ B -> -. B C. A ) $=
    ( wpss wss wn dfpss3 simprbi con2i ) BACZABDZIBADJEBAFGH $.

  $( Transitive law for proper subclass.  Theorem 9 of [Suppes] p. 23.
     (Contributed by NM, 7-Feb-1996.) $)
  psstr $p |- ( ( A C. B /\ B C. C ) -> A C. C ) $=
    ( wpss wa wss wceq pssss sylan9ss pssn2lp psseq1 anbi1d mtbiri con2i dfpss2
    wn sylanbrc ) ABDZBCDZEZACFACGZPACDRSABCABHBCHIUATUATCBDZSECBJUARUBSACBKLMN
    ACOQ $.

  $( Transitive law for subclass and proper subclass.  (Contributed by NM,
     3-Apr-1996.) $)
  sspsstr $p |- ( ( A C_ B /\ B C. C ) -> A C. C ) $=
    ( wss wpss wceq wo sspss wi psstr ex psseq1 biimprd jaoi imp sylanb ) ABDAB
    EZABFZGZBCEZACEZABHSTUAQTUAIRQTUAABCJKRUATABCLMNOP $.

  $( Transitive law for subclass and proper subclass.  (Contributed by NM,
     3-Apr-1996.) $)
  psssstr $p |- ( ( A C. B /\ B C_ C ) -> A C. C ) $=
    ( wss wpss wceq wo sspss psstr ex psseq2 biimpcd jaod imp sylan2b ) BCDABEZ
    BCEZBCFZGZACEZBCHPSTPQTRPQTABCIJRPTBCAKLMNO $.

  ${
    psstrd.1 $e |- ( ph -> A C. B ) $.
    psstrd.2 $e |- ( ph -> B C. C ) $.
    $( Proper subclass inclusion is transitive.  Deduction form of ~ psstr .
       (Contributed by David Moews, 1-May-2017.) $)
    psstrd $p |- ( ph -> A C. C ) $=
      ( wpss psstr syl2anc ) ABCGCDGBDGEFBCDHI $.
  $}

  ${
    sspsstrd.1 $e |- ( ph -> A C_ B ) $.
    sspsstrd.2 $e |- ( ph -> B C. C ) $.
    $( Transitivity involving subclass and proper subclass inclusion.
       Deduction form of ~ sspsstr .  (Contributed by David Moews,
       1-May-2017.) $)
    sspsstrd $p |- ( ph -> A C. C ) $=
      ( wss wpss sspsstr syl2anc ) ABCGCDHBDHEFBCDIJ $.
  $}

  ${
    psssstrd.1 $e |- ( ph -> A C. B ) $.
    psssstrd.2 $e |- ( ph -> B C_ C ) $.
    $( Transitivity involving subclass and proper subclass inclusion.
       Deduction form of ~ psssstr .  (Contributed by David Moews,
       1-May-2017.) $)
    psssstrd $p |- ( ph -> A C. C ) $=
      ( wpss wss psssstr syl2anc ) ABCGCDHBDGEFBCDIJ $.
  $}

  $( A class is not a proper subclass of another iff it satisfies a
     one-directional form of ~ eqss .  (Contributed by Mario Carneiro,
     15-May-2015.) $)
  npss $p |- ( -. A C. B <-> ( A C_ B -> A = B ) ) $=
    ( wss wceq wi wpss wn wa pm4.61 dfpss2 bitr4i con1bii ) ABCZABDZEZABFZOGMNG
    HPMNIABJKL $.

  $( A subclass missing a member is a proper subclass.  (Contributed by NM,
     12-Jan-2002.) $)
  ssnelpss $p |- ( A C_ B -> ( ( C e. B /\ -. C e. A ) -> A C. B ) ) $=
    ( wcel wn wa wceq wss wpss nelneq2 eqcom sylnib dfpss2 baibr syl5ib ) CBDCA
    DEFZABGZEZABHZABIZPBAGQCBAJBAKLTSRABMNO $.

  ${
    ssnelpssd.1 $e |- ( ph -> A C_ B ) $.
    ssnelpssd.2 $e |- ( ph -> C e. B ) $.
    ssnelpssd.3 $e |- ( ph -> -. C e. A ) $.
    $( Subclass inclusion with one element of the superclass missing is proper
       subclass inclusion.  Deduction form of ~ ssnelpss .  (Contributed by
       David Moews, 1-May-2017.) $)
    ssnelpssd $p |- ( ph -> A C. B ) $=
      ( wcel wn wpss wss wa wi ssnelpss syl mp2and ) ADCHZDBHIZBCJZFGABCKQRLSME
      BCDNOP $.
  $}

  ${
    $d A x $.  $d B x $.
    $( If there is an element of a class which is not contained in a subclass,
       the subclass is a proper subclass.  (Contributed by AV, 29-Jan-2020.) $)
    ssexnelpss $p |- ( ( A C_ B /\ E. x e. B x e/ A ) -> A C. B ) $=
      ( wss cv wnel wrex wpss wcel df-nel ssnelpss expdimp syl5bi rexlimdva imp
      wn wa ) BCDZAEZBFZACGBCHZRTUAACTSBIPZRSCIZQUASBJRUCUBUABCSKLMNO $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  The difference, union, and intersection of two classes
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)


$(
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
  The difference of two classes
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
$)

  ${
    $d A x $.  $d B x y $.
    $( Alternate definition of class difference.  (Contributed by BJ and Jim
       Kingdon, 16-Jun-2022.) $)
    dfdif3 $p |- ( A \ B ) = { x e. A | A. y e. B x =/= y } $=
      ( cdif cv wcel wn crab wne wral dfdif2 wi wal weq wex ax6ev bitr4i 3bitri
      wa biantrur 19.41v equcom imbi1i eleq1w notbid pm5.74i con2b df-ne bicomi
      sb56 imbi2i bitri albii df-ral rabbii eqtri ) CDEAFZDGZHZACIURBFZJZBDKZAC
      IACDLUTVCACUTVADGZVBMZBNZVCUTBAOZUTTBPZVGUTMZBNVFUTVGBPZUTTVHVJUTBAQUAVGU
      TBUBRUTBAUKVIVEBVIABOZUTMZVEVGVKUTBAUCUDVLVKVDHZMVDVKHZMVEVKUTVMVKUSVDABD
      UEUFUGVKVDUHVNVBVDVBVNURVAUIUJULSUMUNSVBBDUORUPUQ $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Equality theorem for class difference.  (Contributed by NM,
       10-Feb-1997.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
    difeq1 $p |- ( A = B -> ( A \ C ) = ( B \ C ) ) $=
      ( vx wceq cv wcel wn crab cdif rabeq dfdif2 3eqtr4g ) ABEDFCGHZDAINDBIACJ
      BCJNDABKDACLDBCLM $.

    $( Equality theorem for class difference.  (Contributed by NM,
       10-Feb-1997.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
    difeq2 $p |- ( A = B -> ( C \ A ) = ( C \ B ) ) $=
      ( vx wceq cv wcel wn crab cdif eleq2 notbid rabbidv dfdif2 3eqtr4g ) ABEZ
      DFZAGZHZDCIQBGZHZDCICAJCBJPSUADCPRTABQKLMDCANDCBNO $.
  $}

  $( Equality theorem for class difference.  (Contributed by FL,
     31-Aug-2009.) $)
  difeq12 $p |- ( ( A = B /\ C = D ) -> ( A \ C ) = ( B \ D ) ) $=
    ( wceq cdif difeq1 difeq2 sylan9eq ) ABECDEACFBCFBDFABCGCDBHI $.

  ${
    difeq1i.1 $e |- A = B $.
    $( Inference adding difference to the right in a class equality.
       (Contributed by NM, 15-Nov-2002.) $)
    difeq1i $p |- ( A \ C ) = ( B \ C ) $=
      ( wceq cdif difeq1 ax-mp ) ABEACFBCFEDABCGH $.

    $( Inference adding difference to the left in a class equality.
       (Contributed by NM, 15-Nov-2002.) $)
    difeq2i $p |- ( C \ A ) = ( C \ B ) $=
      ( wceq cdif difeq2 ax-mp ) ABECAFCBFEDABCGH $.

    ${
      difeq12i.2 $e |- C = D $.
      $( Equality inference for class difference.  (Contributed by NM,
         29-Aug-2004.) $)
      difeq12i $p |- ( A \ C ) = ( B \ D ) $=
        ( cdif difeq1i difeq2i eqtri ) ACGBCGBDGABCEHCDBFIJ $.
    $}
  $}

  ${
    difeq1d.1 $e |- ( ph -> A = B ) $.
    $( Deduction adding difference to the right in a class equality.
       (Contributed by NM, 15-Nov-2002.) $)
    difeq1d $p |- ( ph -> ( A \ C ) = ( B \ C ) ) $=
      ( wceq cdif difeq1 syl ) ABCFBDGCDGFEBCDHI $.

    $( Deduction adding difference to the left in a class equality.
       (Contributed by NM, 15-Nov-2002.) $)
    difeq2d $p |- ( ph -> ( C \ A ) = ( C \ B ) ) $=
      ( wceq cdif difeq2 syl ) ABCFDBGDCGFEBCDHI $.
  $}

  ${
    difeq12d.1 $e |- ( ph -> A = B ) $.
    difeq12d.2 $e |- ( ph -> C = D ) $.
    $( Equality deduction for class difference.  (Contributed by FL,
       29-May-2014.) $)
    difeq12d $p |- ( ph -> ( A \ C ) = ( B \ D ) ) $=
      ( cdif difeq1d difeq2d eqtrd ) ABDHCDHCEHABCDFIADECGJK $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    difeqri.1 $e |- ( ( x e. A /\ -. x e. B ) <-> x e. C ) $.
    $( Inference from membership to difference.  (Contributed by NM,
       17-May-1998.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
    difeqri $p |- ( A \ B ) = C $=
      ( cdif cv wcel wn wa eldif bitri eqriv ) ABCFZDAGZNHOBHOCHIJODHOBCKELM $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.
    nfdif.1 $e |- F/_ x A $.
    nfdif.2 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for class difference.  (Contributed by
       NM, 3-Dec-2003.)  (Revised by Mario Carneiro, 13-Oct-2016.) $)
    nfdif $p |- F/_ x ( A \ B ) $=
      ( vy cdif cv wcel wn crab dfdif2 nfcri nfn nfrab nfcxfr ) ABCGFHCIZJZFBKF
      BCLRAFBQAAFCEMNDOP $.
  $}

  $( Implication of membership in a class difference.  (Contributed by NM,
     29-Apr-1994.) $)
  eldifi $p |- ( A e. ( B \ C ) -> A e. B ) $=
    ( cdif wcel wn eldif simplbi ) ABCDEABEACEFABCGH $.

  $( Implication of membership in a class difference.  (Contributed by NM,
     3-May-1994.) $)
  eldifn $p |- ( A e. ( B \ C ) -> -. A e. C ) $=
    ( cdif wcel wn eldif simprbi ) ABCDEABEACEFABCGH $.

  $( A set does not belong to a class excluding it.  (Contributed by NM,
     27-Jun-1994.) $)
  elndif $p |- ( A e. B -> -. A e. ( C \ B ) ) $=
    ( cdif wcel eldifn con2i ) ACBDEABEACBFG $.

  $( Implication of membership in a class difference.  (Contributed by NM,
     28-Jun-1994.) $)
  neldif $p |- ( ( A e. B /\ -. A e. ( B \ C ) ) -> A e. C ) $=
    ( wcel cdif wn eldif simplbi2 con1d imp ) ABDZABCEDZFACDZKMLLKMFABCGHIJ $.

  ${
    $d x A $.  $d x B $.
    $( Double class difference.  Exercise 11 of [TakeutiZaring] p. 22.
       (Contributed by NM, 17-May-1998.) $)
    difdif $p |- ( A \ ( B \ A ) ) = A $=
      ( vx cdif cv wcel wi wa wn pm4.45im eldif xchbinxr anbi2i bitr2i difeqri
      iman ) CABADZACEZAFZSRBFZSGZHSRQFZIZHSTJUAUCSUATSIHUBTSPRBAKLMNO $.

    $( Subclass relationship for class difference.  Exercise 14 of
       [TakeutiZaring] p. 22.  (Contributed by NM, 29-Apr-1994.) $)
    difss $p |- ( A \ B ) C_ A $=
      ( vx cdif cv eldifi ssriv ) CABDACEABFG $.
  $}

  $( A difference of two classes is contained in the minuend.  Deduction form
     of ~ difss .  (Contributed by David Moews, 1-May-2017.) $)
  difssd $p |- ( ph -> ( A \ B ) C_ A ) $=
    ( cdif wss difss a1i ) BCDBEABCFG $.

  $( If a class is contained in a difference, it is contained in the minuend.
     (Contributed by David Moews, 1-May-2017.) $)
  difss2 $p |- ( A C_ ( B \ C ) -> A C_ B ) $=
    ( cdif wss id difss syl6ss ) ABCDZEZAIBJFBCGH $.

  ${
    difss2d.1 $e |- ( ph -> A C_ ( B \ C ) ) $.
    $( If a class is contained in a difference, it is contained in the minuend.
       Deduction form of ~ difss2 .  (Contributed by David Moews,
       1-May-2017.) $)
    difss2d $p |- ( ph -> A C_ B ) $=
      ( cdif wss difss2 syl ) ABCDFGBCGEBCDHI $.
  $}

  $( Preservation of a subclass relationship by class difference.  (Contributed
     by NM, 15-Feb-2007.) $)
  ssdifss $p |- ( A C_ B -> ( A \ C ) C_ B ) $=
    ( cdif wss difss sstr mpan ) ACDZAEABEIBEACFIABGH $.

  ${
    $d x A $.
    $( Double complement under universal class.  Exercise 4.10(s) of
       [Mendelson] p. 231.  (Contributed by NM, 8-Jan-2002.) $)
    ddif $p |- ( _V \ ( _V \ A ) ) = A $=
      ( vx cvv cdif cv wcel wn wa eldif mpbiran con2bii biantrur bitr2i difeqri
      vex ) BCCADZABEZAFZQPFZGZQCFZTHSRSUARGBOZQCAIJKUATUBLMN $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Contraposition law for subsets.  (Contributed by NM, 22-Mar-1998.) $)
    ssconb $p |- ( ( A C_ C /\ B C_ C ) ->
                  ( A C_ ( C \ B ) <-> B C_ ( C \ A ) ) ) $=
      ( vx wss wa cv wcel cdif wi wal wn wb ssel pm5.1 jcab 3bitr4g eldif dfss2
      imbi2i syl2an con2b a1i anbi12d albidv ) ACEZBCEZFZDGZAHZUICBIZHZJZDKUIBH
      ZUICAIZHZJZDKAUKEBUOEUHUMUQDUHUJUICHZUNLZFZJZUNURUJLZFZJZUMUQUHUJURJZUJUS
      JZFUNURJZUNVBJZFVAVDUHVEVGVFVHUFVEVGVEVGMUGACUINBCUINVEVGOUAVFVHMUHUJUNUB
      UCUDUJURUSPUNURVBPQULUTUJUICBRTUPVCUNUICARTQUEDAUKSDBUOSQ $.

    $( Contraposition law for subsets.  Exercise 15 of [TakeutiZaring] p. 22.
       (Contributed by NM, 22-Mar-1998.) $)
    sscon $p |- ( A C_ B -> ( C \ B ) C_ ( C \ A ) ) $=
      ( vx wss cdif cv wcel wn wa ssel con3d anim2d eldif 3imtr4g ssrdv ) ABEZD
      CBFZCAFZQDGZCHZTBHZIZJUATAHZIZJTRHTSHQUCUEUAQUDUBABTKLMTCBNTCANOP $.

    $( Difference law for subsets.  (Contributed by NM, 28-May-1998.) $)
    ssdif $p |- ( A C_ B -> ( A \ C ) C_ ( B \ C ) ) $=
      ( vx wss cdif cv wcel wn wa ssel anim1d eldif 3imtr4g ssrdv ) ABEZDACFZBC
      FZPDGZAHZSCHIZJSBHZUAJSQHSRHPTUBUAABSKLSACMSBCMNO $.
  $}

  ${
    ssdifd.1 $e |- ( ph -> A C_ B ) $.
    $( If ` A ` is contained in ` B ` , then ` ( A \ C ) ` is contained in
       ` ( B \ C ) ` .  Deduction form of ~ ssdif .  (Contributed by David
       Moews, 1-May-2017.) $)
    ssdifd $p |- ( ph -> ( A \ C ) C_ ( B \ C ) ) $=
      ( wss cdif ssdif syl ) ABCFBDGCDGFEBCDHI $.

    $( If ` A ` is contained in ` B ` , then ` ( C \ B ) ` is contained in
       ` ( C \ A ) ` .  Deduction form of ~ sscon .  (Contributed by David
       Moews, 1-May-2017.) $)
    sscond $p |- ( ph -> ( C \ B ) C_ ( C \ A ) ) $=
      ( wss cdif sscon syl ) ABCFDCGDBGFEBCDHI $.

    $( If ` A ` is contained in ` B ` , then ` ( A \ C ) ` is also contained in
       ` B ` .  Deduction form of ~ ssdifss .  (Contributed by David Moews,
       1-May-2017.) $)
    ssdifssd $p |- ( ph -> ( A \ C ) C_ B ) $=
      ( wss cdif ssdifss syl ) ABCFBDGCFEBCDHI $.

    ssdif2d.2 $e |- ( ph -> C C_ D ) $.
    $( If ` A ` is contained in ` B ` and ` C ` is contained in ` D ` , then
       ` ( A \ D ) ` is contained in ` ( B \ C ) ` .  Deduction form.
       (Contributed by David Moews, 1-May-2017.) $)
    ssdif2d $p |- ( ph -> ( A \ D ) C_ ( B \ C ) ) $=
      ( cdif sscond ssdifd sstrd ) ABEHBDHCDHADEBGIABCDFJK $.
  $}

  $( Restricted universal quantification on a class difference in terms of an
     implication.  (Contributed by Alexander van der Vekens, 3-Jan-2018.) $)
  raldifb $p |- ( A. x e. A ( x e/ B -> ph ) <-> A. x e. ( A \ B ) ph ) $=
    ( cv wnel wi cdif wcel wa impexp df-nel anbi2i bitr4i imbi1i bitr3i ralbii2
    wn eldif ) BEZDFZAGZABCCDHZTCIZUBGUDUAJZAGTUCIZAGUDUAAKUEUFAUEUDTDIRZJUFUAU
    GUDTDLMTCDSNOPQ $.

  $( Complementation reverses inclusion.  (Contributed by Andrew Salmon,
     15-Jul-2011.)  (Proof shortened by BJ, 19-Mar-2021.) $)
  complss $p |- ( A C_ B <-> ( _V \ B ) C_ ( _V \ A ) ) $=
    ( wss cvv cdif sscon ddif 3sstr3g impbii ) ABCDBEZDAEZCZABDFLDKEDJEABJKDFAG
    BGHI $.

  $( Two classes are equal if and only if their complements are equal.
     (Contributed by BJ, 19-Mar-2021.) $)
  compleq $p |- ( A = B <-> ( _V \ A ) = ( _V \ B ) ) $=
    ( wss wa cvv cdif wceq complss anbi12ci eqss 3bitr4i ) ABCZBACZDEAFZEBFZCZO
    NCZDABGNOGLQMPABHBAHIABJNOJK $.


$(
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
  The union of two classes
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
$)

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Expansion of membership in class union.  Theorem 12 of [Suppes] p. 25.
       (Contributed by NM, 7-Aug-1994.) $)
    elun $p |- ( A e. ( B u. C ) <-> ( A e. B \/ A e. C ) ) $=
      ( vx cun wcel cvv wo elex jaoi wceq eleq1 orbi12d df-un elab2g pm5.21nii
      cv ) ABCEZFAGFZABFZACFZHZARITSUAABIACIJDQZBFZUCCFZHUBDARGUCAKUDTUEUAUCABL
      UCACLMDBCNOP $.
  $}

  $( A member of a union that is not member of the first class, is member of
     the second class.  (Contributed by Glauco Siliprandi, 11-Dec-2019.) $)
  elunnel1 $p |- ( ( A e. ( B u. C ) /\ -. A e. B ) -> A e. C ) $=
    ( cun wcel wo elun biimpi orcanai ) ABCDEZABEZACEZJKLFABCGHI $.

  ${
    $d x A $.  $d x B $.  $d x C $.
    uneqri.1 $e |- ( ( x e. A \/ x e. B ) <-> x e. C ) $.
    $( Inference from membership to union.  (Contributed by NM,
       21-Jun-1993.) $)
    uneqri $p |- ( A u. B ) = C $=
      ( cun cv wcel wo elun bitri eqriv ) ABCFZDAGZMHNBHNCHINDHNBCJEKL $.
  $}

  ${
    $d x A $.
    $( Idempotent law for union of classes.  Theorem 23 of [Suppes] p. 27.
       (Contributed by NM, 21-Jun-1993.) $)
    unidm $p |- ( A u. A ) = A $=
      ( vx cv wcel oridm uneqri ) BAAABCADEF $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Commutative law for union of classes.  Exercise 6 of [TakeutiZaring]
       p. 17.  (Contributed by NM, 25-Jun-1998.)  (Proof shortened by Andrew
       Salmon, 26-Jun-2011.) $)
    uncom $p |- ( A u. B ) = ( B u. A ) $=
      ( vx cun cv wcel wo orcom elun bitr4i uneqri ) CABBADZCEZAFZMBFZGONGMLFNO
      HMBAIJK $.
  $}

  $( If a class equals the union of two other classes, then it equals the union
     of those two classes commuted. ~ equncom was automatically derived from
     ~ equncomVD using the tools program translate_without_overwriting.cmd and
     minimizing.  (Contributed by Alan Sare, 18-Feb-2012.) $)
  equncom $p |- ( A = ( B u. C ) <-> A = ( C u. B ) ) $=
    ( cun uncom eqeq2i ) BCDCBDABCEF $.

  ${
    equncomi.1 $e |- A = ( B u. C ) $.
    $( Inference form of ~ equncom . ~ equncomi was automatically derived from
       ~ equncomiVD using the tools program translate_without_overwriting.cmd
       and minimizing.  (Contributed by Alan Sare, 18-Feb-2012.) $)
    equncomi $p |- A = ( C u. B ) $=
      ( cun wceq equncom mpbi ) ABCEFACBEFDABCGH $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Equality theorem for the union of two classes.  (Contributed by NM,
       15-Jul-1993.) $)
    uneq1 $p |- ( A = B -> ( A u. C ) = ( B u. C ) ) $=
      ( vx wceq cun cv wcel wo eleq2 orbi1d elun 3bitr4g eqrdv ) ABEZDACFZBCFZO
      DGZAHZRCHZIRBHZTIRPHRQHOSUATABRJKRACLRBCLMN $.
  $}

  $( Equality theorem for the union of two classes.  (Contributed by NM,
     5-Aug-1993.) $)
  uneq2 $p |- ( A = B -> ( C u. A ) = ( C u. B ) ) $=
    ( wceq cun uneq1 uncom 3eqtr4g ) ABDACEBCECAECBEABCFCAGCBGH $.

  $( Equality theorem for the union of two classes.  (Contributed by NM,
     29-Mar-1998.) $)
  uneq12 $p |- ( ( A = B /\ C = D ) -> ( A u. C ) = ( B u. D ) ) $=
    ( wceq cun uneq1 uneq2 sylan9eq ) ABECDEACFBCFBDFABCGCDBHI $.

  ${
    uneq1i.1 $e |- A = B $.
    $( Inference adding union to the right in a class equality.  (Contributed
       by NM, 30-Aug-1993.) $)
    uneq1i $p |- ( A u. C ) = ( B u. C ) $=
      ( wceq cun uneq1 ax-mp ) ABEACFBCFEDABCGH $.

    $( Inference adding union to the left in a class equality.  (Contributed by
       NM, 30-Aug-1993.) $)
    uneq2i $p |- ( C u. A ) = ( C u. B ) $=
      ( wceq cun uneq2 ax-mp ) ABECAFCBFEDABCGH $.

    ${
      uneq12i.2 $e |- C = D $.
      $( Equality inference for the union of two classes.  (Contributed by NM,
         12-Aug-2004.)  (Proof shortened by Eric Schmidt, 26-Jan-2007.) $)
      uneq12i $p |- ( A u. C ) = ( B u. D ) $=
        ( wceq cun uneq12 mp2an ) ABGCDGACHBDHGEFABCDIJ $.
    $}
  $}

  ${
    uneq1d.1 $e |- ( ph -> A = B ) $.
    $( Deduction adding union to the right in a class equality.  (Contributed
       by NM, 29-Mar-1998.) $)
    uneq1d $p |- ( ph -> ( A u. C ) = ( B u. C ) ) $=
      ( wceq cun uneq1 syl ) ABCFBDGCDGFEBCDHI $.

    $( Deduction adding union to the left in a class equality.  (Contributed by
       NM, 29-Mar-1998.) $)
    uneq2d $p |- ( ph -> ( C u. A ) = ( C u. B ) ) $=
      ( wceq cun uneq2 syl ) ABCFDBGDCGFEBCDHI $.

    ${
      uneq12d.2 $e |- ( ph -> C = D ) $.
      $( Equality deduction for the union of two classes.  (Contributed by NM,
         29-Sep-2004.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
      uneq12d $p |- ( ph -> ( A u. C ) = ( B u. D ) ) $=
        ( wceq cun uneq12 syl2anc ) ABCHDEHBDICEIHFGBCDEJK $.
    $}
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.
    nfun.1 $e |- F/_ x A $.
    nfun.2 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for the union of classes.
       (Contributed by NM, 15-Sep-2003.)  (Revised by Mario Carneiro,
       14-Oct-2016.) $)
    nfun $p |- F/_ x ( A u. B ) $=
      ( vy cun cv wcel wo cab df-un nfcri nfor nfab nfcxfr ) ABCGFHZBIZQCIZJZFK
      FBCLTAFRSAAFBDMAFCEMNOP $.
  $}

  ${
    $d A x $.  $d B x $.  $d C x $.
    $( Associative law for union of classes.  Exercise 8 of [TakeutiZaring]
       p. 17.  (Contributed by NM, 3-May-1994.)  (Proof shortened by Andrew
       Salmon, 26-Jun-2011.) $)
    unass $p |- ( ( A u. B ) u. C ) = ( A u. ( B u. C ) ) $=
      ( vx cun cv wcel wo elun orbi2i orbi1i orass bitr2i 3bitrri uneqri ) DABE
      ZCABCEZEZDFZRGSAGZSQGZHTSBGZSCGZHZHZSPGZUCHZSAQIUAUDTSBCIJUGTUBHZUCHUEUFU
      HUCSABIKTUBUCLMNO $.
  $}

  $( A rearrangement of union.  (Contributed by NM, 12-Aug-2004.) $)
  un12 $p |- ( A u. ( B u. C ) ) = ( B u. ( A u. C ) ) $=
    ( cun uncom uneq1i unass 3eqtr3i ) ABDZCDBADZCDABCDDBACDDIJCABEFABCGBACGH
    $.

  $( A rearrangement of union.  (Contributed by NM, 12-Aug-2004.)  (Proof
     shortened by Andrew Salmon, 26-Jun-2011.) $)
  un23 $p |- ( ( A u. B ) u. C ) = ( ( A u. C ) u. B ) $=
    ( cun unass un12 uncom 3eqtri ) ABDCDABCDDBACDZDIBDABCEABCFBIGH $.

  $( A rearrangement of the union of 4 classes.  (Contributed by NM,
     12-Aug-2004.) $)
  un4 $p |- ( ( A u. B ) u. ( C u. D ) ) =
            ( ( A u. C ) u. ( B u. D ) ) $=
    ( cun un12 uneq2i unass 3eqtr4i ) ABCDEZEZEACBDEZEZEABEJEACELEKMABCDFGABJHA
    CLHI $.

  $( Union distributes over itself.  (Contributed by NM, 17-Aug-2004.) $)
  unundi $p |- ( A u. ( B u. C ) ) = ( ( A u. B ) u. ( A u. C ) ) $=
    ( cun unidm uneq1i un4 eqtr3i ) AADZBCDZDAJDABDACDDIAJAEFAABCGH $.

  $( Union distributes over itself.  (Contributed by NM, 17-Aug-2004.) $)
  unundir $p |- ( ( A u. B ) u. C ) = ( ( A u. C ) u. ( B u. C ) ) $=
    ( cun unidm uneq2i un4 eqtr3i ) ABDZCCDZDICDACDBCDDJCICEFABCCGH $.

  ${
    $d x A $.  $d x B $.
    $( Subclass relationship for union of classes.  Theorem 25 of [Suppes]
       p. 27.  (Contributed by NM, 5-Aug-1993.) $)
    ssun1 $p |- A C_ ( A u. B ) $=
      ( vx cun cv wcel wo orc elun sylibr ssriv ) CAABDZCEZAFZNMBFZGMLFNOHMABIJ
      K $.
  $}

  $( Subclass relationship for union of classes.  (Contributed by NM,
     30-Aug-1993.) $)
  ssun2 $p |- A C_ ( B u. A ) $=
    ( cun ssun1 uncom sseqtri ) AABCBACABDABEF $.

  $( Subclass law for union of classes.  (Contributed by NM, 5-Aug-1993.) $)
  ssun3 $p |- ( A C_ B -> A C_ ( B u. C ) ) $=
    ( wss cun ssun1 sstr2 mpi ) ABDBBCEZDAIDBCFABIGH $.

  $( Subclass law for union of classes.  (Contributed by NM, 14-Aug-1994.) $)
  ssun4 $p |- ( A C_ B -> A C_ ( C u. B ) ) $=
    ( wss cun ssun2 sstr2 mpi ) ABDBCBEZDAIDBCFABIGH $.

  $( Membership law for union of classes.  (Contributed by NM, 5-Aug-1993.) $)
  elun1 $p |- ( A e. B -> A e. ( B u. C ) ) $=
    ( cun ssun1 sseli ) BBCDABCEF $.

  $( Membership law for union of classes.  (Contributed by NM, 30-Aug-1993.) $)
  elun2 $p |- ( A e. B -> A e. ( C u. B ) ) $=
    ( cun ssun2 sseli ) BCBDABCEF $.

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Subclass law for union of classes.  (Contributed by NM, 14-Oct-1999.)
       (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
    unss1 $p |- ( A C_ B -> ( A u. C ) C_ ( B u. C ) ) $=
      ( vx wss cun cv wcel wo ssel orim1d elun 3imtr4g ssrdv ) ABEZDACFZBCFZODG
      ZAHZRCHZIRBHZTIRPHRQHOSUATABRJKRACLRBCLMN $.

    $( A relationship between subclass and union.  Theorem 26 of [Suppes]
       p. 27.  (Contributed by NM, 30-Aug-1993.)  (Proof shortened by Andrew
       Salmon, 26-Jun-2011.) $)
    ssequn1 $p |- ( A C_ B <-> ( A u. B ) = B ) $=
      ( vx cv wcel wi wal cun wb wceq wo bicom pm4.72 elun bibi1i 3bitr4i albii
      wss dfss2 dfcleq ) CDZAEZUABEZFZCGUAABHZEZUCIZCGABRUEBJUDUGCUCUBUCKZIUHUC
      IUDUGUCUHLUBUCMUFUHUCUAABNOPQCABSCUEBTP $.
  $}

  $( Subclass law for union of classes.  Exercise 7 of [TakeutiZaring] p. 18.
     (Contributed by NM, 14-Oct-1999.) $)
  unss2 $p |- ( A C_ B -> ( C u. A ) C_ ( C u. B ) ) $=
    ( wss cun unss1 uncom 3sstr4g ) ABDACEBCECAECBEABCFCAGCBGH $.

  $( Subclass law for union of classes.  (Contributed by NM, 2-Jun-2004.) $)
  unss12 $p |- ( ( A C_ B /\ C C_ D ) -> ( A u. C ) C_ ( B u. D ) ) $=
    ( wss cun unss1 unss2 sylan9ss ) ABECDEACFBCFBDFABCGCDBHI $.

  $( A relationship between subclass and union.  (Contributed by NM,
     13-Jun-1994.) $)
  ssequn2 $p |- ( A C_ B <-> ( B u. A ) = B ) $=
    ( wss cun wceq ssequn1 uncom eqeq1i bitri ) ABCABDZBEBADZBEABFJKBABGHI $.

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( The union of two subclasses is a subclass.  Theorem 27 of [Suppes] p. 27
       and its converse.  (Contributed by NM, 11-Jun-2004.) $)
    unss $p |- ( ( A C_ C /\ B C_ C ) <-> ( A u. B ) C_ C ) $=
      ( vx cun wss cv wcel wi wal wa dfss2 19.26 elun imbi1i jaob bitri anbi12i
      wo albii 3bitr4i bitr2i ) ABEZCFDGZUCHZUDCHZIZDJZACFZBCFZKZDUCCLUDAHZUFIZ
      UDBHZUFIZKZDJUMDJZUODJZKUHUKUMUODMUGUPDUGULUNSZUFIUPUEUSUFUDABNOULUFUNPQT
      UIUQUJURDACLDBCLRUAUB $.
  $}

  ${
    unssi.1 $e |- A C_ C $.
    unssi.2 $e |- B C_ C $.
    $( An inference showing the union of two subclasses is a subclass.
       (Contributed by Raph Levien, 10-Dec-2002.) $)
    unssi $p |- ( A u. B ) C_ C $=
      ( wss wa cun pm3.2i unss mpbi ) ACFZBCFZGABHCFLMDEIABCJK $.
  $}

  ${
    unssd.1 $e |- ( ph -> A C_ C ) $.
    unssd.2 $e |- ( ph -> B C_ C ) $.
    $( A deduction showing the union of two subclasses is a subclass.
       (Contributed by Jonathan Ben-Naim, 3-Jun-2011.) $)
    unssd $p |- ( ph -> ( A u. B ) C_ C ) $=
      ( wss cun wa unss biimpi syl2anc ) ABDGZCDGZBCHDGZEFMNIOBCDJKL $.
  $}

  ${
    unssad.1 $e |- ( ph -> ( A u. B ) C_ C ) $.
    $( If ` ( A u. B ) ` is contained in ` C ` , so is ` A ` .  One-way
       deduction form of ~ unss .  Partial converse of ~ unssd .  (Contributed
       by David Moews, 1-May-2017.) $)
    unssad $p |- ( ph -> A C_ C ) $=
      ( wss cun wa unss sylibr simpld ) ABDFZCDFZABCGDFLMHEBCDIJK $.

    $( If ` ( A u. B ) ` is contained in ` C ` , so is ` B ` .  One-way
       deduction form of ~ unss .  Partial converse of ~ unssd .  (Contributed
       by David Moews, 1-May-2017.) $)
    unssbd $p |- ( ph -> B C_ C ) $=
      ( wss cun wa unss sylibr simprd ) ABDFZCDFZABCGDFLMHEBCDIJK $.
  $}

  $( A condition that implies inclusion in the union of two classes.
     (Contributed by NM, 23-Nov-2003.) $)
  ssun $p |- ( ( A C_ B \/ A C_ C ) -> A C_ ( B u. C ) ) $=
    ( wss cun ssun3 ssun4 jaoi ) ABDABCEDACDABCFACBGH $.

  $( Restricted existential quantification over union.  (Contributed by Jeff
     Madsen, 5-Jan-2011.) $)
  rexun $p |- ( E. x e. ( A u. B ) ph <->
                          ( E. x e. A ph \/ E. x e. B ph ) ) $=
    ( cun wrex cv wcel wa wo df-rex 19.43 elun anbi1i andir bitri exbii orbi12i
    wex 3bitr4i ) ABCDEZFBGZUAHZAIZBSZABCFZABDFZJZABUAKUBCHZAIZUBDHZAIZJZBSUJBS
    ZULBSZJUEUHUJULBLUDUMBUDUIUKJZAIUMUCUPAUBCDMNUIUKAOPQUFUNUGUOABCKABDKRTP $.

  $( Restricted quantification over a union.  (Contributed by Scott Fenton,
     12-Apr-2011.)  (Proof shortened by Andrew Salmon, 29-Jun-2011.) $)
  ralunb $p |- ( A. x e. ( A u. B ) ph <->
                 ( A. x e. A ph /\ A. x e. B ph ) ) $=
    ( cv cun wcel wi wal wa wral wo elun imbi1i jaob bitri albii df-ral anbi12i
    19.26 3bitr4i ) BEZCDFZGZAHZBIZUBCGZAHZBIZUBDGZAHZBIZJZABUCKABCKZABDKZJUFUH
    UKJZBIUMUEUPBUEUGUJLZAHUPUDUQAUBCDMNUGAUJOPQUHUKBTPABUCRUNUIUOULABCRABDRSUA
    $.

  $( Restricted quantification over union.  (Contributed by Jeff Madsen,
     2-Sep-2009.) $)
  ralun $p |- ( ( A. x e. A ph /\ A. x e. B ph ) -> A. x e. ( A u. B ) ph ) $=
    ( cun wral wa ralunb biimpri ) ABCDEFABCFABDFGABCDHI $.


$(
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
  The intersection of two classes
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
$)

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Expansion of membership in an intersection of two classes.  Theorem 12
       of [Suppes] p. 25.  (Contributed by NM, 29-Apr-1994.) $)
    elin $p |- ( A e. ( B i^i C ) <-> ( A e. B /\ A e. C ) ) $=
      ( vx cin wcel wa elex adantl cv wceq eleq1 anbi12d df-in elab2g pm5.21nii
      cvv ) ABCEZFAQFZABFZACFZGZARHUASTACHIDJZBFZUCCFZGUBDARQUCAKUDTUEUAUCABLUC
      ACLMDBCNOP $.
  $}

  ${
    elini.1 $e |- A e. B $.
    elini.2 $e |- A e. C $.
    $( Membership in an intersection of two classes.  (Contributed by Glauco
       Siliprandi, 17-Aug-2020.) $)
    elini $p |- A e. ( B i^i C ) $=
      ( cin wcel elin mpbir2an ) ABCFGABGACGDEABCHI $.
  $}

  ${
    elind.1 $e |- ( ph -> X e. A ) $.
    elind.2 $e |- ( ph -> X e. B ) $.
    $( Deduce membership in an intersection of two classes.  (Contributed by
       Jonathan Ben-Naim, 3-Jun-2011.) $)
    elind $p |- ( ph -> X e. ( A i^i B ) ) $=
      ( wcel cin elin sylanbrc ) ADBGDCGDBCHGEFDBCIJ $.
  $}

  $( Membership in an intersection implies membership in the first set.
     (Contributed by Glauco Siliprandi, 11-Dec-2019.) $)
  elinel1 $p |- ( A e. ( B i^i C ) -> A e. B ) $=
    ( cin wcel elin simplbi ) ABCDEABEACEABCFG $.

  $( Membership in an intersection implies membership in the second set.
     (Contributed by Glauco Siliprandi, 11-Dec-2019.) $)
  elinel2 $p |- ( A e. ( B i^i C ) -> A e. C ) $=
    ( cin wcel elin simprbi ) ABCDEABEACEABCFG $.

  ${
    elin2.x $e |- X = ( B i^i C ) $.
    $( Membership in a class defined as an intersection.  (Contributed by
       Stefan O'Rear, 29-Mar-2015.) $)
    elin2 $p |- ( A e. X <-> ( A e. B /\ A e. C ) ) $=
      ( wcel cin wa eleq2i elin bitri ) ADFABCGZFABFACFHDLAEIABCJK $.
  $}

  ${
    elin1d.1 $e |- ( ph -> X e. ( A i^i B ) ) $.
    $( Elementhood in the first set of an intersection - deduction version.
       (Contributed by Thierry Arnoux, 3-May-2020.) $)
    elin1d $p |- ( ph -> X e. A ) $=
      ( cin wcel elinel1 syl ) ADBCFGDBGEDBCHI $.

    $( Elementhood in the first set of an intersection - deduction version.
       (Contributed by Thierry Arnoux, 3-May-2020.) $)
    elin2d $p |- ( ph -> X e. B ) $=
      ( cin wcel elinel2 syl ) ADBCFGDCGEDBCHI $.
  $}

  ${
    elin3.x $e |- X = ( ( B i^i C ) i^i D ) $.
    $( Membership in a class defined as a ternary intersection.  (Contributed
       by Stefan O'Rear, 29-Mar-2015.) $)
    elin3 $p |- ( A e. X <-> ( A e. B /\ A e. C /\ A e. D ) ) $=
      ( cin wcel wa w3a elin anbi1i elin2 df-3an 3bitr4i ) ABCGZHZADHZIABHZACHZ
      IZRIAEHSTRJQUARABCKLAPDEFMSTRNO $.
  $}

  ${
    $d A x $.  $d B x $.
    $( Commutative law for intersection of classes.  Exercise 7 of
       [TakeutiZaring] p. 17.  (Contributed by NM, 21-Jun-1993.) $)
    incom $p |- ( A i^i B ) = ( B i^i A ) $=
      ( vx cin cv wcel wa ancom elin 3bitr4i eqriv ) CABDZBADZCEZAFZNBFZGPOGNLF
      NMFOPHNABINBAIJK $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    ineqri.1 $e |- ( ( x e. A /\ x e. B ) <-> x e. C ) $.
    $( Inference from membership to intersection.  (Contributed by NM,
       21-Jun-1993.) $)
    ineqri $p |- ( A i^i B ) = C $=
      ( cin cv wcel wa elin bitri eqriv ) ABCFZDAGZMHNBHNCHINDHNBCJEKL $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Equality theorem for intersection of two classes.  (Contributed by NM,
       14-Dec-1993.) $)
    ineq1 $p |- ( A = B -> ( A i^i C ) = ( B i^i C ) ) $=
      ( vx wceq cin cv wcel wa eleq2 anbi1d elin 3bitr4g eqrdv ) ABEZDACFZBCFZO
      DGZAHZRCHZIRBHZTIRPHRQHOSUATABRJKRACLRBCLMN $.
  $}

  $( Equality theorem for intersection of two classes.  (Contributed by NM,
     26-Dec-1993.) $)
  ineq2 $p |- ( A = B -> ( C i^i A ) = ( C i^i B ) ) $=
    ( wceq cin ineq1 incom 3eqtr4g ) ABDACEBCECAECBEABCFCAGCBGH $.

  $( Equality theorem for intersection of two classes.  (Contributed by NM,
     8-May-1994.) $)
  ineq12 $p |- ( ( A = B /\ C = D ) -> ( A i^i C ) = ( B i^i D ) ) $=
    ( wceq cin ineq1 ineq2 sylan9eq ) ABECDEACFBCFBDFABCGCDBHI $.

  ${
    ineq1i.1 $e |- A = B $.
    $( Equality inference for intersection of two classes.  (Contributed by NM,
       26-Dec-1993.) $)
    ineq1i $p |- ( A i^i C ) = ( B i^i C ) $=
      ( wceq cin ineq1 ax-mp ) ABEACFBCFEDABCGH $.

    $( Equality inference for intersection of two classes.  (Contributed by NM,
       26-Dec-1993.) $)
    ineq2i $p |- ( C i^i A ) = ( C i^i B ) $=
      ( wceq cin ineq2 ax-mp ) ABECAFCBFEDABCGH $.

    ${
      ineq12i.2 $e |- C = D $.
      $( Equality inference for intersection of two classes.  (Contributed by
         NM, 24-Jun-2004.)  (Proof shortened by Eric Schmidt, 26-Jan-2007.) $)
      ineq12i $p |- ( A i^i C ) = ( B i^i D ) $=
        ( wceq cin ineq12 mp2an ) ABGCDGACHBDHGEFABCDIJ $.
    $}
  $}

  ${
    ineq1d.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for intersection of two classes.  (Contributed by NM,
       10-Apr-1994.) $)
    ineq1d $p |- ( ph -> ( A i^i C ) = ( B i^i C ) ) $=
      ( wceq cin ineq1 syl ) ABCFBDGCDGFEBCDHI $.

    $( Equality deduction for intersection of two classes.  (Contributed by NM,
       10-Apr-1994.) $)
    ineq2d $p |- ( ph -> ( C i^i A ) = ( C i^i B ) ) $=
      ( wceq cin ineq2 syl ) ABCFDBGDCGFEBCDHI $.

    ${
      ineq12d.2 $e |- ( ph -> C = D ) $.
      $( Equality deduction for intersection of two classes.  (Contributed by
         NM, 24-Jun-2004.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
      ineq12d $p |- ( ph -> ( A i^i C ) = ( B i^i D ) ) $=
        ( wceq cin ineq12 syl2anc ) ABCHDEHBDICEIHFGBCDEJK $.
    $}

    ${
      ineqan12d.2 $e |- ( ps -> C = D ) $.
      $( Equality deduction for intersection of two classes.  (Contributed by
         NM, 7-Feb-2007.) $)
      ineqan12d $p |- ( ( ph /\ ps ) -> ( A i^i C ) = ( B i^i D ) ) $=
        ( wceq cin ineq12 syl2an ) ACDIEFICEJDFJIBGHCDEFKL $.
    $}
  $}

  $( A relationship between subclass and intersection.  Similar to Exercise 9
     of [TakeutiZaring] p. 18.  (Contributed by NM, 17-May-1994.) $)
  sseqin2 $p |- ( A C_ B <-> ( B i^i A ) = A ) $=
    ( wss cin wceq df-ss incom eqeq1i bitri ) ABCABDZAEBADZAEABFJKAABGHI $.

  ${
    $d x y $.  $d y A $.  $d y B $.
    nfin.1 $e |- F/_ x A $.
    nfin.2 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for the intersection of classes.
       (Contributed by NM, 15-Sep-2003.)  (Revised by Mario Carneiro,
       14-Oct-2016.) $)
    nfin $p |- F/_ x ( A i^i B ) $=
      ( vy cin cv wcel crab dfin5 nfcri nfrab nfcxfr ) ABCGFHCIZFBJFBCKOAFBAFCE
      LDMN $.
  $}

  ${
    $d x ph $.  $d x A $.  $d x B $.
    rabbi2dva.1 $e |- ( ( ph /\ x e. A ) -> ( x e. B <-> ps ) ) $.
    $( Deduction from a wff to a restricted class abstraction.  (Contributed by
       NM, 14-Jan-2014.) $)
    rabbi2dva $p |- ( ph -> ( A i^i B ) = { x e. A | ps } ) $=
      ( cin cv wcel crab dfin5 rabbidva syl5eq ) ADEGCHEIZCDJBCDJCDEKANBCDFLM
      $.
  $}

  ${
    $d x A $.
    $( Idempotent law for intersection of classes.  Theorem 15 of [Suppes]
       p. 26.  (Contributed by NM, 5-Aug-1993.) $)
    inidm $p |- ( A i^i A ) = A $=
      ( vx cv wcel anidm ineqri ) BAAABCADEF $.
  $}

  ${
    $d A x $.  $d B x $.  $d C x $.
    $( Associative law for intersection of classes.  Exercise 9 of
       [TakeutiZaring] p. 17.  (Contributed by NM, 3-May-1994.) $)
    inass $p |- ( ( A i^i B ) i^i C ) = ( A i^i ( B i^i C ) ) $=
      ( vx cin cv wcel wa anass elin anbi2i bitr4i anbi1i 3bitr4i ineqri ) DABE
      ZCABCEZEZDFZAGZSBGZHZSCGZHZTSQGZHZSPGZUCHSRGUDTUAUCHZHUFTUAUCIUEUHTSBCJKL
      UGUBUCSABJMSAQJNO $.
  $}

  $( A rearrangement of intersection.  (Contributed by NM, 21-Apr-2001.) $)
  in12 $p |- ( A i^i ( B i^i C ) ) = ( B i^i ( A i^i C ) ) $=
    ( cin incom ineq1i inass 3eqtr3i ) ABDZCDBADZCDABCDDBACDDIJCABEFABCGBACGH
    $.

  $( A rearrangement of intersection.  (Contributed by NM, 21-Apr-2001.)
     (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
  in32 $p |- ( ( A i^i B ) i^i C ) = ( ( A i^i C ) i^i B ) $=
    ( cin inass in12 incom 3eqtri ) ABDCDABCDDBACDZDIBDABCEABCFBIGH $.

  $( A rearrangement of intersection.  (Contributed by NM, 27-Aug-2012.) $)
  in13 $p |- ( A i^i ( B i^i C ) ) = ( C i^i ( B i^i A ) ) $=
    ( cin in32 incom 3eqtr4i ) BCDZADBADZCDAHDCIDBCAEAHFCIFG $.

  $( A rearrangement of intersection.  (Contributed by NM, 27-Aug-2012.) $)
  in31 $p |- ( ( A i^i B ) i^i C ) = ( ( C i^i B ) i^i A ) $=
    ( cin in12 incom 3eqtr4i ) CABDZDACBDZDHCDIADCABEHCFIAFG $.

  $( Rotate the intersection of 3 classes.  (Contributed by NM,
     27-Aug-2012.) $)
  inrot $p |- ( ( A i^i B ) i^i C ) = ( ( C i^i A ) i^i B ) $=
    ( cin in31 in32 eqtri ) ABDCDCBDADCADBDABCECBAFG $.

  $( Rearrangement of intersection of 4 classes.  (Contributed by NM,
     21-Apr-2001.) $)
  in4 $p |- ( ( A i^i B ) i^i ( C i^i D ) ) =
            ( ( A i^i C ) i^i ( B i^i D ) ) $=
    ( cin in12 ineq2i inass 3eqtr4i ) ABCDEZEZEACBDEZEZEABEJEACELEKMABCDFGABJHA
    CLHI $.

  $( Intersection distributes over itself.  (Contributed by NM, 6-May-1994.) $)
  inindi $p |- ( A i^i ( B i^i C ) ) = ( ( A i^i B ) i^i ( A i^i C ) ) $=
    ( cin inidm ineq1i in4 eqtr3i ) AADZBCDZDAJDABDACDDIAJAEFAABCGH $.

  $( Intersection distributes over itself.  (Contributed by NM,
     17-Aug-2004.) $)
  inindir $p |- ( ( A i^i B ) i^i C ) = ( ( A i^i C ) i^i ( B i^i C ) ) $=
    ( cin inidm ineq2i in4 eqtr3i ) ABDZCCDZDICDACDBCDDJCICEFABCCGH $.

  ${
    $d x A $.  $d x B $.
    $( The intersection of two classes is a subset of one of them.  Part of
       Exercise 12 of [TakeutiZaring] p. 18.  (Contributed by NM,
       27-Apr-1994.) $)
    inss1 $p |- ( A i^i B ) C_ A $=
      ( vx cin cv elinel1 ssriv ) CABDACEABFG $.
  $}

  $( The intersection of two classes is a subset of one of them.  Part of
     Exercise 12 of [TakeutiZaring] p. 18.  (Contributed by NM,
     27-Apr-1994.) $)
  inss2 $p |- ( A i^i B ) C_ B $=
    ( cin incom inss1 eqsstr3i ) ABCBACBBADBAEF $.

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Subclass of intersection.  Theorem 2.8(vii) of [Monk1] p. 26.
       (Contributed by NM, 15-Jun-2004.)  (Proof shortened by Andrew Salmon,
       26-Jun-2011.) $)
    ssin $p |- ( ( A C_ B /\ A C_ C ) <-> A C_ ( B i^i C ) ) $=
      ( vx cv wcel wi wal wa cin wss elin imbi2i albii jcab 19.26 3bitrri dfss2
      anbi12i 3bitr4i ) DEZAFZUABFZGZDHZUBUACFZGZDHZIZUBUABCJZFZGZDHZABKZACKZIA
      UJKUMUBUCUFIZGZDHUDUGIZDHUIULUQDUKUPUBUABCLMNUQURDUBUCUFONUDUGDPQUNUEUOUH
      DABRDACRSDAUJRT $.
  $}

  ${
    ssini.1 $e |- A C_ B $.
    ssini.2 $e |- A C_ C $.
    $( An inference showing that a subclass of two classes is a subclass of
       their intersection.  (Contributed by NM, 24-Nov-2003.) $)
    ssini $p |- A C_ ( B i^i C ) $=
      ( wss wa cin pm3.2i ssin mpbi ) ABFZACFZGABCHFLMDEIABCJK $.
  $}

  ${
    ssind.1 $e |- ( ph -> A C_ B ) $.
    ssind.2 $e |- ( ph -> A C_ C ) $.
    $( A deduction showing that a subclass of two classes is a subclass of
       their intersection.  (Contributed by Jonathan Ben-Naim, 3-Jun-2011.) $)
    ssind $p |- ( ph -> A C_ ( B i^i C ) ) $=
      ( wss wa cin jca ssin sylib ) ABCGZBDGZHBCDIGAMNEFJBCDKL $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Add right intersection to subclass relation.  (Contributed by NM,
       16-Aug-1994.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
    ssrin $p |- ( A C_ B -> ( A i^i C ) C_ ( B i^i C ) ) $=
      ( vx wss cin cv wcel wa ssel anim1d elin 3imtr4g ssrdv ) ABEZDACFZBCFZODG
      ZAHZRCHZIRBHZTIRPHRQHOSUATABRJKRACLRBCLMN $.

    $( Add left intersection to subclass relation.  (Contributed by NM,
       19-Oct-1999.) $)
    sslin $p |- ( A C_ B -> ( C i^i A ) C_ ( C i^i B ) ) $=
      ( wss cin ssrin incom 3sstr4g ) ABDACEBCECAECBEABCFCAGCBGH $.
  $}

  ${
    ssrind.1 $e |- ( ph -> A C_ B ) $.
    $( Add right intersection to subclass relation.  (Contributed by Glauco
       Siliprandi, 2-Jan-2022.) $)
    ssrind $p |- ( ph -> ( A i^i C ) C_ ( B i^i C ) ) $=
      ( wss cin ssrin syl ) ABCFBDGCDGFEBCDHI $.
  $}

  $( Intersection of subclasses.  (Contributed by NM, 5-May-2000.) $)
  ss2in $p |- ( ( A C_ B /\ C C_ D ) -> ( A i^i C ) C_ ( B i^i D ) ) $=
    ( wss cin ssrin sslin sylan9ss ) ABECDEACFBCFBDFABCGCDBHI $.

  $( Intersection preserves subclass relationship.  (Contributed by NM,
     14-Sep-1999.) $)
  ssinss1 $p |- ( A C_ C -> ( A i^i B ) C_ C ) $=
    ( cin wss wi inss1 sstr2 ax-mp ) ABDZAEACEJCEFABGJACHI $.

  $( Inclusion of an intersection of two classes.  (Contributed by NM,
     30-Oct-2014.) $)
  inss $p |- ( ( A C_ C \/ B C_ C ) -> ( A i^i B ) C_ C ) $=
    ( wss cin ssinss1 incom syl5eqss jaoi ) ACDABEZCDBCDZABCFKJBAECABGBACFHI $.

  $( Restricted existential quantification over intersection.  (Contributed by
     Peter Mazsa, 17-Dec-2018.) $)
  rexin $p |- ( E. x e. ( A i^i B ) ph <-> E. x e. A ( x e. B /\ ph ) ) $=
    ( cv wcel wa cin elin anbi1i anass bitri rexbii2 ) ABEZDFZAGZBCDHZCNQFZAGNC
    FZOGZAGSPGRTANCDIJSOAKLM $.

  ${
    $d x A $.  $d x B $.
    $( Alternate definition of subclass relationship.  (Contributed by AV,
       1-Aug-2022.) $)
    dfss7 $p |- ( B C_ A <-> { x e. A | x e. B } = B ) $=
      ( wss cin wceq cv wcel crab df-ss incom dfin5 eqtri eqeq1i bitri ) CBDCBE
      ZCFAGCHABIZCFCBJPQCPBCEQCBKABCLMNO $.
  $}


$(
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
  The symmetric difference of two classes
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
$)

  $c /_\ $.  $( Symmetric difference $)

  $( Declare the syntax for symmetric difference. $)
  csymdif $a class ( A /_\ B ) $.

  $( Define the symmetric difference of two classes.  Alternate definitions are
     ~ dfsymdif2 , ~ dfsymdif3 and ~ dfsymdif4 .  (Contributed by Scott Fenton,
     31-Mar-2012.) $)
  df-symdif $a |- ( A /_\ B ) = ( ( A \ B ) u. ( B \ A ) ) $.

  $( Symmetric difference commutes.  (Contributed by Scott Fenton,
     24-Apr-2012.) $)
  symdifcom $p |- ( A /_\ B ) = ( B /_\ A ) $=
    ( cdif cun csymdif uncom df-symdif 3eqtr4i ) ABCZBACZDJIDABEBAEIJFABGBAGH
    $.

  $( Equality theorem for symmetric difference.  (Contributed by Scott Fenton,
     24-Apr-2012.) $)
  symdifeq1 $p |- ( A = B -> ( A /_\ C ) = ( B /_\ C ) ) $=
    ( wceq cdif cun csymdif difeq1 difeq2 uneq12d df-symdif 3eqtr4g ) ABDZACEZC
    AEZFBCEZCBEZFACGBCGMNPOQABCHABCIJACKBCKL $.

  $( Equality theorem for symmetric difference.  (Contributed by Scott Fenton,
     24-Apr-2012.) $)
  symdifeq2 $p |- ( A = B -> ( C /_\ A ) = ( C /_\ B ) ) $=
    ( wceq csymdif symdifeq1 symdifcom 3eqtr4g ) ABDACEBCECAECBEABCFCAGCBGH $.

  ${
    nfsymdif.1 $e |- F/_ x A $.
    nfsymdif.2 $e |- F/_ x B $.
    $( Hypothesis builder for symmetric difference.  (Contributed by Scott
       Fenton, 19-Feb-2013.)  (Revised by Mario Carneiro, 11-Dec-2016.) $)
    nfsymdif $p |- F/_ x ( A /_\ B ) $=
      ( csymdif cdif cun df-symdif nfdif nfun nfcxfr ) ABCFBCGZCBGZHBCIAMNABCDE
      JACBEDJKL $.
  $}

  $( Membership in a symmetric difference.  (Contributed by Scott Fenton,
     31-Mar-2012.) $)
  elsymdif $p |- ( A e. ( B /_\ C ) <-> -. ( A e. B <-> A e. C ) ) $=
    ( cdif cun wcel wn wa wo csymdif wb elun eldif orbi12i df-symdif eleq2i xor
    bitri 3bitr4i ) ABCDZCBDZEZFZABFZACFZGHZUEUDGHZIZABCJZFUDUEKGUCATFZAUAFZIUH
    ATUALUJUFUKUGABCMACBMNRUIUBABCOPUDUEQS $.

  ${
    $d x A $.  $d x B $.
    $( Alternate definition of the symmetric difference.  (Contributed by NM,
       17-Aug-2004.)  (Revised by AV, 17-Aug-2022.) $)
    dfsymdif4 $p |- ( A /_\ B ) = { x | -. ( x e. A <-> x e. B ) } $=
      ( cv wcel wb wn csymdif elsymdif abbi2i ) ADZBEKCEFGABCHKBCIJ $.
  $}

  $( Membership in a symmetric difference is an exclusive-or relationship.
     (Contributed by David A. Wheeler, 26-Apr-2020.)  (Proof shortened by BJ,
     13-Aug-2022.) $)
  elsymdifxor $p |- ( A e. ( B /_\ C ) <-> ( A e. B \/_ A e. C ) ) $=
    ( csymdif wcel wb wn wxo elsymdif df-xor bitr4i ) ABCDEABEZACEZFGLMHABCILMJ
    K $.

  ${
    $d x A $.  $d x B $.
    $( Alternate definition of the symmetric difference.  (Contributed by BJ,
       30-Apr-2020.) $)
    dfsymdif2 $p |- ( A /_\ B ) = { x | ( x e. A \/_ x e. B ) } $=
      ( cv wcel wxo csymdif elsymdifxor abbi2i ) ADZBEJCEFABCGJBCHI $.
  $}

  ${
    $d A x $.  $d B x $.  $d C x $.
    $( Symmetric difference is associative.  (Contributed by Scott Fenton,
       24-Apr-2012.)  (Proof shortened by BJ, 7-Sep-2022.) $)
    symdifass $p |- ( ( A /_\ B ) /_\ C ) = ( A /_\ ( B /_\ C ) ) $=
      ( vx csymdif cv wcel elsymdifxor biid xorbi12i xorass bicomi 3bitri eqriv
      wxo ) DABEZCEZABCEZEZDFZQGTPGZTCGZOZTAGZTRGZOZTSGZTPCHUCUDTBGZOZUBOUDUHUB
      OZOUFUAUIUBUBTABHUBIJUDUHUBKUDUDUJUEUDIUEUJTBCHLJMUGUFTARHLMN $.

    $( Obsolete proof of ~ symdifass as of 7-Sep-2022.  (Contributed by Scott
       Fenton, 24-Apr-2012.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    symdifassOLD $p |- ( A /_\ ( B /_\ C ) ) = ( ( A /_\ B ) /_\ C ) $=
      ( vx csymdif cv wcel wb biass notbii xor3 notbi con1bii 3bitr3ri elsymdif
      wn bitr4i bibi2i bibi1i 3bitr4i eqriv ) DABCEZEZABEZCEZDFZAGZUFUBGZHZPUFU
      DGZUFCGZHZPUFUCGUFUEGUIULUGUFBGZUKHZPZHZUGUMHZPZUKHZUIULUQUKHZPUGUNHZPUSU
      PUTVAUGUMUKIJUSUTUSPURUKPHUTURUKKUQUKLQMUGUNKNUHUOUGUFBCORUJURUKUFABOSTJU
      FAUBOUFUDCOTUA $.
  $}

  $( The symmetric difference contains one of the differences.  (Proposed by
     BJ, 18-Aug-2022.)  (Contributed by AV, 19-Aug-2022.) $)
  difsssymdif $p |- ( A \ B ) C_ ( A /_\ B ) $=
    ( cdif cun csymdif ssun1 df-symdif sseqtr4i ) ABCZIBACZDABEIJFABGH $.

  ${
    difsymssdifssd.1 $e |- ( ph -> ( A /_\ B ) C_ C ) $.
    $( If the symmetric difference is contained in ` C ` , so is one of the
       differences.  (Contributed by AV, 17-Aug-2022.) $)
    difsymssdifssd $p |- ( ph -> ( A \ B ) C_ C ) $=
      ( cdif csymdif difsssymdif syl5ss ) ABCFBCGDBCHEI $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Obsolete version of ~ dfsymdif4 as of 18-Aug-2022.  Two ways to express
       symmetric difference ( ~ df-symdif ).  (Contributed by NM, 17-Aug-2004.)
       (Proof shortened by Andrew Salmon, 26-Jun-2011.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    symdif2OLD $p |- ( ( A \ B ) u. ( B \ A ) ) =
                  { x | -. ( x e. A <-> x e. B ) } $=
      ( cv wcel wb wn cdif cun wo wa eldif orbi12i elun xor 3bitr4i abbi2i ) AD
      ZBEZRCEZFGZABCHZCBHZIZRUBEZRUCEZJSTGKZTSGKZJRUDEUAUEUGUFUHRBCLRCBLMRUBUCN
      STOPQ $.
  $}


$(
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
  Combinations of difference, union, and intersection of two classes
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
$)

  $( Absorption law for union.  (Contributed by NM, 16-Apr-2006.) $)
  unabs $p |- ( A u. ( A i^i B ) ) = A $=
    ( cin wss cun wceq inss1 ssequn2 mpbi ) ABCZADAJEAFABGJAHI $.

  $( Absorption law for intersection.  (Contributed by NM, 16-Apr-2006.) $)
  inabs $p |- ( A i^i ( A u. B ) ) = A $=
    ( cun wss cin wceq ssun1 df-ss mpbi ) AABCZDAJEAFABGAJHI $.

  $( Negation of subclass expressed in terms of intersection and proper
     subclass.  (Contributed by NM, 30-Jun-2004.)  (Proof shortened by Andrew
     Salmon, 26-Jun-2011.) $)
  nssinpss $p |- ( -. A C_ B <-> ( A i^i B ) C. A ) $=
    ( cin wne wss wa wn wpss inss1 biantrur df-ss necon3bbii df-pss 3bitr4i ) A
    BCZADZOAEZPFABEZGOAHQPABIJROAABKLOAMN $.

  $( Negation of subclass expressed in terms of proper subclass and union.
     (Contributed by NM, 15-Sep-2004.) $)
  nsspssun $p |- ( -. A C_ B <-> B C. ( A u. B ) ) $=
    ( wss wn cun wa wpss ssun2 biantrur ssid biantru unss bitri xchnxbir dfpss3
    bitr4i ) ABCZDBABEZCZRBCZDZFZBRGTUBQSUABAHIQQBBCZFTUCQBJKABBLMNBROP $.

  ${
    $d x A $.  $d x B $.
    $( Subclass defined in terms of class difference.  See comments under
       ~ dfun2 .  (Contributed by NM, 22-Mar-1998.)  (Proof shortened by Andrew
       Salmon, 26-Jun-2011.) $)
    dfss4 $p |- ( A C_ B <-> ( B \ ( B \ A ) ) = A ) $=
      ( vx wss wceq cdif sseqin2 cv wcel wn wa eldif notbii anbi2i wi elin abai
      cin iman bitr4i 3bitri difeqri eqeq1i ) ABDBARZAEBBAFZFZAEABGUFUDACBUEUDC
      HZBIZUGUEIZJZKUHUHUGAIZJKZJZKZUGUDIZUJUMUHUIULUGBALMNUOUHUKKUHUHUKOZKUNUG
      BAPUHUKQUPUMUHUHUKSNUATUBUCT $.

    $( An alternate definition of the union of two classes in terms of class
       difference, requiring no dummy variables.  Along with ~ dfin2 and
       ~ dfss4 it shows we can express union, intersection, and subset directly
       in terms of the single "primitive" operation ` \ ` (class difference).
       (Contributed by NM, 10-Jun-2004.) $)
    dfun2 $p |- ( A u. B ) = ( _V \ ( ( _V \ A ) \ B ) ) $=
      ( vx cvv cdif cv wcel wo wn wa eldif mpbiran anbi1i ioran 3bitr4i con2bii
      vex bitr4i uneqri ) CABDDAEZBEZEZCFZAGZUCBGZHZUCUAGZIZUCUBGZUGUFUCTGZUEIZ
      JUDIZUKJUGUFIUJULUKUJUCDGZULCQZUCDAKLMUCTBKUDUENOPUIUMUHUNUCDUAKLRS $.

    $( An alternate definition of the intersection of two classes in terms of
       class difference, requiring no dummy variables.  See comments under
       ~ dfun2 .  Another version is given by ~ dfin4 .  (Contributed by NM,
       10-Jun-2004.) $)
    dfin2 $p |- ( A i^i B ) = ( A \ ( _V \ B ) ) $=
      ( vx cvv cdif cv wcel wa vex eldif mpbiran con2bii anbi2i bitr4i ineqri
      wn ) CABADBEZEZCFZAGZSBGZHTSQGZPZHSRGUAUCTUBUAUBSDGUAPCISDBJKLMSAQJNO $.

    $( Difference with intersection.  Theorem 33 of [Suppes] p. 29.
       (Contributed by NM, 31-Mar-1998.)  (Proof shortened by Andrew Salmon,
       26-Jun-2011.) $)
    difin $p |- ( A \ ( A i^i B ) ) = ( A \ B ) $=
      ( vx cin cdif cv wcel wi wn pm4.61 anclb elin imbi2i iman 3bitr2i con2bii
      wa eldif 3bitr4i difeqri ) CAABDZABEZCFZAGZUCBGZHZIUDUEIQUDUCUAGZIQZUCUBG
      UDUEJUFUHUFUDUDUEQZHUDUGHUHIUDUEKUGUIUDUCABLMUDUGNOPUCABRST $.
  $}

  $( Implication of a class difference with a subclass.  (Contributed by AV,
     3-Jan-2022.) $)
  ssdifim $p |- ( ( A C_ V /\ B = ( V \ A ) ) -> A = ( V \ B ) ) $=
    ( wss cdif wceq dfss4 eqcom sylbb difeq2 eqcomd sylan9eq ) ACDZBCAEZFZACNEZ
    CBEZMPAFAPFACGPAHIOQPBNCJKL $.

  $( Symmetric class differences for subclasses.  (Contributed by AV,
     3-Jan-2022.) $)
  ssdifsym $p |- ( ( A C_ V /\ B C_ V )
                   -> ( B = ( V \ A ) <-> A = ( V \ B ) ) ) $=
    ( wss wa cdif wceq wi ssdifim ex adantr adantl impbid ) ACDZBCDZEBCAFGZACBF
    GZNPQHONPQABCIJKOQPHNOQPBACIJLM $.

  ${
    $d A x $.  $d B x y $.
    $( Alternate definition of subclass relationship: a class ` A ` is a
       subclass of another class ` B ` iff each element of ` A ` is equal to an
       element of ` B ` .  (Contributed by AV, 13-Nov-2020.) $)
    dfss5 $p |- ( A C_ B <-> A. x e. A E. y e. B x = y ) $=
      ( wss cv wcel wral weq wrex dfss3 clel5 ralbii bitri ) CDEAFZDGZACHABIBDJ
      ZACHACDKPQACBDOLMN $.
  $}

  $( Union defined in terms of intersection (De Morgan's law).  Definition of
     union in [Mendelson] p. 231.  (Contributed by NM, 8-Jan-2002.) $)
  dfun3 $p |- ( A u. B ) = ( _V \ ( ( _V \ A ) i^i ( _V \ B ) ) ) $=
    ( cun cvv cdif cin dfun2 dfin2 ddif difeq2i eqtr2i eqtri ) ABCDDAEZBEZEDMDB
    EZFZEABGNPDPMDOEZENMOHQBMBIJKJL $.

  $( Intersection defined in terms of union (De Morgan's law).  Similar to
     Exercise 4.10(n) of [Mendelson] p. 231.  (Contributed by NM,
     8-Jan-2002.) $)
  dfin3 $p |- ( A i^i B ) = ( _V \ ( ( _V \ A ) u. ( _V \ B ) ) ) $=
    ( cvv cdif cun cin ddif dfun2 difeq1i difeq2i eqtri dfin2 3eqtr4ri ) CCACBD
    ZDZDZDOCCADZNEZDABFOGRPCRCCQDZNDZDPQNHTOCSANAGIJKJABLM $.

  $( Alternate definition of the intersection of two classes.  Exercise 4.10(q)
     of [Mendelson] p. 231.  (Contributed by NM, 25-Nov-2003.) $)
  dfin4 $p |- ( A i^i B ) = ( A \ ( A \ B ) ) $=
    ( cin cdif wss wceq inss1 dfss4 mpbi difin difeq2i eqtr3i ) AAABCZDZDZMAABD
    ZDMAEOMFABGMAHINPAABJKL $.

  $( Intersection with universal complement.  Remark in [Stoll] p. 20.
     (Contributed by NM, 17-Aug-2004.) $)
  invdif $p |- ( A i^i ( _V \ B ) ) = ( A \ B ) $=
    ( cvv cdif cin dfin2 ddif difeq2i eqtri ) ACBDZEACJDZDABDAJFKBABGHI $.

  $( Intersection with class difference.  Theorem 34 of [Suppes] p. 29.
     (Contributed by NM, 17-Aug-2004.) $)
  indif $p |- ( A i^i ( A \ B ) ) = ( A \ B ) $=
    ( cdif cin dfin4 difeq2i difin 3eqtr2i ) AABCZDAAICZCAABDZCIAIEKJAABEFABGH
    $.

  $( Bring an intersection in and out of a class difference.  (Contributed by
     Jeff Hankins, 15-Jul-2009.) $)
  indif2 $p |- ( A i^i ( B \ C ) ) = ( ( A i^i B ) \ C ) $=
    ( cin cvv cdif inass invdif ineq2i 3eqtr3ri ) ABDZECFZDABLDZDKCFABCFZDABLGK
    CHMNABCHIJ $.

  $( Bring an intersection in and out of a class difference.  (Contributed by
     Mario Carneiro, 15-May-2015.) $)
  indif1 $p |- ( ( A \ C ) i^i B ) = ( ( A i^i B ) \ C ) $=
    ( cdif cin indif2 incom difeq1i 3eqtr3i ) BACDZEBAEZCDJBEABEZCDBACFBJGKLCBA
    GHI $.

  $( Commutation law for intersection and difference.  (Contributed by Scott
     Fenton, 18-Feb-2013.) $)
  indifcom $p |- ( A i^i ( B \ C ) ) = ( B i^i ( A \ C ) ) $=
    ( cin cdif incom difeq1i indif2 3eqtr4i ) ABDZCEBADZCEABCEDBACEDJKCABFGABCH
    BACHI $.

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Distributive law for intersection over union.  Exercise 10 of
       [TakeutiZaring] p. 17.  (Contributed by NM, 30-Sep-2002.)  (Proof
       shortened by Andrew Salmon, 26-Jun-2011.) $)
    indi $p |- ( A i^i ( B u. C ) ) = ( ( A i^i B ) u. ( A i^i C ) ) $=
      ( vx cun cin cv wcel wo wa andi elin orbi12i bitr4i anbi2i 3bitr4i ineqri
      elun ) DABCEZABFZACFZEZDGZAHZUCBHZUCCHZIZJZUCTHZUCUAHZIZUDUCSHZJUCUBHUHUD
      UEJZUDUFJZIUKUDUEUFKUIUMUJUNUCABLUCACLMNULUGUDUCBCROUCTUARPQ $.

    $( Distributive law for union over intersection.  Exercise 11 of
       [TakeutiZaring] p. 17.  (Contributed by NM, 30-Sep-2002.)  (Proof
       shortened by Andrew Salmon, 26-Jun-2011.) $)
    undi $p |- ( A u. ( B i^i C ) ) = ( ( A u. B ) i^i ( A u. C ) ) $=
      ( vx cin cv wcel wo wa elin orbi2i ordi elun anbi12i bitr2i 3bitri uneqri
      cun ) DABCEZABRZACRZEZDFZAGZUCSGZHUDUCBGZUCCGZIZHUDUFHZUDUGHZIZUCUBGZUEUH
      UDUCBCJKUDUFUGLULUCTGZUCUAGZIUKUCTUAJUMUIUNUJUCABMUCACMNOPQ $.
  $}

  $( Distributive law for intersection over union.  Theorem 28 of [Suppes]
     p. 27.  (Contributed by NM, 30-Sep-2002.) $)
  indir $p |- ( ( A u. B ) i^i C ) = ( ( A i^i C ) u. ( B i^i C ) ) $=
    ( cun cin indi incom uneq12i 3eqtr4i ) CABDZECAEZCBEZDJCEACEZBCEZDCABFJCGMK
    NLACGBCGHI $.

  $( Distributive law for union over intersection.  Theorem 29 of [Suppes]
     p. 27.  (Contributed by NM, 30-Sep-2002.) $)
  undir $p |- ( ( A i^i B ) u. C ) = ( ( A u. C ) i^i ( B u. C ) ) $=
    ( cin cun undi uncom ineq12i 3eqtr4i ) CABDZECAEZCBEZDJCEACEZBCEZDCABFJCGMK
    NLACGBCGHI $.

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Infer equality from equalities of union and intersection.  Exercise 20
       of [Enderton] p. 32 and its converse.  (Contributed by NM,
       10-Aug-2004.) $)
    unineq $p |- ( ( ( A u. C ) = ( B u. C ) /\ ( A i^i C ) = ( B i^i C ) )
                 <-> A = B ) $=
      ( vx cun wceq cin wa wcel wb eleq2 elin 3bitr3g iba bibi12d syl5ibr uncom
      wo elun biorf cv wi adantld eqeq12i sylbi adantrd pm2.61i eqrdv uneq1 jca
      wn ineq1 impbii ) ACEZBCEZFZACGZBCGZFZHZABFZUTDABDUAZCIZUTVBAIZVBBIZJZUBV
      CUSVFUPUSVFVCVDVCHZVEVCHZJUSVBUQIVBURIVGVHUQURVBKVBACLVBBCLMVCVDVGVEVHVCV
      DNVCVENOPUCVCUKZUPVFUSUPVFVIVCVDRZVCVERZJUPVBCAEZIZVBCBEZIZVJVKUPVLVNFVMV
      OJUNVLUOVNACQBCQUDVLVNVBKUEVBCASVBCBSMVIVDVJVEVKVCVDTVCVETOPUFUGUHVAUPUSA
      BCUIABCULUJUM $.
  $}

  $( Equality of union and intersection implies equality of their arguments.
     (Contributed by NM, 16-Apr-2006.)  (Proof shortened by Andrew Salmon,
     26-Jun-2011.) $)
  uneqin $p |- ( ( A u. B ) = ( A i^i B ) <-> A = B ) $=
    ( cun cin wceq wss wa eqimss unss ssin sstr sylbir simpl anim12i syl sylibr
    eqss unidm inidm eqtr4i uneq2 ineq2 3eqtr3a impbii ) ABCZABDZEZABEZUGABFZBA
    FZGZUHUGUEUFFZUKUEUFHULAUFFZBUFFZGUKABUFIUMUIUNUJUMAAFUIGUIAABJAABKLUNUJBBF
    ZGUJBABJUJUOMLNLOABQPUHAACZAADZUEUFUPAUQARASTABAUAABAUBUCUD $.

  $( Distributive law for class difference.  Theorem 39 of [Suppes] p. 29.
     (Contributed by NM, 17-Aug-2004.) $)
  difundi $p |- ( A \ ( B u. C ) ) = ( ( A \ B ) i^i ( A \ C ) ) $=
    ( cun cdif cvv cin dfun3 difeq2i inindi dfin2 invdif ineq12i 3eqtr3i eqtri
    ) ABCDZEAFFBEZFCEZGZEZEZABEZACEZGZPTABCHIASGAQGZARGZGUAUDAQRJASKUEUBUFUCABL
    ACLMNO $.

  $( Distributive law for class difference.  (Contributed by NM,
     17-Aug-2004.) $)
  difundir $p |- ( ( A u. B ) \ C ) = ( ( A \ C ) u. ( B \ C ) ) $=
    ( cun cvv cdif cin indir invdif uneq12i 3eqtr3i ) ABDZECFZGAMGZBMGZDLCFACFZ
    BCFZDABMHLCINPOQACIBCIJK $.

  $( Distributive law for class difference.  Theorem 40 of [Suppes] p. 29.
     (Contributed by NM, 17-Aug-2004.) $)
  difindi $p |- ( A \ ( B i^i C ) ) = ( ( A \ B ) u. ( A \ C ) ) $=
    ( cin cdif cvv cun dfin3 difeq2i indi dfin2 invdif uneq12i 3eqtr3i eqtri )
    ABCDZEAFFBEZFCEZGZEZEZABEZACEZGZPTABCHIASDAQDZARDZGUAUDAQRJASKUEUBUFUCABLAC
    LMNO $.

  $( Distributive law for class difference.  (Contributed by NM,
     17-Aug-2004.) $)
  difindir $p |- ( ( A i^i B ) \ C ) = ( ( A \ C ) i^i ( B \ C ) ) $=
    ( cin cvv cdif inindir invdif ineq12i 3eqtr3i ) ABDZECFZDALDZBLDZDKCFACFZBC
    FZDABLGKCHMONPACHBCHIJ $.

  ${
    $d A x $.  $d B x $.  $d C x $.
    $( Distribute intersection over difference.  (Contributed by Scott Fenton,
       14-Apr-2011.) $)
    indifdir $p |- ( ( A \ B ) i^i C ) = ( ( A i^i C ) \ ( B i^i C ) ) $=
      ( vx cdif cin cv wcel wn wa pm3.24 intnan anass mtbir biorfi 3bitr4i elin
      wo eldif bitri an32 andi ianor anbi2i bitr4i anbi1i notbii anbi12i eqriv
      ) DABEZCFZACFZBCFZEZDGZAHZUOBHZIZJZUOCHZJZUPUTJZUQUTJZIZJZUOUKHZUOUNHZVAV
      BURUTIZRZJZVEVBURJZVKVBVHJZRVAVJVLVKVLUPUTVHJZJVMUPUTKLUPUTVHMNOUPURUTUAV
      BURVHUBPVDVIVBUQUTUCUDUEVFUOUJHZUTJVAUOUJCQVNUSUTUOABSUFTVGUOULHZUOUMHZIZ
      JVEUOULUMSVOVBVQVDUOACQVPVCUOBCQUGUHTPUI $.
  $}

  $( Class difference by a class difference.  (Contributed by Thierry Arnoux,
     18-Dec-2017.) $)
  difdif2 $p |- ( A \ ( B \ C ) ) = ( ( A \ B ) u. ( A i^i C ) ) $=
    ( cvv cdif cin cun difindi invdif eqcomi difeq2i dfin2 uneq2i 3eqtr4i ) ABD
    CEZFZEABEZAOEZGABCEZEQACFZGABOHSPAPSBCIJKTRQACLMN $.

  $( De Morgan's law for union.  Theorem 5.2(13) of [Stoll] p. 19.
     (Contributed by NM, 18-Aug-2004.) $)
  undm $p |- ( _V \ ( A u. B ) ) = ( ( _V \ A ) i^i ( _V \ B ) ) $=
    ( cvv difundi ) CABD $.

  $( De Morgan's law for intersection.  Theorem 5.2(13') of [Stoll] p. 19.
     (Contributed by NM, 18-Aug-2004.) $)
  indm $p |- ( _V \ ( A i^i B ) ) = ( ( _V \ A ) u. ( _V \ B ) ) $=
    ( cvv difindi ) CABD $.

  $( A relationship involving double difference and union.  (Contributed by NM,
     29-Aug-2004.) $)
  difun1 $p |- ( A \ ( B u. C ) ) = ( ( A \ B ) \ C ) $=
    ( cvv cdif cin cun inass invdif eqtr3i undm ineq2i difeq1i ) ADBEZFZCEZABCG
    ZEZABEZCEANDCEZFZFZPROTFUBPANTHOCIJADQEZFUBRUCUAABCKLAQIJJOSCABIMJ $.

  ${
    $d A x $.  $d B x $.  $d C x $.
    $( An equality involving class union and class difference.  The first
       equality of Exercise 13 of [TakeutiZaring] p. 22.  (Contributed by Alan
       Sare, 17-Apr-2012.)  (Proof shortened by JJ, 13-Jul-2021.) $)
    undif3 $p |- ( A u. ( B \ C ) ) = ( ( A u. B ) \ ( C \ A ) ) $=
      ( vx cdif cv wcel wn wa wo elun pm4.53 eldif xchnxbir anbi12i orbi2i ordi
      cun orcom anbi2i bitri 3bitri 3bitr4ri eqriv ) DABCEZRZABRZCAEZEZDFZUGGZU
      JUHGZHZIUJAGZUJBGZJZUJCGZHZUNJZIZUJUIGUJUFGZUKUPUMUSUJABKUQUNHIUSULUQUNLU
      JCAMNOUJUGUHMVAUNUJUEGZJUNUOURIZJZUTUJAUEKVBVCUNUJBCMPVDUPUNURJZIUTUNUOUR
      QVEUSUPUNURSTUAUBUCUD $.

    $( Represent a class difference as an intersection with a larger
       difference.  (Contributed by Jeff Madsen, 2-Sep-2009.) $)
    difin2 $p |- ( A C_ C -> ( A \ B ) = ( ( C \ B ) i^i A ) ) $=
      ( vx wss cdif cin cv wcel wn ssel pm4.71d anbi1d eldif anbi1i ancom anass
      wa elin bitr4i 3bitri 3bitr4g eqrdv ) ACEZDABFZCBFZAGZUDDHZAIZUHBIJZRUIUH
      CIZRZUJRZUHUEIUHUGIZUDUIULUJUDUIUKACUHKLMUHABNUNUHUFIZUIRUKUJRZUIRZUMUHUF
      ASUOUPUIUHCBNOUQUIUPRUMUPUIPUIUKUJQTUAUBUC $.
  $}

  $( Swap second and third argument of double difference.  (Contributed by NM,
     18-Aug-2004.) $)
  dif32 $p |- ( ( A \ B ) \ C ) = ( ( A \ C ) \ B ) $=
    ( cun cdif uncom difeq2i difun1 3eqtr3i ) ABCDZEACBDZEABECEACEBEJKABCFGABCH
    ACBHI $.

  $( Absorption-like law for class difference: you can remove a class only
     once.  (Contributed by FL, 2-Aug-2009.) $)
  difabs $p |- ( ( A \ B ) \ B ) = ( A \ B ) $=
    ( cun cdif difun1 unidm difeq2i eqtr3i ) ABBCZDABDZBDJABBEIBABFGH $.

  $( Alternate definition of the symmetric difference, given in Example 4.1 of
     [Stoll] p. 262 (the original definition corresponds to [Stoll] p. 13).
     (Contributed by NM, 17-Aug-2004.)  (Revised by BJ, 30-Apr-2020.) $)
  dfsymdif3 $p |- ( A /_\ B ) = ( ( A u. B ) \ ( A i^i B ) ) $=
    ( cin cdif cun csymdif difin incom difeq2i eqtri uneq12i difundir df-symdif
    3eqtr4ri ) AABCZDZBODZEABDZBADZEABEODABFPRQSABGQBBACZDSOTBABHIBAGJKABOLABMN
    $.


$(
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
  Class abstractions with difference, union, and intersection of two classes
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
$)

  ${
    $d x y $.  $d ph y $.  $d ps y $.
    $( Union of two class abstractions.  (Contributed by NM, 29-Sep-2002.)
       (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
    unab $p |- ( { x | ph } u. { x | ps } ) = { x | ( ph \/ ps ) } $=
      ( vy cab wo wsb cv wcel sbor df-clab orbi12i 3bitr4ri uneqri ) DACEZBCEZA
      BFZCEZQCDGACDGZBCDGZFDHZRIUAOIZUAPIZFABCDJQDCKUBSUCTADCKBDCKLMN $.

    $( Intersection of two class abstractions.  (Contributed by NM,
       29-Sep-2002.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
    inab $p |- ( { x | ph } i^i { x | ps } ) = { x | ( ph /\ ps ) } $=
      ( vy cab wa wsb cv wcel sban df-clab anbi12i 3bitr4ri ineqri ) DACEZBCEZA
      BFZCEZQCDGACDGZBCDGZFDHZRIUAOIZUAPIZFABCDJQDCKUBSUCTADCKBDCKLMN $.

    $( Difference of two class abstractions.  (Contributed by NM, 23-Oct-2004.)
       (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
    difab $p |- ( { x | ph } \ { x | ps } ) = { x | ( ph /\ -. ps ) } $=
      ( vy cab wn wcel wsb df-clab sban bicomi xchbinxr anbi12i 3bitrri difeqri
      wa cv sbn ) DACEZBCEZABFZPZCEZDQZUCGUBCDHACDHZUACDHZPUDSGZUDTGZFZPUBDCIAU
      ACDJUEUGUFUIUGUEADCIKUFBCDHUHBCDRBDCILMNO $.
  $}

  $( A class builder defined by a negation.  (Contributed by FL,
     18-Sep-2010.) $)
  notab $p |- { x | -. ph } = ( _V \ { x | ph } ) $=
    ( cv cvv wcel wn wa cab cdif crab df-rab rabab eqtr3i difab abid2 difeq1i )
    BCDEZAFZGBHZRBHZDABHZIZRBDJSTRBDKRBLMQBHZUAISUBQABNUCDUABDOPMM $.

  $( Union of two restricted class abstractions.  (Contributed by NM,
     25-Mar-2004.) $)
  unrab $p |- ( { x e. A | ph } u. { x e. A | ps } ) =
              { x e. A | ( ph \/ ps ) } $=
    ( crab cun cv wcel wa cab wo df-rab uneq12i unab andi abbii eqtr4i ) ACDEZB
    CDEZFCGDHZAIZCJZTBIZCJZFZABKZCDEZRUBSUDACDLBCDLMUGTUFIZCJZUEUFCDLUEUAUCKZCJ
    UIUAUCCNUHUJCTABOPQQQ $.

  $( Intersection of two restricted class abstractions.  (Contributed by NM,
     1-Sep-2006.) $)
  inrab $p |- ( { x e. A | ph } i^i { x e. A | ps } ) =
              { x e. A | ( ph /\ ps ) } $=
    ( crab cin cv wcel wa cab df-rab ineq12i inab anandi abbii eqtr4i ) ACDEZBC
    DEZFCGDHZAIZCJZSBIZCJZFZABIZCDEZQUARUCACDKBCDKLUFSUEIZCJZUDUECDKUDTUBIZCJUH
    TUBCMUGUICSABNOPPP $.

  ${
    $d x B $.
    $( Intersection with a restricted class abstraction.  (Contributed by NM,
       19-Nov-2007.) $)
    inrab2 $p |- ( { x e. A | ph } i^i B ) = { x e. ( A i^i B ) | ph } $=
      ( crab cin cv wcel wa cab df-rab abid1 ineq12i inab elin an32 bitri abbii
      anbi1i eqtr4i ) ABCEZDFBGZCHZAIZBJZUBDHZBJZFZABCDFZEZUAUEDUGABCKBDLMUJUBU
      IHZAIZBJZUHABUIKUHUDUFIZBJUMUDUFBNULUNBULUCUFIZAIUNUKUOAUBCDOSUCUFAPQRTTT
      $.
  $}

  $( Difference of two restricted class abstractions.  (Contributed by NM,
     23-Oct-2004.) $)
  difrab $p |- ( { x e. A | ph } \ { x e. A | ps } ) =
              { x e. A | ( ph /\ -. ps ) } $=
    ( crab cdif cv wcel wa wn df-rab difeq12i difab anass simpr con3i anim2i wi
    cab eqtr4i pm3.2 adantr con3d imdistani impbii bitr3i abbii ) ACDEZBCDEZFCG
    DHZAIZCSZUJBIZCSZFZABJZIZCDEZUHULUIUNACDKBCDKLURUJUQIZCSZUOUQCDKUOUKUMJZIZC
    SUTUKUMCMUSVBCUSUKUPIZVBUJAUPNVCVBUPVAUKUMBUJBOPQUKVAUPUKBUMUJBUMRAUJBUAUBU
    CUDUEUFUGTTT $.

  ${
    $d x A $.  $d x B $.

    $( Alternate definition of restricted class abstraction.  (Contributed by
       Mario Carneiro, 8-Sep-2013.) $)
    dfrab3 $p |- { x e. A | ph } = ( A i^i { x | ph } ) $=
      ( crab cv wcel wa cab cin df-rab inab abid2 ineq1i 3eqtr2i ) ABCDBECFZAGB
      HOBHZABHZICQIABCJOABKPCQBCLMN $.

    $( Alternate definition of restricted class abstraction.  (Contributed by
       NM, 20-Sep-2003.)  (Proof shortened by BJ, 22-Apr-2019.) $)
    dfrab2 $p |- { x e. A | ph } = ( { x | ph } i^i A ) $=
      ( crab cab cin dfrab3 incom eqtri ) ABCDCABEZFJCFABCGCJHI $.

    $( Complementation of restricted class abstractions.  (Contributed by Mario
       Carneiro, 3-Sep-2015.) $)
    notrab $p |- ( A \ { x e. A | ph } ) = { x e. A | -. ph } $=
      ( cv wcel cab cdif wn crab difab cin difin dfrab3 difeq2i difeq1i 3eqtr4i
      wa abid2 df-rab ) BDCEZBFZABFZGZTAHZQBFCABCIZGZUDBCITABJCCUBKZGCUBGUFUCCU
      BLUEUGCABCMNUACUBBCROPUDBCSP $.

    $( Restricted class abstraction with a common superset.  (Contributed by
       Stefan O'Rear, 12-Sep-2015.)  (Proof shortened by Mario Carneiro,
       8-Nov-2015.) $)
    dfrab3ss $p |- ( A C_ B -> { x e. A | ph } = ( A i^i { x e. B | ph } ) ) $=
      ( wss cab crab wceq df-ss ineq1 eqcomd sylbi dfrab3 ineq2i eqtr4i 3eqtr4g
      cin inass ) CDEZCABFZQZCDQZTQZABCGCABDGZQZSUBCHZUAUCHCDIUFUCUAUBCTJKLABCM
      UECDTQZQUCUDUGCABDMNCDTROP $.
  $}

  $( Abstraction restricted to a union.  (Contributed by Stefan O'Rear,
     5-Feb-2015.) $)
  rabun2 $p |- { x e. ( A u. B ) | ph } =
      ( { x e. A | ph } u. { x e. B | ph } ) $=
    ( cun crab cv wcel wa cab df-rab uneq12i elun anbi1i andir bitri abbii unab
    wo eqtr4i ) ABCDEZFBGZUAHZAIZBJZABCFZABDFZEZABUAKUHUBCHZAIZBJZUBDHZAIZBJZEZ
    UEUFUKUGUNABCKABDKLUEUJUMSZBJUOUDUPBUDUIULSZAIUPUCUQAUBCDMNUIULAOPQUJUMBRTT
    T $.


$(
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
  Restricted uniqueness with difference, union, and intersection
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
$)

  ${
    $d x A $.  $d x B $.
    $( Transfer uniqueness to a smaller subclass.  (Contributed by NM,
       20-Oct-2005.) $)
    reuss2 $p |- ( ( ( A C_ B /\ A. x e. A ( ph -> ps ) ) /\
                 ( E. x e. A ph /\ E! x e. B ps ) ) -> E! x e. A ph ) $=
      ( wrex wreu wa wss wi wral wcel wex weu df-rex df-reu anbi12i wal sylan2b
      cv wmo df-ral ssel pm3.2 imim2d syl6 a2d imp4a alimdv imp euimmo simplbi2
      syl df-eu syl9 imp32 sylibr ) ACDFZBCEGZHDEIZABJZCDKZHZCTZDLZAHZCMZVDELZB
      HZCNZHZACDGZURVGUSVJACDOBCEPQVCVKHVFCNZVLVCVGVJVMVCVJVFCUAZVGVMVCVFVIJZCR
      ZVJVNJVBUTVEVAJZCRZVPVACDUBUTVRVPUTVQVOCUTVQVEAVIUTVEVAAVIJZUTVEVHVAVSJDE
      VDUCVHBVIAVHBUDUEUFUGUHUIUJSVFVICUKUMVMVGVNVFCUNULUOUPACDPUQS $.

    $( Transfer uniqueness to a smaller subclass.  (Contributed by NM,
       21-Aug-1999.) $)
    reuss $p |- ( ( A C_ B /\ E. x e. A ph /\ E! x e. B ph ) ->
                E! x e. A ph ) $=
      ( wss wrex wreu wi wral wa id rgenw reuss2 mpanl2 3impb ) CDEZABCFZABDGZA
      BCGZPAAHZBCIQRJSTBCAKLAABCDMNO $.

    $( Transfer uniqueness to a smaller class.  (Contributed by NM,
       21-Oct-2005.) $)
    reuun1 $p |- ( ( E. x e. A ph /\ E! x e. ( A u. B ) ( ph \/ ps ) )
                 -> E! x e. A ph ) $=
      ( cun wss wo wi wral wrex wreu wa ssun1 orc rgenw reuss2 mpanl12 ) DDEFZG
      AABHZIZCDJACDKTCSLMACDLDENUACDABOPATCDSQR $.

    $( Transfer uniqueness to a smaller or larger class.  (Contributed by NM,
       21-Oct-2005.) $)
    reuun2 $p |- ( -. E. x e. B ph ->
             ( E! x e. ( A u. B ) ph <-> E! x e. A ph ) ) $=
      ( wrex wn cv wcel wa wo weu cun wreu wex df-rex euor2 sylnbi df-reu bitri
      wb elun anbi1i andir orcom eubii 3bitr4g ) ABDEZFBGZDHZAIZUHCHZAIZJZBKZUL
      BKZABCDLZMZABCMUGUJBNUNUOTABDOUJULBPQUQUHUPHZAIZBKUNABUPRUSUMBUSUKUIJZAIZ
      UMURUTAUHCDUAUBVAULUJJUMUKUIAUCULUJUDSSUESABCRUF $.

    $( Restricted uniqueness "picks" a member of a subclass.  (Contributed by
       NM, 21-Aug-1999.) $)
    reupick $p |- ( ( ( A C_ B /\ ( E. x e. A ph /\ E! x e. B ph ) ) /\ ph ) ->
                  ( x e. A <-> x e. B ) ) $=
      ( wss wrex wreu wa cv wcel wi ssel ad2antrr wex weu df-rex df-reu anbi12i
      ancrd anim1d an32 syl6ib eximdv eupick ex com23 imp32 sylan2b expcomd imp
      syl9 impbid ) CDEZABCFZABDGZHZHZAHBIZCJZURDJZUMUSUTKUPACDURLZMUQAUTUSKUQU
      TAUSUPUMUSAHZBNZUTAHZBOZHVDUSKZUNVCUOVEABCPABDQRUMVCVEVFUMVEVCVFUMVCVDUSH
      ZBNZVEVFUMVBVGBUMVBUTUSHZAHVGUMUSVIAUMUSUTVASTUTUSAUAUBUCVEVHVFVDUSBUDUEU
      KUFUGUHUIUJUL $.

    $( Restricted uniqueness "picks" a member of a subclass.  (Contributed by
       Mario Carneiro, 19-Nov-2016.) $)
    reupick3 $p |- ( ( E! x e. A ph /\ E. x e. A ( ph /\ ps ) /\ x e. A ) ->
       ( ph -> ps ) ) $=
      ( wreu wa wrex cv wcel wi weu wex df-reu df-rex anass exbii bitr4i eupick
      syl2anb expd 3impia ) ACDEZABFZCDGZCHDIZABJUBUDFUEABUBUEAFZCKUFBFZCLZUFBJ
      UDACDMUDUEUCFZCLUHUCCDNUGUICUEABOPQUFBCRSTUA $.

    $( Restricted uniqueness "picks" a member of a subclass.  (Contributed by
       Mario Carneiro, 15-Dec-2013.)  (Proof shortened by Mario Carneiro,
       19-Nov-2016.) $)
    reupick2 $p |- ( ( ( A. x e. A ( ps -> ph ) /\ E. x e. A ps /\
                       E! x e. A ph ) /\ x e. A ) -> ( ph <-> ps ) ) $=
      ( wi wral wrex wreu w3a cv wcel ancr ralimi rexim syl reupick3 3exp com12
      wa syl6 3imp1 rsp 3ad2ant1 imp impbid ) BAEZCDFZBCDGZACDHZIZCJDKZSABUGUHU
      IUKABEZUGUHABSZCDGZUIUKULEZEUGBUMEZCDFUHUNEUFUPCDBALMBUMCDNOUIUNUOUIUNUKU
      LABCDPQRTUAUJUKUFUGUHUKUFEUIUFCDUBUCUDUE $.
  $}

  ${
    $d A x $.  $d B x $.
    $( Transfer uniqueness of an element to a smaller subclass.  (Contributed
       by AV, 14-Apr-2020.) $)
    euelss $p |- ( ( A C_ B /\ E. x x e. A /\ E! x x e. B ) -> E! x x e. A ) $=
      ( wss cv wcel wex weu w3a wtru wa wreu id ancom truan bitri sylbbr df-reu
      wrex eubii df-rex exbii reuss syl3an sylib bitr3i sylibr ) BCDZAEZBFZAGZU
      ICFZAHZIZUJJKZAHZUJAHUNJABLZUPUHUHUKJABSZUMJACLZUQUHMURUOAGUKJABUAUOUJAUO
      JUJKZUJUJJNUJOZPUBQUSULJKZAHUMJACRVBULAVBJULKULULJNULOPTQJABCUCUDJABRUEUJ
      UOAUJUTUOVAJUJNUFTUG $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  The empty set
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Declare the symbol for the empty set or null set. $)
  $c (/) $.  $( empty set $)

  $( Extend class notation to include the empty set. $)
  c0 $a class (/) $.

  $( Define the empty set.  More precisely, we should write "empty class".  It
     will be posited in ~ ax-nul that an empty set exists.  Then, by uniqueness
     among classes ( ~ eq0 , as opposed to the weaker uniqueness among sets,
     ~ nulmo ), it will follow that ` (/) ` is indeed a set ( ~ 0ex ).  Special
     case of Exercise 4.10(o) of [Mendelson] p. 231.  For a more traditional
     definition, but requiring a dummy variable, see ~ dfnul2 .  (Contributed
     by NM, 17-Jun-1993.)  Clarify that at this point, it is not established
     that it is a set.  (Revised by BJ, 22-Sep-2022.) $)
  df-nul $a |- (/) = ( _V \ _V ) $.

  $( Alternate definition of the empty set.  Definition 5.14 of [TakeutiZaring]
     p. 20.  (Contributed by NM, 26-Dec-1996.)  Remove dependency on ~ ax-10 ,
     ~ ax-11 , and ~ ax-12 .  (Revised by Steven Nguyen, 3-May-2023.) $)
  dfnul2 $p |- (/) = { x | -. x = x } $=
    ( c0 cvv cdif cv wcel wn wa cab weq df-nul df-dif pm3.24 equid 2false abbii
    notnoti 3eqtri ) BCCDAECFZSGHZAIAAJZGZAIKACCLTUBATUBSMUAANQOPR $.

  $( Obsolete version of ~ dfnul2 as of 3-May-2023.  Alternate definition of
     the empty set.  Definition 5.14 of [TakeutiZaring] p. 20.  (Contributed by
     NM, 26-Dec-1996.)  (New usage is discouraged.)
     (Proof modification is discouraged.) $)
  dfnul2OLD $p |- (/) = { x | -. x = x } $=
    ( cv wceq wn c0 wcel cvv cdif wa df-nul eleq2i eldif eqid pm3.24 2th 3bitri
    con2bii abbi2i ) ABZSCZDZAESEFSGGHZFSGFZUCDIZUAEUBSJKSGGLTUDTUDDSMUCNOQPR
    $.

  $( Alternate definition of the empty set.  (Contributed by NM,
     25-Mar-2004.) $)
  dfnul3 $p |- (/) = { x e. A | -. x e. A } $=
    ( weq wn cab cv wcel wa crab pm3.24 equid 2th con1bii dfnul2 df-rab 3eqtr4i
    c0 abbii ) AACZDZAEAFBGZUADZHZAEQUBABITUCAUCSUCDSUAJAKLMRANUBABOP $.

  ${
    $d A x $.
    $( The empty set has no elements.  Theorem 6.14 of [Quine] p. 44.
       (Contributed by NM, 21-Jun-1993.)  (Proof shortened by Mario Carneiro,
       1-Sep-2015.)  Remove dependency on ~ ax-10 , ~ ax-11 , and ~ ax-12 .
       (Revised by Steven Nguyen, 3-May-2023.) $)
    noel $p |- -. A e. (/) $=
      ( vx vy c0 wcel cv wceq wa wex cvv cab pm3.24 nex wsb df-clab spsbe sylbi
      wn mto mtbir cdif df-nul df-dif eqtri eleq2i intnan df-clel ) ADEBFZAGZUH
      DEZHZBIUKBUJUIUJUHCFJEZULRHZCKZEZUOUMCIZUMCULLMUOUMCBNUPUMBCOUMCBPQSDUNUH
      DJJUAUNUBCJJUCUDUETUFMBADUGT $.
  $}

  $( Obsolete version of ~ noel as of 3-May-2023.  The empty set has no
     elements.  Theorem 6.14 of [Quine] p. 44.  (Contributed by NM,
     21-Jun-1993.)  (Proof shortened by Mario Carneiro, 1-Sep-2015.)
     (New usage is discouraged.)  (Proof modification is discouraged.) $)
  noelOLD $p |- -. A e. (/) $=
    ( c0 wcel cvv cdif eldifi eldifn pm2.65i df-nul eleq2i mtbir ) ABCADDEZCZMA
    DCADDFADDGHBLAIJK $.

  $( If a class has elements, then it is not empty.  (Contributed by NM,
     31-Dec-1993.) $)
  n0i $p |- ( B e. A -> -. A = (/) ) $=
    ( c0 wceq wcel noel eleq2 mtbiri con2i ) ACDZBAEZJKBCEBFACBGHI $.

  $( If a class has elements, then it is nonempty.  (Contributed by NM,
     31-Dec-1993.) $)
  ne0i $p |- ( B e. A -> A =/= (/) ) $=
    ( wcel c0 n0i neqned ) BACADABEF $.

  ${
    ne0d.1 $e |- ( ph -> B e. A ) $.
    $( Deduction form of ~ ne0i .  If a class has elements, then it is
       nonempty.  (Contributed by Glauco Siliprandi, 23-Oct-2021.) $)
    ne0d $p |- ( ph -> A =/= (/) ) $=
      ( wcel c0 wne ne0i syl ) ACBEBFGDBCHI $.
  $}

  ${
    n0ii.1 $e |- A e. B $.
    $( If a class has elements, then it is not empty.  Inference associated
       with ~ n0i .  (Contributed by BJ, 15-Jul-2021.) $)
    n0ii $p |- -. B = (/) $=
      ( wcel c0 wceq wn n0i ax-mp ) ABDBEFGCBAHI $.

    $( If a class has elements, then it is nonempty.  Inference associated with
       ~ ne0i .  (Contributed by Glauco Siliprandi, 11-Dec-2019.) $)
    ne0ii $p |- B =/= (/) $=
      ( wcel c0 wne ne0i ax-mp ) ABDBEFCBAGH $.
  $}

  $( The universal class is not equal to the empty set.  (Contributed by NM,
     11-Sep-2008.) $)
  vn0 $p |- _V =/= (/) $=
    ( vx cv cvv vex ne0ii ) ABCADE $.

  ${
    eq0f.1 $e |- F/_ x A $.
    $( A class is equal to the empty set if and only if it has no elements.
       Theorem 2 of [Suppes] p. 22.  (Contributed by BJ, 15-Jul-2021.) $)
    eq0f $p |- ( A = (/) <-> A. x -. x e. A ) $=
      ( c0 wceq cv wcel wb wal wn nfcv cleqf noel nbn albii bitr4i ) BDEAFZBGZQ
      DGZHZAIRJZAIABDCADKLUATASRQMNOP $.

    $( A class is not empty if and only if it has at least one element.
       Proposition 5.17(1) of [TakeutiZaring] p. 20.  This version of ~ neq0
       requires only that ` x ` not be free in, rather than not occur in,
       ` A ` .  (Contributed by BJ, 15-Jul-2021.) $)
    neq0f $p |- ( -. A = (/) <-> E. x x e. A ) $=
      ( c0 wceq wn cv wcel wal wex eq0f notbii df-ex bitr4i ) BDEZFAGBHZFAIZFPA
      JOQABCKLPAMN $.

    $( A class is nonempty if and only if it has at least one element.
       Proposition 5.17(1) of [TakeutiZaring] p. 20.  This version of ~ n0
       requires only that ` x ` not be free in, rather than not occur in,
       ` A ` .  (Contributed by NM, 17-Oct-2003.) $)
    n0f $p |- ( A =/= (/) <-> E. x x e. A ) $=
      ( c0 wne wceq wn cv wcel wex df-ne neq0f bitri ) BDEBDFGAHBIAJBDKABCLM $.
  $}

  ${
    $d x A $.
    $( A class is equal to the empty set if and only if it has no elements.
       Theorem 2 of [Suppes] p. 22.  (Contributed by NM, 29-Aug-1993.) $)
    eq0 $p |- ( A = (/) <-> A. x -. x e. A ) $=
      ( nfcv eq0f ) ABABCD $.

    $( A class is not empty if and only if it has at least one element.
       Proposition 5.17(1) of [TakeutiZaring] p. 20.  (Contributed by NM,
       21-Jun-1993.) $)
    neq0 $p |- ( -. A = (/) <-> E. x x e. A ) $=
      ( nfcv neq0f ) ABABCD $.

    $( A class is nonempty if and only if it has at least one element.
       Proposition 5.17(1) of [TakeutiZaring] p. 20.  (Contributed by NM,
       29-Sep-2006.) $)
    n0 $p |- ( A =/= (/) <-> E. x x e. A ) $=
      ( nfcv n0f ) ABABCD $.
  $}

  ${
    $d x A $.
    nel0.1 $e |- -. x e. A $.
    $( From the general negation of membership in ` A ` , infer that ` A ` is
       the empty set.  (Contributed by BJ, 6-Oct-2018.) $)
    nel0 $p |- A = (/) $=
      ( c0 wceq cv wcel wn eq0 mpgbir ) BDEAFBGHAABICJ $.
  $}

  ${
    $d x A $.  $d x ph $.
    reximdva0.1 $e |- ( ( ph /\ x e. A ) -> ps ) $.
    $( Restricted existence deduced from nonempty class.  (Contributed by NM,
       1-Feb-2012.) $)
    reximdva0 $p |- ( ( ph /\ A =/= (/) ) -> E. x e. A ps ) $=
      ( c0 wne wa cv wcel wex wrex n0 ex ancld eximdv imp sylan2b df-rex sylibr
      ) ADFGZHCIDJZBHZCKZBCDLUAAUBCKZUDCDMAUEUDAUBUCCAUBBAUBBENOPQRBCDST $.
  $}

  ${
    $d A x $.  $d ph x $.
    $( Specialization for restricted generalization with a nonempty class.
       (Contributed by Alexander van der Vekens, 6-Sep-2018.) $)
    rspn0 $p |- ( A =/= (/) -> ( A. x e. A ph -> ph ) ) $=
      ( c0 wne cv wcel wex wral wi n0 nfra1 nfv nfim rsp com12 exlimi sylbi ) C
      DEBFCGZBHABCIZAJZBCKSUABTABABCLABMNTSAABCOPQR $.
  $}

  ${
    $d A x $.
    $( There is an element in a nonempty class which is an element of the
       class.  (Contributed by AV, 17-Dec-2020.) $)
    n0rex $p |- ( A =/= (/) -> E. x e. A x e. A ) $=
      ( cv wcel wex wa c0 wne wrex id ancli eximi n0 df-rex 3imtr4i ) ACBDZAEPP
      FZAEBGHPABIPQAPPPJKLABMPABNO $.

    $d B x $.
    $( There is an element in a class with a nonempty subclass which is an
       element of the subclass.  (Contributed by AV, 17-Dec-2020.) $)
    ssn0rex $p |- ( ( A C_ B /\ A =/= (/) ) -> E. x e. B x e. A ) $=
      ( wss cv wcel wrex c0 wne ssrexv n0rex impel ) BCDAEBFZABGMACGBHIMABCJABK
      L $.
  $}

  ${
    $d A x $.
    $( A case of equivalence of "at most one" and "only one".  (Contributed by
       FL, 6-Dec-2010.) $)
    n0moeu $p |- ( A =/= (/) -> ( E* x x e. A <-> E! x x e. A ) ) $=
      ( c0 wne cv wcel wmo wex wa weu n0 biimpi biantrurd df-eu syl6bbr ) BCDZA
      EBFZAGZQAHZRIQAJPSRPSABKLMQANO $.
  $}

  $( Vacuous restricted existential quantification is false.  (Contributed by
     NM, 15-Oct-2003.) $)
  rex0 $p |- -. E. x e. (/) ph $=
    ( c0 cv wcel wn noel pm2.21i nrex ) ABCBDZCEAFJGHI $.

  $( Vacuous restricted uniqueness is always false.  (Contributed by AV,
     3-Apr-2023.) $)
  reu0 $p |- -. E! x e. (/) ph $=
    ( c0 wreu wrex rex0 reurex mto ) ABCDABCEABFABCGH $.

  $( Vacuous restricted at-most-one quantifier is always true.  (Contributed by
     AV, 3-Apr-2023.) $)
  rmo0 $p |- E* x e. (/) ph $=
    ( c0 wrmo wrex wreu wi rex0 pm2.21i rmo5 mpbir ) ABCDABCEZABCFZGLMABHIABCJK
    $.

  ${
    $d x A $.  $d x y $.
    $( Membership of the empty set in another class.  (Contributed by NM,
       29-Jun-2004.) $)
    0el $p |- ( (/) e. A <-> E. x e. A A. y -. y e. x ) $=
      ( c0 wcel cv wceq wrex wn wal risset eq0 rexbii bitri ) DCEAFZDGZACHBFOEI
      BJZACHADCKPQACBOLMN $.
  $}

  ${
    $d x A $.  $d x u $.
    $( Negated membership of the empty set in another class.  (Contributed by
       Rodolfo Medina, 25-Sep-2010.) $)
    n0el $p |- ( -. (/) e. A <-> A. x e. A E. u u e. x ) $=
      ( cv wcel wn wal wral wi wex c0 df-ral df-ex ralbii alnex imnang wrex 0el
      wa 3bitr4ri df-rex bitri notbii ) BDADZEZFBGZFZACHUDCEZUGIAGZUEBJZACHKCEZ
      FZUGACLUJUGACUEBMNUHUFSZFAGUMAJZFUIULUMAOUHUFAPUKUNUKUFACQUNABCRUFACUAUBU
      CTT $.
  $}

  ${
    $d x y A $.
    $( A condition which implies the existence of a unique element of a class.
       (Contributed by AV, 4-Jan-2022.) $)
    eqeuel $p |- ( ( A =/= (/) /\ A. x A. y ( ( x e. A /\ y e. A ) -> x = y ) )
                   -> E! x x e. A ) $=
      ( c0 wne cv wcel wa weq wi wal wex weu n0 biimpi anim1i eleq1w eu4 sylibr
      ) CDEZAFCGZBFCGZHABIJBKAKZHUAALZUCHUAAMTUDUCTUDACNOPUAUBABABCQRS $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Subclass expressed in terms of difference.  Exercise 7 of
       [TakeutiZaring] p. 22.  (Contributed by NM, 29-Apr-1994.) $)
    ssdif0 $p |- ( A C_ B <-> ( A \ B ) = (/) ) $=
      ( vx cv wcel wi wal cdif wn wss c0 wceq wa eldif xchbinxr albii dfss2 eq0
      iman 3bitr4i ) CDZAEZUABEZFZCGUAABHZEZIZCGABJUEKLUDUGCUDUBUCIMUFUBUCSUAAB
      NOPCABQCUERT $.
  $}

  $( If the difference of two sets is not empty, then the sets are not equal.
     (Contributed by Thierry Arnoux, 28-Feb-2017.) $)
  difn0 $p |- ( ( A \ B ) =/= (/) -> A =/= B ) $=
    ( cdif c0 wceq wss eqimss ssdif0 sylib necon3i ) ABABCZDABEABFKDEABGABHIJ
    $.

  $( A proper subclass has a nonempty difference.  (Contributed by NM,
     3-May-1994.) $)
  pssdifn0 $p |- ( ( A C_ B /\ A =/= B ) -> ( B \ A ) =/= (/) ) $=
    ( wss wne cdif c0 wceq ssdif0 eqss simplbi2 syl5bir necon3d imp ) ABCZABDBA
    EZFDNOFABOFGBACZNABGZBAHQNPABIJKLM $.

  $( A proper subclass has a nonempty difference.  (Contributed by Mario
     Carneiro, 27-Apr-2016.) $)
  pssdif $p |- ( A C. B -> ( B \ A ) =/= (/) ) $=
    ( wpss wss wne wa cdif c0 df-pss pssdifn0 sylbi ) ABCABDABEFBAGHEABIABJK $.

  ${
    $d x A $.  $d x B $.
    $( Express that an intersection is not empty.  (Contributed by RP,
       16-Apr-2020.) $)
    ndisj $p |- ( ( A i^i B ) =/= (/) <-> E. x ( x e. A /\ x e. B ) ) $=
      ( cin c0 wne cv wcel wex wa n0 elin exbii bitri ) BCDZEFAGZOHZAIPBHPCHJZA
      IAOKQRAPBCLMN $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Difference, intersection, and subclass relationship.  (Contributed by
       NM, 30-Apr-1994.)  (Proof shortened by Wolf Lammen, 30-Sep-2014.) $)
    difin0ss $p |- ( ( ( A \ B ) i^i C ) = (/) -> ( C C_ A -> C C_ B ) ) $=
      ( vx cdif cin c0 wceq cv wcel wn wal wss wi eq0 wa iman elin eldif dfss2
      anbi2ci annim anbi2i 3bitri xchbinxr ax-2 sylbir al2imi 3imtr4g sylbi ) A
      BEZCFZGHDIZULJZKZDLZCAMZCBMZNDULOUPUMCJZUMAJZNZDLUSUMBJZNZDLUQURUOVAVCDUO
      USUTVBNZNZVAVCNVEUSVDKZPZUNUSVDQUNUMUKJZUSPUSUTVBKPZPVGUMUKCRVHVIUSUMABSU
      AVIVFUSUTVBUBUCUDUEUSUTVBUFUGUHDCATDCBTUIUJ $.

    $( Intersection, subclass, and difference relationship.  (Contributed by
       NM, 27-Oct-1996.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.)
       (Proof shortened by Wolf Lammen, 30-Sep-2014.) $)
    inssdif0 $p |- ( ( A i^i B ) C_ C <-> ( A i^i ( B \ C ) ) = (/) ) $=
      ( vx cv cin wcel wi wal cdif wn wss c0 wceq elin imbi1i iman bitri eldif
      wa anbi2i anass 3bitr4ri xchbinx albii dfss2 eq0 3bitr4i ) DEZABFZGZUICGZ
      HZDIUIABCJZFZGZKZDIUJCLUOMNUMUQDUMUIAGZUIBGZTZULKZTZUPUMUTULHVBKUKUTULUIA
      BOPUTULQRURUIUNGZTURUSVATZTUPVBVCVDURUIBCSUAUIAUNOURUSVAUBUCUDUEDUJCUFDUO
      UGUH $.
  $}

  $( The difference between a class and itself is the empty set.  Proposition
     5.15 of [TakeutiZaring] p. 20.  Also Theorem 32 of [Suppes] p. 28.
     (Contributed by NM, 22-Apr-2004.) $)
  difid $p |- ( A \ A ) = (/) $=
    ( wss cdif c0 wceq ssid ssdif0 mpbi ) AABAACDEAFAAGH $.

  ${
    $d x A $.
    $( Alternate proof of ~ difid .  (Contributed by David Abernethy,
       17-Jun-2012.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    difidALT $p |- ( A \ A ) = (/) $=
      ( vx cdif cv wcel wn crab c0 dfdif2 dfnul3 eqtr4i ) AACBDAEFBAGHBAAIBAJK
      $.
  $}

  $( The difference between a class and the empty set.  Part of Exercise 4.4 of
     [Stoll] p. 16.  (Contributed by NM, 17-Aug-2004.) $)
  dif0 $p |- ( A \ (/) ) = A $=
    ( cdif c0 difid difeq2i difdif eqtr3i ) AAABZBACBAHCAADEAAFG $.

  $( The class of sets verifying a property is the empty class if and only if
     that property is a contradiction.  See also ~ abn0 (from which it could be
     proved using as many essential proof steps but one fewer syntactic step,
     at the cost of depending on ~ df-ne ).  (Contributed by BJ,
     19-Mar-2021.) $)
  ab0 $p |- ( { x | ph } = (/) <-> A. x -. ph ) $=
    ( cab c0 wceq cv wcel wn wal nfab1 eq0f abid notbii albii bitri ) ABCZDEBFP
    GZHZBIAHZBIBPABJKRSBQAABLMNO $.

  $( Characterization of non-freeness in a formula in terms of its extension.
     (Contributed by BJ, 19-Mar-2021.) $)
  dfnf5 $p |- ( F/ x ph <-> ( { x | ph } = _V \/ { x | ph } = (/) ) ) $=
    ( wnf wal wn wo cab cvv wceq c0 nf3 abv ab0 orbi12i bitr4i ) ABCABDZAEBDZFA
    BGZHIZRJIZFABKSPTQABLABMNO $.

  ${
    $d x ph $.
    $( The class builder of a wff not containing the abstraction variable is
       either the empty set or the universal class.  (Contributed by Mario
       Carneiro, 29-Aug-2013.)  (Revised by BJ, 22-Mar-2020.) $)
    ab0orv $p |- ( { x | ph } = _V \/ { x | ph } = (/) ) $=
      ( wnf cab cvv wceq c0 wo nfv dfnf5 mpbi ) ABCABDZEFLGFHABIABJK $.
  $}

  $( Nonempty class abstraction.  See also ~ ab0 .  (Contributed by NM,
     26-Dec-1996.)  (Proof shortened by Mario Carneiro, 11-Nov-2016.) $)
  abn0 $p |- ( { x | ph } =/= (/) <-> E. x ph ) $=
    ( cab c0 wne cv wcel wex nfab1 n0f abid exbii bitri ) ABCZDEBFNGZBHABHBNABI
    JOABABKLM $.

  $( Any restricted class abstraction restricted to the empty set is empty.
     (Contributed by NM, 15-Oct-2003.)  (Proof shortened by Andrew Salmon,
     26-Jun-2011.)  (Proof shortened by JJ, 14-Jul-2021.) $)
  rab0 $p |- { x e. (/) | ph } = (/) $=
    ( c0 crab cv wcel wa cab df-rab wceq wn ab0 noel intnanr mpgbir eqtri ) ABC
    DBEZCFZAGZBHZCABCITCJSKBSBLRAQMNOP $.

  $( Condition for a restricted class abstraction to be empty.  (Contributed by
     Jeff Madsen, 7-Jun-2010.)  (Revised by BJ, 16-Jul-2021.) $)
  rabeq0 $p |- ( { x e. A | ph } = (/) <-> A. x e. A -. ph ) $=
    ( cv wcel wa cab c0 wceq wn wal crab wral ab0 df-rab eqeq1i raln 3bitr4i )
    BDCEAFZBGZHISJBKABCLZHIAJBCMSBNUATHABCOPABCQR $.

  $( Nonempty restricted class abstraction.  (Contributed by NM, 29-Aug-1999.)
     (Revised by BJ, 16-Jul-2021.) $)
  rabn0 $p |- ( { x e. A | ph } =/= (/) <-> E. x e. A ph ) $=
    ( crab c0 wne wn wral wrex rabeq0 necon3abii dfrex2 bitr4i ) ABCDZEFAGBCHZG
    ABCIONEABCJKABCLM $.

  ${
    $d A x $.
    $( Law of excluded middle, in terms of restricted class abstractions.
       (Contributed by Jeff Madsen, 20-Jun-2011.) $)
    rabxm $p |- A = ( { x e. A | ph } u. { x e. A | -. ph } ) $=
      ( wn wo crab cun wceq rabid2 cv wcel exmidd mprgbir unrab eqtr4i ) CAADZE
      ZBCFZABCFPBCFGCRHQBCQBCIBJCKALMAPBCNO $.

    $( Law of noncontradiction, in terms of restricted class abstractions.
       (Contributed by Jeff Madsen, 20-Jun-2011.) $)
    rabnc $p |- ( { x e. A | ph } i^i { x e. A | -. ph } ) = (/) $=
      ( crab wn cin wa c0 inrab wceq wral pm3.24 rgenw rabeq0 mpbir eqtri ) ABC
      DAEZBCDFAQGZBCDZHAQBCISHJREZBCKTBCALMRBCNOP $.
  $}

  ${
    $d A s $.
    elneldisj.e $e |- E = { s e. A | B e. C } $.
    elneldisj.n $e |- N = { s e. A | B e/ C } $.
    $( The set of elements ` s ` determining classes ` C ` (which may depend on
       ` s ` ) containing a special element and the set of elements ` s `
       determining classes ` C ` not containing the special element are
       disjoint.  (Contributed by Alexander van der Vekens, 11-Jan-2018.)
       (Revised by AV, 9-Nov-2020.)  (Revised by AV, 17-Dec-2021.) $)
    elneldisj $p |- ( E i^i N ) = (/) $=
      ( cin wcel crab wn c0 wnel df-nel rabbii eqtri ineq12i rabnc ) DEIBCJZFAK
      ZTLZFAKZIMDUAEUCGEBCNZFAKUCHUDUBFABCOPQRTFASQ $.

    $( The union of the set of elements ` s ` determining classes ` C ` (which
       may depend on ` s ` ) containing a special element and the set of
       elements ` s ` determining classes ` C ` not containing the special
       element yields the original set.  (Contributed by Alexander van der
       Vekens, 11-Jan-2018.)  (Revised by AV, 9-Nov-2020.)  (Revised by AV,
       17-Dec-2021.) $)
    elnelun $p |- ( E u. N ) = A $=
      ( cun wcel crab wn wnel df-nel rabbii eqtri uneq12i rabxm eqtr4i ) DEIBCJ
      ZFAKZTLZFAKZIADUAEUCGEBCMZFAKUCHUDUBFABCNOPQTFARS $.
  $}

  ${
    $d x A $.
    $( The union of a class with the empty set is itself.  Theorem 24 of
       [Suppes] p. 27.  (Contributed by NM, 15-Jul-1993.) $)
    un0 $p |- ( A u. (/) ) = A $=
      ( vx c0 cv wcel wo noel biorfi bicomi uneqri ) BACABDZAEZLKCEZFMLKGHIJ $.

    $( The intersection of a class with the empty set is the empty set.
       Theorem 16 of [Suppes] p. 26.  (Contributed by NM, 21-Jun-1993.) $)
    in0 $p |- ( A i^i (/) ) = (/) $=
      ( vx c0 cv wcel wa noel bianfi bicomi ineqri ) BACCBDZCEZKAEZLFLMKGHIJ $.
  $}

  $( The intersection of the empty set with a class is the empty set.
     (Contributed by Glauco Siliprandi, 17-Aug-2020.) $)
  0in $p |- ( (/) i^i A ) = (/) $=
    ( c0 cin incom in0 eqtri ) BACABCBBADAEF $.

  $( The intersection of a class with the universal class is itself.  Exercise
     4.10(k) of [Mendelson] p. 231.  (Contributed by NM, 17-May-1998.) $)
  inv1 $p |- ( A i^i _V ) = A $=
    ( cvv cin inss1 ssid ssv ssini eqssi ) ABCAABDAABAEAFGH $.

  $( The union of a class with the universal class is the universal class.
     Exercise 4.10(l) of [Mendelson] p. 231.  (Contributed by NM,
     17-May-1998.) $)
  unv $p |- ( A u. _V ) = _V $=
    ( cvv cun ssv ssun2 eqssi ) ABCZBGDBAEF $.

  ${
    $d A x $.
    $( The null set is a subset of any class.  Part of Exercise 1 of
       [TakeutiZaring] p. 22.  (Contributed by NM, 21-Jun-1993.) $)
    0ss $p |- (/) C_ A $=
      ( vx c0 cv wcel noel pm2.21i ssriv ) BCABDZCEIAEIFGH $.
  $}

  $( Any subset of the empty set is empty.  Theorem 5 of [Suppes] p. 23 and its
     converse.  (Contributed by NM, 17-Sep-2003.) $)
  ss0b $p |- ( A C_ (/) <-> A = (/) ) $=
    ( c0 wceq wss 0ss eqss mpbiran2 bicomi ) ABCZABDZIJBADAEABFGH $.

  $( Any subset of the empty set is empty.  Theorem 5 of [Suppes] p. 23.
     (Contributed by NM, 13-Aug-1994.) $)
  ss0 $p |- ( A C_ (/) -> A = (/) ) $=
    ( c0 wss wceq ss0b biimpi ) ABCABDAEF $.

  $( A subclass of an empty class is empty.  (Contributed by NM, 7-Mar-2007.)
     (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
  sseq0 $p |- ( ( A C_ B /\ B = (/) ) -> A = (/) ) $=
    ( c0 wceq wss sseq2 ss0 syl6bi impcom ) BCDZABEZACDZJKACELBCAFAGHI $.

  $( A class with a nonempty subclass is nonempty.  (Contributed by NM,
     17-Feb-2007.) $)
  ssn0 $p |- ( ( A C_ B /\ A =/= (/) ) -> B =/= (/) ) $=
    ( wss c0 wne wceq sseq0 ex necon3d imp ) ABCZADEBDEKBDADKBDFADFABGHIJ $.

  $( The difference between the empty set and a class.  Part of Exercise 4.4 of
     [Stoll] p. 16.  (Contributed by NM, 17-Aug-2004.) $)
  0dif $p |- ( (/) \ A ) = (/) $=
    ( c0 cdif wss wceq difss ss0 ax-mp ) BACZBDIBEBAFIGH $.

  ${
    abf.1 $e |- -. ph $.
    $( A class builder with a false argument is empty.  (Contributed by NM,
       20-Jan-2012.) $)
    abf $p |- { x | ph } = (/) $=
      ( cab c0 wceq wn ab0 mpgbir ) ABDEFAGBABHCI $.
  $}

  ${
    $d x A $.  $d x ph $.
    eq0rdv.1 $e |- ( ph -> -. x e. A ) $.
    $( Deduction for equality to the empty set.  (Contributed by NM,
       11-Jul-2014.) $)
    eq0rdv $p |- ( ph -> A = (/) ) $=
      ( c0 wss wceq cv wcel pm2.21d ssrdv ss0 syl ) ACEFCEGABCEABHZCINEIDJKCLM
      $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.
    $( The proper substitution of a proper class for a set into a class results
       in the empty set.  (Contributed by NM, 17-Aug-2018.)  (Proof shortened
       by JJ, 27-Aug-2021.) $)
    csbprc $p |- ( -. A e. _V -> [_ A / x ]_ B = (/) ) $=
      ( vy cvv wcel wn cv wsbc cab wfal csb c0 sbcex pm5.21ni abbidv df-csb fal
      falim abf eqcomi 3eqtr4g ) BEFZGZDHCFZABIZDJKDJZABCLMUDUFKDUFUCKUEABNUCSO
      PADBCQUGMKDRTUAUB $.
  $}

  $( The proper substitution of a class into the empty set is the empty set.
     (Contributed by NM, 18-Aug-2018.) $)
  csb0 $p |- [_ A / x ]_ (/) = (/) $=
    ( cvv wcel c0 csb wceq csbconstg csbprc pm2.61i ) BCDABEFEGABECHABEIJ $.

  ${
    $d x y z $.  $d y z A $.  $d y z B $.  $d y z C $.
    $( Distribute proper substitution through a membership relation.
       (Contributed by NM, 10-Nov-2005.)  (Revised by NM, 18-Aug-2018.) $)
    sbcel12 $p |- ( [. A / x ]. B e. C <-> [_ A / x ]_ B e. [_ A / x ]_ C ) $=
      ( vy vz cvv wcel wsbc csb cv cab dfsbcq2 abbidv eleq12d nfs1v nfab df-csb
      wsb sbab wb wceq nfel sbie vtoclbg eleq12i syl6bbr wn sbcex con3i c0 noel
      weq csbprc eleq2d mtbiri 2falsed pm2.61i ) BGHZCDHZABIZABCJZABDJZHZUAUSVA
      EKZCHZABIZELZVEDHZABIZELZHZVDUTAFSVFAFSZELZVIAFSZELZHZVAVLFBGUTAFBMFKBUBZ
      VNVHVPVKVRVMVGEVFAFBMNVRVOVJEVIAFBMNOUTVQAFAVNVPVMAEVFAFPQVOAEVIAFPQUCAFU
      MCVNDVPAFECTAFEDTOUDUEVBVHVCVKAEBCRAEBDRUFUGUSUHZVAVDVAUSUTABUIUJVSVDVBUK
      HVBULVSVCUKVBABDUNUOUPUQUR $.

    $( Distribute proper substitution through an equality relation.
       (Contributed by NM, 10-Nov-2005.)  (Proof shortened by Andrew Salmon,
       29-Jun-2011.) $)
    sbceqg $p |- ( A e. V -> ( [. A / x ]. B = C <->
                   [_ A / x ]_ B = [_ A / x ]_ C ) ) $=
      ( vy vz wcel wceq wsbc cab csb wsb dfsbcq2 abbidv eqeq12d nfs1v nfab sbab
      cv nfeq weq sbie vtoclbg df-csb eqeq12i syl6bbr ) BEHCDIZABJZFTZCHZABJZFK
      ZUJDHZABJZFKZIZABCLZABDLZIUHAGMUKAGMZFKZUNAGMZFKZIZUIUQGBEUHAGBNGTBIZVAUM
      VCUPVEUTULFUKAGBNOVEVBUOFUNAGBNOPUHVDAGAVAVCUTAFUKAGQRVBAFUNAGQRUAAGUBCVA
      DVCAGFCSAGFDSPUCUDURUMUSUPAFBCUEAFBDUEUFUG $.
  $}

  ${
    sbceqi.1 $e |- A e. _V $.
    sbceqi.2 $e |- [_ A / x ]_ B = D $.
    sbceqi.3 $e |- [_ A / x ]_ C = E $.
    $( Distribution of class substitution over equality, in inference form.
       (Contributed by Giovanni Mascellani, 27-May-2019.) $)
    sbceqi $p |- ( [. A / x ]. B = C <-> D = E ) $=
      ( wceq wsbc csb cvv wcel wb sbceqg ax-mp eqeq12i bitri ) CDJABKZABCLZABDL
      ZJZEFJBMNTUCOGABCDMPQUAEUBFHIRS $.
  $}

  $( Distribute proper substitution through negated membership.  (Contributed
     by Andrew Salmon, 18-Jun-2011.) $)
  sbcnel12g $p |- ( A e. V
        -> ( [. A / x ]. B e/ C <-> [_ A / x ]_ B e/ [_ A / x ]_ C ) ) $=
    ( wcel wn wsbc wnel csb sbcng df-nel sbcbii sbcel12 xchbinxr 3bitr4g ) BEFC
    DFZGZABHQABHZGCDIZABHABCJZABDJZIZQABEKTRABCDLMUCUAUBFSUAUBLABCDNOP $.

  $( Distribute proper substitution through an inequality.  (Contributed by
     Andrew Salmon, 18-Jun-2011.)  (Revised by NM, 18-Aug-2018.) $)
  sbcne12 $p |- ( [. A / x ]. B =/= C <-> [_ A / x ]_ B =/= [_ A / x ]_ C ) $=
    ( cvv wcel wne wsbc csb wb wceq nne sbcbii a1i sbcng sbceqg syl6bbr 3bitr3d
    wn csbprc con4bid sbcex con3i c0 eqtr4d sylibr 2falsed pm2.61i ) BEFZCDGZAB
    HZABCIZABDIZGZJUIUKUNUIUJSZABHZCDKZABHZUKSUNSZUPURJUIUOUQABCDLMNUJABEOUIURU
    LUMKZUSABCDEPULUMLZQRUAUISZUKUNUKUIUJABUBUCVBUTUSVBULUDUMABCTABDTUEVAUFUGUH
    $.

  ${
    $d x C $.
    $( Move proper substitution in and out of a membership relation.  Note that
       the scope of ` [. A / x ]. ` is the wff ` B e. C ` , whereas the scope
       of ` [_ A / x ]_ ` is the class ` B ` .  (Contributed by NM,
       10-Nov-2005.) $)
    sbcel1g $p |- ( A e. V -> ( [. A / x ]. B e. C <->
                    [_ A / x ]_ B e. C ) ) $=
      ( wcel wsbc csb sbcel12 csbconstg eleq2d syl5bb ) CDFABGABCHZABDHZFBEFZMD
      FABCDIONDMABDEJKL $.

    $( Move proper substitution to first argument of an equality.  (Contributed
       by NM, 30-Nov-2005.) $)
    sbceq1g $p |- ( A e. V -> ( [. A / x ]. B = C <->
                    [_ A / x ]_ B = C ) ) $=
      ( wcel wceq wsbc csb sbceqg csbconstg eqeq2d bitrd ) BEFZCDGABHABCIZABDIZ
      GODGABCDEJNPDOABDEKLM $.
  $}

  ${
    $d x B $.
    $( Move proper substitution in and out of a membership relation.
       (Contributed by NM, 14-Nov-2005.)  (Revised by NM, 18-Aug-2018.) $)
    sbcel2 $p |- ( [. A / x ]. B e. C <-> B e. [_ A / x ]_ C ) $=
      ( cvv wcel wsbc wb sbcel12 csbconstg eleq1d syl5bb wn sbcex con3i c0 noel
      csb csbprc eleq2d mtbiri 2falsed pm2.61i ) BEFZCDFZABGZCABDRZFZHUFABCRZUG
      FUDUHABCDIUDUICUGABCEJKLUDMZUFUHUFUDUEABNOUJUHCPFCQUJUGPCABDSTUAUBUC $.

    $( Move proper substitution to second argument of an equality.
       (Contributed by NM, 30-Nov-2005.) $)
    sbceq2g $p |- ( A e. V -> ( [. A / x ]. B = C <->
                    B = [_ A / x ]_ C ) ) $=
      ( wcel wceq wsbc csb sbceqg csbconstg eqeq1d bitrd ) BEFZCDGABHABCIZABDIZ
      GCPGABCDEJNOCPABCEKLM $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.  $d y C $.  $d y ph $.
    csbeq2d.1 $e |- F/ x ph $.
    csbeq2d.2 $e |- ( ph -> B = C ) $.
    $( Formula-building deduction for class substitution.  (Contributed by NM,
       22-Nov-2005.)  (Revised by Mario Carneiro, 1-Sep-2015.) $)
    csbeq2d $p |- ( ph -> [_ A / x ]_ B = [_ A / x ]_ C ) $=
      ( vy cv wcel wsbc cab csb eleq2d sbcbid abbidv df-csb 3eqtr4g ) AHIZDJZBC
      KZHLSEJZBCKZHLBCDMBCEMAUAUCHATUBBCFADESGNOPBHCDQBHCEQR $.
  $}

  ${
    $d x ph $.
    csbeq2dv.1 $e |- ( ph -> B = C ) $.
    $( Formula-building deduction for class substitution.  (Contributed by NM,
       10-Nov-2005.)  (Revised by Mario Carneiro, 1-Sep-2015.) $)
    csbeq2dv $p |- ( ph -> [_ A / x ]_ B = [_ A / x ]_ C ) $=
      ( nfv csbeq2d ) ABCDEABGFH $.
  $}

  ${
    csbeq2i.1 $e |- B = C $.
    $( Formula-building inference for class substitution.  (Contributed by NM,
       10-Nov-2005.)  (Revised by Mario Carneiro, 1-Sep-2015.) $)
    csbeq2i $p |- [_ A / x ]_ B = [_ A / x ]_ C $=
      ( csb wceq wtru a1i csbeq2dv mptru ) ABCFABDFGHABCDCDGHEIJK $.
  $}

  ${
    $d y z A $.  $d x z B $.  $d z C $.  $d x y $.
    $( Commutative law for double substitution into a class.  (Contributed by
       NM, 14-Nov-2005.)  (Revised by NM, 18-Aug-2018.) $)
    csbcom $p |- [_ A / x ]_ [_ B / y ]_ C = [_ B / y ]_ [_ A / x ]_ C $=
      ( vz csb cv wcel wsbc sbccom sbcel2 sbcbii 3bitr3i eqriv ) FACBDEGZGZBDAC
      EGZGZFHZPIZACJZTRIZBDJZTQITSITEIZBDJZACJUEACJZBDJUBUDUEABCDKUFUAACBDTELMU
      GUCBDACTELMNACTPLBDTRLNO $.
  $}

  ${
    $d x z $.  $d y z $.  $d z A $.  $d z B $.  $d z C $.  $d z ph $.
    $( Nest the composition of two substitutions.  (Contributed by Mario
       Carneiro, 11-Nov-2016.) $)
    sbcnestgf $p |- ( ( A e. V /\ A. y F/ x ph ) ->
         ( [. A / x ]. [. B / y ]. ph <-> [. [_ A / x ]_ B / y ]. ph ) ) $=
      ( vz wcel wnf wal wsbc csb wb cv wi wceq dfsbcq sbceq1d cvv a1i vex nfnf1
      csbeq1 bibi12d imbi2d csbeq1a adantl nfal nfa1 wnfc nfcsb1v nfsbcd vtoclg
      sp sbciedf imp ) DFHABIZCJZACEKZBDKZACBDELZKZMZURUSBGNZKZACBVDELZKZMZOURV
      COGDFVDDPZVHVCURVIVEUTVGVBUSBVDDQVIACVFVABVDDEUCRUDUEURUSVGBVDSVDSHURGUAT
      BNVDPZUSVGMURVJACEVFBVDEUFRUGUQBCABUBUHURABCVFUQCUIBVFUJURBVDEUKTUQCUNULU
      OUMUP $.

    $( Nest the composition of two substitutions.  (Contributed by NM,
       23-Nov-2005.)  (Proof shortened by Mario Carneiro, 10-Nov-2016.) $)
    csbnestgf $p |- ( ( A e. V /\ A. y F/_ x C ) ->
         [_ A / x ]_ [_ B / y ]_ C = [_ [_ A / x ]_ B / y ]_ C ) $=
      ( vz wcel wnfc wal wa cv csb wsbc cab cvv wceq elex df-csb abeq2i wb nfcr
      sbcbii wnf alimi sbcnestgf sylan2 syl5bb abbidv sylan 3eqtr4g ) CFHZAEIZB
      JZKGLZBDEMZHZACNZGOZUOEHZBACDMZNZGOZACUPMBVAEMULCPHZUNUSVCQCFRVDUNKZURVBG
      URUTBDNZACNZVEVBUQVFACVFGUPBGDESTUCUNVDUTAUDZBJVGVBUAUMVHBAGEUBUEUTABCDPU
      FUGUHUIUJAGCUPSBGVAESUK $.

    $d x ph $.
    $( Nest the composition of two substitutions.  (Contributed by NM,
       27-Nov-2005.)  (Proof shortened by Mario Carneiro, 11-Nov-2016.) $)
    sbcnestg $p |- ( A e. V ->
          ( [. A / x ]. [. B / y ]. ph <-> [. [_ A / x ]_ B / y ]. ph ) ) $=
      ( wcel wnf wal wsbc csb wb nfv ax-gen sbcnestgf mpan2 ) DFGABHZCIACEJBDJA
      CBDEKJLQCABMNABCDEFOP $.

    $d x C $.
    $( Nest the composition of two substitutions.  (Contributed by NM,
       23-Nov-2005.)  (Proof shortened by Mario Carneiro, 10-Nov-2016.) $)
    csbnestg $p |- ( A e. V ->
          [_ A / x ]_ [_ B / y ]_ C = [_ [_ A / x ]_ B / y ]_ C ) $=
      ( wcel wnfc wal csb wceq nfcv ax-gen csbnestgf mpan2 ) CFGAEHZBIACBDEJJBA
      CDJEJKPBAELMABCDEFNO $.
  $}

  ${
    $d x A $.  $d x ph $.  $d x C $.  $d x D $.
    sbcco3g.1 $e |- ( x = A -> B = C ) $.
    $( Composition of two substitutions.  (Contributed by NM, 27-Nov-2005.)
       (Revised by Mario Carneiro, 11-Nov-2016.) $)
    sbcco3g $p |- ( A e. V ->
         ( [. A / x ]. [. B / y ]. ph <-> [. C / y ]. ph ) ) $=
      ( wcel wsbc csb sbcnestg cvv wceq wb elex nfcvd csbiegf dfsbcq 3syl bitrd
      ) DGIZACEJBDJACBDEKZJZACFJZABCDEGLUBDMIZUCFNUDUEODGPBDEFMUFBFQHRACUCFSTUA
      $.

    $( Composition of two class substitutions.  (Contributed by NM,
       27-Nov-2005.)  (Revised by Mario Carneiro, 11-Nov-2016.) $)
    csbco3g $p |- ( A e. V ->
                 [_ A / x ]_ [_ B / y ]_ D = [_ C / y ]_ D ) $=
      ( wcel csb csbnestg cvv wceq elex nfcvd csbiegf syl csbeq1d eqtrd ) CGIZA
      CBDFJJBACDJZFJBEFJABCDFGKTBUAEFTCLIZUAEMCGNACDELUBAEOHPQRS $.
  $}

  ${
    $d x y $.  $d y C $.
    $( Nest the composition of two substitutions.  (Contributed by NM,
       23-May-2006.)  (Proof shortened by Mario Carneiro, 11-Nov-2016.) $)
    csbnest1g $p |- ( A e. V ->
         [_ A / x ]_ [_ B / x ]_ C = [_ [_ A / x ]_ B / x ]_ C ) $=
      ( vy wcel cv csb wnfc wceq nfcsb1v ax-gen csbnestgf mpan2 csbeq2i 3eqtr3g
      wal csbco ) BEGZABFCAFHZDIZIZIZFABCIZUBIZABACDIZIAUEDITAUBJZFRUDUFKUHFAUA
      DLMAFBCUBENOABUCUGAFCDSPAFUEDSQ $.
  $}

  ${
    $d x A $.
    $( Idempotent law for class substitutions.  (Contributed by NM,
       1-Mar-2008.)  (Revised by NM, 18-Aug-2018.) $)
    csbidm $p |- [_ A / x ]_ [_ A / x ]_ B = [_ A / x ]_ B $=
      ( cvv wcel csb wceq csbnest1g csbconstg csbeq1d eqtrd wn c0 csbprc eqtr4d
      pm2.61i ) BDEZABABCFZFZRGQSAABBFZCFRABBCDHQATBCABBDIJKQLSMRABRNABCNOP $.
  $}

  ${
    $d y z A $.  $d x y z $.
    $( The proper substitution of a class for setvar variable results in the
       class (if the class exists).  (Contributed by NM, 10-Nov-2005.) $)
    csbvarg $p |- ( A e. V -> [_ A / x ]_ x = A ) $=
      ( vz vy wcel cvv cv csb wceq elex wsbc cab df-csb sbcel2gv abbi1dv syl5eq
      elv csbeq2i csbco 3eqtr3i syl ) BCFBGFZABAHZIZBJBCKUCUEDHZEHZFEBLZDMZBEBA
      UGUDIZIEBUGIUEUIEBUJUGUJUGJEUGGFZUJUFUDFAUGLZDMUGADUGUDNUKULDUGAUFUGGOPQR
      SAEBUDTEDBUGNUAUCUHDBEUFBGOPQUB $.
  $}

  ${
    csbvargi.1 $e |- A e. _V $.
    $( The proper substitution of a class for a setvar variable results in the
       class (if the class exists), in inference form of ~ csbvarg .
       (Contributed by Giovanni Mascellani, 30-May-2019.) $)
    csbvargi $p |- [_ A / x ]_ x = A $=
      ( cvv wcel cv csb wceq csbvarg ax-mp ) BDEABAFGBHCABDIJ $.
  $}

  ${
    $d x y $.
    $( Substitution into a wff expressed in terms of substitution into a class.
       (Contributed by NM, 15-Aug-2007.)  (Revised by NM, 18-Aug-2018.) $)
    sbccsb $p |- ( [. A / x ]. ph <-> y e. [_ A / x ]_ { y | ph } ) $=
      ( wsbc cv cab wcel csb abid sbcbii sbcel2 bitr3i ) ABDECFZACGZHZBDENBDOIH
      PABDACJKBDNOLM $.
  $}

  $( Substitution into a wff expressed in using substitution into a class.
     (Contributed by NM, 27-Nov-2005.)  (Revised by NM, 18-Aug-2018.) $)
  sbccsb2 $p |- ( [. A / x ]. ph <-> A e. [_ A / x ]_ { x | ph } ) $=
    ( wsbc cvv wcel cab sbcex elex cv abid sbcbii sbcel12 csbvarg eleq1d syl5bb
    csb syl5bbr pm5.21nii ) ABCDZCEFZCBCABGZQZFZABCHCUCITBJZUBFZBCDZUAUDUFABCAB
    KLUGBCUEQZUCFUAUDBCUEUBMUAUHCUCBCENOPRS $.

  ${
    $d x B $.  $d x D $.
    $( Special case related to ~ rspsbc .  (Contributed by NM, 10-Dec-2005.)
       (Proof shortened by Eric Schmidt, 17-Jan-2007.) $)
    rspcsbela $p |- ( ( A e. B /\ A. x e. B C e. D ) -> [_ A / x ]_ C e. D ) $=
      ( wcel wral csb wsbc rspsbc sbcel1g sylibd imp ) BCFZDEFZACGZABDHEFZNPOAB
      IQOABCJABDECKLM $.
  $}

  ${
    $d w x y z $.  $d w y z A $.
    $( Two ways of expressing " ` x ` is (effectively) not free in ` A ` ".
       (Contributed by Mario Carneiro, 14-Oct-2016.) $)
    sbnfc2 $p |- ( F/_ x A <-> A. y A. z [_ y / x ]_ A = [_ z / x ]_ A ) $=
      ( vw wnfc cv csb wceq wal cvv wcel vex csbtt mpan wsbc sbsbc sbcel2 bitri
      wsb eqtr4d alrimivv nfv wnf eleq2 3bitr4g 2alimi sbnf2 sylibr nfcd impbii
      wb ) ADFZABGZDHZACGZDHZIZCJBJZUMURBCUMUODUQUNKLUMUODIBMAUNDKNOUPKLUMUQDIC
      MAUPDKNOUAUBUSAEDUSEUCUSEGZDLZABTZVAACTZULZCJBJVAAUDURVDBCURUTUOLZUTUQLZV
      BVCUOUQUTUEVBVAAUNPVEVAABQAUNUTDRSVCVAAUPPVFVAACQAUPUTDRSUFUGVAABCUHUIUJU
      K $.
  $}

  ${
    $d y z A $.  $d z ph $.  $d x y z $.
    $( Move substitution into a class abstraction.  (Contributed by NM,
       13-Dec-2005.)  (Revised by NM, 19-Aug-2018.) $)
    csbab $p |- [_ A / x ]_ { y | ph } = { y | [. A / x ]. ph } $=
      ( vz cab csb wsbc cv wcel df-clab sbsbc bitri sbccom sbcbii bitr4i sbcel2
      wsb 3bitrri eqriv ) EBDACFZGZABDHZCFZEIZUDJZUCCUEHZUEUAJZBDHZUEUBJUFUCCER
      UGUCECKUCCELMUGACUEHZBDHUIACBUEDNUHUJBDUHACERUJAECKACELMOPBDUEUAQST $.
  $}

  ${
    $d A y $.  $d B y $.  $d C y $.  $d x y $.
    $( Distribution of class substitution over union of two classes.
       (Contributed by Drahflow, 23-Sep-2015.)  (Revised by Mario Carneiro,
       11-Dec-2016.)  (Revised by NM, 13-Sep-2018.) $)
    csbun $p |- [_ A / x ]_ ( B u. C ) = ( [_ A / x ]_ B u. [_ A / x ]_ C ) $=
      ( vy cvv wcel cun csb wceq cv csbeq1 uneq12d eqeq12d nfcsb1v nfun csbeq1a
      vex c0 csbprc weq csbief vtoclg wn un0 a1i 3eqtr4rd pm2.61i ) BFGZABCDHZI
      ZABCIZABDIZHZJZAEKZUJIZAUPCIZAUPDIZHZJUOEBFUPBJZUQUKUTUNAUPBUJLVAURULUSUM
      AUPBCLAUPBDLMNAUPUJUTERAURUSAUPCOAUPDOPAEUACURDUSAUPCQAUPDQMUBUCUIUDZSSHZ
      SUNUKVCSJVBSUEUFVBULSUMSABCTABDTMABUJTUGUH $.
  $}

  ${
    $d A y $.  $d B y $.  $d C y $.  $d x y $.
    $( Distribute proper substitution into a class through an intersection
       relation.  (Contributed by Alan Sare, 22-Jul-2012.)  (Revised by NM,
       18-Aug-2018.) $)
    csbin $p |- [_ A / x ]_ ( B i^i C )
                 = ( [_ A / x ]_ B i^i [_ A / x ]_ C ) $=
      ( vy cvv wcel cin csb wceq cv csbeq1 ineq12d eqeq12d nfcsb1v nfin csbeq1a
      vex c0 csbprc weq csbief vtoclg wn in0 syl6req eqtrd pm2.61i ) BFGZABCDHZ
      IZABCIZABDIZHZJZAEKZUJIZAUPCIZAUPDIZHZJUOEBFUPBJZUQUKUTUNAUPBUJLVAURULUSU
      MAUPBCLAUPBDLMNAUPUJUTERAURUSAUPCOAUPDOPAEUACURDUSAUPCQAUPDQMUBUCUIUDZUKS
      UNABUJTVBUNSSHSVBULSUMSABCTABDTMSUEUFUGUH $.
  $}

  ${
    $d A x y $.  $d B x y $.  $d X x y $.  $d ph y $.  $d ch x y $.
    $d ps x y $.
    2nreu.a $e |- ( x = A -> ( ph <-> ps ) ) $.
    2nreu.b $e |- ( x = B -> ( ph <-> ch ) ) $.
    $( If there are two different sets fulfilling a wff (by implicit
       substitution), then there is no unique set fulfilling the wff.
       (Contributed by AV, 20-Jun-2023.) $)
    2nreu $p |- ( ( A e. X /\ B e. X /\ A =/= B )
                  -> ( ( ps /\ ch ) -> -. E! x e. X ph ) ) $=
      ( vy wne wa wn wrex wsbc wb sbcan anbi12d syl5bb csb wcel w3a wreu wsb cv
      wi wo simpl1 simpl2 simprl sbcieg 3ad2ant2 biimprd adantld imp jca simpl3
      wceq simp1 simp2 simp3 sbcne12 csbvarg csbconstg neeq12d 3ad2ant1 sbcbidv
      nfs1v sbcgf sbcg sbsbc sbcbii sbcco mpbird rspesbca syl2anc sbcrex sylibr
      a1i bitrd syl112anc pm4.61 df-ne bicomi anbi2i bitri 2rexbii olcd rexnal2
      wral ianor orbi2i reu2 xchnxbir ex ) EGUAZFGUAZEFKZUBZBCLZADGUCZMZWSWTLZA
      DGNZMZAADJUDZLZDUEZJUEZURZUFZMZJGNDGNZUGZXBXCXMXEXCXGXHXIKZLZJGNZDGNZXMXC
      WPWQBADFOZLZWRXRWPWQWRWTUHWPWQWRWTUIXCBXSWSBCUJWSWTXSWSCXSBWSXSCWQWPXSCPW
      RACDFGIUKULUMUNUOUPWPWQWRWTUQWPWQXTWRLZUBZWPXQDEOZXRWPWQYAUSYBXPDEOZJGNZY
      CYBWQYDJFOZYEWPWQYAUTYBYFYAWPWQYAVAYBYFBXFLZEXIKZLZJFOZYAYBYDYIJFWPWQYDYI
      PYAYDXGDEOZXODEOZLWPYIXGXODEQWPYKYGYLYHYKADEOZXFDEOZLWPYGAXFDEQWPYMBYNXFA
      BDEGHUKXFDEGADJVHVIRSYLDEXHTZDEXITZKWPYHDEXHXIVBWPYOEYPXIDEGVCDEXIGVDVESR
      SVFVGYJYGJFOZYHJFOZLYBYAYGYHJFQYBYQXTYRWRYQBJFOZXFJFOZLZYBXTBXFJFQWQWPUUA
      XTPYAWQYSBYTXSBJFGVJYTADXIOZJFOZWQXSXFUUBJFADJVKVLUUCXSPWQADJFVMVSSRULSYR
      JFETZJFXITZKZYBWRJFEXIVBWQWPUUFWRPYAWQUUDEUUEFJFEGVDJFGVCVEULSRSVTVNYDJFG
      VOVPXPDJEGVQVRXQDEGVOVPWAXLXPDJGGXLXGXJMZLXPXGXJWBUUGXOXGXOUUGXHXIWCWDWEW
      FWGVRWHXDXKJGWJDGWJZLZXNXAUUIMXEUUHMZUGXNXDUUHWKUUJXMXEXMUUJXKDJGGWIWDWLW
      FADJGWMWNVRWO $.
  $}

  $( Two classes are empty iff their union is empty.  (Contributed by NM,
     11-Aug-2004.) $)
  un00 $p |- ( ( A = (/) /\ B = (/) ) <-> ( A u. B ) = (/) ) $=
    ( c0 wceq wa cun uneq12 un0 syl6eq wss ssun1 sseq2 mpbii sylib ssun2 impbii
    ss0b jca ) ACDZBCDZEZABFZCDZUAUBCCFCACBCGCHIUCSTUCACJZSUCAUBJUDABKUBCALMAQN
    UCBCJZTUCBUBJUEBAOUBCBLMBQNRP $.

  $( Only the universal class has the universal class as a subclass.
     (Contributed by NM, 17-Sep-2003.)  (Proof shortened by Andrew Salmon,
     26-Jun-2011.) $)
  vss $p |- ( _V C_ A <-> A = _V ) $=
    ( cvv wss wa wceq ssv biantrur eqss bitr4i ) BACZABCZJDABEKJAFGABHI $.

  $( The null set is a proper subset of any nonempty set.  (Contributed by NM,
     27-Feb-1996.) $)
  0pss $p |- ( (/) C. A <-> A =/= (/) ) $=
    ( c0 wpss wne wss 0ss df-pss mpbiran necom bitri ) BACZBADZABDKBAELAFBAGHBA
    IJ $.

  $( No set is a proper subset of the empty set.  (Contributed by NM,
     17-Jun-1998.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.)  (Proof
     shortened by JJ, 14-Jul-2021.) $)
  npss0 $p |- -. A C. (/) $=
    ( c0 wss wpss wn 0ss ssnpss ax-mp ) BACABDEAFBAGH $.

  $( Any non-universal class is a proper subclass of the universal class.
     (Contributed by NM, 17-May-1998.) $)
  pssv $p |- ( A C. _V <-> -. A = _V ) $=
    ( cvv wpss wss wceq wn ssv dfpss2 mpbiran ) ABCABDABEFAGABHI $.

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Two ways of saying that two classes are disjoint (have no members in
       common).  (Contributed by NM, 17-Feb-2004.) $)
    disj $p |- ( ( A i^i B ) = (/) <-> A. x e. A -. x e. B ) $=
      ( cin c0 wceq cv wcel wn wi wal wral wa cab df-in eqeq1i abeq1 imnan noel
      wb nbn bitr2i albii 3bitri df-ral bitr4i ) BCDZEFZAGZBHZUICHZIZJZAKZULABL
      UHUJUKMZANZEFUOUIEHZTZAKUNUGUPEABCOPUOAEQURUMAUMUOIURUJUKRUQUOUISUAUBUCUD
      ULABUEUF $.

    $( Two ways of saying that two classes are disjoint.  (Contributed by Jeff
       Madsen, 19-Jun-2011.) $)
    disjr $p |- ( ( A i^i B ) = (/) <-> A. x e. B -. x e. A ) $=
      ( cin c0 wceq cv wcel wn wral incom eqeq1i disj bitri ) BCDZEFCBDZEFAGBHI
      ACJOPEBCKLACBMN $.

    $( Two ways of saying that two classes are disjoint (have no members in
       common).  (Contributed by NM, 19-Aug-1993.) $)
    disj1 $p |- ( ( A i^i B ) = (/) <-> A. x ( x e. A -> -. x e. B ) ) $=
      ( cin c0 wceq cv wcel wn wral wi wal disj df-ral bitri ) BCDEFAGZCHIZABJP
      BHQKALABCMQABNO $.

    $( Two ways of saying that two classes are disjoint, using the complement
       of ` B ` relative to a universe ` C ` .  (Contributed by NM,
       15-Feb-2007.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
    reldisj $p |- ( A C_ C -> ( ( A i^i B ) = (/) <-> A C_ ( C \ B ) ) ) $=
      ( vx wss cv wcel wn wi wal cdif cin c0 wceq wb dfss2 pm5.44 eldif imbi2i
      wa syl6bbr sps sylbi albidv disj1 3bitr4g ) ACEZDFZAGZUHBGHZIZDJUIUHCBKZG
      ZIZDJABLMNAULEUGUKUNDUGUIUHCGZIZDJUKUNOZDACPUPUQDUPUKUIUOUJTZIUNUIUOUJQUM
      URUIUHCBRSUAUBUCUDDABUEDAULPUF $.

    $( Two ways of saying that two classes are disjoint.  (Contributed by NM,
       19-May-1998.) $)
    disj3 $p |- ( ( A i^i B ) = (/) <-> A = ( A \ B ) ) $=
      ( vx cv wcel wn wi wal cdif wb cin c0 wa pm4.71 eldif bibi2i bitr4i albii
      wceq disj1 dfcleq 3bitr4i ) CDZAEZUCBEFZGZCHUDUCABIZEZJZCHABKLSAUGSUFUICU
      FUDUDUEMZJUIUDUENUHUJUDUCABOPQRCABTCAUGUAUB $.

    $( Members of disjoint sets are not equal.  (Contributed by NM,
       28-Mar-2007.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
    disjne $p |- ( ( ( A i^i B ) = (/) /\ C e. A /\ D e. B ) -> C =/= D ) $=
      ( vx cin c0 wceq wcel wne cv wn wral wi disj eleq1 notbid rspccva eleq1a
      wa necon3bd syl5com sylanb 3impia ) ABFGHZCAIZDBIZCDJZUEEKZBIZLZEAMZUFUGU
      HNEABOULUFTCBIZLZUGUHUKUNECAUICHUJUMUICBPQRUGUMCDDBCSUAUBUCUD $.
  $}

  $( Two disjoint sets are equal iff both are empty.  (Contributed by AV,
     19-Jun-2022.) $)
  disjeq0 $p |- ( ( A i^i B ) = (/)
                  -> ( A = B <-> ( A = (/) /\ B = (/) ) ) ) $=
    ( cin c0 wceq wa ineq1 inidm syl6eq eqeq1d eqtr simpr ex sylbid com12 eqtr3
    jca impbid1 ) ABCZDEZABEZADEZBDEZFZUATUDUATUCUDUASBDUASBBCBABBGBHIJUAUCUDUA
    UCFUBUCABDKUAUCLQMNOABDPR $.

  $( A set can't belong to both members of disjoint classes.  (Contributed by
     NM, 28-Feb-2015.) $)
  disjel $p |- ( ( ( A i^i B ) = (/) /\ C e. A ) -> -. C e. B ) $=
    ( cin c0 wceq wcel wn cdif wi disj3 eleq2 eldifn syl6bi sylbi imp ) ABDEFZC
    AGZCBGHZQAABIZFZRSJABKUARCTGSATCLCABMNOP $.

  $( Two ways of saying that two classes are disjoint.  (Contributed by NM,
     17-May-1998.) $)
  disj2 $p |- ( ( A i^i B ) = (/) <-> A C_ ( _V \ B ) ) $=
    ( cvv wss cin c0 wceq cdif wb ssv reldisj ax-mp ) ACDABEFGACBHDIAJABCKL $.

  $( Two ways of saying that two classes are disjoint.  (Contributed by NM,
     21-Mar-2004.) $)
  disj4 $p |- ( ( A i^i B ) = (/) <-> -. ( A \ B ) C. A ) $=
    ( cin c0 wceq cdif wpss disj3 eqcom wss difss dfpss2 mpbiran con2bii 3bitri
    wn ) ABCDEAABFZEQAEZQAGZPABHAQISRSQAJRPABKQALMNO $.

  $( Intersection with a subclass of a disjoint class.  (Contributed by FL,
     24-Jan-2007.)  (Proof shortened by JJ, 14-Jul-2021.) $)
  ssdisj $p |- ( ( A C_ B /\ ( B i^i C ) = (/) ) -> ( A i^i C ) = (/) ) $=
    ( wss cin c0 wceq wa ssrin eqimss sylan9ss ss0 syl ) ABDZBCEZFGZHACEZFDQFGN
    PQOFABCIOFJKQLM $.

  $( A class is a proper subset of its union with a disjoint nonempty class.
     (Contributed by NM, 15-Sep-2004.) $)
  disjpss $p |- ( ( ( A i^i B ) = (/) /\ B =/= (/) ) -> A C. ( A u. B ) ) $=
    ( cin c0 wceq wne wa wss wn cun wpss ssid biantru bitri sseq2 syl5bb syl6bi
    ssin ss0 necon3ad imp nsspssun uncom psseq2i sylib ) ABCZDEZBDFZGBAHZIZAABJ
    ZKZUGUHUJUGUIBDUGUIBDHZBDEUIBUFHZUGUMUIUIBBHZGUNUOUIBLMBABRNUFDBOPBSQTUAUJA
    BAJZKULBAUBUPUKABAUCUDNUE $.

  $( The union of disjoint classes is disjoint.  (Contributed by NM,
     26-Sep-2004.) $)
  undisj1 $p |- ( ( ( A i^i C ) = (/) /\ ( B i^i C ) = (/) ) <->
               ( ( A u. B ) i^i C ) = (/) ) $=
    ( cin c0 wceq wa cun un00 indir eqeq1i bitr4i ) ACDZEFBCDZEFGMNHZEFABHCDZEF
    MNIPOEABCJKL $.

  $( The union of disjoint classes is disjoint.  (Contributed by NM,
     13-Sep-2004.) $)
  undisj2 $p |- ( ( ( A i^i B ) = (/) /\ ( A i^i C ) = (/) ) <->
               ( A i^i ( B u. C ) ) = (/) ) $=
    ( cin c0 wceq wa cun un00 indi eqeq1i bitr4i ) ABDZEFACDZEFGMNHZEFABCHDZEFM
    NIPOEABCJKL $.

  $( Subclass expressed in terms of intersection with difference from the
     universal class.  (Contributed by NM, 17-Sep-2003.) $)
  ssindif0 $p |- ( A C_ B <-> ( A i^i ( _V \ B ) ) = (/) ) $=
    ( cvv cdif cin c0 wceq wss disj2 ddif sseq2i bitr2i ) ACBDZEFGACMDZHABHAMIN
    BABJKL $.

  $( The intersection of classes with a common member is nonempty.
     (Contributed by NM, 7-Apr-1994.) $)
  inelcm $p |- ( ( A e. B /\ A e. C ) -> ( B i^i C ) =/= (/) ) $=
    ( wcel wa cin c0 wne elin ne0i sylbir ) ABDACDEABCFZDLGHABCILAJK $.

  $( A minimum element of a class has no elements in common with the class.
     (Contributed by NM, 22-Jun-1994.)  (Proof shortened by JJ,
     14-Jul-2021.) $)
  minel $p |- ( ( A e. B /\ ( C i^i B ) = (/) ) -> -. A e. C ) $=
    ( wcel cin c0 wceq wn wne inelcm expcom necon2bd imp ) ABDZCBEZFGACDZHNPOFP
    NOFIACBJKLM $.

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Distribute union over difference.  (Contributed by NM, 17-May-1998.)
       (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
    undif4 $p |- ( ( A i^i C ) = (/) ->
                 ( A u. ( B \ C ) ) = ( ( A u. B ) \ C ) ) $=
      ( vx cv wcel wn wi wal cdif cun wb cin c0 wceq wo wa eldif elun 3bitr4g
      pm2.621 olc impbid1 anbi2d orbi2i bitri anbi1i alimi disj1 dfcleq 3imtr4i
      ordi ) DEZAFZUMCFGZHZDIUMABCJZKZFZUMABKZCJZFZLZDIACMNOURVAOUPVCDUPUNUMUQF
      ZPZUMUTFZUOQZUSVBUPUNUMBFZPZUNUOPZQZVIUOQVEVGUPVJUOVIUPVJUOUNUOUAUOUNUBUC
      UDVEUNVHUOQZPVKVDVLUNUMBCRUEUNVHUOULUFVFVIUOUMABSUGTUMAUQSUMUTCRTUHDACUID
      URVAUJUK $.

    $( Subset relation for disjoint classes.  (Contributed by NM, 25-Oct-2005.)
       (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
    disjssun $p |- ( ( A i^i B ) = (/) -> ( A C_ ( B u. C ) <-> A C_ C ) ) $=
      ( cin c0 wceq cun wss uneq2 indi equncomi un0 eqcomi 3eqtr4g eqeq1d df-ss
      3bitr4g ) ABDZEFZABCGZDZAFACDZAFATHACHSUAUBASUBRGUBEGZUAUBREUBIUARUBABCJK
      UCUBUBLMNOATPACPQ $.
  $}

  $( Universal class equality in terms of empty difference.  (Contributed by
     NM, 17-Sep-2003.) $)
  vdif0 $p |- ( A = _V <-> ( _V \ A ) = (/) ) $=
    ( cvv wceq wss cdif c0 vss ssdif0 bitr3i ) ABCBADBAEFCAGBAHI $.

  ${
    $d V x $.
    $( If the difference between the restricting class of a restricted class
       abstraction and the restricted class abstraction is empty, the
       restricting class is equal to this restricted class abstraction.
       (Contributed by Alexander van der Vekens, 31-Dec-2017.) $)
    difrab0eq $p |- ( ( V \ { x e. V | ph } ) = (/)
                      <-> V = { x e. V | ph } ) $=
      ( crab cdif c0 wceq wss ssdif0 ssrabeq bitr3i ) CABCDZEFGCLHCLGCLIABCJK
      $.
  $}

  ${
    $d x A $.  $d x B $.
    $( A proper subclass has a member in one argument that's not in both.
       (Contributed by NM, 29-Feb-1996.) $)
    pssnel $p |- ( A C. B -> E. x ( x e. B /\ -. x e. A ) ) $=
      ( wpss cv cdif wcel wex wn wa c0 wne pssdif n0 sylib eldif exbii ) BCDZAE
      ZCBFZGZAHZSCGSBGIJZAHRTKLUBBCMATNOUAUCASCBPQO $.
  $}

  $( A class and its relative complement are disjoint.  Theorem 38 of [Suppes]
     p. 29.  (Contributed by NM, 24-Mar-1998.) $)
  disjdif $p |- ( A i^i ( B \ A ) ) = (/) $=
    ( cin wss cdif c0 wceq inss1 inssdif0 mpbi ) ABCADABAECFGABHABAIJ $.

  $( The difference of a class from its intersection is empty.  Theorem 37 of
     [Suppes] p. 29.  (Contributed by NM, 17-Aug-2004.)  (Proof shortened by
     Andrew Salmon, 26-Jun-2011.) $)
  difin0 $p |- ( ( A i^i B ) \ B ) = (/) $=
    ( cin wss cdif c0 wceq inss2 ssdif0 mpbi ) ABCZBDKBEFGABHKBIJ $.

  $( The union of a class and its complement is the universe.  Theorem 5.1(5)
     of [Stoll] p. 17.  (Contributed by NM, 17-Aug-2004.) $)
  unvdif $p |- ( A u. ( _V \ A ) ) = _V $=
    ( cvv cdif cun cin c0 dfun3 disjdif difeq2i dif0 3eqtri ) ABACZDBLBLCEZCBFC
    BALGMFBLBHIBJK $.

  $( Absorption of difference by union.  This decomposes a union into two
     disjoint classes (see ~ disjdif ).  Theorem 35 of [Suppes] p. 29.
     (Contributed by NM, 19-May-1998.) $)
  undif1 $p |- ( ( A \ B ) u. B ) = ( A u. B ) $=
    ( cvv cdif cin undir invdif uneq1i uncom unvdif eqtri ineq2i inv1 3eqtr3i
    cun ) ACBDZEZBOABOZPBOZEZABDZBORAPBFQUABABGHTRCERSCRSBPOCPBIBJKLRMKN $.

  $( Absorption of difference by union.  This decomposes a union into two
     disjoint classes (see ~ disjdif ).  Part of proof of Corollary 6K of
     [Enderton] p. 144.  (Contributed by NM, 19-May-1998.) $)
  undif2 $p |- ( A u. ( B \ A ) ) = ( A u. B ) $=
    ( cdif cun uncom undif1 3eqtri ) ABACZDHADBADABDAHEBAFBAEG $.

  $( Absorption of difference by union.  (Contributed by NM, 18-Aug-2013.) $)
  undifabs $p |- ( A u. ( A \ B ) ) = A $=
    ( cdif cun undif3 unidm difeq1i difdif 3eqtri ) AABCDAADZBACZCAKCAAABEJAKAF
    GABHI $.

  ${
    $d x A $.  $d x B $.
    $( The intersection and class difference of a class with another class
       unite to give the original class.  (Contributed by Paul Chapman,
       5-Jun-2009.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
    inundif $p |- ( ( A i^i B ) u. ( A \ B ) ) = A $=
      ( vx cin cdif cv wcel wo wa wn elin eldif orbi12i pm4.42 bitr4i uneqri )
      CABDZABEZACFZQGZSRGZHSAGZSBGZIZUBUCJIZHUBTUDUAUESABKSABLMUBUCNOP $.
  $}

  $( The difference of a class and a class disjoint from it is the original
     class.  (Contributed by BJ, 21-Apr-2019.) $)
  disjdif2 $p |- ( ( A i^i B ) = (/) -> ( A \ B ) = A ) $=
    ( cin c0 wceq cdif difeq2 difin dif0 3eqtr3g ) ABCZDEAKFADFABFAKDAGABHAIJ
    $.

  $( Absorption of union by difference.  Theorem 36 of [Suppes] p. 29.
     (Contributed by NM, 19-May-1998.) $)
  difun2 $p |- ( ( A u. B ) \ B ) = ( A \ B ) $=
    ( cun cdif c0 difundir difid uneq2i un0 3eqtri ) ABCBDABDZBBDZCKECKABBFLEKB
    GHKIJ $.

  $( Union of complementary parts into whole.  (Contributed by NM,
     22-Mar-1998.) $)
  undif $p |- ( A C_ B <-> ( A u. ( B \ A ) ) = B ) $=
    ( wss cun wceq cdif ssequn1 undif2 eqeq1i bitr4i ) ABCABDZBEABAFDZBEABGLKBA
    BHIJ $.

  $( A subset of a difference does not intersect the subtrahend.  (Contributed
     by Jeff Hankins, 1-Sep-2013.)  (Proof shortened by Mario Carneiro,
     24-Aug-2015.) $)
  ssdifin0 $p |- ( A C_ ( B \ C ) -> ( A i^i C ) = (/) ) $=
    ( cdif wss cin c0 wceq ssrin incom disjdif eqtri sseq0 sylancl ) ABCDZEACFZ
    OCFZEQGHPGHAOCIQCOFGOCJCBKLPQMN $.

  $( A class is a subclass of itself subtracted from another iff it is the
     empty set.  (Contributed by Steve Rodriguez, 20-Nov-2015.) $)
  ssdifeq0 $p |- ( A C_ ( B \ A ) <-> A = (/) ) $=
    ( cdif wss wceq cin inidm ssdifin0 syl5eqr 0ss difeq2 sseq12d mpbiri impbii
    c0 id ) ABACZDZAOEZRAAAFOAGABAHISROBOCZDTJSAOQTSPAOBKLMN $.

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( A condition equivalent to inclusion in the union of two classes.
       (Contributed by NM, 26-Mar-2007.) $)
    ssundif $p |- ( A C_ ( B u. C ) <-> ( A \ B ) C_ C ) $=
      ( vx cv wcel cun wi wal cdif wss wn wa wo pm5.6 eldif imbi1i imbi2i dfss2
      elun 3bitr4ri albii 3bitr4i ) DEZAFZUDBCGZFZHZDIUDABJZFZUDCFZHZDIAUFKUICK
      UHULDUEUDBFZLMZUKHUEUMUKNZHULUHUEUMUKOUJUNUKUDABPQUGUOUEUDBCTRUAUBDAUFSDU
      ICSUC $.
  $}

  $( Swap the arguments of a class difference.  (Contributed by NM,
     29-Mar-2007.) $)
  difcom $p |- ( ( A \ B ) C_ C <-> ( A \ C ) C_ B ) $=
    ( cun wss cdif uncom sseq2i ssundif 3bitr3i ) ABCDZEACBDZEABFCEACFBEKLABCGH
    ABCIACBIJ $.

  $( Two ways to express overlapping subsets.  (Contributed by Stefan O'Rear,
     31-Oct-2014.) $)
  pssdifcom1 $p |- ( ( A C_ C /\ B C_ C ) ->
    ( ( C \ A ) C. B <-> ( C \ B ) C. A ) ) $=
    ( wss wa cdif wn wpss wb difcom ssconb ancoms notbid anbi12d dfpss3 3bitr4g
    a1i ) ACDZBCDZEZCAFZBDZBUADZGZECBFZADZAUEDZGZEUABHUEAHTUBUFUDUHUBUFITCABJQT
    UCUGSRUCUGIBACKLMNUABOUEAOP $.

  $( Two ways to express non-covering pairs of subsets.  (Contributed by Stefan
     O'Rear, 31-Oct-2014.) $)
  pssdifcom2 $p |- ( ( A C_ C /\ B C_ C ) ->
    ( B C. ( C \ A ) <-> A C. ( C \ B ) ) ) $=
    ( wss wa cdif wn wpss wb ssconb ancoms difcom notbii anbi12d dfpss3 3bitr4g
    a1i ) ACDZBCDZEZBCAFZDZUABDZGZEACBFZDZUEADZGZEBUAHAUEHTUBUFUDUHSRUBUFIBACJK
    UDUHITUCUGCABLMQNBUAOAUEOP $.

  $( Distributive law for class difference.  Exercise 4.8 of [Stoll] p. 16.
     (Contributed by NM, 18-Aug-2004.) $)
  difdifdir $p |- ( ( A \ B ) \ C ) = ( ( A \ C ) \ ( B \ C ) ) $=
    ( cdif cvv cun cin dif32 invdif eqtr4i un0 indi disjdif incom eqtr3i uneq2i
    c0 ddif indm difeq2i ineq2i 3eqtri ) ABDCDZACDZEBDZCFZGZUDEBCDZDZGUDUHDUCUD
    UEGZQFZUGUCUJUKUCUDBDUJABCHUDBIJUJKJUGUJUDCGZFUKUDUECLQULUJCUDGQULCAMCUDNOP
    JJUFUIUDUEEECDZDZFZUFUIUNCUECRPEBUMGZDUOUIBUMSUPUHEBCITOOUAUDUHIUB $.

  $( Two ways to say that ` A ` and ` B ` partition ` C ` (when ` A ` and ` B `
     don't overlap and ` A ` is a part of ` C ` ).  (Contributed by FL,
     17-Nov-2008.)  (Proof shortened by JJ, 14-Jul-2021.) $)
  uneqdifeq $p |- ( ( A C_ C /\ ( A i^i B ) = (/) )
     -> ( ( A u. B ) = C <-> ( C \ A ) = B ) ) $=
    ( wss cin c0 wceq wa cun cdif uncom eqcomd difeq1 difun2 incom eqeq1i disj3
    wi eqtr adantl bitri expcom eqcoms sylbi syl5com sylancl com12 simpl difssd
    syl mpan sseq1 mpbid unssd eqimss ssundif sylibr eqssd ex adantr impbid ) A
    CDZABEZFGZHABIZCGZCAJZBGZVDVFVHRVBVFVDVHBAIZVEGZVFVDVHRZBAKVJVFHZCVIGZVKVLV
    ICVIVECSLVMVGVIAJZGZVNBAJZGZVKCVIAMBANVOVQHVGVPGZVDVHVGVNVPSVDBVPGZVRVHRZVD
    BAEZFGVSVCWAFABOPBAQUAVTVPBVRVPBGVHVGVPBSUBUCUDUEUFUJUKUGTVBVHVFRVDVBVHVFVB
    VHHZVECWBABCVBVHUHVHBCDZVBVHVGCDWCVHCAUIVGBCULUMTUNVHCVEDZVBVHVGBDWDVGBUOCA
    BUPUQTURUSUTVA $.

  ${
    $d A x $.  $d B x $.
    raldifeq.1 $e |- ( ph -> A C_ B ) $.
    raldifeq.2 $e |- ( ph -> A. x e. ( B \ A ) ps ) $.
    $( Equality theorem for restricted universal quantifier.  (Contributed by
       Thierry Arnoux, 6-Jul-2019.) $)
    raldifeq $p |- ( ph -> ( A. x e. A ps <-> A. x e. B ps ) ) $=
      ( wral cdif cun wa biantrud ralunb syl6bbr wceq undif sylib raleqdv bitrd
      wss ) ABCDHZBCDEDIZJZHZBCEHAUAUABCUBHZKUDAUEUAGLBCDUBMNABCUCEADETUCEOFDEP
      QRS $.
  $}

  ${
    $d x A $.
    $( Theorem 19.2 of [Margaris] p. 89 with restricted quantifiers (compare
       ~ 19.2 ).  The restricted version is valid only when the domain of
       quantification is not empty.  (Contributed by NM, 15-Nov-2003.) $)
    r19.2z $p |- ( ( A =/= (/) /\ A. x e. A ph ) -> E. x e. A ph ) $=
      ( wral c0 wne wrex cv wex wa wi wal df-ral exintr sylbi n0 df-rex 3imtr4g
      wcel impcom ) ABCDZCEFZABCGZUABHCSZBIZUDAJBIZUBUCUAUDAKBLUEUFKABCMUDABNOB
      CPABCQRT $.

    $( A response to the notion that the condition ` A =/= (/) ` can be removed
       in ~ r19.2z .  Interestingly enough, ` ph ` does not figure in the
       left-hand side.  (Contributed by Jeff Hankins, 24-Aug-2009.) $)
    r19.2zb $p |- ( A =/= (/) <-> ( A. x e. A ph -> E. x e. A ph ) ) $=
      ( c0 wral wrex wi r19.2z ex wceq cv wcel noel pm2.21i rgen raleq necon3bi
      wne mpbiri wex wa exsimpl df-rex n0 3imtr4i ja impbii ) CDRZABCEZABCFZGUH
      UIUJABCHIUIUJUHUICDCDJUIABDEABDBKZDLAUKMNOABCDPSQUKCLZAUABTULBTUJUHULABUB
      ABCUCBCUDUEUFUG $.
  $}

  ${
    $d x A $.
    r19.3rz.1 $e |- F/ x ph $.
    $( Restricted quantification of wff not containing quantified variable.
       (Contributed by FL, 3-Jan-2008.) $)
    r19.3rz $p |- ( A =/= (/) -> ( ph <-> A. x e. A ph ) ) $=
      ( c0 wne cv wcel wex wi wral wb n0 biimt sylbi df-ral 19.23 bitri syl6bbr
      wal ) CEFZABGCHZBIZAJZABCKZUAUCAUDLBCMUCANOUEUBAJBTUDABCPUBABDQRS $.

    $( Restricted quantifier version of Theorem 19.28 of [Margaris] p. 90.  It
       is valid only when the domain of quantification is not empty.
       (Contributed by NM, 26-Oct-2010.) $)
    r19.28z $p |- ( A =/= (/) ->
                   ( A. x e. A ( ph /\ ps ) <-> ( ph /\ A. x e. A ps ) ) ) $=
      ( c0 wne wral wa r19.3rz anbi1d r19.26 syl6rbbr ) DFGZABCDHZIACDHZOIABICD
      HNAPOACDEJKABCDLM $.
  $}

  ${
    $d x A $.  $d x ph $.
    $( Restricted quantification of wff not containing quantified variable.
       (Contributed by NM, 10-Mar-1997.) $)
    r19.3rzv $p |- ( A =/= (/) -> ( ph <-> A. x e. A ph ) ) $=
      ( nfv r19.3rz ) ABCABDE $.

    $( Restricted quantification of wff not containing quantified variable.
       (Contributed by NM, 27-May-1998.) $)
    r19.9rzv $p |- ( A =/= (/) -> ( ph <-> E. x e. A ph ) ) $=
      ( wrex wn wral c0 wne dfrex2 r19.3rzv con1bid syl5rbb ) ABCDAEZBCFZECGHZA
      ABCIOANMBCJKL $.

    $( Restricted quantifier version of Theorem 19.28 of [Margaris] p. 90.  It
       is valid only when the domain of quantification is not empty.
       (Contributed by NM, 19-Aug-2004.) $)
    r19.28zv $p |- ( A =/= (/) ->
                   ( A. x e. A ( ph /\ ps ) <-> ( ph /\ A. x e. A ps ) ) ) $=
      ( nfv r19.28z ) ABCDACEF $.

    $( Restricted quantifier version of Theorem 19.37 of [Margaris] p. 90.  It
       is valid only when the domain of quantification is not empty.
       (Contributed by Paul Chapman, 8-Oct-2007.) $)
    r19.37zv $p |- ( A =/= (/) ->
                   ( E. x e. A ( ph -> ps ) <-> ( ph -> E. x e. A ps ) ) ) $=
      ( c0 wne wrex wi wral r19.3rzv imbi1d r19.35 syl6rbbr ) DEFZABCDGZHACDIZO
      HABHCDGNAPOACDJKABCDLM $.

    $( Restricted version of Theorem 19.45 of [Margaris] p. 90.  (Contributed
       by NM, 27-May-1998.) $)
    r19.45zv $p |- ( A =/= (/) ->
                   ( E. x e. A ( ph \/ ps ) <-> ( ph \/ E. x e. A ps ) ) ) $=
      ( c0 wne wrex wo r19.9rzv orbi1d r19.43 syl6rbbr ) DEFZABCDGZHACDGZNHABHC
      DGMAONACDIJABCDKL $.
  $}

  ${
    $d x A $.  $d x ps $.
    $( Restricted version of Theorem 19.44 of [Margaris] p. 90.  (Contributed
       by NM, 27-May-1998.) $)
    r19.44zv $p |- ( A =/= (/) ->
                   ( E. x e. A ( ph \/ ps ) <-> ( E. x e. A ph \/ ps ) ) ) $=
      ( c0 wne wrex wo r19.9rzv orbi2d r19.43 syl6rbbr ) DEFZACDGZBHNBCDGZHABHC
      DGMBONBCDIJABCDKL $.
  $}

  ${
    $d x A $.
    r19.27z.1 $e |- F/ x ps $.
    $( Restricted quantifier version of Theorem 19.27 of [Margaris] p. 90.  It
       is valid only when the domain of quantification is not empty.
       (Contributed by NM, 26-Oct-2010.) $)
    r19.27z $p |- ( A =/= (/) ->
                   ( A. x e. A ( ph /\ ps ) <-> ( A. x e. A ph /\ ps ) ) ) $=
      ( c0 wne wral wa r19.3rz anbi2d r19.26 syl6rbbr ) DFGZACDHZBIOBCDHZIABICD
      HNBPOBCDEJKABCDLM $.
  $}

  ${
    $d x A $.  $d x ps $.
    $( Restricted quantifier version of Theorem 19.27 of [Margaris] p. 90.  It
       is valid only when the domain of quantification is not empty.
       (Contributed by NM, 19-Aug-2004.) $)
    r19.27zv $p |- ( A =/= (/) ->
                   ( A. x e. A ( ph /\ ps ) <-> ( A. x e. A ph /\ ps ) ) ) $=
      ( nfv r19.27z ) ABCDBCEF $.

    $( Restricted quantifier version of Theorem 19.36 of [Margaris] p. 90.  It
       is valid only when the domain of quantification is not empty.
       (Contributed by NM, 20-Sep-2003.) $)
    r19.36zv $p |- ( A =/= (/) ->
                   ( E. x e. A ( ph -> ps ) <-> ( A. x e. A ph -> ps ) ) ) $=
      ( c0 wne wral wi wrex r19.9rzv imbi2d r19.35 syl6rbbr ) DEFZACDGZBHOBCDIZ
      HABHCDINBPOBCDJKABCDLM $.
  $}

  ${
    $d x A $.
    $( Vacuous quantification is always true.  (Contributed by NM,
       11-Mar-1997.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
    rzal $p |- ( A = (/) -> A. x e. A ph ) $=
      ( c0 wceq cv wcel ne0i necon2bi pm2.21d ralrimiv ) CDEZABCLBFZCGZANCDCMHI
      JK $.

    $( Restricted existential quantification implies its restriction is
       nonempty.  (Contributed by Szymon Jaroszewicz, 3-Apr-2007.) $)
    rexn0 $p |- ( E. x e. A ph -> A =/= (/) ) $=
      ( c0 wne cv wcel ne0i a1d rexlimiv ) ACDEZBCBFZCGKACLHIJ $.

    $( Idempotent law for restricted quantifier.  (Contributed by NM,
       28-Mar-1997.) $)
    ralidm $p |- ( A. x e. A A. x e. A ph <-> A. x e. A ph ) $=
      ( c0 wceq wral wb rzal 2thd wn cv wcel wex neq0 wi biimt wal df-ral nfra1
      19.23 bitri syl6rbbr sylbi pm2.61i ) CDEZABCFZBCFZUFGZUEUGUFUFBCHABCHIUEJ
      BKCLZBMZUHBCNUJUFUJUFOZUGUJUFPUGUIUFOBQUKUFBCRUIUFBABCSTUAUBUCUD $.
  $}

  $( Vacuous universal quantification is always true.  (Contributed by NM,
     20-Oct-2005.) $)
  ral0 $p |- A. x e. (/) ph $=
    ( c0 cv wcel noel pm2.21i rgen ) ABCBDZCEAIFGH $.

  ${
    $d x A $.
    ralf0.1 $e |- -. ph $.
    $( The quantification of a falsehood is vacuous when true.  (Contributed by
       NM, 26-Nov-2005.)  (Proof shortened by JJ, 14-Jul-2021.) $)
    ralf0 $p |- ( A. x e. A ph <-> A = (/) ) $=
      ( cv wcel wn wal wi c0 wceq wral wb mtt ax-mp albii eq0 df-ral 3bitr4ri )
      BECFZGZBHTAIZBHCJKABCLUAUBBAGUAUBMDATNOPBCQABCRS $.
  $}

  ${
    $d A x $.
    $( A contradiction concerning restricted generalization for a nonempty set
       implies anything.  (Contributed by Alexander van der Vekens,
       4-Sep-2018.) $)
    ralnralall $p |- ( A =/= (/)
                       -> ( ( A. x e. A ph /\ A. x e. A -. ph ) -> ps ) ) $=
      ( wral wn wa c0 wne r19.26 wfal pm3.24 bifal ralbii r19.3rzv falim syl5bi
      syl6bir syl5bir ) ACDEAFZCDEGATGZCDEZDHIZBATCDJUBKCDEZUCBUAKCDUAALMNUCUDK
      BKCDOBPRQS $.

    $( A false statement can only be true for elements of an empty set.
       (Contributed by AV, 30-Oct-2020.) $)
    falseral0 $p |- ( ( A. x -. ph /\ A. x e. A ph ) -> A = (/) ) $=
      ( wral wn wal cv wcel wi c0 wceq df-ral 19.26 wex con3 impcom alimi alnex
      wa sylib notnotb neq0 xchbinx sylibr sylbir sylan2b ) ABCDAEZBFZBGCHZAIZB
      FZCJKZABCLUHUKSUGUJSZBFZULUGUJBMUNUIBNZEZULUNUIEZBFUPUMUQBUJUGUQUIAOPQUIB
      RTULULEUOULUABCUBUCUDUEUF $.
  $}

  ${
    $d x y A $.
    raaan.1 $e |- F/ y ph $.
    raaan.2 $e |- F/ x ps $.
    $( Rearrange restricted quantifiers.  (Contributed by NM, 26-Oct-2010.) $)
    raaan $p |- ( A. x e. A A. y e. A ( ph /\ ps ) <->
                  ( A. x e. A ph /\ A. y e. A ps ) ) $=
      ( wa wral wb c0 wceq rzal pm5.1 syl12anc wne r19.28z ralbidv nfcv nfral
      r19.27z bitrd pm2.61ine ) ABHDEIZCEIZACEIZBDEIZHZJZEKEKLUEUFUGUIUDCEMACEM
      BDEMUEUHNOEKPZUEAUGHZCEIUHUJUDUKCEABDEFQRAUGCEBCDECESGTUAUBUC $.
  $}

  ${
    $d y ph $.  $d x ps $.  $d x y A $.
    $( Rearrange restricted quantifiers.  (Contributed by NM, 11-Mar-1997.) $)
    raaanv $p |- ( A. x e. A A. y e. A ( ph /\ ps ) <->
                  ( A. x e. A ph /\ A. y e. A ps ) ) $=
      ( wa wral wb wceq rzal pm5.1 syl12anc wne r19.28zv ralbidv r19.27zv bitrd
      c0 pm2.61ine ) ABFDEGZCEGZACEGZBDEGZFZHZERERIUAUBUCUETCEJACEJBDEJUAUDKLER
      MZUAAUCFZCEGUDUFTUGCEABDENOAUCCEPQS $.
  $}

  ${
    $d z y $.  $d z x A $.
    $( Set substitution into the first argument of a subset relation.
       (Contributed by Rodolfo Medina, 7-Jul-2010.)  (Proof shortened by Mario
       Carneiro, 14-Nov-2016.) $)
    sbss $p |- ( [ y / x ] x C_ A <-> y C_ A ) $=
      ( vz cv wss sseq1 sbievw2 ) AEZCFBEZCFDEZCFABDIKCGKJCGH $.
  $}

  ${
    $d A y $.  $d B y $.  $d C y $.  $d V y $.  $d x y $.
    $( Distribute proper substitution through a subclass relation.
       (Contributed by Alan Sare, 22-Jul-2012.)  (Proof shortened by Alexander
       van der Vekens, 23-Jul-2017.) $)
    sbcssg $p |- ( A e. V -> ( [. A / x ]. B C_ C <->
      [_ A / x ]_ B C_ [_ A / x ]_ C ) ) $=
      ( vy wcel cv wi wal wsbc csb wss sbcal sbcimg sbcel2 imbi12i syl6bb dfss2
      albidv syl5bb sbcbii 3bitr4g ) BEGZFHZCGZUEDGZIZFJZABKZUEABCLZGZUEABDLZGZ
      IZFJZCDMZABKUKUMMUJUHABKZFJUDUPUHFABNUDURUOFUDURUFABKZUGABKZIUOUFUGABEOUS
      ULUTUNABUECPABUEDPQRTUAUQUIABFCDSUBFUKUMSUC $.
  $}

  ${
    $d x y A $.  $d x y B $.
    raaan2.1 $e |- F/ y ph $.
    raaan2.2 $e |- F/ x ps $.
    $( Rearrange restricted quantifiers with two different restricting classes,
       analogous to ~ raaan .  It is necessary that either both restricting
       classes are empty or both are not empty.  (Contributed by Alexander van
       der Vekens, 29-Jun-2017.) $)
    raaan2 $p |- ( ( A = (/) <-> B = (/) )
                   -> ( A. x e. A A. y e. B ( ph /\ ps ) <->
                        ( A. x e. A ph /\ A. y e. B ps ) ) ) $=
      ( c0 wceq wb wa wn wo wral rzal adantr wne df-ne sylbir dfbi3 adantl nfcv
      pm5.1 syl12anc r19.28z ralbidv nfral r19.27z sylan9bbr jaoi sylbi ) EIJZF
      IJZKUMUNLZUMMZUNMZLZNABLDFOZCEOZACEOZBDFOZLZKZUMUNUAUOVDURUOUTVAVBVDUMUTU
      NUSCEPQUMVAUNACEPQUNVBUMBDFPUBUTVCUDUEUQUTAVBLZCEOZUPVCUQFIRZUTVFKFISVGUS
      VECEABDFGUFUGTUPEIRVFVCKEISAVBCEBCDFCFUCHUHUITUJUKUL $.
  $}

  ${
    $d z w ph $.  $d w x y z A $.  $d w x y z B $.
    $( Lemma for ~ 2reu4 .  (Contributed by Alexander van der Vekens,
       1-Jul-2017.) $)
    2reu4lem $p |- ( ( A =/= (/) /\ B =/= (/) )
                -> ( ( E! x e. A E. y e. B ph /\ E! y e. B E. x e. A ph ) <->
                    ( E. x e. A E. y e. B ph /\ E. z e. A E. w e. B
                      A. x e. A A. y e. B ( ph -> ( x = z /\ y = w ) ) ) ) ) $=
      ( c0 wne wa wrex wreu weq wi wral wb a1i bitri r19.26 adantr reu3 anbi12i
      an4 rexcom anbi2i anidm cv wcel nfra1 r19.3rz bicomd anbi2d ralbii bitr4d
      jcab syl5rbb ad2antlr ralcom anbi12d syl5bb ralbidv r19.23v 2ralbii wn wo
      wceq neneq anim12i olcd dfbi3 sylibr nfv nfim raaan2 syl 3bitrd 2rexbidva
      nfre1 reeanv syl6rbb ) FHIZGHIZJZACGKZBFLZABFKZCGLZJZWDBFKZWDBDMZNZBFOZDF
      KZJZWFCGKZWFCEMZNZCGOZEGKZJZJZWIWOJZWMWSJZJZWIAWJWPJNZCGOZBFOZEGKDFKZJWHX
      APWCWEWNWGWTWDBDFUAWFCEGUAUBQXAXDPWCWIWMWOWSUCQWCXBWIXCXHXBWIPWCXBWIWIJWI
      WOWIWIACBGFUDUEWIUFRQWCXHWLWRJZEGKDFKXCWCXGXIDEFGWCDUGFUHEUGGUHJZJZXGAWJN
      ZCGOZAWPNZBFOZJZCGOZBFOZWKWQJZCGOBFOZXIXKXGXMXNCGOZBFOZJZBFOZXRYDXMBFOZYB
      BFOZJZXKXGXMYBBFSXKYGYEYBJZXGXKYFYBYEWCYFYBPZXJWAYIWBWAYBYFYBBFYABFUIUJUK
      TTULXGYHPXKXGXMYAJZBFOYHXFYJBFXFXLXNJZCGOYJXEYKCGAWJWPUOUMXLXNCGSRUMXMYAB
      FSRQUNUPXKXQYCBFXQXMCGOZXOCGOZJXKYCXMXOCGSXKYLXMYMYBXKXMYLWBXMYLPWAXJXMCG
      XLCGUIUJUQUKYMYBPXKXNCBGFURQUSUTVAUNXRXTPXKXPXSBCFGXMWKXOWQAWJCGVBAWPBFVB
      UBVCQWCXTXIPZXJWCFHVFZGHVFZPZYNWCYOYPJZYOVDZYPVDZJZVEYQWCUUAYRWAYSWBYTFHV
      GGHVGVHVIYOYPVJVKWKWQBCFGWDWJCACGVRWJCVLVMWFWPBABFVRWPBVLVMVNVOTVPVQWLWRD
      EFGVSVTUSVP $.

    $( Definition of double restricted existential uniqueness ("exactly one
       ` x ` and exactly one ` y ` "), analogous to ~ 2eu4 .  (Contributed by
       Alexander van der Vekens, 1-Jul-2017.) $)
    2reu4 $p |- ( ( E! x e. A E. y e. B ph /\ E! y e. B E. x e. A ph ) <->
                    ( E. x e. A E. y e. B ph /\ E. z e. A E. w e. B
                      A. x e. A A. y e. B ( ph -> ( x = z /\ y = w ) ) ) ) $=
      ( wrex wreu wa c0 wne weq wral reurex rexn0 syl anim12i cv wcel rexlimivv
      wi ne0i a1d adantr 2reu4lem pm5.21nii ) ACGHZBFIZABFHZCGIZJFKLZGKLZJZUHBF
      HZABDMCEMJUBCGNBFNEGHDFHZJUIULUKUMUIUOULUHBFOUHBFPQUKUJCGHUMUJCGOUJCGPQRU
      OUNUPAUNBCFGBSZFTZCSZGTZJUNAURULUTUMFUQUCGUSUCRUDUAUEABCDEFGUFUG $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  The conditional operator for classes
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  This subsection introduces the conditional operator for classes, denoted
  by ` if ( ph , A , B ) ` (see ~ df-if ).  It is the analogue for classes
   of the conditional operator for propositions, denoted by
  ` if- ( ph , ps , ch ) ` (see ~ df-ifp ).

$)

  $( Symbol for the conditional operator for classes. $)
  $c if $.

  $( Extend class notation to include the conditional operator for classes. $)
  cif $a class if ( ph , A , B ) $.

  ${
    $d x ph $.  $d x A $.  $d x B $.
    $( Definition of the conditional operator for classes.  The expression
       ` if ( ph , A , B ) ` is read "if ` ph ` then ` A ` else ` B ` ".  See
       ~ iftrue and ~ iffalse for its values.  In the mathematical literature,
       this operator is rarely defined formally but is implicit in informal
       definitions such as "let f(x)=0 if x=0 and 1/x otherwise".

       An important use for us is in conjunction with the weak deduction
       theorem, which is described in the next section, beginning at ~ dedth .
       (Contributed by NM, 15-May-1999.) $)
    df-if $a |- if ( ph , A , B ) =
                 { x | ( ( x e. A /\ ph ) \/ ( x e. B /\ -. ph ) ) } $.
  $}

  ${
    $d x ph $.  $d x A $.  $d x B $.  $d x C $.
    $( An alternate definition of the conditional operator ~ df-if with one
       fewer connectives (but probably less intuitive to understand).
       (Contributed by NM, 30-Jan-2006.) $)
    dfif2 $p |- if ( ph , A , B ) =
                 { x | ( ( x e. B -> ph ) -> ( x e. A /\ ph ) ) } $=
      ( cif cv wcel wa wn wo cab wi df-if df-or orcom iman imbi1i 3bitr4i abbii
      eqtri ) ACDEBFZCGAHZUADGZAIHZJZBKUCALZUBLZBKABCDMUEUGBUDUBJUDIZUBLUEUGUDU
      BNUBUDOUFUHUBUCAPQRST $.

    $( An alternate definition of the conditional operator ~ df-if as a simple
       class abstraction.  (Contributed by Mario Carneiro, 8-Sep-2013.) $)
    dfif6 $p |- if ( ph , A , B ) =
                 ( { x e. A | ph } u. { x e. B | -. ph } ) $=
      ( cv wcel wa cab wn cun wo crab cif unab df-rab uneq12i df-if 3eqtr4ri )
      BEZCFAGZBHZSDFAIZGZBHZJTUCKBHABCLZUBBDLZJACDMTUCBNUEUAUFUDABCOUBBDOPABCDQ
      R $.

    $( Equality theorem for conditional operator.  (Contributed by NM,
       1-Sep-2004.)  (Revised by Mario Carneiro, 8-Sep-2013.) $)
    ifeq1 $p |- ( A = B -> if ( ph , A , C ) = if ( ph , B , C ) ) $=
      ( vx wceq crab wn cun cif rabeq uneq1d dfif6 3eqtr4g ) BCFZAEBGZAHEDGZIAE
      CGZQIABDJACDJOPRQAEBCKLAEBDMAECDMN $.

    $( Equality theorem for conditional operator.  (Contributed by NM,
       1-Sep-2004.)  (Revised by Mario Carneiro, 8-Sep-2013.) $)
    ifeq2 $p |- ( A = B -> if ( ph , C , A ) = if ( ph , C , B ) ) $=
      ( vx wceq crab wn cun cif rabeq uneq2d dfif6 3eqtr4g ) BCFZAEDGZAHZEBGZIP
      QECGZIADBJADCJORSPQEBCKLAEDBMAEDCMN $.

    $( Value of the conditional operator when its first argument is true.
       (Contributed by NM, 15-May-1999.)  (Proof shortened by Andrew Salmon,
       26-Jun-2011.) $)
    iftrue $p |- ( ph -> if ( ph , A , B ) = A ) $=
      ( vx cv wcel wi wa cab cif dedlem0a abbi2dv dfif2 syl6reqr ) ABDEZCFZAGOB
      FZAHGZDIABCJARDBAQPKLADBCMN $.
  $}

  ${
    iftruei.1 $e |- ph $.
    $( Inference associated with ~ iftrue .  (Contributed by BJ,
       7-Oct-2018.) $)
    iftruei $p |- if ( ph , A , B ) = A $=
      ( cif wceq iftrue ax-mp ) AABCEBFDABCGH $.
  $}

  ${
    iftrued.1 $e |- ( ph -> ch ) $.
    $( Value of the conditional operator when its first argument is true.
       (Contributed by Glauco Siliprandi, 11-Dec-2019.) $)
    iftrued $p |- ( ph -> if ( ch , A , B ) = A ) $=
      ( cif wceq iftrue syl ) ABBCDFCGEBCDHI $.
  $}

  ${
    $d x ph $.  $d x A $.  $d x B $.
    $( Value of the conditional operator when its first argument is false.
       (Contributed by NM, 14-Aug-1999.) $)
    iffalse $p |- ( -. ph -> if ( ph , A , B ) = B ) $=
      ( vx wn cv wcel wa wo cab cif dedlemb abbi2dv df-if syl6reqr ) AEZCDFZBGZ
      AHQCGZPHIZDJABCKPTDCARSLMADBCNO $.
  $}

  ${
    iffalsei.1 $e |- -. ph $.
    $( Inference associated with ~ iffalse .  (Contributed by BJ,
       7-Oct-2018.) $)
    iffalsei $p |- if ( ph , A , B ) = B $=
      ( wn cif wceq iffalse ax-mp ) AEABCFCGDABCHI $.
  $}

  ${
    iffalsed.1 $e |- ( ph -> -. ch ) $.
    $( Value of the conditional operator when its first argument is false.
       (Contributed by Glauco Siliprandi, 11-Dec-2019.) $)
    iffalsed $p |- ( ph -> if ( ch , A , B ) = B ) $=
      ( wn cif wceq iffalse syl ) ABFBCDGDHEBCDIJ $.
  $}

  $( When values are unequal, but an "if" condition checks if they are equal,
     then the "false" branch results.  This is a simple utility to provide a
     slight shortening and simplification of proofs versus applying ~ iffalse
     directly in this case.  It happens, e.g., in ~ oevn0 .  (Contributed by
     David A. Wheeler, 15-May-2015.) $)
  ifnefalse $p |- ( A =/= B -> if ( A = B , C , D ) = D ) $=
    ( wne wceq wn cif df-ne iffalse sylbi ) ABEABFZGLCDHDFABILCDJK $.

  ${
    ifsb.1 $e |- ( if ( ph , A , B ) = A -> C = D ) $.
    ifsb.2 $e |- ( if ( ph , A , B ) = B -> C = E ) $.
    $( Distribute a function over an if-clause.  (Contributed by Mario
       Carneiro, 14-Aug-2013.) $)
    ifsb $p |- C = if ( ph , D , E ) $=
      ( cif wceq iftrue syl eqtr4d wn iffalse pm2.61i ) ADAEFIZJADEQAABCIZBJDEJ
      ABCKGLAEFKMANZDFQSRCJDFJABCOHLAEFOMP $.
  $}

  ${
    $d y A $.  $d y B $.  $d x y ph $.
    dfif3.1 $e |- C = { x | ph } $.
    $( Alternate definition of the conditional operator ~ df-if .  Note that
       ` ph ` is independent of ` x ` i.e. a constant true or false.
       (Contributed by NM, 25-Aug-2013.)  (Revised by Mario Carneiro,
       8-Sep-2013.) $)
    dfif3 $p |- if ( ph , A , B )
                  = ( ( A i^i C ) u. ( B i^i ( _V \ C ) ) ) $=
      ( vy cif crab wn cun cin cvv cdif dfif6 cab weq ineq2i dfrab3 eqtr4i
      biidd cbvabv eqtri notab difeq2i eqtr2i uneq12i ) ACDHAGCIZAJZGDIZKCELZDM
      ENZLZKAGCDOUKUHUMUJUKCAGPZLUHEUNCEABPUNFAABGBGQAUAUBUCZRAGCSTUJDUIGPZLUMU
      IGDSUPULDUPMUNNULAGUDEUNMUOUETRUFUGT $.

    $( Alternate definition of the conditional operator ~ df-if .  Note that
       ` ph ` is independent of ` x ` i.e. a constant true or false.
       (Contributed by NM, 25-Aug-2013.) $)
    dfif4 $p |- if ( ph , A , B )
        = ( ( A u. B ) i^i ( ( A u. ( _V \ C ) ) i^i ( B u. C ) ) ) $=
      ( cif cin cvv cdif cun dfif3 undir undi uncom unvdif ineq12i 3eqtri inass
      inv1 eqtri ) ACDGCEHDIEJZHZKCUCKZEUCKZHZCDKZCUBKZDEKZHHZABCDEFLCEUCMUFUGU
      HHZUIHUJUDUKUEUICDUBNUEEDKZEUBKZHUIIHUIEDUBNULUIUMIEDOEPQUITRQUGUHUISUAR
      $.

    $( Alternate definition of the conditional operator ~ df-if .  Note that
       ` ph ` is independent of ` x ` i.e. a constant true or false (see also
       ~ ab0orv ).  (Contributed by G&eacute;rard Lang, 18-Aug-2013.) $)
    dfif5 $p |- if ( ph , A , B ) = ( ( A i^i B )
          u. ( ( ( A \ B ) i^i C ) u. ( ( B \ A ) i^i ( _V \ C ) ) ) ) $=
      ( cun cdif undir unidm unass undi 3eqtr3ri undifabs ineq1i undif2 3eqtr4i
      cin inabs eqtr4i cvv cif inindi dfif4 uneq1i 3eqtri uneq12i uncom 3eqtrri
      unundi uneq2i ineq2i ineq12i ) CDGZCUAEHZGZDEGZRRUNUPRZUNUQRZRZACDUBCDRCD
      HZERZDCHZUORZGZGZUNUPUQUCABCDEFUDVFCVEGZDVEGZRUTCDVEIURVGUSVHURCVBGZCVDGZ
      GZVGURCCDUORZGZGZVKCCGZVLGVMVNURVOCVLCJUECCVLKCDUOLZMVICVJVMVICVAGZCEGZRC
      VRRCCVAELVQCVRCDNOCESUFCVCGZUPRURVJVMVSUNUPCDPOCVCUOLVPQUGTCVBVDUJTCERZDG
      ZDVBGZDVDGZGZUSVHWADGVTDDGZGWDWAVTDDKWAWBDWCWADVAGZUQRZWBDVTGDCGZUQRWAWGD
      CELVTDUHWFWHUQDCPOQDVAELTWCDVCGZDUOGZRDWJRDDVCUOLWIDWJDCNODUOSUIUGWEDVTDJ
      UKMUSUNEDGZRWAUQWKUNDEUHULCEDITDVBVDUJQUMTQ $.
  $}

  $( Equality theorem for conditional operators.  (Contributed by NM,
     1-Sep-2004.) $)
  ifeq12 $p |- ( ( A = B /\ C = D ) ->
                if ( ph , A , C ) = if ( ph , B , D ) ) $=
    ( wceq cif ifeq1 ifeq2 sylan9eq ) BCFDEFABDGACDGACEGABCDHADECIJ $.

  ${
    ifeq1d.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for conditional operator.  (Contributed by NM,
       16-Feb-2005.) $)
    ifeq1d $p |- ( ph -> if ( ps , A , C ) = if ( ps , B , C ) ) $=
      ( wceq cif ifeq1 syl ) ACDGBCEHBDEHGFBCDEIJ $.

    $( Equality deduction for conditional operator.  (Contributed by NM,
       16-Feb-2005.) $)
    ifeq2d $p |- ( ph -> if ( ps , C , A ) = if ( ps , C , B ) ) $=
      ( wceq cif ifeq2 syl ) ACDGBECHBEDHGFBCDEIJ $.

    ifeq12d.2 $e |- ( ph -> C = D ) $.
    $( Equality deduction for conditional operator.  (Contributed by NM,
       24-Mar-2015.) $)
    ifeq12d $p |- ( ph -> if ( ps , A , C ) = if ( ps , B , D ) ) $=
      ( cif ifeq1d ifeq2d eqtrd ) ABCEIBDEIBDFIABCDEGJABEFDHKL $.
  $}

  $( Equivalence theorem for conditional operators.  (Contributed by Raph
     Levien, 15-Jan-2004.) $)
  ifbi $p |- ( ( ph <-> ps ) -> if ( ph , A , B ) = if ( ps , A , B ) ) $=
    ( wb wa wn wo cif wceq dfbi3 iftrue eqcomd sylan9eq iffalse jaoi sylbi ) AB
    EABFZAGZBGZFZHACDIZBCDIZJZABKRUDUAABUBCUCACDLBUCCBCDLMNSTUBDUCACDOTUCDBCDOM
    NPQ $.

  ${
    ifbid.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Equivalence deduction for conditional operators.  (Contributed by NM,
       18-Apr-2005.) $)
    ifbid $p |- ( ph -> if ( ps , A , B ) = if ( ch , A , B ) ) $=
      ( wb cif wceq ifbi syl ) ABCGBDEHCDEHIFBCDEJK $.
  $}

  ${
    ifbieq1d.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    ifbieq1d.2 $e |- ( ph -> A = B ) $.
    $( Equivalence/equality deduction for conditional operators.  (Contributed
       by JJ, 25-Sep-2018.) $)
    ifbieq1d $p |- ( ph -> if ( ps , A , C ) = if ( ch , B , C ) ) $=
      ( cif ifbid ifeq1d eqtrd ) ABDFICDFICEFIABCDFGJACDEFHKL $.
  $}

  ${
    ifbieq2i.1 $e |- ( ph <-> ps ) $.
    ifbieq2i.2 $e |- A = B $.
    $( Equivalence/equality inference for conditional operators.  (Contributed
       by Paul Chapman, 22-Jun-2011.) $)
    ifbieq2i $p |- if ( ph , C , A ) = if ( ps , C , B ) $=
      ( cif wb wceq ifbi ax-mp ifeq2 eqtri ) AECHZBECHZBEDHZABIOPJFABECKLCDJPQJ
      GBCDEMLN $.
  $}

  ${
    ifbieq2d.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    ifbieq2d.2 $e |- ( ph -> A = B ) $.
    $( Equivalence/equality deduction for conditional operators.  (Contributed
       by Paul Chapman, 22-Jun-2011.) $)
    ifbieq2d $p |- ( ph -> if ( ps , C , A ) = if ( ch , C , B ) ) $=
      ( cif ifbid ifeq2d eqtrd ) ABFDICFDICFEIABCFDGJACDEFHKL $.
  $}

  ${
    ifbieq12i.1 $e |- ( ph <-> ps ) $.
    ifbieq12i.2 $e |- A = C $.
    ifbieq12i.3 $e |- B = D $.
    $( Equivalence deduction for conditional operators.  (Contributed by NM,
       18-Mar-2013.) $)
    ifbieq12i $p |- if ( ph , A , B ) = if ( ps , C , D ) $=
      ( cif wceq ifeq1 ax-mp ifbieq2i eqtri ) ACDJZAEDJZBEFJCEKPQKHACEDLMABDFEG
      INO $.
  $}

  ${
    ifbieq12d.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    ifbieq12d.2 $e |- ( ph -> A = C ) $.
    ifbieq12d.3 $e |- ( ph -> B = D ) $.
    $( Equivalence deduction for conditional operators.  (Contributed by Jeff
       Madsen, 2-Sep-2009.) $)
    ifbieq12d $p |- ( ph -> if ( ps , A , B ) = if ( ch , C , D ) ) $=
      ( cif ifbid ifeq12d eqtrd ) ABDEKCDEKCFGKABCDEHLACDFEGIJMN $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.  $d y ph $.  $d y ps $.
    nfifd.2 $e |- ( ph -> F/ x ps ) $.
    nfifd.3 $e |- ( ph -> F/_ x A ) $.
    nfifd.4 $e |- ( ph -> F/_ x B ) $.
    $( Deduction form of ~ nfif .  (Contributed by NM, 15-Feb-2013.)  (Revised
       by Mario Carneiro, 13-Oct-2016.) $)
    nfifd $p |- ( ph -> F/_ x if ( ps , A , B ) ) $=
      ( vy cif cv wcel wi wa cab dfif2 nfv nfcrd nfimd nfand nfabd nfcxfrd ) AC
      BDEJIKZELZBMZUCDLZBNZMZIOBIDEPAUHCIAIQAUEUGCAUDBCACIEHRFSAUFBCACIDGRFTSUA
      UB $.
  $}

  ${
    nfif.1 $e |- F/ x ph $.
    nfif.2 $e |- F/_ x A $.
    nfif.3 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for a conditional operator.
       (Contributed by NM, 16-Feb-2005.)  (Proof shortened by Andrew Salmon,
       26-Jun-2011.) $)
    nfif $p |- F/_ x if ( ph , A , B ) $=
      ( cif wnfc wtru wnf a1i nfifd mptru ) BACDHIJABCDABKJELBCIJFLBDIJGLMN $.
  $}

  ${
    ifeq1da.1 $e |- ( ( ph /\ ps ) -> A = B ) $.
    $( Conditional equality.  (Contributed by Jeff Madsen, 2-Sep-2009.) $)
    ifeq1da $p |- ( ph -> if ( ps , A , C ) = if ( ps , B , C ) ) $=
      ( cif wceq wa ifeq1d wn iffalse eqtr4d adantl pm2.61dan ) ABBCEGZBDEGZHZA
      BIBCDEFJBKZRASPEQBCELBDELMNO $.
  $}

  ${
    ifeq2da.1 $e |- ( ( ph /\ -. ps ) -> A = B ) $.
    $( Conditional equality.  (Contributed by Jeff Madsen, 2-Sep-2009.) $)
    ifeq2da $p |- ( ph -> if ( ps , C , A ) = if ( ps , C , B ) ) $=
      ( cif wceq iftrue eqtr4d adantl wn wa ifeq2d pm2.61dan ) ABBECGZBEDGZHZBR
      ABPEQBECIBEDIJKABLMBCDEFNO $.
  $}

  ${
    ifeq12da.1 $e |- ( ( ph /\ ps ) -> A = C ) $.
    ifeq12da.2 $e |- ( ( ph /\ -. ps ) -> B = D ) $.
    $( Equivalence deduction for conditional operators.  (Contributed by Wolf
       Lammen, 24-Jun-2021.) $)
    ifeq12da $p |- ( ph -> if ( ps , A , B ) = if ( ps , C , D ) ) $=
      ( cif wceq ifeq1da iftrue eqtr4d sylan9eq wn ifeq2da iffalse pm2.61dan )
      ABBCDIZBEFIZJABSBEDIZTABCEDGKBUAETBEDLBEFLMNABOZSBCFIZTABDFCHPUBUCFTBCFQB
      EFQMNR $.
  $}

  ${
    ifbieq12d2.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    ifbieq12d2.2 $e |- ( ( ph /\ ps ) -> A = C ) $.
    ifbieq12d2.3 $e |- ( ( ph /\ -. ps ) -> B = D ) $.
    $( Equivalence deduction for conditional operators.  (Contributed by
       Thierry Arnoux, 14-Feb-2017.)  (Proof shortened by Wolf Lammen,
       24-Jun-2021.) $)
    ifbieq12d2 $p |- ( ph -> if ( ps , A , B ) = if ( ch , C , D ) ) $=
      ( cif ifeq12da ifbid eqtrd ) ABDEKBFGKCFGKABDEFGIJLABCFGHMN $.
  $}

  ${
    ifclda.1 $e |- ( ( ph /\ ps ) -> A e. C ) $.
    ifclda.2 $e |- ( ( ph /\ -. ps ) -> B e. C ) $.
    $( Conditional closure.  (Contributed by Jeff Madsen, 2-Sep-2009.) $)
    ifclda $p |- ( ph -> if ( ps , A , B ) e. C ) $=
      ( cif wcel wa wceq iftrue adantl eqeltrd wn iffalse pm2.61dan ) ABBCDHZEI
      ABJRCEBRCKABCDLMFNABOZJRDESRDKABCDPMGNQ $.
  $}

  ${
    ifeqda.1 $e |- ( ( ph /\ ps ) -> A = C ) $.
    ifeqda.2 $e |- ( ( ph /\ -. ps ) -> B = C ) $.
    $( Separation of the values of the conditional operator.  (Contributed by
       Alexander van der Vekens, 13-Apr-2018.) $)
    ifeqda $p |- ( ph -> if ( ps , A , B ) = C ) $=
      ( cif wceq wa iftrue adantl eqtrd wn iffalse pm2.61dan ) ABBCDHZEIABJQCEB
      QCIABCDKLFMABNZJQDERQDIABCDOLGMP $.
  $}

  ${
    elimif.1 $e |- ( if ( ph , A , B ) = A -> ( ps <-> ch ) ) $.
    elimif.2 $e |- ( if ( ph , A , B ) = B -> ( ps <-> th ) ) $.
    $( Elimination of a conditional operator contained in a wff ` ps ` .
       (Contributed by NM, 15-Feb-2005.)  (Proof shortened by NM,
       25-Apr-2019.) $)
    elimif $p |- ( ps <-> ( ( ph /\ ch ) \/ ( -. ph /\ th ) ) ) $=
      ( cif wceq wb iftrue syl wn iffalse cases ) ABCDAAEFIZEJBCKAEFLGMANQFJBDK
      AEFOHMP $.
  $}

  ${
    ifboth.1 $e |- ( A = if ( ph , A , B ) -> ( ps <-> th ) ) $.
    ifboth.2 $e |- ( B = if ( ph , A , B ) -> ( ch <-> th ) ) $.
    ${
      ifbothda.3 $e |- ( ( et /\ ph ) -> ps ) $.
      ifbothda.4 $e |- ( ( et /\ -. ph ) -> ch ) $.
      $( A wff ` th ` containing a conditional operator is true when both of
         its cases are true.  (Contributed by NM, 15-Feb-2015.) $)
      ifbothda $p |- ( et -> th ) $=
        ( wa wb cif wceq iftrue eqcomd syl adantl mpbid wn iffalse pm2.61dan )
        EADEALBDJABDMZEAFAFGNZOUDAUEFAFGPQHRSTEAUAZLCDKUFCDMZEUFGUEOUGUFUEGAFGU
        BQIRSTUC $.
    $}

    $( A wff ` th ` containing a conditional operator is true when both of its
       cases are true.  (Contributed by NM, 3-Sep-2006.)  (Revised by Mario
       Carneiro, 15-Feb-2015.) $)
    ifboth $p |- ( ( ps /\ ch ) -> th ) $=
      ( wa simpll wn simplr ifbothda ) ABCDBCIEFGHBCAJBCAKLM $.
  $}

  $( Identical true and false arguments in the conditional operator.
     (Contributed by NM, 18-Apr-2005.) $)
  ifid $p |- if ( ph , A , A ) = A $=
    ( cif wceq iftrue iffalse pm2.61i ) AABBCBDABBEABBFG $.

  $( Expansion of an equality with a conditional operator.  (Contributed by NM,
     14-Feb-2005.) $)
  eqif $p |- ( A = if ( ph , B , C ) <->
             ( ( ph /\ A = B ) \/ ( -. ph /\ A = C ) ) ) $=
    ( cif wceq eqeq2 elimif ) ABACDEZFBCFBDFCDICBGIDBGH $.

  $( Another expression of the value of the ` if ` predicate, analogous to
     ~ eqif .  See also the more specialized ~ iftrue and ~ iffalse .
     (Contributed by BJ, 6-Apr-2019.) $)
  ifval $p |- ( A = if ( ph , B , C )
                             <-> ( ( ph -> A = B ) /\ ( -. ph -> A = C ) ) ) $=
    ( cif wceq wa wn wo wi eqif cases2 bitri ) BACDEFABCFZGAHZBDFZGIANJOPJGABCD
    KANPLM $.

  $( Membership in a conditional operator.  (Contributed by NM,
     14-Feb-2005.) $)
  elif $p |- ( A e. if ( ph , B , C ) <->
             ( ( ph /\ A e. B ) \/ ( -. ph /\ A e. C ) ) ) $=
    ( cif wcel eleq2 elimif ) ABACDEZFBCFBDFCDICBGIDBGH $.

  $( Membership of a conditional operator.  (Contributed by NM,
     10-Sep-2005.) $)
  ifel $p |- ( if ( ph , A , B ) e. C <->
             ( ( ph /\ A e. C ) \/ ( -. ph /\ B e. C ) ) ) $=
    ( cif wcel eleq1 elimif ) AABCEZDFBDFCDFBCIBDGICDGH $.

  $( Membership (closure) of a conditional operator.  (Contributed by NM,
     4-Apr-2005.) $)
  ifcl $p |- ( ( A e. C /\ B e. C ) -> if ( ph , A , B ) e. C ) $=
    ( wcel cif eleq1 ifboth ) ABDECDEABCFZDEBCBIDGCIDGH $.

  ${
    ifcld.a $e |- ( ph -> A e. C ) $.
    ifcld.b $e |- ( ph -> B e. C ) $.
    $( Membership (closure) of a conditional operator, deduction form.
       (Contributed by SO, 16-Jul-2018.) $)
    ifcld $p |- ( ph -> if ( ps , A , B ) e. C ) $=
      ( wcel cif ifcl syl2anc ) ACEHDEHBCDIEHFGBCDEJK $.
  $}

  ${
    ifcli.1 $e |- A e. C $.
    ifcli.2 $e |- B e. C $.
    $( Inference associated with ~ ifcl .  Membership (closure) of a
       conditional operator.  Also usable to keep a membership hypothesis for
       the weak deduction theorem ~ dedth when the special case ` B e. C ` is
       provable.  (Contributed by NM, 14-Aug-1999.)  (Proof shortened by BJ,
       1-Sep-2022.) $)
    ifcli $p |- if ( ph , A , B ) e. C $=
      ( wcel cif ifcl mp2an ) BDGCDGABCHDGEFABCDIJ $.
  $}

  $( Conditional operator existence.  (Contributed by NM, 21-Mar-2011.)  (Proof
     shortened by BJ, 1-Sep-2022.) $)
  ifexg $p |- ( ( A e. V /\ B e. W ) -> if ( ph , A , B ) e. _V ) $=
    ( wcel cvv cif elex ifcl syl2an ) BDFBGFCGFABCHGFCEFBDICEIABCGJK $.

  ${
    ifex.1 $e |- A e. _V $.
    ifex.2 $e |- B e. _V $.
    $( Conditional operator existence.  (Contributed by NM, 2-Sep-2004.) $)
    ifex $p |- if ( ph , A , B ) e. _V $=
      ( cvv ifcli ) ABCFDEG $.
  $}

  $( The possible values of a conditional operator.  (Contributed by NM,
     17-Jun-2007.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
  ifeqor $p |- ( if ( ph , A , B ) = A \/ if ( ph , A , B ) = B ) $=
    ( cif wceq wn iftrue con3i iffalsed orri ) ABCDZBEZKCELFABCALABCGHIJ $.

  $( Negating the first argument swaps the last two arguments of a conditional
     operator.  (Contributed by NM, 21-Jun-2007.) $)
  ifnot $p |- if ( -. ph , A , B ) = if ( ph , B , A ) $=
    ( wn cif wceq notnot iffalsed iftrue eqtr4d iffalse pm2.61i ) AADZBCEZACBEZ
    FANCOAMBCAGHACBIJMNBOMBCIACBKJL $.

  $( Rewrite a conjunction in a conditional as two nested conditionals.
     (Contributed by Mario Carneiro, 28-Jul-2014.) $)
  ifan $p |- if ( ( ph /\ ps ) , A , B ) = if ( ph , if ( ps , A , B ) , B ) $=
    ( wa cif wceq iftrue ibar ifbid eqtr2d simpl con3i iffalsed iffalse pm2.61i
    wn eqtr4d ) AABEZCDFZABCDFZDFZGAUBUATAUADHABSCDABIJKAQZTDUBUCSCDSAABLMNAUAD
    ORP $.

  $( Rewrite a disjunction in a conditional as two nested conditionals.
     (Contributed by Mario Carneiro, 28-Jul-2014.) $)
  ifor $p |- if ( ( ph \/ ps ) , A , B ) = if ( ph , A , if ( ps , A , B ) ) $=
    ( wo cif wceq iftrue orcs eqtr4d wn iffalse biorf ifbid eqtr2d pm2.61i ) AA
    BEZCDFZACBCDFZFZGARCTABRCGQCDHIACSHJAKZTSRACSLUABQCDABMNOP $.

  ${
    2if2.1 $e |- ( ( ph /\ ps ) -> D = A ) $.
    2if2.2 $e |- ( ( ph /\ -. ps /\ th ) -> D = B ) $.
    2if2.3 $e |- ( ( ph /\ -. ps /\ -. th ) -> D = C ) $.
    $( Resolve two nested conditionals.  (Contributed by Alexander van der
       Vekens, 27-Mar-2018.) $)
    2if2 $p |- ( ph -> D = if ( ps , A , if ( th , B , C ) ) ) $=
      ( cif wceq wa iftrue adantl eqtr4d wn 3expa iffalse pm2.61dan eqcomd
      eqtrd ) ABGBDCEFKZKZLABMGDUDHBUDDLABDUCNOPABQZMZGUCUDUFCGUCLUFCMGEUCAUECG
      ELIRCUCELUFCEFNOPUFCQZMGFUCAUEUGGFLJRUGFUCLUFUGUCFCEFSUAOUBTUEUDUCLABDUCS
      OPT $.
  $}

  $( Commute the conditions in two nested conditionals if both conditions are
     not simultaneously true.  (Contributed by SO, 15-Jul-2018.) $)
  ifcomnan $p |- ( -. ( ph /\ ps ) -> if ( ph , A , if ( ps , B , C ) ) =
      if ( ps , B , if ( ph , A , C ) ) ) $=
    ( wa wn wo cif wceq pm3.13 iffalse ifeq2d eqtr4d jaoi syl ) ABFGAGZBGZHACBD
    EIZIZBDACEIZIZJZABKQUCRQTSUBACSLQBUAEDACELMNRTUAUBRASECBDELMBDUALNOP $.

  ${
    $d y A $.  $d y B $.  $d y C $.  $d y ph $.  $d x y $.
    $( Distribute proper substitution through the conditional operator.
       (Contributed by NM, 24-Feb-2013.)  (Revised by NM, 19-Aug-2018.) $)
    csbif $p |- [_ A / x ]_ if ( ph , B , C )
          = if ( [. A / x ]. ph , [_ A / x ]_ B , [_ A / x ]_ C ) $=
      ( vy cvv wcel cif csb wsbc cv wsb csbeq1 ifbieq12d nfcsb1v csbeq1a csbprc
      wceq c0 dfsbcq2 eqeq12d vex nfs1v nfif sbequ12 csbief vtoclg ifeq12d ifid
      weq wn syl6req eqtrd pm2.61i ) CGHZBCADEIZJZABCKZBCDJZBCEJZIZSZBFLZUQJZAB
      FMZBVDDJZBVDEJZIZSVCFCGVDCSZVEURVIVBBVDCUQNVJVFUSVGVHUTVAABFCUABVDCDNBVDC
      ENOUBBVDUQVIFUCVFBVGVHABFUDBVDDPBVDEPUEBFUKAVFDEVGVHABFUFBVDDQBVDEQOUGUHU
      PULZURTVBBCUQRVKVBUSTTITVKUSUTTVATBCDRBCERUIUSTUJUMUNUO $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  The weak deduction theorem for set theory
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  This subsection contains a few results related to the weak deduction theorem
  in set theory.  For the weak deduction theorem in propositional calculus, see
  the section beginning with ~ elimh .  For more information on the weak
  deduction theorem, see the Weak Deduction Theorem page ~ mmdeduction.html .

  In a Hilbert system of logic (which consists of a set of axioms, modus
  ponens, and the generalization rule), converting a deduction to a proof using
  the Deduction Theorem (taught in introductory logic books) involves an
  exponential increase of the number of steps as hypotheses are successively
  eliminated.  Here is a trick that is not as general as the Deduction Theorem
  but requires only a linear increase in the number of steps.

  The general problem:  We want to convert a deduction
    P |- Q
  into a proof of the theorem
    |- P -> Q
  i.e., we want to eliminate the hypothesis P.  Normally this is done using the
  Deduction (meta)Theorem, which looks at the microscopic steps of the
  deduction and usually doubles or triples the number of these microscopic
  steps for each hypothesis that is eliminated.  We will look at a special case
  of this problem, without appealing to the Deduction Theorem.

  We assume ZF with class notation.  A and B are arbitrary (possibly proper)
  classes.  P, Q, R, S and T are wffs.

  We define the conditional operator, if(P, A, B), as follows:
    if(P, A, B) =def= { x | (x \in A & P) v (x \in B & -. P) }
  (where x does not occur in A, B, or P).

  Lemma 1.
    A = if(P, A, B) -> (P <-> R), B = if(P, A, B) -> (S <-> R), S |- R
  Proof:  Logic and Axiom of Extensionality.

  Lemma 2.
    A = if(P, A, B) -> (Q <-> T), T |- P -> Q
  Proof:  Logic and Axiom of Extensionality.

  Here is a simple example that illustrates how it works.  Suppose we have a
  deduction
    Ord A |- Tr A
  which means, "Assume A is an ordinal class.  Then A is a transitive class."
  Note that A is a class variable that may be substituted with any class
  expression, so this is really a deduction scheme.

  We want to convert this to a proof of the theorem (scheme)
    |- Ord A -> Tr A.

  The catch is that we must be able to prove "Ord A" for at least one object A
  (and this is what makes it weaker than the ordinary Deduction Theorem).
  However, it is easy to prove |- Ord 0 (the empty set is ordinal).  (For a
  typical textbook "theorem", i.e., deduction, there is usually at least one
  object satisfying each hypothesis, otherwise the theorem would not be very
  useful.  We can always go back to the standard Deduction Theorem for those
  hypotheses where this is not the case.)  Continuing with the example:

  Equality axioms (and Extensionality) yield
    |- A = if(Ord A, A, 0) -> (Ord A <-> Ord if(Ord A, A, 0))    (1)
    |- 0 = if(Ord A, A, 0) -> (Ord 0 <-> Ord if(Ord A, A, 0))    (2)
  From (1), (2) and |- Ord 0, Lemma 1 yields
    |- Ord if(Ord A, A, 0)                                       (3)
  From (3) and substituting if(Ord A, A, 0) for
  A in the original deduction,
    |- Tr if(Ord A, A, 0)                                        (4)
  Equality axioms (and Extensionality) yield
    |- A = if(Ord A, A, 0) -> (Tr A <-> Tr if(Ord A, A, 0))      (5)
  From (4) and (5), Lemma 2 yields
    |- Ord A -> Tr A                                             (Q.E.D.)

$)

  ${
    dedth.1 $e |- ( A = if ( ph , A , B ) -> ( ps <-> ch ) ) $.
    dedth.2 $e |- ch $.
    $( Weak deduction theorem that eliminates a hypothesis ` ph ` , making it
       become an antecedent.  We assume that a proof exists for ` ph ` when the
       class variable ` A ` is replaced with a specific class ` B ` .  The
       hypothesis ` ch ` should be assigned to the inference, and the inference
       hypothesis eliminated with ~ elimhyp .  If the inference has other
       hypotheses with class variable ` A ` , these can be kept by assigning
       ~ keephyp to them.  For more information, see the Weak Deduction Theorem
       page ~ mmdeduction.html .  (Contributed by NM, 15-May-1999.) $)
    dedth $p |- ( ph -> ps ) $=
      ( cif wceq wb iftrue eqcomd syl mpbiri ) ABCGADADEHZIBCJAODADEKLFMN $.
  $}

  ${
    dedth2h.1 $e |- ( A = if ( ph , A , C ) -> ( ch <-> th ) ) $.
    dedth2h.2 $e |- ( B = if ( ps , B , D ) -> ( th <-> ta ) ) $.
    dedth2h.3 $e |- ta $.
    $( Weak deduction theorem eliminating two hypotheses.  This theorem is
       simpler to use than ~ dedth2v but requires that each hypothesis have
       exactly one class variable.  See also comments in ~ dedth .
       (Contributed by NM, 15-May-1999.) $)
    dedth2h $p |- ( ( ph /\ ps ) -> ch ) $=
      ( wi cif wceq imbi2d dedth imp ) ABCABCMBDMFHFAFHNOCDBJPBDEGIKLQQR $.
  $}

  ${
    dedth3h.1 $e |- ( A = if ( ph , A , D ) -> ( th <-> ta ) ) $.
    dedth3h.2 $e |- ( B = if ( ps , B , R ) -> ( ta <-> et ) ) $.
    dedth3h.3 $e |- ( C = if ( ch , C , S ) -> ( et <-> ze ) ) $.
    dedth3h.4 $e |- ze $.
    $( Weak deduction theorem eliminating three hypotheses.  See comments in
       ~ dedth2h .  (Contributed by NM, 15-May-1999.) $)
    dedth3h $p |- ( ( ph /\ ps /\ ch ) -> th ) $=
      ( wa wi cif wceq imbi2d dedth2h dedth 3impib ) ABCDABCRZDSUFESHKHAHKTUADE
      UFNUBBCEFGIJLMOPQUCUDUE $.
  $}

  ${
    dedth4h.1 $e |- ( A = if ( ph , A , R ) -> ( ta <-> et ) ) $.
    dedth4h.2 $e |- ( B = if ( ps , B , S ) -> ( et <-> ze ) ) $.
    dedth4h.3 $e |- ( C = if ( ch , C , F ) -> ( ze <-> si ) ) $.
    dedth4h.4 $e |- ( D = if ( th , D , G ) -> ( si <-> rh ) ) $.
    dedth4h.5 $e |- rh $.
    $( Weak deduction theorem eliminating four hypotheses.  See comments in
       ~ dedth2h .  (Contributed by NM, 16-May-1999.) $)
    dedth4h $p |- ( ( ( ph /\ ps ) /\ ( ch /\ th ) ) -> ta ) $=
      ( wa wi cif wceq imbi2d dedth2h imp ) ABUCCDUCZEABUJEUDUJFUDUJGUDJKNOJAJN
      UEUFEFUJRUGKBKOUEUFFGUJSUGCDGHILMPQTUAUBUHUHUI $.
  $}

  ${
    dedth2v.1 $e |- ( A = if ( ph , A , C ) -> ( ps <-> ch ) ) $.
    dedth2v.2 $e |- ( B = if ( ph , B , D ) -> ( ch <-> th ) ) $.
    dedth2v.3 $e |- th $.
    $( Weak deduction theorem for eliminating a hypothesis with 2 class
       variables.  Note: if the hypothesis can be separated into two
       hypotheses, each with one class variable, then ~ dedth2h is simpler to
       use.  See also comments in ~ dedth .  (Contributed by NM, 13-Aug-1999.)
       (Proof shortened by Eric Schmidt, 28-Jul-2009.) $)
    dedth2v $p |- ( ph -> ps ) $=
      ( dedth2h anidms ) ABAABCDEFGHIJKLM $.
  $}

  ${
    dedth3v.1 $e |- ( A = if ( ph , A , D ) -> ( ps <-> ch ) ) $.
    dedth3v.2 $e |- ( B = if ( ph , B , R ) -> ( ch <-> th ) ) $.
    dedth3v.3 $e |- ( C = if ( ph , C , S ) -> ( th <-> ta ) ) $.
    dedth3v.4 $e |- ta $.
    $( Weak deduction theorem for eliminating a hypothesis with 3 class
       variables.  See comments in ~ dedth2v .  (Contributed by NM,
       13-Aug-1999.)  (Proof shortened by Eric Schmidt, 28-Jul-2009.) $)
    dedth3v $p |- ( ph -> ps ) $=
      ( dedth3h 3anidm12 anidms ) ABAABAAABCDEFGHIJKLMNOPQR $.
  $}

  ${
    dedth4v.1 $e |- ( A = if ( ph , A , R ) -> ( ps <-> ch ) ) $.
    dedth4v.2 $e |- ( B = if ( ph , B , S ) -> ( ch <-> th ) ) $.
    dedth4v.3 $e |- ( C = if ( ph , C , T ) -> ( th <-> ta ) ) $.
    dedth4v.4 $e |- ( D = if ( ph , D , U ) -> ( ta <-> et ) ) $.
    dedth4v.5 $e |- et $.
    $( Weak deduction theorem for eliminating a hypothesis with 4 class
       variables.  See comments in ~ dedth2v .  (Contributed by NM,
       21-Apr-2007.)  (Proof shortened by Eric Schmidt, 28-Jul-2009.) $)
    dedth4v $p |- ( ph -> ps ) $=
      ( anidms wa dedth4h ) ABAAUABAAAABCDEFGHIJKLMNOPQRSUBTT $.
  $}

  ${
    elimhyp.1 $e |- ( A = if ( ph , A , B ) -> ( ph <-> ps ) ) $.
    elimhyp.2 $e |- ( B = if ( ph , A , B ) -> ( ch <-> ps ) ) $.
    elimhyp.3 $e |- ch $.
    $( Eliminate a hypothesis containing class variable ` A ` when it is known
       for a specific class ` B ` .  For more information, see comments in
       ~ dedth .  (Contributed by NM, 15-May-1999.) $)
    elimhyp $p |- ps $=
      ( cif wceq wb iftrue eqcomd syl ibi wn iffalse mpbii pm2.61i ) ABABADADEI
      ZJABKATDADELMFNOAPZCBHUAETJCBKUATEADEQMGNRS $.
  $}

  ${
    elimhyp2v.1 $e |- ( A = if ( ph , A , C ) -> ( ph <-> ch ) ) $.
    elimhyp2v.2 $e |- ( B = if ( ph , B , D ) -> ( ch <-> th ) ) $.
    elimhyp2v.3 $e |- ( C = if ( ph , A , C ) -> ( ta <-> et ) ) $.
    elimhyp2v.4 $e |- ( D = if ( ph , B , D ) -> ( et <-> th ) ) $.
    elimhyp2v.5 $e |- ta $.
    $( Eliminate a hypothesis containing 2 class variables.  (Contributed by
       NM, 14-Aug-1999.) $)
    elimhyp2v $p |- th $=
      ( cif wceq wb iftrue eqcomd syl bitrd ibi wn iffalse mpbii pm2.61i ) ACAC
      AABCAFAFHOZPABQAUGFAFHRSJTAGAGIOZPBCQAUHGAGIRSKTUAUBAUCZDCNUIDECUIHUGPDEQ
      UIUGHAFHUDSLTUIIUHPECQUIUHIAGIUDSMTUAUEUF $.
  $}

  ${
    elimhyp3v.1 $e |- ( A = if ( ph , A , D ) -> ( ph <-> ch ) ) $.
    elimhyp3v.2 $e |- ( B = if ( ph , B , R ) -> ( ch <-> th ) ) $.
    elimhyp3v.3 $e |- ( C = if ( ph , C , S ) -> ( th <-> ta ) ) $.
    elimhyp3v.4 $e |- ( D = if ( ph , A , D ) -> ( et <-> ze ) ) $.
    elimhyp3v.5 $e |- ( R = if ( ph , B , R ) -> ( ze <-> si ) ) $.
    elimhyp3v.6 $e |- ( S = if ( ph , C , S ) -> ( si <-> ta ) ) $.
    elimhyp3v.7 $e |- et $.
    $( Eliminate a hypothesis containing 3 class variables.  (Contributed by
       NM, 14-Aug-1999.) $)
    elimhyp3v $p |- ta $=
      ( cif wceq wb iftrue eqcomd syl 3bitrd ibi wn iffalse mpbii pm2.61i ) ADA
      DAABCDAHAHKUAZUBABUCAUMHAHKUDUENUFAIAILUAZUBBCUCAUNIAILUDUEOUFAJAJMUAZUBC
      DUCAUOJAJMUDUEPUFUGUHAUIZEDTUPEFGDUPKUMUBEFUCUPUMKAHKUJUEQUFUPLUNUBFGUCUP
      UNLAILUJUERUFUPMUOUBGDUCUPUOMAJMUJUESUFUGUKUL $.
  $}

  ${
    elimhyp4v.1 $e |- ( A = if ( ph , A , D ) -> ( ph <-> ch ) ) $.
    elimhyp4v.2 $e |- ( B = if ( ph , B , R ) -> ( ch <-> th ) ) $.
    elimhyp4v.3 $e |- ( C = if ( ph , C , S ) -> ( th <-> ta ) ) $.
    elimhyp4v.4 $e |- ( F = if ( ph , F , G ) -> ( ta <-> ps ) ) $.
    elimhyp4v.5 $e |- ( D = if ( ph , A , D ) -> ( et <-> ze ) ) $.
    elimhyp4v.6 $e |- ( R = if ( ph , B , R ) -> ( ze <-> si ) ) $.
    elimhyp4v.7 $e |- ( S = if ( ph , C , S ) -> ( si <-> rh ) ) $.
    elimhyp4v.8 $e |- ( G = if ( ph , F , G ) -> ( rh <-> ps ) ) $.
    elimhyp4v.9 $e |- et $.
    $( Eliminate a hypothesis containing 4 class variables (for use with the
       weak deduction theorem ~ dedth ).  (Contributed by NM, 16-Apr-2005.) $)
    elimhyp4v $p |- ps $=
      ( cif wceq wb iftrue eqcomd syl bitrd 3bitrd ibi wn iffalse mpbii pm2.61i
      ) ABABAADEBAACDAJAJMUGZUHACUIAUTJAJMUJUKRULAKAKNUGZUHCDUIAVAKAKNUJUKSULUM
      ALALOUGZUHDEUIAVBLALOUJUKTULAPAPQUGZUHEBUIAVCPAPQUJUKUAULUNUOAUPZFBUFVDFH
      IBVDFGHVDMUTUHFGUIVDUTMAJMUQUKUBULVDNVAUHGHUIVDVANAKNUQUKUCULUMVDOVBUHHIU
      IVDVBOALOUQUKUDULVDQVCUHIBUIVDVCQAPQUQUKUEULUNURUS $.
  $}

  ${
    elimel.1 $e |- B e. C $.
    $( Eliminate a membership hypothesis for weak deduction theorem, when
       special case ` B e. C ` is provable.  (Contributed by NM,
       15-May-1999.) $)
    elimel $p |- if ( A e. C , A , B ) e. C $=
      ( wcel cif eleq1 elimhyp ) ACEZIABFZCEBCEABAJCGBJCGDH $.
  $}

  ${
    elimdhyp.1 $e |- ( ph -> ps ) $.
    elimdhyp.2 $e |- ( A = if ( ph , A , B ) -> ( ps <-> ch ) ) $.
    elimdhyp.3 $e |- ( B = if ( ph , A , B ) -> ( th <-> ch ) ) $.
    elimdhyp.4 $e |- th $.
    $( Version of ~ elimhyp where the hypothesis is deduced from the final
       antecedent.  See ~ divalg for an example of its use.  (Contributed by
       Paul Chapman, 25-Mar-2008.) $)
    elimdhyp $p |- ch $=
      ( cif wceq wb iftrue eqcomd syl mpbid wn iffalse mpbii pm2.61i ) ACABCGAE
      AEFKZLBCMAUBEAEFNOHPQARZDCJUCFUBLDCMUCUBFAEFSOIPTUA $.
  $}

  ${
    keephyp.1 $e |- ( A = if ( ph , A , B ) -> ( ps <-> th ) ) $.
    keephyp.2 $e |- ( B = if ( ph , A , B ) -> ( ch <-> th ) ) $.
    keephyp.3 $e |- ps $.
    keephyp.4 $e |- ch $.
    $( Transform a hypothesis ` ps ` that we want to keep (but contains the
       same class variable ` A ` used in the eliminated hypothesis) for use
       with the weak deduction theorem.  (Contributed by NM, 15-May-1999.) $)
    keephyp $p |- th $=
      ( ifboth mp2an ) BCDIJABCDEFGHKL $.
  $}

  ${
    keephyp2v.1 $e |- ( A = if ( ph , A , C ) -> ( ps <-> ch ) ) $.
    keephyp2v.2 $e |- ( B = if ( ph , B , D ) -> ( ch <-> th ) ) $.
    keephyp2v.3 $e |- ( C = if ( ph , A , C ) -> ( ta <-> et ) ) $.
    keephyp2v.4 $e |- ( D = if ( ph , B , D ) -> ( et <-> th ) ) $.
    keephyp2v.5 $e |- ps $.
    keephyp2v.6 $e |- ta $.
    $( Keep a hypothesis containing 2 class variables (for use with the weak
       deduction theorem ~ dedth ).  (Contributed by NM, 16-Apr-2005.) $)
    keephyp2v $p |- th $=
      ( wceq wb eqcomd syl cif iftrue bitrd mpbii wn iffalse pm2.61i ) ADABDOAB
      CDAGAGIUAZQBCRAUHGAGIUBSKTAHAHJUAZQCDRAUIHAHJUBSLTUCUDAUEZEDPUJEFDUJIUHQE
      FRUJUHIAGIUFSMTUJJUIQFDRUJUIJAHJUFSNTUCUDUG $.
  $}

  ${
    keephyp3v.1 $e |- ( A = if ( ph , A , D ) -> ( rh <-> ch ) ) $.
    keephyp3v.2 $e |- ( B = if ( ph , B , R ) -> ( ch <-> th ) ) $.
    keephyp3v.3 $e |- ( C = if ( ph , C , S ) -> ( th <-> ta ) ) $.
    keephyp3v.4 $e |- ( D = if ( ph , A , D ) -> ( et <-> ze ) ) $.
    keephyp3v.5 $e |- ( R = if ( ph , B , R ) -> ( ze <-> si ) ) $.
    keephyp3v.6 $e |- ( S = if ( ph , C , S ) -> ( si <-> ta ) ) $.
    keephyp3v.7 $e |- rh $.
    keephyp3v.8 $e |- et $.
    $( Keep a hypothesis containing 3 class variables.  (Contributed by NM,
       27-Sep-1999.) $)
    keephyp3v $p |- ta $=
      ( cif wceq wb iftrue eqcomd syl 3bitrd mpbii wn iffalse pm2.61i ) ADAHDUA
      AHBCDAIAILUCZUDHBUEAUNIAILUFUGOUHAJAJMUCZUDBCUEAUOJAJMUFUGPUHAKAKNUCZUDCD
      UEAUPKAKNUFUGQUHUIUJAUKZEDUBUQEFGDUQLUNUDEFUEUQUNLAILULUGRUHUQMUOUDFGUEUQ
      UOMAJMULUGSUHUQNUPUDGDUEUQUPNAKNULUGTUHUIUJUM $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Power classes
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Declare the symbol for power class. $)
  $c ~P $.  $( Calligraphic P $)

  $( Extend class notation to include power class.  (The tilde in the Metamath
     token is meant to suggest the calligraphic font of the P.) $)
  cpw $a class ~P A $.

  ${
    $d x A $.  $d y A $.  $d z x $.  $d z y $.  $d z A $.
    $( Soundness justification theorem for ~ df-pw .  (Contributed by Rodolfo
       Medina, 28-Apr-2010.)  (Proof shortened by Andrew Salmon,
       29-Jun-2011.) $)
    pwjust $p |- { x | x C_ A } = { y | y C_ A } $=
      ( vz cv wss cab sseq1 cbvabv eqtri ) AEZCFZAGDEZCFZDGBEZCFZBGLNADKMCHINPD
      BMOCHIJ $.
  $}

  ${
    $d x A $.
    $( Define power class.  Definition 5.10 of [TakeutiZaring] p. 17, but we
       also let it apply to proper classes, i.e. those that are not members of
       ` _V ` .  When applied to a set, this produces its power set.  A power
       set of S is the set of all subsets of S, including the empty set and S
       itself.  For example, if ` A = { 3 , 5 , 7 } ` , then
       ` ~P A = { (/) , { 3 } , { 5 } , { 7 } , { 3 , 5 } , `
       ` { 3 , 7 } , { 5 , 7 } , { 3 , 5 , 7 } } ` ( ~ ex-pw ).  We will later
       introduce the Axiom of Power Sets ~ ax-pow , which can be expressed in
       class notation per ~ pwexg .  Still later we will prove, in ~ hashpw ,
       that the size of the power set of a finite set is 2 raised to the power
       of the size of the set.  (Contributed by NM, 24-Jun-1993.) $)
    df-pw $a |- ~P A = { x | x C_ A } $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Equality theorem for power class.  (Contributed by NM, 21-Jun-1993.) $)
    pweq $p |- ( A = B -> ~P A = ~P B ) $=
      ( vx wceq cv wss cab cpw sseq2 abbidv df-pw 3eqtr4g ) ABDZCEZAFZCGNBFZCGA
      HBHMOPCABNIJCAKCBKL $.
  $}

  ${
    pweqi.1 $e |- A = B $.
    $( Equality inference for power class.  (Contributed by NM,
       27-Nov-2013.) $)
    pweqi $p |- ~P A = ~P B $=
      ( wceq cpw pweq ax-mp ) ABDAEBEDCABFG $.
  $}

  ${
    pweqd.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for power class.  (Contributed by NM,
       27-Nov-2013.) $)
    pweqd $p |- ( ph -> ~P A = ~P B ) $=
      ( wceq cpw pweq syl ) ABCEBFCFEDBCGH $.
  $}

  ${
    $d A x $.  $d B x $.
    ${
      elpw.1 $e |- A e. _V $.
      $( Membership in a power class.  Theorem 86 of [Suppes] p. 47.
         (Contributed by NM, 31-Dec-1993.) $)
      elpw $p |- ( A e. ~P B <-> A C_ B ) $=
        ( vx cv wss cpw sseq1 df-pw elab2 ) DEZBFABFDABGCKABHDBIJ $.
    $}

    $( Setvar variable membership in a power class.  See ~ elpw .  (Contributed
       by David A. Wheeler, 8-Dec-2018.) $)
    selpw $p |- ( x e. ~P A <-> x C_ A ) $=
      ( cv vex elpw ) ACBADE $.

    $( Membership in a power class.  Theorem 86 of [Suppes] p. 47.  See also
       ~ elpw2g .  (Contributed by NM, 6-Aug-2000.) $)
    elpwg $p |- ( A e. V -> ( A e. ~P B <-> A C_ B ) ) $=
      ( vx cv cpw wcel wss eleq1 sseq1 selpw vtoclbg ) DEZBFZGMBHANGABHDACMANIM
      ABJDBKL $.
  $}

  ${
    elpwd.1 $e |- ( ph -> A e. V ) $.
    elpwd.2 $e |- ( ph -> A C_ B ) $.
    $( Membership in a power class.  (Contributed by Glauco Siliprandi,
       11-Oct-2020.) $)
    elpwd $p |- ( ph -> A e. ~P B ) $=
      ( cpw wcel wss wb elpwg syl mpbird ) ABCGHZBCIZFABDHNOJEBCDKLM $.
  $}

  $( Subset relation implied by membership in a power class.  (Contributed by
     NM, 17-Feb-2007.) $)
  elpwi $p |- ( A e. ~P B -> A C_ B ) $=
    ( cpw wcel wss elpwg ibi ) ABCZDABEABHFG $.

  $( Characterization of the elements of a power class.  (Contributed by BJ,
     29-Apr-2021.) $)
  elpwb $p |- ( A e. ~P B <-> ( A e. _V /\ A C_ B ) ) $=
    ( cpw wcel cvv wss elex elpwg biadanii ) ABCZDAEDABFAJGABEHI $.

  ${
    elpwid.1 $e |- ( ph -> A e. ~P B ) $.
    $( An element of a power class is a subclass.  Deduction form of ~ elpwi .
       (Contributed by David Moews, 1-May-2017.) $)
    elpwid $p |- ( ph -> A C_ B ) $=
      ( cpw wcel wss elpwi syl ) ABCEFBCGDBCHI $.
  $}

  $( If ` A ` belongs to a part of ` C ` then ` A ` belongs to ` C ` .
     (Contributed by FL, 3-Aug-2009.) $)
  elelpwi $p |- ( ( A e. B /\ B e. ~P C ) -> A e. C ) $=
    ( cpw wcel elpwi sseld impcom ) BCDEZABEACEIBCABCFGH $.

  ${
    $d y A $.  $d x y $.
    nfpw.1 $e |- F/_ x A $.
    $( Bound-variable hypothesis builder for power class.  (Contributed by NM,
       28-Oct-2003.)  (Revised by Mario Carneiro, 13-Oct-2016.) $)
    nfpw $p |- F/_ x ~P A $=
      ( vy cpw cv wss cab df-pw nfcv nfss nfab nfcxfr ) ABEDFZBGZDHDBIOADANBANJ
      CKLM $.
  $}

  $( Membership of the original in a power set.  (Contributed by Stefan O'Rear,
     1-Feb-2015.) $)
  pwidg $p |- ( A e. V -> A e. ~P A ) $=
    ( wcel cpw wss ssid elpwg mpbiri ) ABCAADCAAEAFAABGH $.

  ${
    pwid.1 $e |- A e. _V $.
    $( A set is a member of its power class.  Theorem 87 of [Suppes] p. 47.
       (Contributed by NM, 5-Aug-1993.) $)
    pwid $p |- A e. ~P A $=
      ( cvv wcel cpw pwidg ax-mp ) ACDAAEDBACFG $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Subclass relationship for power class.  (Contributed by NM,
       21-Jun-2009.) $)
    pwss $p |- ( ~P A C_ B <-> A. x ( x C_ A -> x e. B ) ) $=
      ( cpw wss cv wcel wi wal dfss2 selpw imbi1i albii bitri ) BDZCEAFZOGZPCGZ
      HZAIPBEZRHZAIAOCJSUAAQTRABKLMN $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Unordered and ordered pairs
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Declare new symbols needed. $)
  $c <. $.  $( Bracket (the period distinguishes it from 'less than') $)
  $c >. $.  $( Bracket (the period distinguishes it from 'greater than') $)

  ${
    $d x A $.  $d y A $.  $d z x $.  $d z y $.  $d z A $.
    $( Soundness justification theorem for ~ df-sn .  (Contributed by Rodolfo
       Medina, 28-Apr-2010.)  (Proof shortened by Andrew Salmon,
       29-Jun-2011.) $)
    snjust $p |- { x | x = A } = { y | y = A } $=
      ( vz cv wceq cab eqeq1 cbvabv eqtri ) AEZCFZAGDEZCFZDGBEZCFZBGLNADKMCHINP
      DBMOCHIJ $.
  $}

  $( Extend class notation to include singleton. $)
  csn $a class { A } $.

  ${
    $d x A $.
    $( Define the singleton of a class.  Definition 7.1 of [Quine] p. 48.  For
       convenience, it is well-defined for proper classes, i.e., those that are
       not elements of ` _V ` , see ~ snprc .  For an alternate definition see
       ~ dfsn2 .  (Contributed by NM, 21-Jun-1993.) $)
    df-sn $a |- { A } = { x | x = A } $.
  $}

  $( Extend class notation to include unordered pair. $)
  cpr $a class { A , B } $.

  $( Define unordered pair of classes.  Definition 7.1 of [Quine] p. 48.  For
     example, ` A e. { 1 , -u 1 } -> ( A ^ 2 ) = 1 ` ( ~ ex-pr ).  They are
     unordered, so ` { A , B } = { B , A } ` as proven by ~ prcom .  For a more
     traditional definition, but requiring a dummy variable, see ~ dfpr2 .
     ` { A , A } ` is also an unordered pair, but also a singleton because of
     ` { A } = { A , A } ` (see ~ dfsn2 ).  Therefore, ` { A , B } ` is called
     a _proper (unordered) pair_ iff ` A =/= B ` and ` A ` and ` B ` are sets.
     (Contributed by NM, 21-Jun-1993.) $)
  df-pr $a |- { A , B } = ( { A } u. { B } ) $.

  $( Extend class notation to include unordered triplet. $)
  ctp $a class { A , B , C } $.

  $( Define unordered triple of classes.  Definition of [Enderton] p. 19.
     (Contributed by NM, 9-Apr-1994.) $)
  df-tp $a |- { A , B , C } = ( { A , B } u. { C } ) $.

  $( Extend class notation to include ordered pair. $)
  cop $a class <. A , B >. $.

  ${
    $d x A $.  $d x B $.
    $( Definition of an ordered pair, equivalent to Kuratowski's definition
       ` { { A } , { A , B } } ` when the arguments are sets.  Since the
       behavior of Kuratowski definition is not very useful for proper classes,
       we define it to be empty in this case (see ~ opprc1 , ~ opprc2 , and
       ~ 0nelop ).  For Kuratowski's actual definition when the arguments are
       sets, see ~ dfop .  For the justifying theorem (for sets) see ~ opth .
       See ~ dfopif for an equivalent formulation using the ` if ` operation.

       Definition 9.1 of [Quine] p. 58 defines an ordered pair unconditionally
       as ` <. A , B >. = { { A } , { A , B } } ` , which has different
       behavior from our ~ df-op when the arguments are proper classes.
       Ordinarily this difference is not important, since neither definition is
       meaningful in that case.  Our ~ df-op was chosen because it often makes
       proofs shorter by eliminating unnecessary sethood hypotheses.

       There are other ways to define ordered pairs.  The basic requirement is
       that two ordered pairs are equal iff their respective members are equal.
       In 1914 Norbert Wiener gave the first successful definition
       ` <. A , B >. ` _2 ` = { { { A } , (/) } , { { B } } } ` , justified by
       ~ opthwiener .  This was simplified by Kazimierz Kuratowski in 1921 to
       our present definition.  An even simpler definition ` <. A , B >. ` _3
       ` = { A , { A , B } } ` is justified by ~ opthreg , but it requires the
       Axiom of Regularity for its justification and is not commonly used.  A
       definition that also works for proper classes is ` <. A , B >. ` _4
       ` = ( ( A X. { (/) } ) u. ( B X. { { (/) } } ) ) ` , justified by
       ~ opthprc .  Nearly at the same time as Norbert Wiener, Felix Hausdorff
       proposed the following definition in "Grundz&uuml;ge der Mengenlehre"
       ("Basics of Set Theory"), p. 32, in 1914: ` <. A , B >. ` _5
       ` = { { A , O } , { B , T } } ` .  Hausdorff used ` 1 ` and ` 2 `
       instead of ` O ` and ` T ` , but actually any two different fixed sets
       will do (e.g., ` O = (/) ` and ` T = { (/) } ` , see ~ 0nep0 ).
       Furthermore, Hausdorff demanded that ` O ` and ` T ` are both different
       from ` A ` as well as ` B ` , which is actually not necessary (at least
       not in full extent), see ~ opthhausdorff0 and ~ opthhausdorff .  If we
       restrict our sets to nonnegative integers, an ordered pair definition
       that involves only elementary arithmetic is provided by ~ nn0opthi .  An
       ordered pair of real numbers can also be represented by a complex number
       as shown by ~ cru .  Kuratowski's ordered pair definition is standard
       for ZFC set theory, but it is very inconvenient to use in New
       Foundations theory because it is not type-level; a common alternate
       definition in New Foundations is the definition from [Rosser] p. 281.

       Since there are other ways to define ordered pairs, we discourage direct
       use of this definition so that most theorems won't depend on this
       particular construction; theorems will instead rely on ~ dfopif .
       (Contributed by NM, 28-May-1995.)  (Revised by Mario Carneiro,
       26-Apr-2015.)  (Avoid depending on this detail.) $)
    df-op $a |- <. A , B >. = { x |
      ( A e. _V /\ B e. _V /\ x e. { { A } , { A , B } } ) } $.
  $}

  $( Extend class notation to include ordered triple. $)
  cotp $a class <. A , B , C >. $.

  $( Define ordered triple of classes.  Definition of ordered triple in [Stoll]
     p. 25.  (Contributed by NM, 3-Apr-2015.) $)
  df-ot $a |- <. A , B , C >. = <. <. A , B >. , C >. $.

  ${
    $d x A $.  $d x B $.
    $( Equality theorem for singletons.  Part of Exercise 4 of [TakeutiZaring]
       p. 15.  (Contributed by NM, 21-Jun-1993.) $)
    sneq $p |- ( A = B -> { A } = { B } ) $=
      ( vx wceq cv cab csn eqeq2 abbidv df-sn 3eqtr4g ) ABDZCEZADZCFMBDZCFAGBGL
      NOCABMHICAJCBJK $.
  $}

  ${
    sneqi.1 $e |- A = B $.
    $( Equality inference for singletons.  (Contributed by NM, 22-Jan-2004.) $)
    sneqi $p |- { A } = { B } $=
      ( wceq csn sneq ax-mp ) ABDAEBEDCABFG $.
  $}

  ${
    sneqd.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for singletons.  (Contributed by NM, 22-Jan-2004.) $)
    sneqd $p |- ( ph -> { A } = { B } ) $=
      ( wceq csn sneq syl ) ABCEBFCFEDBCGH $.
  $}

  $( Alternate definition of singleton.  Definition 5.1 of [TakeutiZaring]
     p. 15.  (Contributed by NM, 24-Apr-1994.) $)
  dfsn2 $p |- { A } = { A , A } $=
    ( cpr csn cun df-pr unidm eqtr2i ) AABACZHDHAAEHFG $.

  ${
    $d A x $.  $d B x $.
    $( There is exactly one element in a singleton.  Exercise 2 of
       [TakeutiZaring] p. 15 (generalized).  (Contributed by NM, 13-Sep-1995.)
       (Proof shortened by Andrew Salmon, 29-Jun-2011.) $)
    elsng $p |- ( A e. V -> ( A e. { B } <-> A = B ) ) $=
      ( vx cv wceq csn eqeq1 df-sn elab2g ) DEZBFABFDABGCKABHDBIJ $.
  $}

  ${
    elsn.1 $e |- A e. _V $.
    $( There is exactly one element in a singleton.  Exercise 2 of
       [TakeutiZaring] p. 15.  (Contributed by NM, 13-Sep-1995.) $)
    elsn $p |- ( A e. { B } <-> A = B ) $=
      ( cvv wcel csn wceq wb elsng ax-mp ) ADEABFEABGHCABDIJ $.
  $}

  $( There is only one element in a singleton.  Exercise 2 of [TakeutiZaring]
     p. 15.  (Contributed by NM, 21-Jun-1993.) $)
  velsn $p |- ( x e. { A } <-> x = A ) $=
    ( cv vex elsn ) ACBADE $.

  $( There is only one element in a singleton.  (Contributed by NM,
     5-Jun-1994.) $)
  elsni $p |- ( A e. { B } -> A = B ) $=
    ( csn wcel wceq elsng ibi ) ABCZDABEABHFG $.

  ${
    $d Y x $.
    $( Condition for a class abstraction to be a singleton.  Formerly part of
       proof of ~ dfiota2 .  (Contributed by Andrew Salmon, 30-Jun-2011.)
       (Revised by AV, 24-Aug-2022.) $)
    absn $p |- ( { x | ph } = { Y } <-> A. x ( ph <-> x = Y ) ) $=
      ( cab csn wceq cv wb wal df-sn eqeq2i abbi bitr4i ) ABDZCEZFNBGCFZBDZFAPH
      BIOQNBCJKAPBLM $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Alternate definition of unordered pair.  Definition 5.1 of
       [TakeutiZaring] p. 15.  (Contributed by NM, 24-Apr-1994.) $)
    dfpr2 $p |- { A , B } = { x | ( x = A \/ x = B ) } $=
      ( cpr csn cun cv wceq wo df-pr wcel elun velsn orbi12i bitri abbi2i eqtri
      cab ) BCDBEZCEZFZAGZBHZUBCHZIZARBCJUEAUAUBUAKUBSKZUBTKZIUEUBSTLUFUCUGUDAB
      MACMNOPQ $.
  $}

  ${
    $d x A $.
    $( Alternate definition of singleton, based on the (alternate) definition
       of unordered pair.  Definition 5.1 of [TakeutiZaring] p. 15.
       (Contributed by AV, 12-Jun-2022.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    dfsn2ALT $p |- { A } = { A , A } $=
      ( vx cv wceq wo cab cpr csn oridm abbii dfpr2 df-sn 3eqtr4ri ) BCADZNEZBF
      NBFAAGAHONBNIJBAAKBALM $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( A member of an unordered pair of classes is one or the other of them.
       Exercise 1 of [TakeutiZaring] p. 15, generalized.  (Contributed by NM,
       13-Sep-1995.) $)
    elprg $p |- ( A e. V -> ( A e. { B , C } <-> ( A = B \/ A = C ) ) ) $=
      ( vx cv wceq wo cpr eqeq1 orbi12d dfpr2 elab2g ) EFZBGZNCGZHABGZACGZHEABC
      IDNAGOQPRNABJNACJKEBCLM $.
  $}

  $( If a class is an element of a pair, then it is one of the two paired
     elements.  (Contributed by Scott Fenton, 1-Apr-2011.) $)
  elpri $p |- ( A e. { B , C } -> ( A = B \/ A = C ) ) $=
    ( cpr wcel wceq wo elprg ibi ) ABCDZEABFACFGABCJHI $.

  ${
    elpr.1 $e |- A e. _V $.
    $( A member of an unordered pair of classes is one or the other of them.
       Exercise 1 of [TakeutiZaring] p. 15.  (Contributed by NM,
       13-Sep-1995.) $)
    elpr $p |- ( A e. { B , C } <-> ( A = B \/ A = C ) ) $=
      ( cvv wcel cpr wceq wo wb elprg ax-mp ) AEFABCGFABHACHIJDABCEKL $.
  $}

  ${
    elpr2.1 $e |- B e. _V $.
    elpr2.2 $e |- C e. _V $.
    $( A member of an unordered pair of classes is one or the other of them.
       Exercise 1 of [TakeutiZaring] p. 15.  (Contributed by NM, 14-Oct-2005.)
       (Proof shortened by JJ, 23-Jul-2021.) $)
    elpr2 $p |- ( A e. { B , C } <-> ( A = B \/ A = C ) ) $=
      ( cpr wcel cvv wceq wo elex eleq1 mpbiri jaoi elprg pm5.21nii ) ABCFZGAHG
      ZABIZACIZJAQKSRTSRBHGDABHLMTRCHGEACHLMNABCHOP $.
  $}

  ${
    nelpri.1 $e |- A =/= B $.
    nelpri.2 $e |- A =/= C $.
    $( If an element doesn't match the items in an unordered pair, it is not in
       the unordered pair.  (Contributed by David A. Wheeler, 10-May-2015.) $)
    nelpri $p |- -. A e. { B , C } $=
      ( wne cpr wcel wn wa wceq wo neanior elpri con3i sylbi mp2an ) ABFZACFZAB
      CGHZIZDERSJABKACKLZIUAABACMTUBABCNOPQ $.
  $}

  ${
    prneli.1 $e |- A =/= B $.
    prneli.2 $e |- A =/= C $.
    $( If an element doesn't match the items in an unordered pair, it is not in
       the unordered pair, using ` e/ ` .  (Contributed by David A. Wheeler,
       10-May-2015.) $)
    prneli $p |- A e/ { B , C } $=
      ( cpr nelpri nelir ) ABCFABCDEGH $.
  $}

  ${
    nelprd.1 $e |- ( ph -> A =/= B ) $.
    nelprd.2 $e |- ( ph -> A =/= C ) $.
    $( If an element doesn't match the items in an unordered pair, it is not in
       the unordered pair, deduction version.  (Contributed by Alexander van
       der Vekens, 25-Jan-2018.) $)
    nelprd $p |- ( ph -> -. A e. { B , C } ) $=
      ( wne cpr wcel wn wa wceq wo neanior elpri con3i sylbi syl2anc ) ABCGZBDG
      ZBCDHIZJZEFSTKBCLBDLMZJUBBCBDNUAUCBCDOPQR $.
  $}

  $( Membership in a set with two elements removed.  Similar to ~ eldifsn and
     ~ eldiftp .  (Contributed by Mario Carneiro, 18-Jul-2017.) $)
  eldifpr $p |- ( A e. ( B \ { C , D } ) <->
                ( A e. B /\ A =/= C /\ A =/= D ) ) $=
    ( wcel cpr wn wa wne cdif w3a wo elprg notbid neanior syl6bbr pm5.32i eldif
    wceq 3anass 3bitr4i ) ABEZACDFZEZGZHUBACIZADIZHZHABUCJEUBUFUGKUBUEUHUBUEACS
    ADSLZGUHUBUDUIACDBMNACADOPQABUCRUBUFUGTUA $.

  $( Restricted existential quantification over a set with two elements
     removed.  (Contributed by Alexander van der Vekens, 7-Feb-2018.) $)
  rexdifpr $p |- ( E. x e. ( A \ { B , C } ) ph
      <-> E. x e. A ( x =/= B /\ x =/= C /\ ph ) ) $=
    ( cv wne w3a cpr cdif wcel eldifpr 3anass bitri anbi1i df-3an bicomi anbi2i
    wa anass rexbii2 ) ABFZDGZUBEGZAHZBCDEIJZCUBUFKZASUBCKZUCUDSZSZASZUHUESZUGU
    JAUGUHUCUDHUJUBCDELUHUCUDMNOUKUHUIASZSULUHUIATUMUEUHUEUMUCUDAPQRNNUA $.

  $( A set is a member of its singleton.  Part of Theorem 7.6 of [Quine] p. 49.
     (Contributed by NM, 28-Oct-2003.) $)
  snidg $p |- ( A e. V -> A e. { A } ) $=
    ( wcel csn wceq eqid elsng mpbiri ) ABCAADCAAEAFAABGH $.

  $( A class is a set iff it is a member of its singleton.  (Contributed by NM,
     5-Apr-2004.) $)
  snidb $p |- ( A e. _V <-> A e. { A } ) $=
    ( cvv wcel csn snidg elex impbii ) ABCAADZCABEAHFG $.

  ${
    snid.1 $e |- A e. _V $.
    $( A set is a member of its singleton.  Part of Theorem 7.6 of [Quine]
       p. 49.  (Contributed by NM, 31-Dec-1993.) $)
    snid $p |- A e. { A } $=
      ( cvv wcel csn snidb mpbi ) ACDAAEDBAFG $.
  $}

  $( A setvar variable is a member of its singleton.  (Contributed by David A.
     Wheeler, 8-Dec-2018.) $)
  vsnid $p |- x e. { x } $=
    ( cv vex snid ) ABACD $.

  $( There is exactly one element in a singleton.  Exercise 2 of
     [TakeutiZaring] p. 15.  This variation requires only that ` B ` , rather
     than ` A ` , be a set.  (Contributed by NM, 28-Oct-2003.) $)
  elsn2g $p |- ( B e. V -> ( A e. { B } <-> A = B ) ) $=
    ( wcel csn wceq elsni snidg eleq1 syl5ibrcom impbid2 ) BCDZABEZDZABFZABGLNO
    BMDBCHABMIJK $.

  ${
    elsn2.1 $e |- B e. _V $.
    $( There is exactly one element in a singleton.  Exercise 2 of
       [TakeutiZaring] p. 15.  This variation requires only that ` B ` , rather
       than ` A ` , be a set.  (Contributed by NM, 12-Jun-1994.) $)
    elsn2 $p |- ( A e. { B } <-> A = B ) $=
      ( cvv wcel csn wceq wb elsn2g ax-mp ) BDEABFEABGHCABDIJ $.
  $}

  $( If a class is not equal to the class in a singleton, then it is not in the
     singleton.  (Contributed by Glauco Siliprandi, 17-Aug-2020.)  (Proof
     shortened by BJ, 4-May-2021.) $)
  nelsn $p |- ( A =/= B -> -. A e. { B } ) $=
    ( csn wcel elsni necon3ai ) ABCDABABEF $.

  ${
    $d X x $.
    $( Conditions for a restricted class abstraction to be a singleton.
       (Contributed by AV, 18-Apr-2019.)  (Proof shortened by AV,
       26-Aug-2022.) $)
    rabeqsn $p |- ( { x e. V | ph } = { X }
                    <-> A. x ( ( x e. V /\ ph ) <-> x = X ) ) $=
      ( crab csn wceq cv wcel wa cab wb wal df-rab eqeq1i absn bitri ) ABCEZDFZ
      GBHZCIAJZBKZSGUATDGLBMRUBSABCNOUABDPQ $.

    $( Conditions for a restricted class abstraction to be a subset of a
       singleton, i.e. to be a singleton or the empty set.  (Contributed by AV,
       18-Apr-2019.) $)
    rabsssn $p |- ( { x e. V | ph } C_ { X } <-> A. x e. V ( ph -> x = X ) ) $=
      ( crab csn wss cv wcel wa cab wceq wi wal wral df-rab df-sn sseq12i ss2ab
      impexp albii df-ral bitr4i 3bitri ) ABCEZDFZGBHZCIZAJZBKZUGDLZBKZGUIUKMZB
      NZAUKMZBCOZUEUJUFULABCPBDQRUIUKBSUNUHUOMZBNUPUMUQBUHAUKTUAUOBCUBUCUD $.
  $}

  ${
    $d A x $.  $d ps x $.
    $( Substitution expressed in terms of quantification over a singleton.
       (Contributed by NM, 14-Dec-2005.)  (Revised by Mario Carneiro,
       23-Apr-2015.) $)
    ralsnsg $p |- ( A e. V -> ( A. x e. { A } ph <-> [. A / x ]. ph ) ) $=
      ( wcel wsbc cv wceq wi wal csn wral sbc6g df-ral velsn imbi1i albii bitri
      syl6rbbr ) CDEABCFBGZCHZAIZBJZABCKZLZABCDMUETUDEZAIZBJUCABUDNUGUBBUFUAABC
      OPQRS $.

    $( Restricted existential quantification over a singleton.  (Contributed by
       Mario Carneiro, 23-Apr-2015.)  (Revised by NM, 22-Aug-2018.) $)
    rexsns $p |- ( E. x e. { A } ph <-> [. A / x ]. ph ) $=
      ( cv csn wcel wex wceq wrex wsbc velsn anbi1i exbii df-rex sbc5 3bitr4i
      wa ) BDZCEZFZAQZBGRCHZAQZBGABSIABCJUAUCBTUBABCKLMABSNABCOP $.

    ralsngOLD.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Obsolete proof of ~ ralsng as of 7-Apr-2023.  (Contributed by NM,
       14-Dec-2005.)  (Revised by Mario Carneiro, 23-Apr-2015.)
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    ralsngOLD $p |- ( A e. V -> ( A. x e. { A } ph <-> ps ) ) $=
      ( wcel csn wral wsbc ralsnsg sbcieg bitrd ) DEGACDHIACDJBACDEKABCDEFLM $.

    $( Obsolete proof of ~ rexsng as of 7-Apr-2023.  (Contributed by NM,
       29-Jan-2012.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    rexsngOLD $p |- ( A e. V -> ( E. x e. { A } ph <-> ps ) ) $=
      ( csn wrex wsbc wcel rexsns sbcieg syl5bb ) ACDGHACDIDEJBACDKABCDEFLM $.
  $}

  ${
    $d A x $.
    rexsngf.1 $e |- F/ x ps $.
    rexsngf.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Restricted existential quantification over a singleton.  (Contributed by
       NM, 29-Jan-2012.)  (Revised by Glauco Siliprandi, 17-Aug-2020.) $)
    rexsngf $p |- ( A e. V -> ( E. x e. { A } ph <-> ps ) ) $=
      ( csn wrex wsbc wcel rexsns sbciegf syl5bb ) ACDHIACDJDEKBACDLABCDEFGMN
      $.

    $( Restricted universal quantification over a singleton.  (Contributed by
       NM, 14-Dec-2005.)  (Revised by AV, 3-Apr-2023.) $)
    ralsngf $p |- ( A e. V -> ( A. x e. { A } ph <-> ps ) ) $=
      ( wcel csn wral wsbc ralsnsg sbciegf bitrd ) DEHACDIJACDKBACDELABCDEFGMN
      $.

    $d c w x A $.  $d c w ph $.
    $( Restricted existential uniqueness over a singleton.  (Contributed by AV,
       3-Apr-2023.) $)
    reusngf $p |- ( A e. V -> ( E! x e. { A } ph <-> ps ) ) $=
      ( vc vw csn wreu cv wsbc wi wral wa nfsbc1v dfsbcq wceq nfv weq wrex wcel
      sbceq1a reu8nf nfcv nfim nfral eqeq1 imbi2d ralbidv anbi12d rexsngf eqeq2
      nfan imbi12d ralsngf anbi2d eqidd biantru syl6bbr bitrd syl5bb ) ACDJZKAA
      CHLZMZCHUAZNZHVDOZPZCVDUBZDEUCZBAVFACILZMCHIVDACVEQZACVMQACVMUDACVMVERUEV
      LVKBVFDVESZNZHVDOZPZBVJVRCDEBVQCFVPCHVDCVDUFVFVOCVNVOCTUGUHUOCLZDSZABVIVQ
      GVTVHVPHVDVTVGVOVFVSDVEUIUJUKULUMVLVRBACDMZDDSZNZPBVLVQWCBVPWCHDEWCHTVEDS
      VFWAVOWBACVEDRVEDDUNUPUQURWCBWADUSUTVAVBVC $.
  $}

  ${
    $d A x $.  $d ps x $.
    ralsng.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Substitution expressed in terms of quantification over a singleton.
       (Contributed by NM, 14-Dec-2005.)  (Revised by Mario Carneiro,
       23-Apr-2015.)  (Proof shortened by AV, 7-Apr-2023.) $)
    ralsng $p |- ( A e. V -> ( A. x e. { A } ph <-> ps ) ) $=
      ( nfv ralsngf ) ABCDEBCGFH $.

    $( Restricted existential quantification over a singleton.  (Contributed by
       NM, 29-Jan-2012.)  (Proof shortened by AV, 7-Apr-2023.) $)
    rexsng $p |- ( A e. V -> ( E. x e. { A } ph <-> ps ) ) $=
      ( nfv rexsngf ) ABCDEBCGFH $.

    $( Restricted existential uniqueness over a singleton.  (Contributed by AV,
       3-Apr-2023.) $)
    reusng $p |- ( A e. V -> ( E! x e. { A } ph <-> ps ) ) $=
      ( nfv reusngf ) ABCDEBCGFH $.

    $d A y $.  $d B x y $.  $d ch y $.
    2ralsng.1 $e |- ( y = B -> ( ps <-> ch ) ) $.
    $( Substitution expressed in terms of two quantifications over singletons.
       (Contributed by AV, 22-Dec-2019.) $)
    2ralsng $p |- ( ( A e. V /\ B e. W )
                    -> ( A. x e. { A } A. y e. { B } ph <-> ch ) ) $=
      ( wcel csn wral cv wceq ralbidv ralsng sylan9bb ) FHLAEGMZNZDFMNBETNZGILC
      UAUBDFHDOFPABETJQRBCEGIKRS $.
  $}

  ${
    $d A x y $.  $d ph y $.
    $( Restricted existential uniqueness over a singleton is equivalent to a
       restricted existential quantification over a singleton.  (Contributed by
       AV, 3-Apr-2023.) $)
    rexreusng $p |- ( A e. V -> ( E. x e. { A } ph <-> E! x e. { A } ph ) ) $=
      ( vy wcel csn wa wi wral wsbc cv wceq nfsbc1v nfv sbceq1a imbi12d ralsngf
      nfan nfim wrex wsb weq wreu eqidd dfsbcq2 anbi12d eqeq2 mpbiri nfcv nfs1v
      nfral anbi1d eqeq1 ralbidv mpbird biantrud reu2 syl6bbr ) CDFZABCGZUAZVBA
      ABEUBZHZBEUCZIZEVAJZBVAJZHABVAUDUTVHVBUTVHABCKZVCHZCELZMZIZEVAJZUTVNVIECK
      ZVIHZCCMZIZVPCUEVMVRECDVPVQEVOVIEVIECNVIEOSVQEOTVKCMZVJVPVLVQVSVIVOVCVIVI
      ECPABECUFUGVKCCUHQRUIVGVNBCDVMBEVABVAUJVJVLBVIVCBABCNABEUKSVLBOTULBLZCMZV
      FVMEVAWAVDVJVEVLWAAVIVCABCPUMVTCVKUNQUORUPUQABEVAURUS $.
  $}

  $( There is a set being the element of a singleton if and only if there is an
     element of the singleton.  (Contributed by Alexander van der Vekens,
     1-Jan-2018.) $)
  exsnrex $p |- ( E. x M = { x } <-> E. x e. M M = { x } ) $=
    ( cv csn wceq wex wcel wrex vsnid eleq2 mpbiri pm4.71ri exbii df-rex bitr4i
    wa ) BACZDZEZAFQBGZSPZAFSABHSUAASTSTQRGAIBRQJKLMSABNO $.

  ${
    $d A x $.  $d ps x $.
    ralsn.1 $e |- A e. _V $.
    ralsn.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Convert a quantification over a singleton to a substitution.
       (Contributed by NM, 27-Apr-2009.) $)
    ralsn $p |- ( A. x e. { A } ph <-> ps ) $=
      ( cvv wcel csn wral wb ralsng ax-mp ) DGHACDIJBKEABCDGFLM $.

    $( Restricted existential quantification over a singleton.  (Contributed by
       Jeff Madsen, 5-Jan-2011.) $)
    rexsn $p |- ( E. x e. { A } ph <-> ps ) $=
      ( cvv wcel csn wrex wb rexsng ax-mp ) DGHACDIJBKEABCDGFLM $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Membership in an extension of a power class.  (Contributed by NM,
       26-Mar-2007.) $)
    elpwunsn $p |- ( A e. ( ~P ( B u. { C } ) \ ~P B ) -> C e. A ) $=
      ( vx csn cun cpw cdif wcel wn wa eldif cv wrex wral wss elpwg dfss3 sylbi
      wi syl6bb notbid biimpa rexnal sylibr wceq elpwi ssel wo elsni orim2i ord
      elun imim2i impd 3syl eleq1 biimpd syl6 com4r pm2.43b rexlimdv imp syldan
      expd ) ABCEZFZGZBGZHIAVHIZAVIIZJZKZCAIZAVHVILVJVLDMZBIZJZDANZVNVMVPDAOZJZ
      VRVJVLVTVJVKVSVJVKABPVSABVHQDABRUAUBUCVPDAUDUEVJVRVNVJVQVNDAVJVOAIZVQVNTV
      JWAVQWAVNVJWAVQWAVNTZVJWAVQKZVOCUFZWBVJAVGPWAVOVGIZTZWCWDTAVGUGAVGVOUHWFW
      AVQWDWEVQWDTZWAWEVPVOVFIZUIZWGVOBVFUMWIVPWDWHWDVPVOCUJUKULSUNUOUPWDWAVNVO
      CAUQURUSVEUTVAVBVCVDS $.
  $}

  $( An element of a set is either equal to another element of the set or a
     member of the difference of the set and the singleton containing the other
     element.  (Contributed by AV, 25-Aug-2020.)  (Proof shortened by JJ,
     23-Jul-2021.) $)
  eqoreldif $p |- ( B e. C
                    -> ( A e. C <-> ( A = B \/ A e. ( C \ { B } ) ) ) ) $=
    ( wcel wceq cdif wo wn wa simpl elsni con3i adantl eldifd ex orrd eleq1a wi
    csn eldifi a1i jaod impbid2 ) BCDZACDZABEZACBSZFDZGUEUFUHUEUFHZUHUEUIIACUGU
    EUIJUIAUGDZHUEUJUFABKLMNOPUDUFUEUHBCAQUHUERUDACUGTUAUBUC $.

  $( Members of an unordered triple of classes.  (Contributed by FL,
     2-Feb-2014.)  (Proof shortened by Mario Carneiro, 11-Feb-2015.) $)
  eltpg $p |- ( A e. V -> ( A e. { B , C , D } <->
     ( A = B \/ A = C \/ A = D ) ) ) $=
    ( wcel cpr csn wceq ctp w3o elprg elsng orbi12d cun df-tp eleq2i elun bitri
    wo df-3or 3bitr4g ) AEFZABCGZFZADHZFZTZABIZACIZTZADIZTABCDJZFZUIUJULKUCUEUK
    UGULABCELADEMNUNAUDUFOZFUHUMUOABCDPQAUDUFRSUIUJULUAUB $.

  $( Membership in a set with three elements removed.  Similar to ~ eldifsn and
     ~ eldifpr .  (Contributed by David A. Wheeler, 22-Jul-2017.) $)
  eldiftp $p |- ( A e. ( B \ { C , D , E } ) <->
                ( A e. B /\ ( A =/= C /\ A =/= D /\ A =/= E ) ) ) $=
    ( ctp cdif wcel wn wa wne w3a eldif wceq w3o eltpg ne3anior syl6bbr pm5.32i
    notbid bitri ) ABCDEFZGHABHZAUBHZIZJUCACKADKAEKLZJABUBMUCUEUFUCUEACNADNAENO
    ZIUFUCUDUGACDEBPTACADAEQRSUA $.

  $( A member of an unordered triple of classes is one of them.  (Contributed
     by Mario Carneiro, 11-Feb-2015.) $)
  eltpi $p |- ( A e. { B , C , D } -> ( A = B \/ A = C \/ A = D ) ) $=
    ( ctp wcel wceq w3o eltpg ibi ) ABCDEZFABGACGADGHABCDKIJ $.

  ${
    eltp.1 $e |- A e. _V $.
    $( A member of an unordered triple of classes is one of them.  Special case
       of Exercise 1 of [TakeutiZaring] p. 17.  (Contributed by NM,
       8-Apr-1994.)  (Revised by Mario Carneiro, 11-Feb-2015.) $)
    eltp $p |- ( A e. { B , C , D } <-> ( A = B \/ A = C \/ A = D ) ) $=
      ( cvv wcel ctp wceq w3o wb eltpg ax-mp ) AFGABCDHGABIACIADIJKEABCDFLM $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Alternate definition of unordered triple of classes.  Special case of
       Definition 5.3 of [TakeutiZaring] p. 16.  (Contributed by NM,
       8-Apr-1994.) $)
    dftp2 $p |- { A , B , C } = { x | ( x = A \/ x = B \/ x = C ) } $=
      ( cv wceq w3o ctp vex eltp abbi2i ) AEZBFLCFLDFGABCDHLBCDAIJK $.
  $}

  ${
    $d y A $.  $d y B $.  $d x y $.
    nfpr.1 $e |- F/_ x A $.
    nfpr.2 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for unordered pairs.  (Contributed by
       NM, 14-Nov-1995.) $)
    nfpr $p |- F/_ x { A , B } $=
      ( vy cpr cv wceq wo cab dfpr2 nfeq2 nfor nfab nfcxfr ) ABCGFHZBIZQCIZJZFK
      FBCLTAFRSAAQBDMAQCEMNOP $.
  $}

  $( Membership of a conditional operator in an unordered pair.  (Contributed
     by NM, 17-Jun-2007.) $)
  ifpr $p |- ( ( A e. C /\ B e. D ) -> if ( ph , A , B ) e. { A , B } ) $=
    ( wcel cvv cif cpr elex wa ifcl wceq wo ifeqor elprg mpbiri syl syl2an ) BD
    FBGFZCGFZABCHZBCIFZCEFBDJCEJTUAKUBGFZUCABCGLUDUCUBBMUBCMNABCOUBBCGPQRS $.

  ${
    $d x A $.  $d x B $.
    ralprgf.1 $e |- F/ x ps $.
    ralprgf.2 $e |- F/ x ch $.
    ralprgf.a $e |- ( x = A -> ( ph <-> ps ) ) $.
    ralprgf.b $e |- ( x = B -> ( ph <-> ch ) ) $.
    $( Convert a restricted universal quantification over a pair to a
       conjunction, using bound-variable hypotheses instead of distinct
       variable conditions.  (Contributed by NM, 17-Sep-2011.)  (Revised by AV,
       8-Apr-2023.) $)
    ralprgf $p |- ( ( A e. V /\ B e. W )
                    -> ( A. x e. { A , B } ph <-> ( ps /\ ch ) ) ) $=
      ( cpr wral csn wa wcel cun df-pr ralsngf raleqi ralunb bi2anan9 syl5bb
      bitri ) ADEFMZNZADEOZNZADFOZNZPZEGQZFHQZPBCPUGADUHUJRZNULADUFUOEFSUAADUHU
      JUBUEUMUIBUNUKCABDEGIKTACDFHJLTUCUD $.

    $( Convert a restricted existential quantification over a pair to a
       disjunction, using bound-variable hypotheses instead of distinct
       variable conditions.  (Contributed by NM, 17-Sep-2011.)  (Revised by AV,
       2-Apr-2023.) $)
    rexprgf $p |- ( ( A e. V /\ B e. W )
                    -> ( E. x e. { A , B } ph <-> ( ps \/ ch ) ) ) $=
      ( cpr wrex csn wo wcel wa cun rexsngf df-pr rexeqi orbi1d orbi2d sylan9bb
      rexun bitri syl5bb ) ADEFMZNZADEOZNZADFOZNZPZEGQZFHQZRBCPZUJADUKUMSZNUOAD
      UIUSEFUAUBADUKUMUFUGUPUOBUNPUQURUPULBUNABDEGIKTUCUQUNCBACDFHJLTUDUEUH $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.  $d x ps $.  $d x ch $.  $d x th $.
    ralprg.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    ralprg.2 $e |- ( x = B -> ( ph <-> ch ) ) $.
    $( Convert a restricted universal quantification over a pair to a
       conjunction.  (Contributed by NM, 17-Sep-2011.)  (Revised by Mario
       Carneiro, 23-Apr-2015.)  (Proof shortened by AV, 8-Apr-2023.) $)
    ralprg $p |- ( ( A e. V /\ B e. W ) ->
      ( A. x e. { A , B } ph <-> ( ps /\ ch ) ) ) $=
      ( nfv ralprgf ) ABCDEFGHBDKCDKIJL $.

    $( Convert a restricted existential quantification over a pair to a
       disjunction.  (Contributed by NM, 17-Sep-2011.)  (Revised by Mario
       Carneiro, 23-Apr-2015.)  (Proof shortened by AV, 8-Apr-2023.) $)
    rexprg $p |- ( ( A e. V /\ B e. W ) ->
      ( E. x e. { A , B } ph <-> ( ps \/ ch ) ) ) $=
      ( nfv rexprgf ) ABCDEFGHBDKCDKIJL $.

    raltpg.3 $e |- ( x = C -> ( ph <-> th ) ) $.
    $( Convert a restricted universal quantification over a triple to a
       conjunction.  (Contributed by NM, 17-Sep-2011.)  (Revised by Mario
       Carneiro, 23-Apr-2015.) $)
    raltpg $p |- ( ( A e. V /\ B e. W /\ C e. X ) ->
      ( A. x e. { A , B , C } ph <-> ( ps /\ ch /\ th ) ) ) $=
      ( wcel w3a cpr wral csn wa ctp wb ralprg ralsng bi2anan9 3impa cun raleqi
      df-tp ralunb bitri df-3an 3bitr4g ) FIOZGJOZHKOZPAEFGQZRZAEHSZRZTZBCTZDTZ
      AEFGHUAZRZBCDPUNUOUPVAVCUBUNUOTURVBUPUTDABCEFGIJLMUCADEHKNUDUEUFVEAEUQUSU
      GZRVAAEVDVFFGHUIUHAEUQUSUJUKBCDULUM $.

    $( Convert a restricted existential quantification over a triple to a
       disjunction.  (Contributed by Mario Carneiro, 23-Apr-2015.) $)
    rextpg $p |- ( ( A e. V /\ B e. W /\ C e. X ) ->
      ( E. x e. { A , B , C } ph <-> ( ps \/ ch \/ th ) ) ) $=
      ( wcel w3a cpr wrex csn wo ctp wb wa rexprg orbi1d rexsng orbi2d sylan9bb
      w3o 3impa cun df-tp rexeqi rexun bitri df-3or 3bitr4g ) FIOZGJOZHKOZPAEFG
      QZRZAEHSZRZTZBCTZDTZAEFGHUAZRZBCDUIURUSUTVEVGUBURUSUCZVEVFVDTUTVGVJVBVFVD
      ABCEFGIJLMUDUEUTVDDVFADEHKNUFUGUHUJVIAEVAVCUKZRVEAEVHVKFGHULUMAEVAVCUNUOB
      CDUPUQ $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ps $.  $d x ch $.
    ralpr.1 $e |- A e. _V $.
    ralpr.2 $e |- B e. _V $.
    ralpr.3 $e |- ( x = A -> ( ph <-> ps ) ) $.
    ralpr.4 $e |- ( x = B -> ( ph <-> ch ) ) $.
    $( Convert a restricted universal quantification over a pair to a
       conjunction.  (Contributed by NM, 3-Jun-2007.)  (Revised by Mario
       Carneiro, 23-Apr-2015.) $)
    ralpr $p |- ( A. x e. { A , B } ph <-> ( ps /\ ch ) ) $=
      ( cvv wcel cpr wral wa wb ralprg mp2an ) EKLFKLADEFMNBCOPGHABCDEFKKIJQR
      $.

    $( Convert a restricted existential quantification over a pair to a
       disjunction.  (Contributed by NM, 3-Jun-2007.)  (Revised by Mario
       Carneiro, 23-Apr-2015.) $)
    rexpr $p |- ( E. x e. { A , B } ph <-> ( ps \/ ch ) ) $=
      ( cvv wcel cpr wrex wo wb rexprg mp2an ) EKLFKLADEFMNBCOPGHABCDEFKKIJQR
      $.
  $}

  ${
    $d c w x A $.  $d c w x B $.  $d x ps $.  $d c w ph $.  $d x ch $.
    reuprg.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    reuprg.2 $e |- ( x = B -> ( ph <-> ch ) ) $.
    $( Convert a restricted existential uniqueness over a pair to a disjunction
       of conjunctions.  (Contributed by AV, 2-Apr-2023.) $)
    reuprg0 $p |- ( ( A e. V /\ B e. W )
             -> ( E! x e. { A , B } ph <-> ( ( ps /\ ( ch -> A = B ) )
                                          \/ ( ch /\ ( ps -> A = B ) ) ) ) ) $=
      ( vc cv wsbc wceq wi wral wa nfv eqeq2 imbi12d cpr wreu wrex wcel nfsbc1v
      vw wo sbceq1a dfsbcq reu8nf nfcv nfim nfral eqeq1 ralbidv anbi12d rexprgf
      imbi2d ralprg eqidd biantrur wb sbcieg adantl imbi1d syl5bbr bitrd anbi2d
      nfan biantru adantr eqcom imbi2i anbi2i syl6bb orbi12d syl5bb ) ADEFUAZUB
      AADKLZMZDLZVSNZOZKVRPZQZDVRUCZEGUDZFHUDZQZBCEFNZOZQZCBWJOZQZUGZAVTADUFLZM
      DKUFVRADVSUEZADWPUEADWPUHADWPVSUIUJWIWFBVTEVSNZOZKVRPZQZCVTFVSNZOZKVRPZQZ
      UGWOWEXAXEDEFGHBWTDBDRWSDKVRDVRUKZVTWRDWQWRDRULUMVICXDDCDRXCDKVRXFVTXBDWQ
      XBDRULUMVIWAENZABWDWTIXGWCWSKVRXGWBWRVTWAEVSUNURUOUPWAFNZACWDXDJXHWCXCKVR
      XHWBXBVTWAFVSUNURUOUPUQWIXAWLXEWNWIWTWKBWIWTADEMZEENZOZADFMZWJOZQZWKWSXKX
      MKEFGHVSENZVTXIWRXJADVSEUIZVSEESTVSFNZVTXLWRWJADVSFUIZVSFESTUSXNXMWIWKXKX
      MXIEUTVAWIXLCWJWHXLCVBWGACDFHJVCVDVEVFVGVHWIXECBFENZOZQWNWIXDXTCWIXDXIXSO
      ZXLFFNZOZQZXTXCYAYCKEFGHXOVTXIXBXSXPVSEFSTXQVTXLXBYBXRVSFFSTUSYDYAWIXTYCY
      AXLFUTVJWIXIBXSWGXIBVBWHABDEGIVCVKVEVFVGVHXTWMCXSWJBFEVLVMVNVOVPVGVQ $.

    $( Convert a restricted existential uniqueness over a pair to a disjunction
       and an implication .  (Contributed by AV, 2-Apr-2023.) $)
    reuprg $p |- ( ( A e. V /\ B e. W ) -> ( E! x e. { A , B } ph
                       <-> ( ( ps \/ ch ) /\ ( ( ch /\ ps ) -> A = B ) ) ) ) $=
      ( wcel wa cpr wreu wceq wi wo curryax bicomi bitri reuprg0 orddi biantrur
      biantru orcom mpbir pm4.79 anbi12i syl6bb ) EGKFHKLADEFMNBCEFOZPZLCBUJPZL
      QZBCQZCBLUJPZLZABCDEFGHIJUAUMUNBULQZLZUKCQZUKULQZLZLUPBUKCULUBURUNVAUOUNU
      RUQUNBUJRUDSVAUTUOUTVAUSUTUSCUKQCUJRUKCUEUFUCSUJCBUGTUHTUI $.

    $( Convert a restricted existential uniqueness over a pair to a restricted
       existential quantification and an implication .  (Contributed by AV,
       3-Apr-2023.) $)
    reurexprg $p |- ( ( A e. V /\ B e. W ) -> ( E! x e. { A , B } ph
               <-> ( E. x e. { A , B } ph /\ ( ( ch /\ ps ) -> A = B ) ) ) ) $=
      ( wcel wa cpr wreu wo wceq wi wrex reuprg rexprg bicomd anbi1d bitrd ) EG
      KFHKLZADEFMZNBCOZCBLEFPQZLADUERZUGLABCDEFGHIJSUDUFUHUGUDUHUFABCDEFGHIJTUA
      UBUC $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.  $d x ps $.  $d x ch $.  $d x th $.
    raltp.1 $e |- A e. _V $.
    raltp.2 $e |- B e. _V $.
    raltp.3 $e |- C e. _V $.
    raltp.4 $e |- ( x = A -> ( ph <-> ps ) ) $.
    raltp.5 $e |- ( x = B -> ( ph <-> ch ) ) $.
    raltp.6 $e |- ( x = C -> ( ph <-> th ) ) $.
    $( Convert a quantification over a triple to a conjunction.  (Contributed
       by NM, 13-Sep-2011.)  (Revised by Mario Carneiro, 23-Apr-2015.) $)
    raltp $p |- ( A. x e. { A , B , C } ph <-> ( ps /\ ch /\ th ) ) $=
      ( cvv wcel ctp wral w3a wb raltpg mp3an ) FOPGOPHOPAEFGHQRBCDSTIJKABCDEFG
      HOOOLMNUAUB $.

    $( Convert a quantification over a triple to a disjunction.  (Contributed
       by Mario Carneiro, 23-Apr-2015.) $)
    rextp $p |- ( E. x e. { A , B , C } ph <-> ( ps \/ ch \/ th ) ) $=
      ( cvv wcel ctp wrex w3o wb rextpg mp3an ) FOPGOPHOPAEFGHQRBCDSTIJKABCDEFG
      HOOOLMNUAUB $.
  $}

  ${
    nfsn.1 $e |- F/_ x A $.
    $( Bound-variable hypothesis builder for singletons.  (Contributed by NM,
       14-Nov-1995.) $)
    nfsn $p |- F/_ x { A } $=
      ( csn cpr dfsn2 nfpr nfcxfr ) ABDBBEBFABBCCGH $.
  $}

  ${
    $d A y $.  $d B y $.  $d V y $.  $d x y $.
    $( Distribute proper substitution through the singleton of a class.
       ~ csbsng is derived from the virtual deduction proof ~ csbsngVD .
       (Contributed by Alan Sare, 10-Nov-2012.) $)
    csbsng $p |- ( A e. V -> [_ A / x ]_ { B } = { [_ A / x ]_ B } ) $=
      ( vy wcel wceq cab csb csn wsbc csbab sbceq2g abbidv syl5eq df-sn csbeq2i
      cv 3eqtr4g ) BDFZABERZCGZEHZIZUAABCIZGZEHZABCJZIUEJTUDUBABKZEHUGUBAEBLTUI
      UFEABUACDMNOABUHUCECPQEUEPS $.
  $}

  $( Distribute proper substitution through a pair of classes.  (Contributed by
     Alexander van der Vekens, 4-Sep-2018.) $)
  csbprg $p |- ( C e. V
            -> [_ C / x ]_ { A , B } = { [_ C / x ]_ A , [_ C / x ]_ B } ) $=
    ( wcel csn cun csb cpr csbun csbsng uneq12d syl5eq df-pr csbeq2i 3eqtr4g )
    DEFZADBGZCGZHZIZADBIZGZADCIZGZHZADBCJZIUCUEJRUBADSIZADTIZHUGADSTKRUIUDUJUFA
    DBELADCELMNADUHUABCOPUCUEOQ $.

  $( If the intersection of two classes is a (proper) singleton, then the
     singleton element is a member of both classes.  (Contributed by AV,
     30-Dec-2021.) $)
  elinsn $p |- ( ( A e. V /\ ( B i^i C ) = { A } ) -> ( A e. B /\ A e. C ) ) $=
    ( wcel csn cin wceq wa snidg eleq2 elin biimpi syl6bir mpan9 ) ADEAAFZEZBCG
    ZPHZABEACEIZADJSQAREZTRPAKUATABCLMNO $.

  ${
    $d x A $.  $d x B $.
    $( Intersection with the singleton of a non-member is disjoint.
       (Contributed by NM, 22-May-1998.)  (Proof shortened by Andrew Salmon,
       29-Jun-2011.)  (Proof shortened by Wolf Lammen, 30-Sep-2014.) $)
    disjsn $p |- ( ( A i^i { B } ) = (/) <-> -. B e. A ) $=
      ( vx csn cin c0 wceq cv wcel wn wi wal wa disj1 con2b velsn imbi1i 3bitri
      imnan albii wex alnex df-clel xchbinxr ) ABDZEFGCHZAIZUFUEIZJKZCLUFBGZUGM
      ZJZCLZBAIZJCAUENUIULCUIUHUGJZKUJUOKULUGUHOUHUJUOCBPQUJUGSRTUMUKCUAUNUKCUB
      CBAUCUDR $.
  $}

  $( Two distinct singletons are disjoint.  (Contributed by NM,
     25-May-1998.) $)
  disjsn2 $p |- ( A =/= B -> ( { A } i^i { B } ) = (/) ) $=
    ( wne csn wcel wn cin c0 wceq elsni eqcomd necon3ai disjsn sylibr ) ABCBADZ
    EZFOBDGHIPABPBABAJKLOBMN $.

  $( Two completely distinct unordered pairs are disjoint.  (Contributed by
     Alexander van der Vekens, 11-Nov-2017.)  (Proof shortened by JJ,
     23-Jul-2021.) $)
  disjpr2 $p |- ( ( ( A =/= C /\ B =/= C ) /\ ( A =/= D /\ B =/= D ) )
                  -> ( { A , B } i^i { C , D } ) = (/) ) $=
    ( wne wa cpr cin csn cun df-pr eqtri wceq ineq1i indir disjsn2 anim12i un00
    c0 syl5eq ineq2i indi sylib adantr adantl uneq12d un0 syl6eq ) ACEZBCEZFZAD
    EZBDEZFZFZABGZCDGZHZUPCIZHZUPDIZHZJZSURUPUSVAJZHVCUQVDUPCDKUAUPUSVAUBLUOVCS
    SJSUOUTSVBSUKUTSMUNUKUTAIZUSHZBIZUSHZJZSUTVEVGJZUSHVIUPVJUSABKZNVEVGUSOLUKV
    FSMZVHSMZFVISMUIVLUJVMACPBCPQVFVHRUCTUDUNVBSMUKUNVBVEVAHZVGVAHZJZSVBVJVAHVP
    UPVJVAVKNVEVGVAOLUNVNSMZVOSMZFVPSMULVQUMVRADPBDPQVNVORUCTUEUFSUGUHT $.

  $( The disjoint intersection of an unordered pair and a singleton.
     (Contributed by AV, 23-Jan-2021.) $)
  disjprsn $p |- ( ( A =/= C /\ B =/= C ) -> ( { A , B } i^i { C } ) = (/) ) $=
    ( wne wa cpr csn cin c0 dfsn2 ineq2i wceq disjpr2 anidms syl5eq ) ACDBCDEZA
    BFZCGZHQCCFZHZIRSQCJKPTILABCCMNO $.

  $( The disjoint intersection of an unordered triple and a singleton.
     (Contributed by AV, 14-Nov-2021.) $)
  disjtpsn $p |- ( ( A =/= D /\ B =/= D /\ C =/= D )
                   -> ( { A , B , C } i^i { D } ) = (/) ) $=
    ( wne w3a ctp csn cin cpr cun c0 df-tp ineq1i wceq disjprsn 3adant3 disjsn2
    wa 3ad2ant3 jca undisj1 sylib syl5eq ) ADEZBDEZCDEZFZABCGZDHZIABJZCHZKZUJIZ
    LUIUMUJABCMNUHUKUJILOZULUJILOZSUNLOUHUOUPUEUFUOUGABDPQUGUEUPUFCDRTUAUKULUJU
    BUCUD $.

  $( Two completely distinct unordered triples are disjoint.  (Contributed by
     AV, 14-Nov-2021.) $)
  disjtp2 $p |- ( ( ( A =/= D /\ B =/= D /\ C =/= D )
                    /\ ( A =/= E /\ B =/= E /\ C =/= E )
                    /\ ( A =/= F /\ B =/= F /\ C =/= F ) )
                  -> ( { A , B , C } i^i { D , E , F } ) = (/) ) $=
    ( wne w3a ctp cin cpr csn cun c0 df-tp wceq wa 3simpa 3ad2ant3 syl5eq incom
    ineq2i ineq1i disjpr2 syl2an 3adant3 necom biimpi disjprsn undisj1 disjtpsn
    jca sylib undisj2 ) ADGZBDGZCDGZHZAEGZBEGZCEGZHZAFGBFGCFGHZHZABCIZDEFIZJVED
    EKZFLZMZJZNVFVIVEDEFOUBVDVEVGJZNPZVEVHJNPZQVJNPVDVLVMVDVKABKZCLZMZVGJZNVEVP
    VGABCOUCVDVNVGJNPZVOVGJZNPZQVQNPVDVRVTURVBVRVCURUOUPQUSUTQVRVBUOUPUQRUSUTVA
    RABDEUDUEUFVDVSVGVOJZNVOVGUAURVBWANPZVCURDCGZECGZWBVBUQUOWCUPUQWCCDUGUHSVAU
    SWDUTVAWDCEUGUHSDECUIUEUFTULVNVOVGUJUMTVCURVMVBABCFUKSULVEVGVHUNUMT $.

  ${
    $d x A $.
    $( The singleton of a proper class (one that doesn't exist) is the empty
       set.  Theorem 7.2 of [Quine] p. 48.  (Contributed by NM,
       21-Jun-1993.) $)
    snprc $p |- ( -. A e. _V <-> { A } = (/) ) $=
      ( vx csn c0 wceq cvv wcel cv wex velsn exbii neq0 isset 3bitr4i con1bii
      wn ) ACZDEZAFGZBHZQGZBITAEZBIRPSUAUBBBAJKBQLBAMNO $.
  $}

  $( A singleton is nonempty iff its argument is a set.  (Contributed by Scott
     Fenton, 8-May-2018.) $)
  snnzb $p |- ( A e. _V <-> { A } =/= (/) ) $=
    ( cvv wcel csn c0 wne wn wceq snprc df-ne con2bii bitri con4bii ) ABCZADZEF
    ZNGOEHZPGAIPQOEJKLM $.

  ${
    $d A x $.
    $( A restricted at-most-one quantifier over a singleton is always true.
       (Contributed by AV, 3-Apr-2023.) $)
    rmosn $p |- E* x e. { A } ph $=
      ( cvv wcel csn wrmo wrex wreu wi wsbc idd nfsbc1v sbceq1a rexsngf reusngf
      3imtr4d rmo5 sylibr c0 wn rmo0 wceq wb snprc rmoeq1 sylbi mpbiri pm2.61i
      ) CDEZABCFZGZUJABUKHZABUKIZJULUJABCKZUOUMUNUJUOLAUOBCDABCMZABCNZOAUOBCDUP
      UQPQABUKRSUJUAZULABTGZABUBURUKTUCULUSUDCUEABUKTUFUGUHUI $.
  $}

  ${
    $d x y A $.  $d x B $.
    $( Special case of ~ r19.12 where its converse holds.  (Contributed by NM,
       19-May-2008.)  (Revised by Mario Carneiro, 23-Apr-2015.)  (Revised by
       BJ, 18-Mar-2020.) $)
    r19.12sn $p |- ( A e. V -> ( E. x e. { A } A. y e. B ph
                                         <-> A. y e. B E. x e. { A } ph ) ) $=
      ( wcel wral wsbc csn wrex sbcralg rexsns ralbii 3bitr4g ) DFGACEHZBDIABDI
      ZCEHPBDJZKABRKZCEHABCDEFLPBDMSQCEABDMNO $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Condition where a restricted class abstraction is a singleton.
       (Contributed by NM, 28-May-2006.)  (Proof shortened by AV,
       26-Aug-2022.) $)
    rabsn $p |- ( B e. A -> { x e. A | x = B } = { B } ) $=
      ( wcel cv wceq wa wal crab csn eleq1 pm5.32ri baib alrimiv rabeqsn sylibr
      wb ) CBDZAEZBDZSCFZGZUAQZAHUAABICJFRUCAUBRUAUATRSCBKLMNUAABCOP $.
  $}

  ${
    $d x y A $.  $d y ph $.
    $( A restricted class abstraction restricted to a singleton is either the
       empty set or the singleton itself.  (Contributed by AV, 21-Jul-2019.) $)
    rabsnifsb $p |- { x e. { A } | ph }
                    = if ( [. A / x ]. ph , { A } , (/) ) $=
      ( vy cv csn wcel wa cab wsbc c0 wn wo wi syl imdistani nfan eleq1w anbi1d
      nfv crab cif wceq elsni sbceq1a biimpd orcd biimprd pm2.21i adantr impbii
      noel jaoi abbii nfsbc1v nfn nfor orbi12d cbvab eqtri df-rab df-if 3eqtr4i
      weq ) BEZCFZGZAHZBIZDEZVFGZABCJZHZVJKGZVLLZHZMZDIZABVFUAVLVFKUBVIVGVLHZVE
      KGZVOHZMZBIVRVHWBBVHWBVHVSWAVGAVLVGVECUCZAVLNVECUDZWCAVLABCUEZUFOPUGVSVHW
      AVGVLAVGWCVLANWDWCAVLWEUHOPVTVHVOVTVHVEULUIUJUMUKUNWBVQBDWBDTVMVPBVKVLBVK
      BTABCUOZQVNVOBVNBTVLBWFUPQUQBDVDZVSVMWAVPWGVGVKVLBDVFRSWGVTVNVOBDKRSURUSU
      TABVFVAVLDVFKVBVC $.
  $}

  ${
    $d x A $.  $d x ps $.
    rabsnif.f $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( A restricted class abstraction restricted to a singleton is either the
       empty set or the singleton itself.  (Contributed by AV, 12-Apr-2019.)
       (Proof shortened by AV, 21-Jul-2019.) $)
    rabsnif $p |- { x e. { A } | ph } = if ( ps , { A } , (/) ) $=
      ( cvv wcel csn crab cif wceq wsbc rabsnifsb sbcieg ifbid syl5eq rab0 ifid
      c0 wn eqtr4i snprc biimpi rabeqdv ifeq1d 3eqtr4a pm2.61i ) DFGZACDHZIZBUI
      SJZKUHUJACDLZUISJUKACDMUHULBUISABCDFENOPUHTZACSIZBSSJZUJUKUNSUOACQBSRUAUM
      ACUISUMUISKDUBUCZUDUMBUISSUPUEUFUG $.
  $}

  ${
    $d x A $.
    $( A restricted class abstraction restricted to a singleton is either the
       empty set or the singleton itself.  (Contributed by Alexander van der
       Vekens, 22-Dec-2017.)  (Proof shortened by AV, 21-Jul-2019.) $)
    rabrsn $p |- ( M = { x e. { A } | ph } -> ( M = (/) \/ M = { A } ) ) $=
      ( csn crab wceq wsbc c0 cif wo rabsnifsb eqeq2i ifeqor orcom mpbi orbi12d
      eqeq1 mpbiri sylbi ) DABCEZFZGDABCHZUAIJZGZDIGZDUAGZKZUBUDDABCLMUEUHUDIGZ
      UDUAGZKZUJUIKUKUCUAINUJUIOPUEUFUIUGUJDUDIRDUDUARQST $.
  $}

  ${
    $d x y $.  $d y ph $.  $d y A $.
    $( Another way to express existential uniqueness of a wff: its class
       abstraction is a singleton.  (Contributed by Mario Carneiro,
       14-Nov-2016.) $)
    euabsn2 $p |- ( E! x ph <-> E. y { x | ph } = { y } ) $=
      ( weu cv wceq wb wal wex cab csn eu6 absn exbii bitr4i ) ABDABECEZFGBHZCI
      ABJPKFZCIABCLRQCABPMNO $.

    $( Another way to express existential uniqueness of a wff: its class
       abstraction is a singleton.  (Contributed by NM, 22-Feb-2004.) $)
    euabsn $p |- ( E! x ph <-> E. x { x | ph } = { x } ) $=
      ( vy weu cab cv csn wceq wex euabsn2 nfv nfab1 sneq eqeq2d cbvexv1 bitr4i
      nfeq1 ) ABDABEZCFZGZHZCIRBFZGZHZBIABCJUDUABCUDCKBRTABLQUBSHUCTRUBSMNOP $.

    $( A way to express restricted existential uniqueness of a wff: its
       restricted class abstraction is a singleton.  (Contributed by NM,
       30-May-2006.)  (Proof shortened by Mario Carneiro, 14-Nov-2016.) $)
    reusn $p |- ( E! x e. A ph <-> E. y { x e. A | ph } = { y } ) $=
      ( cv wcel wa weu cab csn wceq wex wreu euabsn2 df-reu df-rab eqeq1i exbii
      crab 3bitr4i ) BEDFAGZBHUABIZCEJZKZCLABDMABDSZUCKZCLUABCNABDOUFUDCUEUBUCA
      BDPQRT $.

    $( Restricted existential uniqueness determined by a singleton.
       (Contributed by NM, 29-May-2006.) $)
    absneu $p |- ( ( A e. V /\ { x | ph } = { A } ) -> E! x ph ) $=
      ( vy wcel cab csn wceq wa wex weu sneq eqeq2d spcegv imp euabsn2 sylibr
      cv ) CDFZABGZCHZIZJUAESZHZIZEKZABLTUCUGUFUCECDUDCIUEUBUAUDCMNOPABEQR $.

    $( Restricted existential uniqueness determined by a singleton.
       (Contributed by NM, 29-May-2006.)  (Revised by Mario Carneiro,
       23-Dec-2016.) $)
    rabsneu $p |- ( ( A e. V /\ { x e. B | ph } = { A } ) -> E! x e. B ph ) $=
      ( wcel crab csn wceq wa cv weu df-rab eqeq1i absneu sylan2b df-reu sylibr
      wreu cab ) CEFZABDGZCHZIZJBKDFAJZBLZABDSUDUAUEBTZUCIUFUBUGUCABDMNUEBCEOPA
      BDQR $.
  $}

  ${
    $d x A $.
    $( Two ways to express " ` A ` is a singleton."  (Contributed by NM,
       30-Oct-2010.) $)
    eusn $p |- ( E! x x e. A <-> E. x A = { x } ) $=
      ( cv wcel weu cab csn wceq wex euabsn abid2 eqeq1i exbii bitri ) ACZBDZAE
      PAFZOGZHZAIBRHZAIPAJSTAQBRABKLMN $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ps $.
    rabsnt.1 $e |- B e. _V $.
    rabsnt.2 $e |- ( x = B -> ( ph <-> ps ) ) $.
    $( Truth implied by equality of a restricted class abstraction and a
       singleton.  (Contributed by NM, 29-May-2006.)  (Proof shortened by Mario
       Carneiro, 23-Dec-2016.) $)
    rabsnt $p |- ( { x e. A | ph } = { B } -> ps ) $=
      ( crab csn wceq wcel snid id syl5eleqr elrab simprbi syl ) ACDHZEIZJZERKZ
      BTESREFLTMNUAEDKBABCEDGOPQ $.
  $}

  $( Commutative law for unordered pairs.  (Contributed by NM, 15-Jul-1993.) $)
  prcom $p |- { A , B } = { B , A } $=
    ( csn cun cpr uncom df-pr 3eqtr4i ) ACZBCZDJIDABEBAEIJFABGBAGH $.

  $( Equality theorem for unordered pairs.  (Contributed by NM,
     29-Mar-1998.) $)
  preq1 $p |- ( A = B -> { A , C } = { B , C } ) $=
    ( wceq csn cun cpr sneq uneq1d df-pr 3eqtr4g ) ABDZAEZCEZFBEZNFACGBCGLMONAB
    HIACJBCJK $.

  $( Equality theorem for unordered pairs.  (Contributed by NM,
     15-Jul-1993.) $)
  preq2 $p |- ( A = B -> { C , A } = { C , B } ) $=
    ( wceq cpr preq1 prcom 3eqtr4g ) ABDACEBCECAECBEABCFCAGCBGH $.

  $( Equality theorem for unordered pairs.  (Contributed by NM,
     19-Oct-2012.) $)
  preq12 $p |- ( ( A = C /\ B = D ) -> { A , B } = { C , D } ) $=
    ( wceq cpr preq1 preq2 sylan9eq ) ACEBDEABFCBFCDFACBGBDCHI $.

  ${
    preq1i.1 $e |- A = B $.
    $( Equality inference for unordered pairs.  (Contributed by NM,
       19-Oct-2012.) $)
    preq1i $p |- { A , C } = { B , C } $=
      ( wceq cpr preq1 ax-mp ) ABEACFBCFEDABCGH $.

    $( Equality inference for unordered pairs.  (Contributed by NM,
       19-Oct-2012.) $)
    preq2i $p |- { C , A } = { C , B } $=
      ( wceq cpr preq2 ax-mp ) ABECAFCBFEDABCGH $.

    ${
      preq12i.2 $e |- C = D $.
      $( Equality inference for unordered pairs.  (Contributed by NM,
         19-Oct-2012.) $)
      preq12i $p |- { A , C } = { B , D } $=
        ( wceq cpr preq12 mp2an ) ABGCDGACHBDHGEFACBDIJ $.
    $}
  $}

  ${
    preq1d.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for unordered pairs.  (Contributed by NM,
       19-Oct-2012.) $)
    preq1d $p |- ( ph -> { A , C } = { B , C } ) $=
      ( wceq cpr preq1 syl ) ABCFBDGCDGFEBCDHI $.

    $( Equality deduction for unordered pairs.  (Contributed by NM,
       19-Oct-2012.) $)
    preq2d $p |- ( ph -> { C , A } = { C , B } ) $=
      ( wceq cpr preq2 syl ) ABCFDBGDCGFEBCDHI $.

    preq12d.2 $e |- ( ph -> C = D ) $.
    $( Equality deduction for unordered pairs.  (Contributed by NM,
       19-Oct-2012.) $)
    preq12d $p |- ( ph -> { A , C } = { B , D } ) $=
      ( wceq cpr preq12 syl2anc ) ABCHDEHBDICEIHFGBDCEJK $.
  $}

  $( Equality theorem for unordered triples.  (Contributed by NM,
     13-Sep-2011.) $)
  tpeq1 $p |- ( A = B -> { A , C , D } = { B , C , D } ) $=
    ( wceq cpr csn cun ctp preq1 uneq1d df-tp 3eqtr4g ) ABEZACFZDGZHBCFZPHACDIB
    CDINOQPABCJKACDLBCDLM $.

  $( Equality theorem for unordered triples.  (Contributed by NM,
     13-Sep-2011.) $)
  tpeq2 $p |- ( A = B -> { C , A , D } = { C , B , D } ) $=
    ( wceq cpr csn cun ctp preq2 uneq1d df-tp 3eqtr4g ) ABEZCAFZDGZHCBFZPHCADIC
    BDINOQPABCJKCADLCBDLM $.

  $( Equality theorem for unordered triples.  (Contributed by NM,
     13-Sep-2011.) $)
  tpeq3 $p |- ( A = B -> { C , D , A } = { C , D , B } ) $=
    ( wceq cpr csn cun ctp sneq uneq2d df-tp 3eqtr4g ) ABEZCDFZAGZHOBGZHCDAICDB
    INPQOABJKCDALCDBLM $.

  ${
    tpeq1d.1 $e |- ( ph -> A = B ) $.
    $( Equality theorem for unordered triples.  (Contributed by NM,
       22-Jun-2014.) $)
    tpeq1d $p |- ( ph -> { A , C , D } = { B , C , D } ) $=
      ( wceq ctp tpeq1 syl ) ABCGBDEHCDEHGFBCDEIJ $.

    $( Equality theorem for unordered triples.  (Contributed by NM,
       22-Jun-2014.) $)
    tpeq2d $p |- ( ph -> { C , A , D } = { C , B , D } ) $=
      ( wceq ctp tpeq2 syl ) ABCGDBEHDCEHGFBCDEIJ $.

    $( Equality theorem for unordered triples.  (Contributed by NM,
       22-Jun-2014.) $)
    tpeq3d $p |- ( ph -> { C , D , A } = { C , D , B } ) $=
      ( wceq ctp tpeq3 syl ) ABCGDEBHDECHGFBCDEIJ $.

    tpeq123d.2 $e |- ( ph -> C = D ) $.
    tpeq123d.3 $e |- ( ph -> E = F ) $.
    $( Equality theorem for unordered triples.  (Contributed by NM,
       22-Jun-2014.) $)
    tpeq123d $p |- ( ph -> { A , C , E } = { B , D , F } ) $=
      ( ctp tpeq1d tpeq2d tpeq3d 3eqtrd ) ABDFKCDFKCEFKCEGKABCDFHLADECFIMAFGCEJ
      NO $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Rotation of the elements of an unordered triple.  (Contributed by Alan
       Sare, 24-Oct-2011.) $)
    tprot $p |- { A , B , C } = { B , C , A } $=
      ( vx cv wceq w3o cab ctp 3orrot abbii dftp2 3eqtr4i ) DEZAFZNBFZNCFZGZDHP
      QOGZDHABCIBCAIRSDOPQJKDABCLDBCALM $.
  $}

  $( Swap 1st and 2nd members of an unordered triple.  (Contributed by NM,
     22-May-2015.) $)
  tpcoma $p |- { A , B , C } = { B , A , C } $=
    ( cpr csn cun ctp prcom uneq1i df-tp 3eqtr4i ) ABDZCEZFBADZMFABCGBACGLNMABH
    IABCJBACJK $.

  $( Swap 2nd and 3rd members of an unordered triple.  (Contributed by NM,
     22-May-2015.) $)
  tpcomb $p |- { A , B , C } = { A , C , B } $=
    ( ctp tpcoma tprot 3eqtr4i ) BCADCBADABCDACBDBCAEABCFACBFG $.

  $( Split off the first element of an unordered triple.  (Contributed by Mario
     Carneiro, 5-Jan-2016.) $)
  tpass $p |- { A , B , C } = ( { A } u. { B , C } ) $=
    ( ctp cpr csn cun df-tp tprot uncom 3eqtr4i ) BCADBCEZAFZGABCDMLGBCAHABCIML
    JK $.

  $( Two ways to write an unordered quadruple.  (Contributed by Mario Carneiro,
     5-Jan-2016.) $)
  qdass $p |- ( { A , B } u. { C , D } ) = ( { A , B , C } u. { D } ) $=
    ( cpr csn cun ctp unass df-tp uneq1i df-pr uneq2i 3eqtr4ri ) ABEZCFZGZDFZGO
    PRGZGABCHZRGOCDEZGOPRITQRABCJKUASOCDLMN $.

  $( Two ways to write an unordered quadruple.  (Contributed by Mario Carneiro,
     5-Jan-2016.) $)
  qdassr $p |- ( { A , B } u. { C , D } ) = ( { A } u. { B , C , D } ) $=
    ( csn cun cpr ctp unass df-pr uneq1i tpass uneq2i 3eqtr4i ) AEZBEZFZCDGZFOP
    RFZFABGZRFOBCDHZFOPRITQRABJKUASOBCDLMN $.

  $( Unordered triple ` { A , A , B } ` is just an overlong way to write
     ` { A , B } ` .  (Contributed by David A. Wheeler, 10-May-2015.) $)
  tpidm12 $p |- { A , A , B } = { A , B } $=
    ( csn cun cpr ctp dfsn2 uneq1i df-pr df-tp 3eqtr4ri ) ACZBCZDAAEZMDABEAABFL
    NMAGHABIAABJK $.

  $( Unordered triple ` { A , B , A } ` is just an overlong way to write
     ` { A , B } ` .  (Contributed by David A. Wheeler, 10-May-2015.) $)
  tpidm13 $p |- { A , B , A } = { A , B } $=
    ( ctp cpr tprot tpidm12 eqtr3i ) AABCABACABDAABEABFG $.

  $( Unordered triple ` { A , B , B } ` is just an overlong way to write
     ` { A , B } ` .  (Contributed by David A. Wheeler, 10-May-2015.) $)
  tpidm23 $p |- { A , B , B } = { A , B } $=
    ( ctp cpr tprot tpidm12 prcom 3eqtri ) ABBCBBACBADABDABBEBAFBAGH $.

  $( Unordered triple ` { A , A , A } ` is just an overlong way to write
     ` { A } ` .  (Contributed by David A. Wheeler, 10-May-2015.) $)
  tpidm $p |- { A , A , A } = { A } $=
    ( ctp cpr csn tpidm12 dfsn2 eqtr4i ) AAABAACADAAEAFG $.

  $( An unordered triple is an unordered pair if one of its elements is
     identical with another element.  (Contributed by Alexander van der Vekens,
     6-Oct-2017.) $)
  tppreq3 $p |- ( B = C -> { A , B , C } = { A , B } ) $=
    ( wceq ctp cpr tpeq3 eqcoms tpidm23 syl6eq ) BCDABCEZABBEZABFKLDCBCBABGHABI
    J $.

  $( An unordered pair contains its first member.  Part of Theorem 7.6 of
     [Quine] p. 49.  (Contributed by Stefan Allan, 8-Nov-2008.) $)
  prid1g $p |- ( A e. V -> A e. { A , B } ) $=
    ( wcel cpr wceq wo eqid orci elprg mpbiri ) ACDAABEDAAFZABFZGLMAHIAABCJK $.

  $( An unordered pair contains its second member.  Part of Theorem 7.6 of
     [Quine] p. 49.  (Contributed by Stefan Allan, 8-Nov-2008.) $)
  prid2g $p |- ( B e. V -> B e. { A , B } ) $=
    ( wcel cpr prid1g prcom syl6eleq ) BCDBBAEABEBACFBAGH $.

  ${
    prid1.1 $e |- A e. _V $.
    $( An unordered pair contains its first member.  Part of Theorem 7.6 of
       [Quine] p. 49.  (Contributed by NM, 24-Jun-1993.) $)
    prid1 $p |- A e. { A , B } $=
      ( cvv wcel cpr prid1g ax-mp ) ADEAABFECABDGH $.
  $}

  ${
    prid2.1 $e |- B e. _V $.
    $( An unordered pair contains its second member.  Part of Theorem 7.6 of
       [Quine] p. 49.  (Note: the proof from ~ prid2g and ~ ax-mp has one fewer
       essential step but one more total step.)  (Contributed by NM,
       5-Aug-1993.) $)
    prid2 $p |- B e. { A , B } $=
      ( cpr prid1 prcom eleqtri ) BBADABDBACEBAFG $.
  $}

  $( An unordered pair is a singleton or a subset of itself.  This theorem is
     helpful to convert theorems about walks in arbitrary graphs into theorems
     about walks in pseudographs.  (Contributed by AV, 27-Feb-2021.) $)
  ifpprsnss $p |- ( P = { A , B }
                    -> if- ( A = B , P = { A } , { A , B } C_ P ) ) $=
    ( cpr wceq csn wss preq2 dfsn2 syl6eqr eqcoms eqeq2d biimpac eqimss2 adantr
    wn ifpimpda ) CABDZEZABEZCAFZEZRCGZTSUBTRUACRUAEBABAERAADUABAAHAIJKLMSUCTPR
    CNOQ $.

  $( A proper class vanishes in an unordered pair.  (Contributed by NM,
     15-Jul-1993.) $)
  prprc1 $p |- ( -. A e. _V -> { A , B } = { B } ) $=
    ( cvv wcel wn csn c0 wceq cpr snprc cun uneq1 df-pr uncom un0 3eqtr4g sylbi
    eqtr2i ) ACDEAFZGHZABIZBFZHAJTSUBKGUBKZUAUBSGUBLABMUCUBGKUBGUBNUBORPQ $.

  $( A proper class vanishes in an unordered pair.  (Contributed by NM,
     22-Mar-2006.) $)
  prprc2 $p |- ( -. B e. _V -> { A , B } = { A } ) $=
    ( cvv wcel wn cpr csn prcom prprc1 syl5eq ) BCDEABFBAFAGABHBAIJ $.

  $( An unordered pair containing two proper classes is the empty set.
     (Contributed by NM, 22-Mar-2006.) $)
  prprc $p |- ( ( -. A e. _V /\ -. B e. _V ) -> { A , B } = (/) ) $=
    ( cvv wcel wn cpr csn c0 prprc1 wceq snprc biimpi sylan9eq ) ACDEBCDEZABFBG
    ZHABINOHJBKLM $.

  ${
    tpid1.1 $e |- A e. _V $.
    $( One of the three elements of an unordered triple.  (Contributed by NM,
       7-Apr-1994.)  (Proof shortened by Andrew Salmon, 29-Jun-2011.) $)
    tpid1 $p |- A e. { A , B , C } $=
      ( ctp wcel wceq w3o eqid 3mix1i eltp mpbir ) AABCEFAAGZABGZACGZHMNOAIJAAB
      CDKL $.
  $}

  $( Closed theorem form of ~ tpid1 .  (Contributed by Glauco Siliprandi,
     23-Oct-2021.) $)
  tpid1g $p |- ( A e. B -> A e. { A , C , D } ) $=
    ( wcel ctp wceq w3o eqid 3mix1i eltpg mpbiri ) ABEAACDFEAAGZACGZADGZHMNOAIJ
    AACDBKL $.

  ${
    tpid2.1 $e |- B e. _V $.
    $( One of the three elements of an unordered triple.  (Contributed by NM,
       7-Apr-1994.)  (Proof shortened by Andrew Salmon, 29-Jun-2011.) $)
    tpid2 $p |- B e. { A , B , C } $=
      ( ctp wcel wceq w3o eqid 3mix2i eltp mpbir ) BABCEFBAGZBBGZBCGZHNMOBIJBAB
      CDKL $.
  $}

  $( Closed theorem form of ~ tpid2 .  (Contributed by Glauco Siliprandi,
     23-Oct-2021.) $)
  tpid2g $p |- ( A e. B -> A e. { C , A , D } ) $=
    ( wcel ctp wceq w3o eqid 3mix2i eltpg mpbiri ) ABEACADFEACGZAAGZADGZHNMOAIJ
    ACADBKL $.

  $( Closed theorem form of ~ tpid3 .  (Contributed by Alan Sare, 24-Oct-2011.)
     (Proof shortened by JJ, 30-Apr-2021.) $)
  tpid3g $p |- ( A e. B -> A e. { C , D , A } ) $=
    ( wcel ctp wceq w3o eqid 3mix3i eltpg mpbiri ) ABEACDAFEACGZADGZAAGZHOMNAIJ
    ACDABKL $.

  ${
    tpid3.1 $e |- C e. _V $.
    $( One of the three elements of an unordered triple.  (Contributed by NM,
       7-Apr-1994.)  (Proof shortened by Andrew Salmon, 29-Jun-2011.)  (Proof
       shortened by JJ, 30-Apr-2021.) $)
    tpid3 $p |- C e. { A , B , C } $=
      ( cvv wcel ctp tpid3g ax-mp ) CEFCABCGFDCEABHI $.
  $}

  $( The singleton of a set is not empty.  (Contributed by NM, 14-Dec-2008.) $)
  snnzg $p |- ( A e. V -> { A } =/= (/) ) $=
    ( wcel csn snidg ne0d ) ABCADAABEF $.

  ${
    snnz.1 $e |- A e. _V $.
    $( The singleton of a set is not empty.  (Contributed by NM,
       10-Apr-1994.) $)
    snnz $p |- { A } =/= (/) $=
      ( cvv wcel csn c0 wne snnzg ax-mp ) ACDAEFGBACHI $.
  $}

  ${
    prnz.1 $e |- A e. _V $.
    $( A pair containing a set is not empty.  (Contributed by NM,
       9-Apr-1994.) $)
    prnz $p |- { A , B } =/= (/) $=
      ( cpr prid1 ne0ii ) AABDABCEF $.
  $}

  $( A pair containing a set is not empty.  (Contributed by FL, 19-Sep-2011.)
     (Proof shortened by JJ, 23-Jul-2021.) $)
  prnzg $p |- ( A e. V -> { A , B } =/= (/) ) $=
    ( wcel cpr prid1g ne0d ) ACDABEAABCFG $.

  ${
    tpnz.1 $e |- A e. _V $.
    $( A triplet containing a set is not empty.  (Contributed by NM,
       10-Apr-1994.) $)
    tpnz $p |- { A , B , C } =/= (/) $=
      ( ctp tpid1 ne0ii ) AABCEABCDFG $.
  $}

  ${
    tpnzd.1 $e |- ( ph -> A e. V ) $.
    $( A triplet containing a set is not empty.  (Contributed by Thierry
       Arnoux, 8-Apr-2019.) $)
    tpnzd $p |- ( ph -> { A , B , C } =/= (/) ) $=
      ( wcel ctp c0 wne tpid1g ne0i 3syl ) ABEGBBCDHZGNIJFBECDKNBLM $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.  $d x ph $.  $d x ch $.  $d x th $.
    $d x ta $.
    ralprd.1 $e |- ( ( ph /\ x = A ) -> ( ps <-> ch ) ) $.
    ralprd.2 $e |- ( ( ph /\ x = B ) -> ( ps <-> th ) ) $.
    raltpd.3 $e |- ( ( ph /\ x = C ) -> ( ps <-> ta ) ) $.
    ralprd.a $e |- ( ph -> A e. V ) $.
    ralprd.b $e |- ( ph -> B e. W ) $.
    raltpd.c $e |- ( ph -> C e. X ) $.
    $( Convert a quantification over a triple to a conjunction.  (Contributed
       by Thierry Arnoux, 8-Apr-2019.) $)
    raltpd $p |- ( ph -> ( A. x e. { A , B , C } ps <-> ( ch /\ th /\ ta ) ) )
      $=
      ( wa wb ctp wral w3a an3andi a1i wcel cv expcom pm5.32d raltpg syl3anc c0
      wceq wne tpnzd r19.28zv syl 3bitr2d bianabs bicomd ) ABFGHIUAZUBZCDEUCZAA
      VCSZVBAVDVBAVDACSZADSZAESZUCZABSZFVAUBZAVBSZVDVHTAACDEUDUEAGJUFHKUFILUFVJ
      VHTPQRVIVEVFVGFGHIJKLFUGZGUMZABCAVMBCTMUHUIVLHUMZABDAVNBDTNUHUIVLIUMZABEA
      VOBETOUHUIUJUKAVAULUNVJVKTAGHIJPUOABFVAUPUQURUSUTUS $.
  $}

  ${
    $d A x $.  $d B x $.
    $( The singleton of an element of a class is a subset of the class (general
       form of ~ snss ).  Theorem 7.4 of [Quine] p. 49.  (Contributed by NM,
       22-Jul-2001.) $)
    snssg $p |- ( A e. V -> ( A e. B <-> { A } C_ B ) ) $=
      ( vx wcel cv csn wi wal wceq wss wb velsn imbi1i albii a1i dfss2 3bitr4rd
      clel2g ) ACEZDFZAGZEZUABEZHZDIZUAAJZUDHZDIZUBBKZABEUFUILTUEUHDUCUGUDDAMNO
      PUJUFLTDUBBQPDABCSR $.
  $}

  ${
    snss.1 $e |- A e. _V $.
    $( The singleton of an element of a class is a subset of the class
       (inference form of ~ snssg ).  Theorem 7.4 of [Quine] p. 49.
       (Contributed by NM, 21-Jun-1993.) $)
    snss $p |- ( A e. B <-> { A } C_ B ) $=
      ( cvv wcel csn wss wb snssg ax-mp ) ADEABEAFBGHCABDIJ $.
  $}

  $( Membership in a set with an element removed.  (Contributed by NM,
     10-Oct-2007.) $)
  eldifsn $p |- ( A e. ( B \ { C } ) <-> ( A e. B /\ A =/= C ) ) $=
    ( csn cdif wcel wn wa wne eldif elsng necon3bbid pm5.32i bitri ) ABCDZEFABF
    ZAOFZGZHPACIZHABOJPRSPQACACBKLMN $.

  $( Subset of a set with an element removed.  (Contributed by Emmett Weisz,
     7-Jul-2021.)  (Proof shortened by JJ, 31-May-2022.) $)
  ssdifsn $p |- ( A C_ ( B \ { C } ) <-> ( A C_ B /\ -. C e. A ) ) $=
    ( csn cdif wss cin c0 wceq wa wcel wn difss2 reldisj bicomd biadanii disjsn
    anbi2i bitri ) ABCDZEFZABFZATGHIZJUBCAKLZJUAUBUCABTMUBUCUAATBNOPUCUDUBACQRS
    $.

  ${
    $d A x $.  $d S x $.  $d V x $.  $d W x $.
    $( A subset of a set is an element of the power set of the difference of
       the set with a singleton if the subset does not contain the singleton
       element.  (Contributed by AV, 10-Jan-2020.) $)
    elpwdifsn $p |- ( ( S e. W /\ S C_ V /\ A e/ S )
                      -> S e. ~P ( V \ { A } ) ) $=
      ( vx wcel wss wnel w3a csn cdif cpw cv wa wne simp2 sselda df-nel biimpi
      wn 3ad2ant3 anim1ci nelne2 syl sylanbrc ex ssrdv wb elpwg 3ad2ant1 mpbird
      eldifsn ) BDFZBCGZABHZIZBCAJKZLFZBUQGZUPEBUQUPEMZBFZUTUQFZUPVANZUTCFUTAOZ
      VBUPBCUTUMUNUOPQVCVAABFTZNVDUPVEVAUOUMVEUNUOVEABRSUAUBUTABUCUDUTCAULUEUFU
      GUMUNURUSUHUOBUQDUIUJUK $.
  $}

  $( Membership in a set with an element removed.  (Contributed by NM,
     10-Mar-2015.) $)
  eldifsni $p |- ( A e. ( B \ { C } ) -> A =/= C ) $=
    ( csn cdif wcel wne eldifsn simprbi ) ABCDEFABFACGABCHI $.

  $( An element of a difference with a singleton is not equal to the element of
     that singleton.  Note that ` ( -. A e. { C } -> -. A = C ) ` need not hold
     if ` A ` is a proper class.  (Contributed by BJ, 18-Mar-2023.)  (Proof
     shortened by Steven Nguyen, 1-Jun-2023.) $)
  eldifsnneq $p |- ( A e. ( B \ { C } ) -> -. A = C ) $=
    ( csn cdif wcel eldifsni neneqd ) ABCDEFACABCGH $.

  $( Obsolete version of ~ eldifsnneq as of 1-Jun-2023.  An element of a
     difference with a singleton is not equal to the element of that singleton.
     Note that ` ( -. A e. { C } -> -. A = C ) ` need not hold if ` A ` is a
     proper class.  (Contributed by BJ, 18-Mar-2023.)
     (New usage is discouraged.)  (Proof modification is discouraged.) $)
  eldifsnneqOLD $p |- ( A e. ( B \ { C } ) -> -. A = C ) $=
    ( csn cdif wcel wn wa wceq eldif elsng biimprd con3dimp sylbi ) ABCDZEFABFZ
    AOFZGHACIZGABOJPRQPQRACBKLMN $.

  $( The class ` A ` is not in ` ( B \ { A } ) ` .  (Contributed by David
     Moews, 1-May-2017.) $)
  neldifsn $p |- -. A e. ( B \ { A } ) $=
    ( csn cdif wcel wne neirr eldifsni mto ) ABACDEAAFAGABAHI $.

  $( The class ` A ` is not in ` ( B \ { A } ) ` .  Deduction form.
     (Contributed by David Moews, 1-May-2017.) $)
  neldifsnd $p |- ( ph -> -. A e. ( B \ { A } ) ) $=
    ( csn cdif wcel wn neldifsn a1i ) BCBDEFGABCHI $.

  $( Restricted existential quantification over a set with an element removed.
     (Contributed by NM, 4-Feb-2015.) $)
  rexdifsn $p |- ( E. x e. ( A \ { B } ) ph
      <-> E. x e. A ( x =/= B /\ ph ) ) $=
    ( cv wne wa csn cdif wcel eldifsn anbi1i anass bitri rexbii2 ) ABEZDFZAGZBC
    DHIZCPSJZAGPCJZQGZAGUARGTUBAPCDKLUAQAMNO $.

  $( Rearrangement of a property of a singleton difference.  (Contributed by
     Stefan O'Rear, 27-Feb-2015.) $)
  raldifsni $p |- ( A. x e. ( A \ { B } ) -. ph <->
      A. x e. A ( ph -> x = B ) ) $=
    ( wn cv wceq wi csn cdif wcel wne eldifsn imbi1i impexp df-ne con34b bitr4i
    wa imbi2i 3bitri ralbii2 ) AEZABFZDGZHZBCDIJZCUDUGKZUCHUDCKZUDDLZSZUCHUIUJU
    CHZHUIUFHUHUKUCUDCDMNUIUJUCOULUFUIULUEEZUCHUFUJUMUCUDDPNAUEQRTUAUB $.

  ${
    $d x Y $.
    $( Restricted universal quantification on a class difference with a
       singleton in terms of an implication.  (Contributed by Alexander van der
       Vekens, 26-Jan-2018.) $)
    raldifsnb $p |- ( A. x e. A ( x =/= Y -> ph )
                      <-> A. x e. ( A \ { Y } ) ph ) $=
      ( cv wne wi wral csn wnel cdif wcel wceq wn velsn nnel nne con4bii imbi1i
      3bitr4ri ralbii raldifb bitri ) BEZDFZAGZBCHUDDIZJZAGZBCHABCUGKHUFUIBCUEU
      HAUEUHUDUGLUDDMUHNUENBDOUDUGPUDDQTRSUAABCUGUBUC $.
  $}

  $( A set is an element of the universal class excluding a singleton iff it is
     not the singleton element.  (Contributed by AV, 7-Apr-2019.) $)
  eldifvsn $p |- ( A e. V -> ( A e. ( _V \ { B } ) <-> A =/= B ) ) $=
    ( wcel wne cvv wa csn cdif elex biantrurd eldifsn syl6rbbr ) ACDZABEZAFDZOG
    AFBHIDNPOACJKAFBLM $.

  ${
    $d A x $.  $d B x $.
    $( An element not in a set can be removed without affecting the set.
       (Contributed by NM, 16-Mar-2006.)  (Proof shortened by Andrew Salmon,
       29-Jun-2011.) $)
    difsn $p |- ( -. A e. B -> ( B \ { A } ) = B ) $=
      ( vx wcel wn csn cdif cv wne wa eldifsn simpl nelelne ancld impbid2 eqrdv
      syl5bb ) ABDEZCBAFGZBCHZSDTBDZTAIZJZRUATBAKRUCUAUAUBLRUAUBABTMNOQP $.

    $( Removal of a singleton from an unordered pair.  (Contributed by NM,
       16-Mar-2006.)  (Proof shortened by Andrew Salmon, 29-Jun-2011.) $)
    difprsnss $p |- ( { A , B } \ { A } ) C_ { B } $=
      ( vx cpr csn cdif cv wcel wn wa wceq vex elpr velsn notbii biorf biimparc
      wo syl2anb eldif 3imtr4i ssriv ) CABDZAEZFZBEZCGZUCHZUGUDHZIZJUGBKZUGUEHU
      GUFHUHUGAKZUKRZULIZUKUJUGABCLMUIULCANOUNUKUMULUKPQSUGUCUDTCBNUAUB $.
  $}

  $( Removal of a singleton from an unordered pair.  (Contributed by Thierry
     Arnoux, 4-Feb-2017.) $)
  difprsn1 $p |- ( A =/= B -> ( { A , B } \ { A } ) = { B } ) $=
    ( wne cpr csn cdif wceq necom cin c0 disjsn2 disj3 sylib cun df-pr equncomi
    difeq1i difun2 eqtri syl6reqr sylbir ) ABCBACZABDZAEZFZBEZGBAHUBUFUFUDFZUEU
    BUFUDIJGUFUGGBAKUFUDLMUEUFUDNZUDFUGUCUHUDUCUDUFABOPQUFUDRSTUA $.

  $( Removal of a singleton from an unordered pair.  (Contributed by Alexander
     van der Vekens, 5-Oct-2017.) $)
  difprsn2 $p |- ( A =/= B -> ( { A , B } \ { B } ) = { A } ) $=
    ( wne cpr csn cdif prcom difeq1i wceq necom difprsn1 sylbi syl5eq ) ABCZABD
    ZBEZFBADZPFZAEZOQPABGHNBACRSIABJBAKLM $.

  $( Removal of a singleton from an unordered triple.  (Contributed by
     Alexander van der Vekens, 5-Oct-2017.)  (Proof shortened by JJ,
     23-Jul-2021.) $)
  diftpsn3 $p |- ( ( A =/= C /\ B =/= C )
                    -> ( { A , B , C } \ { C } ) = { A , B } ) $=
    ( wne wa cpr csn cdif cun c0 ctp cin wceq disjprsn disj3 sylib eqcomd difid
    a1i uneq12d df-tp difeq1i difundir eqtr2i un0 3eqtr3g ) ACDBCDEZABFZCGZHZUI
    UIHZIZUHJIABCKZUIHZUHUGUJUHUKJUGUHUJUGUHUILJMUHUJMABCNUHUIOPQUKJMUGUIRSTUNU
    HUIIZUIHULUMUOUIABCUAUBUHUIUIUCUDUHUEUF $.

  $( Removing two elements as pair of elements corresponds to removing each of
     the two elements as singletons.  (Contributed by Alexander van der Vekens,
     13-Jul-2018.) $)
  difpr $p |- ( A \ { B , C } ) = ( ( A \ { B } ) \ { C } ) $=
    ( cpr cdif csn cun df-pr difeq2i difun1 eqtri ) ABCDZEABFZCFZGZEAMENELOABCH
    IAMNJK $.

  $( An unordered triple is an unordered pair if one of its elements is a
     proper class or is identical with another element.  (Contributed by
     Alexander van der Vekens, 6-Oct-2017.) $)
  tpprceq3 $p |- ( -. ( C e. _V /\ C =/= B ) -> { A , B , C } = { A , B } ) $=
    ( cvv wcel wne wa wn wo ctp cpr wceq ianor csn cun prprc2 tprot eqtri sylbi
    uneq1d df-tp prcom df-pr 3eqtr4g nne tppreq3 eqcoms jaoi ) CDEZCBFZGHUIHZUJ
    HZIABCJZABKZLZUIUJMUKUOULUKBCKZANZOZBNZUQOZUMUNUKUPUSUQBCPTUMBCAJURABCQBCAU
    ARUNBAKUTABUBBAUCRUDULCBLUOCBUEUOBCABCUFUGSUHS $.

  $( An unordered triple is an unordered pair if and only if one of its
     elements is a proper class or is identical with one of the another
     elements.  (Contributed by Alexander van der Vekens, 15-Jan-2018.) $)
  tppreqb $p |- ( -. ( C e. _V /\ C =/= A /\ C =/= B )
                     <-> { A , B , C } = { A , B } ) $=
    ( cvv wcel wne w3a wn ctp cpr wceq wo w3o wa ianor tpprceq3 sylbir jaoi nne
    sylbi 3ianor df-3or bitri orass tpcoma prcom 3eqtr3g orcom bitr4i csn df-tp
    cun eqeq1i wss ssequn2 wi snssg elpri 3mix2 3mix3 syl syl6bir 3mix1 pm2.61i
    orcs a1d sylibr impbii ) CDEZCAFZCBFZGHZABCIZABJZKZVLVIHZVJHZLZVKHZLZVOVLVP
    VQVSMZVTVIVJVKUAZVPVQVSUBUCVTVPVOVTVPLVRVSVPLZLVOVRVSVPUDVRVOWCVRBACIZBAJZV
    MVNVRVIVJNHWDWEKVIVJOBACPQBACUEBAUFUGWCVIVKNHZVOWCVPVSLWFVSVPUHVIVKOUIABCPT
    RTVETVOVNCUJZULZVNKZVLVMWHVNABCUKUMWIWGVNUNZVLWGVNUOWJWAVLVIWJWAUPVIWJCVNEZ
    WACVNDUQWKCAKZCBKZLWACABURWLWAWMWLVQWACASVQVPVSUSQWMVSWACBSVSVPVQUTQRVAVBVP
    WAWJVPVQVSVCVFVDWBVGQTVH $.

  $( ` ( B \ { A } ) ` equals ` B ` if and only if ` A ` is not a member of
     ` B ` .  Generalization of ~ difsn .  (Contributed by David Moews,
     1-May-2017.) $)
  difsnb $p |- ( -. A e. B <-> ( B \ { A } ) = B ) $=
    ( wcel wn csn cdif wceq difsn neldifsnd nelne1 mpdan necomd necon2bi impbii
    wne ) ABCZDBAEFZBGABHPQBPBQPAQCDBQOPABIABQJKLMN $.

  $( ` ( B \ { A } ) ` is a proper subclass of ` B ` if and only if ` A ` is a
     member of ` B ` .  (Contributed by David Moews, 1-May-2017.) $)
  difsnpss $p |- ( A e. B <-> ( B \ { A } ) C. B ) $=
    ( wcel wn csn cdif wpss notnotb wne wss wa difss biantrur difsnb necon3bbii
    df-pss 3bitr4i bitri ) ABCZSDZDZBAEZFZBGZSHUCBIZUCBJZUEKUAUDUFUEBUBLMTUCBAB
    NOUCBPQR $.

  $( The singleton of an element of a class is a subset of the class.
     (Contributed by NM, 6-Jun-1994.) $)
  snssi $p |- ( A e. B -> { A } C_ B ) $=
    ( wcel csn wss snssg ibi ) ABCADBEABBFG $.

  ${
    snssd.1 $e |- ( ph -> A e. B ) $.
    $( The singleton of an element of a class is a subset of the class
       (deduction form).  (Contributed by Jonathan Ben-Naim, 3-Jun-2011.) $)
    snssd $p |- ( ph -> { A } C_ B ) $=
      ( wcel csn wss snssi syl ) ABCEBFCGDBCHI $.
  $}

  $( If we remove a single element from a class then put it back in, we end up
     with the original class.  (Contributed by NM, 2-Oct-2006.) $)
  difsnid $p |- ( B e. A -> ( ( A \ { B } ) u. { B } ) = A ) $=
    ( wcel csn cdif cun uncom wss wceq snssi undif sylib syl5eq ) BACZABDZEZOFO
    PFZAPOGNOAHQAIBAJOAKLM $.

  $( An element of a difference set is an element of the difference with a
     singleton.  (Contributed by AV, 2-Jan-2022.) $)
  eldifeldifsn $p |- ( ( X e. A /\ Y e. ( B \ A ) ) -> Y e. ( B \ { X } ) ) $=
    ( wcel cdif csn snssi sscond sselda ) CAEZBAFBCGZFDKLABCAHIJ $.

  $( Compute the power set of the empty set.  Theorem 89 of [Suppes] p. 47.
     (Contributed by NM, 5-Aug-1993.)  (Proof shortened by Andrew Salmon,
     29-Jun-2011.) $)
  pw0 $p |- ~P (/) = { (/) } $=
    ( vx cv c0 wss cab wceq cpw csn ss0b abbii df-pw df-sn 3eqtr4i ) ABZCDZAENC
    FZAECGCHOPANIJACKACLM $.

  ${
    $d x y $.
    $( Compute the power set of the power set of the empty set.  (See ~ pw0 for
       the power set of the empty set.)  Theorem 90 of [Suppes] p. 48.
       Although this theorem is a special case of ~ pwsn , we have chosen to
       show a direct elementary proof.  (Contributed by NM, 7-Aug-1994.) $)
    pwpw0 $p |- ~P { (/) } = { (/) , { (/) } } $=
      ( vx vy cv c0 csn wss cab wceq wo cpw cpr wn wa wcel wi dfss2 velsn sylbi
      wal wex imbi2i albii bitri neq0 exintr syl5bi exancom df-clel bitr4i syl6
      snssi anc2li eqss syl6ibr orrd 0ss sseq1 mpbiri eqimss impbii abbii df-pw
      jaoi dfpr2 3eqtr4i ) ACZDEZFZAGVFDHZVFVGHZIZAGVGJDVGKVHVKAVHVKVHVIVJVHVIL
      ZVHVGVFFZMVJVHVLVMVHBCZVFNZVNDHZOZBSZVLVMOVHVOVNVGNZOZBSVRBVFVGPVTVQBVSVP
      VOBDQUAUBUCVRVLVOVPMBTZVMVLVOBTVRWABVFUDVOVPBUEUFWADVFNZVMWAVPVOMBTWBVOVP
      BUGBDVFUHUIDVFUKRUJRULVFVGUMUNUOVIVHVJVIVHDVGFVGUPVFDVGUQURVFVGUSVCUTVAAV
      GVBADVGVDVE $.
  $}

  $( A singleton is a subset of an unordered pair containing its member.
     (Contributed by NM, 27-Aug-2004.) $)
  snsspr1 $p |- { A } C_ { A , B } $=
    ( csn cun cpr ssun1 df-pr sseqtr4i ) ACZIBCZDABEIJFABGH $.

  $( A singleton is a subset of an unordered pair containing its member.
     (Contributed by NM, 2-May-2009.) $)
  snsspr2 $p |- { B } C_ { A , B } $=
    ( csn cun cpr ssun2 df-pr sseqtr4i ) BCZACZIDABEIJFABGH $.

  $( A singleton is a subset of an unordered triple containing its member.
     (Contributed by NM, 9-Oct-2013.) $)
  snsstp1 $p |- { A } C_ { A , B , C } $=
    ( csn cpr cun ctp snsspr1 ssun1 sstri df-tp sseqtr4i ) ADZABEZCDZFZABCGMNPA
    BHNOIJABCKL $.

  $( A singleton is a subset of an unordered triple containing its member.
     (Contributed by NM, 9-Oct-2013.) $)
  snsstp2 $p |- { B } C_ { A , B , C } $=
    ( csn cpr cun ctp snsspr2 ssun1 sstri df-tp sseqtr4i ) BDZABEZCDZFZABCGMNPA
    BHNOIJABCKL $.

  $( A singleton is a subset of an unordered triple containing its member.
     (Contributed by NM, 9-Oct-2013.) $)
  snsstp3 $p |- { C } C_ { A , B , C } $=
    ( csn cpr cun ctp ssun2 df-tp sseqtr4i ) CDZABEZKFABCGKLHABCIJ $.

  $( A pair of elements of a class is a subset of the class.  Theorem 7.5 of
     [Quine] p. 49.  (Contributed by NM, 22-Mar-2006.)  (Proof shortened by
     Andrew Salmon, 29-Jun-2011.) $)
  prssg $p |- ( ( A e. V /\ B e. W )
              -> ( ( A e. C /\ B e. C ) <-> { A , B } C_ C ) ) $=
    ( wcel wa csn wss cpr snssg bi2anan9 cun unss df-pr sseq1i bitr4i syl6bb )
    ADFZBEFZGACFZBCFZGAHZCIZBHZCIZGZABJZCIZSUAUDTUBUFACDKBCEKLUGUCUEMZCIUIUCUEC
    NUHUJCABOPQR $.

  ${
    prss.1 $e |- A e. _V $.
    prss.2 $e |- B e. _V $.
    $( A pair of elements of a class is a subset of the class.  Theorem 7.5 of
       [Quine] p. 49.  (Contributed by NM, 30-May-1994.)  (Proof shortened by
       Andrew Salmon, 29-Jun-2011.)  (Proof shortened by JJ, 23-Jul-2021.) $)
    prss $p |- ( ( A e. C /\ B e. C ) <-> { A , B } C_ C ) $=
      ( cvv wcel wa cpr wss wb prssg mp2an ) AFGBFGACGBCGHABICJKDEABCFFLM $.
  $}

  $( A pair of elements of a class is a subset of the class.  (Contributed by
     NM, 16-Jan-2015.) $)
  prssi $p |- ( ( A e. C /\ B e. C ) -> { A , B } C_ C ) $=
    ( wcel wa cpr wss prssg ibi ) ACDBCDEABFCGABCCCHI $.

  ${
    prssd.1 $e |- ( ph -> A e. C ) $.
    prssd.2 $e |- ( ph -> B e. C ) $.
    $( Deduction version of ~ prssi :  A pair of elements of a class is a
       subset of the class.  (Contributed by Glauco Siliprandi,
       17-Aug-2020.) $)
    prssd $p |- ( ph -> { A , B } C_ C ) $=
      ( wcel cpr wss prssi syl2anc ) ABDGCDGBCHDIEFBCDJK $.
  $}

  $( An unordered pair belongs to the power class of a class iff each member
     belongs to the class.  (Contributed by Thierry Arnoux, 3-Oct-2016.)
     (Revised by NM, 18-Jan-2018.) $)
  prsspwg $p |- ( ( A e. V /\ B e. W ) -> ( { A , B } C_ ~P C
      <-> ( A C_ C /\ B C_ C ) ) ) $=
    ( wcel wa cpw cpr wss prssg elpwg bi2anan9 bitr3d ) ADFZBEFZGACHZFZBQFZGABI
    QJACJZBCJZGABQDEKORTPSUAACDLBCELMN $.

  $( A pair as subset of a pair.  (Contributed by AV, 26-Oct-2020.) $)
  ssprss $p |- ( ( A e. V /\ B e. W ) -> ( { A , B } C_ { C , D }
                        <-> ( ( A = C \/ A = D ) /\ ( B = C \/ B = D ) ) ) ) $=
    ( wcel wa cpr wss wceq wo prssg elprg bi2anan9 bitr3d ) AEGZBFGZHACDIZGZBSG
    ZHABISJACKADKLZBCKBDKLZHABSEFMQTUBRUAUCACDENBCDFNOP $.

  $( A proper pair is a subset of a pair iff it is equal to the superset.
     (Contributed by AV, 26-Oct-2020.) $)
  ssprsseq $p |- ( ( A e. V /\ B e. W /\ A =/= B ) -> ( { A , B } C_ { C , D }
                                               <-> { A , B } = { C , D } ) ) $=
    ( wcel wne w3a cpr wceq wo wa wi eqtr3 syl11 3ad2ant3 com12 preq12 a1d wss
    wb ssprss 3adant3 eqneqall prcom syl6eq ccase sylbid eqimss impbid1 ) AEGZB
    FGZABHZIZABJZCDJZUAZUPUQKZUOURACKZADKZLBCKZBDKZLMZUSULUMURVDUBUNABCDEFUCUDV
    DUOUSUTVBVAVCUOUSNUOUTVBMZUSUNULVEUSNUMABKZUNUSVEUSABUEZABCOPQRVAVBMZUSUOVH
    UPDCJUQABDCSDCUFUGTUTVCMUSUOABCDSTUOVAVCMZUSUNULVIUSNUMVFUNUSVIVGABDOPQRUHR
    UIUPUQUJUK $.

  ${
    $d x A $.  $d x B $.
    $( The subsets of a singleton.  (Contributed by NM, 24-Apr-2004.) $)
    sssn $p |- ( A C_ { B } <-> ( A = (/) \/ A = { B } ) ) $=
      ( vx csn wss c0 wceq wo wn wa wcel cv wex neq0 ssel elsni syl6 eleq1 ibd
      wb exlimdv syl5bi snssi anc2li eqss syl6ibr orrd sseq1 mpbiri eqimss jaoi
      0ss impbii ) ABDZEZAFGZAUNGZHUOUPUQUOUPIZUOUNAEZJUQUOURUSUOURBAKZUSURCLZA
      KZCMUOUTCANUOVBUTCUOVBUTUOVBVABGZVBUTTUOVBVAUNKVCAUNVAOVABPQVABARQSUAUBBA
      UCQUDAUNUEUFUGUPUOUQUPUOFUNEUNULAFUNUHUIAUNUJUKUM $.

    $( The property of being sandwiched between two sets naturally splits under
       union with a singleton.  This is the induction hypothesis for the
       determination of large powersets such as ~ pwtp .  (Contributed by Mario
       Carneiro, 2-Jul-2016.) $)
    ssunsn2 $p |- ( ( B C_ A /\ A C_ ( C u. { D } ) )
                    <-> ( ( B C_ A /\ A C_ C ) \/
                      ( ( B u. { D } ) C_ A /\ A C_ ( C u. { D } ) ) ) ) $=
      ( wcel wss csn cun wa wo wb syl wi anim12d pm4.72 sylib bitrd wceq bitr3i
      a1i snssi unss bicomi rbaibr anbi1d biimpi expcom ssun3 wn cdif c0 disjsn
      cin disj3 sseq1 sylbi uncom sseq2i ssundif syl6rbbr anbi2d simplbi biimpd
      orcom syl6bb pm2.61i ) DAEZBAFZACDGZHZFZIZVHACFZIZBVIHAFZVKIZJZKVGVLVPVQV
      GVHVOVKVGVIAFZVHVOKDAUAZVOVHVRVHVRIZVOBVIAUBZUCZUDLUEVGVNVPMVPVQKVGVHVOVM
      VKVGVRVHVOMVSVHVRVOVTVOWAUFUGLVMVKMVGACVIUHTNVNVPOPQVGUIZVLVNVQWCVKVMVHWC
      VMAVIUJZCFZVKWCAWDRZVMWEKWCAVIUMUKRWFADULAVIUNSAWDCUOUPVKAVICHZFWEWGVJAVI
      CUQURAVICUSSUTZVAWCVNVPVNJZVQWCVPVNMVNWIKWCVOVHVKVMVOVHMWCVOVHVRWBVBTWCVK
      VMWHVCNVPVNOPVPVNVDVEQVF $.

    $( Possible values for a set sandwiched between another set and it plus a
       singleton.  (Contributed by Mario Carneiro, 2-Jul-2016.) $)
    ssunsn $p |- ( ( B C_ A /\ A C_ ( B u. { C } ) )
        <-> ( A = B \/ A = ( B u. { C } ) ) ) $=
      ( wss csn cun wa wo wceq ssunsn2 ancom eqss bitr4i orbi12i bitri ) BADZAB
      CEFZDZGPABDZGZQADZRGZHABIZAQIZHABBCJTUCUBUDTSPGUCPSKABLMUBRUAGUDUARKAQLMN
      O $.

    $( Two ways to express that a nonempty set equals a singleton.
       (Contributed by NM, 15-Dec-2007.)  (Proof shortened by JJ,
       23-Jul-2021.) $)
    eqsn $p |- ( A =/= (/) -> ( A = { B } <-> A. x e. A x = B ) ) $=
      ( c0 wne csn wceq wo cv wral wn wb df-ne biorf sylbi wss wcel dfss3 velsn
      sssn ralbii 3bitr3i syl6bb ) BDEZBCFZGZBDGZUFHZAIZCGZABJZUDUGKUFUHLBDMUGU
      FNOBUEPUIUEQZABJUHUKABUERBCTULUJABACSUAUBUC $.
  $}

  ${
    $d A w x y z $.
    $( A sufficient condition for a (nonempty) set to be a singleton.
       (Contributed by AV, 20-Sep-2020.) $)
    issn $p |- ( E. x e. A A. y e. A x = y -> E. z A = { z } ) $=
      ( weq wral cv csn wceq wex wcel wb equcom a1i ralbidv wne ne0i eqsn syl
      c0 bitr4d sneq eqeq2d spcegv sylbid rexlimiv ) ABEZBDFZDCGZHZIZCJZADAGZDK
      ZUHDUMHZIZULUNUHBAEZBDFZUPUNUGUQBDUGUQLUNABMNOUNDTPUPURLDUMQBDUMRSUAUKUPC
      UMDCAEUJUODUIUMUBUCUDUEUF $.

    $( A nonempty set is either a singleton or contains at least two different
       elements.  (Contributed by AV, 20-Sep-2020.) $)
    n0snor2el $p |- ( A =/= (/)
                      -> ( E. x e. A E. y e. A x =/= y \/ E. z A = { z } ) ) $=
      ( vw weq wral wrex c0 wne cv csn wceq wex wo wi issn olcd wn bitri rexbii
      a1d df-ne rexnal ralbii ralnex wa neeq1 rexbidv rspccva reximdva0 orcd ex
      sylbir pm2.61i ) EBFZBDGZEDHZDIJZAKZBKZJZBDHZADHZDCKLMCNZOZPZURVFUSURVEVD
      EBCDQRUBURSZEKZVAJZBDHZEDGZVGVLUQSZEDGVHVKVMEDVKUPSZBDHVMVJVNBDVIVAUCUAUP
      BDUDTUEUQEDUFTVLUSVFVLUSUGVDVEVLVCADVKVCEUTDEAFVJVBBDVIUTVAUHUIUJUKULUMUN
      UO $.
  $}

  $( Possible values for a set sandwiched between another set and it plus a
     singleton.  (Contributed by Mario Carneiro, 2-Jul-2016.) $)
  ssunpr $p |- ( ( B C_ A /\ A C_ ( B u. { C , D } ) )
      <-> ( ( A = B \/ A = ( B u. { C } ) ) \/
        ( A = ( B u. { D } ) \/ A = ( B u. { C , D } ) ) ) ) $=
    ( wss cpr cun wa csn wo wceq df-pr uneq2i unass eqtr4i sseq2i anbi2i ssunsn
    ssunsn2 3bitri un23 eqtr2i eqeq2i orbi2i orbi12i ) BAEZABCDFZGZEZHUFABCIZGZ
    DIZGZEZHUFAUKEHZBULGZAEZUNHZJABKAUKKJZAUPKZAUHKZJZJUIUNUFUHUMAUHBUJULGZGUMU
    GVCBCDLMBUJULNOZPQABUKDSUOUSURVBABCRURUQAUPUJGZEZHUTAVEKZJVBUNVFUQUMVEABUJU
    LUAZPQAUPCRVGVAUTVEUHAUHUMVEVDVHUBUCUDTUET $.

  $( The subsets of a pair.  (Contributed by NM, 16-Mar-2006.)  (Proof
     shortened by Mario Carneiro, 2-Jul-2016.) $)
  sspr $p |- ( A C_ { B , C }
        <-> ( ( A = (/) \/ A = { B } ) \/ ( A = { C } \/ A = { B , C } ) ) ) $=
    ( cpr wss c0 cun wa wceq csn wo uncom un0 sseq2i 0ss biantrur bitr3i eqeq2i
    eqtri orbi12i ssunpr orbi2i 3bitri ) ABCDZEZFAEZAFUDGZEZHZAFIZAFBJZGZIZKZAF
    CJZGZIZAUGIZKZKUJAUKIZKZAUOIZAUDIZKZKUEUHUIUGUDAUGUDFGUDFUDLUDMSZNUFUHAOPQA
    FBCUAUNVAUSVDUMUTUJULUKAULUKFGUKFUKLUKMSRUBUQVBURVCUPUOAUPUOFGUOFUOLUOMSRUG
    UDAVERTTUC $.

  $( The subsets of a triple.  (Contributed by Mario Carneiro, 2-Jul-2016.) $)
  sstp $p |- ( A C_ { B , C , D }
        <-> ( ( ( A = (/) \/ A = { B } ) \/ ( A = { C } \/ A = { B , C } ) ) \/
          ( ( A = { D } \/ A = { B , D } ) \/
            ( A = { C , D } \/ A = { B , C , D } ) ) ) ) $=
    ( wss cpr csn cun c0 wa wceq wo sseq2i biantrur uncom eqtr4i eqeq2i orbi12i
    df-pr 3bitri ctp df-tp 0ss ssunsn2 sspr bitr3i sseq1i anbi12i ssunpr orbi2i
    un0 eqtri eqtr2i bitri ) ABCDUAZEABCFZDGZHZEZIAEZUSJZAIKABGZKLACGZKAUPKLLZA
    UQKZABDFZKZLZACDFZKZAUOKZLZLZLZUOURABCDUBZMUTUSAUCZNVAUTAUPEZJZIUQHZAEZUSJZ
    LVNAIUPDUDVRVDWAVMVRVQVDUTVQVPNABCUEUFWAUQAEZAUQUPHZEZJVEAUQVBHZKZLZAUQVCHZ
    KZAWCKZLZLVMVTWBUSWDVSUQAVSUQIHUQIUQOUQUKULUGURWCAUPUQOZMUHAUQBCUIWGVHWKVLW
    FVGVEWEVFAWEVBUQHVFUQVBOBDSPQUJWIVJWJVKWHVIAWHVCUQHVIUQVCOCDSPQWCUOAUOURWCV
    OWLUMQRRTRUNT $.

  ${
    tpss.1 $e |- A e. _V $.
    tpss.2 $e |- B e. _V $.
    tpss.3 $e |- C e. _V $.
    $( A triplet of elements of a class is a subset of the class.  (Contributed
       by NM, 9-Apr-1994.)  (Proof shortened by Andrew Salmon, 29-Jun-2011.) $)
    tpss $p |- ( ( A e. D /\ B e. D /\ C e. D ) <-> { A , B , C } C_ D ) $=
      ( cpr wss csn wa cun wcel w3a ctp unss df-3an prss snss anbi12i 3bitr4i
      bitri df-tp sseq1i ) ABHZDIZCJZDIZKZUEUGLZDIADMZBDMZCDMZNZABCOZDIUEUGDPUN
      UKULKZUMKUIUKULUMQUPUFUMUHABDEFRCDGSTUBUOUJDABCUCUDUA $.
  $}

  $( A triple of elements of a class is a subset of the class.  (Contributed by
     Alexander van der Vekens, 1-Feb-2018.) $)
  tpssi $p |- ( ( A e. D /\ B e. D /\ C e. D ) -> { A , B , C } C_ D ) $=
    ( w3a ctp cpr csn cun df-tp wss prssi 3adant3 snssi 3ad2ant3 unssd syl5eqss
    wcel ) ADRZBDRZCDRZEZABCFABGZCHZIDABCJUBUCUDDSTUCDKUAABDLMUASUDDKTCDNOPQ $.

  $( Closed form of ~ sneqr .  (Contributed by Scott Fenton, 1-Apr-2011.)
     (Proof shortened by JJ, 23-Jul-2021.) $)
  sneqrg $p |- ( A e. V -> ( { A } = { B } -> A = B ) ) $=
    ( wcel csn wceq snidg eleq2 syl5ibcom elsng sylibd ) ACDZAEZBEZFZANDZABFLAM
    DOPACGMNAHIABCJK $.

  ${
    sneqr.1 $e |- A e. _V $.
    $( If the singletons of two sets are equal, the two sets are equal.  Part
       of Exercise 4 of [TakeutiZaring] p. 15.  (Contributed by NM,
       27-Aug-1993.) $)
    sneqr $p |- ( { A } = { B } -> A = B ) $=
      ( cvv wcel csn wceq wi sneqrg ax-mp ) ADEAFBFGABGHCABDIJ $.

    $( If a singleton is a subset of another, their members are equal.
       (Contributed by NM, 28-May-2006.) $)
    snsssn $p |- ( { A } C_ { B } -> A = B ) $=
      ( csn wss c0 wceq wo sssn snnz neii pm2.21i sneqr jaoi sylbi ) ADZBDZEPFG
      ZPQGZHABGZPBIRTSRTPFACJKLABCMNO $.
  $}

  ${
    $d x y A $.
    $( There exists at most one set whose singleton is equal to a given class.
       See also ~ moeq .  (Contributed by BJ, 24-Sep-2022.) $)
    mosneq $p |- E* x { x } = A $=
      ( vy cv csn wceq wmo wa weq wi wal eqtr3 vex sneqr gen2 sneq eqeq1d mpbir
      syl mo4 ) ADZEZBFZAGUCCDZEZBFZHZACIZJZCKAKUIACUGUBUEFUHUBUEBLUAUDAMNSOUCU
      FACUHUBUEBUAUDPQTR $.
  $}

  $( Two singletons of sets are equal iff their elements are equal.
     (Contributed by Scott Fenton, 16-Apr-2012.) $)
  sneqbg $p |- ( A e. V -> ( { A } = { B } <-> A = B ) ) $=
    ( wcel csn wceq sneqrg sneq impbid1 ) ACDAEBEFABFABCGABHI $.

  ${
    $d x A $.
    $( The singleton of a class is a subset of its power class.  (Contributed
       by NM, 21-Jun-1993.) $)
    snsspw $p |- { A } C_ ~P A $=
      ( vx csn cpw cv wceq wss wcel eqimss velsn selpw 3imtr4i ssriv ) BACZADZB
      EZAFPAGPNHPOHPAIBAJBAKLM $.
  $}

  ${
    prsspw.1 $e |- A e. _V $.
    prsspw.2 $e |- B e. _V $.
    $( An unordered pair belongs to the power class of a class iff each member
       belongs to the class.  (Contributed by NM, 10-Dec-2003.)  (Proof
       shortened by Andrew Salmon, 26-Jun-2011.)  (Proof shortened by OpenAI,
       25-Mar-2020.) $)
    prsspw $p |- ( { A , B } C_ ~P C <-> ( A C_ C /\ B C_ C ) ) $=
      ( cvv wcel cpr cpw wss wa wb prsspwg mp2an ) AFGBFGABHCIJACJBCJKLDEABCFFM
      N $.
  $}

  ${
    preq1b.a $e |- ( ph -> A e. V ) $.
    preq1b.b $e |- ( ph -> B e. W ) $.
    $( Biconditional equality lemma for unordered pairs, deduction form.  Two
       unordered pairs have the same second element iff the first elements are
       equal.  (Contributed by AV, 18-Dec-2020.) $)
    preq1b $p |- ( ph -> ( { A , C } = { B , C } <-> A = B ) ) $=
      ( cpr wceq wa wo wcel prid1g syl eleq2 wb elprg sylibd imp eqcom eqeq2 ex
      syl5ibcom syl5ibrcom oplem1 preq1 impbid1 ) ABDIZCDIZJZBCJZAUKULAUKKULBDJ
      ZCBJZCDJZAUKULUMLZAUKBUJMZUPABUIMZUKUQABEMZURGBDENOUIUJBPUDAUSUQUPQGBCDER
      OSTAUKUNUOLZAUKCUIMZUTAVAUKCUJMZACFMZVBHCDFNOUIUJCPUEAVCVAUTQHCBDFROSTBCU
      ABDCUBUFUCBCDUGUH $.

    $( Biconditional equality lemma for unordered pairs, deduction form.  Two
       unordered pairs have the same first element iff the second elements are
       equal.  (Contributed by AV, 18-Dec-2020.) $)
    preq2b $p |- ( ph -> ( { C , A } = { C , B } <-> A = B ) ) $=
      ( cpr wceq prcom eqeq12i preq1b syl5bb ) DBIZDCIZJBDIZCDIZJABCJOQPRDBKDCK
      LABCDEFGHMN $.
  $}

  ${
    preqr1.a $e |- A e. _V $.
    preqr1.b $e |- B e. _V $.
    $( Reverse equality lemma for unordered pairs.  If two unordered pairs have
       the same second element, the first elements are equal.  (Contributed by
       NM, 18-Oct-1995.) $)
    preqr1 $p |- ( { A , C } = { B , C } -> A = B ) $=
      ( cpr wceq cvv wcel wb id a1i preq1b ax-mp biimpi ) ACFBCFGZABGZAHIZPQJDR
      ABCHHRKBHIRELMNO $.

    $( Reverse equality lemma for unordered pairs.  If two unordered pairs have
       the same first element, the second elements are equal.  (Contributed by
       NM, 15-Jul-1993.) $)
    preqr2 $p |- ( { C , A } = { C , B } -> A = B ) $=
      ( cpr wceq prcom eqeq12i preqr1 sylbi ) CAFZCBFZGACFZBCFZGABGLNMOCAHCBHIA
      BCDEJK $.

    preq12b.c $e |- C e. _V $.
    preq12b.d $e |- D e. _V $.
    $( Equality relationship for two unordered pairs.  (Contributed by NM,
       17-Oct-1996.) $)
    preq12b $p |- ( { A , B } = { C , D } <->
                   ( ( A = C /\ B = D ) \/ ( A = D /\ B = C ) ) ) $=
      ( cpr wceq wa wo wcel preq1 eqeq1d preqr2 syl6bi com12 ancld prcom eqeq2i
      prid1 eleq2 mpbii elpr sylib sylbi orim12d mpd preq12 syl6eq jaoi impbii
      wi ) ABIZCDIZJZACJZBDJZKZADJZBCJZKZLZUQURVALZVDUQAUPMZVEUQAUOMVFABEUBUOUP
      AUCUDACDEUEUFUQURUTVAVCUQURUSURUQUSURUQCBIZUPJUSURUOVGUPACBNOBDCFHPQRSUQV
      AVBUQUODCIZJZVAVBUNUPVHUOCDTUAVAVIVBVAVIDBIZVHJVBVAUOVJVHADBNOBCDFGPQRUGS
      UHUIUTUQVCABCDUJVCUOVHUPABDCUJDCTUKULUM $.

    $( An unordered pair has the ordered pair property (compare ~ opth ) under
       certain conditions.  (Contributed by NM, 27-Mar-2007.) $)
    opthpr $p |- ( A =/= D ->
                 ( { A , B } = { C , D } <-> ( A = C /\ B = D ) ) ) $=
      ( cpr wceq wa wo wne preq12b idd wn wi df-ne pm2.21 sylbi impd orc syl5bb
      jaod impbid1 ) ABICDIJACJBDJKZADJZBCJZKZLZADMZUFABCDEFGHNUKUJUFUKUFUFUIUK
      UFOUKUGUHUFUKUGPUGUHUFQZQADRUGULSTUAUDUFUIUBUEUC $.
  $}

  $( Reverse equality lemma for unordered pairs.  If two unordered pairs have
     the same second element, the first elements are equal.  Closed form of
     ~ preqr1 .  (Contributed by AV, 29-Jan-2021.)  (Revised by AV,
     18-Sep-2021.) $)
  preqr1g $p |- ( ( A e. V /\ B e. W )
                  -> ( { A , C } = { B , C } -> A = B ) ) $=
    ( wcel wa cpr wceq simpl simpr preq1b biimpd ) ADFZBEFZGZACHBCHIABIPABCDENO
    JNOKLM $.

  ${
    $d A x y z w $.  $d B x y z w $.  $d C x y z w $.  $d D x y z w $.
    $d V x y z w $.  $d W x y z w $.  $d X x y z w $.  $d Y x y z w $.
    $( Closed form of ~ preq12b .  (Contributed by Scott Fenton,
       28-Mar-2014.) $)
    preq12bg $p |- ( ( ( A e. V /\ B e. W ) /\ ( C e. X /\ D e. Y ) ) ->
       ( { A , B } = { C , D } <->
         ( ( A = C /\ B = D ) \/ ( A = D /\ B = C ) ) ) ) $=
      ( vx vy vz vw wcel wa cpr wceq wo wb wi cv weq preq1 eqeq1d eqeq1 orbi12d
      anbi1d bibi12d imbi2d preq2 anbi2d eqeq2 w3a vex preq12b vtoclbg vtocl3ga
      eqeq2d a1i 3expa impr ) AEMZBFMZNCGMZDHMZABOZCDOZPZACPZBDPZNZADPZBCPZNZQZ
      RZVAVBVCVDVOSZVDITZJTZOZKTZDOZPZIKUAZVRDPZNZVQDPZJKUAZNZQZRZSZVDAVROZWAPZ
      AVTPZWDNZVKWGNZQZRZSVDVEWAPZWNVINZVKBVTPZNZQZRZSVPIJKABCEFGVQAPZWJWRVDXEW
      BWMWIWQXEVSWLWAVQAVRUBUCXEWEWOWHWPXEWCWNWDVQAVTUDUFXEWFVKWGVQADUDUFUEUGUH
      VRBPZWRXDVDXFWMWSWQXCXFWLVEWAVRBAUIUCXFWOWTWPXBXFWDVIWNVRBDUDUJXFWGXAVKVR
      BVTUDUJUEUGUHVTCPZXDVOVDXGWSVGXCVNXGWAVFVEVTCDUBUQXGWTVJXBVMXGWNVHVIVTCAU
      KUFXGXAVLVKVTCBUKUJUEUGUHWKVQEMVRFMVTGMULVSVTLTZOZPWCJLUAZNZILUAZWGNZQWBW
      ILDHXHDPZXIWAVSXHDVTUIUQXNXKWEXMWHXNXJWDWCXHDVRUKUJXNXLWFWGXHDVQUKUFUEVQV
      RVTXHIUMJUMKUMLUMUNUOURUPUSUT $.
  $}

  $( Two pairs are not equal if at least one element of the first pair is not
     contained in the second pair.  (Contributed by Alexander van der Vekens,
     13-Aug-2017.) $)
  prneimg $p |- ( ( ( A e. U /\ B e. V ) /\ ( C e. X /\ D e. Y ) )
                  -> ( ( ( A =/= C /\ A =/= D ) \/ ( B =/= C /\ B =/= D ) )
                       -> { A , B } =/= { C , D } ) ) $=
    ( wcel wa wne wo cpr wceq wn ianor nne orbi12i bitr2i syl6ib preq12bg orddi
    simpll pm1.4 ad2antll jca sylbi syl6bi anbi12i pm4.56 necon2ad ) AEIBFIJCGI
    DHIJJZACKZADKZJZBCKZBDKZJZLZABMZCDMZULUTVANZUOOZUROZJZUSOULVBACNZADNZLZBCNZ
    BDNZLZJZVEULVBVFVJJVGVIJLZVLABCDEFGHUAVMVHVFVILZJZVJVGLZVJVILZJZJZVLVFVJVGV
    IUBVSVHVKVHVNVRUCVQVKVOVPVJVIUDUEUFUGUHVHVCVKVDVCUMOZUNOZLVHUMUNPVTVFWAVGAC
    QADQRSVDUPOZUQOZLVKUPUQPWBVIWCVJBCQBDQRSUITUOURUJTUK $.

  $( A (proper) pair is not equal to another (maybe improper) pair if and only
     if an element of the first pair is not contained in the second pair.
     (Contributed by Alexander van der Vekens, 16-Jan-2018.) $)
  prnebg $p |- ( ( ( A e. U /\ B e. V ) /\ ( C e. X /\ D e. Y ) /\ A =/= B )
                  -> ( ( ( A =/= C /\ A =/= D ) \/ ( B =/= C /\ B =/= D ) )
                       <-> { A , B } =/= { C , D } ) ) $=
    ( wcel wa wne wo cpr wi wn wceq ianor nne bitri jaoi prneimg ioran eqneqall
    w3a 3adant3 orbi12i anbi12i anddi eqtr3 syl preq12 a1d prcom com12 3ad2ant3
    syl6eq syl5bi necon1ad impbid ) AEIBFIJZCGIDHIJZABKZUDZACKZADKZJZBCKZBDKZJZ
    LZABMZCDMZKZUTVAVJVMNVBABCDEFGHUAUEVCVJVKVLVJOZACPZADPZLZBCPZBDPZLZJZVCVKVL
    PZVNVFOZVIOZJWAVFVIUBWCVQWDVTWCVDOZVEOZLVQVDVEQWEVOWFVPACRADRUFSWDVGOZVHOZL
    VTVGVHQWGVRWHVSBCRBDRUFSUGSWAVOVRJZVOVSJZLZVPVRJZVPVSJZLZLZVCWBVOVPVRVSUHVB
    UTWOWBNVAWOVBWBWKVBWBNZWNWIWPWJWIABPZWPABCUIWBABUCZUJWJWBVBABCDUKULTWLWPWMW
    LWBVBWLVKDCMVLABDCUKDCUMUPULWMWQWPABDUIWRUJTTUNUOUQUQURUS $.

  $( A (proper) pair is equal to another (maybe improper) pair containing one
     element of the first pair if and only if the other element of the first
     pair is contained in the second pair.  (Contributed by Alexander van der
     Vekens, 26-Jan-2018.) $)
  pr1eqbg $p |- ( ( ( A e. U /\ B e. V /\ C e. X ) /\ A =/= B )
                  -> ( A = C <-> { A , B } = { B , C } ) ) $=
    ( wcel w3a wne wa wceq wo cpr wb eqid biantru orbi2i a1i wn syl neneq biorf
    adantl intnanrd 3simpa 3simpc jca adantr preq12bg 3bitr4d ) ADGZBEGZCFGZHZA
    BIZJZABKZBCKZJZACKZLZUSUTBBKZJZLZUTABMBCMKZVAVDNUPUTVCUSVBUTBOPQRUPUSSUTVAN
    UPUQURUOUQSUNABUAUCUDUSUTUBTUPUKULJZULUMJZJZVEVDNUNVHUOUNVFVGUKULUMUEUKULUM
    UFUGUHABBCDEEFUITUJ $.

  $( A (proper) pair is not equal to another (maybe improper) pair containing
     one element of the first pair if and only if the other element of the
     first pair is not contained in the second pair.  (Contributed by Alexander
     van der Vekens, 26-Jan-2018.) $)
  pr1nebg $p |- ( ( ( A e. U /\ B e. V /\ C e. X ) /\ A =/= B )
                  -> ( A =/= C <-> { A , B } =/= { B , C } ) ) $=
    ( wcel w3a wne wa cpr pr1eqbg necon3bid ) ADGBEGCFGHABIJACABKBCKABCDEFLM $.

  ${
    preqsnd.1 $e |- ( ph -> A e. _V ) $.
    preqsnd.2 $e |- ( ph -> B e. _V ) $.
    $( Equivalence for a pair equal to a singleton, deduction form.
       (Contributed by Thierry Arnoux, 27-Dec-2016.)  (Revised by AV,
       13-Jun-2022.) $)
    preqsnd $p |- ( ph -> ( { A , B } = { C } <-> ( A = C /\ B = C ) ) ) $=
      ( cvv wcel cpr csn wceq wa wb adantl simpl dfsn2 wn c0 wi syl wo preq12bg
      eqeq2i oridm syl6bb syl5bb syl22anc snprc biimpi adantr wne prnzg syl5com
      eqeq2d eqneqall sylbid eleq1 eqcoms notbid pm2.21 syl6bi impcom pm2.61ian
      com13 impd impbid ) DGHZABCIZDJZKZBDKZCDKZLZMZVGALBGHZCGHZVGVGVNAVOVGENAV
      PVGFNVGAOZVQVJVHDDIZKZVOVPLVGVGLLZVMVIVRVHDPUCVTVSVMVMUAVMBCDDGGGGUBVMUDU
      EUFUGVGQZALZVJVMWBVJVHRKZVMWBVIRVHWAVIRKZAWAWDDUHUIUJUNAWCVMSZWAAVOWEEVOV
      HRUKWCVMBCGULVMVHRUOUMTNUPWBVKVLVJAWAVKVLVJSZSZAVOWAWGSEVKWAVOWFVKWAVOQVO
      WFSVKVGVOVGVOMDBDBGUQURUSVOWFUTVAVDTVBVEVFVC $.
  $}

  $( A proper unordered pair is not a (proper or improper) singleton.
     (Contributed by AV, 13-Jun-2022.) $)
  prnesn $p |- ( ( A e. V /\ B e. W /\ A =/= B ) -> { A , B } =/= { C } ) $=
    ( wcel wne w3a cpr csn wceq wa wn eqtr3 necon3ai 3ad2ant3 cvv elex 3ad2ant1
    3ad2ant2 preqsnd necon3abid mpbird ) ADFZBEFZABGZHZABIZCJZGACKBCKLZMZUFUDUK
    UEUJABABCNOPUGUJUHUIUGABCUDUEAQFUFADRSUEUDBQFUFBERTUAUBUC $.

  $( A proper unordered pair is not an improper unordered pair.  (Contributed
     by AV, 13-Jun-2022.) $)
  prneprprc $p |- ( ( ( A e. V /\ B e. W /\ A =/= B ) /\ -. C e. _V )
                    -> { A , B } =/= { C , D } ) $=
    ( wcel wne w3a cvv wn wa cpr csn prnesn adantr wb prprc1 neeq2d adantl
    mpbird ) AEGBFGABHIZCJGKZLABMZCDMZHZUDDNZHZUBUHUCABDEFOPUCUFUHQUBUCUEUGUDCD
    RSTUA $.

  ${
    preqsn.1 $e |- A e. _V $.
    preqsn.2 $e |- B e. _V $.
    $( Equivalence for a pair equal to a singleton.  (Contributed by NM,
       3-Jun-2008.)  (Proof revised by AV, 12-Jun-2022.) $)
    preqsn $p |- ( { A , B } = { C } <-> ( A = B /\ B = C ) ) $=
      ( cpr csn wceq wa cvv wcel wb id a1i preqsnd ax-mp eqeq2 pm5.32ri bitr4i
      ) ABFCGHZACHZBCHZIZABHZUBIAJKZTUCLDUEABCUEMBJKUEENOPUBUDUABCAQRS $.
  $}

  $( Equality relationship for two proper unordered pairs.  (Contributed by AV,
     12-Jun-2022.) $)
  preq12nebg $p |- ( ( A e. V /\ B e. W /\ A =/= B )
                   -> ( { A , B } = { C , D }
                        <-> ( ( A = C /\ B = D ) \/ ( A = D /\ B = C ) ) ) ) $=
    ( cvv wcel wa wne cpr wceq wo wi ancoms ex wn prneprprc eqneqall syl5com wb
    w3a 3simpa anim1i preq12bg syl ianor prcom eqeq2i jaoian preq12 syl6eq jaoi
    sylbi impbid1 pm2.61i ) CGHZDGHZIZAEHZBFHZABJZUBZABKZCDKZLZACLBDLIZADLBCLIZ
    MZUAZNZUSVCVJUSVCIUTVAIZUSIZVJVCUSVMVCVLUSUTVAVBUCUDOABCDEFGGUEUFPUSQUQQZUR
    QZMZVKUQURUGVPVCVJVPVCIVFVIVNVCVFVINVOVNVCIVDVEJZVFVIVCVNVQABCDEFROVIVDVEST
    VOVCIVDDCKZJZVFVIVCVOVSABDCEFROVFVDVRLVSVINVEVRVDCDUHUIVIVDVRSUNTUJVGVFVHAB
    CDUKVHVDVRVEABDCUKDCUHULUMUOPUNUP $.

  $( Equality of two unordered pairs.  (Contributed by NM, 17-Oct-1996.)
     (Revised by AV, 9-Dec-2018.)  (Revised by AV, 12-Jun-2022.) $)
  prel12g $p |- ( ( A e. V /\ B e. W /\ A =/= B )
                  -> ( { A , B } = { C , D }
                       <-> ( A e. { C , D } /\ B e. { C , D } ) ) ) $=
    ( wcel cpr wceq wa wo prid1g 3ad2ant1 preq1 prid2g 3ad2ant2 preq2 syl5ibcom
    eleq2d anim12d wne w3a preq12nebg adantr adantl eleqtrd ex wb elprg anbi12d
    jaod wi eqtr3 eqneqall syl olc a1d ccase com12 3ad2ant3 sylbid impbid bitrd
    orc ) AEGZBFGZABUAZUBZABHCDHZIACIZBDIZJZADIZBCIZJZKZAVIGZBVIGZJZABCDEFUCVHV
    PVSVHVLVSVOVHVJVQVKVRVHVJVQVHVJJAADHZVIVHAVTGZVJVEVFWAVGADELMUDVJVTVIIVHACD
    NUEUFUGVHBCBHZGZVKVRVFVEWCVGCBFOPVKWBVIBBDCQSRTVHVMVQVNVRVHACAHZGZVMVQVEVFW
    EVGCAEOMVMWDVIAADCQSRVHBBDHZGZVNVRVFVEWGVGBDFLPVNWFVIBBCDNSRTUKVHVSVJVMKZVN
    VKKZJZVPVHVQWHVRWIVEVFVQWHUHVGACDEUIMVFVEVRWIUHVGBCDFUIPUJVGVEWJVPULVFWJVGV
    PVJVNVMVKVGVPULZVJVNJABIZWKABCUMVPABUNZUOVOVPVGVOVLUPUQVLVPVGVLVOVDUQVMVKJW
    LWKABDUMWMUOURUSUTVAVBVC $.

  $( An unordered pair has the ordered pair property (compare ~ opth ) under
     certain conditions.  Variant of ~ opthpr in closed form.  (Contributed by
     AV, 13-Jun-2022.) $)
  opthprneg $p |- ( ( ( A e. V /\ B e. W ) /\ ( A =/= B /\ A =/= D ) )
                    -> ( { A , B } = { C , D } <-> ( A = C /\ B = D ) ) ) $=
    ( cvv wcel wa wne cpr wceq wb wi wo wn sylbi impbid1 prneprprc sylan pm2.21
    preq12bg adantlr idd df-ne impd jaod orc adantl ad2antlr bitrd expcom ianor
    w3a simpl anim2i df-3an sylibr ancoms eqneqall syl5com eqeq2i jaoian preq12
    prcom ex pm2.61i ) CGHZDGHZIZAEHZBFHZIZABJZADJZIZIZABKZCDKZLZACLBDLIZMZNZVQ
    VJWBVQVJIVTWAADLZBCLZIZOZWAVMVJVTWGMVPABCDEFGGUBUCVPWGWAMZVMVJVOWHVNVOWGWAV
    OWAWAWFVOWAUDVOWDWEWAVOWDPWDWEWANZNADUEWDWIUAQUFUGWAWFUHRUIUJUKULVJPVHPZVIP
    ZOZWCVHVIUMWLVQWBWLVQIVTWAWJVQVTWANWKWJVQIVRVSJZVTWAVQWJWMVQVKVLVNUNZWJWMVQ
    VMVNIWNVPVNVMVNVOUOUPVKVLVNUQURZABCDEFSTUSWAVRVSUTVAWKVQIVRDCKZJZVTWAVQWKWQ
    VQWNWKWQWOABDCEFSTUSVTVRWPLWQWANVSWPVRCDVEVBWAVRWPUTQVAVCABCDVDRVFQVG $.

  ${
    $d A x $.  $d B x $.  $d C x $.
    $( Lemma for ~ elpreqpr .  (Contributed by Scott Fenton, 7-Dec-2020.)
       (Revised by AV, 9-Dec-2020.) $)
    elpreqprlem $p |- ( B e. V -> E. x { B , C } = { B , x } ) $=
      ( cvv wcel cpr cv wceq wex wi eqid preq2 eqeq2d spcegv mpi a1d csn dfsn2
      wn prprc2 eqeq1d exbidv syl5ibr pm2.61i ) CEFZBDFZBCGZBAHZGZIZAJZKUFULUGU
      FUHUHIZULUHLUKUMACEUICIUJUHUHUICBMNOPQUGULUFTZBRZUJIZAJZUGUOBBGZIZUQBSUPU
      SABDUIBIUJURUOUIBBMNOPUNUKUPAUNUHUOUJBCUAUBUCUDUE $.

    $( Equality and membership rule for pairs.  (Contributed by Scott Fenton,
       7-Dec-2020.) $)
    elpreqpr $p |- ( A e. { B , C } -> E. x { B , C } = { A , x } ) $=
      ( cpr wcel wo cvv cv wex wi elpreqprlem eleq1 preq1 eqeq2d exbidv imbi12d
      wceq mpbiri imp elpri elex prcom eqeq1i exbii sylib jaoian syl2anc ) BCDE
      ZFBCRZBDRZGBHFZUIBAIZEZRZAJZBCDUABUIUBUJULUPUKUJULUPUJULUPKZCHFZUICUMEZRZ
      AJZKACDHLUJULURUPVABCHMUJUOUTAUJUNUSUIBCUMNOPQSTUKULUPUKUQDHFZUIDUMEZRZAJ
      ZKVBDCEZVCRZAJVEADCHLVGVDAVFUIVCDCUCUDUEUFUKULVBUPVEBDHMUKUOVDAUKUNVCUIBD
      UMNOPQSTUGUH $.

    $d V x $.
    $( A set is an element of an unordered pair iff there is another (maybe the
       same) set which is an element of the unordered pair.  (Proposed by BJ,
       8-Dec-2020.)  (Contributed by AV, 9-Dec-2020.) $)
    elpreqprb $p |- ( A e. V
                      -> ( A e. { B , C } <-> E. x { B , C } = { A , x } ) ) $=
      ( wcel cpr cv wceq wex elpreqpr prid1g eleq2 syl5ibrcom exlimdv impbid2 )
      BEFZBCDGZFZRBAHZGZIZAJABCDKQUBSAQSUBBUAFBTELRUABMNOP $.
  $}

  ${
    $d A b $.  $d V b $.  $d X b $.  $d Y b $.
    $( For an element ` A ` of an unordered pair which is a subset of a given
       set ` V ` , there is another (maybe the same) element ` b ` of the given
       set ` V ` being an element of the unordered pair.  (Contributed by AV,
       5-Dec-2020.) $)
    elpr2elpr $p |- ( ( X e. V /\ Y e. V /\ A e. { X , Y } )
                      -> E. b e. V { X , Y } = { A , b } ) $=
      ( wcel cpr cv wceq wo wa wb preq2 eqeq2d adantl eqcoms adantr rspcedvd ex
      wrex wi simprr preq1 simprl prcom syl6eq jaoi elpri syl11 3impia ) CBFZDB
      FZACDGZFZUMAEHZGZIZEBTZACIZADIZJUKULKZURUNUSVAURUAUTUSVAURUSVAKZUQUMADGZI
      ZEDBUSUKULUBUODIZUQVDLVBVEUPVCUMUODAMNOUSVDVAVDCACADUCPQRSUTVAURUTVAKZUQU
      MACGZIZECBUTUKULUDUOCIZUQVHLVFVIUPVGUMUOCAMNOUTVHVAUTUMCAGZVGUMVJIDADACMP
      CAUEUFQRSUGACDUHUIUJ $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Rewrite ~ df-op using ` if ` .  When both arguments are sets, it reduces
       to the standard Kuratowski definition; otherwise, it is defined to be
       the empty set.  Avoid directly depending on this detail so that theorems
       will not depend on the Kuratowski construction.  (Contributed by Mario
       Carneiro, 26-Apr-2015.)  (Avoid depending on this detail.) $)
    dfopif $p |- <. A , B >. =
      if ( ( A e. _V /\ B e. _V ) , { { A } , { A , B } } , (/) ) $=
      ( vx cop cvv wcel cv csn cpr w3a cab wa c0 df-op df-3an abbii wceq iftrue
      cif ibar abbi2dv eqtr2d wss pm2.21 adantrd abssdv ss0 syl iffalse pm2.61i
      wn eqtr4d 3eqtri ) ABDAEFZBEFZCGZAHABIIZFZJZCKUNUOLZURLZCKZUTUQMSZCABNUSV
      ACUNUOUROPUTVBVCQUTVCUQVBUTUQMRUTVACUQUTURTUAUBUTUKZVBMVCVDVBMUCVBMQVDVAC
      MVDUTUPMFZURUTVEUDUEUFVBUGUHUTUQMUIULUJUM $.
  $}

  $( Value of the ordered pair when the arguments are sets.  (Contributed by
     Mario Carneiro, 26-Apr-2015.)  (Avoid depending on this detail.) $)
  dfopg $p |- ( ( A e. V /\ B e. W ) ->
    <. A , B >. = { { A } , { A , B } } ) $=
    ( wcel cvv cop csn cpr wceq elex wa c0 cif dfopif iftrue syl5eq syl2an ) AC
    EAFEZBFEZABGZAHABIIZJBDEACKBDKSTLZUAUCUBMNUBABOUCUBMPQR $.

  ${
    dfop.1 $e |- A e. _V $.
    dfop.2 $e |- B e. _V $.
    $( Value of an ordered pair when the arguments are sets, with the
       conclusion corresponding to Kuratowski's original definition.
       (Contributed by NM, 25-Jun-1998.)  (Avoid depending on this detail.) $)
    dfop $p |- <. A , B >. = { { A } , { A , B } } $=
      ( cvv wcel cop csn cpr wceq dfopg mp2an ) AEFBEFABGAHABIIJCDABEEKL $.
  $}

  $( Equality theorem for ordered pairs.  (Contributed by NM, 25-Jun-1998.)
     (Revised by Mario Carneiro, 26-Apr-2015.) $)
  opeq1 $p |- ( A = B -> <. A , C >. = <. B , C >. ) $=
    ( wceq cvv wcel wa csn cpr cif cop eleq1 anbi1d sneq preq1 preq12d ifbieq1d
    c0 dfopif 3eqtr4g ) ABDZAEFZCEFZGZAHZACIZIZRJBEFZUCGZBHZBCIZIZRJACKBCKUAUDU
    IUGULRUAUBUHUCABELMUAUEUJUFUKABNABCOPQACSBCST $.

  $( Equality theorem for ordered pairs.  (Contributed by NM, 25-Jun-1998.)
     (Revised by Mario Carneiro, 26-Apr-2015.) $)
  opeq2 $p |- ( A = B -> <. C , A >. = <. C , B >. ) $=
    ( wceq cvv wcel wa csn cpr c0 cif eleq1 anbi2d preq2 preq2d ifbieq1d dfopif
    cop 3eqtr4g ) ABDZCEFZAEFZGZCHZCAIZIZJKUABEFZGZUDCBIZIZJKCARCBRTUCUHUFUJJTU
    BUGUAABELMTUEUIUDABCNOPCAQCBQS $.

  $( Equality theorem for ordered pairs.  (Contributed by NM, 28-May-1995.) $)
  opeq12 $p |- ( ( A = C /\ B = D ) -> <. A , B >. = <. C , D >. ) $=
    ( wceq cop opeq1 opeq2 sylan9eq ) ACEBDEABFCBFCDFACBGBDCHI $.

  ${
    opeq1i.1 $e |- A = B $.
    $( Equality inference for ordered pairs.  (Contributed by NM,
       16-Dec-2006.) $)
    opeq1i $p |- <. A , C >. = <. B , C >. $=
      ( wceq cop opeq1 ax-mp ) ABEACFBCFEDABCGH $.

    $( Equality inference for ordered pairs.  (Contributed by NM,
       16-Dec-2006.) $)
    opeq2i $p |- <. C , A >. = <. C , B >. $=
      ( wceq cop opeq2 ax-mp ) ABECAFCBFEDABCGH $.

    ${
      opeq12i.2 $e |- C = D $.
      $( Equality inference for ordered pairs.  (Contributed by NM,
         16-Dec-2006.)  (Proof shortened by Eric Schmidt, 4-Apr-2007.) $)
      opeq12i $p |- <. A , C >. = <. B , D >. $=
        ( wceq cop opeq12 mp2an ) ABGCDGACHBDHGEFACBDIJ $.
    $}
  $}

  ${
    opeq1d.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for ordered pairs.  (Contributed by NM,
       16-Dec-2006.) $)
    opeq1d $p |- ( ph -> <. A , C >. = <. B , C >. ) $=
      ( wceq cop opeq1 syl ) ABCFBDGCDGFEBCDHI $.

    $( Equality deduction for ordered pairs.  (Contributed by NM,
       16-Dec-2006.) $)
    opeq2d $p |- ( ph -> <. C , A >. = <. C , B >. ) $=
      ( wceq cop opeq2 syl ) ABCFDBGDCGFEBCDHI $.

    opeq12d.2 $e |- ( ph -> C = D ) $.
    $( Equality deduction for ordered pairs.  (Contributed by NM, 16-Dec-2006.)
       (Proof shortened by Andrew Salmon, 29-Jun-2011.) $)
    opeq12d $p |- ( ph -> <. A , C >. = <. B , D >. ) $=
      ( wceq cop opeq12 syl2anc ) ABCHDEHBDICEIHFGBDCEJK $.
  $}

  $( Equality theorem for ordered triples.  (Contributed by NM, 3-Apr-2015.) $)
  oteq1 $p |- ( A = B -> <. A , C , D >. = <. B , C , D >. ) $=
    ( wceq cop cotp opeq1 opeq1d df-ot 3eqtr4g ) ABEZACFZDFBCFZDFACDGBCDGLMNDAB
    CHIACDJBCDJK $.

  $( Equality theorem for ordered triples.  (Contributed by NM, 3-Apr-2015.) $)
  oteq2 $p |- ( A = B -> <. C , A , D >. = <. C , B , D >. ) $=
    ( wceq cop cotp opeq2 opeq1d df-ot 3eqtr4g ) ABEZCAFZDFCBFZDFCADGCBDGLMNDAB
    CHICADJCBDJK $.

  $( Equality theorem for ordered triples.  (Contributed by NM, 3-Apr-2015.) $)
  oteq3 $p |- ( A = B -> <. C , D , A >. = <. C , D , B >. ) $=
    ( wceq cop cotp opeq2 df-ot 3eqtr4g ) ABECDFZAFKBFCDAGCDBGABKHCDAICDBIJ $.

  ${
    oteq1d.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for ordered triples.  (Contributed by Mario Carneiro,
       11-Jan-2017.) $)
    oteq1d $p |- ( ph -> <. A , C , D >. = <. B , C , D >. ) $=
      ( wceq cotp oteq1 syl ) ABCGBDEHCDEHGFBCDEIJ $.

    $( Equality deduction for ordered triples.  (Contributed by Mario Carneiro,
       11-Jan-2017.) $)
    oteq2d $p |- ( ph -> <. C , A , D >. = <. C , B , D >. ) $=
      ( wceq cotp oteq2 syl ) ABCGDBEHDCEHGFBCDEIJ $.

    $( Equality deduction for ordered triples.  (Contributed by Mario Carneiro,
       11-Jan-2017.) $)
    oteq3d $p |- ( ph -> <. C , D , A >. = <. C , D , B >. ) $=
      ( wceq cotp oteq3 syl ) ABCGDEBHDECHGFBCDEIJ $.

    oteq123d.2 $e |- ( ph -> C = D ) $.
    oteq123d.3 $e |- ( ph -> E = F ) $.
    $( Equality deduction for ordered triples.  (Contributed by Mario Carneiro,
       11-Jan-2017.) $)
    oteq123d $p |- ( ph -> <. A , C , E >. = <. B , D , F >. ) $=
      ( cotp oteq1d oteq2d oteq3d 3eqtrd ) ABDFKCDFKCEFKCEGKABCDFHLADECFIMAFGCE
      JNO $.
  $}

  ${
    nfop.1 $e |- F/_ x A $.
    nfop.2 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for ordered pairs.  (Contributed by
       NM, 14-Nov-1995.) $)
    nfop $p |- F/_ x <. A , B >. $=
      ( cop cvv wcel wa csn cpr c0 cif dfopif nfel1 nfan nfsn nfpr nfcv nfif
      nfcxfr ) ABCFBGHZCGHZIZBJZBCKZKZLMBCNUDAUGLUBUCAABGDOACGEOPAUEUFABDQABCDE
      RRALSTUA $.
  $}

  ${
    $d z B $.  $d z A $.  $d x z $.
    nfopd.2 $e |- ( ph -> F/_ x A ) $.
    nfopd.3 $e |- ( ph -> F/_ x B ) $.
    $( Deduction version of bound-variable hypothesis builder ~ nfop .  This
       shows how the deduction version of a not-free theorem such as ~ nfop can
       be created from the corresponding not-free inference theorem.
       (Contributed by NM, 4-Feb-2008.) $)
    nfopd $p |- ( ph -> F/_ x <. A , B >. ) $=
      ( vz cv wcel wal cab cop wnfc nfaba1 nfop wb wa nfnfc1 wceq abidnf adantr
      nfan adantl opeq12d nfceqdf syl2anc mpbii ) ABGHZCIZBJGKZUHDIZBJGKZLZMZBC
      DLZMZBUJULUIBGNUKBGNOABCMZBDMZUNUPPEFUQURQZBUMUOUQURBBCRBDRUBUSUJCULDUQUJ
      CSURBGCTUAURULDSUQBGDTUCUDUEUFUG $.
  $}

  $( Distribution of class substitution over ordered pairs.  (Contributed by
     Drahflow, 25-Sep-2015.)  (Revised by Mario Carneiro, 29-Oct-2015.)
     (Revised by ML, 25-Oct-2020.) $)
  csbopg $p |- ( A e. V -> [_ A / x ]_ <. C , D >. =
                         <. [_ A / x ]_ C , [_ A / x ]_ D >. ) $=
    ( wcel cvv wa csn cpr c0 cif csb cop wsbc csbif sbcan sbcel1g csbprg dfopif
    anbi12d syl5bb csbsng preq12d csbconstg ifbieq12d syl5eq csbeq2i 3eqtr4g
    eqtrd ) BEFZABCGFZDGFZHZCIZCDJZJZKLZMZABCMZGFZABDMZGFZHZUTIZUTVBJZJZKLZABCD
    NZMUTVBNUKUSUNABOZABUQMZABKMZLVHUNABUQKPUKVJVDVKVLVGKVJULABOZUMABOZHUKVDULU
    MABQUKVMVAVNVCABCGERABDGERUAUBUKVKABUOMZABUPMZJVGAUOUPBESUKVOVEVPVFABCEUCAC
    DBESUDUJABKEUEUFUGABVIURCDTUHUTVBTUI $.

  $( The ordered pair ` <. A , A >. ` in Kuratowski's representation.  Closed
     form of ~ opid .  (Contributed by Peter Mazsa, 22-Jul-2019.)  (Avoid
     depending on this detail.) $)
  opidg $p |- ( A e. V -> <. A , A >. = { { A } } ) $=
    ( wcel cop csn cpr wceq dfopg anidms dfsn2 eqcomi preq2i eqtr4i syl6eq ) AB
    CZAADZAEZAAFZFZQEZOPSGAABBHISQQFTRQQQRAJKLQJMN $.

  ${
    opid.1 $e |- A e. _V $.
    $( The ordered pair ` <. A , A >. ` in Kuratowski's representation.
       Inference form of ~ opidg .  (Contributed by FL, 28-Dec-2011.)  (Proof
       shortened by AV, 16-Feb-2022.)  (Avoid depending on this detail.) $)
    opid $p |- <. A , A >. = { { A } } $=
      ( cvv wcel cop csn wceq opidg ax-mp ) ACDAAEAFFGBACHI $.
  $}

  ${
    $d B x $.  $d ps x $.
    ralunsn.1 $e |- ( x = B -> ( ph <-> ps ) ) $.
    $( Restricted quantification over the union of a set and a singleton, using
       implicit substitution.  (Contributed by Paul Chapman, 17-Nov-2012.)
       (Revised by Mario Carneiro, 23-Apr-2015.) $)
    ralunsn $p |- ( B e. C -> ( A. x e. ( A u. { B } ) ph <->
                                ( A. x e. A ph /\ ps ) ) ) $=
      ( csn cun wral wa wcel ralunb ralsng anbi2d syl5bb ) ACDEHZIJACDJZACQJZKE
      FLZRBKACDQMTSBRABCEFGNOP $.
  $}

  ${
    $d A x $.  $d B x y $.  $d C x $.  $d ch x $.  $d ps y $.  $d th x $.
    2ralunsn.1 $e |- ( x = B -> ( ph <-> ch ) ) $.
    2ralunsn.2 $e |- ( y = B -> ( ph <-> ps ) ) $.
    2ralunsn.3 $e |- ( x = B -> ( ps <-> th ) ) $.
    $( Double restricted quantification over the union of a set and a
       singleton, using implicit substitution.  (Contributed by Paul Chapman,
       17-Nov-2012.) $)
    2ralunsn $p |- ( B e. C ->
                     ( A. x e. ( A u. { B } ) A. y e. ( A u. { B } ) ph <->
                       ( ( A. x e. A A. y e. A ph /\ A. x e. A ps ) /\
                         ( A. y e. A ch /\ th ) ) ) ) $=
      ( wcel csn cun wral wa ralunsn ralbidv cv wceq r19.26 anbi1i syl6bb bitrd
      anbi12d ) HIMZAFGHNOZPZEUHPAFGPZBQZEUHPZUJEGPBEGPQZCFGPZDQZQZUGUIUKEUHABF
      GHIKRSUGULUKEGPZUOQUPUKUOEGHIETHUAZUJUNBDURACFGJSLUFRUQUMUOUJBEGUBUCUDUE
      $.
  $}

  $( Expansion of an ordered pair when either member is a proper class.
     (Contributed by Mario Carneiro, 26-Apr-2015.) $)
  opprc $p |- ( -. ( A e. _V /\ B e. _V ) -> <. A , B >. = (/) ) $=
    ( cvv wcel wa wn cop csn cpr c0 cif dfopif iffalse syl5eq ) ACDBCDEZFABGOAH
    ABIIZJKJABLOPJMN $.

  $( Expansion of an ordered pair when the first member is a proper class.  See
     also ~ opprc .  (Contributed by NM, 10-Apr-2004.)  (Revised by Mario
     Carneiro, 26-Apr-2015.) $)
  opprc1 $p |- ( -. A e. _V -> <. A , B >. = (/) ) $=
    ( cvv wcel wn wa cop c0 wceq simpl con3i opprc syl ) ACDZENBCDZFZEABGHIPNNO
    JKABLM $.

  $( Expansion of an ordered pair when the second member is a proper class.
     See also ~ opprc .  (Contributed by NM, 15-Nov-1994.)  (Revised by Mario
     Carneiro, 26-Apr-2015.) $)
  opprc2 $p |- ( -. B e. _V -> <. A , B >. = (/) ) $=
    ( cvv wcel wn wa cop c0 wceq simpr con3i opprc syl ) BCDZEACDZNFZEABGHIPNON
    JKABLM $.

  $( If an ordered pair has an element, then its arguments are sets.
     (Contributed by Mario Carneiro, 26-Apr-2015.) $)
  oprcl $p |- ( C e. <. A , B >. -> ( A e. _V /\ B e. _V ) ) $=
    ( cop wcel c0 wceq cvv wa n0i opprc nsyl2 ) CABDZEMFGAHEBHEIMCJABKL $.

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( The power set of a singleton.  (Contributed by NM, 5-Jun-2006.) $)
    pwsn $p |- ~P { A } = { (/) , { A } } $=
      ( vx cv csn wss cab c0 wceq wo cpw cpr sssn abbii df-pw dfpr2 3eqtr4i ) B
      CZADZEZBFQGHQRHIZBFRJGRKSTBQALMBRNBGROP $.

    $d x y $.  $d y A $.
    $( Alternate proof of ~ pwsn , more direct.  (Contributed by NM,
       5-Jun-2006.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    pwsnALT $p |- ~P { A } = { (/) , { A } } $=
      ( vx vy cv csn wss cab c0 wceq wo cpw cpr wn wa wcel wal dfss2 wex sylbi
      wi velsn imbi2i albii bitri neq0 exintr syl5bi df-clel exancom snssi syl6
      bitr2i anc2li eqss syl6ibr orrd 0ss sseq1 mpbiri eqimss jaoi impbii abbii
      df-pw dfpr2 3eqtr4i ) BDZAEZFZBGVGHIZVGVHIZJZBGVHKHVHLVIVLBVIVLVIVJVKVIVJ
      MZVIVHVGFZNVKVIVMVNVICDZVGOZVOAIZTZCPZVMVNTVIVPVOVHOZTZCPVSCVGVHQWAVRCVTV
      QVPCAUAUBUCUDVSVMVPVQNCRZVNVMVPCRVSWBCVGUEVPVQCUFUGWBAVGOZVNWCVQVPNCRWBCA
      VGUHVQVPCUIULAVGUJSUKSUMVGVHUNUOUPVJVIVKVJVIHVHFVHUQVGHVHURUSVGVHUTVAVBVC
      BVHVDBHVHVEVF $.

    $( The power set of an unordered pair.  (Contributed by NM, 1-May-2009.) $)
    pwpr $p |- ~P { A , B } = ( { (/) , { A } } u. { { B } , { A , B } } ) $=
      ( vx cpr cpw c0 csn cun cv wss wcel wo wceq sspr vex orbi12i bitr4i selpw
      elpr elun 3bitr4i eqriv ) CABDZEZFAGZDZBGZUCDZHZCIZUCJZUJUFKZUJUHKZLZUJUD
      KUJUIKUKUJFMUJUEMLZUJUGMUJUCMLZLUNUJABNULUOUMUPUJFUECOZSUJUGUCUQSPQCUCRUJ
      UFUHTUAUB $.

    $( The power set of an unordered triple.  (Contributed by Mario Carneiro,
       2-Jul-2016.) $)
    pwtp $p |- ~P { A , B , C } =
      ( ( { (/) , { A } } u. { { B } , { A , B } } ) u.
        ( { { C } , { A , C } } u. { { B , C } , { A , B , C } } ) ) $=
      ( vx ctp cpw c0 csn cpr cun cv wcel selpw wo wceq elun elpr orbi12i bitri
      wss vex sstp 3bitr4ri eqriv ) DABCEZFZGAHZIZBHZABIZIZJZCHZACIZIZBCIZUEIZJ
      ZJZDKZUFLUTUETZUTUSLZDUEMUTULLZUTURLZNUTGOUTUGONZUTUIOUTUJONZNZUTUMOUTUNO
      NZUTUPOUTUEONZNZNVBVAVCVGVDVJVCUTUHLZUTUKLZNVGUTUHUKPVKVEVLVFUTGUGDUAZQUT
      UIUJVMQRSVDUTUOLZUTUQLZNVJUTUOUQPVNVHVOVIUTUMUNVMQUTUPUEVMQRSRUTULURPUTAB
      CUBUCSUD $.
  $}

  $( Compute the power set of the power set of the power set of the empty set.
     (See also ~ pw0 and ~ pwpw0 .)  (Contributed by NM, 2-May-2009.) $)
  pwpwpw0 $p |- ~P { (/) , { (/) } } =
                ( { (/) , { (/) } } u. { { { (/) } } , { (/) , { (/) } } } ) $=
    ( c0 csn pwpr ) AABC $.

  $( The power class of the universe is the universe.  Exercise 4.12(d) of
     [Mendelson] p. 235.  (Contributed by NM, 14-Sep-2003.) $)
  pwv $p |- ~P _V = _V $=
    ( vx cvv cpw cv wcel wss ssv selpw mpbir vex 2th eqriv ) ABCZBADZMEZNBEONBF
    NGABHIAJKL $.

  ${
    $d A v $.  $d B v $.  $d C v $.  $d V v $.
    $( For an element of a proper unordered pair of elements of a class ` V ` ,
       there is another (different) element of the class ` V ` which is an
       element of the proper pair.  (Contributed by AV, 18-Dec-2021.) $)
    prproe $p |- ( ( C e. { A , B } /\ A =/= B /\ ( A e. V /\ B e. V ) )
                   -> E. v e. ( V \ { C } ) v e. { A , B } ) $=
      ( wcel wne wa wceq wi neeq2 eqcoms biimpcd adantr impcom eldifsn sylanbrc
      wb eleq1 adantl cpr cv csn cdif wrex wo elpri necom sylbi prid2g rspcedvd
      simprrr ex simprrl prid1g jaoi syl 3impib ) DBCUAZFZBCGZBEFZCEFZHZAUBZUSF
      ZAEDUCUDZUEZUTDBIZDCIZUFVAVDHZVHJZDBCUGVIVLVJVIVKVHVIVKHZVFCUSFZACVGVMVCC
      DGZCVGFVIVAVBVCULVKVIVOVAVIVOJZVDVACBGZVPBCUHVIVQVOVQVORBDBDCKLMUINOCEDPQ
      VECIVFVNRVMVECUSSTVKVNVIVDVNVAVCVNVBBCEUJTTTUKUMVJVKVHVJVKHZVFBUSFZABVGVR
      VBBDGZBVGFVJVAVBVCUNVKVJVTVAVJVTJVDVJVAVTVAVTRCDCDBKLMNOBEDPQVEBIVFVSRVRV
      EBUSSTVKVSVJVDVSVAVBVSVCBCEUONTTUKUMUPUQUR $.
  $}

  $( If there are three elements in a proper unordered pair, and two of them
     are different from the third one, the two must be equal.  (Contributed by
     AV, 19-Dec-2021.) $)
  3elpr2eq $p |- ( ( ( X e. { A , B } /\ Y e. { A , B } /\ Z e. { A , B } )
                     /\ ( Y =/= X /\ Z =/= X ) ) -> Y = Z ) $=
    ( wcel wne wa wceq wo wi elpri eqtr3 eqneqall syl adantld ex a1d impd jaoi
    cpr w3a 2a1d com12 com13 3imp syl3an imp ) CABUAZFZDUIFZEUIFZUBDCGZECGZHZDE
    IZUJCAIZCBIZJZUKDAIZDBIZJZULEAIZEBIZJZUOUPKZCABLDABLEABLUSVBVEVFUQVBVEVFKKU
    RVEVBUQVFVCVBUQVFKZKVDVCVGVBVCUQVFVCUQHZUNUPUMVHECIZUNUPKZECAMUPECNZOPQRVBV
    DVGUTVDVGKVAUTVGVDUTUQVFUTUQHZUMUNUPVLDCIZUMVJKZDCAMVJDCNZOSQRVAVDVGVAVDHUP
    UQUODEBMUCQTUDTUEVEVBURVFVCVBURVFKZKVDVBVCVPUTVCVPKVAUTVCVPUTVCHUPURUODEAMU
    CQVAVPVCVAURVFVAURHZUMUNUPVQVMVNDCBMVOOSQRTUDVDVPVBVDURVFVDURHZUNUPUMVRVIVJ
    ECBMVKOPQRTUETUFUGUH $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  The union of a class
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Declare class union symbol. $)
  $c U. $.  $( Big cup $)

  $( Extend class notation to include the union of a class.  Read:  "union (of)
     ` A ` ". $)
  cuni $a class U. A $.

  ${
    $d x y A $.
    $( Define the union of a class i.e. the collection of all members of the
       members of the class.  Definition 5.5 of [TakeutiZaring] p. 16.  For
       example, ` U. { { 1 , 3 } , { 1 , 8 } } = { 1 , 3 , 8 } ` ( ~ ex-uni ).
       This is similar to the union of two classes ~ df-un .  (Contributed by
       NM, 23-Aug-1993.) $)
    df-uni $a |- U. A = { x | E. y ( x e. y /\ y e. A ) } $.
  $}

  ${
    $d x y A $.
    $( Alternate definition of class union.  (Contributed by NM,
       28-Jun-1998.) $)
    dfuni2 $p |- U. A = { x | E. y e. A x e. y } $=
      ( cuni cv wcel wa wex cab wrex df-uni exancom df-rex bitr4i abbii eqtri )
      CDAEBEZFZQCFZGBHZAIRBCJZAIABCKTUAATSRGBHUARSBLRBCMNOP $.
  $}

  ${
    $d x A y $.  $d x B y $.
    $( Membership in class union.  (Contributed by NM, 22-May-1994.) $)
    eluni $p |- ( A e. U. B <-> E. x ( A e. x /\ x e. B ) ) $=
      ( vy cuni wcel cvv cv wa wex elex adantr exlimiv wceq eleq1 anbi1d exbidv
      df-uni elab2g pm5.21nii ) BCEZFBGFZBAHZFZUCCFZIZAJZBUAKUFUBAUDUBUEBUCKLMD
      HZUCFZUEIZAJUGDBUAGUHBNZUJUFAUKUIUDUEUHBUCOPQDACRST $.

    $( Membership in class union.  Restricted quantifier version.  (Contributed
       by NM, 31-Aug-1999.) $)
    eluni2 $p |- ( A e. U. B <-> E. x e. B A e. x ) $=
      ( cv wcel wa wex cuni wrex exancom eluni df-rex 3bitr4i ) BADZEZNCEZFAGPO
      FAGBCHEOACIOPAJABCKOACLM $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Membership in class union.  (Contributed by NM, 24-Mar-1995.) $)
    elunii $p |- ( ( A e. B /\ B e. C ) -> A e. U. C ) $=
      ( vx wcel wa cv cuni wceq eleq2 eleq1 anbi12d spcegv anabsi7 eluni sylibr
      wex ) ABEZBCEZFZADGZEZUACEZFZDQZACHERSUEUDTDBCUABIUBRUCSUABAJUABCKLMNDACO
      P $.
  $}

  ${
    $d y z A $.  $d x y z $.
    nfuni.1 $e |- F/_ x A $.
    $( Bound-variable hypothesis builder for union.  (Contributed by NM,
       30-Dec-1996.)  (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
    nfuni $p |- F/_ x U. A $=
      ( vy vz cuni wel wrex cab dfuni2 nfv nfrex nfab nfcxfr ) ABFDEGZEBHZDIDEB
      JPADOAEBCOAKLMN $.
  $}

  ${
    $d y z A $.  $d x y z $.  $d y z ph $.
    nfunid.3 $e |- ( ph -> F/_ x A ) $.
    $( Deduction version of ~ nfuni .  (Contributed by NM, 18-Feb-2013.) $)
    nfunid $p |- ( ph -> F/_ x U. A ) $=
      ( vy vz cuni wel wrex cab dfuni2 nfv nfvd nfrexd nfabd nfcxfrd ) ABCGEFHZ
      FCIZEJEFCKARBEAELAQBFCAFLDAQBMNOP $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( Equality theorem for class union.  Exercise 15 of [TakeutiZaring] p. 18.
       (Contributed by NM, 10-Aug-1993.)  (Proof shortened by Andrew Salmon,
       29-Jun-2011.) $)
    unieq $p |- ( A = B -> U. A = U. B ) $=
      ( vy vx wceq wel wrex cab cuni rexeq abbidv dfuni2 3eqtr4g ) ABEZCDFZDAGZ
      CHODBGZCHAIBINPQCODABJKCDALCDBLM $.
  $}

  ${
    unieqi.1 $e |- A = B $.
    $( Inference of equality of two class unions.  (Contributed by NM,
       30-Aug-1993.) $)
    unieqi $p |- U. A = U. B $=
      ( wceq cuni unieq ax-mp ) ABDAEBEDCABFG $.
  $}

  ${
    unieqd.1 $e |- ( ph -> A = B ) $.
    $( Deduction of equality of two class unions.  (Contributed by NM,
       21-Apr-1995.) $)
    unieqd $p |- ( ph -> U. A = U. B ) $=
      ( wceq cuni unieq syl ) ABCEBFCFEDBCGH $.
  $}

  ${
    $d x A y $.  $d ph y $.
    $( Membership in union of a class abstraction.  (Contributed by NM,
       11-Aug-1994.)  (Revised by Mario Carneiro, 14-Nov-2016.) $)
    eluniab $p |- ( A e. U. { x | ph } <-> E. x ( A e. x /\ ph ) ) $=
      ( vy cab cuni wcel cv wa wex eluni nfv nfsab1 nfan weq eleq2w eleq1w abid
      syl6bb anbi12d cbvexv1 bitri ) CABEZFGCDHZGZUDUCGZIZDJCBHZGZAIZBJDCUCKUGU
      JDBUEUFBUEBLABDMNUJDLDBOZUEUIUFADBCPUKUFUHUCGADBUCQABRSTUAUB $.

    $( Membership in union of a class abstraction.  (Contributed by NM,
       4-Oct-2006.) $)
    elunirab $p |- ( A e. U. { x e. B | ph } <->
                   E. x e. B ( A e. x /\ ph ) ) $=
      ( cv wcel cab cuni wex crab wrex eluniab df-rab unieqi eleq2i df-rex an12
      wa exbii bitri 3bitr4i ) CBEZDFZARZBGZHZFCUBFZUDRZBIZCABDJZHZFUGARZBDKZUD
      BCLUKUFCUJUEABDMNOUMUCULRZBIUIULBDPUNUHBUCUGAQSTUA $.
  $}

  ${
    $d x y A $.  $d x y B $.
    unipr.1 $e |- A e. _V $.
    unipr.2 $e |- B e. _V $.
    $( The union of a pair is the union of its members.  Proposition 5.7 of
       [TakeutiZaring] p. 16.  (Contributed by NM, 23-Aug-1993.) $)
    unipr $p |- U. { A , B } = ( A u. B ) $=
      ( vx vy cv wcel wo cab cpr wa wex cun cuni wceq 19.43 bitri clel3 exancom
      vex elpr anbi2i andi exbii orbi12i 3bitr4ri abbii df-un df-uni 3eqtr4ri )
      EGZAHZULBHZIZEJULFGZHZUPABKZHZLZFMZEJABNUROUOVAEUQUPAPZLZUQUPBPZLZIZFMVCF
      MZVEFMZIVAUOVCVEFQUTVFFUTUQVBVDIZLVFUSVIUQUPABFUAUBUCUQVBVDUDRUEUMVGUNVHU
      MVBUQLFMVGFULACSVBUQFTRUNVDUQLFMVHFULBDSVDUQFTRUFUGUHEABUIEFURUJUK $.
  $}

  ${
    $d x y A $.  $d y B $.
    $( The union of a pair is the union of its members.  Proposition 5.7 of
       [TakeutiZaring] p. 16.  (Contributed by NM, 25-Aug-2006.) $)
    uniprg $p |- ( ( A e. V /\ B e. W ) -> U. { A , B } = ( A u. B ) ) $=
      ( vx vy cv cpr cuni cun wceq preq1 unieqd uneq1 eqeq12d preq2 uneq2 unipr
      vex vtocl2g ) EGZFGZHZIZUAUBJZKAUBHZIZAUBJZKABHZIZABJZKEFABCDUAAKZUDUGUEU
      HULUCUFUAAUBLMUAAUBNOUBBKZUGUJUHUKUMUFUIUBBAPMUBBAQOUAUBESFSRT $.
  $}

  $( A set equals the union of its singleton.  Theorem 8.2 of [Quine] p. 53.
     (Contributed by NM, 13-Aug-2002.) $)
  unisng $p |- ( A e. V -> U. { A } = A ) $=
    ( wcel csn cuni cpr cun wceq dfsn2 unieqi a1i uniprg anidms unidm 3eqtrd )
    ABCZADZEZAAFZEZAAGZARTHPQSAIJKPTUAHAABBLMUAAHPANKO $.

  ${
    unisn.1 $e |- A e. _V $.
    $( A set equals the union of its singleton.  Theorem 8.2 of [Quine] p. 53.
       (Contributed by NM, 30-Aug-1993.) $)
    unisn $p |- U. { A } = A $=
      ( cvv wcel csn cuni wceq unisng ax-mp ) ACDAEFAGBACHI $.

    $( Obsolete proof of ~ unisn as of 16-Sep-2022.  (Contributed by NM,
       30-Aug-1993.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    unisnOLD $p |- U. { A } = A $=
      ( csn cuni cpr cun dfsn2 unieqi unipr unidm 3eqtri ) ACZDAAEZDAAFALMAGHAA
      BBIAJK $.
  $}

  ${
    $d x A $.
    $( Obsolete proof of ~ unisng as of 16-Sep-2022.  (Contributed by NM,
       13-Aug-2002.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    unisngOLD $p |- ( A e. V -> U. { A } = A ) $=
      ( vx cv csn cuni wceq sneq unieqd id eqeq12d vex unisnOLD vtoclg ) CDZEZF
      ZOGAEZFZAGCABOAGZQSOATPROAHITJKOCLMN $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Union of a singleton in the form of a restricted class abstraction.
       (Contributed by NM, 3-Jul-2008.) $)
    unisn3 $p |- ( A e. B -> U. { x e. B | x = A } = A ) $=
      ( wcel cv wceq crab cuni csn rabsn unieqd unisng eqtrd ) BCDZAEBFACGZHBIZ
      HBNOPACBJKBCLM $.
  $}

  ${
    $d x y $.  $d y A $.
    $( An alternative statement of the effective freeness of a class ` A ` ,
       when it is a set.  (Contributed by Mario Carneiro, 14-Oct-2016.)  (Proof
       shortened by JJ, 26-Jul-2021.) $)
    dfnfc2 $p |- ( A. x A e. V -> ( F/_ x A <-> A. y F/ x y = A ) ) $=
      ( wcel wal wnfc cv wceq wnf nfcvd id nfeqd alrimiv csn df-nfc velsn nfbii
      cuni albii sylbbr nfunid nfa1 unisng sps nfceqdf syl5ib impbid2 ) CDEZAFZ
      ACGZBHZCIZAJZBFZUKUNBUKAULCUKAULKUKLMNUOACOZSZGUJUKUOAUPAUPGULUPEZAJZBFUO
      ABUPPUSUNBURUMABCQRTUAUBUJAUQCUIAUCUIUQCIACDUDUEUFUGUH $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( The class union of the union of two classes.  Theorem 8.3 of [Quine]
       p. 53.  (Contributed by NM, 20-Aug-1993.) $)
    uniun $p |- U. ( A u. B ) = ( U. A u. U. B ) $=
      ( vx vy cun cuni cv wcel wa wo 19.43 elun anbi2i andi bitri exbii orbi12i
      wex eluni 3bitr4i eqriv ) CABEZFZAFZBFZEZCGZDGZHZUHUBHZIZDRZUGUDHZUGUEHZJ
      ZUGUCHUGUFHUIUHAHZIZUIUHBHZIZJZDRUQDRZUSDRZJULUOUQUSDKUKUTDUKUIUPURJZIUTU
      JVCUIUHABLMUIUPURNOPUMVAUNVBDUGASDUGBSQTDUGUBSUGUDUELTUA $.

    $( The class union of the intersection of two classes.  Exercise 4.12(n) of
       [Mendelson] p. 235.  See ~ uniinqs for a condition where equality holds.
       (Contributed by NM, 4-Dec-2003.)  (Proof shortened by Andrew Salmon,
       29-Jun-2011.) $)
    uniin $p |- U. ( A i^i B ) C_ ( U. A i^i U. B ) $=
      ( vx vy cin cuni cv wcel wex 19.40 elin anbi2i anandi bitri exbii anbi12i
      wa eluni 3imtr4i ssriv ) CABEZFZAFZBFZEZCGZDGZHZUGUAHZQZDIZUFUCHZUFUDHZQZ
      UFUBHUFUEHUHUGAHZQZUHUGBHZQZQZDIUPDIZURDIZQUKUNUPURDJUJUSDUJUHUOUQQZQUSUI
      VBUHUGABKLUHUOUQMNOULUTUMVADUFARDUFBRPSDUFUARUFUCUDKST $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.
    $( Subclass relationship for class union.  Theorem 61 of [Suppes] p. 39.
       (Contributed by NM, 22-Mar-1998.)  (Proof shortened by Andrew Salmon,
       29-Jun-2011.) $)
    uniss $p |- ( A C_ B -> U. A C_ U. B ) $=
      ( vx vy wss cuni cv wcel wa wex ssel anim2d eximdv eluni 3imtr4g ssrdv )
      ABEZCAFZBFZQCGZDGZHZUAAHZIZDJUBUABHZIZDJTRHTSHQUDUFDQUCUEUBABUAKLMDTANDTB
      NOP $.

    $( Subclass relationship for class union.  (Contributed by NM,
       24-May-1994.)  (Proof shortened by Andrew Salmon, 29-Jun-2011.)  (Proof
       shortened by JJ, 26-Jul-2021.) $)
    ssuni $p |- ( ( A C_ B /\ B e. C ) -> A C_ U. C ) $=
      ( vy wcel wss cuni cv wi elunii expcom imim2d alimdv dfss2 3imtr4g impcom
      wal ) BCEZABFZACGZFZRDHZAEZUBBEZIZDQUCUBTEZIZDQSUARUEUGDRUDUFUCUDRUFUBBCJ
      KLMDABNDATNOP $.
  $}

  ${
    unissi.1 $e |- A C_ B $.
    $( Subclass relationship for subclass union.  Inference form of ~ uniss .
       (Contributed by David Moews, 1-May-2017.) $)
    unissi $p |- U. A C_ U. B $=
      ( wss cuni uniss ax-mp ) ABDAEBEDCABFG $.
  $}

  ${
    unissd.1 $e |- ( ph -> A C_ B ) $.
    $( Subclass relationship for subclass union.  Deduction form of ~ uniss .
       (Contributed by David Moews, 1-May-2017.) $)
    unissd $p |- ( ph -> U. A C_ U. B ) $=
      ( wss cuni uniss syl ) ABCEBFCFEDBCGH $.
  $}

  ${
    $d x y A $.
    $( The union of a set is empty iff the set is included in the singleton of
       the empty set.  (Contributed by NM, 12-Sep-2004.) $)
    uni0b $p |- ( U. A = (/) <-> A C_ { (/) } ) $=
      ( vx vy cv c0 csn wcel wral wceq wss cuni velsn ralbii dfss3 wn wrex neq0
      wex rexcom4 3bitr4ri rexbii eluni2 exbii rexnal 3bitri con4bii ) BDZEFZGZ
      BAHUGEIZBAHZAUHJAKZEIZUIUJBABELMBAUHNUMUKUMOCDZULGZCRZUJOZBAPZUKOCULQUNUG
      GZCRZBAPUSBAPZCRURUPUSBCASUQUTBACUGQUAUOVACBUNAUBUCTUJBAUDUEUFT $.

    $( The union of a set is empty iff all of its members are empty.
       (Contributed by NM, 16-Aug-2006.) $)
    uni0c $p |- ( U. A = (/) <-> A. x e. A x = (/) ) $=
      ( cuni c0 wceq csn wss cv wcel wral uni0b dfss3 velsn ralbii 3bitri ) BCD
      EBDFZGAHZPIZABJQDEZABJBKABPLRSABADMNO $.
  $}

  $( The union of the empty set is the empty set.  Theorem 8.7 of [Quine]
     p. 54.  (Reproved without relying on ~ ax-nul by Eric Schmidt.)
     (Contributed by NM, 16-Sep-1993.)  (Revised by Eric Schmidt,
     4-Apr-2007.) $)
  uni0 $p |- U. (/) = (/) $=
    ( c0 cuni wceq csn wss 0ss uni0b mpbir ) ABACAADZEIFAGH $.

  ${
    $d A y z $.  $d B y z $.  $d x y z $.
    $( Distribute proper substitution through the union of a class.
       (Contributed by Alan Sare, 10-Nov-2012.)  (Revised by NM,
       22-Aug-2018.) $)
    csbuni $p |- [_ A / x ]_ U. B = U. [_ A / x ]_ B $=
      ( vz vy cvv wcel cuni csb wceq wel cv wa wex wsbc syl5bb df-uni c0 csbprc
      cab csbab sbcex2 anbi1d sbcel2 anbi2i syl6bb exbidv abbidv syl5eq csbeq2i
      sbcan sbcg 3eqtr4g wn unieqd uni0 syl6req eqtrd pm2.61i ) BFGZABCHZIZABCI
      ZHZJUTABDEKZELZCGZMZENZDTZIZVEVFVCGZMZENZDTZVBVDUTVKVIABOZDTVOVIADBUAUTVP
      VNDVPVHABOZENUTVNVHEABUBUTVQVMEVQVEABOZVGABOZMZUTVMVEVGABUKUTVTVEVSMVMUTV
      RVEVSVEABFULUCVSVLVEABVFCUDUEUFPUGPUHUIABVAVJDECQUJDEVCQUMUTUNZVBRVDABVAS
      WAVDRHRWAVCRABCSUOUPUQURUS $.
  $}

  $( An element of a class is a subclass of its union.  Theorem 8.6 of [Quine]
     p. 54.  Also the basis for Proposition 7.20 of [TakeutiZaring] p. 40.
     (Contributed by NM, 6-Jun-1994.) $)
  elssuni $p |- ( A e. B -> A C_ U. B ) $=
    ( wss wcel cuni ssid ssuni mpan ) AACABDABECAFAABGH $.

  $( Condition turning a subclass relationship for union into an equality.
     (Contributed by NM, 18-Jul-2006.) $)
  unissel $p |- ( ( U. A C_ B /\ B e. A ) -> U. A = B ) $=
    ( cuni wss wcel wa simpl elssuni adantl eqssd ) ACZBDZBAEZFKBLMGMBKDLBAHIJ
    $.

  ${
    $d x y A $.  $d x y B $.
    $( Relationship involving membership, subset, and union.  Exercise 5 of
       [Enderton] p. 26 and its converse.  (Contributed by NM, 20-Sep-2003.) $)
    unissb $p |- ( U. A C_ B <-> A. x e. A x C_ B ) $=
      ( vy cv cuni wcel wi wal wss wa wex eluni imbi1i 19.23v albii bitri dfss2
      wral 3bitr4i bitr4i alcom 19.21v impexp bi2.04 imbi2i df-ral ) DEZBFZGZUH
      CGZHZDIZAEZBGZUNCJZHZAIZUICJUPABSUMUHUNGZUOKZUKHZAIZDIZURULVBDULUTALZUKHV
      BUJVDUKAUHBMNUTUKAOUAPVCVADIZAIURVADAUBVEUQAUOUSUKHZHZDIUOVFDIZHVEUQUOVFD
      UCVAVGDVAUSUOUKHHVGUSUOUKUDUSUOUKUEQPUPVHUODUNCRUFTPQQDUICRUPABUGT $.
  $}

  ${
    $d x A $.  $d x y B $.
    $( A subclass condition on the members of two classes that implies a
       subclass relation on their unions.  Proposition 8.6 of [TakeutiZaring]
       p. 59.  See ~ iunss2 for a generalization to indexed unions.
       (Contributed by NM, 22-Mar-2004.) $)
    uniss2 $p |- ( A. x e. A E. y e. B x C_ y -> U. A C_ U. B ) $=
      ( cv wss wrex wral cuni wcel ssuni expcom rexlimiv ralimi unissb sylibr )
      AEZBEZFZBDGZACHQDIZFZACHCIUAFTUBACSUBBDSRDJUBQRDKLMNACUAOP $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( If the difference ` A \ B ` contains the largest members of ` A ` , then
       the union of the difference is the union of ` A ` .  (Contributed by NM,
       22-Mar-2004.) $)
    unidif $p |- ( A. x e. A E. y e. ( A \ B ) x C_ y ->
               U. ( A \ B ) = U. A ) $=
      ( cv wss cdif wrex wral cuni wceq uniss2 difss unissi jctil eqss sylibr
      wa ) AEBEFBCDGZHACIZSJZCJZFZUBUAFZRUAUBKTUDUCABCSLSCCDMNOUAUBPQ $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Relationship implying union.  (Contributed by NM, 10-Nov-1999.) $)
    ssunieq $p |- ( ( A e. B /\ A. x e. B x C_ A ) -> A = U. B ) $=
      ( wcel cv wss wral cuni wceq elssuni unissb biimpri anim12i eqss sylibr
      wa ) BCDZAEBFACGZPBCHZFZSBFZPBSIQTRUABCJUARACBKLMBSNO $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( Any member of a class is the largest of those members that it includes.
       (Contributed by NM, 13-Aug-2002.) $)
    unimax $p |- ( A e. B -> U. { x e. B | x C_ A } = A ) $=
      ( vy wcel cv wss crab wral cuni wceq ssid sseq1 elrab3 elrab simprbi rgen
      mpbiri wa ssunieq eqcomd sylancl ) BCEZBAFZBGZACHZEZDFZBGZDUFIZUFJZBKUCUG
      BBGZBLUEULABCUDBBMNRUIDUFUHUFEUHCEUIUEUIAUHCUDUHBMOPQUGUJSBUKDBUFTUAUB $.
  $}

  ${
    $d A x $.
    $( A class is a subclass of the power class of its union.  Exercise 6(b) of
       [Enderton] p. 38.  (Contributed by NM, 14-Oct-1996.) $)
    pwuni $p |- A C_ ~P U. A $=
      ( vx cuni cpw cv wcel wss elssuni selpw sylibr ssriv ) BAACZDZBEZAFNLGNMF
      NAHBLIJK $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  The intersection of a class
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Declare class intersection symbol. $)
  $c |^| $.  $( Big cap $)

  $( Extend class notation to include the intersection of a class.  Read:
     "intersection (of) ` A ` ". $)
  cint $a class |^| A $.

  ${
    $d x y A $.
    $( Define the intersection of a class.  Definition 7.35 of [TakeutiZaring]
       p. 44.  For example, ` |^| { { 1 , 3 } , { 1 , 8 } } = { 1 } ` .
       Compare this with the intersection of two classes, ~ df-in .
       (Contributed by NM, 18-Aug-1993.) $)
    df-int $a |- |^| A = { x | A. y ( y e. A -> x e. y ) } $.
  $}

  ${
    $d x y A $.
    $( Alternate definition of class intersection.  (Contributed by NM,
       28-Jun-1998.) $)
    dfint2 $p |- |^| A = { x | A. y e. A x e. y } $=
      ( cint cv wcel wi wal cab wral df-int df-ral abbii eqtr4i ) CDBEZCFAEOFZG
      BHZAIPBCJZAIABCKRQAPBCLMN $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( Equality law for intersection.  (Contributed by NM, 13-Sep-1999.) $)
    inteq $p |- ( A = B -> |^| A = |^| B ) $=
      ( vx vy wceq wel wral cab cint raleq abbidv dfint2 3eqtr4g ) ABEZCDFZDAGZ
      CHODBGZCHAIBINPQCODABJKCDALCDBLM $.
  $}

  ${
    inteqi.1 $e |- A = B $.
    $( Equality inference for class intersection.  (Contributed by NM,
       2-Sep-2003.) $)
    inteqi $p |- |^| A = |^| B $=
      ( wceq cint inteq ax-mp ) ABDAEBEDCABFG $.
  $}

  ${
    inteqd.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for class intersection.  (Contributed by NM,
       2-Sep-2003.) $)
    inteqd $p |- ( ph -> |^| A = |^| B ) $=
      ( wceq cint inteq syl ) ABCEBFCFEDBCGH $.
  $}

  ${
    $d x A y $.  $d x B y $.
    elint.1 $e |- A e. _V $.
    $( Membership in class intersection.  (Contributed by NM, 21-May-1994.) $)
    elint $p |- ( A e. |^| B <-> A. x ( x e. B -> A e. x ) ) $=
      ( vy cv wcel wi wal cint wceq eleq1 imbi2d albidv df-int elab2 ) AFZCGZEF
      ZQGZHZAIRBQGZHZAIEBCJDSBKZUAUCAUDTUBRSBQLMNEACOP $.
  $}

  ${
    $d x A $.  $d x B $.
    elint2.1 $e |- A e. _V $.
    $( Membership in class intersection.  (Contributed by NM, 14-Oct-1999.) $)
    elint2 $p |- ( A e. |^| B <-> A. x e. B A e. x ) $=
      ( cint wcel cv wi wal wral elint df-ral bitr4i ) BCEFAGZCFBNFZHAIOACJABCD
      KOACLM $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( Membership in class intersection, with the sethood requirement expressed
       as an antecedent.  (Contributed by NM, 20-Nov-2003.)  (Proof shortened
       by JJ, 26-Jul-2021.) $)
    elintg $p |- ( A e. V -> ( A e. |^| B <-> A. x e. B A e. x ) ) $=
      ( vy wel wral cv wcel cint wceq eleq1 ralbidv dfint2 elab2g ) EAFZACGBAHZ
      IZACGEBCJDEHZBKPRACSBQLMEACNO $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Membership in class intersection.  (Contributed by NM, 14-Oct-1999.)
       (Proof shortened by Andrew Salmon, 9-Jul-2011.) $)
    elinti $p |- ( A e. |^| B -> ( C e. B -> A e. C ) ) $=
      ( vx cint wcel wi cv wral elintg eleq2 rspccv syl6bi pm2.43i ) ABEZFZCBFA
      CFZGZPPADHZFZDBIRDABOJTQDCBSCAKLMN $.
  $}

  ${
    $d y z A $.  $d x y z $.
    nfint.1 $e |- F/_ x A $.
    $( Bound-variable hypothesis builder for intersection.  (Contributed by NM,
       2-Feb-1997.)  (Proof shortened by Andrew Salmon, 12-Aug-2011.) $)
    nfint $p |- F/_ x |^| A $=
      ( vy vz cint wel wral cab dfint2 nfv nfral nfab nfcxfr ) ABFDEGZEBHZDIDEB
      JPADOAEBCOAKLMN $.
  $}

  ${
    $d A x y $.  $d ph y $.
    inteqab.1 $e |- A e. _V $.
    $( Membership in the intersection of a class abstraction.  (Contributed by
       NM, 30-Aug-1993.) $)
    elintab $p |- ( A e. |^| { x | ph } <-> A. x ( ph -> A e. x ) ) $=
      ( vy cab cint wcel cv wi wal elint nfsab1 nfv nfim weq eleq1w abid syl6bb
      eleq2w imbi12d cbvalv1 bitri ) CABFZGHEIZUDHZCUEHZJZEKACBIZHZJZBKECUDDLUH
      UKEBUFUGBABEMUGBNOUKENEBPZUFAUGUJULUFUIUDHAEBUDQABRSEBCTUAUBUC $.

    $( Membership in the intersection of a class abstraction.  (Contributed by
       NM, 17-Oct-1999.) $)
    elintrab $p |- ( A e. |^| { x e. B | ph } <->
                 A. x e. B ( ph -> A e. x ) ) $=
      ( cv wcel wa cab cint wi wal crab wral elintab impexp albii df-rab inteqi
      bitri eleq2i df-ral 3bitr4i ) CBFZDGZAHZBIZJZGZUEACUDGZKZKZBLZCABDMZJZGUK
      BDNUIUFUJKZBLUMUFBCEOUPULBUEAUJPQTUOUHCUNUGABDRSUAUKBDUBUC $.
  $}

  ${
    $d x y A $.  $d y B $.  $d y ph $.
    $( Membership in the intersection of a class abstraction.  (Contributed by
       NM, 17-Feb-2007.) $)
    elintrabg $p |- ( A e. V -> ( A e. |^| { x e. B | ph } <->
                 A. x e. B ( ph -> A e. x ) ) ) $=
      ( vy cv crab cint wcel wi wral eleq1 wceq imbi2d ralbidv elintrab vtoclbg
      vex ) FGZABDHIZJATBGZJZKZBDLCUAJACUBJZKZBDLFCETCUAMTCNZUDUFBDUGUCUEATCUBM
      OPABTDFSQR $.
  $}

  ${
    $d x y $.
    $( The intersection of the empty set is the universal class.  Exercise 2 of
       [TakeutiZaring] p. 44.  (Contributed by NM, 18-Aug-1993.)  (Proof
       shortened by JJ, 26-Jul-2021.) $)
    int0 $p |- |^| (/) = _V $=
      ( vy vx c0 cint cvv cv wcel wel wral ral0 vex elint2 mpbir 2th eqriv ) AC
      DZEAFZPGZQEGRABHZBCISBJBQCAKZLMTNO $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d y ph $.
    $( An element of a class includes the intersection of the class.  Exercise
       4 of [TakeutiZaring] p. 44 (with correction), generalized to classes.
       (Contributed by NM, 18-Nov-1995.) $)
    intss1 $p |- ( A e. B -> |^| B C_ A ) $=
      ( vx vy wcel cint cv wal vex elint wceq eleq1 eleq2 imbi12d spcgv pm2.43a
      wi syl5bi ssrdv ) ABEZCBFZACGZUAEDGZBEZUBUCEZQZDHZTUBAEZDUBBCIJUGTUHUFTUH
      QDABUCAKUDTUEUHUCABLUCAUBMNOPRS $.

    $( Subclass of a class intersection.  Theorem 5.11(viii) of [Monk1] p. 52
       and its converse.  (Contributed by NM, 14-Oct-1999.) $)
    ssint $p |- ( A C_ |^| B <-> A. x e. B A C_ x ) $=
      ( vy cint wss cv wcel wral dfss3 vex elint2 ralbii ralcom bitr4i 3bitri )
      BCEZFDGZQHZDBIRAGZHZACIZDBIZBTFZACIZDBQJSUBDBARCDKLMUCUADBIZACIUEUADABCNU
      DUFACDBTJMOP $.

    $( Subclass of the intersection of a class abstraction.  (Contributed by
       NM, 31-Jul-2006.)  (Proof shortened by Andrew Salmon, 9-Jul-2011.) $)
    ssintab $p |- ( A C_ |^| { x | ph } <-> A. x ( ph -> A C_ x ) ) $=
      ( vy cab cint wss cv wral wi wal ssint sseq2 ralab2 bitri ) CABEZFGCDHZGZ
      DPIACBHZGZJBKDCPLARTDBQSCMNO $.

    $( Subclass of the least upper bound.  (Contributed by NM, 8-Aug-2000.) $)
    ssintub $p |- A C_ |^| { x e. B | A C_ x } $=
      ( vy cv wss crab cint ssint wcel sseq2 elrab simprbi mprgbir ) BBAEZFZACG
      ZHFBDEZFZDQDBQIRQJRCJSPSARCORBKLMN $.

    $( Subclass of the minimum value of class of supersets.  (Contributed by
       NM, 10-Aug-2006.) $)
    ssmin $p |- A C_ |^| { x | ( A C_ x /\ ph ) } $=
      ( cv wss wa cab cint wi ssintab simpl mpgbir ) CCBDEZAFZBGHENMIBNBCJMAKL
      $.

    $( Any member of a class is the smallest of those members that include it.
       (Contributed by NM, 13-Aug-2002.)  (Proof shortened by Andrew Salmon,
       9-Jul-2011.) $)
    intmin $p |- ( A e. B -> |^| { x e. B | A C_ x } = A ) $=
      ( vy wcel cv wss crab cint wi wral elintrab ssid wceq sseq2 eleq2 imbi12d
      vex rspcv mpii syl5bi ssrdv ssintub a1i eqssd ) BCEZBAFZGZACHIZBUFDUIBDFZ
      UIEUHUJUGEZJZACKZUFUJBEZUHAUJCDRLUFUMBBGZUNBMULUOUNJABCUGBNUHUOUKUNUGBBOU
      GBUJPQSTUAUBBUIGUFABCUCUDUE $.

    $( Intersection of subclasses.  (Contributed by NM, 14-Oct-1999.)  (Proof
       shortened by OpenAI, 25-Mar-2020.) $)
    intss $p |- ( A C_ B -> |^| B C_ |^| A ) $=
      ( vy vx wss wel wral cab cint ssralv ss2abdv dfint2 3sstr4g ) ABEZCDFZDBG
      ZCHODAGZCHBIAINPQCODABJKCDBLCDALM $.

    $( The intersection of a nonempty set is a subclass of its union.
       (Contributed by NM, 29-Jul-2006.) $)
    intssuni $p |- ( A =/= (/) -> |^| A C_ U. A ) $=
      ( vx vy c0 wne cint cuni cv wcel wral r19.2z ex vex elint2 eluni2 3imtr4g
      wrex ssrdv ) ADEZBAFZAGZSBHZCHIZCAJZUCCAQZUBTIUBUAISUDUEUCCAKLCUBABMNCUBA
      OPR $.
  $}

  ${
    $d x A $.
    $( Subclass of the intersection of a restricted class builder.
       (Contributed by NM, 30-Jan-2015.) $)
    ssintrab $p |- ( A C_ |^| { x e. B | ph }
           <-> A. x e. B ( ph -> A C_ x ) ) $=
      ( crab cint wss cv wcel wa cab wral df-rab inteqi sseq2i wal impexp albii
      wi ssintab df-ral 3bitr4i bitri ) CABDEZFZGCBHZDIZAJZBKZFZGZACUFGZSZBDLZU
      EUJCUDUIABDMNOUHULSZBPUGUMSZBPUKUNUOUPBUGAULQRUHBCTUMBDUAUBUC $.
  $}

  $( If the union of a class is included in its intersection, the class is
     either the empty set or a singleton ( ~ uniintsn ).  (Contributed by NM,
     30-Oct-2010.)  (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
  unissint $p |- ( U. A C_ |^| A <-> ( A = (/) \/ U. A = |^| A ) ) $=
    ( cuni cint wss c0 wo wn wa simpl wne df-ne intssuni sylbir adantl eqssd ex
    wceq orrd cvv ssv int0 sseqtr4i inteq syl5sseqr eqimss jaoi impbii ) ABZACZ
    DZAEQZUHUIQZFUJUKULUJUKGZULUJUMHUHUIUJUMIUMUIUHDZUJUMAEJUNAEKALMNOPRUKUJULU
    KECZUHUIUHSUOUHTUAUBAEUCUDUHUIUEUFUG $.

  $( Subclass relationship for intersection and union.  (Contributed by NM,
     29-Jul-2006.) $)
  intssuni2 $p |- ( ( A C_ B /\ A =/= (/) ) -> |^| A C_ U. B ) $=
    ( c0 wne wss cint cuni intssuni uniss sylan9ssr ) ACDABEAFAGBGAHABIJ $.

  ${
    $d x A $.  $d x B $.  $d x ps $.
    intminss.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Under subset ordering, the intersection of a restricted class
       abstraction is less than or equal to any of its members.  (Contributed
       by NM, 7-Sep-2013.) $)
    intminss $p |- ( ( A e. B /\ ps ) -> |^| { x e. B | ph } C_ A ) $=
      ( wcel wa crab cint wss elrab intss1 sylbir ) DEGBHDACEIZGOJDKABCDEFLDOMN
      $.
  $}

  ${
    $d x A $.
    intmin2.1 $e |- A e. _V $.
    $( Any set is the smallest of all sets that include it.  (Contributed by
       NM, 20-Sep-2003.) $)
    intmin2 $p |- |^| { x | A C_ x } = A $=
      ( cv wss cvv crab cint cab rabab inteqi wcel wceq intmin ax-mp eqtr3i ) B
      ADEZAFGZHZQAIZHBRTQAJKBFLSBMCABFNOP $.
  $}

  ${
    $d x A $.  $d x ps $.
    intmin3.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    intmin3.3 $e |- ps $.
    $( Under subset ordering, the intersection of a class abstraction is less
       than or equal to any of its members.  (Contributed by NM,
       3-Jul-2005.) $)
    intmin3 $p |- ( A e. V -> |^| { x | ph } C_ A ) $=
      ( wcel cab cint wss elabg mpbiri intss1 syl ) DEHZDACIZHZQJDKPRBGABCDEFLM
      DQNO $.
  $}

  ${
    $d x y A $.  $d y ph $.
    $( Elimination of a conjunct in a class intersection.  (Contributed by NM,
       31-Jul-2006.) $)
    intmin4 $p |- ( A C_ |^| { x | ph } ->
                  |^| { x | ( A C_ x /\ ph ) } = |^| { x | ph } ) $=
      ( vy cab cint wss cv wa wcel wi wal wb ssintab simpr impbid2 imbi1d alimi
      ancr elintab albi syl sylbi vex 3bitr4g eqrdv ) CABEFZGZDCBHZGZAIZBEFZUGU
      HUKDHZUIJZKZBLZAUNKZBLZUMULJUMUGJUHAUJKZBLZUPURMZABCNUTUOUQMZBLVAUSVBBUSU
      KAUNUSUKAUJAOAUJSPQRUOUQBUAUBUCUKBUMDUDZTABUMVCTUEUF $.
  $}

  ${
    $d x z A $.  $d x z ph $.  $d x y z $.
    intab.1 $e |- A e. _V $.
    intab.2 $e |- { x | E. y ( ph /\ x = A ) } e. _V $.
    $( The intersection of a special case of a class abstraction. ` y ` may be
       free in ` ph ` and ` A ` , which can be thought of a ` ph ( y ) ` and
       ` A ( y ) ` .  Typically, ~ abrexex2 or ~ abexssex can be used to
       satisfy the second hypothesis.  (Contributed by NM, 28-Jul-2006.)
       (Proof shortened by Mario Carneiro, 14-Nov-2016.) $)
    intab $p |- |^| { x | A. y ( ph -> A e. x ) } =
                { x | E. y ( ph /\ x = A ) } $=
      ( vz cv wcel wi wal cab cint wceq wa wex wss ex alrimiv sylibr cvv anbi2d
      eqeq1 exbidv cbvabv eqeltri nfe1 nfab nfeq2 eleq2 imbi2d albid elab 19.8a
      wsbc sbc6 df-sbc sylib mpgbir intss1 19.29r simplr pm3.35 adantlr eqeltrd
      ax-mp exlimiv syl vex elintab abssi eqssi eqtri ) ADBHZIZJZCKZBLZMZAGHZDN
      ZOZCPZGLZAVNDNZOZCPZBLZVSWDWDVRIZVSWDQWIADWDIZJZCVQWKCKBWDWDWHUAWCWGGBVTV
      NNZWBWFCWLWAWEAVTVNDUCUBUDUEZFUFVNWDNZVPWKCCVNWDWCCGWBCUGUHUIWNVOWJAVNWDD
      UJUKULUMAWCGDUOZWJAWAWCJZGKWOAWPGAWAWCWBCUNRSWCGDEUPTWCGDUQURUSWDVRUTVFWC
      GVSWCVQVTVNIZJZBKVTVSIWCWRBWCVQWQWCVQOWBVPOZCPWQWBVPCVAWSWQCWSVTDVNAWAVPV
      BAVPVOWAAVOVCVDVEVGVHRSVQBVTGVIVJTVKVLWMVM $.
  $}

  $( The intersection of a class containing the empty set is empty.
     (Contributed by NM, 24-Apr-2004.) $)
  int0el $p |- ( (/) e. A -> |^| A = (/) ) $=
    ( c0 wcel cint intss1 wss 0ss a1i eqssd ) BACZADZBBAEBKFJKGHI $.

  ${
    $d x y A $.  $d x y B $.
    $( The class intersection of the union of two classes.  Theorem 78 of
       [Suppes] p. 42.  (Contributed by NM, 22-Sep-2002.) $)
    intun $p |- |^| ( A u. B ) = ( |^| A i^i |^| B ) $=
      ( vx vy cun cint cin cv wcel wi wal wa 19.26 elun imbi1i jaob bitri elint
      wo 3bitr4i albii vex anbi12i elin eqriv ) CABEZFZAFZBFZGZDHZUFIZCHZUKIZJZ
      DKZUMUHIZUMUIIZLZUMUGIUMUJIUKAIZUNJZUKBIZUNJZLZDKVADKZVCDKZLUPUSVAVCDMUOV
      DDUOUTVBSZUNJVDULVGUNUKABNOUTUNVBPQUAUQVEURVFDUMACUBZRDUMBVHRUCTDUMUFVHRU
      MUHUIUDTUE $.
  $}

  ${
    $d x y A $.  $d x y B $.
    intpr.1 $e |- A e. _V $.
    intpr.2 $e |- B e. _V $.
    $( The intersection of a pair is the intersection of its members.  Theorem
       71 of [Suppes] p. 42.  (Contributed by NM, 14-Oct-1999.) $)
    intpr $p |- |^| { A , B } = ( A i^i B ) $=
      ( vx vy cpr cint cin cv wcel wi wal wa wceq 19.26 wo vex clel4 3bitr4i
      elpr imbi1i jaob bitri albii anbi12i elint elin eqriv ) EABGZHZABIZFJZUJK
      ZEJZUMKZLZFMZUOAKZUOBKZNZUOUKKUOULKUMAOZUPLZUMBOZUPLZNZFMVCFMZVEFMZNURVAV
      CVEFPUQVFFUQVBVDQZUPLVFUNVIUPUMABFRUAUBVBUPVDUCUDUEUSVGUTVHFUOACSFUOBDSUF
      TFUOUJERUGUOABUHTUI $.
  $}

  ${
    $d x y A $.  $d y B $.
    $( The intersection of a pair is the intersection of its members.  Closed
       form of ~ intpr .  Theorem 71 of [Suppes] p. 42.  (Contributed by FL,
       27-Apr-2008.) $)
    intprg $p |- ( ( A e. V /\ B e. W ) -> |^| { A , B } = ( A i^i B ) ) $=
      ( vx vy cv cpr cint cin wceq preq1 inteqd ineq1 eqeq12d preq2 ineq2 intpr
      vex vtocl2g ) EGZFGZHZIZUAUBJZKAUBHZIZAUBJZKABHZIZABJZKEFABCDUAAKZUDUGUEU
      HULUCUFUAAUBLMUAAUBNOUBBKZUGUJUHUKUMUFUIUBBAPMUBBAQOUAUBESFSRT $.
  $}

  $( Intersection of a singleton.  (Contributed by Stefan O'Rear,
     22-Feb-2015.) $)
  intsng $p |- ( A e. V -> |^| { A } = A ) $=
    ( wcel csn cint cpr dfsn2 inteqi cin wceq intprg anidms inidm syl6eq syl5eq
    ) ABCZADZEAAFZEZAQRAGHPSAAIZAPSTJAABBKLAMNO $.

  ${
    intsn.1 $e |- A e. _V $.
    $( The intersection of a singleton is its member.  Theorem 70 of [Suppes]
       p. 41.  (Contributed by NM, 29-Sep-2002.) $)
    intsn $p |- |^| { A } = A $=
      ( cvv wcel csn cint wceq intsng ax-mp ) ACDAEFAGBACHI $.
  $}

  ${
    $d x y A $.  $d y ph $.
    $( Two ways to express " ` A ` is a singleton."  See also ~ en1 , ~ en1b ,
       ~ card1 , and ~ eusn .  (Contributed by NM, 2-Aug-2010.) $)
    uniintsn $p |- ( U. A = |^| A <-> E. x A = { x } ) $=
      ( vy cuni cint wceq cv wex wa wal c0 wne cvv inteq syl6eq adantl unieq ex
      wcel wss csn wi vn0 int0 eqeq1 syl5ib imp eqtr3d necon3d mpi n0 sylib cpr
      uni0 vex prss cun cin uniss simpl sseqtrd intss sstrd unipr intpr 3sstr3g
      inss1 ssun1 sstri eqss uneqin bitr3i sylanblc syl5bi alrimivv jca weu cab
      euabsn eleq1w eu4 abid2 eqeq1i exbii 3bitr3i unisn 3eqtr4a exlimiv impbii
      intsn ) BDZBEZFZBAGZUAZFZAHZWMWNBSZAHZWRCGZBSZIZWNWTFZUBZCJAJZIZWQWMWSXEW
      MBKLZWSWMMKLXGUCWMBKMKWMBKFZMKFWMXHIWLMKXHWLMFWMXHWLKEMBKNUDOPWMXHWLKFZXH
      WKKFWMXIXHWKKDKBKQUNOWKWLKUEUFUGUHRUIUJABUKULWMXDACXBWNWTUMZBTZWMXCWNWTBA
      UOZCUOZUPWMXKXCWMXKIZWNWTUQZWNWTURZTZXPXOTZXCXNXJDZXJEZXOXPXNXSWLXTXNXSWK
      WLXKXSWKTWMXJBUSPWMXKUTVAXKWLXTTWMXJBVBPVCWNWTXLXMVDWNWTXLXMVEVFXPWNXOWNW
      TVGWNWTVHVIXQXRIXOXPFXCXOXPVJWNWTVKVLVMRVNVOVPWRAVQWRAVRZWOFZAHXFWQWRAVSW
      RXAACACBVTWAYBWPAYABWOABWBWCWDWEULWPWMAWPWODWNWKWLWNXLWFBWOQWPWLWOEWNBWON
      WNXLWJOWGWHWI $.

    $( The union and the intersection of a class abstraction are equal exactly
       when there is a unique satisfying value of ` ph ( x ) ` .  (Contributed
       by Mario Carneiro, 24-Dec-2016.) $)
    uniintab $p |- ( E! x ph <-> U. { x | ph } = |^| { x | ph } ) $=
      ( vy weu cab cv csn wceq wex cuni cint euabsn2 uniintsn bitr4i ) ABDABEZC
      FGHCIOJOKHABCLCOMN $.
  $}

  ${
    intunsn.1 $e |- B e. _V $.
    $( Theorem joining a singleton to an intersection.  (Contributed by NM,
       29-Sep-2002.) $)
    intunsn $p |- |^| ( A u. { B } ) = ( |^| A i^i B ) $=
      ( csn cun cint cin intun intsn ineq2i eqtri ) ABDZEFAFZLFZGMBGALHNBMBCIJK
      $.
  $}

  $( Relative intersection of an empty set.  (Contributed by Stefan O'Rear,
     3-Apr-2015.) $)
  rint0 $p |- ( X = (/) -> ( A i^i |^| X ) = A ) $=
    ( c0 wceq cint cin inteq ineq2d cvv int0 ineq2i inv1 eqtri syl6eq ) BCDZABE
    ZFACEZFZAOPQABCGHRAIFAQIAJKALMN $.

  ${
    $d B y $.  $d X y $.
    $( Membership in a restricted intersection.  (Contributed by Stefan O'Rear,
       3-Apr-2015.) $)
    elrint $p |- ( X e. ( A i^i |^| B ) <-> ( X e. A /\ A. y e. B X e. y ) ) $=
      ( cint cin wcel wa cv wral elin elintg pm5.32i bitri ) DBCEZFGDBGZDOGZHPD
      AIGACJZHDBOKPQRADCBLMN $.

    $( Membership in a restricted intersection.  (Contributed by Stefan O'Rear,
       3-Apr-2015.) $)
    elrint2 $p |- ( X e. A -> ( X e. ( A i^i |^| B ) <->
          A. y e. B X e. y ) ) $=
      ( cint cin wcel cv wral elrint baib ) DBCEFGDBGDAHGACIABCDJK $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Indexed union and intersection
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $c U_ $.  $( Underlined big cup. $)
  $c |^|_ $.  $( Underlined big cap. $)

  $( Extend class notation to include indexed union.  Note:  Historically
     (prior to 21-Oct-2005), set.mm used the notation ` U. x e. A B ` , with
     the same union symbol as ~ cuni .  While that syntax was unambiguous, it
     did not allow for LALR parsing of the syntax constructions in set.mm.  The
     new syntax uses a distinguished symbol ` U_ ` instead of ` U. ` and does
     allow LALR parsing.  Thanks to Peter Backes for suggesting this change. $)
  ciun $a class U_ x e. A B $.

  $( Extend class notation to include indexed intersection.  Note:
     Historically (prior to 21-Oct-2005), set.mm used the notation
     ` |^| x e. A B ` , with the same intersection symbol as ~ cint .  Although
     that syntax was unambiguous, it did not allow for LALR parsing of the
     syntax constructions in set.mm.  The new syntax uses a distinguished
     symbol ` |^|_ ` instead of ` |^| ` and does allow LALR parsing.  Thanks to
     Peter Backes for suggesting this change. $)
  ciin $a class |^|_ x e. A B $.

  ${
    $d x y $.  $d y A $.  $d y B $.
    $( Define indexed union.  Definition indexed union in [Stoll] p. 45.  In
       most applications, ` A ` is independent of ` x ` (although this is not
       required by the definition), and ` B ` depends on ` x ` i.e. can be read
       informally as ` B ( x ) ` .  We call ` x ` the index, ` A ` the index
       set, and ` B ` the indexed set.  In most books, ` x e. A ` is written as
       a subscript or underneath a union symbol ` U. ` .  We use a special
       union symbol ` U_ ` to make it easier to distinguish from plain class
       union.  In many theorems, you will see that ` x ` and ` A ` are in the
       same distinct variable group (meaning ` A ` cannot depend on ` x ` ) and
       that ` B ` and ` x ` do not share a distinct variable group (meaning
       that can be thought of as ` B ( x ) ` i.e. can be substituted with a
       class expression containing ` x ` ).  An alternate definition tying
       indexed union to ordinary union is ~ dfiun2 .  Theorem ~ uniiun provides
       a definition of ordinary union in terms of indexed union.  Theorems
       ~ fniunfv and ~ funiunfv are useful when ` B ` is a function.
       (Contributed by NM, 27-Jun-1998.) $)
    df-iun $a |- U_ x e. A B = { y | E. x e. A y e. B } $.

    $( Define indexed intersection.  Definition of [Stoll] p. 45.  See the
       remarks for its sibling operation of indexed union ~ df-iun .  An
       alternate definition tying indexed intersection to ordinary intersection
       is ~ dfiin2 .  Theorem ~ intiin provides a definition of ordinary
       intersection in terms of indexed intersection.  (Contributed by NM,
       27-Jun-1998.) $)
    df-iin $a |- |^|_ x e. A B = { y | A. x e. A y e. B } $.
  $}

  ${
    $d x y A $.  $d y B $.  $d y C $.
    $( Membership in indexed union.  (Contributed by NM, 3-Sep-2003.) $)
    eliun $p |- ( A e. U_ x e. B C <-> E. x e. B A e. C ) $=
      ( vy ciun wcel wrex elex rexlimivw cv wceq eleq1 rexbidv df-iun pm5.21nii
      cvv elab2g ) BACDFZGBQGZBDGZACHZBSIUATACBDIJEKZDGZACHUBEBSQUCBLUDUAACUCBD
      MNAECDORP $.

    $( Membership in indexed intersection.  (Contributed by NM, 3-Sep-2003.) $)
    eliin $p |- ( A e. V -> ( A e. |^|_ x e. B C <-> A. x e. B A e. C ) ) $=
      ( vy cv wcel wral ciin wceq eleq1 ralbidv df-iin elab2g ) FGZDHZACIBDHZAC
      IFBACDJEPBKQRACPBDLMAFCDNO $.
  $}

  ${
    $d x A $.  $d x C $.  $d x D $.  $d x E $.
    eliuni.1 $e |- ( x = A -> B = C ) $.
    $( Membership in an indexed union, one way.  (Contributed by JJ,
       27-Jul-2021.) $)
    eliuni $p |- ( ( A e. D /\ E e. C ) -> E e. U_ x e. D B ) $=
      ( wcel wa wrex ciun cv wceq eleq2d rspcev eliun sylibr ) BEHFDHZIFCHZAEJF
      AECKHSRABEALBMCDFGNOAFECPQ $.
  $}

  ${
    $d y z A $.  $d x z B $.  $d z C $.  $d x y $.
    $( Commutation of indexed unions.  (Contributed by NM, 18-Dec-2008.) $)
    iuncom $p |- U_ x e. A U_ y e. B C = U_ y e. B U_ x e. A C $=
      ( vz ciun cv wcel wrex rexcom eliun rexbii 3bitr4i eqriv ) FACBDEGZGZBDAC
      EGZGZFHZPIZACJZTRIZBDJZTQITSITEIZBDJZACJUEACJZBDJUBUDUEABCDKUAUFACBTDELMU
      CUGBDATCELMNATCPLBTDRLNO $.
  $}

  ${
    $d y z A $.  $d y z B $.  $d x y z $.
    $( Commutation of union with indexed union.  (Contributed by Mario
       Carneiro, 18-Jan-2014.) $)
    iuncom4 $p |- U_ x e. A U. B = U. U_ x e. A B $=
      ( vy vz cuni ciun cv wcel wa wex df-rex rexbii rexcom4 bitri exbii eluni2
      wrex eliun 3bitr4i r19.41v anbi1i eqriv ) DABCFZGZABCGZFZDHZUDIZABRZUHEHZ
      IZEUFRZUHUEIUHUGIULECRZABRZUKCIZABRZULJZEKZUJUMUOUPULJZABRZEKZUSUOUTEKZAB
      RVBUNVCABULECLMUTAEBNOVAUREUPULABUAPOUIUNABEUHCQMUMUKUFIZULJZEKUSULEUFLVE
      UREVDUQULAUKBCSUBPOTAUHBUDSEUHUFQTUC $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( Indexed union of a constant class, i.e. where ` B ` does not depend on
       ` x ` .  (Contributed by NM, 5-Sep-2004.)  (Proof shortened by Andrew
       Salmon, 25-Jul-2011.) $)
    iunconst $p |- ( A =/= (/) -> U_ x e. A B = B ) $=
      ( vy c0 wne ciun cv wcel wrex r19.9rzv eliun syl6rbbr eqrdv ) BEFZDABCGZC
      ODHZCIZRABJQPIRABKAQBCLMN $.

    $( Indexed intersection of a constant class, i.e. where ` B ` does not
       depend on ` x ` .  (Contributed by Mario Carneiro, 6-Feb-2015.) $)
    iinconst $p |- ( A =/= (/) -> |^|_ x e. A B = B ) $=
      ( vy c0 wne ciin cv wcel wral r19.3rzv wb cvv eliin elv syl6rbbr eqrdv )
      BEFZDABCGZCRDHZCIZUAABJZTSIZUAABKUCUBLDATBCMNOPQ $.
  $}

  ${
    $d x y $.  $d y z A $.  $d x z B $.  $d z C $.
    $( Law combining indexed union with indexed intersection.  Eq. 14 in
       [KuratowskiMostowski] p. 109.  This theorem also appears as the last
       example at ~ http://en.wikipedia.org/wiki/Union%5F%28set%5Ftheory%29 .
       (Contributed by NM, 17-Aug-2004.)  (Proof shortened by Andrew Salmon,
       25-Jul-2011.) $)
    iuniin $p |- U_ x e. A |^|_ y e. B C C_ |^|_ y e. B U_ x e. A C $=
      ( vz ciin ciun cv wcel wrex wral r19.12 wb cvv eliin rexbii eliun 3imtr4i
      elv ralbii ssriv ) FACBDEGZHZBDACEHZGZFIZUCJZACKZUGUEJZBDLZUGUDJUGUFJZUGE
      JZBDLZACKUMACKZBDLUIUKUMABCDMUHUNACUHUNNFBUGDEOPTQUJUOBDAUGCERUASAUGCUCRU
      LUKNFBUGDUEOPTSUB $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d y C $.
    $( Subclass theorem for indexed union.  (Contributed by NM, 10-Dec-2004.)
       (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
    iunss1 $p |- ( A C_ B -> U_ x e. A C C_ U_ x e. B C ) $=
      ( vy wss ciun cv wcel wrex ssrexv eliun 3imtr4g ssrdv ) BCFZEABDGZACDGZOE
      HZDIZABJSACJRPIRQISABCKARBDLARCDLMN $.

    $( Subclass theorem for indexed intersection.  (Contributed by NM,
       24-Jan-2012.) $)
    iinss1 $p |- ( A C_ B -> |^|_ x e. B C C_ |^|_ x e. A C ) $=
      ( vy wss ciin cv wcel wral ssralv wb cvv eliin elv 3imtr4g ssrdv ) BCFZEA
      CDGZABDGZREHZDIZACJZUBABJZUASIZUATIZUBABCKUEUCLEAUACDMNOUFUDLEAUABDMNOPQ
      $.

    $( Equality theorem for indexed union.  (Contributed by NM,
       27-Jun-1998.) $)
    iuneq1 $p |- ( A = B -> U_ x e. A C = U_ x e. B C ) $=
      ( wss wa ciun wceq iunss1 anim12i eqss 3imtr4i ) BCEZCBEZFABDGZACDGZEZPOE
      ZFBCHOPHMQNRABCDIACBDIJBCKOPKL $.

    $( Equality theorem for indexed intersection.  (Contributed by NM,
       27-Jun-1998.) $)
    iineq1 $p |- ( A = B -> |^|_ x e. A C = |^|_ x e. B C ) $=
      ( vy wceq cv wcel wral cab ciin raleq abbidv df-iin 3eqtr4g ) BCFZEGDHZAB
      IZEJQACIZEJABDKACDKPRSEQABCLMAEBDNAECDNO $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.  $d y C $.
    $( Subclass theorem for indexed union.  (Contributed by NM, 26-Nov-2003.)
       (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
    ss2iun $p |- ( A. x e. A B C_ C -> U_ x e. A B C_ U_ x e. A C ) $=
      ( vy wss wral ciun cv wcel wrex ssel ralimi rexim syl eliun 3imtr4g ssrdv
      wi ) CDFZABGZEABCHZABDHZUAEIZCJZABKZUDDJZABKZUDUBJUDUCJUAUEUGSZABGUFUHSTU
      IABCDUDLMUEUGABNOAUDBCPAUDBDPQR $.

    $( Equality theorem for indexed union.  (Contributed by NM,
       22-Oct-2003.) $)
    iuneq2 $p |- ( A. x e. A B = C -> U_ x e. A B = U_ x e. A C ) $=
      ( wss wral wa ciun wceq ss2iun anim12i eqss ralbii r19.26 bitri 3imtr4i )
      CDEZABFZDCEZABFZGZABCHZABDHZEZUCUBEZGCDIZABFZUBUCIRUDTUEABCDJABDCJKUGQSGZ
      ABFUAUFUHABCDLMQSABNOUBUCLP $.

    $( Equality theorem for indexed intersection.  (Contributed by NM,
       22-Oct-2003.)  (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
    iineq2 $p |- ( A. x e. A B = C -> |^|_ x e. A B = |^|_ x e. A C ) $=
      ( vy wceq wral cv wcel cab ciin wb eleq2 ralimi syl abbidv df-iin 3eqtr4g
      ralbi ) CDFZABGZEHZCIZABGZEJUBDIZABGZEJABCKABDKUAUDUFEUAUCUELZABGUDUFLTUG
      ABCDUBMNUCUEABSOPAEBCQAEBDQR $.
  $}

  ${
    iuneq2i.1 $e |- ( x e. A -> B = C ) $.
    $( Equality inference for indexed union.  (Contributed by NM,
       22-Oct-2003.) $)
    iuneq2i $p |- U_ x e. A B = U_ x e. A C $=
      ( wceq ciun iuneq2 mprg ) CDFABCGABDGFABABCDHEI $.

    $( Equality inference for indexed intersection.  (Contributed by NM,
       22-Oct-2003.) $)
    iineq2i $p |- |^|_ x e. A B = |^|_ x e. A C $=
      ( wceq ciin iineq2 mprg ) CDFABCGABDGFABABCDHEI $.
  $}

  ${
    iineq2d.1 $e |- F/ x ph $.
    iineq2d.2 $e |- ( ( ph /\ x e. A ) -> B = C ) $.
    $( Equality deduction for indexed intersection.  (Contributed by NM,
       7-Dec-2011.) $)
    iineq2d $p |- ( ph -> |^|_ x e. A B = |^|_ x e. A C ) $=
      ( wceq wral ciin cv wcel ex ralrimi iineq2 syl ) ADEHZBCIBCDJBCEJHAQBCFAB
      KCLQGMNBCDEOP $.
  $}

  ${
    $d x ph $.
    iuneq2dv.1 $e |- ( ( ph /\ x e. A ) -> B = C ) $.
    $( Equality deduction for indexed union.  (Contributed by NM,
       3-Aug-2004.) $)
    iuneq2dv $p |- ( ph -> U_ x e. A B = U_ x e. A C ) $=
      ( wceq wral ciun ralrimiva iuneq2 syl ) ADEGZBCHBCDIBCEIGAMBCFJBCDEKL $.

    $( Equality deduction for indexed intersection.  (Contributed by NM,
       3-Aug-2004.) $)
    iineq2dv $p |- ( ph -> |^|_ x e. A B = |^|_ x e. A C ) $=
      ( nfv iineq2d ) ABCDEABGFH $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.  $d y C $.  $d y D $.  $d y ph $.
    iuneq12df.1 $e |- F/ x ph $.
    iuneq12df.2 $e |- F/_ x A $.
    iuneq12df.3 $e |- F/_ x B $.
    iuneq12df.4 $e |- ( ph -> A = B ) $.
    iuneq12df.5 $e |- ( ph -> C = D ) $.
    $( Equality deduction for indexed union, deduction version.  (Contributed
       by Thierry Arnoux, 31-Dec-2016.) $)
    iuneq12df $p |- ( ph -> U_ x e. A C = U_ x e. B D ) $=
      ( vy cv wcel wrex wb ciun wceq cab df-iun eleq2d rexeqbid alrimiv eqeq12i
      wal abbi bitr4i sylib ) ALMZENZBCOZUIFNZBDOZPZLUEZBCEQZBDFQZRZAUNLAUJULBC
      DGHIJAEFUIKUAUBUCUOUKLSZUMLSZRURUKUMLUFUPUSUQUTBLCETBLDFTUDUGUH $.
  $}

  ${
    $d x A $.  $d x B $.
    iuneq1d.1 $e |- ( ph -> A = B ) $.
    $( Equality theorem for indexed union, deduction version.  (Contributed by
       Drahflow, 22-Oct-2015.) $)
    iuneq1d $p |- ( ph -> U_ x e. A C = U_ x e. B C ) $=
      ( wceq ciun iuneq1 syl ) ACDGBCEHBDEHGFBCDEIJ $.

    ${
      $d x ph $.
      iuneq12d.2 $e |- ( ph -> C = D ) $.
      $( Equality deduction for indexed union, deduction version.  (Contributed
         by Drahflow, 22-Oct-2015.) $)
      iuneq12d $p |- ( ph -> U_ x e. A C = U_ x e. B D ) $=
        ( ciun iuneq1d wceq cv wcel adantr iuneq2dv eqtrd ) ABCEIBDEIBDFIABCDEG
        JABDEFAEFKBLDMHNOP $.
    $}
  $}

  ${
    $d x ph $.  $d x A $.
    iuneq2d.2 $e |- ( ph -> B = C ) $.
    $( Equality deduction for indexed union.  (Contributed by Drahflow,
       22-Oct-2015.) $)
    iuneq2d $p |- ( ph -> U_ x e. A B = U_ x e. A C ) $=
      ( wceq cv wcel adantr iuneq2dv ) ABCDEADEGBHCIFJK $.
  $}

  ${
    $d z A $.  $d z B $.  $d x z $.  $d y z $.
    nfiun.1 $e |- F/_ y A $.
    nfiun.2 $e |- F/_ y B $.
    $( Bound-variable hypothesis builder for indexed union.  (Contributed by
       Mario Carneiro, 25-Jan-2014.) $)
    nfiun $p |- F/_ y U_ x e. A B $=
      ( vz ciun cv wcel wrex cab df-iun nfcri nfrex nfab nfcxfr ) BACDHGIDJZACK
      ZGLAGCDMSBGRBACEBGDFNOPQ $.

    $( Bound-variable hypothesis builder for indexed intersection.
       (Contributed by Mario Carneiro, 25-Jan-2014.) $)
    nfiin $p |- F/_ y |^|_ x e. A B $=
      ( vz ciin cv wcel wral cab df-iin nfcri nfral nfab nfcxfr ) BACDHGIDJZACK
      ZGLAGCDMSBGRBACEBGDFNOPQ $.
  $}

  ${
    $d y A $.  $d y B $.  $d x y $.
    $( Bound-variable hypothesis builder for indexed union.  (Contributed by
       NM, 12-Oct-2003.) $)
    nfiu1 $p |- F/_ x U_ x e. A B $=
      ( vy ciun cv wcel wrex cab df-iun nfre1 nfab nfcxfr ) AABCEDFCGZABHZDIADB
      CJOADNABKLM $.

    $( Bound-variable hypothesis builder for indexed intersection.
       (Contributed by NM, 15-Oct-2003.) $)
    nfii1 $p |- F/_ x |^|_ x e. A B $=
      ( vy ciin cv wcel wral cab df-iin nfra1 nfab nfcxfr ) AABCEDFCGZABHZDIADB
      CJOADNABKLM $.
  $}

  ${
    $d y z w A $.  $d y z w B $.  $d w C z $.  $d w x y z $.
    $( Alternate definition of indexed union when ` B ` is a set.  Definition
       15(a) of [Suppes] p. 44.  (Contributed by NM, 23-Mar-2006.)  (Proof
       shortened by Andrew Salmon, 25-Jul-2011.)  (Proof shortened by Rohan
       Ridenour, 11-Aug-2023.) $)
    dfiun2g $p |- ( A. x e. A B e. C ->
                  U_ x e. A B = U. { y | E. x e. A y = B } ) $=
      ( vz wcel wral ciun cv wceq wrex cab cuni wa wex nfra1 wb rspa syl6bb syl
      clel3g rexbida rexcom4 r19.41v exbii exancom bitri eliun eluniab 3bitr4g
      eqrdv ) DEGZACHZFACDIZBJZDKZACLZBMNZUNFJZDGZACLZUTUPGZUROBPZUTUOGUTUSGUNV
      BUQVCOZACLZBPZVDUNVBVEBPZACLVGUNVAVHACUMACQUNAJCGOUMVAVHRUMACSBUTDEUBUAUC
      VEABCUDTVGURVCOZBPVDVFVIBUQVCACUEUFURVCBUGUHTAUTCDUIURBUTUJUKUL $.

    $( Obsolete proof of ~ dfiun2g as of 11-Aug-2023.  (Contributed by NM,
       23-Mar-2006.)  (Proof shortened by Andrew Salmon, 25-Jul-2011.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    dfiun2gOLD $p |- ( A. x e. A B e. C ->
                  U_ x e. A B = U. { y | E. x e. A y = B } ) $=
      ( vz wcel wral ciun cv wceq wrex cab cuni wa wex nfra1 wb rsp syl6bb syl6
      clel3g rexbida rexcom4 r19.41v exbii exancom bitri eliun eluniab 3bitr4g
      imp eqrdv ) DEGZACHZFACDIZBJZDKZACLZBMNZUOFJZDGZACLZVAUQGZUSOBPZVAUPGVAUT
      GUOVCURVDOZACLZBPZVEUOVCVFBPZACLVHUOVBVIACUNACQUOAJCGZVBVIRZUOVJUNVKUNACS
      BVADEUBUAULUCVFABCUDTVHUSVDOZBPVEVGVLBURVDACUEUFUSVDBUGUHTAVACDUIUSBVAUJU
      KUM $.

    $( Alternate definition of indexed intersection when ` B ` is a set.
       (Contributed by Jeff Hankins, 27-Aug-2009.) $)
    dfiin2g $p |- ( A. x e. A B e. C
               -> |^|_ x e. A B = |^| { y | E. x e. A y = B } ) $=
      ( vw vz wcel wral cv cab wceq wrex wi wal df-ral wb eqeq1 albii bitr4i
      ciin cint eleq2 biimprcd alrimiv eqid imbi12d mpii impbid2 imim2i pm5.74d
      spcgv alimi albi syl sylbi alcom r19.23v vex rexbidv elab imbi1i 3bitr3ri
      19.21v syl6bb syl5bb abbidv df-iin df-int 3eqtr4g ) DEHZACIZFJZDHZACIZFKG
      JZBJZDLZACMZBKZHZVMVPHZNZGOZFKACDUAVTUBVLVOWDFVOAJCHZVNNZAOZVLWDVNACPVLWG
      WEVPDLZWBNZGOZNZAOZWDVLWEVKNZAOZWGWLQZVKACPWNWFWKQZAOWOWMWPAWMWEVNWJVKVNW
      JQWEVKVNWJVNWIGWHWBVNVPDVMUCZUDUEVKWJDDLZVNDUFWIWRVNNGDEWHWHWRWBVNVPDDRWQ
      UGULUHUIUJUKUMWFWKAUNUOUPWIACIZGOZWEWINZGOZAOZWDWLWTXAAOZGOXCWSXDGWIACPSX
      AAGUQTWSWCGWSWHACMZWBNWCWHWBACURWAXEWBVSXEBVPGUSVQVPLVRWHACVQVPDRUTVAVBTS
      XBWKAWEWIGVDSVCVEVFVGAFCDVHFGVTVIVJ $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.
    dfiun2.1 $e |- B e. _V $.
    $( Alternate definition of indexed union when ` B ` is a set.  Definition
       15(a) of [Suppes] p. 44.  (Contributed by NM, 27-Jun-1998.)  (Revised by
       David Abernethy, 19-Jun-2012.) $)
    dfiun2 $p |- U_ x e. A B = U. { y | E. x e. A y = B } $=
      ( cvv wcel ciun cv wceq wrex cab cuni dfiun2g a1i mprg ) DFGZACDHBIDJACKB
      LMJACABCDFNQAICGEOP $.

    $( Alternate definition of indexed intersection when ` B ` is a set.
       Definition 15(b) of [Suppes] p. 44.  (Contributed by NM, 28-Jun-1998.)
       (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
    dfiin2 $p |- |^|_ x e. A B = |^| { y | E. x e. A y = B } $=
      ( cvv wcel ciin cv wceq wrex cab cint dfiin2g a1i mprg ) DFGZACDHBIDJACKB
      LMJACABCDFNQAICGEOP $.
  $}

  ${
    $d x z $.  $d y z w $.  $d z A $.  $d z w B $.  $d z w C $.
    $( Define double indexed union.  (Contributed by FL, 6-Nov-2013.) $)
    dfiunv2 $p |- U_ x e. A U_ y e. B C =
      { z | E. x e. A E. y e. B z e. C } $=
      ( vw ciun cv wcel wrex cab wceq df-iun a1i iuneq2i vex weq eleq1w rexbidv
      elab rexbii abbii 3eqtri ) ADBEFHZHADGIFJZBEKZGLZHCIZUHJZADKZCLUIFJZBEKZA
      DKZCLADUEUHUEUHMAIDJBGEFNOPACDUHNUKUNCUJUMADUGUMGUICQGCRUFULBEGCFSTUAUBUC
      UD $.
  $}

  ${
    $d z y A $.  $d z x A $.  $d z B $.  $d z C $.
    cbviun.1 $e |- F/_ y B $.
    cbviun.2 $e |- F/_ x C $.
    cbviun.3 $e |- ( x = y -> B = C ) $.
    $( Rule used to change the bound variables in an indexed union, with the
       substitution specified implicitly by the hypothesis.  (Contributed by
       NM, 26-Mar-2006.)  (Revised by Andrew Salmon, 25-Jul-2011.) $)
    cbviun $p |- U_ x e. A B = U_ y e. A C $=
      ( vz cv wcel wrex cab ciun nfcri weq eleq2d cbvrex abbii df-iun 3eqtr4i )
      IJZDKZACLZIMUBEKZBCLZIMACDNBCENUDUFIUCUEABCBIDFOAIEGOABPDEUBHQRSAICDTBICE
      TUA $.

    $( Change bound variables in an indexed intersection.  (Contributed by Jeff
       Hankins, 26-Aug-2009.)  (Revised by Mario Carneiro, 14-Oct-2016.) $)
    cbviin $p |- |^|_ x e. A B = |^|_ y e. A C $=
      ( vz cv wcel wral cab ciin nfcri weq eleq2d cbvral abbii df-iin 3eqtr4i )
      IJZDKZACLZIMUBEKZBCLZIMACDNBCENUDUFIUCUEABCBIDFOAIEGOABPDEUBHQRSAICDTBICE
      TUA $.
  $}

  ${
    $d x A $.  $d y A $.  $d y B $.  $d x C $.
    cbviunv.1 $e |- ( x = y -> B = C ) $.
    $( Rule used to change the bound variables in an indexed union, with the
       substitution specified implicitly by the hypothesis.  (Contributed by
       NM, 15-Sep-2003.) $)
    cbviunv $p |- U_ x e. A B = U_ y e. A C $=
      ( nfcv cbviun ) ABCDEBDGAEGFH $.

    $( Change bound variables in an indexed intersection.  (Contributed by Jeff
       Hankins, 26-Aug-2009.) $)
    cbviinv $p |- |^|_ x e. A B = |^|_ y e. A C $=
      ( nfcv cbviin ) ABCDEBDGAEGFH $.
  $}

  ${
    $d x y C $.  $d y A $.  $d y B $.
    $( Subset theorem for an indexed union.  (Contributed by NM, 13-Sep-2003.)
       (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
    iunss $p |- ( U_ x e. A B C_ C <-> A. x e. A B C_ C ) $=
      ( vy ciun wss cv wcel wrex cab wal wral df-iun sseq1i abss ralbii ralcom4
      wi dfss2 r19.23v albii 3bitrri 3bitri ) ABCFZDGEHZCIZABJZEKZDGUHUFDIZSZEL
      ZCDGZABMZUEUIDAEBCNOUHEDPUNUGUJSZELZABMUOABMZELULUMUPABECDTQUOAEBRUQUKEUG
      UJABUAUBUCUD $.
  $}

  ${
    $d x y C $.  $d y A $.  $d y B $.
    $( Subset implication for an indexed union.  (Contributed by NM,
       3-Sep-2003.)  (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
    ssiun $p |- ( E. x e. A C C_ B -> C C_ U_ x e. A B ) $=
      ( vy wss wrex ciun cv wcel wi ssel reximi r19.37v syl eliun syl6ibr ssrdv
      ) DCFZABGZEDABCHZTEIZDJZUBCJZABGZUBUAJTUCUDKZABGUCUEKSUFABDCUBLMUCUDABNOA
      UBBCPQR $.
  $}

  ${
    $d y A $.  $d y B $.  $d x y $.
    $( Identity law for subset of an indexed union.  (Contributed by NM,
       12-Oct-2003.)  (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
    ssiun2 $p |- ( x e. A -> B C_ U_ x e. A B ) $=
      ( vy cv wcel ciun wrex rspe ex eliun syl6ibr ssrdv ) AEBFZDCABCGZNDEZCFZQ
      ABHZPOFNQRQABIJAPBCKLM $.
  $}

  ${
    $d x A $.  $d x C $.  $d x D $.
    ssiun2s.1 $e |- ( x = C -> B = D ) $.
    $( Subset relationship for an indexed union.  (Contributed by NM,
       26-Oct-2003.) $)
    ssiun2s $p |- ( C e. A -> D C_ U_ x e. A B ) $=
      ( ciun wss nfcv nfiu1 nfss cv wceq sseq1d ssiun2 vtoclgaf ) CABCGZHEQHADB
      ADIAEQAEIABCJKALDMCEQFNABCOP $.
  $}

  ${
    $d x y $.  $d x B $.  $d y C $.  $d x D $.
    $( A subclass condition on the members of two indexed classes ` C ( x ) `
       and ` D ( y ) ` that implies a subclass relation on their indexed
       unions.  Generalization of Proposition 8.6 of [TakeutiZaring] p. 59.
       Compare ~ uniss2 .  (Contributed by NM, 9-Dec-2004.) $)
    iunss2 $p |- ( A. x e. A E. y e. B C C_ D ->
                 U_ x e. A C C_ U_ y e. B D ) $=
      ( wss wrex wral ciun ssiun ralimi iunss sylibr ) EFGBDHZACIEBDFJZGZACIACE
      JPGOQACBDFEKLACEPMN $.
  $}

  ${
    $d y A $.  $d x y $.  $d x B $.
    $( The indexed union of a class abstraction.  (Contributed by NM,
       27-Dec-2004.) $)
    iunab $p |- U_ x e. A { y | ph } = { y | E. x e. A ph } $=
      ( cab ciun wrex wceq cv wcel wb nfcv nfab1 nfiun cleqf abid eliun 3bitr4i
      rexbii mpgbir ) BDACEZFZABDGZCEZHCIZUBJZUEUDJZKCCUBUDBCDUACDLACMNUCCMOUEU
      AJZBDGUCUFUGUHABDACPSBUEDUAQUCCPRT $.

    $( The indexed union of a restricted class abstraction.  (Contributed by
       NM, 3-Jan-2004.)  (Proof shortened by Mario Carneiro, 14-Nov-2016.) $)
    iunrab $p |- U_ x e. A { y e. B | ph } = { y e. B | E. x e. A ph } $=
      ( cv wcel cab ciun wrex crab iunab wceq df-rab a1i iuneq2i r19.42v eqtr4i
      wa abbii 3eqtr4i ) BDCFEGZASZCHZIUCBDJZCHZBDACEKZIABDJZCEKZUCBCDLBDUGUDUG
      UDMBFDGACENOPUIUBUHSZCHUFUHCENUEUJCUBABDQTRUA $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d y C $.  $d x D $.
    iunxdif2.1 $e |- ( x = y -> C = D ) $.
    $( Indexed union with a class difference as its index.  (Contributed by NM,
       10-Dec-2004.) $)
    iunxdif2 $p |- ( A. x e. A E. y e. ( A \ B ) C C_ D ->
                 U_ y e. ( A \ B ) D = U_ x e. A C ) $=
      ( wss cdif wrex wral ciun wceq iunss2 difss iunss1 ax-mp cbviunv sseqtr4i
      wa jctil eqss sylibr ) EFHBCDIZJACKZBUDFLZACELZHZUGUFHZTUFUGMUEUIUHABCUDE
      FNUFBCFLZUGUDCHUFUJHCDOBUDCFPQABCEFGRSUAUFUGUBUC $.
  $}

  ${
    $d y A $.  $d y B $.  $d y C $.  $d x y $.
    ssiinf.1 $e |- F/_ x C $.
    $( Subset theorem for an indexed intersection.  (Contributed by FL,
       15-Oct-2012.)  (Proof shortened by Mario Carneiro, 14-Oct-2016.) $)
    ssiinf $p |- ( C C_ |^|_ x e. A B <-> A. x e. A C C_ B ) $=
      ( vy cv ciin wcel wral wss cvv eliin elv ralbii nfcv ralcomf bitri dfss3
      wb 3bitr4i ) FGZABCHZIZFDJZUBCIZFDJZABJZDUCKDCKZABJUEUFABJZFDJUHUDUJFDUDU
      JTFAUBBCLMNOUFFADBEFBPQRFDUCSUIUGABFDCSOUA $.
  $}

  ${
    $d x C $.
    $( Subset theorem for an indexed intersection.  (Contributed by NM,
       15-Oct-2003.) $)
    ssiin $p |- ( C C_ |^|_ x e. A B <-> A. x e. A C C_ B ) $=
      ( nfcv ssiinf ) ABCDADEF $.
  $}

  ${
    $d x y C $.  $d y A $.  $d y B $.
    $( Subset implication for an indexed intersection.  (Contributed by NM,
       15-Oct-2003.)  (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
    iinss $p |- ( E. x e. A B C_ C -> |^|_ x e. A B C_ C ) $=
      ( vy wss wrex ciin cv wcel wral wb cvv eliin elv ssel reximi r19.36v syl
      wi syl5bi ssrdv ) CDFZABGZEABCHZDEIZUEJZUFCJZABKZUDUFDJZUGUILEAUFBCMNOUDU
      HUJTZABGUIUJTUCUKABCDUFPQUHUJABRSUAUB $.
  $}

  ${
    $d A y $.  $d B y $.  $d x y $.
    $( An indexed intersection is included in any of its members.  (Contributed
       by FL, 15-Oct-2012.) $)
    iinss2 $p |- ( x e. A -> |^|_ x e. A B C_ B ) $=
      ( vy cv wcel ciin wral wb cvv eliin elv rsp com12 syl5bi ssrdv ) AEBFZDAB
      CGZCDEZRFZSCFZABHZQUATUBIDASBCJKLUBQUAUAABMNOP $.
  $}

  ${
    $d x y A $.
    $( Class union in terms of indexed union.  Definition in [Stoll] p. 43.
       (Contributed by NM, 28-Jun-1998.) $)
    uniiun $p |- U. A = U_ x e. A x $=
      ( vy cuni wel wrex cab cv ciun dfuni2 df-iun eqtr4i ) BDCAEABFCGABAHZICAB
      JACBMKL $.

    $( Class intersection in terms of indexed intersection.  Definition in
       [Stoll] p. 44.  (Contributed by NM, 28-Jun-1998.) $)
    intiin $p |- |^| A = |^|_ x e. A x $=
      ( vy cint wel wral cab cv ciin dfint2 df-iin eqtr4i ) BDCAEABFCGABAHZICAB
      JACBMKL $.

    $( An indexed union of singletons recovers the index set.  (Contributed by
       NM, 6-Sep-2005.) $)
    iunid $p |- U_ x e. A { x } = A $=
      ( vy cv csn ciun wceq cab wcel df-sn equcom abbii eqtri a1i iuneq2i iunab
      wrex risset abid2 3eqtr2i ) ABADZEZFABUACDZGZCHZFZBABUBUEUBUEGUABIUBUCUAG
      ZCHUECUAJUGUDCCAKLMNOUFUDABQZCHUCBIZCHBUDACBPUIUHCAUCBRLCBSTM $.
  $}

  ${
    $d x y $.  $d y A $.
    $( An indexed union of the empty set is empty.  (Contributed by NM,
       26-Mar-2003.)  (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
    iun0 $p |- U_ x e. A (/) = (/) $=
      ( vy c0 ciun cv wcel wrex wn noel a1i nrex eliun mtbir nel0 ) CABDEZCFZPG
      QDGZABHRABRIAFBGQJKLAQBDMNO $.

    $( An empty indexed union is empty.  (Contributed by NM, 4-Dec-2004.)
       (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
    0iun $p |- U_ x e. (/) A = (/) $=
      ( vy c0 ciun cv wcel wrex rex0 eliun mtbir nel0 ) CADBEZCFZMGNBGZADHOAIAN
      DBJKL $.

    $( An empty indexed intersection is the universal class.  (Contributed by
       NM, 20-Oct-2005.) $)
    0iin $p |- |^|_ x e. (/) A = _V $=
      ( vy c0 ciin cv wcel wral cab cvv df-iin vex ral0 2th abbi2i eqtr4i ) ADB
      ECFZBGZADHZCIJACDBKSCJQJGSCLRAMNOP $.

    $( Indexed intersection with a universal index class.  When ` A ` doesn't
       depend on ` x ` , this evaluates to ` A ` by ~ 19.3 and ~ abid2 .  When
       ` A = x ` , this evaluates to ` (/) ` by ~ intiin and ~ intv .
       (Contributed by NM, 11-Sep-2008.) $)
    viin $p |- |^|_ x e. _V A = { y | A. x y e. A } $=
      ( cvv ciin cv wcel wral cab wal df-iin ralv abbii eqtri ) ADCEBFCGZADHZBI
      OAJZBIABDCKPQBOALMN $.
  $}

  ${
    $d x y A $.  $d y B $.
    $( There is a nonempty class in an indexed collection ` B ( x ) ` iff the
       indexed union of them is nonempty.  (Contributed by NM, 15-Oct-2003.)
       (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
    iunn0 $p |- ( E. x e. A B =/= (/) <-> U_ x e. A B =/= (/) ) $=
      ( vy cv wcel wex wrex c0 wne rexcom4 eliun exbii bitr4i n0 rexbii 3bitr4i
      ciun ) DEZCFZDGZABHZSABCRZFZDGZCIJZABHUCIJUBTABHZDGUETADBKUDUGDASBCLMNUFU
      AABDCOPDUCOQ $.
  $}

  ${
    $d y A $.  $d x y $.
    $( Indexed intersection of a class builder.  (Contributed by NM,
       6-Dec-2011.) $)
    iinab $p |- |^|_ x e. A { y | ph } = { y | A. x e. A ph } $=
      ( cab ciin wral wceq cv wcel nfcv nfab1 nfiin cleqf abid ralbii cvv eliin
      wb elv 3bitr4i mpgbir ) BDACEZFZABDGZCEZHCIZUDJZUGUFJZSCCUDUFBCDUCCDKACLM
      UECLNUGUCJZBDGZUEUHUIUJABDACOPUHUKSCBUGDUCQRTUECOUAUB $.

    $d x A $.  $d x B $.
    $( Indexed intersection of a restricted class builder.  (Contributed by NM,
       6-Dec-2011.) $)
    iinrab $p |- ( A =/= (/)
          -> |^|_ x e. A { y e. B | ph } = { y e. B | A. x e. A ph } ) $=
      ( c0 wne cv wcel wa wral cab crab ciin r19.28zv abbidv df-rab a1i iineq2i
      wceq iinab eqtri 3eqtr4g ) DFGZCHEIZAJZBDKZCLZUEABDKZJZCLBDACEMZNZUICEMUD
      UGUJCUEABDOPULBDUFCLZNUHBDUKUMUKUMTBHDIACEQRSUFBCDUAUBUICEQUC $.

    $d y B $.
    $( Indexed intersection of a restricted class builder.  (Contributed by NM,
       6-Dec-2011.) $)
    iinrab2 $p |- ( |^|_ x e. A { y e. B | ph } i^i B )
                      = { y e. B | A. x e. A ph } $=
      ( crab ciin cin wral wceq c0 cvv iineq1 0iin syl6eq incom inv1 eqtri rzal
      ineq1d rabid2 ralcom bitr2i sylib wne iinrab wss ssrab2 dfss mpbi syl6eqr
      eqtrd pm2.61ine ) BDACEFZGZEHZABDIZCEFZJDKDKJZUPEURUSUPLEHZEUSUOLEUSUOBKU
      NGLBDKUNMBUNNOTUTELHELEPEQROUSACEIZBDIZEURJZVABDSVCUQCEIVBUQCEUAACBEDUBUC
      UDULDKUEZUPUREHZURVDUOUREABCDEUFTUREUGURVEJUQCEUHUREUIUJUKUM $.
  $}

  ${
    $d y A $.  $d x y B $.  $d y C $.
    $( Indexed union of intersection.  Generalization of half of theorem
       "Distributive laws" in [Enderton] p. 30.  Use ~ uniiun to recover
       Enderton's theorem.  (Contributed by NM, 26-Mar-2004.) $)
    iunin2 $p |- U_ x e. A ( B i^i C ) = ( B i^i U_ x e. A C ) $=
      ( vy cin ciun cv wcel wrex r19.42v elin rexbii eliun anbi2i 3bitr4i eqriv
      wa ) EABCDFZGZCABDGZFZEHZSIZABJZUCCIZUCUAIZRZUCTIUCUBIUFUCDIZRZABJUFUIABJ
      ZRUEUHUFUIABKUDUJABUCCDLMUGUKUFAUCBDNOPAUCBSNUCCUALPQ $.

    $( Indexed union of intersection.  Generalization of half of theorem
       "Distributive laws" in [Enderton] p. 30.  Use ~ uniiun to recover
       Enderton's theorem.  (Contributed by Mario Carneiro, 30-Aug-2015.) $)
    iunin1 $p |- U_ x e. A ( C i^i B ) = ( U_ x e. A C i^i B ) $=
      ( cin ciun iunin2 wceq cv wcel incom a1i iuneq2i 3eqtr4i ) ABCDEZFCABDFZE
      ABDCEZFPCEABCDGABQOQOHAIBJDCKLMPCKN $.

    $( Indexed intersection of union.  Generalization of half of theorem
       "Distributive laws" in [Enderton] p. 30.  Use ~ intiin to recover
       Enderton's theorem.  (Contributed by NM, 19-Aug-2004.) $)
    iinun2 $p |- |^|_ x e. A ( B u. C ) = ( B u. |^|_ x e. A C ) $=
      ( vy cun ciin cv wcel wral wo r19.32v elun ralbii wb cvv eliin elv orbi2i
      3bitr4i eqriv ) EABCDFZGZCABDGZFZEHZUBIZABJZUFCIZUFUDIZKZUFUCIZUFUEIUIUFD
      IZKZABJUIUMABJZKUHUKUIUMABLUGUNABUFCDMNUJUOUIUJUOOEAUFBDPQRSTULUHOEAUFBUB
      PQRUFCUDMTUA $.

    $( Indexed union of class difference.  Generalization of half of theorem
       "De Morgan's laws" in [Enderton] p. 31.  Use ~ intiin to recover
       Enderton's theorem.  (Contributed by NM, 19-Aug-2004.) $)
    iundif2 $p |- U_ x e. A ( B \ C ) = ( B \ |^|_ x e. A C ) $=
      ( vy cdif ciun ciin cv wcel wrex wn wa eldif rexbii r19.42v rexnal wb cvv
      wral eliin elv xchbinxr anbi2i 3bitri eliun 3bitr4i eqriv ) EABCDFZGZCABD
      HZFZEIZUIJZABKZUMCJZUMUKJZLZMZUMUJJUMULJUOUPUMDJZLZMZABKUPVAABKZMUSUNVBAB
      UMCDNOUPVAABPVCURUPVCUTABTZUQUTABQUQVDREAUMBDSUAUBUCUDUEAUMBUIUFUMCUKNUGU
      H $.
  $}

  ${
    $d x B $.  $d y C $.  $d x D $.  $d x y $.
    $( Rearrange indexed unions over intersection.  (Contributed by NM,
       18-Dec-2008.) $)
    2iunin $p |- U_ x e. A U_ y e. B ( C i^i D )
        = ( U_ x e. A C i^i U_ y e. B D ) $=
      ( cin ciun wceq cv wcel iunin2 a1i iuneq2i iunin1 eqtri ) ACBDEFGHZHACEBD
      FHZGZHACEHRGACQSQSIAJCKBDEFLMNACREOP $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d y C $.
    $( Indexed intersection of class difference.  Generalization of half of
       theorem "De Morgan's laws" in [Enderton] p. 31.  Use ~ uniiun to recover
       Enderton's theorem.  (Contributed by NM, 5-Oct-2006.) $)
    iindif2 $p |- ( A =/= (/) ->
                 |^|_ x e. A ( B \ C ) = ( B \ U_ x e. A C ) ) $=
      ( vy c0 wne cdif ciin ciun cv wcel wral wn wa r19.28zv bicomi ralbii wrex
      eldif ralnex eliun xchbinxr anbi2i 3bitr3g wb cvv eliin elv 3bitr4g eqrdv
      ) BFGZEABCDHZIZCABDJZHZULEKZUMLZABMZUQCLZUQUOLZNZOZUQUNLZUQUPLULUTUQDLZNZ
      OZABMUTVFABMZOUSVCUTVFABPVGURABURVGUQCDTQRVHVBUTVHVEABSVAVEABUAAUQBDUBUCU
      DUEVDUSUFEAUQBUMUGUHUIUQCUOTUJUK $.

    $( Indexed intersection of intersection.  Generalization of half of theorem
       "Distributive laws" in [Enderton] p. 30.  Use ~ intiin to recover
       Enderton's theorem.  (Contributed by Mario Carneiro, 19-Mar-2015.) $)
    iinin2 $p |- ( A =/= (/) ->
      |^|_ x e. A ( B i^i C ) = ( B i^i |^|_ x e. A C ) ) $=
      ( vy c0 wne cin ciin cv wcel wral wa r19.28zv elin cvv eliin elv 3bitr4g
      wb ralbii anbi2i eqrdv ) BFGZEABCDHZIZCABDIZHZUDEJZUEKZABLZUICKZUIUGKZMZU
      IUFKZUIUHKUDULUIDKZMZABLULUPABLZMUKUNULUPABNUJUQABUICDOUAUMURULUMURTEAUIB
      DPQRUBSUOUKTEAUIBUEPQRUICUGOSUC $.

    $( Indexed intersection of intersection.  Generalization of half of theorem
       "Distributive laws" in [Enderton] p. 30.  Use ~ intiin to recover
       Enderton's theorem.  (Contributed by Mario Carneiro, 19-Mar-2015.) $)
    iinin1 $p |- ( A =/= (/) ->
      |^|_ x e. A ( C i^i B ) = ( |^|_ x e. A C i^i B ) ) $=
      ( c0 wne cin ciin iinin2 wceq cv wcel incom a1i iineq2i 3eqtr4g ) BEFABCD
      GZHCABDHZGABDCGZHRCGABCDIABSQSQJAKBLDCMNORCMP $.
  $}

  ${
    $d x A $.
    $( The indexed intersection of a complement.  (Contributed by G&eacute;rard
       Lang, 5-Aug-2018.) $)
    iinvdif $p |- |^|_ x e. A ( _V \ B ) = ( _V \ U_ x e. A B ) $=
      ( cvv cdif ciin ciun wceq c0 dif0 0iun difeq2i 0iin iineq1 iuneq1 difeq2d
      3eqtr4ri 3eqtr4a iindif2 pm2.61ine ) ABDCEZFZDABCGZEZHBIBIHZAIUAFZDAICGZE
      ZUBUDDIEDUHUFDJUGIDACKLAUAMQABIUANUEUCUGDABICOPRABDCST $.
  $}

  ${
    $d A x y $.  $d X x y $.  $d B x $.
    $( Elementhood in a relative intersection.  (Contributed by Mario Carneiro,
       30-Dec-2016.) $)
    elriin $p |- ( B e. ( A i^i |^|_ x e. X S ) <->
      ( B e. A /\ A. x e. X B e. S ) ) $=
      ( ciin cin wcel wa wral elin eliin pm5.32i bitri ) CBAEDFZGHCBHZCOHZIPCDH
      AEJZICBOKPQRACEDBLMN $.

    $( Relative intersection of an empty family.  (Contributed by Stefan
       O'Rear, 3-Apr-2015.) $)
    riin0 $p |- ( X = (/) -> ( A i^i |^|_ x e. X S ) = A ) $=
      ( c0 wceq ciin cin iineq1 ineq2d cvv 0iin ineq2i inv1 eqtri syl6eq ) DEFZ
      BADCGZHBAECGZHZBQRSBADECIJTBKHBSKBACLMBNOP $.

    $( Relative intersection of a nonempty family.  (Contributed by Stefan
       O'Rear, 3-Apr-2015.) $)
    riinn0 $p |- ( ( A. x e. X S C_ A /\ X =/= (/) ) ->
        ( A i^i |^|_ x e. X S ) = |^|_ x e. X S ) $=
      ( wss wral c0 wne wa ciin incom wceq wrex r19.2z ancoms iinss df-ss sylib
      cin syl syl5eq ) CBEZADFZDGHZIZBADCJZSUFBSZUFBUFKUEUFBEZUGUFLUEUBADMZUHUD
      UCUIUBADNOADCBPTUFBQRUA $.

    $( Relative intersection of a relative abstraction.  (Contributed by Stefan
       O'Rear, 3-Apr-2015.) $)
    riinrab $p |- ( A i^i |^|_ x e. X { y e. A | ph } ) =
        { y e. A | A. x e. X ph } $=
      ( crab ciin cin wral wceq c0 riin0 rzal ralrimivw rabid2 sylibr eqtrd wne
      wss ssrab2 rgenw riinn0 mpan iinrab pm2.61ine ) DBEACDFZGZHZABEIZCDFZJEKE
      KJZUHDUJBDUFELUKUICDIDUJJUKUICDABEMNUICDOPQEKRZUHUGUJUFDSZBEIULUHUGJUMBEA
      CDTUABDUFEUBUCABCEDUDQUE $.
  $}

  $( Symmetric difference with the empty class.  The empty class is the
     identity element for symmetric difference.  (Contributed by Scott Fenton,
     24-Apr-2012.) $)
  symdif0 $p |- ( A /_\ (/) ) = A $=
    ( c0 csymdif cdif cun df-symdif dif0 0dif uneq12i un0 3eqtri ) ABCABDZBADZE
    ABEAABFLAMBAGAHIAJK $.

  $( The symmetric difference with the universal class is the complement.
     (Contributed by Scott Fenton, 24-Apr-2012.) $)
  symdifv $p |- ( A /_\ _V ) = ( _V \ A ) $=
    ( cvv csymdif cdif cun df-symdif c0 wss wceq ssdif0 mpbi uneq1i uncom eqtri
    ssv un0 ) ABCABDZBADZEZRABFSGREZRQGRABHQGIAOABJKLTRGERGRMRPNNN $.

  $( The symmetric difference of a class with itself is the empty class.
     (Contributed by Scott Fenton, 25-Apr-2012.) $)
  symdifid $p |- ( A /_\ A ) = (/) $=
    ( csymdif cdif cun c0 df-symdif difid uneq12i un0 3eqtri ) AABAACZKDEEDEAAF
    KEKEAGZLHEIJ $.

  ${
    $d x y A $.  $d y B $.  $d x y C $.  $d y V $.
    iinxsng.1 $e |- ( x = A -> B = C ) $.
    $( A singleton index picks out an instance of an indexed intersection's
       argument.  (Contributed by NM, 15-Jan-2012.)  (Proof shortened by Mario
       Carneiro, 17-Nov-2016.) $)
    iinxsng $p |- ( A e. V -> |^|_ x e. { A } B = C ) $=
      ( vy wcel csn ciin cv wral cab df-iin wceq eleq2d ralsng abbi1dv syl5eq )
      BEHZABIZCJGKZCHZAUALZGMDAGUACNTUDGDUCUBDHABEAKBOCDUBFPQRS $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d y C $.  $d x y D $.  $d x y E $.  $d y V $.
    $d y W $.
    iinxprg.1 $e |- ( x = A -> C = D ) $.
    iinxprg.2 $e |- ( x = B -> C = E ) $.
    $( Indexed intersection with an unordered pair index.  (Contributed by NM,
       25-Jan-2012.) $)
    iinxprg $p |- ( ( A e. V /\ B e. W )
        -> |^|_ x e. { A , B } C = ( D i^i E ) ) $=
      ( vy wcel wa cv cpr wral cab ciin wceq eleq2d ralprg abbidv df-in 3eqtr4g
      cin df-iin ) BGLCHLMZKNZDLZABCOZPZKQUHELZUHFLZMZKQAUJDREFUEUGUKUNKUIULUMA
      BCGHANZBSDEUHITUOCSDFUHJTUAUBAKUJDUFKEFUCUD $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x y C $.  $d y V $.
    iunxsng.1 $e |- ( x = A -> B = C ) $.
    $( A singleton index picks out an instance of an indexed union's argument.
       (Contributed by Mario Carneiro, 25-Jun-2016.) $)
    iunxsng $p |- ( A e. V -> U_ x e. { A } B = C ) $=
      ( vy wcel csn ciun cv wrex eliun wceq eleq2d rexsng syl5bb eqrdv ) BEHZGA
      BIZCJZDGKZUAHUBCHZATLSUBDHZAUBTCMUCUDABEAKBNCDUBFOPQR $.
  $}

  ${
    $d x A $.  $d x C $.
    iunxsn.1 $e |- A e. _V $.
    iunxsn.2 $e |- ( x = A -> B = C ) $.
    $( A singleton index picks out an instance of an indexed union's argument.
       (Contributed by NM, 26-Mar-2004.)  (Proof shortened by Mario Carneiro,
       25-Jun-2016.) $)
    iunxsn $p |- U_ x e. { A } B = C $=
      ( cvv wcel csn ciun wceq iunxsng ax-mp ) BGHABICJDKEABCDGFLM $.
  $}

  ${
    $d A x y $.  $d B y $.  $d C y $.  $d V y $.
    iunxsngf.1 $e |- F/_ x C $.
    iunxsngf.2 $e |- ( x = A -> B = C ) $.
    $( A singleton index picks out an instance of an indexed union's argument.
       (Contributed by Mario Carneiro, 25-Jun-2016.)  (Revised by Thierry
       Arnoux, 2-May-2020.)  Avoid ~ ax-13 .  (Revised by Gino Giotto,
       19-May-2023.) $)
    iunxsngf $p |- ( A e. V -> U_ x e. { A } B = C ) $=
      ( vy wcel csn ciun cv wrex eliun nfcriv wceq eleq2d rexsngf syl5bb eqrdv
      ) BEIZHABJZCKZDHLZUCIUDCIZAUBMUAUDDIZAUDUBCNUEUFABEAHDFOALBPCDUDGQRST $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.  $d y C $.
    $( Separate a union in an indexed union.  (Contributed by NM, 27-Dec-2004.)
       (Proof shortened by Mario Carneiro, 17-Nov-2016.) $)
    iunun $p |- U_ x e. A ( B u. C ) = ( U_ x e. A B u. U_ x e. A C ) $=
      ( vy cun ciun cv wcel wrex r19.43 elun rexbii eliun orbi12i 3bitr4i eqriv
      wo ) EABCDFZGZABCGZABDGZFZEHZSIZABJZUDUAIZUDUBIZRZUDTIUDUCIUDCIZUDDIZRZAB
      JUJABJZUKABJZRUFUIUJUKABKUEULABUDCDLMUGUMUHUNAUDBCNAUDBDNOPAUDBSNUDUAUBLP
      Q $.

    $( Separate a union in the index of an indexed union.  (Contributed by NM,
       26-Mar-2004.)  (Proof shortened by Mario Carneiro, 17-Nov-2016.) $)
    iunxun $p |- U_ x e. ( A u. B ) C = ( U_ x e. A C u. U_ x e. B C ) $=
      ( vy cun ciun cv wcel wrex rexun eliun orbi12i bitr4i elun 3bitr4i eqriv
      wo ) EABCFZDGZABDGZACDGZFZEHZDIZASJZUDUAIZUDUBIZRZUDTIUDUCIUFUEABJZUEACJZ
      RUIUEABCKUGUJUHUKAUDBDLAUDCDLMNAUDSDLUDUAUBOPQ $.
  $}

  ${
    $d A x y $.  $d B y $.  $d E y $.
    iunxdif3.1 $e |- F/_ x E $.
    $( An indexed union where some terms are the empty set.  See ~ iunxdif2 .
       (Contributed by Thierry Arnoux, 4-May-2020.) $)
    iunxdif3 $p |- ( A. x e. E B = (/) -> U_ x e. ( A \ E ) B = U_ x e. A B )
      $=
      ( vy c0 wceq wral cin ciun cdif cun wss inss2 wcel wrex eliun ax-mp a1i
      nfcv nfin ssrexf 3imtr4g ssrdv iuneq2 iun0 syl6eq syl5sseq ss0 syl uneq1d
      cv iunxun inundif nfth nfdif id eqidd iuneq12df eqtr3i uncom un0 3eqtr3rd
      nfun eqtri ) CGHADIZABDJZCKZABDLZCKZMZGVKMZABCKZVKVGVIGVKVGVIGNVIGHVGADCK
      ZVIGVHDNZVIVONBDOVPFVIVOVPFUMZCPZAVHQVRADQVQVIPVQVOPVRAVHDABDABUAZEUBZEUC
      AVQVHCRAVQDCRUDUESVGVOADGKGADCGUFADUGUHUIVIUJUKULVLVNHVGAVHVJMZCKZVLVNAVH
      VJCUNWABHZWBVNHBDUOZWCAWABCCWCAWDUPAVHVJVTABDVSEUQVEVSWCURWCCUSUTSVATVMVK
      HVGVMVKGMVKGVKVBVKVCVFTVD $.
  $}

  ${
    $d x A $.  $d x B $.  $d x D $.  $d x E $.
    iunxprg.1 $e |- ( x = A -> C = D ) $.
    iunxprg.2 $e |- ( x = B -> C = E ) $.
    $( A pair index picks out two instances of an indexed union's argument.
       (Contributed by Alexander van der Vekens, 2-Feb-2018.) $)
    iunxprg $p |- ( ( A e. V /\ B e. W )
                    -> U_ x e. { A , B } C = ( D u. E ) ) $=
      ( wcel wa cpr ciun csn cun wceq df-pr iuneq1 iunxsng iunxun adantr adantl
      ax-mp eqtri uneq12d syl5eq ) BGKZCHKZLZABCMZDNZABOZDNZACOZDNZPZEFPULAUMUO
      PZDNZUQUKURQULUSQBCRAUKURDSUDAUMUODUAUEUJUNEUPFUHUNEQUIABDEGITUBUIUPFQUHA
      CDFHJTUCUFUG $.
  $}

  ${
    $d x y z $.  $d x z A $.  $d z B $.  $d y z C $.
    $( Separate an indexed union in the index of an indexed union.
       (Contributed by Mario Carneiro, 5-Dec-2016.) $)
    iunxiun $p |- U_ x e. U_ y e. A B C = U_ y e. A U_ x e. B C $=
      ( vz ciun cv wcel wa wex eliun anbi1i r19.41v bitr4i exbii rexcom4 df-rex
      wrex 3bitr4i bitri rexbii eqriv ) FABCDGZEGZBCADEGZGZFHZEIZAUDSZUHUFIZBCS
      ZUHUEIUHUGIAHZUDIZUIJZAKZUMDIZUIJZAKZBCSZUJULUPURBCSZAKUTUOVAAUOUQBCSZUIJ
      VAUNVBUIBUMCDLMUQUIBCNOPURBACQOUIAUDRUKUSBCUKUIADSUSAUHDELUIADRUAUBTAUHUD
      ELBUHCUFLTUC $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( A relationship involving union and indexed intersection.  Exercise 23 of
       [Enderton] p. 33.  (Contributed by NM, 25-Nov-2003.)  (Proof shortened
       by Mario Carneiro, 17-Nov-2016.) $)
    iinuni $p |- ( A u. |^| B ) = |^|_ x e. B ( A u. x ) $=
      ( vy cv wcel cint cab cun wral ciin r19.32v elun ralbii vex elint2 orbi2i
      wo 3bitr4ri abbii df-un df-iin 3eqtr4i ) DEZBFZUDCGZFZRZDHUDBAEZIZFZACJZD
      HBUFIACUJKUHULDUEUDUIFZRZACJUEUMACJZRULUHUEUMACLUKUNACUDBUIMNUGUOUEAUDCDO
      PQSTDBUFUAADCUJUBUC $.

    $( A relationship involving union and indexed union.  Exercise 25 of
       [Enderton] p. 33.  (Contributed by NM, 25-Nov-2003.)  (Proof shortened
       by Mario Carneiro, 17-Nov-2016.) $)
    iununi $p |- ( ( B = (/) -> A = (/) ) <->
                ( A u. U. B ) = U_ x e. B ( A u. x ) ) $=
      ( c0 wceq wi cuni cun cv ciun wn wne iunconst sylbir iun0 iuneq2d 3eqtr4a
      df-ne id syl6eq ja eqcomd uneq1d uniiun uneq2i iunun 3eqtr4g unieq uneq2d
      uni0 un0 iuneq1 0iun eqeq12d biimpcd impbii ) CDEZBDEZFZBCGZHZACBAIZHZJZE
      ZUSBACVBJZHACBJZVFHVAVDUSBVGVFUSVGBUQURVGBEZUQKCDLVHCDRACBMNURACDJDVGBACO
      URACBDURSZPVIQUAUBUCUTVFBACUDUEACBVBUFUGUQVEURUQVABVDDUQVABDHBUQUTDBUQUTD
      GDCDUHUJTUIBUKTUQVDADVCJDACDVCULAVCUMTUNUOUP $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Subclass relationship for power class and union.  (Contributed by NM,
       18-Jul-2006.) $)
    sspwuni $p |- ( A C_ ~P B <-> U. A C_ B ) $=
      ( vx cv cpw wcel wral wss cuni selpw ralbii dfss3 unissb 3bitr4i ) CDZBEZ
      FZCAGOBHZCAGAPHAIBHQRCACBJKCAPLCABMN $.

    $( Two ways to express a collection of subclasses.  (Contributed by NM,
       19-Jul-2006.) $)
    pwssb $p |- ( A C_ ~P B <-> A. x e. A x C_ B ) $=
      ( cpw wss cuni cv wral sspwuni unissb bitri ) BCDEBFCEAGCEABHBCIABCJK $.
  $}

  $( Characterization of the elements of a double power class: they are exactly
     the sets whose union is included in that class.  (Contributed by BJ,
     29-Apr-2021.) $)
  elpwpw $p |- ( A e. ~P ~P B <-> ( A e. _V /\ U. A C_ B ) ) $=
    ( cpw wcel cvv wss wa cuni elpwb sspwuni anbi2i bitri ) ABCZCDAEDZAMFZGNAHB
    FZGAMIOPNABJKL $.

  ${
    $d A x $.
    $( The double power class written as a class abstraction: the class of sets
       whose union is included in the given class.  (Contributed by BJ,
       29-Apr-2021.) $)
    pwpwab $p |- ~P ~P A = { x | U. x C_ A } $=
      ( cv cuni wss cpw wcel cvv vex elpwpw mpbiran abbi2i ) ACZDBEZABFFZMOGMHG
      NAIMBJKL $.
  $}

  ${
    $d A x $.
    $( The class of sets whose union is equal to a given class is included in
       the double power class of that class.  (Contributed by BJ,
       29-Apr-2021.) $)
    pwpwssunieq $p |- { x | U. x = A } C_ ~P ~P A $=
      ( cv cuni wceq cab wss cpw eqimss ss2abi pwpwab sseqtr4i ) ACDZBEZAFMBGZA
      FBHHNOAMBIJABKL $.
  $}

  $( Relationship for power class and union.  (Contributed by NM,
     18-Jul-2006.) $)
  elpwuni $p |- ( B e. A -> ( A C_ ~P B <-> U. A = B ) ) $=
    ( cpw wss cuni wcel wceq sspwuni unissel expcom eqimss impbid1 syl5bb ) ABC
    DAEZBDZBAFZNBGZABHPOQOPQABIJNBKLM $.

  ${
    $d x y A $.
    $( The power class of an intersection in terms of indexed intersection.
       Exercise 24(a) of [Enderton] p. 33.  (Contributed by NM,
       29-Nov-2003.) $)
    iinpw $p |- ~P |^| A = |^|_ x e. A ~P x $=
      ( vy cint cpw cv ciin wss wcel ssint selpw ralbii bitr4i wb cvv eliin elv
      wral 3bitr4i eqriv ) CBDZEZABAFZEZGZCFZUAHZUFUDIZABRZUFUBIUFUEIZUGUFUCHZA
      BRUIAUFBJUHUKABCUCKLMCUAKUJUINCAUFBUDOPQST $.

    $( Inclusion of an indexed union of a power class in the power class of the
       union of its index.  Part of Exercise 24(b) of [Enderton] p. 33.
       (Contributed by NM, 25-Nov-2003.) $)
    iunpwss $p |- U_ x e. A ~P x C_ ~P U. A $=
      ( vy cv cpw ciun cuni wss wrex wcel ssiun eliun selpw rexbii bitri uniiun
      sseq2i 3imtr4i ssriv ) CABADZEZFZBGZEZCDZTHZABIZUEABTFZHZUEUBJZUEUDJZABTU
      EKUJUEUAJZABIUGAUEBUALULUFABCTMNOUKUEUCHUICUCMUCUHUEABPQORS $.
  $}

  $( Relative intersection of a nonempty set.  (Contributed by Stefan O'Rear,
     3-Apr-2015.)  (Revised by Mario Carneiro, 5-Jun-2015.) $)
  rintn0 $p |- ( ( X C_ ~P A /\ X =/= (/) ) -> ( A i^i |^| X ) = |^| X ) $=
    ( cpw wss wne cint cin wceq cuni intssuni2 ssid sspwuni mpbi syl6ss sseqin2
    c0 wa sylib ) BACZDBPEQZBFZADAUAGUAHTUASIZABSJSSDUBADSKSALMNUAAOR $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Disjointness
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $c Disj_ $.

  $( Extend wff notation to include the statement that a family of classes
     ` B ( x ) ` , for ` x e. A ` , is a disjoint family. $)
  wdisj $a wff Disj_ x e. A B $.

  ${
    $d x y $.  $d y A $.  $d y B $.
    $( A collection of classes ` B ( x ) ` is disjoint when for each element
       ` y ` , it is in ` B ( x ) ` for at most one ` x ` .  (Contributed by
       Mario Carneiro, 14-Nov-2016.)  (Revised by NM, 16-Jun-2017.) $)
    df-disj $a |- ( Disj_ x e. A B <-> A. y E* x e. A y e. B ) $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.
    $( Alternate definition for disjoint classes.  (Contributed by NM,
       17-Jun-2017.) $)
    dfdisj2 $p |- ( Disj_ x e. A B <-> A. y E* x ( x e. A /\ y e. B ) ) $=
      ( wdisj cv wcel wrmo wal wa wmo df-disj df-rmo albii bitri ) ACDEBFDGZACH
      ZBIAFCGPJAKZBIABCDLQRBPACMNO $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.  $d y C $.
    $( If each element of a collection is contained in a disjoint collection,
       the original collection is also disjoint.  (Contributed by Mario
       Carneiro, 14-Nov-2016.) $)
    disjss2 $p |- ( A. x e. A B C_ C ->
      ( Disj_ x e. A C -> Disj_ x e. A B ) ) $=
      ( vy wss wral cv wcel wrmo wal wdisj ssel ralimi rmoim syl alimdv df-disj
      wi 3imtr4g ) CDFZABGZEHZDIZABJZEKUCCIZABJZEKABDLABCLUBUEUGEUBUFUDSZABGUEU
      GSUAUHABCDUCMNUFUDABOPQAEBDRAEBCRT $.
  $}

  $( Equality theorem for disjoint collection.  (Contributed by Mario Carneiro,
     14-Nov-2016.) $)
  disjeq2 $p |- ( A. x e. A B = C ->
    ( Disj_ x e. A B <-> Disj_ x e. A C ) ) $=
    ( wceq wral wdisj wss wi eqimss2 ralimi disjss2 syl eqimss impbid ) CDEZABF
    ZABCGZABDGZQDCHZABFRSIPTABDCJKABDCLMQCDHZABFSRIPUAABCDNKABCDLMO $.

  ${
    $d x ph $.
    disjeq2dv.1 $e |- ( ( ph /\ x e. A ) -> B = C ) $.
    $( Equality deduction for disjoint collection.  (Contributed by Mario
       Carneiro, 14-Nov-2016.) $)
    disjeq2dv $p |- ( ph -> ( Disj_ x e. A B <-> Disj_ x e. A C ) ) $=
      ( wceq wral wdisj wb ralrimiva disjeq2 syl ) ADEGZBCHBCDIBCEIJANBCFKBCDEL
      M $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d y C $.
    $( A subset of a disjoint collection is disjoint.  (Contributed by Mario
       Carneiro, 14-Nov-2016.) $)
    disjss1 $p |- ( A C_ B -> ( Disj_ x e. B C -> Disj_ x e. A C ) ) $=
      ( vy wss cv wcel wmo wal wdisj ssel anim1d moimdv alimdv dfdisj2 3imtr4g
      wa ) BCFZAGZCHZEGDHZRZAIZEJTBHZUBRZAIZEJACDKABDKSUDUGESUFUCASUEUAUBBCTLMN
      OAECDPAEBDPQ $.

    $( Equality theorem for disjoint collection.  (Contributed by Mario
       Carneiro, 14-Nov-2016.) $)
    disjeq1 $p |- ( A = B -> ( Disj_ x e. A C <-> Disj_ x e. B C ) ) $=
      ( wceq wdisj wss wi eqimss2 disjss1 syl eqimss impbid ) BCEZABDFZACDFZNCB
      GOPHCBIACBDJKNBCGPOHBCLABCDJKM $.

    disjeq1d.1 $e |- ( ph -> A = B ) $.
    $( Equality theorem for disjoint collection.  (Contributed by Mario
       Carneiro, 14-Nov-2016.) $)
    disjeq1d $p |- ( ph -> ( Disj_ x e. A C <-> Disj_ x e. B C ) ) $=
      ( wceq wdisj wb disjeq1 syl ) ACDGBCEHBDEHIFBCDEJK $.

    $d x ph $.
    disjeq12d.1 $e |- ( ph -> C = D ) $.
    $( Equality theorem for disjoint collection.  (Contributed by Mario
       Carneiro, 14-Nov-2016.) $)
    disjeq12d $p |- ( ph -> ( Disj_ x e. A C <-> Disj_ x e. B D ) ) $=
      ( wdisj disjeq1d wceq cv wcel adantr disjeq2dv bitrd ) ABCEIBDEIBDFIABCDE
      GJABDEFAEFKBLDMHNOP $.
  $}

  ${
    $d x y z A $.  $d z B $.  $d z C $.
    cbvdisj.1 $e |- F/_ y B $.
    cbvdisj.2 $e |- F/_ x C $.
    cbvdisj.3 $e |- ( x = y -> B = C ) $.
    $( Change bound variables in a disjoint collection.  (Contributed by Mario
       Carneiro, 14-Nov-2016.) $)
    cbvdisj $p |- ( Disj_ x e. A B <-> Disj_ y e. A C ) $=
      ( vz cv wcel wrmo wal wdisj nfcri weq eleq2d cbvrmo albii df-disj 3bitr4i
      ) IJZDKZACLZIMUBEKZBCLZIMACDNBCENUDUFIUCUEABCBIDFOAIEGOABPDEUBHQRSAICDTBI
      CETUA $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x C $.
    cbvdisjv.1 $e |- ( x = y -> B = C ) $.
    $( Change bound variables in a disjoint collection.  (Contributed by Mario
       Carneiro, 11-Dec-2016.) $)
    cbvdisjv $p |- ( Disj_ x e. A B <-> Disj_ y e. A C ) $=
      ( nfcv cbvdisj ) ABCDEBDGAEGFH $.
  $}

  ${
    $d z A $.  $d z B $.  $d x z $.  $d y z $.
    nfdisj.1 $e |- F/_ y A $.
    nfdisj.2 $e |- F/_ y B $.
    $( Bound-variable hypothesis builder for disjoint collection.  (Contributed
       by Mario Carneiro, 14-Nov-2016.) $)
    nfdisj $p |- F/ y Disj_ x e. A B $=
      ( vz wdisj cv wcel wa wmo wal dfdisj2 wnf wtru nftru weq wn a1i wnfc nfal
      nfcvf nfeld nfcri nfand adantl nfmod2 mptru nfxfr ) ACDHAIZCJZGIDJZKZALZG
      MBAGCDNUOBGUOBOPUNBAAQBARBMSZUNBOPUPULUMBUPBUKCBAUCBCUAUPETUDUMBOUPBGDFUE
      TUFUGUHUIUBUJ $.
  $}

  ${
    $d y A $.  $d y B $.  $d x y $.
    $( Bound-variable hypothesis builder for disjoint collection.  (Contributed
       by Mario Carneiro, 14-Nov-2016.) $)
    nfdisj1 $p |- F/ x Disj_ x e. A B $=
      ( vy wdisj cv wcel wrmo wal df-disj nfrmo1 nfal nfxfr ) ABCEDFCGZABHZDIAA
      DBCJOADNABKLM $.
  $}

  ${
    $d i j x A $.  $d j x B $.  $d i x C $.
    disjor.1 $e |- ( i = j -> B = C ) $.
    $( Two ways to say that a collection ` B ( i ) ` for ` i e. A ` is
       disjoint.  (Contributed by Mario Carneiro, 26-Mar-2015.)  (Revised by
       Mario Carneiro, 14-Nov-2016.) $)
    disjor $p |- ( Disj_ i e. A B <->
      A. i e. A A. j e. A ( i = j \/ ( B i^i C ) = (/) ) ) $=
      ( vx wdisj cv wcel wrmo wal wo wral wi ralcom4 wex bitri bitr4i ralbii c0
      weq cin wceq df-disj wa orcom df-or neq0 elin imbi1i 19.23v 3bitri eleq2d
      wn exbii rmo4 albii 3bitr4i ) DABHGIZBJZDAKZGLZDEUBZBCUCZUAUDZMZEANZDANZD
      GABUEVAUTCJZUFZVDOZEANZGLZDANVMDANZGLVIVCVMDGAPVHVNDAVHVLGLZEANVNVGVPEAVG
      VFVDMVFUOZVDOZVPVDVFUGVFVDUHVRVKGQZVDOVPVQVSVDVQUTVEJZGQVSGVEUIVTVKGUTBCU
      JUPRUKVKVDGULSUMTVLEGAPRTVBVOGVAVJDEAVDBCUTFUNUQURUSS $.
  $}

  ${
    $d i j x A $.  $d i j B $.
    $( Two ways to say that a collection ` B ( i ) ` for ` i e. A ` is
       disjoint.  (Contributed by Mario Carneiro, 14-Nov-2016.) $)
    disjors $p |- ( Disj_ x e. A B <-> A. i e. A A. j e. A
      ( i = j \/ ( [_ i / x ]_ B i^i [_ j / x ]_ B ) = (/) ) ) $=
      ( wdisj cv csb wceq c0 wo wral nfcv nfcsb1v csbeq1a cbvdisj csbeq1 disjor
      cin bitri ) ABCFDBADGZCHZFUAEGZIUBAUCCHZSJIKEBLDBLADBCUBDCMAUACNAUACOPBUB
      UDDEAUAUCCQRT $.
  $}

  ${
    $d x y z A $.  $d y z B $.  $d x y z C $.  $d x z D $.  $d x y z X $.
    $d x z Y $.
    disji.1 $e |- ( x = X -> B = C ) $.
    disji.2 $e |- ( x = Y -> B = D ) $.
    $( Property of a disjoint collection: if ` B ( X ) = C ` and
       ` B ( Y ) = D ` , and ` X =/= Y ` , then ` C ` and ` D ` are disjoint.
       (Contributed by Mario Carneiro, 14-Nov-2016.) $)
    disji2 $p |- ( ( Disj_ x e. A B /\ ( X e. A /\ Y e. A ) /\
      X =/= Y ) -> ( C i^i D ) = (/) ) $=
      ( vy vz wcel wa cin c0 wceq wo cv csb nfcv wdisj df-ne wral disjors eqeq1
      wn csbhypf ineq1d eqeq1d orbi12d eqeq2 ineq2d rspc2v syl5bi impcom 3impia
      wne ord ) ABCUAZFBLGBLMZFGUQZDENZOPZVAFGPZUFUSUTMZVCFGUBVEVDVCUTUSVDVCQZU
      SJRZKRZPZAVGCSZAVHCSZNZOPZQZKBUCJBUCUTVFABCJKUDVNVFFVHPZDVKNZOPZQJKFGBBVG
      FPZVIVOVMVQVGFVHUEVRVLVPOVRVJDVKAJFCDAFTADTHUGUHUIUJVHGPZVOVDVQVCVHGFUKVS
      VPVBOVSVKEDAKGCEAGTAETIUGULUIUJUMUNUOURUNUP $.

    $( Property of a disjoint collection: if ` B ( X ) = C ` and
       ` B ( Y ) = D ` have a common element ` Z ` , then ` X = Y ` .
       (Contributed by Mario Carneiro, 14-Nov-2016.) $)
    disji $p |- ( ( Disj_ x e. A B /\ ( X e. A /\ Y e. A ) /\
      ( Z e. C /\ Z e. D ) ) -> X = Y ) $=
      ( wcel wa wdisj cin c0 wne wceq inelcm disji2 3expia necon1d syl3an3
      3impia ) HDKHEKLABCMZFBKGBKLZDENZOPZFGQZHDERUDUEUGUHUDUELFGUFOUDUEFGPUFOQ
      ABCDEFGIJSTUAUCUB $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.  $d x C $.
    $( If there is a function ` C ( y ) ` such that ` C ( y ) = x ` for all
       ` y e. B ( x ) ` , then the sets ` B ( x ) ` for distinct ` x e. A ` are
       disjoint.  (Contributed by Mario Carneiro, 10-Dec-2016.) $)
    invdisj $p |- ( A. x e. A A. y e. B C = x -> Disj_ x e. A B ) $=
      ( cv wceq wral wcel wa wmo wal wdisj nfra2 df-ral rsp eqcom syl6ib imim2i
      wi impd alimi sylbi mo2icl syl alrimi dfdisj2 sylibr ) EAFZGZBDHZACHZUICI
      ZBFDIZJZAKZBLACDMULUPBUJABCDNULUOUIEGZTZALZUPULUMUKTZALUSUKACOUTURAUTUMUN
      UQUKUNUQTUMUKUNUJUQUJBDPEUIQRSUAUBUCUOAEUDUEUFABCDUGUH $.
  $}

  ${
    $d A z $.  $d B x z $.  $d C y z $.  $d x y z $.
    $( The restricted class abstractions ` { x e. B | C = y } ` for distinct
       ` y e. A ` are disjoint.  (Contributed by AV, 6-May-2020.) $)
    invdisjrab $p |- Disj_ y e. A { x e. B | C = y } $=
      ( vz cv csb wceq crab wral wdisj wcel wi nfcsb1v nfeq1 weq csbeq1a eqeq1d
      nfcv elrabf ax-1 simplbiim impcom rgen2 invdisj ax-mp ) AFGZEHZBGZIZFEUJI
      ZADJZKBCKBCUMLUKBFCUMUHUMMZUJCMZUKUNUHDMUKUOUKNULUKAUHDAUHTADTAUIUJAUHEOP
      AFQEUIUJAUHERSUAUKUOUBUCUDUEBFCUMUIUFUG $.
  $}

  ${
    $d x y z A $.  $d y z B $.  $d x y z C $.  $d x y z D $.
    $( A disjoint collection yields disjoint indexed unions for disjoint index
       sets.  (Contributed by Mario Carneiro, 26-Mar-2015.)  (Revised by Mario
       Carneiro, 14-Nov-2016.) $)
    disjiun $p |- ( ( Disj_ x e. A B /\
      ( C C_ A /\ D C_ A /\ ( C i^i D ) = (/) ) ) ->
        ( U_ x e. C B i^i U_ x e. D B ) = (/) ) $=
      ( vy vz wss cin c0 wceq wa cv wcel wi wrex wral impcom syl syl5bi ciun wn
      wdisj w3a wal wrmo df-disj wne elin eliun anbi12i weq wex nfv rmo2 ssralv
      bitri an4 r19.29 id imp eleq1d biimpcd rexlimiv ex expimpd anim12d inelcm
      syl6 exlimiv expd sylbi necon2bd impancom 3impa alimdv eq0 sylibr ) ABCUC
      ZDBHZEBHZDEIZJKZUDZLFMZADCUAZAECUAZIZNZUBZFUEZWHJKWDVSWKVSWECNZABUFZFUEWD
      WKAFBCUGWDWMWJFVTWAWCWMWJOVTWALZWMWCWJWNWMLZWIWBJWIWLADPZWLAEPZLZWOWBJUHZ
      WIWEWFNZWEWGNZLWRWEWFWGUIWTWPXAWQAWEDCUJAWEECUJUKUQWMWNWRWSOZWMWLAGULZOZA
      BQZGUMZWNXBOWLAGBWLGUNUOXFWNWRWSWNWRLVTWPLZWAWQLZLZXFWSVTWAWPWQURXEXIWSOG
      XEXIGMZDNZXJENZLWSXEXGXKXHXLXEVTWPXKXEVTLXDADQZWPXKOVTXEXMXDADBUPRXMWPXKX
      MWPLXDWLLZADPXKXDWLADUSXNXKADXNAMZDNXKXNXOXJDXDWLXCXDUTVAZVBVCVDSVESVFXEW
      AWQXLXEWALXDAEQZWQXLOWAXEXQXDAEBUPRXQWQXLXQWQLXNAEPXLXDWLAEUSXNXLAEXNXOEN
      XLXNXOXJEXPVBVCVDSVESVFVGXJDEVHVIVJTVKVLRTVMVNVOVPTRFWHVQVR $.
  $}

  ${
    $d A b x $.  $d B a x $.  $d V a b x $.  $d ph a b x $.
    disjord.1 $e |- ( a = b -> A = B ) $.
    disjord.2 $e |- ( ( ph /\ x e. A /\ x e. B ) -> a = b ) $.
    $( Conditions for a collection of sets ` A ( a ) ` for ` a e. V ` to be
       disjoint.  (Contributed by AV, 9-Jan-2022.) $)
    disjord $p |- ( ph -> Disj_ a e. V A ) $=
      ( weq cin c0 wceq wo wral cv wcel wa wn sylibr wdisj orc a1d 3expia con3d
      wi impancom ralrimiv disj olcd expcom pm2.61i adantr ralrimivva disjor )
      AFGJZCDKLMZNZGEOFEOFECUAAURFGEEAURFPEQGPEQRUPAURUFUPURAUPUQUBUCAUPSZURAUS
      RZUQUPUTBPZDQZSZBCOUQUTVCBCAVACQZUSVCAVDRVBUPAVDVBUPIUDUEUGUHBCDUITUJUKUL
      UMUNECDFGHUOT $.
  $}

  ${
    $d A i j $.  $d B j x $.  $d C j $.  $d E i $.  $d D i x $.  $d i j x $.
    disjiunb.1 $e |- ( i = j -> B = D ) $.
    disjiunb.2 $e |- ( i = j -> C = E ) $.
    $( Two ways to say that a collection of index unions ` C ( i , x ) ` for
       ` i e. A ` and ` x e. B ` is disjoint.  (Contributed by AV,
       9-Jan-2022.) $)
    disjiunb $p |- ( Disj_ i e. A U_ x e. B C <-> A. i e. A A. j e. A
                        ( i = j \/ ( U_ x e. B C i^i U_ x e. D E ) = (/) ) ) $=
      ( ciun weq iuneq12d disjor ) BACDKAEHKFGFGLACEDHIJMN $.
  $}

  ${
    $d A c d x $.  $d C a d x $.  $d D b $.  $d V a c $.  $d W b c d x $.
    $d X a b d x $.  $d ph a b c d x $.
    disjiund.1 $e |- ( a = c -> A = C ) $.
    disjiund.2 $e |- ( b = d -> C = D ) $.
    disjiund.3 $e |- ( a = c -> W = X ) $.
    disjiund.4 $e |- ( ( ph /\ x e. A /\ x e. D ) -> a = c ) $.
    $( Conditions for a collection of index unions of sets ` A ( a , b ) ` for
       ` a e. V ` and ` b e. W ` to be disjoint.  (Contributed by AV,
       9-Jan-2022.) $)
    disjiund $p |- ( ph -> Disj_ a e. V U_ b e. W A ) $=
      ( wral cv wcel wa weq ciun cin c0 wceq wo wdisj wrex eliun eleq2d cbvrexv
      wn 3exp rexlimdvw imp syl5bi con3d impancom ralrimiv disj sylibr orrd a1d
      wi ex ralrimivv disjiunb ) AIKUAZJGCUBZJHDUBZUCUDUEZUFZKFQIFQIFVIUGAVLIKF
      FAVLIRFSKRFSTAVHVKAVHULZVKAVMTZBRZVJSZULZBVIQVKVNVQBVIVOVISVOCSZJGUHZVNVQ
      JVOGCUIAVSVMVQAVSTZVPVHVPVODSZJHUHZVTVHJVOHDUIWBVOESZLHUHVTVHWAWCJLHJLUAD
      EVONUJUKVTWCVHLHAVSWCVHVDZAVRWDJGAVRWCVHPUMUNUOUNUPUPUQURUPUSBVIVJUTVAVEV
      BVCVFJFGCHIKDOMVGVA $.
  $}

  ${
    $d x y $.  $d y A $.
    $( Any collection of singletons is disjoint.  (Contributed by Mario
       Carneiro, 14-Nov-2016.) $)
    sndisj $p |- Disj_ x e. A { x } $=
      ( vy cv csn wdisj wcel wa wmo dfdisj2 weq simpr velsn sylib equcomd moimi
      moeq ax-mp mpgbir ) ABADZEZFTBGZCDZUAGZHZAIZCACBUAJACKZAIUFAUCQUEUGAUECAU
      EUDCAKUBUDLCTMNOPRS $.
  $}

  $( Any collection of empty sets is disjoint.  (Contributed by Mario Carneiro,
     14-Nov-2016.) $)
  0disj $p |- Disj_ x e. A (/) $=
    ( c0 cv csn wss wral wdisj 0ss rgenw sndisj disjss2 mp2 ) CADEZFZABGABNHABC
    HOABNIJABKABCNLM $.

  ${
    $d x y A $.  $d y B $.
    $( A singleton collection is disjoint.  (Contributed by Mario Carneiro,
       14-Nov-2016.) $)
    disjxsn $p |- Disj_ x e. { A } B $=
      ( vy csn wdisj cv wcel wa wmo dfdisj2 wceq moeq elsni adantr moimi mpgbir
      ax-mp ) ABEZCFAGZSHZDGCHZIZAJZDADSCKTBLZAJUDABMUCUEAUAUEUBTBNOPRQ $.

    $( An empty collection is disjoint.  (Contributed by Mario Carneiro,
       14-Nov-2016.) $)
    disjx0 $p |- Disj_ x e. (/) B $=
      ( c0 csn wss wdisj 0ss disjxsn disjss1 mp2 ) CCDZEAKBFACBFKGACBHACKBIJ $.
  $}

  ${
    $d x y z A $.  $d x y z B $.  $d y z C $.  $d x y z D $.  $d x y z E $.
    disjprg.1 $e |- ( x = A -> C = D ) $.
    disjprg.2 $e |- ( x = B -> C = E ) $.
    $( A pair collection is disjoint iff the two sets in the family have empty
       intersection.  (Contributed by Mario Carneiro, 14-Nov-2016.) $)
    disjprg $p |- ( ( A e. V /\ B e. V /\ A =/= B ) ->
      ( Disj_ x e. { A , B } C <-> ( D i^i E ) = (/) ) ) $=
      ( vy vz wceq cin c0 wo wral wa wb nfcv wtru wcel wne w3a cv csb cpr wdisj
      eqeq1 csbhypf ineq1d eqeq1d orbi12d ralbidv ralprg 3adant3 id eqcomd orcd
      trud 2thd eqeq2 ineq2d wn simp3 neneqd biorf biantrur syl6bb bitr4d eqcom
      syl tru incom syl6eq biantru anbi12d bitrd disjors pm4.24 3bitr4g ) BGUAZ
      CGUAZBCUBZUCZJUDZKUDZLZAWEDUEZAWFDUEZMZNLZOZKBCUFZPZJWMPZEFMZNLZWQQZAWMDU
      GWQWDWOBWFLZEWIMZNLZOZKWMPZCWFLZFWIMZNLZOZKWMPZQZWRWAWBWOXIRWCWNXCXHJBCGG
      WEBLZWLXBKWMXJWGWSWKXAWEBWFUHXJWJWTNXJWHEWIAJBDEABSZAESZHUIUJUKULUMWECLZW
      LXGKWMXMWGXDWKXFWECWFUHXMWJXENXMWHFWIAJCDFACSZAFSZIUIUJUKULUMUNUOWDXCWQXH
      WQWDXCTBCLZWQOZQZWQWAWBXCXRRWCXBTXQKBCGGWFBLZXBTXSWSXAXSWFBXSUPUQURXSUSUT
      WFCLZWSXPXAWQWFCBVAXTWTWPNXTWIFEAKCDFXNXOIUIVBUKULUNUOWDWQXQXRWDXPVCWQXQR
      WDBCWAWBWCVDVEXPWQVFVKZTXQVLVGVHVIWDXHXQTQZWQWAWBXHYBRWCXGXQTKBCGGXSXDXPX
      FWQXSXDCBLXPWFBCVACBVJVHXSXEWPNXSXEFEMWPXSWIEFAKBDEXKXLHUIVBFEVMVNUKULXTX
      GTXTXDXFXTWFCXTUPUQURXTUSUTUNUOWDWQXQYBYATXQVLVOVHVIVPVQAWMDJKVRWQVSVT $.
  $}

  ${
    $d r s u v x y z A $.  $d r s u v x z B $.  $d r s u v y z C $.
    $( An indexed union of a disjoint collection of disjoint collections is
       disjoint if each component is disjoint, and the disjoint unions in the
       collection are also disjoint.  Note that ` B ( y ) ` and ` C ( x ) ` may
       have the displayed free variables.  (Contributed by Mario Carneiro,
       14-Nov-2016.)  (Proof shortened by JJ, 27-May-2021.) $)
    disjxiun $p |- ( Disj_ y e. A B -> ( Disj_ x e. U_ y e. A B C <->
      ( A. y e. A Disj_ x e. B C /\ Disj_ y e. A U_ x e. B C ) ) ) $=
      ( vu vv vr vs vz wdisj ciun wral wa nfcv wss cv wcel csb weq nfiu1 nfdisj
      wi disjss1 ssiun2 syl11 ralrimi a1i cin c0 wceq wo simplr nfcsb1v csbeq1a
      cbviun syl6sseqr adantr csbeq1 sseq1d vtoclga adantl cbvdisj disjor sylbb
      ad2antrl rsp2 syl imp ord impr adantlr disjiun syl13anc expr orrd iuneq1d
      wn ralrimivva sylibr nfiun ex jcad wrex eleq2i eliun bitri anbi12i reeanv
      bitr4i simplrr disjeq1d rspc impcom disjors ad2ant2r simplrl eleqtrrd jca
      sylib syl2an2r adantlrr mpd wne ss2in syl2an biimpi ad3antlr id syl2an3an
      disji2 sseq0 pm2.61dane rexlimdvva syl5bi ralrimivv impbid1 ) BCDKZABCDLZ
      EKZADEKZBCMZBCADELZKZNZXRXTYBYDXTYBUCXRXTYABCABXSEBCDUABEOZUBDXSPXTYABQCR
      ADXSEUDBCDUEUFUGUHXRXTYDXRXTNZFCABFQZDSZELZKZYDYGFGTZYJABGQZDSZELZUIZUJUK
      ZULZGCMFCMYKYGYRFGCCYGYHCRZYMCRZNZNYLYQYGUUAYLVRZYQYGUUAUUBNZNXTYIXSPZYNX
      SPZYIYNUIUJUKZYQXRXTUUCUMUUAUUDYGUUBYSUUDYTYSYIFCYILZXSFCYIUEBFCDYIFDOZBY
      HDUNZBYHDUOZUPZUQZURVFUUAUUEYGUUBYTUUEYSUUDUUEFYMCYLYIYNXSBYHYMDUSZUTUULV
      AVBVFXRUUCUUFXTXRUUAUUBUUFXRUUANYLUUFXRUUAYLUUFULZXRUUNGCMFCMZUUAUUNUCXRF
      CYIKUUOBFCDYIUUHUUIUUJVCCYIYNFGUUMVDVEUUNFGCCVGVHVIVJVKVLAXSEYIYNVMVNVOVP
      VSCYJYOFGYLAYIYNEUUMVQVDVTBFCYCYJFYCOABYIEUUIYFWABFTZADYIEUUJVQVCVTWBWCYE
      HITZAHQZESZAIQZESZUIZUJUKZULZIXSMHXSMXTYEUVDHIXSXSUURXSRZUUTXSRZNZUURYIRZ
      UUTYNRZNZGCWDFCWDZYEUVDUVGUVHFCWDZUVIGCWDZNUVKUVEUVLUVFUVMUVEUURUUGRUVLXS
      UUGUURUUKWEFUURCYIWFWGUVFUUTGCYNLZRUVMXSUVNUUTBGCDYNGDOBYMDUNBYMDUOUPWEGU
      UTCYNWFWGWHUVHUVIFGCCWIWJYEUVJUVDFGCCYEUUANZUVJUVDUVOUVJNZUUQUVCUVOUVJUUQ
      VRZUVCUVOUVJUVQNZNZUVCYHYMUVSYLNZUVQUVCUVOUVJUVQYLWKUVTUUQUVCUVOUVJYLUVDU
      VQUVPUVDIYIMHYIMZYLUVHUUTYIRZNZUVDUVOUWAUVJYBYSUWAYDYTYBYSNAYIEKZUWAYSYBU
      WDYAUWDBYHCABYIEUUIYFUBUUPADYIEUUJWLWMWNAYIEHIWOWTWPURUVPYLNZUVHUWBUVOUVH
      UVIYLWQUWEUUTYNYIUVOUVHUVIYLWKYLYIYNUKUVPUUMVBWRWSUWAUWCUVDUVDHIYIYIVGVIX
      AXBVJXCUVSUVBYPPZYHYMXDZYQUVCUVJUWFUVOUVQUVHUUSYJPUVAYOPUWFUVIUVHUUSHYIUU
      SLYJHYIUUSUEAHYIEUUSHEOAUUREUNAUUREUOUPUQUVIUVAIYNUVALYOIYNUVAUEAIYNEUVAI
      EOAUUTEUNAUUTEUOUPUQUUSYJUVAYOXEXFVFUVSJCABJQZDSZELZKZUUAUWGUWGYQYDUWKYBU
      UAUVRYDUWKBJCYCUWJJYCOABUWIEBUWHDUNYFWABJTADUWIEBUWHDUOVQVCXGXHYEUUAUVRUM
      UWGXIJCUWJYJYOYHYMJFTAUWIYIEBUWHYHDUSVQJGTAUWIYNEBUWHYMDUSVQXKXJUVBYPXLXA
      XMVOVPWBXNXOXPAXSEHIWOVTXQ $.
  $}

  ${
    $d w x y z A $.  $d w x y z B $.  $d w y z C $.  $d w x z D $.
    disjxun.1 $e |- ( x = y -> C = D ) $.
    $( The union of two disjoint collections.  (Contributed by Mario Carneiro,
       14-Nov-2016.) $)
    disjxun $p |- ( ( A i^i B ) = (/) -> ( Disj_ x e. ( A u. B ) C <->
      ( Disj_ x e. A C /\ Disj_ x e. B C /\
        A. x e. A A. y e. B ( C i^i D ) = (/) ) ) ) $=
      ( vz vw cin c0 wceq weq cv wo wral wa eqeq1d orbi12d bitri csb wdisj wcel
      cun w3a wn wb disjel eleq1w notbid syl5ibcom con2d biorf bicomd 2ralbidva
      impr syl anbi2d ralunb ralbii nfv nfcv nfcsb1v nfin nfeq1 equequ2 csbhypf
      nfral ineq2d cbvralv equequ1 csbeq1a ineq1d ralbidv syl5bbr cbvral r19.26
      3bitr3i disjor anbi1i 3bitr4g equcom syl6bb syl6eq ralcom disjors anbi2ci
      nfor incom syl5bb anbi1d anbi12d df-3an anandir ) CDJKLZHIMZAHNZEUAZAINZE
      UAZJZKLZOZICDUDZPZHCPZXEHDPZQZACEUBZEFJZKLZBDPACPZQZADEUBZXLQZQZAXDEUBZXI
      XNXLUEZWOXFXMXGXOWOABMZXKOZBCPZACPZXTBDPZACPZQZYBXLQXFXMWOYDXLYBWOXTXKABC
      DWOANZCUCZBNZDUCZQQZXKXTYJXSUFZXKXTUGWOYGYIYKWOYGQZXSYIYLYFDUCZUFXSYIUFCD
      YFUHXSYMYIABDUIUJUKULUPXSXKUMUQUNUOZURXTBXDPZACPYAYCQZACPXFYEYOYPACXTBCDU
      SUTYOXEAHCYOHVAXCAIXDAXDVBWPXBAWPAVAAXAKAWRWTAWQEVCAWSEVCVDVEWHZVHYOAIMZE
      WTJZKLZOZIXDPAHMZXEUUAXTIBXDIBMZYRXSYTXKIBAVFUUCYSXJKUUCWTFEAIYHEFAYHVBZA
      FVBZGVGVIRSVJUUBUUAXCIXDUUBYRWPYTXBAHIVKUUBYSXAKUUBEWRWTAWQEVLVMRSVNVOVPY
      AYCACVQVRXIYBXLCEFABGVSVTWAWOXCICPZHDPZXCIDPZHDPZQZXLUUIQXGXOWOUUGXLUUIUU
      GYDWOXLUUGXTACPZBDPYDUUFUUKHBDUUFHAMZWREJZKLZOZACPHBMZUUKUUOXCAICUUOIVAYQ
      YRUULWPUUNXBAIHVFYRUUMXAKYREWTWRAWSEVLVIRSVPUUPUUOXTACUUPUULXSUUNXKUUPUUL
      BAMXSHBAVKBAWBWCUUPUUMXJKUUPUUMFEJXJUUPWRFEAHYHEFUUDUUEGVGVMFEWIWDRSVNVOV
      JXTBADCWETYNWJWKXGUUFUUHQZHDPUUJXEUUQHDXCICDUSUTUUFUUHHDVQTXNUUIXLADEHIWF
      WGWAWLXQXEHXDPXHAXDEHIWFXEHCDUSTXRXIXNQXLQXPXIXNXLWMXIXNXLWNTWA $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d y C $.
    $( Expand a disjoint collection with any number of empty sets.
       (Contributed by Mario Carneiro, 15-Nov-2016.) $)
    disjss3 $p |- ( ( A C_ B /\ A. x e. ( B \ A ) C = (/) ) ->
      ( Disj_ x e. A C <-> Disj_ x e. B C ) ) $=
      ( vy wss c0 wceq wa wdisj wi cv wcel wmo wal wn syl simpl adantl dfdisj2
      cdif wral df-ral simprr n0i eldif syl5bir mpand mt3d jca alimi sylbi moim
      ex alimdv 3imtr4g disjss1 adantr impbid ) BCFZDGHZACBUAZUBZIABDJZACDJZVCV
      DVEKUTVCALZBMZELZDMZIZANZEOVFCMZVIIZANZEOVDVEVCVKVNEVCVMVJKZAOZVKVNKVCVFV
      BMZVAKZAOVPVAAVBUCVRVOAVRVMVJVRVMIZVGVIVSVGVAVSVIVAPVRVLVIUDZDVHUEQVSVLVG
      PZVAVMVLVRVLVIRSVLWAIVQVSVAVFCBUFVRVMRUGUHUIVTUJUNUKULVMVJAUMQUOAEBDTAECD
      TUPSUTVEVDKVCABCDUQURUS $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Binary relations
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Extend wff notation to include the general binary relation predicate.
     Note that the syntax is simply three class symbols in a row.  Since binary
     relations are the only possible wff expressions consisting of three class
     expressions in a row, the syntax is unambiguous.  (For an example of how
     syntax could become ambiguous if we are not careful, see the comment in
     ~ cneg .) $)
  wbr $a wff A R B $.

  $( Define a general binary relation.  Note that the syntax is simply three
     class symbols in a row.  Definition 6.18 of [TakeutiZaring] p. 29
     generalized to arbitrary classes.  Class ` R ` often denotes a relation
     such as " ` < ` " that compares two classes ` A ` and ` B ` , which might
     be numbers such as ` 1 ` and ` 2 ` (see ~ df-ltxr for the specific
     definition of ` < ` ).  As a wff, relations are true or false.  For
     example, ` ( R = { <. 2 , 6 >. , <. 3 , 9 >. } -> 3 R 9 ) ` ( ~ ex-br ).
     Often class ` R ` meets the ` Rel ` criteria to be defined in ~ df-rel ,
     and in particular ` R ` may be a function (see ~ df-fun ).  This
     definition of relations is well-defined, although not very meaningful,
     when classes ` A ` and/or ` B ` are proper classes (i.e. are not sets).
     On the other hand, we often find uses for this definition when ` R ` is a
     proper class (see for example ~ iprc ).  (Contributed by NM,
     31-Dec-1993.) $)
  df-br $a |- ( A R B <-> <. A , B >. e. R ) $.

  $( Equality theorem for binary relations.  (Contributed by NM,
     4-Jun-1995.) $)
  breq $p |- ( R = S -> ( A R B <-> A S B ) ) $=
    ( wceq cop wcel wbr eleq2 df-br 3bitr4g ) CDEABFZCGLDGABCHABDHCDLIABCJABDJK
    $.

  $( Equality theorem for a binary relation.  (Contributed by NM,
     31-Dec-1993.) $)
  breq1 $p |- ( A = B -> ( A R C <-> B R C ) ) $=
    ( wceq cop wcel wbr opeq1 eleq1d df-br 3bitr4g ) ABEZACFZDGBCFZDGACDHBCDHMN
    ODABCIJACDKBCDKL $.

  $( Equality theorem for a binary relation.  (Contributed by NM,
     31-Dec-1993.) $)
  breq2 $p |- ( A = B -> ( C R A <-> C R B ) ) $=
    ( wceq cop wcel wbr opeq2 eleq1d df-br 3bitr4g ) ABEZCAFZDGCBFZDGCADHCBDHMN
    ODABCIJCADKCBDKL $.

  $( Equality theorem for a binary relation.  (Contributed by NM,
     8-Feb-1996.) $)
  breq12 $p |- ( ( A = B /\ C = D ) -> ( A R C <-> B R D ) ) $=
    ( wceq wbr breq1 breq2 sylan9bb ) ABFACEGBCEGCDFBDEGABCEHCDBEIJ $.

  ${
    breqi.1 $e |- R = S $.
    $( Equality inference for binary relations.  (Contributed by NM,
       19-Feb-2005.) $)
    breqi $p |- ( A R B <-> A S B ) $=
      ( wceq wbr wb breq ax-mp ) CDFABCGABDGHEABCDIJ $.
  $}

  ${
    breq1i.1 $e |- A = B $.
    $( Equality inference for a binary relation.  (Contributed by NM,
       8-Feb-1996.) $)
    breq1i $p |- ( A R C <-> B R C ) $=
      ( wceq wbr wb breq1 ax-mp ) ABFACDGBCDGHEABCDIJ $.

    $( Equality inference for a binary relation.  (Contributed by NM,
       8-Feb-1996.) $)
    breq2i $p |- ( C R A <-> C R B ) $=
      ( wceq wbr wb breq2 ax-mp ) ABFCADGCBDGHEABCDIJ $.

    ${
      breq12i.2 $e |- C = D $.
      $( Equality inference for a binary relation.  (Contributed by NM,
         8-Feb-1996.)  (Proof shortened by Eric Schmidt, 4-Apr-2007.) $)
      breq12i $p |- ( A R C <-> B R D ) $=
        ( wceq wbr wb breq12 mp2an ) ABHCDHACEIBDEIJFGABCDEKL $.
    $}
  $}

  ${
    breq1d.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for a binary relation.  (Contributed by NM,
       8-Feb-1996.) $)
    breq1d $p |- ( ph -> ( A R C <-> B R C ) ) $=
      ( wceq wbr wb breq1 syl ) ABCGBDEHCDEHIFBCDEJK $.

    $( Equality deduction for a binary relation.  (Contributed by NM,
       29-Oct-2011.) $)
    breqd $p |- ( ph -> ( C A D <-> C B D ) ) $=
      ( wceq wbr wb breq syl ) ABCGDEBHDECHIFDEBCJK $.

    $( Equality deduction for a binary relation.  (Contributed by NM,
       8-Feb-1996.) $)
    breq2d $p |- ( ph -> ( C R A <-> C R B ) ) $=
      ( wceq wbr wb breq2 syl ) ABCGDBEHDCEHIFBCDEJK $.

    ${
      breq12d.2 $e |- ( ph -> C = D ) $.
      $( Equality deduction for a binary relation.  (Contributed by NM,
         8-Feb-1996.)  (Proof shortened by Andrew Salmon, 9-Jul-2011.) $)
      breq12d $p |- ( ph -> ( A R C <-> B R D ) ) $=
        ( wceq wbr wb breq12 syl2anc ) ABCIDEIBDFJCEFJKGHBCDEFLM $.
    $}

    ${
      breq123d.2 $e |- ( ph -> R = S ) $.
      breq123d.3 $e |- ( ph -> C = D ) $.
      $( Equality deduction for a binary relation.  (Contributed by NM,
         29-Oct-2011.) $)
      breq123d $p |- ( ph -> ( A R C <-> B S D ) ) $=
        ( wbr breq12d breqd bitrd ) ABDFKCEFKCEGKABCDEFHJLAFGCEIMN $.
    $}

    ${
      breqdi.1 $e |- ( ph -> C A D ) $.
      $( Equality deduction for a binary relation.  (Contributed by Thierry
         Arnoux, 5-Oct-2020.) $)
      breqdi $p |- ( ph -> C B D ) $=
        ( wbr breqd mpbid ) ADEBHDECHGABCDEFIJ $.
    $}

    ${
      breqan12i.2 $e |- ( ps -> C = D ) $.
      $( Equality deduction for a binary relation.  (Contributed by NM,
         8-Feb-1996.) $)
      breqan12d $p |- ( ( ph /\ ps ) -> ( A R C <-> B R D ) ) $=
        ( wceq wbr wb breq12 syl2an ) ACDJEFJCEGKDFGKLBHICDEFGMN $.

      $( Equality deduction for a binary relation.  (Contributed by NM,
         8-Feb-1996.) $)
      breqan12rd $p |- ( ( ps /\ ph ) -> ( A R C <-> B R D ) ) $=
        ( wbr wb breqan12d ancoms ) ABCEGJDFGJKABCDEFGHILM $.
    $}
  $}

  ${
    eqnbrtrd.1 $e |- ( ph -> A = B ) $.
    eqnbrtrd.2 $e |- ( ph -> -. B R C ) $.
    $( Substitution of equal classes into the negation of a binary relation.
       (Contributed by Glauco Siliprandi, 3-Jan-2021.) $)
    eqnbrtrd $p |- ( ph -> -. A R C ) $=
      ( wbr breq1d mtbird ) ABDEHCDEHGABCDEFIJ $.
  $}

  $( Two classes are different if they don't have the same relationship to a
     third class.  (Contributed by NM, 3-Jun-2012.) $)
  nbrne1 $p |- ( ( A R B /\ -. A R C ) -> B =/= C ) $=
    ( wbr wn wne wceq breq2 biimpcd necon3bd imp ) ABDEZACDEZFBCGMNBCBCHMNBCADI
    JKL $.

  $( Two classes are different if they don't have the same relationship to a
     third class.  (Contributed by NM, 3-Jun-2012.) $)
  nbrne2 $p |- ( ( A R C /\ -. B R C ) -> A =/= B ) $=
    ( wbr wn wne wceq breq1 biimpcd necon3bd imp ) ACDEZBCDEZFABGMNABABHMNABCDI
    JKL $.

  ${
    eqbrtr.1 $e |- A = B $.
    eqbrtr.2 $e |- B R C $.
    $( Substitution of equal classes into a binary relation.  (Contributed by
       NM, 1-Aug-1999.) $)
    eqbrtri $p |- A R C $=
      ( wbr breq1i mpbir ) ACDGBCDGFABCDEHI $.
  $}

  ${
    eqbrtrd.1 $e |- ( ph -> A = B ) $.
    eqbrtrd.2 $e |- ( ph -> B R C ) $.
    $( Substitution of equal classes into a binary relation.  (Contributed by
       NM, 8-Oct-1999.) $)
    eqbrtrd $p |- ( ph -> A R C ) $=
      ( wbr breq1d mpbird ) ABDEHCDEHGABCDEFIJ $.
  $}

  ${
    eqbrtrr.1 $e |- A = B $.
    eqbrtrr.2 $e |- A R C $.
    $( Substitution of equal classes into a binary relation.  (Contributed by
       NM, 1-Aug-1999.) $)
    eqbrtrri $p |- B R C $=
      ( eqcomi eqbrtri ) BACDABEGFH $.
  $}

  ${
    eqbrtrrd.1 $e |- ( ph -> A = B ) $.
    eqbrtrrd.2 $e |- ( ph -> A R C ) $.
    $( Substitution of equal classes into a binary relation.  (Contributed by
       NM, 24-Oct-1999.) $)
    eqbrtrrd $p |- ( ph -> B R C ) $=
      ( eqcomd eqbrtrd ) ACBDEABCFHGI $.
  $}

  ${
    breqtr.1 $e |- A R B $.
    breqtr.2 $e |- B = C $.
    $( Substitution of equal classes into a binary relation.  (Contributed by
       NM, 1-Aug-1999.) $)
    breqtri $p |- A R C $=
      ( wbr breq2i mpbi ) ABDGACDGEBCADFHI $.
  $}

  ${
    breqtrd.1 $e |- ( ph -> A R B ) $.
    breqtrd.2 $e |- ( ph -> B = C ) $.
    $( Substitution of equal classes into a binary relation.  (Contributed by
       NM, 24-Oct-1999.) $)
    breqtrd $p |- ( ph -> A R C ) $=
      ( wbr breq2d mpbid ) ABCEHBDEHFACDBEGIJ $.
  $}

  ${
    breqtrr.1 $e |- A R B $.
    breqtrr.2 $e |- C = B $.
    $( Substitution of equal classes into a binary relation.  (Contributed by
       NM, 1-Aug-1999.) $)
    breqtrri $p |- A R C $=
      ( eqcomi breqtri ) ABCDECBFGH $.
  $}

  ${
    breqtrrd.1 $e |- ( ph -> A R B ) $.
    breqtrrd.2 $e |- ( ph -> C = B ) $.
    $( Substitution of equal classes into a binary relation.  (Contributed by
       NM, 24-Oct-1999.) $)
    breqtrrd $p |- ( ph -> A R C ) $=
      ( eqcomd breqtrd ) ABCDEFADCGHI $.
  $}

  ${
    3brtr3.1 $e |- A R B $.
    3brtr3.2 $e |- A = C $.
    3brtr3.3 $e |- B = D $.
    $( Substitution of equality into both sides of a binary relation.
       (Contributed by NM, 11-Aug-1999.) $)
    3brtr3i $p |- C R D $=
      ( eqbrtrri breqtri ) CBDEACBEGFIHJ $.
  $}

  ${
    3brtr4.1 $e |- A R B $.
    3brtr4.2 $e |- C = A $.
    3brtr4.3 $e |- D = B $.
    $( Substitution of equality into both sides of a binary relation.
       (Contributed by NM, 11-Aug-1999.) $)
    3brtr4i $p |- C R D $=
      ( eqbrtri breqtrri ) CBDECABEGFIHJ $.
  $}

  ${
    3brtr3d.1 $e |- ( ph -> A R B ) $.
    3brtr3d.2 $e |- ( ph -> A = C ) $.
    3brtr3d.3 $e |- ( ph -> B = D ) $.
    $( Substitution of equality into both sides of a binary relation.
       (Contributed by NM, 18-Oct-1999.) $)
    3brtr3d $p |- ( ph -> C R D ) $=
      ( wbr breq12d mpbid ) ABCFJDEFJGABDCEFHIKL $.
  $}

  ${
    3brtr4d.1 $e |- ( ph -> A R B ) $.
    3brtr4d.2 $e |- ( ph -> C = A ) $.
    3brtr4d.3 $e |- ( ph -> D = B ) $.
    $( Substitution of equality into both sides of a binary relation.
       (Contributed by NM, 21-Feb-2005.) $)
    3brtr4d $p |- ( ph -> C R D ) $=
      ( wbr breq12d mpbird ) ADEFJBCFJGADBECFHIKL $.
  $}

  ${
    3brtr3g.1 $e |- ( ph -> A R B ) $.
    3brtr3g.2 $e |- A = C $.
    3brtr3g.3 $e |- B = D $.
    $( Substitution of equality into both sides of a binary relation.
       (Contributed by NM, 16-Jan-1997.) $)
    3brtr3g $p |- ( ph -> C R D ) $=
      ( wbr breq12i sylib ) ABCFJDEFJGBDCEFHIKL $.
  $}

  ${
    3brtr4g.1 $e |- ( ph -> A R B ) $.
    3brtr4g.2 $e |- C = A $.
    3brtr4g.3 $e |- D = B $.
    $( Substitution of equality into both sides of a binary relation.
       (Contributed by NM, 16-Jan-1997.) $)
    3brtr4g $p |- ( ph -> C R D ) $=
      ( wbr breq12i sylibr ) ABCFJDEFJGDBECFHIKL $.
  $}

  ${
    syl5eqbr.1 $e |- A = B $.
    syl5eqbr.2 $e |- ( ph -> B R C ) $.
    $( A chained equality inference for a binary relation.  (Contributed by NM,
       11-Oct-1999.) $)
    syl5eqbr $p |- ( ph -> A R C ) $=
      ( eqid 3brtr4g ) ACDBDEGFDHI $.
  $}

  ${
    syl5eqbrr.1 $e |- B = A $.
    syl5eqbrr.2 $e |- ( ph -> B R C ) $.
    $( A chained equality inference for a binary relation.  (Contributed by NM,
       17-Sep-2004.) $)
    syl5eqbrr $p |- ( ph -> A R C ) $=
      ( eqid 3brtr3g ) ACDBDEGFDHI $.
  $}

  ${
    syl5breq.1 $e |- A R B $.
    syl5breq.2 $e |- ( ph -> B = C ) $.
    $( A chained equality inference for a binary relation.  (Contributed by NM,
       11-Oct-1999.) $)
    syl5breq $p |- ( ph -> A R C ) $=
      ( wbr a1i breqtrd ) ABCDEBCEHAFIGJ $.
  $}

  ${
    syl5breqr.1 $e |- A R B $.
    syl5breqr.2 $e |- ( ph -> C = B ) $.
    $( A chained equality inference for a binary relation.  (Contributed by NM,
       24-Apr-2005.) $)
    syl5breqr $p |- ( ph -> A R C ) $=
      ( eqcomd syl5breq ) ABCDEFADCGHI $.
  $}

  ${
    syl6eqbr.1 $e |- ( ph -> A = B ) $.
    syl6eqbr.2 $e |- B R C $.
    $( A chained equality inference for a binary relation.  (Contributed by NM,
       12-Oct-1999.) $)
    syl6eqbr $p |- ( ph -> A R C ) $=
      ( wbr breq1d mpbiri ) ABDEHCDEHGABCDEFIJ $.
  $}

  ${
    syl6eqbrr.1 $e |- ( ph -> B = A ) $.
    syl6eqbrr.2 $e |- B R C $.
    $( A chained equality inference for a binary relation.  (Contributed by NM,
       4-Jan-2006.) $)
    syl6eqbrr $p |- ( ph -> A R C ) $=
      ( eqcomd syl6eqbr ) ABCDEACBFHGI $.
  $}

  ${
    syl6breq.1 $e |- ( ph -> A R B ) $.
    syl6breq.2 $e |- B = C $.
    $( A chained equality inference for a binary relation.  (Contributed by NM,
       11-Oct-1999.) $)
    syl6breq $p |- ( ph -> A R C ) $=
      ( eqid 3brtr3g ) ABCBDEFBHGI $.
  $}

  ${
    syl6breqr.1 $e |- ( ph -> A R B ) $.
    syl6breqr.2 $e |- C = B $.
    $( A chained equality inference for a binary relation.  (Contributed by NM,
       24-Apr-2005.) $)
    syl6breqr $p |- ( ph -> A R C ) $=
      ( eqcomi syl6breq ) ABCDEFDCGHI $.
  $}

  ${
    ssbrd.1 $e |- ( ph -> A C_ B ) $.
    $( Deduction from a subclass relationship of binary relations.
       (Contributed by NM, 30-Apr-2004.) $)
    ssbrd $p |- ( ph -> ( C A D -> C B D ) ) $=
      ( cop wcel wbr sseld df-br 3imtr4g ) ADEGZBHMCHDEBIDECIABCMFJDEBKDECKL $.
  $}

  $( Implication from a subclass relationship of binary relations.
     (Contributed by Peter Mazsa, 11-Nov-2019.) $)
  ssbr $p |- ( A C_ B -> ( C A D -> C B D ) ) $=
    ( wss id ssbrd ) ABEZABCDHFG $.

  ${
    ssbri.1 $e |- A C_ B $.
    $( Inference from a subclass relationship of binary relations.
       (Contributed by NM, 28-Mar-2007.)  (Revised by Mario Carneiro,
       8-Feb-2015.) $)
    ssbri $p |- ( C A D -> C B D ) $=
      ( wss wbr wi ssbr ax-mp ) ABFCDAGCDBGHEABCDIJ $.
  $}

  ${
    nfbrd.2 $e |- ( ph -> F/_ x A ) $.
    nfbrd.3 $e |- ( ph -> F/_ x R ) $.
    nfbrd.4 $e |- ( ph -> F/_ x B ) $.
    $( Deduction version of bound-variable hypothesis builder ~ nfbr .
       (Contributed by NM, 13-Dec-2005.)  (Revised by Mario Carneiro,
       14-Oct-2016.) $)
    nfbrd $p |- ( ph -> F/ x A R B ) $=
      ( wbr cop wcel df-br nfopd nfeld nfxfrd ) CDEICDJZEKABCDELABPEABCDFHMGNO
      $.
  $}

  ${
    nfbr.1 $e |- F/_ x A $.
    nfbr.2 $e |- F/_ x R $.
    nfbr.3 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for binary relation.  (Contributed by
       NM, 1-Sep-1999.)  (Revised by Mario Carneiro, 14-Oct-2016.) $)
    nfbr $p |- F/ x A R B $=
      ( wbr wnf wtru wnfc a1i nfbrd mptru ) BCDHAIJABCDABKJELADKJFLACKJGLMN $.
  $}

  ${
    $d x y $.  $d y z A $.  $d y z R $.
    $( Relationship between a binary relation and a class abstraction.
       (Contributed by Andrew Salmon, 8-Jul-2011.) $)
    brab1 $p |- ( x R A <-> x e. { z | z R A } ) $=
      ( vy cv wbr wsbc cab wcel wb cvv breq1 sbcie2g elv df-sbc bitr3i ) AFZCDG
      ZBFZCDGZBRHZRUABIJUBSKAUAEFZCDGSBERLTUCCDMUCRCDMNOUABRPQ $.
  $}

  $( The empty binary relation never holds.  (Contributed by NM,
     23-Aug-2018.) $)
  br0 $p |- -. A (/) B $=
    ( c0 wbr cop wcel noel df-br mtbir ) ABCDABEZCFJGABCHI $.

  $( If two sets are in a binary relation, the relation cannot be empty.
     (Contributed by Alexander van der Vekens, 7-Jul-2018.) $)
  brne0 $p |- ( A R B -> R =/= (/) ) $=
    ( wbr cop wcel c0 wne df-br ne0i sylbi ) ABCDABEZCFCGHABCICLJK $.

  $( The union of two binary relations.  (Contributed by NM, 21-Dec-2008.) $)
  brun $p |- ( A ( R u. S ) B <-> ( A R B \/ A S B ) ) $=
    ( cop cun wcel wo wbr elun df-br orbi12i 3bitr4i ) ABEZCDFZGNCGZNDGZHABOIAB
    CIZABDIZHNCDJABOKRPSQABCKABDKLM $.

  $( The intersection of two relations.  (Contributed by FL, 7-Oct-2008.) $)
  brin $p |- ( A ( R i^i S ) B <-> ( A R B /\ A S B ) ) $=
    ( cop cin wcel wa wbr elin df-br anbi12i 3bitr4i ) ABEZCDFZGNCGZNDGZHABOIAB
    CIZABDIZHNCDJABOKRPSQABCKABDKLM $.

  $( The difference of two binary relations.  (Contributed by Scott Fenton,
     11-Apr-2011.) $)
  brdif $p |- ( A ( R \ S ) B <-> ( A R B /\ -. A S B ) ) $=
    ( cop cdif wcel wn wa wbr eldif df-br notbii anbi12i 3bitr4i ) ABEZCDFZGPCG
    ZPDGZHZIABQJABCJZABDJZHZIPCDKABQLUARUCTABCLUBSABDLMNO $.

  ${
    $d y A $.  $d y B $.  $d y C $.  $d y R $.  $d x y $.
    $( Move substitution in and out of a binary relation.  (Contributed by NM,
       13-Dec-2005.)  (Revised by NM, 22-Aug-2018.) $)
    sbcbr123 $p |- ( [. A / x ]. B R C
           <-> [_ A / x ]_ B [_ A / x ]_ R [_ A / x ]_ C ) $=
      ( vy wbr wsbc cvv wcel csb sbcex wn c0 br0 csbprc csbeq1 breq123d nfcsb1v
      csbeq1a breqd mtbiri con4i wsb cv dfsbcq2 wceq nfbr weq vtoclbg pm5.21nii
      sbie ) CDEGZABHZBIJZABCKZABDKZABEKZGZUMABLUOUSUOMZUSUPUQNGUPUQOUTURNUPUQA
      BEPUAUBUCUMAFUDAFUEZCKZAVADKZAVAEKZGZUNUSFBIUMAFBUFVABUGVBUPVCUQVDURAVABC
      QAVABEQAVABDQRUMVEAFAVBVCVDAVACSAVAESAVADSUHAFUICVBDVCEVDAVACTAVAETAVADTR
      ULUJUK $.
  $}

  ${
    $d x B $.  $d x C $.
    $( Move substitution in and out of a binary relation.  (Contributed by NM,
       23-Aug-2018.) $)
    sbcbr $p |- ( [. A / x ]. B R C <-> B [_ A / x ]_ R C ) $=
      ( wbr wsbc csb sbcbr123 cvv wcel wb csbconstg breq12d wn br0 csbprc breqd
      c0 mtbiri 2falsed pm2.61i bitri ) CDEFABGABCHZABDHZABEHZFZCDUFFZABCDEIBJK
      ZUGUHLUIUDCUEDUFABCJMABDJMNUIOZUGUHUJUGUDUESFUDUEPUJUFSUDUEABEQZRTUJUHCDS
      FCDPUJUFSCDUKRTUAUBUC $.
  $}

  ${
    $d x R $.
    $( Move substitution in and out of a binary relation.  (Contributed by NM,
       13-Dec-2005.) $)
    sbcbr12g $p |- ( A e. V ->
                 ( [. A / x ]. B R C <-> [_ A / x ]_ B R [_ A / x ]_ C ) ) $=
      ( wbr wsbc csb wcel sbcbr123 csbconstg breqd syl5bb ) CDEGABHABCIZABDIZAB
      EIZGBFJZOPEGABCDEKRQEOPABEFLMN $.
  $}

  ${
    $d x C $.  $d x R $.
    $( Move substitution in and out of a binary relation.  (Contributed by NM,
       13-Dec-2005.) $)
    sbcbr1g $p |- ( A e. V -> ( [. A / x ]. B R C <-> [_ A / x ]_ B R C ) ) $=
      ( wcel wbr wsbc csb sbcbr12g csbconstg breq2d bitrd ) BFGZCDEHABIABCJZABD
      JZEHPDEHABCDEFKOQDPEABDFLMN $.
  $}

  ${
    $d x B $.  $d x R $.
    $( Move substitution in and out of a binary relation.  (Contributed by NM,
       13-Dec-2005.) $)
    sbcbr2g $p |- ( A e. V -> ( [. A / x ]. B R C <-> B R [_ A / x ]_ C ) ) $=
      ( wcel wbr wsbc csb sbcbr12g csbconstg breq1d bitrd ) BFGZCDEHABIABCJZABD
      JZEHCQEHABCDEFKOPCQEABCFLMN $.
  $}

  $( Characterization of the symmetric difference of two binary relations.
     (Contributed by Scott Fenton, 11-Apr-2012.) $)
  brsymdif $p |- ( A ( R /_\ S ) B <-> -. ( A R B <-> A S B ) ) $=
    ( csymdif wbr cop wcel wb wn df-br elsymdif bibi12i xchbinxr bitri ) ABCDEZ
    FABGZPHZABCFZABDFZIZJABPKRQCHZQDHZIUAQCDLSUBTUCABCKABDKMNO $.

  ${
    $d A x $.  $d B x y $.  $d R x $.  $d X x $.  $d Y x $.
    $( Restricted existential specialization with a restricted universal
       quantifier over a relation, closed form.  (Contributed by AV,
       20-Aug-2022.) $)
    brralrspcev $p |- ( ( B e. X /\ A. y e. Y A R B )
                        -> E. x e. X A. y e. Y A R x ) $=
      ( cv wbr wral wceq breq2 ralbidv rspcev ) CAHZEIZBGJCDEIZBGJADFODKPQBGODC
      ELMN $.

    $d ph x $.  $d ps x $.
    $( Restricted existential specialization with a restricted universal
       quantifier over an implication with a relation in the antecedent, closed
       form.  (Contributed by AV, 20-Aug-2022.) $)
    brimralrspcev $p |- ( ( B e. X /\ A. y e. Y ( ( ph /\ A R B ) -> ps ) )
                          -> E. x e. X A. y e. Y ( ( ph /\ A R x ) -> ps ) ) $=
      ( cv wbr wa wceq breq2 anbi2d rspceaimv ) AECJZGKZLAEFGKZLBCDFHIQFMRSAQFE
      GNOP $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Ordered-pair class abstractions (class builders)
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Extend class notation to include ordered-pair class abstraction (class
     builder). $)
  copab $a class { <. x , y >. | ph } $.

  ${
    $d x z $.  $d y z $.  $d z ph $.
    $( Define the class abstraction of a collection of ordered pairs.
       Definition 3.3 of [Monk1] p. 34.  Usually ` x ` and ` y ` are distinct,
       although the definition doesn't strictly require it (see ~ dfid2 for a
       case where they are not distinct).  The brace notation is called "class
       abstraction" by Quine; it is also (more commonly) called a "class
       builder" in the literature.  An alternate definition using no
       existential quantifiers is shown by ~ dfopab2 .  For example,
       ` R = { <. x , y >. | ( x e. CC /\ y e. CC /\ ( x + 1 ) = y ) } `
       ` -> 3 R 4 ` ( ~ ex-opab ).  (Contributed by NM, 4-Jul-1994.) $)
    df-opab $a |- { <. x , y >. | ph } =
                  { z | E. x E. y ( z = <. x , y >. /\ ph ) } $.
  $}

  ${
    $d x z R $.  $d y z R $.
    $( The collection of ordered pairs in a class is a subclass of it.
       (Contributed by NM, 27-Dec-1996.)  (Proof shortened by Andrew Salmon,
       9-Jul-2011.) $)
    opabss $p |- { <. x , y >. | x R y } C_ R $=
      ( vz cv wbr copab cop wceq wa wex cab df-opab df-br eleq1 biimpar sylan2b
      wcel exlimivv abssi eqsstri ) AEZBEZCFZABGDEZUBUCHZIZUDJZBKAKZDLCUDABDMUI
      DCUHUECRZABUDUGUFCRZUJUBUCCNUGUJUKUEUFCOPQSTUA $.
  $}

  ${
    $d x z $.  $d y z $.  $d z ph $.  $d z ps $.  $d z ch $.
    opabbid.1 $e |- F/ x ph $.
    opabbid.2 $e |- F/ y ph $.
    opabbid.3 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Equivalent wff's yield equal ordered-pair class abstractions (deduction
       form).  (Contributed by NM, 21-Feb-2004.)  (Proof shortened by Andrew
       Salmon, 9-Jul-2011.) $)
    opabbid $p |- ( ph -> { <. x , y >. | ps } = { <. x , y >. | ch } ) $=
      ( vz cv cop wceq wa wex cab copab anbi2d exbid abbidv df-opab 3eqtr4g ) A
      IJDJEJKLZBMZENZDNZIOUBCMZENZDNZIOBDEPCDEPAUEUHIAUDUGDFAUCUFEGABCUBHQRRSBD
      EITCDEITUA $.
  $}

  ${
    $d x ph $.  $d y ph $.
    opabbidv.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Equivalent wff's yield equal ordered-pair class abstractions (deduction
       form).  (Contributed by NM, 15-May-1995.) $)
    opabbidv $p |- ( ph -> { <. x , y >. | ps } = { <. x , y >. | ch } ) $=
      ( nfv opabbid ) ABCDEADGAEGFH $.
  $}

  ${
    $d x z $.  $d y z $.  $d z ph $.  $d z ps $.
    opabbii.1 $e |- ( ph <-> ps ) $.
    $( Equivalent wff's yield equal class abstractions.  (Contributed by NM,
       15-May-1995.) $)
    opabbii $p |- { <. x , y >. | ph } = { <. x , y >. | ps } $=
      ( vz cv wceq copab eqid wb a1i opabbidv ax-mp ) FGZOHZACDIBCDIHOJPABCDABK
      PELMN $.
  $}

  ${
    $d x z w $.  $d y z w $.  $d ph w $.
    nfopab.1 $e |- F/ z ph $.
    $( Bound-variable hypothesis builder for class abstraction.  (Contributed
       by NM, 1-Sep-1999.)  Remove disjoint variable conditions.  (Revised by
       Andrew Salmon, 11-Jul-2011.) $)
    nfopab $p |- F/_ z { <. x , y >. | ph } $=
      ( vw copab cv cop wceq wa wex cab df-opab nfv nfan nfex nfab nfcxfr ) DAB
      CGFHBHCHIJZAKZCLZBLZFMABCFNUCDFUBDBUADCTADTDOEPQQRS $.
  $}

  ${
    $d x z $.  $d y z $.  $d z ph $.
    $( The first abstraction variable in an ordered-pair class abstraction
       (class builder) is effectively not free.  (Contributed by NM,
       16-May-1995.)  (Revised by Mario Carneiro, 14-Oct-2016.) $)
    nfopab1 $p |- F/_ x { <. x , y >. | ph } $=
      ( vz copab cv cop wceq wa wex cab df-opab nfe1 nfab nfcxfr ) BABCEDFBFCFG
      HAICJZBJZDKABCDLQBDPBMNO $.

    $( The second abstraction variable in an ordered-pair class abstraction
       (class builder) is effectively not free.  (Contributed by NM,
       16-May-1995.)  (Revised by Mario Carneiro, 14-Oct-2016.) $)
    nfopab2 $p |- F/_ y { <. x , y >. | ph } $=
      ( vz copab cv cop wceq wa wex cab df-opab nfe1 nfex nfab nfcxfr ) CABCEDF
      BFCFGHAIZCJZBJZDKABCDLSCDRCBQCMNOP $.
  $}

  ${
    $d x y z w v $.  $d v ph $.  $d v ps $.
    cbvopab.1 $e |- F/ z ph $.
    cbvopab.2 $e |- F/ w ph $.
    cbvopab.3 $e |- F/ x ps $.
    cbvopab.4 $e |- F/ y ps $.
    cbvopab.5 $e |- ( ( x = z /\ y = w ) -> ( ph <-> ps ) ) $.
    $( Rule used to change bound variables in an ordered-pair class
       abstraction, using implicit substitution.  (Contributed by NM,
       14-Sep-2003.) $)
    cbvopab $p |- { <. x , y >. | ph } = { <. z , w >. | ps } $=
      ( vv cv cop wceq wa wex cab nfv nfan opeq12 eqeq2d anbi12d cbvex2 df-opab
      copab abbii 3eqtr4i ) LMZCMZDMZNZOZAPZDQCQZLRUIEMZFMZNZOZBPZFQEQZLRACDUFB
      EFUFUOVALUNUTCDEFUMAEUMESGTUMAFUMFSHTUSBCUSCSITUSBDUSDSJTUJUPOUKUQOPZUMUS
      ABVBULURUIUJUKUPUQUAUBKUCUDUGACDLUEBEFLUEUH $.
  $}

  ${
    $d x y z w $.  $d z w ph $.  $d x y ps $.
    cbvopabv.1 $e |- ( ( x = z /\ y = w ) -> ( ph <-> ps ) ) $.
    $( Rule used to change bound variables in an ordered-pair class
       abstraction, using implicit substitution.  (Contributed by NM,
       15-Oct-1996.) $)
    cbvopabv $p |- { <. x , y >. | ph } = { <. z , w >. | ps } $=
      ( nfv cbvopab ) ABCDEFAEHAFHBCHBDHGI $.
  $}

  ${
    $d v w x y $.  $d v w y z $.  $d v w ph $.  $d v w ps $.
    cbvopab1.1 $e |- F/ z ph $.
    cbvopab1.2 $e |- F/ x ps $.
    cbvopab1.3 $e |- ( x = z -> ( ph <-> ps ) ) $.
    $( Change first bound variable in an ordered-pair class abstraction, using
       explicit substitution.  (Contributed by NM, 6-Oct-2004.)  (Revised by
       Mario Carneiro, 14-Oct-2016.) $)
    cbvopab1 $p |- { <. x , y >. | ph } = { <. z , y >. | ps } $=
      ( vw vv cv cop wceq wa wex cab copab wsb nfv nfan nfs1v nfex opeq1 eqeq2d
      sbequ12 anbi12d exbidv cbvexv1 nfsb sbequ sbie syl6bb bitri abbii df-opab
      3eqtr4i ) IKZCKZDKZLZMZANZDOZCOZIPUQEKZUSLZMZBNZDOZEOZIPACDQBEDQVDVJIVDUQ
      JKZUSLZMZACJRZNZDOZJOVJVCVPCJVCJSVOCDVMVNCVMCSACJUATUBURVKMZVBVODVQVAVMAV
      NVQUTVLUQURVKUSUCUDACJUEUFUGUHVPVIJEVOEDVMVNEVMESACJEFUITUBVIJSVKVEMZVOVH
      DVRVMVGVNBVRVLVFUQVKVEUSUCUDVRVNACERBAJECUJABCEGHUKULUFUGUHUMUNACDIUOBEDI
      UOUP $.
  $}

  ${
    $d w x y z $.  $d w ph $.  $d w ps $.
    cbvopab2.1 $e |- F/ z ph $.
    cbvopab2.2 $e |- F/ y ps $.
    cbvopab2.3 $e |- ( y = z -> ( ph <-> ps ) ) $.
    $( Change second bound variable in an ordered-pair class abstraction, using
       explicit substitution.  (Contributed by NM, 22-Aug-2013.) $)
    cbvopab2 $p |- { <. x , y >. | ph } = { <. x , z >. | ps } $=
      ( vw cv cop wceq wa wex cab copab nfv nfan opeq2 df-opab anbi12d cbvexv1
      eqeq2d exbii abbii 3eqtr4i ) IJZCJZDJZKZLZAMZDNZCNZIOUGUHEJZKZLZBMZENZCNZ
      IOACDPBCEPUNUTIUMUSCULURDEUKAEUKEQFRUQBDUQDQGRUIUOLZUKUQABVAUJUPUGUIUOUHS
      UCHUAUBUDUEACDITBCEITUF $.
  $}

  ${
    $d x y z w $.  $d z w ph $.
    $( Change first bound variable in an ordered-pair class abstraction, using
       explicit substitution.  (Contributed by NM, 31-Jul-2003.) $)
    cbvopab1s $p |- { <. x , y >. | ph } = { <. z , y >. | [ z / x ] ph } $=
      ( vw cv cop wceq wa wex cab wsb copab nfv nfs1v nfan opeq1 eqeq2d df-opab
      nfex sbequ12 anbi12d exbidv cbvexv1 abbii 3eqtr4i ) EFZBFZCFZGZHZAIZCJZBJ
      ZEKUGDFZUIGZHZABDLZIZCJZDJZEKABCMURDCMUNVAEUMUTBDUMDNUSBCUQURBUQBNABDOPTU
      HUOHZULUSCVBUKUQAURVBUJUPUGUHUOUIQRABDUAUBUCUDUEABCESURDCESUF $.
  $}

  ${
    $d x y $.  $d y z $.  $d z ph $.  $d x ps $.
    cbvopab1v.1 $e |- ( x = z -> ( ph <-> ps ) ) $.
    $( Rule used to change the first bound variable in an ordered pair
       abstraction, using implicit substitution.  (Contributed by NM,
       31-Jul-2003.)  (Proof shortened by Eric Schmidt, 4-Apr-2007.) $)
    cbvopab1v $p |- { <. x , y >. | ph } = { <. z , y >. | ps } $=
      ( nfv cbvopab1 ) ABCDEAEGBCGFH $.
  $}

  ${
    $d x y z w $.  $d z w ph $.  $d y w ps $.
    cbvopab2v.1 $e |- ( y = z -> ( ph <-> ps ) ) $.
    $( Rule used to change the second bound variable in an ordered pair
       abstraction, using implicit substitution.  (Contributed by NM,
       2-Sep-1999.) $)
    cbvopab2v $p |- { <. x , y >. | ph } = { <. x , z >. | ps } $=
      ( vw cv cop wceq wex cab copab opeq2 eqeq2d anbi12d cbvexvw exbii df-opab
      wa abbii 3eqtr4i ) GHZCHZDHZIZJZATZDKZCKZGLUCUDEHZIZJZBTZEKZCKZGLACDMBCEM
      UJUPGUIUOCUHUNDEUEUKJZUGUMABUQUFULUCUEUKUDNOFPQRUAACDGSBCEGSUB $.
  $}

  ${
    $d x z $.  $d y z $.  $d ph z $.  $d ps z $.
    $( Union of two ordered pair class abstractions.  (Contributed by NM,
       30-Sep-2002.) $)
    unopab $p |- ( { <. x , y >. | ph } u. { <. x , y >. | ps } ) =
               { <. x , y >. | ( ph \/ ps ) } $=
      ( vz cv cop wceq wa wex cab wo copab unab 19.43 andi exbii bitr2i df-opab
      cun bitr3i abbii eqtri uneq12i 3eqtr4i ) EFCFDFGHZAIZDJZCJZEKZUFBIZDJZCJZ
      EKZTZUFABLZIZDJZCJZEKZACDMZBCDMZTUPCDMUOUIUMLZEKUTUIUMENVCUSEVCUHULLZCJUS
      UHULCOVDURCURUGUKLZDJVDUQVEDUFABPQUGUKDORQUAUBUCVAUJVBUNACDESBCDESUDUPCDE
      SUE $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Functions in maps-to notation
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $c |-> $.  $( Maps-to symbol $)

  $( Extend the definition of a class to include maps-to notation for defining
     a function via a rule. $)
  cmpt $a class ( x e. A |-> B ) $.

  ${
    $d x y $.  $d y A $.  $d y B $.
    $( Define maps-to notation for defining a function via a rule.  Read as
       "the function which maps ` x ` (in ` A ` ) to ` B ( x ) ` ".  The class
       expression ` B ` is the value of the function at ` x ` and normally
       contains the variable ` x ` .  An example is the square function for
       complex numbers, ` ( x e. CC |-> ( x ^ 2 ) ) ` .  Similar to the
       definition of mapping in [ChoquetDD] p. 2.  (Contributed by NM,
       17-Feb-2008.) $)
    df-mpt $a |- ( x e. A |-> B ) = { <. x , y >. | ( x e. A /\ y = B ) } $.
  $}

  ${
    $d x y ph $.  $d y A $.  $d y B $.  $d y C $.  $d y D $.
    $( An equality theorem for the maps-to notation.  (Contributed by Mario
       Carneiro, 16-Dec-2013.) $)
    mpteq12f $p |- ( ( A. x A = C /\ A. x e. A B = D ) ->
                    ( x e. A |-> B ) = ( x e. C |-> D ) ) $=
      ( vy wceq wal wral wa cv wcel copab cmpt nfa1 nfra1 nfan nfv rspa df-mpt
      eqeq2d pm5.32da sp eleq2d anbi1d sylan9bbr opabbid 3eqtr4g ) BDGZAHZCEGZA
      BIZJZAKZBLZFKZCGZJZAFMUNDLZUPEGZJZAFMABCNADENUMURVAAFUJULAUIAOUKABPQUMFRU
      LURUOUTJUJVAULUOUQUTULUOJCEUPUKABSUAUBUJUOUSUTUJBDUNUIAUCUDUEUFUGAFBCTAFD
      ETUH $.

    mpteq12dv.1 $e |- ( ph -> A = C ) $.
    ${
      mpteq12dva.2 $e |- ( ( ph /\ x e. A ) -> B = D ) $.
      $( An equality inference for the maps-to notation.  (Contributed by Mario
         Carneiro, 26-Jan-2017.) $)
      mpteq12dva $p |- ( ph -> ( x e. A |-> B ) = ( x e. C |-> D ) ) $=
        ( wceq wal wral cmpt alrimiv ralrimiva mpteq12f syl2anc ) ACEIZBJDFIZBC
        KBCDLBEFLIAQBGMARBCHNBCDEFOP $.
    $}

    mpteq12dv.2 $e |- ( ph -> B = D ) $.
    $( An equality inference for the maps-to notation.  (Contributed by NM,
       24-Aug-2011.)  (Revised by Mario Carneiro, 16-Dec-2013.) $)
    mpteq12dv $p |- ( ph -> ( x e. A |-> B ) = ( x e. C |-> D ) ) $=
      ( wceq cv wcel adantr mpteq12dva ) ABCDEFGADFIBJCKHLM $.
  $}

  ${
    $d A y $.  $d B y $.  $d C y $.  $d D y $.  $d ph y $.  $d x y $.
    mpteq12d.1 $e |- F/ x ph $.
    mpteq12d.3 $e |- ( ph -> A = C ) $.
    mpteq12d.4 $e |- ( ph -> B = D ) $.
    $( An equality inference for the maps-to notation.  Compare ~ mpteq12dv .
       (Contributed by Scott Fenton, 8-Aug-2013.)  (Revised by Mario Carneiro,
       11-Dec-2016.) $)
    mpteq12df $p |- ( ph -> ( x e. A |-> B ) = ( x e. C |-> D ) ) $=
      ( vy cv wcel wceq wa copab cmpt nfv eleq2d eqeq2d df-mpt anbi12d opabbid
      3eqtr4g ) ABKZCLZJKZDMZNZBJOUDELZUFFMZNZBJOBCDPBEFPAUHUKBJGAJQAUEUIUGUJAC
      EUDHRADFUFISUAUBBJCDTBJEFTUC $.
  $}

  ${
    $d x A $.  $d x C $.
    $( An equality theorem for the maps-to notation.  (Contributed by NM,
       16-Dec-2013.) $)
    mpteq12 $p |- ( ( A = C /\ A. x e. A B = D ) ->
                    ( x e. A |-> B ) = ( x e. C |-> D ) ) $=
      ( wceq wal wral cmpt ax-5 mpteq12f sylan ) BDFZMAGCEFABHABCIADEIFMAJABCDE
      KL $.
  $}

  ${
    $d x A $.  $d x B $.
    $( An equality theorem for the maps-to notation.  (Contributed by Mario
       Carneiro, 16-Dec-2013.) $)
    mpteq1 $p |- ( A = B -> ( x e. A |-> C ) = ( x e. B |-> C ) ) $=
      ( wceq wral cmpt cv wcel eqidd rgen mpteq12 mpan2 ) BCEDDEZABFABDGACDGENA
      BAHBIDJKABDCDLM $.

    mpteq1d.1 $e |- ( ph -> A = B ) $.
    $( An equality theorem for the maps-to notation.  (Contributed by Mario
       Carneiro, 11-Jun-2016.) $)
    mpteq1d $p |- ( ph -> ( x e. A |-> C ) = ( x e. B |-> C ) ) $=
      ( wceq cmpt mpteq1 syl ) ACDGBCEHBDEHGFBCDEIJ $.
  $}

  ${
    $d A x $.  $d B x $.
    mpteq1i.1 $e |- A = B $.
    $( An equality theorem for the maps-to notation.  (Contributed by Glauco
       Siliprandi, 17-Aug-2020.) $)
    mpteq1i $p |- ( x e. A |-> C ) = ( x e. B |-> C ) $=
      ( wceq cmpt mpteq1 ax-mp ) BCFABDGACDGFEABCDHI $.
  $}

  ${
    mpteq2ia.1 $e |- ( x e. A -> B = C ) $.
    $( An equality inference for the maps-to notation.  (Contributed by Mario
       Carneiro, 16-Dec-2013.) $)
    mpteq2ia $p |- ( x e. A |-> B ) = ( x e. A |-> C ) $=
      ( wceq wal wral cmpt eqid ax-gen rgen mpteq12f mp2an ) BBFZAGCDFZABHABCIA
      BDIFOABJKPABELABCBDMN $.
  $}

  ${
    mpteq2i.1 $e |- B = C $.
    $( An equality inference for the maps-to notation.  (Contributed by Mario
       Carneiro, 16-Dec-2013.) $)
    mpteq2i $p |- ( x e. A |-> B ) = ( x e. A |-> C ) $=
      ( wceq cv wcel a1i mpteq2ia ) ABCDCDFAGBHEIJ $.
  $}

  ${
    mpteq12i.1 $e |- A = C $.
    mpteq12i.2 $e |- B = D $.
    $( An equality inference for the maps-to notation.  (Contributed by Scott
       Fenton, 27-Oct-2010.)  (Revised by Mario Carneiro, 16-Dec-2013.) $)
    mpteq12i $p |- ( x e. A |-> B ) = ( x e. C |-> D ) $=
      ( cmpt wceq wtru a1i mpteq12dv mptru ) ABCHADEHIJABCDEBDIJFKCEIJGKLM $.
  $}

  ${
    mpteq2da.1 $e |- F/ x ph $.
    mpteq2da.2 $e |- ( ( ph /\ x e. A ) -> B = C ) $.
    $( Slightly more general equality inference for the maps-to notation.
       (Contributed by FL, 14-Sep-2013.)  (Revised by Mario Carneiro,
       16-Dec-2013.) $)
    mpteq2da $p |- ( ph -> ( x e. A |-> B ) = ( x e. A |-> C ) ) $=
      ( wceq wal wral cmpt eqid ax-gen cv wcel ex ralrimi mpteq12f sylancr ) AC
      CHZBIDEHZBCJBCDKBCEKHTBCLMAUABCFABNCOUAGPQBCDCERS $.
  $}

  ${
    $d x ph $.
    mpteq2dva.1 $e |- ( ( ph /\ x e. A ) -> B = C ) $.
    $( Slightly more general equality inference for the maps-to notation.
       (Contributed by Scott Fenton, 25-Apr-2012.) $)
    mpteq2dva $p |- ( ph -> ( x e. A |-> B ) = ( x e. A |-> C ) ) $=
      ( nfv mpteq2da ) ABCDEABGFH $.
  $}

  ${
    $d x ph $.
    mpteq2dv.1 $e |- ( ph -> B = C ) $.
    $( An equality inference for the maps-to notation.  (Contributed by Mario
       Carneiro, 23-Aug-2014.) $)
    mpteq2dv $p |- ( ph -> ( x e. A |-> B ) = ( x e. A |-> C ) ) $=
      ( wceq cv wcel adantr mpteq2dva ) ABCDEADEGBHCIFJK $.
  $}

  ${
    $d z A $.  $d z B $.  $d x y z $.
    nfmpt.1 $e |- F/_ x A $.
    nfmpt.2 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for the maps-to notation.
       (Contributed by NM, 20-Feb-2013.) $)
    nfmpt $p |- F/_ x ( y e. A |-> B ) $=
      ( vz cmpt cv wcel wceq wa copab df-mpt nfcri nfeq2 nfan nfopab nfcxfr ) A
      BCDHBICJZGIZDKZLZBGMBGCDNUCBGATUBAABCEOAUADFPQRS $.
  $}

  ${
    $d A z $.  $d B z $.  $d x z $.
    $( Bound-variable hypothesis builder for the maps-to notation.
       (Contributed by FL, 17-Feb-2008.) $)
    nfmpt1 $p |- F/_ x ( x e. A |-> B ) $=
      ( vz cmpt cv wcel wceq wa copab df-mpt nfopab1 nfcxfr ) AABCEAFBGDFCHIZAD
      JADBCKNADLM $.
  $}

  ${
    $d w x y z $.  $d w z A $.  $d w z A $.  $d w z B $.  $d w z C $.
    cbvmptf.1 $e |- F/_ x A $.
    cbvmptf.2 $e |- F/_ y A $.
    cbvmptf.3 $e |- F/_ y B $.
    cbvmptf.4 $e |- F/_ x C $.
    cbvmptf.5 $e |- ( x = y -> B = C ) $.
    $( Rule to change the bound variable in a maps-to function, using implicit
       substitution.  This version has bound-variable hypotheses in place of
       distinct variable conditions.  (Contributed by Thierry Arnoux,
       9-Mar-2017.) $)
    cbvmptf $p |- ( x e. A |-> B ) = ( y e. A |-> C ) $=
      ( vz vw cv wcel wceq wa copab cmpt nfv weq wsb nfcri nfs1v eleq1w sbequ12
      nfan anbi12d cbvopab1 nfeq2 nfsb eqeq2d sbhypf eqtri df-mpt 3eqtr4i ) AMC
      NZKMZDOZPZAKQZBMZCNZUQEOZPZBKQZACDRBCERUTLMCNZURALUAZPZLKQVEUSVHAKLUSLSVF
      VGAALCFUBURALUCUFALTUPVFURVGALCUDURALUEUGUHVHVDLKBVFVGBBLCGUBURALBBUQDHUI
      UJUFVDLSLBTVFVBVGVCLBCUDURVCALVAAUQEIUIABTDEUQJUKULUGUHUMAKCDUNBKCEUNUO
      $.
  $}

  ${
    $d w z x A $.  $d w z y A $.  $d w z B $.  $d w z C $.
    cbvmpt.1 $e |- F/_ y B $.
    cbvmpt.2 $e |- F/_ x C $.
    cbvmpt.3 $e |- ( x = y -> B = C ) $.
    $( Rule to change the bound variable in a maps-to function, using implicit
       substitution.  This version has bound-variable hypotheses in place of
       distinct variable conditions.  (Contributed by NM, 11-Sep-2011.) $)
    cbvmpt $p |- ( x e. A |-> B ) = ( y e. A |-> C ) $=
      ( vz vw cv wcel wceq wa copab cmpt wsb nfv nfan weq nfs1v sbequ12 anbi12d
      eleq1w cbvopab1 nfeq2 nfsb sbequ eqeq2d sbie syl6bb eqtri df-mpt 3eqtr4i
      ) AKCLZIKZDMZNZAIOZBKCLZUPEMZNZBIOZACDPBCEPUSJKCLZUQAJQZNZJIOVCURVFAIJURJ
      RVDVEAVDARUQAJUASAJTUOVDUQVEAJCUDUQAJUBUCUEVFVBJIBVDVEBVDBRUQAJBBUPDFUFUG
      SVBJRJBTZVDUTVEVAJBCUDVGVEUQABQVAUQJBAUHUQVAABAUPEGUFABTDEUPHUIUJUKUCUEUL
      AICDUMBICEUMUN $.
  $}

  ${
    $d A x $.  $d A y $.  $d B y $.  $d C x $.
    cbvmptv.1 $e |- ( x = y -> B = C ) $.
    $( Rule to change the bound variable in a maps-to function, using implicit
       substitution.  (Contributed by Mario Carneiro, 19-Feb-2013.) $)
    cbvmptv $p |- ( x e. A |-> B ) = ( y e. A |-> C ) $=
      ( nfcv cbvmpt ) ABCDEBDGAEGFH $.
  $}

  ${
    $d x y $.  $d y B $.
    $( Function with universal domain in maps-to notation.  (Contributed by NM,
       16-Aug-2013.) $)
    mptv $p |- ( x e. _V |-> B ) = { <. x , y >. | y = B } $=
      ( cvv cmpt cv wcel wceq wa copab df-mpt vex biantrur opabbii eqtr4i ) ADC
      EAFDGZBFCHZIZABJQABJABDCKQRABPQALMNO $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Transitive classes
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Declare a new symbol. $)
  $c Tr $.  $( Transitive predicate.  Read:  "the following class is
              transitive". $)

  $( Extend wff notation to include transitive classes.  Notation from
     [TakeutiZaring] p. 35. $)
  wtr $a wff Tr A $.

  $( Define the transitive class predicate.  Not to be confused with a
     transitive relation (see ~ cotr ).  Definition of [Enderton] p. 71
     extended to arbitrary classes.  For alternate definitions, see ~ dftr2
     (which is suggestive of the word "transitive"), ~ dftr3 , ~ dftr4 ,
     ~ dftr5 , and (when ` A ` is a set) ~ unisuc .  The term "complete" is
     used instead of "transitive" in Definition 3 of [Suppes] p. 130.
     (Contributed by NM, 29-Aug-1993.) $)
  df-tr $a |- ( Tr A <-> U. A C_ A ) $.

  ${
    $d x y A $.
    $( An alternate way of defining a transitive class.  Exercise 7 of
       [TakeutiZaring] p. 40.  (Contributed by NM, 24-Apr-1994.) $)
    dftr2 $p |- ( Tr A <-> A. x A. y ( ( x e. y /\ y e. A ) -> x e. A ) ) $=
      ( cuni wss cv wcel wi wal wa dfss2 df-tr 19.23v eluni imbi1i bitr4i albii
      wtr wex 3bitr4i ) CDZCEAFZUAGZUBCGZHZAICRUBBFZGUFCGJZUDHBIZAIAUACKCLUHUEA
      UHUGBSZUDHUEUGUDBMUCUIUDBUBCNOPQT $.

    $( An alternate way of defining a transitive class.  (Contributed by NM,
       20-Mar-2004.) $)
    dftr5 $p |- ( Tr A <-> A. x e. A A. y e. x y e. A ) $=
      ( wtr cv wcel wa wi wal wral dftr2 alcom impexp albii df-ral bitr4i bitri
      r19.21v ) CDBEZAEZFZTCFZGSCFZHZAIBIZUCBTJZACJZBACKUEUDBIZAIZUGUDBALUIUBUF
      HZAIUGUHUJAUHUBUCHZBTJZUJUHUAUKHZBIULUDUMBUAUBUCMNUKBTOPUBUCBTRQNUFACOPQQ
      $.

    $( An alternate way of defining a transitive class.  Definition 7.1 of
       [TakeutiZaring] p. 35.  (Contributed by NM, 29-Aug-1993.) $)
    dftr3 $p |- ( Tr A <-> A. x e. A x C_ A ) $=
      ( vy wtr cv wcel wral wss dftr5 dfss3 ralbii bitr4i ) BDCEBFCAEZGZABGMBHZ
      ABGACBIONABCMBJKL $.
  $}

  $( An alternate way of defining a transitive class.  Definition of [Enderton]
     p. 71.  (Contributed by NM, 29-Aug-1993.) $)
  dftr4 $p |- ( Tr A <-> A C_ ~P A ) $=
    ( wtr cuni wss cpw df-tr sspwuni bitr4i ) ABACADAAEDAFAAGH $.

  $( Equality theorem for the transitive class predicate.  (Contributed by NM,
     17-Sep-1993.) $)
  treq $p |- ( A = B -> ( Tr A <-> Tr B ) ) $=
    ( wceq cuni wss wtr unieq sseq1d sseq2 bitrd df-tr 3bitr4g ) ABCZADZAEZBDZB
    EZAFBFMOPAEQMNPAABGHABPIJAKBKL $.

  ${
    $d x y A $.  $d x y B $.  $d x y C $.
    $( In a transitive class, the membership relation is transitive.
       (Contributed by NM, 19-Apr-1994.)  (Proof shortened by Andrew Salmon,
       9-Jul-2011.) $)
    trel $p |- ( Tr A -> ( ( B e. C /\ C e. A ) -> B e. A ) ) $=
      ( vy vx wtr cv wcel wa wi wal dftr2 eleq12 wb eleq1 adantl anbi12d adantr
      wceq imbi12d spc2gv pm2.43b sylbi ) AFDGZEGZHZUEAHZIZUDAHZJZEKDKZBCHZCAHZ
      IZBAHZJZDEALUKUNUOUJUPDEBCCAUDBSZUECSZIZUHUNUIUOUSUFULUGUMUDBUECMURUGUMNU
      QUECAOPQUQUIUONURUDBAORTUAUBUC $.
  $}

  $( In a transitive class, the membership relation is transitive.
     (Contributed by NM, 19-Apr-1994.) $)
  trel3 $p |- ( Tr A -> ( ( B e. C /\ C e. D /\ D e. A ) -> B e. A ) ) $=
    ( wtr wcel w3a wa 3anass trel anim2d syl5bi syld ) AEZBCFZCDFZDAFZGZOCAFZHZ
    BAFROPQHZHNTOPQINUASOACDJKLABCJM $.

  ${
    $d x A $.  $d x B $.
    $( An element of a transitive class is a subset of the class.  (Contributed
       by NM, 7-Aug-1994.)  (Proof shortened by JJ, 26-Jul-2021.) $)
    trss $p |- ( Tr A -> ( B e. A -> B C_ A ) ) $=
      ( vx wtr cv wss wral wcel wi dftr3 sseq1 rspccv sylbi ) ADCEZAFZCAGBAHBAF
      ZICAJOPCBANBAKLM $.
  $}

  ${
    $d x A $.  $d x B $.
    $( The intersection of transitive classes is transitive.  (Contributed by
       NM, 9-May-1994.) $)
    trin $p |- ( ( Tr A /\ Tr B ) -> Tr ( A i^i B ) ) $=
      ( vx wtr cin wss wral wcel elin trss im2anan9 syl5bi ssin syl6ib ralrimiv
      wa cv dftr3 sylibr ) ADZBDZPZCQZABEZFZCUDGUDDUBUECUDUBUCUDHZUCAFZUCBFZPZU
      EUFUCAHZUCBHZPUBUIUCABITUJUGUAUKUHAUCJBUCJKLUCABMNOCUDRS $.
  $}

  $( The empty set is transitive.  (Contributed by NM, 16-Sep-1993.) $)
  tr0 $p |- Tr (/) $=
    ( c0 wtr cpw wss 0ss dftr4 mpbir ) ABAACZDHEAFG $.

  $( The universe is transitive.  (Contributed by NM, 14-Sep-2003.) $)
  trv $p |- Tr _V $=
    ( cvv wtr cuni wss ssv df-tr mpbir ) ABACZADHEAFG $.

  ${
    $d y x $.  $d y A $.  $d y B $.
    $( An indexed union of a class of transitive sets is transitive.
       (Contributed by Mario Carneiro, 16-Nov-2014.) $)
    triun $p |- ( A. x e. A Tr B -> Tr U_ x e. A B ) $=
      ( vy wtr wral cv ciun wss wcel wrex eliun r19.29 nfcv nfiu1 nfss trss imp
      wa ssiun2 sstr2 syl2imc rexlimi syl sylan2b ralrimiva dftr3 sylibr ) CEZA
      BFZDGZABCHZIZDULFULEUJUMDULUKULJUJUKCJZABKZUMAUKBCLUJUOSUIUNSZABKUMUIUNAB
      MUPUMABAUKULAUKNABCOPUPUKCIZAGBJCULIUMUIUNUQCUKQRABCTUKCULUAUBUCUDUEUFDUL
      UGUH $.
  $}

  ${
    $d A x $.
    $( The union of a class of transitive sets is transitive.  Exercise 5(a) of
       [Enderton] p. 73.  (Contributed by Scott Fenton, 21-Feb-2011.)  (Proof
       shortened by Mario Carneiro, 26-Apr-2014.) $)
    truni $p |- ( A. x e. A Tr x -> Tr U. A ) $=
      ( cv wtr wral ciun cuni triun wceq wb uniiun treq ax-mp sylibr ) ACZDABEA
      BOFZDZBGZDZABOHRPISQJABKRPLMN $.
  $}

  ${
    $d y x $.  $d y A $.  $d y B $.
    $( An indexed intersection of a class of transitive sets is transitive.
       (Contributed by BJ, 3-Oct-2022.) $)
    triin $p |- ( A. x e. A Tr B -> Tr |^|_ x e. A B ) $=
      ( vy wtr wral cv ciin wss wcel wb cvv eliin elv wa r19.26 trss imp ralimi
      sylibr sylbir ssiin sylan2b ralrimiva dftr3 ) CEZABFZDGZABCHZIZDUIFUIEUGU
      JDUIUHUIJZUGUHCJZABFZUJUKUMKDAUHBCLMNUGUMOZUHCIZABFZUJUNUFULOZABFUPUFULAB
      PUQUOABUFULUOCUHQRSUAABCUHUBTUCUDDUIUET $.
  $}

  ${
    $d A x $.
    $( The intersection of a class of transitive sets is transitive.  Exercise
       5(b) of [Enderton] p. 73.  (Contributed by Scott Fenton, 25-Feb-2011.)
       (Proof shortened by BJ, 3-Oct-2022.) $)
    trint $p |- ( A. x e. A Tr x -> Tr |^| A ) $=
      ( cv wtr wral ciin cint triin wceq wb intiin treq ax-mp sylibr ) ACZDABEA
      BOFZDZBGZDZABOHRPISQJABKRPLMN $.
  $}

  ${
    $d x y A $.
    $( Obsolete proof of ~ trintOLD as of 3-Oct-2022.  (Contributed by Scott
       Fenton, 25-Feb-2011.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    trintOLD $p |- ( A. x e. A Tr x -> Tr |^| A ) $=
      ( vy cv wtr wral wel wss wal cint dftr3 ralbii df-ral ralcom4 bitri sylbb
      wi ralim sylg wcel vex elint2 ssint imbi12i albii sylibr ) ADZEZABFZCAGZA
      BFZCDZUGHZABFZQZCIZBJZEZUIUJUMQZABFZUOCUIUMCUGFZABFZUTCIZUHVAABCUGKLVBUSC
      IZABFVCVAVDABUMCUGMLUSACBNOPUJUMABRSURULUQHZCUQFZUPCUQKVFULUQTZVEQZCIUPVE
      CUQMVHUOCVGUKVEUNAULBCUAUBAULBUCUDUEOOUF $.
  $}

  ${
    $d x A $.
    $( Any nonempty transitive class includes its intersection.  Exercise 3 in
       [TakeutiZaring] p. 44 (which mistakenly does not include the
       nonemptiness hypothesis).  (Contributed by Scott Fenton, 3-Mar-2011.)
       (Proof shortened by Andrew Salmon, 14-Nov-2011.) $)
    trintss $p |- ( ( Tr A /\ A =/= (/) ) -> |^| A C_ A ) $=
      ( vx c0 wne wtr cint wss cv wcel wex wi intss1 trss com12 sylsyld exlimiv
      n0 sstr2 sylbi impcom ) ACDZAEZAFZAGZUABHZAIZBJUBUDKZBAQUFUGBUFUCUEGUBUEA
      GZUDUEALUBUFUHAUEMNUCUEAROPST $.
  $}

$( End $[ set-class.mm $] $)


$(
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
  ZF Set Theory - add the Axiom of Replacement
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
$)


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Introduce the Axiom of Replacement
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    $d x y z w $.
    $( Axiom of Replacement.  An axiom scheme of Zermelo-Fraenkel set theory.
       Axiom 5 of [TakeutiZaring] p. 19.  It tells us that the image of any set
       under a function is also a set (see the variant ~ funimaex ).  Although
       ` ph ` may be any wff whatsoever, this axiom is useful (i.e. its
       antecedent is satisfied) when we are given some function and ` ph `
       encodes the predicate "the value of the function at ` w ` is ` z ` ".
       Thus, ` ph ` will ordinarily have free variables ` w ` and ` z ` - think
       of it informally as ` ph ( w , z ) ` .  We prefix ` ph ` with the
       quantifier ` A. y ` in order to "protect" the axiom from any ` ph `
       containing ` y ` , thus allowing us to eliminate any restrictions on
       ` ph ` .  Another common variant is derived as ~ axrep5 , where you can
       find some further remarks.  A slightly more compact version is shown as
       ~ axrep2 .  A quite different variant is ~ zfrep6 , which if used in
       place of ~ ax-rep would also require that the Separation Scheme ~ axsep
       be stated as a separate axiom.

       There is a very strong generalization of Replacement that doesn't demand
       function-like behavior of ` ph ` .  Two versions of this generalization
       are called the Collection Principle ~ cp and the Boundedness Axiom
       ~ bnd .

       Many developments of set theory distinguish the uses of Replacement from
       uses of the weaker axioms of Separation ~ axsep , Null Set ~ axnul , and
       Pairing ~ axpr , all of which we derive from Replacement.  In order to
       make it easier to identify the uses of those redundant axioms, we
       restate them as axioms ~ ax-sep , ~ ax-nul , and ~ ax-pr below the
       theorems that prove them.  (Contributed by NM, 23-Dec-1993.) $)
    ax-rep $a |- ( A. w E. y A. z ( A. y ph -> z = y ) ->
                     E. y A. z ( z e. y <-> E. w ( w e. x /\ A. y ph ) ) ) $.
  $}

  ${
    $d w y ph $.  $d w x y z $.
    $( The version of the Axiom of Replacement used in the Metamath Solitaire
       applet ~ http://us.metamath.org/mmsolitaire/mms.html .  Equivalence is
       shown via the path ~ ax-rep ` -> ` ~ axrep1 ` -> ` ~ axrep2 ` -> `
       ~ axrepnd ` -> ` ~ zfcndrep = ~ ax-rep .  (Contributed by NM,
       19-Nov-2005.)  (Proof shortened by Mario Carneiro, 17-Nov-2016.) $)
    axrep1 $p |- E. x ( E. y A. z ( ph -> z = y ) ->
                 A. z ( z e. x <-> E. x ( x e. y /\ ph ) ) ) $=
      ( vw weq wi wal wex wel wa elequ2 anbi1d exbidv bibi2d albidv albii exbii
      wb nfv imbi2d ax-rep imbi1i nfe1 nfbi nfal anbi2i bibi12d cbvexv1 3imtr3i
      19.3v a1i chvarv 19.35ri ) ADCFZGZDHZCIZDBJZBCJZAKZBIZSZDHZBURBHZUSBEJZAK
      ZBIZSZDHZBIZGVEVDBIZGECECFZVKVLVEVMVJVDBVMVIVCDVMVHVBUSVMVGVABVMVFUTAECBL
      MNOPNUAACHZUOGZDHZCIZBHDCJZVFVNKZBIZSZDHZCIVEVKAECDBUBVQURBVPUQCVOUPDVNAU
      OACUKZUCQRQWBVJCBWABDVRVTBVRBTVSBUDUEUFVJCTCBFZWAVIDWDVRUSVTVHCBDLVTVHSWD
      VSVGBVNAVFWCUGRULUHPUIUJUMUN $.
  $}

  ${
    $d u x $.  $d u y $.  $d v x $.  $d v y $.  $d w x $.  $d w y $.
    $( Lemma for ~ axrep2 and ~ axrep3 .  (Contributed by BJ, 6-Aug-2022.) $)
    axreplem $p |- ( x = y ->
                  ( E. u ( ph -> A. v ( ps <-> E. w ( z e. x /\ ch ) ) ) <->
                    E. u ( ph -> A. v ( ps <-> E. w ( z e. y /\ ch ) ) ) ) ) $=
      ( weq wel wa wex wb wal wi elequ2 anbi1d exbidv bibi2d albidv imbi2d ) DE
      JZABFDKZCLZGMZNZHOZPABFEKZCLZGMZNZHOZPIUCUHUMAUCUGULHUCUFUKBUCUEUJGUCUDUI
      CDEFQRSTUAUBS $.
  $}

  ${
    $d w ph $.  $d w x y z $.
    $( Axiom of Replacement expressed with the fewest number of different
       variables and without any restrictions on ` ph ` .  (Contributed by NM,
       15-Aug-2003.) $)
    axrep2 $p |- E. x ( E. y A. z ( ph -> z = y ) ->
                        A. z ( z e. x <-> E. x ( x e. y /\ A. y ph ) ) ) $=
      ( vw wal weq wi wex wel wa wb nfe1 nfim nfex axreplem axrep1 chvar imim1i
      nfv sp alimi eximi nfa1 nfal equequ2 imbi2d albidv cbvexv1 sylib eximii )
      ACFZDEGZHZDFZEIZDBJZBCJULKBILDFZHZADCGZHZDFZCIZURHBUPUQBEJULKBILDFHBIUSBI
      ECUSEBUPUREUOEMURETNOUPUQULECBBDBPULBEDQRVCUPURVCULUTHZDFZCIUPVBVECVAVDDU
      LAUTACUASUBUCVEUOCEVEETUNCDULUMCACUDUMCTNUECEGZVDUNDVFUTUMULCEDUFUGUHUIUJ
      SUK $.
  $}

  ${
    $d w x y z $.
    $( Axiom of Replacement slightly strengthened from ~ axrep2 ; ` w ` may
       occur free in ` ph ` .  (Contributed by NM, 2-Jan-1997.) $)
    axrep3 $p |- E. x ( E. y A. z ( ph -> z = y ) ->
                 A. z ( z e. x <-> E. x ( x e. w /\ A. y ph ) ) ) $=
      ( weq wi wal wex wel wa wb nfe1 nfv nfa1 nfan nfex nfbi nfal nfim axrep2
      axreplem chvar ) ADCFGDHZCIZDBJZBCJACHZKBILDHGBIUEUFBEJZUGKZBIZLZDHZGZBIC
      EUMCBUEULCUDCMUKCDUFUJCUFCNUICBUHUGCUHCNACOPQRSTQUEUFUGCEBBDBUBABCDUAUC
      $.
  $}

  ${
    $d x y z w $.
    axrep4.1 $e |- F/ z ph $.
    $( A more traditional version of the Axiom of Replacement.  (Contributed by
       NM, 14-Aug-1994.) $)
    axrep4 $p |- ( A. x E. z A. y ( ph -> y = z ) ->
                E. z A. y ( y e. z <-> E. x ( x e. w /\ ph ) ) ) $=
      ( weq wi wal wex wel wa wb axrep3 19.35i nfv nfa1 nfan nfbi nfal nfex a1i
      nfe1 elequ2 19.3 anbi2i exbii bibi12d albidv cbvexv1 sylib ) ACDGHCIDJZBI
      CBKZBEKZADIZLZBJZMZCIZBJCDKZUNALZBJZMZCIZDJULUSBABDCENOUSVDBDURDCUMUQDUMD
      PUPDBUNUODUNDPADQRUASTVCBCUTVBBUTBPVABUCSTBDGZURVCCVEUMUTUQVBBDCUDUQVBMVE
      UPVABUOAUNADFUEUFUGUBUHUIUJUK $.
  $}

  ${
    $d x y z w $.
    axrep5.1 $e |- F/ z ph $.
    $( Axiom of Replacement (similar to Axiom Rep of [BellMachover] p. 463).
       The antecedent tells us ` ph ` is analogous to a "function" from ` x `
       to ` y ` (although it is not really a function since it is a wff and not
       a class).  In the consequent we postulate the existence of a set ` z `
       that corresponds to the "image" of ` ph ` restricted to some other set
       ` w ` .  The hypothesis says ` z ` must not be free in ` ph ` .
       (Contributed by NM, 26-Nov-1995.)  (Revised by Mario Carneiro,
       14-Oct-2016.) $)
    axrep5 $p |- ( A. x ( x e. w -> E. z A. y ( ph -> y = z ) ) ->
                E. z A. y ( y e. z <-> E. x ( x e. w /\ ph ) ) ) $=
      ( wel weq wi wal wex wa wb 19.37v impexp albii 19.21v bitr2i exbii bitr3i
      nfv nfan axrep4 sylbi anabs5 bibi2i sylib ) BEGZACDHZIZCJZDKIZBJZCDGZUHUH
      ALZLZBKZMZCJZDKZUNUOBKZMZCJZDKUMUOUIIZCJZDKZBJUTULVFBULUHUKIZDKVFUHUKDNVG
      VEDVEUHUJIZCJVGVDVHCUHAUIOPUHUJCQRSTPUOBCDEUHADUHDUAFUBUCUDUSVCDURVBCUQVA
      UNUPUOBUHAUESUFPSUG $.
  $}

  ${
    $d y z A v $.  $d z ph v $.  $d x y z v $.
    zfrepclf.1 $e |- F/_ x A $.
    zfrepclf.2 $e |- A e. _V $.
    zfrepclf.3 $e |- ( x e. A -> E. z A. y ( ph -> y = z ) ) $.
    $( An inference based on the Axiom of Replacement.  Typically, ` ph `
       defines a function from ` x ` to ` y ` .  (Contributed by NM,
       26-Nov-1995.) $)
    zfrepclf $p |- E. z A. y ( y e. z <-> E. x ( x e. A /\ ph ) ) $=
      ( vv wel cv wcel wa wex wb wal wceq wi nfeq2 eleq2 syl6bi nfv exbid mpbid
      alrimi axrep5 syl anbi1d bibi2d albidv exbidv vtocle ) CDJZBKZELZAMZBNZOZ
      CPZDNZIEGIKZEQZUMBIJZAMZBNZOZCPZDNZUTVBVCACKDKQRCPDNZRZBPVHVBVJBBVAEFSZVB
      VCUOVIVAEUNTZHUAUEABCDIADUBUFUGVBVGUSDVBVFURCVBVEUQUMVBVDUPBVKVBVCUOAVLUH
      UCUIUJUKUDUL $.
  $}

  ${
    $d x y z A $.  $d z ph $.
    zfrep3cl.1 $e |- A e. _V $.
    zfrep3cl.2 $e |- ( x e. A -> E. z A. y ( ph -> y = z ) ) $.
    $( An inference based on the Axiom of Replacement.  Typically, ` ph `
       defines a function from ` x ` to ` y ` .  (Contributed by NM,
       26-Nov-1995.) $)
    zfrep3cl $p |- E. z A. y ( y e. z <-> E. x ( x e. A /\ ph ) ) $=
      ( nfcv zfrepclf ) ABCDEBEHFGI $.
  $}

  ${
    $d ph y z $.  $d ps z $.  $d x y z $.
    zfrep4.1 $e |- { x | ph } e. _V $.
    zfrep4.2 $e |- ( ph -> E. z A. y ( ps -> y = z ) ) $.
    $( A version of Replacement using class abstractions.  (Contributed by NM,
       26-Nov-1995.) $)
    zfrep4 $p |- { y | E. x ( ph /\ ps ) } e. _V $=
      ( cv cab wcel wa wex cvv abid anbi1i exbii abbii wceq wb wal nfab1 sylbi
      wi zfrepclf abeq2 mpbir issetri eqeltrri ) CHACIZJZBKZCLZDIZABKZCLZDIMULU
      ODUKUNCUJABACNZOPQEUMEHZUMRZELDHZUQJULSDTZELBCDEUIACUAFUJABUSUQRUCDTELUPG
      UBUDURUTEULDUQUEPUFUGUH $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Derive the Axiom of Separation
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    $d x y z w $.  $d y z ph w $.
    $( Separation Scheme, which is an axiom scheme of Zermelo's original
       theory.  Scheme Sep of [BellMachover] p. 463.  As we show here, it is
       redundant if we assume Replacement in the form of ~ ax-rep .  Some
       textbooks present Separation as a separate axiom scheme in order to show
       that much of set theory can be derived without the stronger Replacement.
       The Separation Scheme is a weak form of Frege's Axiom of Comprehension,
       conditioning it (with ` x e. z ` ) so that it asserts the existence of a
       collection only if it is smaller than some other collection ` z ` that
       already exists.  This prevents Russell's paradox ~ ru .  In some texts,
       this scheme is called "Aussonderung" or the Subset Axiom.

       The variable ` x ` can appear free in the wff ` ph ` , which in
       textbooks is often written ` ph ( x ) ` .  To specify this in the
       Metamath language, we _omit_ the distinct variable requirement ($d) that
       ` x ` not appear in ` ph ` .

       For a version using a class variable, see ~ zfauscl , which requires the
       Axiom of Extensionality as well as Separation for its derivation.

       If we omit the requirement that ` y ` not occur in ` ph ` , we can
       derive a contradiction, as ~ notzfaus shows (showing the necessity of
       that condition in ~ zfauscl ).  However, as ~ axsep2 shows, we can
       eliminate the restriction that ` z ` not occur in ` ph ` .

       Note: the distinct variable restriction that ` z ` not occur in ` ph `
       is actually redundant in this particular proof, but we keep it since its
       purpose is to demonstrate the derivation of the exact ~ ax-sep from
       ~ ax-rep .

       This theorem should not be referenced by any proof.  Instead, use
       ~ ax-sep below so that the uses of the Axiom of Separation can be more
       easily identified.  (Contributed by NM, 11-Sep-2006.)
       (New usage is discouraged.) $)
    axsep $p |- E. y A. x ( x e. y <-> ( x e. z /\ ph ) ) $=
      ( vw wel weq wa wex wb wal wi nfv axrep5 equtr equcomi syl6 adantrd exbii
      alrimiv a1d spimev an12 elequ1 anbi1d equsexvw bitr3i bibi2i albii mpbi
      mpg ) BCFZEDFZEBGZAHZHZEIZJZBKZCIZULBDFZAHZJZBKZCIUMUOBCGZLZBKZCILUTEUOEB
      CDUOCMNUMVGCECEGZVGUMVHVFBVHUNVEAVHUNCBGVECEBOCBPQRTUAUBUKUSVDCURVCBUQVBU
      LUQUNUMAHZHZEIVBVJUPEUNUMAUCSVIVBEBUNUMVAAEBDUDUEUFUGUHUISUJ $.

    $( The Axiom of Separation of ZF set theory.  See ~ axsep for more
       information.  It was derived as ~ axsep above and is therefore
       redundant, but we state it as a separate axiom here so that its uses can
       be identified more easily.  (Contributed by NM, 11-Sep-2006.) $)
    ax-sep $a |- E. y A. x ( x e. y <-> ( x e. z /\ ph ) ) $.
    $( $j restatement 'ax-sep' of 'axsep'; $)
  $}

  ${
    $d x y z w $.  $d y ph w $.  $d z w $.
    $( A less restrictive version of the Separation Scheme ~ axsep , where
       variables ` x ` and ` z ` can both appear free in the wff ` ph ` , which
       can therefore be thought of as ` ph ( x , z ) ` .  This version was
       derived from the more restrictive ~ ax-sep with no additional set theory
       axioms.  (Contributed by NM, 10-Dec-2006.)  (Proof shortened by Mario
       Carneiro, 17-Nov-2016.) $)
    axsep2 $p |- E. y A. x ( x e. y <-> ( x e. z /\ ph ) ) $=
      ( wel wal wex weq elequ2 anbi1d anabs5 syl6bb bibi2d albidv exbidv ax-sep
      vw wa wb chvarv ) BCEZBQEZBDEZARZRZSZBFZCGUAUDSZBFZCGQDQDHZUGUICUJUFUHBUJ
      UEUDUAUJUEUCUDRUDUJUBUCUDQDBIJUCAKLMNOUDBCQPT $.
  $}

  ${
    $d x y A z $.  $d y ph z $.
    zfauscl.1 $e |- A e. _V $.
    $( Separation Scheme (Aussonderung) using a class variable.  To derive this
       from ~ ax-sep , we invoke the Axiom of Extensionality (indirectly via
       ~ vtocl ), which is needed for the justification of class variable
       notation.

       If we omit the requirement that ` y ` not occur in ` ph ` , we can
       derive a contradiction, as ~ notzfaus shows.  (Contributed by NM,
       21-Jun-1993.) $)
    zfauscl $p |- E. y A. x ( x e. y <-> ( x e. A /\ ph ) ) $=
      ( vz cv wcel wa wb wal wex eleq2 anbi1d bibi2d albidv exbidv ax-sep vtocl
      wceq ) BGZCGHZUAFGZHZAIZJZBKZCLUBUADHZAIZJZBKZCLFDEUCDTZUGUKCULUFUJBULUEU
      IUBULUDUHAUCDUAMNOPQABCFRS $.
  $}

  ${
    $d x ph z $.  $d x y z $.
    bm1.3ii.1 $e |- E. x A. y ( ph -> y e. x ) $.
    $( Convert implication to equivalence using the Separation Scheme
       (Aussonderung) ~ ax-sep .  Similar to Theorem 1.3(ii) of [BellMachover]
       p. 463.  (Contributed by NM, 21-Jun-1993.) $)
    bm1.3ii $p |- E. x A. y ( y e. x <-> ph ) $=
      ( vz wel wi wal wa wb wex 19.42v bimsc1 eximi sylbir elequ2 imbi2d albidv
      alanimi weq cbvexvw mpbi ax-sep exan exlimiiv ) ACEFZGZCHZCBFZUFAIJZCHZBK
      ZIZUIAJZCHZBKZEUMUHUKIZBKUPUHUKBLUQUOBUGUJUNCAUFUIMSNOUHULEAUIGZCHZBKUHEK
      DUSUHBEBETZURUGCUTUIUFABECPQRUAUBACBEUCUDUE $.
  $}

  ${
    $d x y z $.
    $( Derive ~ ax6v (a weakened version of ~ ax-6 where ` x ` and ` y ` must
       be distinct), from Separation ~ ax-sep and Extensionality ~ ax-ext .
       See ~ ax6 for the derivation of ~ ax-6 from ~ ax6v .  (Contributed by
       NM, 12-Nov-2013.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    ax6vsep $p |- -. A. x -. x = y $=
      ( vz cv wceq wex wn wal wcel wi wa wb ax-sep biantru bibi2i biimpri alimi
      id ax-ext syl eximi ax-mp df-ex mpbi ) ADZBDZEZAFZUGGAHGCDZUEIZUIUFIZUIUI
      EZULJZKZLZCHZAFUHUMCABMUPUGAUPUJUKLZCHUGUOUQCUQUOUKUNUJUMUKULRNOPQABCSTUA
      UBUGAUCUD $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Derive the Null Set Axiom
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    $d x y $.
    zfnuleuOLD.1 $e |- E. x A. y -. y e. x $.
    $( Obsolete version of ~ nulmo as of 17-Sep-2022.  (Contributed by NM,
       22-Dec-2007.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    zfnuleuOLD $p |- E! x A. y -. y e. x $=
      ( wel wn wal weu wfal wb wex nbfal albii exbii mpbi wmo nfv axextmo ax-mp
      wi moeu eubii mpbir ) BADZEZBFZAGUCHIZBFZAGZUGAJZUHUEAJUICUEUGAUDUFBUCKLZ
      MNUGAOUIUHSHABHAPQUGATNRUEUGAUJUAUB $.
  $}

  ${
    $d x y z w $.
    $( Alternate proof of ~ axnul , proved from propositional calculus,
       ~ ax-gen , ~ ax-4 , ~ sp , and ~ ax-rep .  To check this, replace ~ sp
       with the obsolete axiom ~ ax-c5 in the proof of ~ axnulALT and type the
       Metamath program "MM> SHOW TRACE_BACK axnulALT / AXIOMS" command.
       (Contributed by Jeff Hoffman, 3-Feb-2008.)  (Proof shortened by Mario
       Carneiro, 17-Nov-2016.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    axnulALT $p |- E. x A. y -. y e. x $=
      ( vw vz cv wcel wn wal wex wfal wa wb wi ax-rep sp con2i df-ex sylibr mpg
      wceq fal mto pm2.21i intnan nex nbn albii exbii mpbir ) BEZAEZFZGZBHZAIUL
      CEDEFZJAHZKZCIZLZBHZAIZUPUJUKTZMZBHZAIZVACJDABCNVCVEBVDVDGZAHZGVEVGVDVFAO
      PVDAQRUPVBUPJUAJAOUBZUCSSUNUTAUMUSBURULUQCUPUOVHUDUEUFUGUHUI $.

    $( The Null Set Axiom of ZF set theory: there exists a set with no
       elements.  Axiom of Empty Set of [Enderton] p. 18.  In some textbooks,
       this is presented as a separate axiom; here we show it can be derived
       from Separation ~ ax-sep .  This version of the Null Set Axiom tells us
       that at least one empty set exists, but does not tell us that it is
       unique - we need the Axiom of Extensionality to do that (see ~ nulmo ).

       This proof, suggested by Jeff Hoffman, uses only ~ ax-4 and ~ ax-gen
       from predicate calculus, which are valid in "free logic" i.e. logic
       holding in an empty domain (see Axiom A5 and Rule R2 of [LeBlanc]
       p. 277).  Thus, our ~ ax-sep implies the existence of at least one set.
       Note that Kunen's version of ~ ax-sep (Axiom 3 of [Kunen] p. 11) does
       not imply the existence of a set because his is universally closed,
       i.e., prefixed with universal quantifiers to eliminate all free
       variables.  His existence is provided by a separate axiom stating
       ` E. x x = x ` (Axiom 0 of [Kunen] p. 10).

       See ~ axnulALT for a proof directly from ~ ax-rep .

       This theorem should not be referenced by any proof.  Instead, use
       ~ ax-nul below so that the uses of the Null Set Axiom can be more easily
       identified.  (Contributed by Jeff Hoffman, 3-Feb-2008.)  (Revised by NM,
       4-Feb-2008.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    axnul $p |- E. x A. y -. y e. x $=
      ( vz wel wfal wa wb wal wn ax-sep fal intnan id mtbiri alimi eximii ) BAD
      ZBCDZEFZGZBHQIZBHAEBACJTUABTQSERKLTMNOP $.

    $( The Null Set Axiom of ZF set theory.  It was derived as ~ axnul above
       and is therefore redundant, but we state it as a separate axiom here so
       that its uses can be identified more easily.  (Contributed by NM,
       7-Aug-2003.) $)
    ax-nul $a |- E. x A. y -. y e. x $.
    $( $j restatement 'ax-nul' of 'axnul'; $)

    $( The Null Set Axiom of ZF set theory: the empty set exists.  Corollary
       5.16 of [TakeutiZaring] p. 20.  For the unabbreviated version, see
       ~ ax-nul .  (Contributed by NM, 21-Jun-1993.)  (Proof shortened by
       Andrew Salmon, 9-Jul-2011.) $)
    0ex $p |- (/) e. _V $=
      ( vx vy c0 cv wceq wex wel wn wal ax-nul eq0 exbii mpbir issetri ) ACADZC
      EZAFBAGHBIZAFABJPQABOKLMN $.
  $}

  ${
    $d X y $.
    $( The empty set is the unique class which is a subclass of any set.
       (Contributed by AV, 24-Aug-2022.) $)
    al0ssb $p |- ( A. y X C_ y <-> X = (/) ) $=
      ( cv wss wal c0 wceq 0ex sseq2 ss0b syl6bb 0ss ax-gen sseq1 albidv mpbiri
      spcv impbii ) BACZDZAEZBFGZTUBAFHSFGTBFDUBSFBIBJKQUBUAFSDZAEUCASLMUBTUCAB
      FSNOPR $.
  $}

  ${
    sseliALT.1 $e |- A C_ B $.
    $( Alternate proof of ~ sseli illustrating the use of the weak deduction
       theorem to prove it from the inference ~ sselii .  (Contributed by NM,
       24-Aug-2018.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    sseliALT $p |- ( C e. A -> C e. B ) $=
      ( wcel csn cif wceq biidd eleq2 eleq1 wss sseq1 sseq2 ssid keephyp3v snid
      c0 0ex elimhyp3v sselii dedth3v ) CAEZCBEZUDCUCBRFZGZEUCCRGZUFEABCUEUERAU
      CAUEGZHUDIBUFCJCUGUFKUHUFUGUCUHBLUHUFLZUIUEUELUHUELUIABLABCUEUERAUHBMBUFU
      HNCUGHUIIUEUHUEMUEUFUHNRUGHUIIDUEOPUCCUHEZUJUGUHERUEERUHEZUKABCUEUERAUHCJ
      BUFHUJICUGUHKUEUHRJUEUFHUKIRUGUHKRSQTUAUB $.
  $}

  ${
    $d y A $.  $d y B $.  $d x y $.
    $( The existence of proper substitution into a class.  (Contributed by NM,
       10-Nov-2005.)  (Revised by NM, 17-Aug-2018.) $)
    csbexg $p |- ( A. x B e. W -> [_ A / x ]_ B e. _V ) $=
      ( vy cvv wcel wal csb wa cv wsbc cab abid2 elex syl5eqel alimi spsbc syl5
      df-csb nfcv sbcabel sylibd imp wn c0 csbprc 0ex syl6eqel adantr pm2.61ian
      ) BFGZCDGZAHZABCIZFGZULUNJUOEKCGZABLEMZFAEBCTULUNURFGZULUNUQEMZFGZABLZUSU
      NVAAHULVBUMVAAUMUTCFECNCDOPQVAABFRSUQAEBFFAFUAUBUCUDPULUEZUPUNVCUOUFFABCU
      GUHUIUJUK $.
  $}

  ${
    csbex.1 $e |- B e. _V $.
    $( The existence of proper substitution into a class.  (Contributed by NM,
       7-Aug-2007.)  (Proof shortened by Andrew Salmon, 29-Jun-2011.)  (Revised
       by NM, 17-Aug-2018.) $)
    csbex $p |- [_ A / x ]_ B e. _V $=
      ( cvv wcel csb csbexg mpg ) CEFABCGEFAABCEHDI $.
  $}

  $( A version of ~ unisn without the ` A e. _V ` hypothesis.  (Contributed by
     Stefan Allan, 14-Mar-2006.) $)
  unisn2 $p |- U. { A } e. { (/) , A } $=
    ( cvv wcel csn cuni c0 cpr unisng prid2g eqeltrd wn wceq biimpi unieqd uni0
    snprc 0ex prid1 eqeltri syl6eqel pm2.61i ) ABCZADZEZFAGZCUBUDAUEABHFABIJUBK
    ZUDFEZUEUFUCFUFUCFLAPMNUGFUEOFAQRSTUA $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Theorems requiring subset and intersection existence
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    $d x y z $.
    $( No set contains all sets.  Theorem 41 of [Suppes] p. 30.  (Contributed
       by NM, 23-Aug-1993.)  Remove use of ~ ax-12 and ~ ax-13 .  (Revised by
       BJ, 31-May-2019.) $)
    nalset $p |- -. E. x A. y y e. x $=
      ( vz wel wn wex wal alexn wa wb ax-sep elequ1 elequ2 bitrd notbid anbi12d
      weq bibi12d spvv pclem6 syl eximii mpgbi ) BADZEZBFUDBGAFEAUDABHCBDZCADZC
      CDZEZIZJZCGZUEBUICBAKULBBDZUDUMEZIZJZUEUKUPCBCBQZUFUMUJUOCBBLUQUGUDUIUNCB
      ALUQUHUMUQUHBCDUMCBCLCBBMNOPRSUMUDTUAUBUC $.
    $( $j usage 'nalset' avoids 'ax-12' 'ax-13'; $)
  $}

  ${
    $d x y $.
    $( The universal class does not exist as a set.  (Contributed by NM,
       4-Jul-2005.) $)
    vnex $p |- -. E. x x = _V $=
      ( vy wel wal wex cv cvv wceq nalset wcel wb vex albii dfcleq bitr4i exbii
      tbt mtbi ) BACZBDZAEAFZGHZAEABITUBATSBFGJZKZBDUBSUDBUCSBLQMBUAGNOPR $.
  $}

  $( The universal class is not a member of itself (and thus is not a set).
     Proposition 5.21 of [TakeutiZaring] p. 21; our proof, however, does not
     depend on the Axiom of Regularity.  (Contributed by NM, 23-Aug-1993.) $)
  vprc $p |- -. _V e. _V $=
    ( vx cvv wcel cv wceq wex vnex isset mtbir ) BBCADBEAFAGABHI $.

  $( The universal class does not belong to any class.  (Contributed by FL,
     31-Dec-2006.) $)
  nvel $p |- -. _V e. A $=
    ( cvv wcel vprc elex mto ) BACBBCDBAEF $.

  ${
    $d A x y $.  $d B x y $.
    inex1.1 $e |- A e. _V $.
    $( Separation Scheme (Aussonderung) using class notation.  Compare Exercise
       4 of [TakeutiZaring] p. 22.  (Contributed by NM, 21-Jun-1993.) $)
    inex1 $p |- ( A i^i B ) e. _V $=
      ( vx vy cin cv wceq wex wcel wa wb zfauscl dfcleq elin bibi2i albii bitri
      wal exbii mpbir issetri ) DABFZDGZUCHZDIEGZUDJZUFAJUFBJZKZLZESZDIUHEDACMU
      EUKDUEUGUFUCJZLZESUKEUDUCNUMUJEULUIUGUFABOPQRTUAUB $.
  $}

  ${
    inex2.1 $e |- A e. _V $.
    $( Separation Scheme (Aussonderung) using class notation.  (Contributed by
       NM, 27-Apr-1994.) $)
    inex2 $p |- ( B i^i A ) e. _V $=
      ( cin cvv incom inex1 eqeltri ) BADABDEBAFABCGH $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Closed-form, generalized Separation Scheme.  (Contributed by NM,
       7-Apr-1995.) $)
    inex1g $p |- ( A e. V -> ( A i^i B ) e. _V ) $=
      ( vx cv cin cvv wcel wceq ineq1 eleq1d vex inex1 vtoclg ) DEZBFZGHABFZGHD
      ACOAIPQGOABJKOBDLMN $.
  $}

  ${
    ssex.1 $e |- B e. _V $.
    $( The subset of a set is also a set.  Exercise 3 of [TakeutiZaring] p. 22.
       This is one way to express the Axiom of Separation ~ ax-sep (a.k.a.
       Subset Axiom).  (Contributed by NM, 27-Apr-1994.) $)
    ssex $p |- ( A C_ B -> A e. _V ) $=
      ( wss cin wceq cvv wcel df-ss inex2 eleq1 mpbii sylbi ) ABDABEZAFZAGHZABI
      ONGHPBACJNAGKLM $.
  $}

  ${
    ssexi.1 $e |- B e. _V $.
    ssexi.2 $e |- A C_ B $.
    $( The subset of a set is also a set.  (Contributed by NM, 9-Sep-1993.) $)
    ssexi $p |- A e. _V $=
      ( wss cvv wcel ssex ax-mp ) ABEAFGDABCHI $.
  $}

  ${
    $d x A $.  $d x B $.
    $( The subset of a set is also a set.  Exercise 3 of [TakeutiZaring] p. 22
       (generalized).  (Contributed by NM, 14-Aug-1994.) $)
    ssexg $p |- ( ( A C_ B /\ B e. C ) -> A e. _V ) $=
      ( vx wcel wss cvv cv wi wceq sseq2 imbi1d vex ssex vtoclg impcom ) BCEABF
      ZAGEZADHZFZRIQRIDBCSBJTQRSBAKLASDMNOP $.
  $}

  ${
    ssexd.1 $e |- ( ph -> B e. C ) $.
    ssexd.2 $e |- ( ph -> A C_ B ) $.
    $( A subclass of a set is a set.  Deduction form of ~ ssexg .  (Contributed
       by David Moews, 1-May-2017.) $)
    ssexd $p |- ( ph -> A e. _V ) $=
      ( wss wcel cvv ssexg syl2anc ) ABCGCDHBIHFEBCDJK $.
  $}

  $( The superclass of a proper class is a proper class.  (Contributed by AV,
     27-Dec-2020.) $)
  prcssprc $p |- ( ( A C_ B /\ A e/ _V ) -> B e/ _V ) $=
    ( wss cvv wnel wcel ssexg ex nelcon3d imp ) ABCZADEBDEKBDADKBDFADFABDGHIJ
    $.

  ${
    sselpwd.1 $e |- ( ph -> B e. V ) $.
    sselpwd.2 $e |- ( ph -> A C_ B ) $.
    $( Elementhood to a power set.  (Contributed by Thierry Arnoux,
       18-May-2020.) $)
    sselpwd $p |- ( ph -> A e. ~P B ) $=
      ( cvv ssexd elpwd ) ABCGABCDEFHFI $.
  $}

  $( Existence of a difference.  (Contributed by NM, 26-May-1998.) $)
  difexg $p |- ( A e. V -> ( A \ B ) e. _V ) $=
    ( cdif wss wcel cvv difss ssexg mpan ) ABDZAEACFKGFABHKACIJ $.

  ${
    difexi.1 $e |- A e. _V $.
    $( Existence of a difference, inference version of ~ difexg .  (Contributed
       by Glauco Siliprandi, 3-Mar-2021.)  (Revised by AV, 26-Mar-2021.) $)
    difexi $p |- ( A \ B ) e. _V $=
      ( cvv wcel cdif difexg ax-mp ) ADEABFDECABDGH $.
  $}

  ${
    $d x A $.
    zfausab.1 $e |- A e. _V $.
    $( Separation Scheme (Aussonderung) in terms of a class abstraction.
       (Contributed by NM, 8-Jun-1994.) $)
    zfausab $p |- { x | ( x e. A /\ ph ) } e. _V $=
      ( cv wcel wa cab ssab2 ssexi ) BECFAGBHCDABCIJ $.
  $}

  ${
    $d x A $.
    $( Separation Scheme in terms of a restricted class abstraction.
       (Contributed by NM, 23-Oct-1999.) $)
    rabexg $p |- ( A e. V -> { x e. A | ph } e. _V ) $=
      ( crab wss wcel cvv ssrab2 ssexg mpan ) ABCEZCFCDGLHGABCILCDJK $.
  $}

  ${
    $d x A $.
    rabex.1 $e |- A e. _V $.
    $( Separation Scheme in terms of a restricted class abstraction.
       (Contributed by NM, 19-Jul-1996.) $)
    rabex $p |- { x e. A | ph } e. _V $=
      ( cvv wcel crab rabexg ax-mp ) CEFABCGEFDABCEHI $.
  $}

  ${
    $d x A $.
    rabexd.1 $e |- B = { x e. A | ps } $.
    rabexd.2 $e |- ( ph -> A e. V ) $.
    $( Separation Scheme in terms of a restricted class abstraction, deduction
       form of ~ rabex2 .  (Contributed by AV, 16-Jul-2019.) $)
    rabexd $p |- ( ph -> B e. _V ) $=
      ( crab cvv wcel rabexg syl syl5eqel ) AEBCDIZJGADFKOJKHBCDFLMN $.
  $}

  ${
    $d x A $.
    rabex2.1 $e |- B = { x e. A | ps } $.
    rabex2.2 $e |- A e. _V $.
    $( Separation Scheme in terms of a restricted class abstraction.
       (Contributed by AV, 16-Jul-2019.)  (Revised by AV, 26-Mar-2021.) $)
    rabex2 $p |- B e. _V $=
      ( cvv wcel id rabexd ax-mp ) CGHZDGHFLABCDGELIJK $.
  $}

  ${
    $d x B $.  $d y A $.
    rab2ex.1 $e |- B = { y e. A | ps } $.
    rab2ex.2 $e |- A e. _V $.
    $( A class abstraction based on a class abstraction based on a set is a
       set.  (Contributed by AV, 16-Jul-2019.)  (Revised by AV,
       26-Mar-2021.) $)
    rab2ex $p |- { x e. B | ph } e. _V $=
      ( rabex2 rabex ) ACFBDEFGHIJ $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ps $.
    elssabg.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Membership in a class abstraction involving a subset.  Unlike ~ elabg ,
       ` A ` does not have to be a set.  (Contributed by NM, 29-Aug-2006.) $)
    elssabg $p |- ( B e. V ->
                  ( A e. { x | ( x C_ B /\ ph ) } <-> ( A C_ B /\ ps ) ) ) $=
      ( wcel wss wa cvv wi cv cab wb ssexg expcom adantrd wceq sseq1 elab3g syl
      anbi12d ) EFHZDEIZBJZDKHZLDCMZEIZAJZCNHUFOUDUEUGBUEUDUGDEFPQRUJUFCDKUHDSU
      IUEABUHDETGUCUAUB $.
  $}

  ${
    $d x A $.
    $( The intersection of a nonempty class exists.  Exercise 5 of
       [TakeutiZaring] p. 44 and its converse.  (Contributed by NM,
       13-Aug-2002.) $)
    intex $p |- ( A =/= (/) <-> |^| A e. _V ) $=
      ( vx c0 wne cint cvv wcel cv wex n0 wss intss1 vex ssex syl exlimiv sylbi
      wceq vprc inteq int0 syl6eq eleq1d mtbiri necon2ai impbii ) ACDZAEZFGZUGB
      HZAGZBIUIBAJUKUIBUKUHUJKUIUJALUHUJBMNOPQUIACACRZUIFFGSULUHFFULUHCEFACTUAU
      BUCUDUEUF $.
  $}

  $( If a class intersection is not a set, it must be the universe.
     (Contributed by NM, 3-Jul-2005.) $)
  intnex $p |- ( -. |^| A e. _V <-> |^| A = _V ) $=
    ( cint cvv wcel wn wceq intex necon1bbii inteq int0 syl6eq sylbi vprc eleq1
    c0 mtbiri impbii ) ABZCDZEZRCFZTAOFZUASAOAGHUBROBCAOIJKLUASCCDMRCCNPQ $.

  $( The intersection of a nonempty class abstraction exists.  (Contributed by
     NM, 21-Oct-2003.) $)
  intexab $p |- ( E. x ph <-> |^| { x | ph } e. _V ) $=
    ( wex cab c0 wne cint cvv wcel abn0 intex bitr3i ) ABCABDZEFMGHIABJMKL $.

  $( The intersection of a nonempty restricted class abstraction exists.
     (Contributed by NM, 21-Oct-2003.) $)
  intexrab $p |- ( E. x e. A ph <-> |^| { x e. A | ph } e. _V ) $=
    ( cv wcel wa wex cab cint cvv wrex crab intexab df-rex df-rab inteqi eleq1i
    3bitr4i ) BDCEAFZBGSBHZIZJEABCKABCLZIZJESBMABCNUCUAJUBTABCOPQR $.

  ${
    $d A x y $.  $d B y $.
    $( The existence of a class intersection. ` x ` is normally a free-variable
       parameter in ` B ` , which should be read ` B ( x ) ` .  (Contributed by
       FL, 19-Sep-2011.) $)
    iinexg $p |- ( ( A =/= (/) /\ A. x e. A B e. C )
    -> |^|_ x e. A B e. _V ) $=
      ( vy c0 wne wcel wral wa ciin cv wceq wrex cab cint cvv wex wi sylib abn0
      dfiin2g adantl elisset rgenw r19.2z mpan2 r19.35 imp rexcom4 sylibr intex
      eqeltrd ) BFGZCDHZABIZJZABCKZELCMZABNZEOZPZQUPURVBMUNAEBCDUBUCUQVAFGZVBQH
      UQUTERZVCUQUSERZABNZVDUNUPVFUNUOVESZABNZUPVFSUNVGABIVHVGABECDUDUEVGABUFUG
      UOVEABUHTUIUSAEBUJTUTEUAUKVAULTUM $.
  $}

  ${
    $d x y $.  $d x A $.  $d y ph $.  $d x ps $.  $d x ch $.
    intabs.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    intabs.2 $e |- ( x = |^| { y | ps } -> ( ph <-> ch ) ) $.
    intabs.3 $e |- ( |^| { y | ps } C_ A /\ ch ) $.
    $( Absorption of a redundant conjunct in the intersection of a class
       abstraction.  (Contributed by NM, 3-Jul-2005.) $)
    intabs $p |- |^| { x | ( x C_ A /\ ph ) } = |^| { x | ph } $=
      ( cv wss wa cab cint cvv wcel wceq sseq1 anbi12d intmin3 intnex ssv sseq2
      wn mpbiri sylbi pm2.61i cbvabv inteqi sseqtr4i simpr ss2abi intss ax-mp
      eqssi ) DJZFKZALZDMZNZADMZNZUTBEMZNZVBVDOPZUTVDKZURVDFKZCLDVDOUPVDQUQVGAC
      UPVDFRHSITVEUDVDOQZVFVCUAVHVFUTOKUTUBVDOUTUCUEUFUGVAVCABDEGUHUIUJUSVAKVBU
      TKURADUQAUKULUSVAUMUNUO $.
  $}

  ${
    $d A x y z $.  $d B x y z $.
    $( The intersection of a union ` U. A ` with a class ` B ` is equal to the
       union of the intersections of each element of ` A ` with ` B ` .
       (Contributed by FL, 24-Mar-2007.) $)
    inuni $p |- ( U. A i^i B ) = U. { x | E. y e. A x = ( y i^i B ) } $=
      ( vz cuni cin cv wceq wrex cab wcel wex eluni2 anbi1i elin r19.41v bitr4i
      wa bitri ancom exbii rexcom4 vex inex1 eleq2 ceqsexv rexbii 3bitr4i eqriv
      eluniab ) ECFZDGZAHZBHZDGZIZBCJZAKFZEHZUMLZUTUNLZURSZAMZUTUSLUTULLZUTDLZS
      UTUOLZBCJZVFSZVAVDVEVHVFBUTCNOUTULDPVDUQVBSZAMZBCJZVIVDVJBCJZAMVLVCVMAVCU
      RVBSVMVBURUAUQVBBCQRUBVJBACUCRVLVGVFSZBCJVIVKVNBCVKUTUPLZVNVBVOAUPUODBUDU
      EUNUPUTUFUGUTUODPTUHVGVFBCQTTUIURAUTUKRUJ $.
  $}

  $( Membership in a power class.  Theorem 86 of [Suppes] p. 47.  (Contributed
     by NM, 7-Aug-2000.) $)
  elpw2g $p |- ( B e. V -> ( A e. ~P B <-> A C_ B ) ) $=
    ( wcel cpw wss elpwi cvv ssexg elpwg biimparc syldan expcom impbid2 ) BCDZA
    BEDZABFZABGQOPQOAHDZPABCIRPQABHJKLMN $.

  ${
    elpw2.1 $e |- B e. _V $.
    $( Membership in a power class.  Theorem 86 of [Suppes] p. 47.
       (Contributed by NM, 11-Oct-2007.) $)
    elpw2 $p |- ( A e. ~P B <-> A C_ B ) $=
      ( cvv wcel cpw wss wb elpw2g ax-mp ) BDEABFEABGHCABDIJ $.
  $}

  ${
    elpwi2.1 $e |- B e. V $.
    elpwi2.2 $e |- A C_ B $.
    $( Membership in a power class.  (Contributed by Glauco Siliprandi,
       3-Mar-2021.) $)
    elpwi2 $p |- A e. ~P B $=
      ( cpw wcel wss wb elpw2g ax-mp mpbir ) ABFGZABHZEBCGMNIDABCJKL $.
  $}

  ${
    $d A x $.
    $( The power set of a set is never a subset.  (Contributed by Stefan
       O'Rear, 22-Feb-2015.) $)
    pwnss $p |- ( A e. V -> -. ~P A C_ A ) $=
      ( vx cpw wss wel wn crab wcel rru ssel mtoi ssrab2 elpw2g mpbiri nsyl3 )
      ADZAEZCCFGZCAHZQIZABIZRUATAICAJQATKLUBUATAESCAMTABNOP $.
  $}

  $( No set equals its power set.  The sethood antecedent is necessary; compare
     ~ pwv .  (Contributed by NM, 17-Nov-2008.)  (Proof shortened by Mario
     Carneiro, 23-Dec-2016.) $)
  pwne $p |- ( A e. V -> ~P A =/= A ) $=
    ( wcel cpw wss wn wne pwnss eqimss necon3bi syl ) ABCADZAEZFLAGABHMLALAIJK
    $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Theorems requiring empty set existence
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    $d x A $.
    $( Construct, from any class ` A ` , a set equal to it when the class
       exists and equal to the empty set when the class is proper.  This
       theorem shows that the constructed set always exists.  (Contributed by
       NM, 16-Oct-2003.) $)
    class2set $p |- { x e. A | A e. _V } e. _V $=
      ( wcel crab rabexg wn c0 wrex wceq cv simpl nrexdv rabn0 necon1bbii sylib
      cvv 0ex syl6eqel pm2.61i ) BPCZTABDZPCTABPETFZUAGPUBTABHZFUAGIUBTABUBAJBC
      KLUCUAGTABMNOQRS $.

    $( Equality theorem based on ~ class2set .  (Contributed by NM,
       13-Dec-2005.)  (Proof shortened by Raph Levien, 30-Jun-2006.) $)
    class2seteq $p |- ( A e. V -> { x e. A | A e. _V } = A ) $=
      ( wcel cvv crab wceq elex wral cv ax-1 ralrimiv rabid2 sylibr eqcomd syl
      ) BCDBEDZQABFZBGBCHQBRQQABIBRGQQABQAJBDKLQABMNOP $.
  $}

  $( Every power class contains the empty set.  (Contributed by NM,
     25-Oct-2007.) $)
  0elpw $p |- (/) e. ~P A $=
    ( c0 cpw wcel wss 0ss 0ex elpw mpbir ) BACDBAEAFBAGHI $.
  $( A power class is never empty.  (Contributed by NM, 3-Sep-2018.) $)
  pwne0 $p |- ~P A =/= (/) $=
    ( c0 cpw 0elpw ne0ii ) BACADE $.

  $( The empty set and its power set are not equal.  (Contributed by NM,
     23-Dec-1993.) $)
  0nep0 $p |- (/) =/= { (/) } $=
    ( c0 csn 0ex snnz necomi ) ABAACDE $.

  $( Something cannot be equal to both the null set and the power set of the
     null set.  (Contributed by NM, 21-Jun-1993.) $)
  0inp0 $p |- ( A = (/) -> -. A = { (/) } ) $=
    ( c0 wceq csn wne 0nep0 neeq1 mpbiri neneqd ) ABCZABDZJAKEBKEFABKGHI $.

  $( The removal of the empty set from a class does not affect its union.
     (Contributed by NM, 22-Mar-2004.) $)
  unidif0 $p |- U. ( A \ { (/) } ) = U. A $=
    ( c0 csn cdif cuni cun uniun undif1 uncom eqtr2i unieqi 0ex uneq2i 3eqtr4ri
    unisn un0 uneq1i 3eqtri ) ABCZDZEZBAEZFZUBBFUBUASAFZEZSEZUBFUCTSFZEUAUFFZUE
    UATSGUDUGUGASFUDASHASIJKUHUABFUAUFBUABLOZMUAPJNSAGUFBUBUIQRBUBIUBPR $.

  ${
    $d x A $.
    $( An indexed intersection of the empty set, with a nonempty index set, is
       empty.  (Contributed by NM, 20-Oct-2005.) $)
    iin0 $p |- ( A =/= (/) <-> |^|_ x e. A (/) = (/) ) $=
      ( c0 wne ciin wceq iinconst cvv 0ex n0ii 0iin eqeq1i iineq1 eqeq1d mtbiri
      mtbir necon2ai impbii ) BCDABCEZCFZABCGTBCBCFZTACCEZCFZUCHCFCHIJUBHCACKLP
      UASUBCABCCMNOQR $.
  $}

  ${
    $d x A $.
    notzfaus.1 $e |- A = { (/) } $.
    notzfaus.2 $e |- ( ph <-> -. x e. y ) $.
    $( In the Separation Scheme ~ zfauscl , we require that ` y ` not occur in
       ` ph ` (which can be generalized to "not be free in").  Here we show
       special cases of ` A ` and ` ph ` that result in a contradiction if that
       requirement is not met.  (Contributed by NM, 8-Feb-2006.) $)
    notzfaus $p |- -. E. y A. x ( x e. y <-> ( x e. A /\ ph ) ) $=
      ( cv wcel wa wb wal wn wex c0 wne csn 0ex snnz eqnetri mpbi n0 biimt iman
      wi anbi2i xchbinxr syl6bb xor3 sylibr eximii exnal nex ) BGZCGHZUMDHZAIZJ
      ZBKZCUQLZBMURLUOUSBDNOUOBMDNPNENQRSBDUATUOUNUPLZJUSUOUNUOUNUDZUTUOUNUBVAU
      OUNLZIUPUOUNUCAVBUOFUEUFUGUNUPUHUIUJUQBUKTUL $.
  $}

  $( The intersection of the universal class is empty.  (Contributed by NM,
     11-Sep-2008.) $)
  intv $p |- |^| _V = (/) $=
    ( c0 cvv wcel cint wceq 0ex int0el ax-mp ) ABCBDAEFBGH $.

  ${
    $d A x y $.  $d A y z $.
    $( Two equivalent ways to express the Power Set Axiom.  Note that ~ ax-pow
       is not used by the proof.  When ~ ax-pow is assumed and ` A ` is a set,
       both sides of the biconditional hold.  In ZF, both sides hold if and
       only if ` A ` is a set (see ~ pwexr ).  (Contributed by NM,
       22-Jun-2009.) $)
    axpweq $p |- ( ~P A e. _V
                     <-> E. x A. y ( A. z ( z e. y -> z e. A ) -> y e. x ) ) $=
      ( cpw cvv wcel cv wex wel wal pwidg wceq pweq eleq2d spcegv mpd wss bitri
      wi elex exlimiv impbii vex elpw2 pwss dfss2 imbi1i albii exbii ) DEZFGZUK
      AHZEZGZAIZCBJCHDGTCKZBAJZTZBKZAIULUPULUKUKEZGZUPUKFLUOVBAUKFUMUKMUNVAUKUM
      UKNOPQUOULAUKUNUAUBUCUOUTAUOUKUMRZUTUKUMAUDUEVCBHZDRZURTZBKUTBDUMUFVFUSBV
      EUQURCVDDUGUHUISSUJS $.
  $}


$(
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
  ZF Set Theory - add the Axiom of Power Sets
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
$)


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Introduce the Axiom of Power Sets
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    $d x y z w $.
    $( Axiom of Power Sets.  An axiom of Zermelo-Fraenkel set theory.  It
       states that a set ` y ` exists that includes the power set of a given
       set ` x ` i.e. contains every subset of ` x ` .  The variant ~ axpow2
       uses explicit subset notation.  A version using class notation is
       ~ pwex .  (Contributed by NM, 21-Jun-1993.) $)
    ax-pow $a |- E. y A. z ( A. w ( w e. z -> w e. x ) -> z e. y ) $.

    $( Axiom of Power Sets expressed with the fewest number of different
       variables.  (Contributed by NM, 14-Aug-2003.) $)
    zfpow $p |- E. x A. y ( A. x ( x e. y -> x e. z ) -> y e. x ) $=
      ( vw wel wi wal wex ax-pow elequ1 imbi12d cbvalvw imbi1i albii exbii mpbi
      weq ) DBEZDCEZFZDGZBAEZFZBGZAHABEZACEZFZAGZUBFZBGZAHCABDIUDUJAUCUIBUAUHUB
      TUGDADAQRUESUFDABJDACJKLMNOP $.

    $( A variant of the Axiom of Power Sets ~ ax-pow using subset notation.
       Problem in [BellMachover] p. 466.  (Contributed by NM, 4-Jun-2006.) $)
    axpow2 $p |- E. y A. z ( z C_ x -> z e. y ) $=
      ( vw cv wss wel wi wal wex ax-pow dfss2 imbi1i albii exbii mpbir ) CEZAEZ
      FZCBGZHZCIZBJDCGDAGHDIZTHZCIZBJABCDKUBUEBUAUDCSUCTDQRLMNOP $.

    $( A variant of the Axiom of Power Sets ~ ax-pow .  For any set ` x ` ,
       there exists a set ` y ` whose members are exactly the subsets of ` x `
       i.e. the power set of ` x ` .  Axiom Pow of [BellMachover] p. 466.
       (Contributed by NM, 4-Jun-2006.) $)
    axpow3 $p |- E. y A. z ( z C_ x <-> z e. y ) $=
      ( cv wss wel wb wal wex axpow2 bm1.3ii bicom albii exbii mpbir ) CDADEZCB
      FZGZCHZBIQPGZCHZBIPBCABCJKSUABRTCPQLMNO $.
  $}

  ${
    $d x y z $.
    $( Every set is an element of some other set.  See ~ elALT for a shorter
       proof using more axioms.  (Contributed by NM, 4-Jan-2002.)  (Proof
       shortened by Andrew Salmon, 25-Jul-2011.) $)
    el $p |- E. y x e. y $=
      ( vz wel wi wal zfpow weq ax9 alrimiv ax8 embantd spimvw eximii ) BCDBADE
      ZBFZCBDZEZCFABDZBBCAGRSCACAHZPQSTOBCABIJCABKLMN $.
  $}

  ${
    $d w x y z $.
    $( At least two sets exist (or in terms of first-order logic, the universe
       of discourse has two or more objects).  Note that we may not substitute
       the same variable for both ` x ` and ` y ` (as indicated by the distinct
       variable requirement), for otherwise we would contradict ~ stdpc6 .

       This theorem is proved directly from set theory axioms (no set theory
       definitions) and does not use ~ ax-ext or ~ ax-sep .  See ~ dtruALT for
       a shorter proof using these axioms.

       The proof makes use of dummy variables ` z ` and ` w ` which do not
       appear in the final theorem.  They must be distinct from each other and
       from ` x ` and ` y ` .  In other words, if we were to substitute ` x `
       for ` z ` throughout the proof, the proof would fail.  (Contributed by
       NM, 7-Nov-2006.) $)
    dtru $p |- -. A. x x = y $=
      ( vw vz weq wn wex wal wel wa el ax-nul sp eximii exdistrv mpbir2an con3d
      ax9 ax7 spimev com12 con3dimp 2eximi wi equequ2 notbid syl6bi a1d pm2.61i
      exlimivv mp2b exnal mpbi ) ABEZFZAGZUNAHFACIZADIZFZJZDGCGZCDEZFZDGCGUPVAU
      QCGUSDGACKUSAHUSDDALUSAMNUQUSCDOPUTVCCDUQVBURVBUQURCDARUAUBUCVCUPCDDBEZVC
      UPUDVDVCCBEZFZUPVDVBVEDBCUEUFVFUOACACEUNVEACBSQTUGVDFZUPVCVGUOADADEUNVDAD
      BSQTUHUIUJUKUNAULUM $.
  $}

  ${
    $d x y $.
    dtrucor.1 $e |- x = y $.
    $( Corollary of ~ dtru .  This example illustrates the danger of blindly
       trusting the standard Deduction Theorem without accounting for free
       variables: the theorem form of this deduction is not valid, as shown by
       ~ dtrucor2 .  (Contributed by NM, 27-Jun-2002.) $)
    dtrucor $p |- x =/= y $=
      ( weq cv wne wal dtru pm2.21i mpg ) ABDZAEBEFZAKAGLABHICJ $.
  $}

  ${
    dtrucor2.1 $e |- ( x = y -> x =/= y ) $.
    $( The theorem form of the deduction ~ dtrucor leads to a contradiction, as
       mentioned in the "Wrong!" example at ~ mmdeduction.html#bad .
       (Contributed by NM, 20-Oct-2007.) $)
    dtrucor2 $p |- ( ph /\ -. ph ) $=
      ( weq wex wn wa ax6e wi cv necon2bi pm2.01 ax-mp nex pm2.24ii ) BCEZBFAAG
      HBCIQBQQGZJRQBKCKDLQMNOP $.
  $}

  ${
    $d x y $.
    $( Demonstration of a theorem (scheme) that requires (meta)variables ` x `
       and ` y ` to be distinct, but no others.  It bundles the theorem schemes
       ` E. x ( x = y -> x e. x ) ` and ` E. x ( x = y -> y e. x ) ` .  Compare
       ~ dvdemo2 .  ("Bundles" is a term introduced by Raph Levien.)
       (Contributed by NM, 1-Dec-2006.) $)
    dvdemo1 $p |- E. x ( x = y -> z e. x ) $=
      ( weq wn wel wi wex wal dtru exnal mpbir pm2.21 eximii ) ABDZEZOCAFZGAPAH
      OAIEABJOAKLOQMN $.
  $}

  ${
    $d x z $.
    $( Demonstration of a theorem (scheme) that requires (meta)variables ` x `
       and ` z ` to be distinct, but no others.  It bundles the theorem schemes
       ` E. x ( x = x -> z e. x ) ` and ` E. x ( x = y -> y e. x ) ` .  Compare
       ~ dvdemo1 .  (Contributed by NM, 1-Dec-2006.) $)
    dvdemo2 $p |- E. x ( x = y -> z e. x ) $=
      ( wel weq wi el ax-1 eximii ) CADZABEZJFACAGJKHI $.
  $}

  ${
    $d w x y z $.
    $( A setvar variable is not free from itself.  This theorem is not true in
       a one-element domain, as illustrated by the use of ~ dtru in its proof.
       (Contributed by Mario Carneiro, 8-Oct-2016.) $)
    nfnid $p |- -. F/_ x x $=
      ( vy vz vw cv wnfc wel wal weq dtru ax-ext sps alimi mto wnf df-nfc sbnf2
      wb wsb elsb4 bibi12i 2albii bitri albii alrot3 3bitri mtbir ) AAEZFZBCGZB
      DGZRZBHZDHZCHZUOCDIZCHCDJUNUPCUMUPDCDBKLMNUIBAGZAOZBHULDHCHZBHUOABUHPURUS
      BURUQACSZUQADSZRZDHCHUSUQACDQVBULCDUTUJVAUKCABTDABTUAUBUCUDULBCDUEUFUG $.
  $}

  $( The "distinctor" expression ` -. A. x x = y ` , stating that ` x ` and
     ` y ` are not the same variable, can be written in terms of ` F/ ` in the
     obvious way.  This theorem is not true in a one-element domain, because
     then ` F/_ x y ` and ` A. x x = y ` will both be true.  (Contributed by
     Mario Carneiro, 8-Oct-2016.) $)
  nfcvb $p |- ( F/_ x y <-> -. A. x x = y ) $=
    ( cv wnfc weq wal wn nfnid eqidd drnfc1 mtbiri con2i nfcvf impbii ) ABCZDZA
    BEAFZGQPQPBODBHABOOQOIJKLABMN $.

  ${
    $d x y z $.
    $( Power set axiom: the powerclass of a set is a set.  Axiom 4 of
       [TakeutiZaring] p. 17.  (Contributed by NM, 30-Oct-2003.)  (Proof
       shortened by Andrew Salmon, 25-Jul-2011.)  Revised to prove ~ pwexg from
       ~ vpwex .  (Revised by BJ, 10-Aug-2022.) $)
    vpwex $p |- ~P x e. _V $=
      ( vy vz cv cpw wss cab cvv df-pw wceq wex wel wb wal axpow2 bm1.3ii abeq2
      exbii mpbir issetri eqeltri ) ADZEBDUBFZBGZHBUBICUDCDZUDJZCKBCLUCMBNZCKUC
      CBACBOPUFUGCUCBUEQRSTUA $.
  $}

  ${
    $d x A $.
    $( Power set axiom expressed in class notation, with the sethood
       requirement as an antecedent.  (Contributed by NM, 30-Oct-2003.) $)
    pwexg $p |- ( A e. V -> ~P A e. _V ) $=
      ( vx cv cpw cvv wcel wceq pweq eleq1d vpwex vtoclg ) CDZEZFGAEZFGCABMAHNO
      FMAIJCKL $.
  $}

  ${
    pwexd.1 $e |- ( ph -> A e. V ) $.
    $( Deduction version of the power set axiom.  (Contributed by Glauco
       Siliprandi, 26-Jun-2021.) $)
    pwexd $p |- ( ph -> ~P A e. _V ) $=
      ( wcel cpw cvv pwexg syl ) ABCEBFGEDBCHI $.
  $}

  ${
    pwex.1 $e |- A e. _V $.
    $( Power set axiom expressed in class notation.  (Contributed by NM,
       21-Jun-1993.) $)
    pwex $p |- ~P A e. _V $=
      ( cvv wcel cpw pwexg ax-mp ) ACDAECDBACFG $.
  $}

  ${
    $d x A $.
    $( Existence of a class of subsets.  (Contributed by NM, 15-Jul-2006.)
       (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
    abssexg $p |- ( A e. V -> { x | ( x C_ A /\ ph ) } e. _V ) $=
      ( wcel cpw cvv cv wss wa pwexg df-pw eleq1i simpl ss2abi ssexg mpan sylbi
      cab syl ) CDECFZGEZBHCIZAJZBSZGEZCDKUBUCBSZGEZUFUAUGGBCLMUEUGIUHUFUDUCBUC
      ANOUEUGGPQRT $.
  $}

  $( Alternate proof of ~ snex using Power Set ( ~ ax-pow ) instead of Pairing
     ( ~ ax-pr ).  Unlike in the proof of ~ zfpair , Replacement ( ~ ax-rep )
     is not needed.  (Contributed by NM, 7-Aug-1994.)  (Proof shortened by
     Andrew Salmon, 25-Jul-2011.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  snexALT $p |- { A } e. _V $=
    ( cpw cvv wcel csn wss snsspw ssexg mpan wn pwexg con3i c0 snprc biimpi 0ex
    wceq syl6eqel syl pm2.61i ) ABZCDZAEZCDZUCUAFUBUDAGUCUACHIUBJACDZJZUDUEUBAC
    KLUFUCMCUFUCMQANOPRST $.

  $( The power set of the empty set (the ordinal 1) is a set.  See also
     ~ p0exALT .  (Contributed by NM, 23-Dec-1993.) $)
  p0ex $p |- { (/) } e. _V $=
    ( c0 cpw csn cvv pw0 0ex pwex eqeltrri ) ABACDEAFGH $.

  $( Alternate proof of ~ p0ex which is quite different and longer if ~ snexALT
     is expanded.  (Contributed by NM, 23-Dec-1993.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  p0exALT $p |- { (/) } e. _V $=
    ( c0 snexALT ) AB $.

  $( The power set of the power set of the empty set (the ordinal 2) is a set.
     (Contributed by NM, 24-Jun-1993.) $)
  pp0ex $p |- { (/) , { (/) } } e. _V $=
    ( c0 csn cpw cpr cvv pwpw0 p0ex pwex eqeltrri ) ABZCAJDEFJGHI $.

  $( The ordinal number 3 is a set, proved without the Axiom of Union ~ ax-un .
     (Contributed by NM, 2-May-2009.) $)
  ord3ex $p |- { (/) , { (/) } , { (/) , { (/) } } } e. _V $=
    ( c0 csn cpr ctp cun cvv df-tp cpw pwpr pp0ex pwex eqeltrri wss unss2 ax-mp
    snsspr2 ssexi eqeltri ) AABZASCZDTTBZEZFASTGUBTSBZTCZEZTHUEFASITJKLUAUDMUBU
    EMUCTPUAUDTNOQR $.

  ${
    $d x y $.
    $( Alternate proof of ~ dtru which requires more axioms but is shorter and
       may be easier to understand.

       Assuming that ZF set theory is consistent, we cannot prove this theorem
       unless we specify that ` x ` and ` y ` be distinct.  Specifically,
       theorem ~ spcev requires that ` x ` must not occur in the subexpression
       ` -. y = { (/) } ` in step 4 nor in the subexpression ` -. y = (/) ` in
       step 9.  The proof verifier will require that ` x ` and ` y ` be in a
       distinct variable group to ensure this.  You can check this by deleting
       the $d statement in set.mm and rerunning the verifier, which will print
       a detailed explanation of the distinct variable violation.  (Contributed
       by NM, 15-Jul-1994.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    dtruALT $p |- -. A. x x = y $=
      ( cv wceq wn wex wal c0 csn 0inp0 p0ex eqeq2 notbid spcev syl 0ex pm2.61i
      exnal eqcom albii xchbinx mpbi ) BCZACZDZEZAFZUDUCDZAGZEUCHDZUGUJUCHIZDZE
      ZUGUCJUFUMAUKKUDUKDUEULUDUKUCLMNOUFUJEAHPUDHDUEUJUDHUCLMNQUGUEAGUIUEARUEU
      HAUCUDSTUAUB $.
  $}

  ${
    $d x y $.
    $( This theorem shows that axiom ~ ax-c16 is redundant in the presence of
       theorem ~ dtru , which states simply that at least two things exist.
       This justifies the remark at ~ mmzfcnd.html#twoness (which links to this
       theorem).  (Proof modification is discouraged.)
       (New usage is discouraged.)  (Contributed by NM, 7-Nov-2006.) $)
    axc16b $p |- ( A. x x = y -> ( ph -> A. x ph ) ) $=
      ( weq wal wi dtru pm2.21i ) BCDBEAABEFBCGH $.
  $}

  ${
    $d x y $.  $d y ph $.
    $( Existential uniqueness implies there is a value for which the wff
       argument is false.  (Contributed by NM, 24-Oct-2010.)  (Proof shortened
       by BJ, 2-Jan-2023.) $)
    eunex $p |- ( E! x ph -> E. x -. ph ) $=
      ( vy weq wb wal wex wn weu dtru albi mtbiri exlimiv eu6 exnal 3imtr4i ) A
      BCDZEBFZCGABFZHZABIAHBGRTCRSQBFBCJAQBKLMABCNABOP $.

    $( Obsolete proof of ~ eunex as of 2-Jan-2023.  (Contributed by NM,
       24-Oct-2010.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    eunexOLD $p |- ( E! x ph -> E. x -. ph ) $=
      ( vy wex weq wi wal wa wn weu dtru alim mtoi exlimiv adantl exnal 3imtr4i
      eu3v ) ABDZABCEZFBGZCDZHABGZIZABJAIBDUBUDSUAUDCUAUCTBGBCKATBLMNOABCRABPQ
      $.
  $}

  ${
    $d x y z $.  $d A y z $.
    $( Two ways to express single-valuedness of a class expression
       ` A ( x ) ` .  (Contributed by NM, 14-Oct-2010.) $)
    eusv1 $p |- ( E! y A. x y = A <-> E. y A. x y = A ) $=
      ( vz cv wceq wal weu wex wa wi sp eqtr3 syl2an gen2 eqeq1 albidv mpbiran2
      eu4 ) BEZCFZAGZBHUBBIUBDEZCFZAGZJTUCFZKZDGBGUGBDUBUAUDUFUEUAALUDALTUCCMNO
      UBUEBDUFUAUDATUCCPQSR $.
  $}

  ${
    $d x y z w $.  $d A y z w $.
    $( Even if ` x ` is free in ` A ` , it is effectively bound when
       ` A ( x ) ` is single-valued.  (Contributed by NM, 14-Oct-2010.)
       (Revised by Mario Carneiro, 14-Oct-2016.) $)
    eusvnf $p |- ( E! y A. x y = A -> F/_ x A ) $=
      ( vz vw cv wceq wal weu csb wi cvv nfcsb1v nfeq2 weq csbeq1a eqeq2d spcgf
      nfcv elv wex wnfc euex eqtr3d alrimivv sbnfc2 sylibr exlimiv syl ) BFZCGZ
      AHZBIULBUAACUBZULBUCULUMBULADFZCJZAEFZCJZGZEHDHUMULURDEULUJUOUQULUJUOGZKD
      UKUSAUNLAUNSAUJUOAUNCMNADOCUOUJAUNCPQRTULUJUQGZKEUKUTAUPLAUPSAUJUQAUPCMNA
      EOCUQUJAUPCPQRTUDUEADECUFUGUHUI $.

    $( Two ways to say that ` A ( x ) ` is a set expression that does not
       depend on ` x ` .  (Contributed by Mario Carneiro, 18-Nov-2016.) $)
    eusvnfb $p |- ( E! y A. x y = A <-> ( F/_ x A /\ A e. _V ) ) $=
      ( wceq wal weu wnfc cvv wcel eusvnf wex euex eqvisset sps exlimiv syl jca
      cv wa isset nfcvd id nfeqd nf5rd eximdv syl5bi imp eusv1 sylibr impbii )
      BRZCDZAEZBFZACGZCHIZSZUNUOUPABCJUNUMBKZUPUMBLUMUPBULUPABCMNOPQUQURUNUOUPU
      RUPULBKUOURBCTUOULUMBUOULAUOAUKCUOAUKUAUOUBUCUDUEUFUGABCUHUIUJ $.
  $}

  ${
    $d x y $.  $d A y $.
    $( Two ways to express single-valuedness of a class expression
       ` A ( x ) ` .  (Contributed by NM, 14-Oct-2010.)  (Revised by Mario
       Carneiro, 18-Nov-2016.) $)
    eusv2i $p |- ( E! y A. x y = A -> E! y E. x y = A ) $=
      ( wceq wal weu wex nfeu1 nfcvd eusvnf nfeqd nfrd 19.2 impbid1 eubid ibir
      cv ) BQZCDZAEZBFZSAGZBFUAUBTBTBHUAUBTUASAUAARCUAARIABCJKLSAMNOP $.
  $}

  ${
    $d x y $.  $d A y $.
    eusv2.1 $e |- A e. _V $.
    $( Two ways to express single-valuedness of a class expression
       ` A ( x ) ` .  (Contributed by Mario Carneiro, 18-Nov-2016.) $)
    eusv2nf $p |- ( E! y E. x y = A <-> F/_ x A ) $=
      ( cv wceq wex weu wnfc wnf wal nfeu1 wi nfe1 nfeu wa isseti alrimi sylibr
      cvv 19.8a ancri eximii eupick mpan2 nf6 wcel wb dfnfc2 mpg eusvnfb eusv2i
      mpbiran2 sylbir impbii ) BECFZAGZBHZACIZURUPAJZBKZUSURUTBUQBLURUQUPMZAKUT
      URVBAUQABUPANOURUQUPPZBGVBUPVCBBCDQUPUQUPAUAUBUCUQUPBUDUERUPAUFSRCTUGZUSV
      AUHAABCTUIDUJSUSUPAKBHZURVEUSVDDABCUKUMABCULUNUO $.

    $( Two ways to express single-valuedness of a class expression
       ` A ( x ) ` .  (Contributed by NM, 15-Oct-2010.)  (Proof shortened by
       Mario Carneiro, 18-Nov-2016.) $)
    eusv2 $p |- ( E! y E. x y = A <-> E! y A. x y = A ) $=
      ( cv wceq wex weu wnfc wal eusv2nf cvv wcel eusvnfb mpbiran2 bitr4i ) BEC
      FZAGBHACIZQAJBHZABCDKSRCLMDABCNOP $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.  $d x ph $.  $d x y $.
    $( Two ways to express single-valuedness of a class expression
       ` C ( y ) ` .  (Contributed by NM, 16-Dec-2012.)  (Proof shortened by
       Mario Carneiro, 18-Nov-2016.)  (Proof shortened by JJ, 7-Aug-2021.) $)
    reusv1 $p |- ( E. y e. B ph -> ( E! x e. A A. y e. B ( ph -> x = C )
                   <-> E. x e. A A. y e. B ( ph -> x = C ) ) ) $=
      ( wrex cv wceq wi wral wmo wrmo wreu wb wnf wtru nftru nfra1 a1i wcel wal
      nfmodv mptru rsp com3l alrimdv mo2icl syl6 rexlimi mormo reu5 rbaib 3syl
      ) ACEGABHFIZJZCEKZBLZUQBDMZUQBDNZUQBDGZOAURCEURCPQUQCBBRUQCPQUPCESTUCUDCH
      EUAZAUQUOJZBUBURVBAVCBUQVBAUOUPCEUEUFUGUQBFUHUIUJUQBDUKUTVAUSUQBDULUMUN
      $.
  $}

  ${
    $d x y z A $.  $d x z B $.  $d x z C $.  $d x z ph $.
    $( Lemma for ~ reusv2 .  (Contributed by NM, 22-Oct-2010.)  (Proof
       shortened by Mario Carneiro, 19-Nov-2016.) $)
    reusv2lem1 $p |- ( A =/= (/) -> ( E! x A. y e. A x = B
                     <-> E. x A. y e. A x = B ) ) $=
      ( c0 wne cv wceq wral wmo weu wex wb wcel n0 wnf wtru nftru nfra1 syl a1i
      nfmodv mptru wi wal rsp com12 alrimiv mo2icl exlimi sylbi df-eu rbaib ) C
      EFZAGDHZBCIZAJZUPAKZUPALZMUNBGCNZBLUQBCOUTUQBUQBPQUPBAARUPBPQUOBCSUAUBUCU
      TUPUOUDZAUEUQUTVAAUPUTUOUOBCUFUGUHUPADUITUJUKURUSUQUPAULUMT $.

    $( Lemma for ~ reusv2 .  (Contributed by NM, 27-Oct-2010.)  (Proof
       shortened by Mario Carneiro, 19-Nov-2016.)  (Proof shortened by JJ,
       7-Aug-2021.) $)
    reusv2lem2 $p |- ( E! x A. y e. A x = B -> E! x E. y e. A x = B ) $=
      ( vz cv wceq wral weu wrex wi c0 wn wex sylib wa simpr nfra1 adantr ex wb
      wal eunex exnal rzal alrimiv nsyl3 pm2.21d wcel rspa eqtr4d eqeq1 ralbidv
      wne biimprcd ad2antrr mpd exp31 rexlimd adantl r19.2z impbid exlimdv euex
      eubidv cbvexvw impel mpbird pm2.61ine ) AFZDGZBCHZAIZVKBCJZAIZKCLCLGZVMVO
      VMVLAUBZVPVMVLMANVQMVLAUCVLAUDOVPVLAVKBCUEUFUGUHCLUNZVMVOVRVMPVOVMVRVMQVR
      EFZDGZBCHZENZVOVMUAZVMVRWAWCEVRWAWCVRWAPZVNVLAWDVNVLWAVNVLKVRWAVKVLBCVTBC
      RVKBCRWABFCUIZVKVLWAWEPZVKPZVJVSGZVLWGVJDVSWFVKQWFVTVKVTBCUJSUKWAWHVLKWEV
      KWHVLWAWHVKVTBCVJVSDULUMZUOUPUQURUSUTVRVLVNKWAVRVLVNVKBCVATSVBVETVCVMVLAN
      WBVLAVDVLWAAEWIVFOVGVHTVI $.

    $( Lemma for ~ reusv2 .  (Contributed by NM, 14-Dec-2012.)  (Proof
       shortened by Mario Carneiro, 19-Nov-2016.) $)
    reusv2lem3 $p |- ( A. y e. A B e. _V ->
          ( E! x E. y e. A x = B <-> E! x A. y e. A x = B ) ) $=
      ( cvv wcel wral cv wceq wrex weu wa simpr nfv nfeu1 nfan wi wex c0 ex wne
      euex rexn0 exlimiv r19.2z 3syl adantl nfra1 nfre1 nfeu impcom isset sylib
      rsp adantrr ancrd eximdv syldan eupick syl2an2 com3l ralrimd impbid eubid
      rspe imp mpbird reusv2lem2 impbid1 ) DEFZBCGZAHDIZBCJZAKZVLBCGZAKZVKVNVPV
      KVNLZVPVNVKVNMZVQVOVMAVKVNAVKANVMAOPVQVOVMVNVOVMQZVKVNVMARCSUAZVSVMAUBVMV
      TAVLBCUCUDVTVOVMVLBCUETUFUGVQVMVLBCVKVNBVJBCUHVMBAVLBCUIZUJPWABHCFZVQVMVL
      WBVQVMVLQZVQVNWBVMVLLZARZWCVRWBVQVLARZWEWBVKWFVNWBVKLVJWFVKWBVJVJBCUNUKAD
      ULUMUOWBWFWEWBVLWDAWBVLVMWBVLVMVLBCVETUPUQVFURVMVLAUSUTTVAVBVCVDVGTABCDVH
      VI $.

    $( Lemma for ~ reusv2 .  (Contributed by NM, 13-Dec-2012.) $)
    reusv2lem4 $p |- ( E! x e. A E. y e. B ( ph /\ x = C )
            <-> E! x A. y e. B ( ( C e. A /\ ph ) -> x = C ) ) $=
      ( vz cv wceq wa wrex wcel weu wi wral anass eleq1 nfv cvv wal wreu df-reu
      crab anbi1i anbi1d pm5.32ri bitr3i anbi2i 3bitr4ri rexbii2 r19.42v nfrab1
      csb rabid nfcv nfcsb1v nfeq2 csbeq1a eqeq2d cbvrexf 3bitr3i eubii wb elex
      ad2antrl sylbi rgen nfel1 eleq1d cbvralf mpbi reusv2lem3 ax-mp nfcri nfim
      df-ral imbi12d cbvalv1 imbi1i impexp bitri albii bitr4i 3bitr2i 3bitri )
      ABHZFIZJZCEKZBDUAWFDLZWIJZBMWFCGHZFUMZIZGFDLZAJZCEUCZKZBMZWPWGNZCEOZBMZWI
      BDUBWKWRBWJWHJZCEKWGCWQKWKWRXCWGCEWQCHZELZWPJZWGJXEWPWGJZJXDWQLZWGJXEXCJX
      EWPWGPXHXFWGWPCEUNZUDXCXGXEXCWJAJZWGJXGWJAWGPWGXJWPWGWJWOAWFFDQUEUFUGUHUI
      UJWJWHCEUKWGWNCGWQWPCEULZGWQUOZWGGRCWFWMCWLFUPZUQZXDWLIZFWMWFCWLFURZUSZUT
      VAVBWSWNGWQOZBMZXBWMSLZGWQOZWSXSVCFSLZCWQOYAYBCWQXHXFYBXIWOYBXEAFDVDVEVFV
      GYBXTCGWQXKXLYBGRCWMSXMVHXOFWMSXPVIVJVKBGWQWMVLVMXRXABXRWLWQLZWNNZGTXHWGN
      ZCTZXAWNGWQVPYEYDCGYEGRYCWNCCGWQXKVNXNVOXOXHYCWGWNXDWLWQQXQVQVRYFXEWTNZCT
      XAYEYGCYEXFWGNYGXHXFWGXIVSXEWPWGVTWAWBWTCEVPWCWDVBWAWE $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x C $.
    $( Lemma for ~ reusv2 .  (Contributed by NM, 4-Jan-2013.)  (Proof shortened
       by Mario Carneiro, 19-Nov-2016.) $)
    reusv2lem5 $p |- ( ( A. y e. B C e. A /\ B =/= (/) )
          -> ( E! x e. A E. y e. B x = C <-> E! x e. A A. y e. B x = C ) ) $=
      ( wcel wral c0 wne wa wtru cv wceq wi weu wrex wreu wb tru eubidv syl6bbr
      biimt mpan2 ibar bitr3d eleq1 pm5.32ri ralimi ralbi syl r19.28zv sylan9bb
      biantrur rexbii reubii reusv2lem4 bitri df-reu 3bitr4g ) ECFZBDGZDHIZJUTK
      JZALZEMZNZBDGZAOZVDCFZVEBDGZJZAOZVEBDPZACQZVJACQVAVHVIVEJZBDGZAOVBVLVAVGV
      PAVAVFVORZBDGVGVPRUTVQBDUTVFUTVEJZVOUTVEVFVRUTKVEVFRSVCVEUBUCUTVEUDUEVEVI
      UTVDECUFUGUAUHVFVOBDUIUJTVBVPVKAVIVEBDUKTULVNKVEJZBDPZACQVHVMVTACVEVSBDKV
      ESUMUNUOKABCDEUPUQVJACURUS $.
  $}

  ${
    $d x y z A $.  $d x z B $.  $d x z C $.  $d x z ph $.
    $( Two ways to express single-valuedness of a class expression ` C ( y ) `
       that is constant for those ` y e. B ` such that ` ph ` .  The first
       antecedent ensures that the constant value belongs to the existential
       uniqueness domain ` A ` , and the second ensures that ` C ( y ) ` is
       evaluated for at least one ` y ` .  (Contributed by NM, 4-Jan-2013.)
       (Proof shortened by Mario Carneiro, 19-Nov-2016.) $)
    reusv2 $p |- ( ( A. y e. B ( ph -> C e. A ) /\ E. y e. B ph )
          -> ( E! x e. A E. y e. B ( ph /\ x = C )
                   <-> E! x e. A A. y e. B ( ph -> x = C ) ) ) $=
      ( vz wcel wi wral cv wceq wa wrex wreu nfv cbvralf imbi1i bitri bitr3i c0
      csb crab wb nfrab1 nfcv nfcsb1v nfel1 csbeq1a eleq1d rabid impexp ralbii2
      rabn0 reusv2lem5 nfeq2 eqeq2d cbvrexf anbi1i anass rexbii2 reubii 3bitr3g
      wne syl2anbr ) AFDHZIZCEJZCGKZFUBZDHZGACEUCZJZVLUAVDZABKZFLZMZCENZBDOZAVP
      IZCEJZBDOZUDACENVMVFCVLJVHVFVKCGVLACEUEZGVLUFZVFGPCVJDCVIFUGZUHCKZVILZFVJ
      DCVIFUIZUJQVFVGCVLEWFVLHZVFIWFEHZAMZVFIWJVGIWIWKVFACEUKZRWJAVFULSUMTACEUN
      VMVNMVOVJLZGVLNZBDOWMGVLJZBDOVSWBBGDVLVJUOWNVRBDWNVPCVLNVRVPWMCGVLWCWDVPG
      PZCVOVJWEUPZWGFVJVOWHUQZURVPVQCVLEWIVPMWKVPMWJVQMWIWKVPWLUSWJAVPUTSVATVBW
      OWABDWOVPCVLJWAVPWMCGVLWCWDWPWQWRQVPVTCVLEWIVPIWKVPIWJVTIWIWKVPWLRWJAVPUL
      SUMTVBVCVE $.
  $}

  ${
    $d x y z B $.  $d x z C $.  $d x y D $.  $d x z ph $.  $d x y ps $.
    reusv3.1 $e |- ( y = z -> ( ph <-> ps ) ) $.
    reusv3.2 $e |- ( y = z -> C = D ) $.
    $( Two ways of expressing existential uniqueness via an indirect equality.
       (Contributed by NM, 23-Dec-2012.) $)
    reusv3i $p |- ( E. x e. A A. y e. B ( ph -> x = C )
            -> A. y e. B A. z e. B ( ( ph /\ ps ) -> C = D ) ) $=
      ( cv wceq wi wral wa eqeq2d imbi12d cbvralv biimpi raaanv prth eqtr2 syl6
      2ralimi sylbir mpdan rexlimivw ) ACLZHMZNZDGOZABPZHIMZNZEGODGOZCFULBUIIMZ
      NZEGOZUPULUSUKURDEGDLELMZABUJUQJUTHIUIKQRSTULUSPUKURPZEGODGOUPUKURDEGUAVA
      UODEGGVAUMUJUQPUNAUJBUQUBUIHIUCUDUEUFUGUH $.

    $d x y z A $.
    $( Two ways to express single-valuedness of a class expression
       ` C ( y ) ` .  See ~ reusv1 for the connection to uniqueness.
       (Contributed by NM, 27-Dec-2012.) $)
    reusv3 $p |- ( E. y e. B ( ph /\ C e. A )
          -> ( A. y e. B A. z e. B ( ( ph /\ ps ) -> C = D )
                   <-> E. x e. A A. y e. B ( ph -> x = C ) ) ) $=
      ( wcel wa wrex wceq wi wral cv bitri ralbii eleq1d anbi12d nfra2 nfv nfim
      cbvrexv risset ralcom impexp bi2.04 r19.21v sylbi com3l imp31 eqeq1 eqcom
      rsp syl6bb imbi2d ralbidv syl5ibrcom reximdv com23 syl5bi expimpd rexlimi
      ex reusv3i impbid1 ) AHFLZMZDGNZABMHIOZPZEGQDGQZACRZHOZPZDGQZCFNZVLBIFLZM
      ZEGNVOVTPZVKWBDEGDRERZOZABVJWAJWEHIFKUAUBUFWBWCEGVOVTEVNDEGGUCVTEUDUEWDGL
      ZBWAWCWAVPIOZCFNZWFBMZWCCIFUGWIVOWHVTWIVOWHVTPWIVOMZWGVSCFWJVSWGAVMPZDGQZ
      WFBVOWLVOWFBWLVOBWLPZEGQZWFWMPVOVNDGQZEGQWNVNDEGGUHWOWMEGWOBWKPZDGQWMVNWP
      DGVNABVMPPWPABVMUIABVMUJSTBWKDGUKSTSWMEGUQULUMUNWGVRWKDGWGVQVMAWGVQIHOVMV
      PIHUOIHUPURUSUTVAVBVGVCVDVEVFULABCDEFGHIJKVHVI $.
  $}

  ${
    $d x y A $.  $d x B $.
    eusv4.1 $e |- B e. _V $.
    $( Two ways to express single-valuedness of a class expression
       ` B ( y ) ` .  (Contributed by NM, 27-Oct-2010.) $)
    eusv4 $p |- ( E! x E. y e. A x = B <-> E! x A. y e. A x = B ) $=
      ( cvv wcel cv wceq wrex weu wral wb reusv2lem3 a1i mprg ) DFGZAHDIZBCJAKR
      BCLAKMBCABCDNQBHCGEOP $.
  $}

  ${
    $d x A $.  $d y ph $.  $d x ps $.  $d x y $.
    alxfr.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Transfer universal quantification from a variable ` x ` to another
       variable ` y ` contained in expression ` A ` .  (Contributed by NM,
       18-Feb-2007.) $)
    alxfr $p |- ( ( A. y A e. B /\ A. x E. y x = A ) ->
                ( A. x ph <-> A. y ps ) ) $=
      ( wcel wal cv wceq wex wa wi spcgv com12 alimdv adantr nfa1 nfv sp exlimd
      syl5ibrcom adantl impbid ) EFHZDIZCJEKZDLZCIZMACIZBDIZUGUKULNUJUKUGULUKUF
      BDUFUKBABCEFGOPQPRUJULUKNUGULUJUKULUIACULUHADBDSADTULAUHBBDUAGUCUBQPUDUE
      $.
  $}

  ${
    $d x A $.  $d x y B $.  $d x C $.  $d x ch $.  $d x y ph $.  $d y ps $.
    ralxfrd.1 $e |- ( ( ph /\ y e. C ) -> A e. B ) $.
    ralxfrd.2 $e |- ( ( ph /\ x e. B ) -> E. y e. C x = A ) $.
    ralxfrd.3 $e |- ( ( ph /\ x = A ) -> ( ps <-> ch ) ) $.
    $( Transfer universal quantification from a variable ` x ` to another
       variable ` y ` contained in expression ` A ` .  (Contributed by NM,
       15-Aug-2014.)  (Proof shortened by Mario Carneiro, 19-Nov-2016.)  (Proof
       shortened by JJ, 7-Aug-2021.) $)
    ralxfrd $p |- ( ph -> ( A. x e. B ps <-> A. y e. C ch ) ) $=
      ( wral cv wcel wa wceq wb adantlr ralrimdva wrex rspcdv wi r19.29 impcomd
      exbiri rexlimdvw syl5 adantr mpan2d impbid ) ABDGLZCEHLZAUKCEHAEMHNZOBCDF
      GIADMZFPZBCQUMKRUASAULBDGAUNGNZOULUOEHTZBJAULUQOZBUBUPURCUOOZEHTABCUOEHUC
      AUSBEHAUOCBAUOBCKUEUDUFUGUHUISUJ $.

    $( Transfer universal quantification from a variable ` x ` to another
       variable ` y ` contained in expression ` A ` .  (Contributed by FL,
       10-Apr-2007.)  (Revised by Mario Carneiro, 15-Aug-2014.) $)
    rexxfrd $p |- ( ph -> ( E. x e. B ps <-> E. y e. C ch ) ) $=
      ( wn wral wrex cv wceq wa notbid ralxfrd dfrex2 3bitr4g ) ABLZDGMZLCLZEHM
      ZLBDGNCEHNAUCUEAUBUDDEFGHIJADOFPQBCKRSRBDGTCEHTUA $.
  $}

  ${
    $d x A $.  $d x y B $.  $d x C $.  $d x ch $.  $d x y ph $.  $d y ps $.
    ralxfr2d.1 $e |- ( ( ph /\ y e. C ) -> A e. V ) $.
    ralxfr2d.2 $e |- ( ph -> ( x e. B <-> E. y e. C x = A ) ) $.
    ralxfr2d.3 $e |- ( ( ph /\ x = A ) -> ( ps <-> ch ) ) $.
    $( Transfer universal quantification from a variable ` x ` to another
       variable ` y ` contained in expression ` A ` .  (Contributed by Mario
       Carneiro, 20-Aug-2014.) $)
    ralxfr2d $p |- ( ph -> ( A. x e. B ps <-> A. y e. C ch ) ) $=
      ( cv wcel wa wceq wex elisset syl wi wrex biimprd r19.23v sylibr r19.21bi
      wral eleq1 mpbidi exlimdv mpd biimpa ralxfrd ) ABCDEFGHAEMHNOZDMZFPZDQZFG
      NZUMFINUPJDFIRSUMUOUQDUOUNGNZUQUMAUOURTZEHAUOEHUAZURTUSEHUFAURUTKUBUOUREH
      UCUDUEUNFGUGUHUIUJAURUTKUKLUL $.

    $( Transfer universal quantification from a variable ` x ` to another
       variable ` y ` contained in expression ` A ` .  (Contributed by Mario
       Carneiro, 20-Aug-2014.)  (Proof shortened by Mario Carneiro,
       19-Nov-2016.) $)
    rexxfr2d $p |- ( ph -> ( E. x e. B ps <-> E. y e. C ch ) ) $=
      ( wn wral wrex cv wceq wa notbid dfrex2 ralxfr2d 3bitr4g ) ABMZDGNZMCMZEH
      NZMBDGOCEHOAUDUFAUCUEDEFGHIJKADPFQRBCLSUASBDGTCEHTUB $.
  $}

  ${
    $d x A $.  $d x y B $.  $d x C $.  $d x ch $.  $d x y ph $.  $d y ps $.
    ralxfrd2.1 $e |- ( ( ph /\ y e. C ) -> A e. B ) $.
    ralxfrd2.2 $e |- ( ( ph /\ x e. B ) -> E. y e. C x = A ) $.
    ralxfrd2.3 $e |- ( ( ph /\ y e. C /\ x = A ) -> ( ps <-> ch ) ) $.
    $( Transfer universal quantification from a variable ` x ` to another
       variable ` y ` contained in expression ` A ` .  Variant of ~ ralxfrd .
       (Contributed by Alexander van der Vekens, 25-Apr-2018.) $)
    ralxfrd2 $p |- ( ph -> ( A. x e. B ps <-> A. y e. C ch ) ) $=
      ( wral cv wcel wa wceq wb 3expa ralrimdva wrex rspcdv ad4ant134 rexlimdva
      r19.29 exbiri impcomd syl5 mpan2d impbid ) ABDGLZCEHLZAUJCEHAEMHNZOBCDFGI
      AULDMZFPZBCQZKRUASAUKBDGAUMGNZOZUKUNEHTZBJUKUROCUNOZEHTUQBCUNEHUDUQUSBEHU
      QULOZUNCBUTUNBCAULUNUOUPKUBUEUFUCUGUHSUI $.

    $( Transfer existence from a variable ` x ` to another variable ` y `
       contained in expression ` A ` .  Variant of ~ rexxfrd .  (Contributed by
       Alexander van der Vekens, 25-Apr-2018.) $)
    rexxfrd2 $p |- ( ph -> ( E. x e. B ps <-> E. y e. C ch ) ) $=
      ( wn wral wrex cv wcel wceq w3a notbid dfrex2 ralxfrd2 3bitr4g ) ABLZDGMZ
      LCLZEHMZLBDGNCEHNAUDUFAUCUEDEFGHIJAEOHPDOFQRBCKSUASBDGTCEHTUB $.
  $}

  ${
    $d x ps $.  $d y ph $.  $d x A $.  $d x y B $.  $d x C $.
    ralxfr.1 $e |- ( y e. C -> A e. B ) $.
    ralxfr.2 $e |- ( x e. B -> E. y e. C x = A ) $.
    ralxfr.3 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Transfer universal quantification from a variable ` x ` to another
       variable ` y ` contained in expression ` A ` .  (Contributed by NM,
       10-Jun-2005.)  (Revised by Mario Carneiro, 15-Aug-2014.) $)
    ralxfr $p |- ( A. x e. B ph <-> A. y e. C ps ) $=
      ( wral wb wtru cv wcel adantl wceq wrex ralxfrd mptru ) ACFKBDGKLMABCDEFG
      DNGOEFOMHPCNZFOUAEQZDGRMIPUBABLMJPST $.

    $( Alternate proof of ~ ralxfr which does not use ~ ralxfrd .  (Contributed
       by NM, 10-Jun-2005.)  (Revised by Mario Carneiro, 15-Aug-2014.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    ralxfrALT $p |- ( A. x e. B ph <-> A. y e. C ps ) $=
      ( wral cv wcel wi rspcv syl com12 ralrimiv wceq wrex nfv biimprcd rexlimd
      nfra1 rsp syl6 syl5 impbii ) ACFKZBDGKZUIBDGDLGMZUIBUKEFMUIBNHABCEFJOPQRU
      JACFCLZFMULESZDGTUJAIUJUMADGBDGUDADUAUJUKBUMANBDGUEUMABJUBUFUCUGRUH $.

    $( Transfer existence from a variable ` x ` to another variable ` y `
       contained in expression ` A ` .  (Contributed by NM, 10-Jun-2005.)
       (Revised by Mario Carneiro, 15-Aug-2014.) $)
    rexxfr $p |- ( E. x e. B ph <-> E. y e. C ps ) $=
      ( wrex wn wral dfrex2 cv wceq notbid ralxfr xchbinxr bitr4i ) ACFKALZCFMZ
      LBDGKZACFNUCBLZDGMUBBDGNUAUDCDEFGHICOEPABJQRST $.
  $}

  ${
    $d x A $.  $d x y D $.  $d y ph $.  $d y ps $.  $d x ch $.
    rabxfrd.1 $e |- F/_ y B $.
    rabxfrd.2 $e |- F/_ y C $.
    rabxfrd.3 $e |- ( ( ph /\ y e. D ) -> A e. D ) $.
    rabxfrd.4 $e |- ( x = A -> ( ps <-> ch ) ) $.
    rabxfrd.5 $e |- ( y = B -> A = C ) $.
    $( Class builder membership after substituting an expression ` A `
       (containing ` y ` ) for ` x ` in the class expression ` ch ` .
       (Contributed by NM, 16-Jan-2012.) $)
    rabxfrd $p |- ( ( ph /\ B e. D ) ->
                 ( C e. { x e. D | ps } <-> B e. { y e. D | ch } ) ) $=
      ( wcel crab wb wa wi imp cv ibibr sylib anbi1d elrab rabid 3bitr4g eleq2d
      ex rabbidva nfcv nfel1 wceq eleq1d elrabf nfrab1 nfel eleq1 pm5.32 sylibr
      3bitr3g ) AGIOZHBDIPZOZGCEIPZOZQZAVBVDRZVBVFRZQVBVGSAGFVCOZEIPZOGEUAZVEOZ
      EIPZOVHVIAVKVNGAVJVMEIAVLIOZRZFIOZCRVOCRVJVMVPVQVOCAVOVQVOQZAVOVQSVOVRSAV
      OVQLUIVOVQUBUCTUDBCDFIMUECEIUFUGUJUHVJVDEGIJEIUKZEHVCKULVLGUMFHVCNUNUOVMV
      FEGIJVSEGVEJCEIUPUQVLGVEURUOVAVBVDVFUSUTT $.
  $}

  ${
    $d x A $.  $d x y D $.  $d y ph $.  $d x ps $.
    rabxfr.1 $e |- F/_ y B $.
    rabxfr.2 $e |- F/_ y C $.
    rabxfr.3 $e |- ( y e. D -> A e. D ) $.
    rabxfr.4 $e |- ( x = A -> ( ph <-> ps ) ) $.
    rabxfr.5 $e |- ( y = B -> A = C ) $.
    $( Class builder membership after substituting an expression ` A `
       (containing ` y ` ) for ` x ` in the class expression ` ph ` .
       (Contributed by NM, 10-Jun-2005.) $)
    rabxfr $p |- ( B e. D ->
                 ( C e. { x e. D | ph } <-> B e. { y e. D | ps } ) ) $=
      ( wtru wcel crab wb tru cv adantl rabxfrd mpan ) NFHOGACHPOFBDHPOQRNABCDE
      FGHIJDSHOEHONKTLMUAUB $.
  $}

  ${
    $d x ph $.  $d x A $.  $d x y B $.
    reuxfr2.1 $e |- ( y e. B -> A e. B ) $.
    reuxfr2.2 $e |- ( x e. B -> E* y e. B x = A ) $.
    $( Transfer existential uniqueness from a variable ` x ` to another
       variable ` y ` contained in expression ` A ` .  (Contributed by NM,
       14-Nov-2004.)  (Revised by NM, 16-Jun-2017.) $)
    reuxfr2 $p |- ( E! x e. B E. y e. B ( x = A /\ ph ) <-> E! y e. B ph ) $=
      ( cv wceq wa wrex wreu wb wtru wcel adantl wrmo reuxfr3d mptru ) BHZDIZAJ
      CEKBELACELMNABCDEECHEODEONFPTEOUACEQNGPRS $.
  $}

  ${
    $d x y ph $.  $d y ps $.  $d x ch $.  $d x A $.  $d x y B $.
    reuxfrd.1 $e |- ( ( ph /\ y e. B ) -> A e. B ) $.
    reuxfrd.2 $e |- ( ( ph /\ x e. B ) -> E! y e. B x = A ) $.
    reuxfrd.3 $e |- ( x = A -> ( ps <-> ch ) ) $.
    $( Transfer existential uniqueness from a variable ` x ` to another
       variable ` y ` contained in expression ` A ` .  Use ~ reuhypd to
       eliminate the second hypothesis.  (Contributed by NM, 16-Jan-2012.) $)
    reuxfrd $p |- ( ph -> ( E! x e. B ps <-> E! y e. B ch ) ) $=
      ( wreu cv wceq wa wrex wcel reurex syl biantrurd r19.41v pm5.32i reubidva
      rexbii bitr3i syl6bb wrmo reurmo reuxfr3d bitrd ) ABDGKDLZFMZCNZEGOZDGKCE
      GKABUMDGAUJGPNZBUKEGOZBNZUMUNUOBUNUKEGKZUOIUKEGQRSUPUKBNZEGOUMUKBEGTURULE
      GUKBCJUAUCUDUEUBACDEFGGHUNUQUKEGUFIUKEGUGRUHUI $.
  $}

  ${
    $d x ps $.  $d y ph $.  $d x A $.  $d x y B $.
    reuxfr.1 $e |- ( y e. B -> A e. B ) $.
    reuxfr.2 $e |- ( x e. B -> E! y e. B x = A ) $.
    reuxfr.3 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Transfer existential uniqueness from a variable ` x ` to another
       variable ` y ` contained in expression ` A ` .  Use ~ reuhyp to
       eliminate the second hypothesis.  (Contributed by NM, 14-Nov-2004.) $)
    reuxfr $p |- ( E! x e. B ph <-> E! y e. B ps ) $=
      ( wreu wb wtru cv wcel adantl wceq reuxfrd mptru ) ACFJBDFJKLABCDEFDMFNEF
      NLGOCMZFNSEPDFJLHOIQR $.
  $}

  ${
    $d y ph $.  $d y B $.  $d y C $.  $d x y $.
    reuhypd.1 $e |- ( ( ph /\ x e. C ) -> B e. C ) $.
    reuhypd.2 $e |- ( ( ph /\ x e. C /\ y e. C ) -> ( x = A <-> y = B ) ) $.
    $( A theorem useful for eliminating the restricted existential uniqueness
       hypotheses in ~ riotaxfrd .  (Contributed by NM, 16-Jan-2012.) $)
    reuhypd $p |- ( ( ph /\ x e. C ) -> E! y e. C x = A ) $=
      ( cv wcel wa wceq weu wreu cvv elexd eueq sylib eleq1 syl5ibrcom pm4.71rd
      wb 3expa pm5.32da bitr4d eubidv mpbid df-reu sylibr ) ABIZFJZKZCIZFJZUJDL
      ZKZCMZUOCFNULUMELZCMZUQULEOJUSULEFGPCEQRULURUPCULURUNURKUPULURUNULUNUREFJ
      GUMEFSTUAULUNUOURAUKUNUOURUBHUCUDUEUFUGUOCFUHUI $.
  $}

  ${
    $d y B $.  $d y C $.  $d x y $.
    reuhyp.1 $e |- ( x e. C -> B e. C ) $.
    reuhyp.2 $e |- ( ( x e. C /\ y e. C ) -> ( x = A <-> y = B ) ) $.
    $( A theorem useful for eliminating the restricted existential uniqueness
       hypotheses in ~ reuxfr .  (Contributed by NM, 15-Nov-2004.) $)
    reuhyp $p |- ( x e. C -> E! y e. C x = A ) $=
      ( wtru cv wcel wceq wreu tru adantl wb 3adant1 reuhypd mpan ) HAIZEJZSCKZ
      BELMHABCDETDEJHFNTBIZEJUAUBDKOHGPQR $.
  $}

  ${
    $d x z w v $.  $d y z w v $.
    $( The Axiom of Pairing of Zermelo-Fraenkel set theory.  Axiom 2 of
       [TakeutiZaring] p. 15.  In some textbooks this is stated as a separate
       axiom; here we show it is redundant since it can be derived from the
       other axioms.

       This theorem should not be referenced by any proof other than
       ~ axprALT .  Instead, use ~ zfpair2 below so that the uses of the Axiom
       of Pairing can be more easily identified.  (Contributed by NM,
       18-Oct-1995.)  (New usage is discouraged.) $)
    zfpair $p |- { x , y } e. _V $=
      ( vw vz vv cv cpr weq wo cab cvv dfpr2 c0 wceq wex isseti mpbiran equequ2
      wa 19.41v csn 19.43 prlem2 exbii 0ex p0ex orbi12i 3bitr3ri abbii eqeltrri
      pp0ex wi wal 0inp0 prlem1 alrimdv spimev orcom syl7bi jaoi zfrep4 eqeltri
      con2i ) AFZBFZGCAHZCBHZIZCJZKCVDVELVIDFZMNZVJMUAZNZIZVKVFSZVMVGSZIZSZDOZC
      JKVHVSCVQDOVODOZVPDOZIVSVHVOVPDUBVQVRDVKVFVMVGUCUDVTVFWAVGVTVKDOVFDMUEPVK
      VFDTQWAVMDOVGDVLUFPVMVGDTQUGUHUIVNVQDCEMVLGVNDJKDMVLLUKUJVKVQCEHZULZCUMZE
      OVMVKWDEAEAHZVKWCCWEVKVFVMVGWBEACRVJUNZUOUPUQVMWDEBEBHZVMWCCVQVPVOIWGVMWB
      VOVPURWGVMVGVKVFWBEBCRVKVMWFVCUOUSUPUQUTVAVBVB $.

    $( Alternate proof of ~ axpr .  (Contributed by NM, 14-Nov-2006.)
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    axprALT $p |- E. z A. w ( ( w = x \/ w = y ) -> w e. z ) $=
      ( cv cpr wceq wo wcel wi wal zfpair isseti dfcleq vex bibi2i biimpr sylbi
      wb elpr alimi eximii ) CEZAEZBEZFZGZDEZUDGUHUEGHZUHUCIZJZDKZCCUFABLMUGUJU
      HUFIZSZDKULDUCUFNUNUKDUNUJUISUKUMUIUJUHUDUEDOTPUJUIQRUARUB $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Derive the Axiom of Pairing
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    $d x y z d $.
    $( Lemma for ~ axpr .  The set of all empty sets exists.  (Contributed by
       Rohan Ridenour, 10-Aug-2023.) $)
    axprlem1 $p |- E. x A. y ( y e. x <-> A. z -. z e. y ) $=
      ( vd cv wcel wn wal wi wex ax-pow wb imnot sps albid imbi1d albidv exbidv
      nfa1 mpbii ax-nul exlimiiv bm1.3ii ) CEZBEZFZGZCHZABUDDEFZGZCHZUHUEAEFZIZ
      BHZAJZDUKUFUIIZCHZULIZBHZAJUODABCKUKUSUNAUKURUMBUKUQUHULUKUPUGCUJCSUJUPUG
      LCUFUIMNOPQRTDCUAUBUC $.
  $}

  $( $j usage 'axprlem1' avoids 'ax-ext'; $)

  ${
    $d x y z w e $.
    $( Lemma for ~ axpr .  The set of all subsets of the set of all empty sets
       exists.  (Contributed by Rohan Ridenour, 9-Aug-2023.) $)
    axprlem2 $p |- E. x A. y ( y e. x <-> A. z e. y A. w -. w e. z ) $=
      ( ve wel wn wal cv wral wcel wb wi wex ax-pow nfa1 imbi2 sps albid df-ral
      syl6bbr imbi1d albidv exbidv mpbii axprlem1 exlimiiv bm1.3ii ) DCFGDHZCBI
      ZJZABCIZEIKZUILZCHZUKUJAIKZMZBHZANZEUOULUJKZUMMZCHZUPMZBHZANUSEABCOUOVDUR
      AUOVCUQBUOVBUKUPUOVBUTUIMZCHUKUOVAVECUNCPUNVAVELCUMUIUTQRSUICUJTUAUBUCUDU
      EECDUFUGUH $.
  $}

  $( $j usage 'axprlem2' avoids 'ax-ext'; $)

  ${
    $d x z w $.  $d y z w $.  $d z w n $.  $d z w s p $.
    $( Lemma for ~ axpr .  Eliminate the antecedent of the relevant replacement
       instance.  (Contributed by Rohan Ridenour, 10-Aug-2023.) $)
    axprlem3 $p |- E. z A. w ( w e. z <->
      E. s ( s e. p /\ if- ( E. n n e. s , w = x , w = y ) ) ) $=
      ( cv wcel wex weq wi wal wa ax6evr biimpd alrimiv expcom eximdv mpi wb wn
      wif axrep4 ifptru equtrr sylan9r ifpfal adantl simpl equtr syl6ci pm2.61i
      nfv mpg ) EHFHZIEJZDAKZDBKZUCZDCKZLZDMZCJZDHCHIUPGHIUTNFJUADMCJFUTFDCGUTC
      UNUDUQVDUQACKZCJVDCAOUQVEVCCVEUQVCVEUQNVBDUQUTURVEVAUQUTURUQURUSUEPACDUFU
      GQRSTUQUBZBCKZCJVDCBOVFVGVCCVGVFVCVGVFNZVBDVHUTUSVGVAVFUTUSLVGVFUTUSUQURU
      SUHPUIVGVFUJDBCUKULQRSTUMUO $.
  $}

  $( $j usage 'axprlem3' avoids 'ax-ext'; $)

  ${
    $d x s $.  $d w s $.  $d t n s $.
    $( Lemma for ~ axpr .  The first element of the pair is included in the
       replacement output.  (Contributed by Rohan Ridenour, 10-Aug-2023.) $)
    axprlem4 $p |- ( ( A. s ( s e. p <-> A. n e. s A. t -. t e. n ) /\ w = x )
      -> E. s ( s e. p /\ if- ( E. n n e. s , w = x , w = y ) ) ) $=
      ( cv wcel wel wn wal wb weq wa wex nfa1 sp eximd mpi wral wif axprlem1 wi
      nfv biimp alimi df-ral sylibr adantr adantl mpbird adantrr ax-nul biimprd
      nfan simprr ifptru biimpar syl2an2r jca expcom ) FHZGHIZDEJKDLZEVCUAZMZFL
      ZCANZOZEHVCIZVEMZELZFPVDVKEPZVICBNZUBZOZFPFEDUCVJVMVQFVHVIFVGFQVIFUEUPVMV
      JVQVMVJOVDVPVMVHVDVIVMVHOVDVFVMVFVHVMVKVEUDZELVFVLVREVKVEUFUGVEEVCUHUIUJV
      HVGVMVGFRUKULUMVMVNVJVIVPVMVEEPVNEDUNVMVEVKEVLEQVMVKVEVLERUOSTVMVHVIUQVNV
      PVIVNVIVOURUSUTVAVBST $.
  $}

  $( $j usage 'axprlem4' avoids 'ax-ext'; $)

  ${
    $d y s $.  $d w s $.  $d n s $.
    $( Lemma for ~ axpr .  The second element of the pair is included in the
       replacement output.  (Contributed by Rohan Ridenour, 10-Aug-2023.) $)
    axprlem5 $p |- ( ( A. s ( s e. p <-> A. n e. s A. t -. t e. n ) /\ w = y )
      -> E. s ( s e. p /\ if- ( E. n n e. s , w = x , w = y ) ) ) $=
      ( cv wcel wel wn wal wral wb weq wa wex wif ax-nul nfa1 nfv nfan wi alimi
      pm2.21 adantr df-ral sylibr sp ad2antrl mpbird simpl alnex simprr biimpar
      sylib ifpfal syl2anc jca expcom eximd mpi ) FHZGHIZDEJKDLZEVCMZNZFLZCBOZP
      ZEHVCIZKZELZFQVDVKEQZCAOZVIRZPZFQFESVJVMVQFVHVIFVGFTVIFUAUBVMVJVQVMVJPZVD
      VPVRVDVFVRVKVEUCZELZVFVMVTVJVLVSEVKVEUEUDUFVEEVCUGUHVHVGVMVIVGFUIUJUKVRVN
      KZVIVPVRVMWAVMVJULVKEUMUPVMVHVIUNWAVPVIVNVOVIUQUOURUSUTVAVB $.
  $}

  $( $j usage 'axprlem5' avoids 'ax-ext'; $)

  ${
    $d x z w s p $.  $d y z w s p $.  $d z w t n s p $.
    $( Unabbreviated version of the Axiom of Pairing of ZF set theory, derived
       as a theorem from the other axioms.

       This theorem should not be referenced by any proof.  Instead, use
       ~ ax-pr below so that the uses of the Axiom of Pairing can be more
       easily identified.

       For a shorter proof using ~ ax-ext , see ~ axprALT .  (Contributed by
       NM, 14-Nov-2006.)  Remove dependency on ~ ax-ext .  (Revised by Rohan
       Ridenour, 10-Aug-2023.)  (New usage is discouraged.) $)
    axpr $p |- E. z A. w ( ( w = x \/ w = y ) -> w e. z ) $=
      ( vs vp vt vn cv wcel weq wo wb wal wi wel wn wral wex nfv nfa1 nfor nfim
      wif wa axprlem3 ifpor adantl a1d exlimi com12 axprlem4 axprlem5 jaodan ex
      impbid bibi2d albidv exbidv mpbii axprlem2 exlimiiv biimpr alimi eximii )
      DICIJZDAKZDBKZLZMZDNZVIVFOZDNCEIZFIJZGHPQGNHVMRMZENZVKCSZFVPVFVNHIVMJHSZV
      GVHUDZUEZESZMZDNZCSVQABCDHEFUFVPWCVKCVPWBVJDVPWAVIVFVPWAVIWAVPVIVTVPVIOEV
      PVIEVOEUAVGVHEVGETVHETUBUCVTVIVPVSVIVNVRVGVHUGUHUIUJUKVPVIWAVPVGWAVHABDGH
      EFULABDGHEFUMUNUOUPUQURUSUTFEHGVAVBVJVLDVFVIVCVDVE $.
  $}

  $( $j usage 'axpr' avoids 'ax-ext'; $)

  ${
    $d x z w v $.  $d y z w v $.
    $( The Axiom of Pairing of ZF set theory.  It was derived as theorem ~ axpr
       above and is therefore redundant, but we state it as a separate axiom
       here so that its uses can be identified more easily.  (Contributed by
       NM, 14-Nov-2006.) $)
    ax-pr $a |- E. z A. w ( ( w = x \/ w = y ) -> w e. z ) $.
    $( $j restatement 'ax-pr' of 'axpr'; $)

    $( Derive the abbreviated version of the Axiom of Pairing from ~ ax-pr .
       See ~ zfpair for its derivation from the other axioms.  (Contributed by
       NM, 14-Nov-2006.) $)
    zfpair2 $p |- { x , y } e. _V $=
      ( vz vw cv cpr wceq wex wcel wo wal ax-pr bm1.3ii dfcleq vex bibi2i albii
      wb elpr bitri exbii mpbir issetri ) CAEZBEZFZCEZUFGZCHDEZUGIZUIUDGUIUEGJZ
      RZDKZCHUKCDABCDLMUHUMCUHUJUIUFIZRZDKUMDUGUFNUOULDUNUKUJUIUDUEDOSPQTUAUBUC
      $.
  $}

  ${
    $d x A $.
    $( A singleton is a set.  Theorem 7.12 of [Quine] p. 51, proved using
       Extensionality, Separation, Null Set, and Pairing.  See also ~ snexALT .
       (Contributed by NM, 7-Aug-1994.)  (Revised by Mario Carneiro,
       19-May-2013.)  (Proof modification is discouraged.) $)
    snex $p |- { A } e. _V $=
      ( vx cvv wcel csn cpr dfsn2 cv wceq preq12 anidms eleq1d zfpair2 syl5eqel
      vtoclg wn c0 snprc biimpi 0ex syl6eqel pm2.61i ) ACDZAEZCDUCUDAAFZCAGBHZU
      FFZCDUECDBACUFAIZUGUECUHUGUEIUFUFAAJKLBBMONUCPZUDQCUIUDQIARSTUAUB $.
  $}

  ${
    $d x A $.  $d x y B $.
    $( The Axiom of Pairing using class variables.  Theorem 7.13 of [Quine]
       p. 51.  By virtue of its definition, an unordered pair remains a set
       (even though no longer a pair) even when its components are proper
       classes (see ~ prprc ), so we can dispense with hypotheses requiring
       them to be sets.  (Contributed by NM, 15-Jul-1993.) $)
    prex $p |- { A , B } e. _V $=
      ( vx vy cvv wcel cpr wi wceq preq2 eleq1d zfpair2 vtoclg preq1 syl5ib csn
      cv wn snex syl6eqel vtocleg prprc1 prprc2 pm2.61nii ) AEFZBEFZABGZEFZUFUH
      HCAEUFCQZBGZEFZUIAIZUHUIDQZGZEFUKDBEUMBIUNUJEUMBUIJKCDLMULUJUGEUIABNKOUAU
      ERUGBPEABUBBSTUFRUGAPEABUCASTUD $.
  $}

  ${
    $d x y $.
    $( Alternate proof of ~ el , shorter but requiring more axioms.
       (Contributed by NM, 4-Jan-2002.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    elALT $p |- E. y x e. y $=
      ( cv csn wcel wex vex snid snex eleq2 spcev ax-mp ) ACZMDZEZMBCZEZBFMAGHQ
      OBNMIPNMJKL $.
  $}

  ${
    $d x y $.
    $( Alternate proof of ~ dtru using ~ ax-pr instead of ~ ax-pow .
       (Contributed by Mario Carneiro, 31-Aug-2015.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    dtruALT2 $p |- -. A. x x = y $=
      ( cv wceq wn wex wal c0 csn 0inp0 snex eqeq2 notbid spcev syl 0ex pm2.61i
      exnal eqcom albii xchbinx mpbi ) BCZACZDZEZAFZUDUCDZAGZEUCHDZUGUJUCHIZDZE
      ZUGUCJUFUMAUKHKUDUKDUEULUDUKUCLMNOUFUJEAHPUDHDUEUJUDHUCLMNQUGUEAGUIUEARUE
      UHAUCUDSTUAUB $.
  $}

  $( A singleton of a set belongs to the power class of a class containing the
     set.  (Contributed by Alan Sare, 25-Aug-2011.) $)
  snelpwi $p |- ( A e. B -> { A } e. ~P B ) $=
    ( wcel csn wss cpw snssi snex elpw sylibr ) ABCADZBEKBFCABGKBAHIJ $.

  ${
    snelpw.1 $e |- A e. _V $.
    $( A singleton of a set belongs to the power class of a class containing
       the set.  (Contributed by NM, 1-Apr-1998.) $)
    snelpw $p |- ( A e. B <-> { A } e. ~P B ) $=
      ( wcel csn wss cpw snss snex elpw bitr4i ) ABDAEZBFLBGDABCHLBAIJK $.
  $}

  $( A pair of two sets belongs to the power class of a class containing those
     two sets and vice versa.  (Contributed by AV, 8-Jan-2020.) $)
  prelpw $p |- ( ( A e. V /\ B e. W )
                 -> ( ( A e. C /\ B e. C ) <-> { A , B } e. ~P C ) ) $=
    ( wcel wa cpr wss cpw prssg prex elpw syl6bbr ) ADFBEFGACFBCFGABHZCIOCJFABC
    DEKOCABLMN $.

  $( A pair of two sets belongs to the power class of a class containing those
     two sets.  (Contributed by Thierry Arnoux, 10-Mar-2017.)  (Proof shortened
     by AV, 23-Oct-2021.) $)
  prelpwi $p |- ( ( A e. C /\ B e. C ) -> { A , B } e. ~P C ) $=
    ( wcel wa cpr cpw prelpw ibi ) ACDBCDEABFCGDABCCCHI $.

  ${
    $d x y z $.
    $( A theorem similar to extensionality, requiring the existence of a
       singleton.  Exercise 8 of [TakeutiZaring] p. 16.  (Contributed by NM,
       10-Aug-1993.) $)
    rext $p |- ( A. z ( x e. z -> y e. z ) -> x = y ) $=
      ( cv wcel wi wal csn wceq vsnid snex eleq2 imbi12d spcv mpi velsn equcomi
      sylbi syl ) ADZCDZEZBDZUAEZFZCGZUCTHZEZTUCIZUFTUGEZUHAJUEUJUHFCUGTKUAUGIU
      BUJUDUHUAUGTLUAUGUCLMNOUHUCTIUIBTPBAQRS $.
  $}

  ${
    $d A x $.  $d B x $.
    $( The powerclass construction preserves and reflects inclusion.  Classes
       are subclasses if and only if their power classes are subclasses.
       Exercise 18 of [TakeutiZaring] p. 18.  (Contributed by NM,
       13-Oct-1996.) $)
    sspwb $p |- ( A C_ B <-> ~P A C_ ~P B ) $=
      ( vx wss cpw wcel sstr2 com12 vex elpw 3imtr4g ssrdv csn ssel snex bitr4i
      cv snss 3imtr3g impbii ) ABDZAEZBEZDZUACUBUCUACQZADZUEBDZUEUBFUEUCFUFUAUG
      UEABGHUEACIZJUEBUHJKLUDCABUDUEMZUBFZUIUCFZUEAFZUEBFZUBUCUINUJUIADULUIAUEO
      ZJUEAUHRPUKUIBDUMUIBUNJUEBUHRPSLT $.
  $}

  ${
    $d A x y $.
    $( A class equals the union of its power class.  Exercise 6(a) of
       [Enderton] p. 38.  (Contributed by NM, 14-Oct-1996.)  (Proof shortened
       by Alan Sare, 28-Dec-2008.) $)
    unipw $p |- U. ~P A = A $=
      ( vx vy cpw cuni cv wcel wa wex eluni elelpwi exlimiv sylbi vsnid snelpwi
      csn elunii sylancr impbii eqriv ) BADZEZABFZUBGZUCAGZUDUCCFZGUFUAGHZCIUEC
      UCUAJUGUECUCUFAKLMUEUCUCPZGUHUAGUDBNUCAOUCUHUAQRST $.
  $}

  $( The union of the universe is the universe.  Exercise 4.12(c) of
     [Mendelson] p. 235.  (Contributed by NM, 14-Sep-2003.) $)
  univ $p |- U. _V = _V $=
    ( cvv cpw cuni pwv unieqi unipw eqtr3i ) ABZCACAHADEAFG $.

  $( Membership of a power class.  Exercise 10 of [Enderton] p. 26.
     (Contributed by NM, 13-Jan-2007.) $)
  pwel $p |- ( A e. B -> ~P A e. ~P ~P U. B ) $=
    ( wcel cpw cuni cvv pwexg wss elssuni sspwb sylib elpwd ) ABCZADZBEZDZFABGM
    AOHNPHABIAOJKL $.

  $( A class is transitive iff its power class is transitive.  (Contributed by
     Alan Sare, 25-Aug-2011.)  (Revised by Mario Carneiro, 15-Jun-2014.) $)
  pwtr $p |- ( Tr A <-> Tr ~P A ) $=
    ( cpw cuni wss wtr unipw sseq1i df-tr dftr4 3bitr4ri ) ABZCZKDAKDKEAELAKAFG
    KHAIJ $.

  ${
    $d A x $.  $d B x $.
    $( An extensionality-like principle defining subclass in terms of subsets.
       (Contributed by NM, 30-Jun-2004.) $)
    ssextss $p |- ( A C_ B <-> A. x ( x C_ A -> x C_ B ) ) $=
      ( wss cpw cv wcel wi wal sspwb dfss2 selpw imbi12i albii 3bitri ) BCDBEZC
      EZDAFZPGZRQGZHZAIRBDZRCDZHZAIBCJAPQKUAUDASUBTUCABLACLMNO $.

    $( An extensionality-like principle that uses the subset instead of the
       membership relation: two classes are equal iff they have the same
       subsets.  (Contributed by NM, 30-Jun-2004.) $)
    ssext $p |- ( A = B <-> A. x ( x C_ A <-> x C_ B ) ) $=
      ( wss wa cv wi wal wceq wb ssextss anbi12i eqss albiim 3bitr4i ) BCDZCBDZ
      EAFZBDZRCDZGAHZTSGAHZEBCISTJAHPUAQUBABCKACBKLBCMSTANO $.

    $( Negation of subclass relationship.  Compare ~ nss .  (Contributed by NM,
       30-Jun-2004.)  (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
    nssss $p |- ( -. A C_ B <-> E. x ( x C_ A /\ -. x C_ B ) ) $=
      ( cv wss wn wa wex wi wal exanali ssextss xchbinxr bicomi ) ADZBEZOCEZFGA
      HZBCEZFRPQIAJSPQAKABCLMN $.
  $}

  $( Classes are equal if and only if their power classes are equal.  Exercise
     19 of [TakeutiZaring] p. 18.  (Contributed by NM, 13-Oct-1996.) $)
  pweqb $p |- ( A = B <-> ~P A = ~P B ) $=
    ( wss wa cpw wceq sspwb anbi12i eqss 3bitr4i ) ABCZBACZDAEZBEZCZNMCZDABFMNF
    KOLPABGBAGHABIMNIJ $.

  ${
    $d x A $.
    intid.1 $e |- A e. _V $.
    $( The intersection of all sets to which a set belongs is the singleton of
       that set.  (Contributed by NM, 5-Jun-2009.) $)
    intid $p |- |^| { x | A e. x } = { A } $=
      ( cv wcel cab cint csn cvv wss snex eleq2 intmin3 ax-mp wi elintab mpgbir
      snid id snssi eqssi ) BADZEZAFGZBHZUEIEUDUEJBKUCBUEEAUEIUBUEBLBCRMNBUDEZU
      EUDJUFUCUCOAUCABCPUCSQBUDTNUA $.
  $}

  ${
    $d x y $.  $d y ph $.
    $( "At most one" existence implies a class abstraction exists.
       (Contributed by NM, 30-Dec-1996.) $)
    moabex $p |- ( E* x ph -> { x | ph } e. _V ) $=
      ( vy wmo weq wi wal wex cab cvv wcel df-mo cv csn abss velsn imbi2i albii
      wss bitri snex ssex sylbir exlimiv sylbi ) ABDABCEZFZBGZCHABIZJKZABCLUHUJ
      CUHUICMZNZSZUJUMABMULKZFZBGUHABULOUOUGBUNUFABUKPQRTUIULUKUAUBUCUDUE $.
  $}

  $( Restricted "at most one" existence implies a restricted class abstraction
     exists.  (Contributed by NM, 17-Jun-2017.) $)
  rmorabex $p |- ( E* x e. A ph -> { x e. A | ph } e. _V ) $=
    ( cv wcel wa wmo cab cvv wrmo crab moabex df-rmo df-rab eleq1i 3imtr4i ) BD
    CEAFZBGQBHZIEABCJABCKZIEQBLABCMSRIABCNOP $.

  $( The abstraction of a wff with existential uniqueness exists.  (Contributed
     by NM, 25-Nov-1994.) $)
  euabex $p |- ( E! x ph -> { x | ph } e. _V ) $=
    ( weu wmo cab cvv wcel eumo moabex syl ) ABCABDABEFGABHABIJ $.

  ${
    $d x y A $.
    $( A nonempty class (even if proper) has a nonempty subset.  (Contributed
       by NM, 23-Aug-2003.) $)
    nnullss $p |- ( A =/= (/) -> E. x ( x C_ A /\ x =/= (/) ) ) $=
      ( vy c0 wne cv wcel wex wss wa n0 csn vex snss snnz snex wceq sseq1 neeq1
      sylbi anbi12d spcev mpan2 exlimiv ) BDECFZBGZCHAFZBIZUGDEZJZAHZCBKUFUKCUF
      UELZBIZUKUEBCMZNUMULDEZUKUEUNOUJUMUOJAULUEPUGULQUHUMUIUOUGULBRUGULDSUAUBU
      CTUDT $.
  $}

  ${
    $d x y z A $.  $d y z ph $.
    $( Restricted existence in a class (even if proper) implies restricted
       existence in a subset.  (Contributed by NM, 23-Aug-2003.) $)
    exss $p |- ( E. x e. A ph -> E. y ( y C_ A /\ E. x e. y ph ) ) $=
      ( vz wrex cv wcel wa cab wex wss crab wne df-rab rabn0 sylbi wsb df-clab
      c0 neeq1i n0 3bitr3i csn vex snss ssab2 sstr2 mpi simpr weq equsb1v velsn
      sbbii mpbir jctil sban bitri eleq2i 3bitri 3imtr4i ne0d sylib sseq1 rexeq
      snex wceq anbi12d spcev syl2anc exlimiv ) ABDFZEGZBGZDHZAIZBJZHZEKZCGZDLZ
      ABVTFZIZCKZABDMZTNVQTNVLVSWEVQTABDOUAABDPEVQUBUCVRWDEVRVMUDZDLZABWFFZWDVR
      WFVQLZWGVMVQEUEUFWIVQDLWGABDUGWFVQDUHUIQVRABWFMZTNWHVRWJVMVOBERZABERZIZVN
      WFHZBERZWLIZVRVMWJHZWMWLWOWKWLUJWOBEUKZBERBEULWNWRBEBVMUMUNUOUPVRVPBERWMV
      PEBSVOABEUQURWQVMWNAIZBJZHWSBERWPWJWTVMABWFOUSWSEBSWNABEUQUTVAVBABWFPVCWC
      WGWHICWFVMVFVTWFVGWAWGWBWHVTWFDVDABVTWFVEVHVIVJVKQ $.
  $}

  $( An ordered pair of classes is a set.  Exercise 7 of [TakeutiZaring] p. 16.
     (Contributed by NM, 18-Aug-1993.)  (Revised by Mario Carneiro,
     26-Apr-2015.) $)
  opex $p |- <. A , B >. e. _V $=
    ( cop cvv wcel wa csn cpr c0 cif dfopif prex 0ex ifex eqeltri ) ABCADEBDEFZ
    AGZABHZHZIJDABKPSIQRLMNO $.

  $( An ordered triple of classes is a set.  (Contributed by NM,
     3-Apr-2015.) $)
  otex $p |- <. A , B , C >. e. _V $=
    ( cotp cop cvv df-ot opex eqeltri ) ABCDABEZCEFABCGJCHI $.

  $( Characterization of the elements of an ordered pair.  Closed form of
     ~ elop .  (Contributed by BJ, 22-Jun-2019.)  (Avoid depending on this
     detail.) $)
  elopg $p |- ( ( A e. V /\ B e. W ) ->
                   ( C e. <. A , B >. <-> ( C = { A } \/ C = { A , B } ) ) ) $=
    ( wcel wa cop csn cpr wceq wo wb dfopg eleq2 snex prex elpr2 syl6bb syl ) A
    DFBEFGABHZAIZABJZJZKZCUAFZCUBKCUCKLZMABDENUEUFCUDFUGUAUDCOCUBUCAPABQRST $.

  ${
    elop.1 $e |- B e. _V $.
    elop.2 $e |- C e. _V $.
    $( Characterization of the elements of an ordered pair.  Exercise 3 of
       [TakeutiZaring] p. 15.  (Contributed by NM, 15-Jul-1993.)  (Revised by
       Mario Carneiro, 26-Apr-2015.)  Remove an extraneous hypothesis.
       (Revised by BJ, 25-Dec-2020.)  (Avoid depending on this detail.) $)
    elop $p |- ( A e. <. B , C >. <-> ( A = { B } \/ A = { B , C } ) ) $=
      ( cvv wcel cop csn wceq cpr wo wb elopg mp2an ) BFGCFGABCHGABIJABCKJLMDEB
      CAFFNO $.
  $}

  ${
    opi1.1 $e |- A e. _V $.
    opi1.2 $e |- B e. _V $.
    $( One of the two elements in an ordered pair.  (Contributed by NM,
       15-Jul-1993.)  (Revised by Mario Carneiro, 26-Apr-2015.)  (Avoid
       depending on this detail.) $)
    opi1 $p |- { A } e. <. A , B >. $=
      ( csn cpr cop snex prid1 dfop eleqtrri ) AEZLABFZFABGLMAHIABCDJK $.

    $( One of the two elements of an ordered pair.  (Contributed by NM,
       5-Aug-1993.)  (Revised by Mario Carneiro, 26-Apr-2015.)  (Avoid
       depending on this detail.) $)
    opi2 $p |- { A , B } e. <. A , B >. $=
      ( cpr csn cop prex prid2 dfop eleqtrri ) ABEZAFZLEABGMLABHIABCDJK $.
  $}

  ${
    opeluu.1 $e |- A e. _V $.
    opeluu.2 $e |- B e. _V $.
    $( Each member of an ordered pair belongs to the union of the union of a
       class to which the ordered pair belongs.  Lemma 3D of [Enderton] p. 41.
       (Contributed by NM, 31-Mar-1995.)  (Revised by Mario Carneiro,
       27-Feb-2016.) $)
    opeluu $p |- ( <. A , B >. e. C ->
                 ( A e. U. U. C /\ B e. U. U. C ) ) $=
      ( cop wcel cuni cpr prid1 opi2 elunii mpan sylancr prid2 jca ) ABFZCGZACH
      ZHZGZBTGZRAABIZGUCSGZUAABDJUCQGRUDABDEKUCQCLMZAUCSLNRBUCGUDUBABEOUEBUCSLN
      P $.
  $}

  ${
    op1stb.1 $e |- A e. _V $.
    op1stb.2 $e |- B e. _V $.
    $( Extract the first member of an ordered pair.  Theorem 73 of [Suppes]
       p. 42.  (See ~ op2ndb to extract the second member, ~ op1sta for an
       alternate version, and ~ op1st for the preferred version.)  (Contributed
       by NM, 25-Nov-2003.) $)
    op1stb $p |- |^| |^| <. A , B >. = A $=
      ( cop cint csn cpr dfop inteqi cin snex prex intpr wss wceq snsspr1 df-ss
      mpbi eqtri intsn ) ABEZFZFAGZFAUCUDUCUDABHZHZFZUDUBUFABCDIJUGUDUEKZUDUDUE
      ALABMNUDUEOUHUDPABQUDUERSTTJACUAT $.
  $}

  $( Two classes are always in relation by ` _V ` .  This is simply equivalent
     to ` <. A , B >. e. _V ` , and does not imply that ` _V ` is a relation:
     see ~ nrelv .  (Contributed by Scott Fenton, 11-Apr-2012.) $)
  brv $p |- A _V B $=
    ( cvv wbr cop wcel opex df-br mpbir ) ABCDABECFABGABCHI $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Ordered pair theorem
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( An ordered pair is nonempty iff the arguments are sets.  (Contributed by
     NM, 24-Jan-2004.)  (Revised by Mario Carneiro, 26-Apr-2015.) $)
  opnz $p |- ( <. A , B >. =/= (/) <-> ( A e. _V /\ B e. _V ) ) $=
    ( cop c0 wne cvv wcel wa opprc necon1ai csn cpr dfopg snex prnz a1i eqnetrd
    impbii ) ABCZDEAFGBFGHZTSDABIJTSAKZABLZLZDABFFMUCDETUAUBANOPQR $.

  ${
    opth1.1 $e |- A e. _V $.
    opth1.2 $e |- B e. _V $.
    $( An ordered pair is nonempty if the arguments are sets.  (Contributed by
       Mario Carneiro, 26-Apr-2015.) $)
    opnzi $p |- <. A , B >. =/= (/) $=
      ( cop c0 wne cvv wcel opnz mpbir2an ) ABEFGAHIBHICDABJK $.

    $( Equality of the first members of equal ordered pairs.  (Contributed by
       NM, 28-May-2008.)  (Revised by Mario Carneiro, 26-Apr-2015.) $)
    opth1 $p |- ( <. A , B >. = <. C , D >. -> A = C ) $=
      ( cop wceq csn wcel opi1 id syl5eleq cpr wi sneqr a1i cvv oprcl syl eleq2
      simpld prid1g syl5ibrcom elsni eqcomd syl6 wo dfopg eleqtrd elpri mpjaod
      wa ) ABGZCDGZHZAIZUOJZACHZUPUQUNUOABEFKUPLMURUQCIZHZUSUQCDNZHZVAUSOURACEP
      QURVCCUQJZUSURVDVCCVBJZURCRJZVEURVFDRJZCDUQSZUBCDRUCTUQVBCUAUDVDCACAUEUFU
      GURUQUTVBNZJVAVCUHURUQUOVIURLURVFVGUMUOVIHVHCDRRUITUJUQUTVBUKTULT $.

    $d x B $.  $d x C $.  $d x D $.
    $( The ordered pair theorem.  If two ordered pairs are equal, their first
       elements are equal and their second elements are equal.  Exercise 6 of
       [TakeutiZaring] p. 16.  Note that ` C ` and ` D ` are not required to be
       sets due our specific ordered pair definition.  (Contributed by NM,
       28-May-1995.) $)
    opth $p |- ( <. A , B >. = <. C , D >. <-> ( A = C /\ B = D ) ) $=
      ( vx cop wceq wa cvv wcel cpr csn syl eqtr3d dfopg prex preqr2 wi opi1 id
      opth1 syl5eleq oprcl simprd opeq1d simpld sylancl cv preq2 eqeq2d imbi12d
      eqeq2 vex vtoclg sylc jca opeq12 impbii ) ABHZCDHZIZACIZBDIZJVCVDVEABCDEF
      UCZVCDKLZCBMZCDMZIZVEVCCKLZVGVCANZVBLVKVGJZVCVLVAVBABEFUAVCUBZUDCDVLUEOZU
      FVCCNZVHMZVPVIMZIVJVCVBVQVRVCCBHZVBVQVCVAVSVBVCACBVFUGVNPVCVKBKLVSVQIVCVK
      VGVOUHFCBKKQUIPVCVMVBVRIVOCDKKQOPVHVIVPCBRCDRSOVHCGUJZMZIZBVTIZTVJVETGDKV
      TDIZWBVJWCVEWDWAVIVHVTDCUKULVTDBUNUMBVTCFGUOSUPUQURABCDUSUT $.
    $( $j usage 'opth' avoids 'ax-reg'; $)
  $}

  ${
    $d x y A $.  $d y B $.  $d x y C $.  $d x y D $.
    $( Ordered pair theorem. ` C ` and ` D ` are not required to be sets under
       our specific ordered pair definition.  (Contributed by NM, 14-Oct-2005.)
       (Revised by Mario Carneiro, 26-Apr-2015.) $)
    opthg $p |- ( ( A e. V /\ B e. W ) ->
                 ( <. A , B >. = <. C , D >. <-> ( A = C /\ B = D ) ) ) $=
      ( vx vy cv cop wceq wa wb opeq1 eqeq1d eqeq1 anbi1d bibi12d opeq2 vex
      anbi2d opth vtocl2g ) GIZHIZJZCDJZKZUDCKZUEDKZLZMAUEJZUGKZACKZUJLZMABJZUG
      KZUNBDKZLZMGHABEFUDAKZUHUMUKUOUTUFULUGUDAUENOUTUIUNUJUDACPQRUEBKZUMUQUOUS
      VAULUPUGUEBASOVAUJURUNUEBDPUARUDUECDGTHTUBUC $.
  $}

  $( Equality of the first members of equal ordered pairs.  Closed form of
     ~ opth1 .  (Contributed by AV, 14-Oct-2018.) $)
  opth1g $p |- ( ( A e. V /\ B e. W )
                 -> ( <. A , B >. = <. C , D >. -> A = C ) ) $=
    ( wcel wa cop wceq opthg simpl syl6bi ) AEGBFGHABICDIJACJZBDJZHNABCDEFKNOLM
    $.

  $( Ordered pair theorem.  (Contributed by NM, 14-Oct-2005.)  (Revised by
     Mario Carneiro, 26-Apr-2015.) $)
  opthg2 $p |- ( ( C e. V /\ D e. W ) ->
               ( <. A , B >. = <. C , D >. <-> ( A = C /\ B = D ) ) ) $=
    ( wcel wa cop wceq opthg eqcom anbi12i 3bitr4g ) CEGDFGHCDIZABIZJCAJZDBJZHP
    OJACJZBDJZHCDABEFKPOLSQTRACLBDLMN $.

  ${
    opth2.1 $e |- C e. _V $.
    opth2.2 $e |- D e. _V $.
    $( Ordered pair theorem.  (Contributed by NM, 21-Sep-2014.) $)
    opth2 $p |- ( <. A , B >. = <. C , D >. <-> ( A = C /\ B = D ) ) $=
      ( cvv wcel cop wceq wa wb opthg2 mp2an ) CGHDGHABICDIJACJBDJKLEFABCDGGMN
      $.
  $}

  $( Two ordered pairs are not equal iff their first components or their second
     components are not equal.  (Contributed by AV, 13-Dec-2018.) $)
  opthneg $p |- ( ( A e. V /\ B e. W ) -> ( <. A , B >. =/= <. C , D >.
                                            <-> ( A =/= C \/ B =/= D ) ) ) $=
    ( cop wne wceq wn wcel wa wo df-ne opthg notbid ianor orbi12i bitr4i syl6bb
    syl5bb ) ABGZCDGZHUBUCIZJZAEKBFKLZACHZBDHZMZUBUCNUFUEACIZBDIZLZJZUIUFUDULAB
    CDEFOPUMUJJZUKJZMUIUJUKQUGUNUHUOACNBDNRSTUA $.

  ${
    opthne.1 $e |- A e. _V $.
    opthne.2 $e |- B e. _V $.
    $( Two ordered pairs are not equal iff their first components or their
       second components are not equal.  (Contributed by AV, 13-Dec-2018.) $)
    opthne $p |- ( <. A , B >. =/= <. C , D >. <-> ( A =/= C \/ B =/= D ) ) $=
      ( cvv wcel cop wne wo wb opthneg mp2an ) AGHBGHABICDIJACJBDJKLEFABCDGGMN
      $.
  $}

  ${
    otth.1 $e |- A e. _V $.
    otth.2 $e |- B e. _V $.
    otth.3 $e |- R e. _V $.
    $( Ordered triple theorem, with triple expressed with ordered pairs.
       (Contributed by NM, 1-May-1995.)  (Revised by Mario Carneiro,
       26-Apr-2015.) $)
    otth2 $p |- ( <. <. A , B >. , R >. = <. <. C , D >. , S >. <->
                ( A = C /\ B = D /\ R = S ) ) $=
      ( cop wceq wa w3a opth anbi1i opex df-3an 3bitr4i ) ABJZCDJZKZEFKZLACKZBD
      KZLZUBLSEJTFJKUCUDUBMUAUEUBABCDGHNOSETFABPINUCUDUBQR $.

    $( Ordered triple theorem.  (Contributed by NM, 25-Sep-2014.)  (Revised by
       Mario Carneiro, 26-Apr-2015.) $)
    otth $p |- ( <. A , B , R >. = <. C , D , S >. <->
      ( A = C /\ B = D /\ R = S ) ) $=
      ( cotp wceq cop w3a df-ot eqeq12i otth2 bitri ) ABEJZCDFJZKABLELZCDLFLZKA
      CKBDKEFKMRTSUAABENCDFNOABCDEFGHIPQ $.
  $}

  $( Ordered triple theorem, closed form.  (Contributed by Alexander van der
     Vekens, 10-Mar-2018.) $)
  otthg $p |- ( ( A e. U /\ B e. V /\ C e. W )
                  -> ( <. A , B , C >. = <. D , E , F >.
                       <-> ( A = D /\ B = E /\ C = F ) ) ) $=
    ( cotp wceq cop wcel w3a df-ot eqeq12i wb wa cvv opthg anbi1d syl6bbr 3impa
    opex mpan df-3an sylan9bbr syl5bb ) ABCJZDFGJZKABLZCLZDFLZGLZKZAEMZBHMZCIMZ
    NADKZBFKZCGKZNZUIULUJUNABCODFGOPUPUQURUOVBQURUOUKUMKZVARZUPUQRZVBUKSMURUOVD
    QABUDUKCUMGSITUEVEVDUSUTRZVARVBVEVCVFVAABDFEHTUAUSUTVAUFUBUGUCUH $.

  ${
    $d x y A $.  $d x y B $.  $d x y C $.
    eqvinop.1 $e |- B e. _V $.
    eqvinop.2 $e |- C e. _V $.
    $( A variable introduction law for ordered pairs.  Analogue of Lemma 15 of
       [Monk2] p. 109.  (Contributed by NM, 28-May-1995.) $)
    eqvinop $p |- ( A = <. B , C >. <-> E. x E. y ( A = <. x , y >. /\
                  <. x , y >. = <. B , C >. ) ) $=
      ( cv cop wceq wa wex opth2 anbi2i ancom anass 3bitri exbii eqeq2d ceqsexv
      19.42v opeq2 opeq1 bitr2i ) CAHZBHZIZJZUGDEIZJZKZBLZALUEDJZCUEEIZJZKZALCU
      IJZULUPAULUMUFEJZUHKZKZBLUMUSBLZKUPUKUTBUKUHUMURKZKVBUHKUTUJVBUHUEUFDEFGM
      NUHVBOUMURUHPQRUMUSBUAVAUOUMUHUOBEGURUGUNCUFEUEUBSTNQRUOUQADFUMUNUICUEDEU
      CSTUD $.
  $}

  ${
    $d a x y z $.  $d ph x y $.  $d ps z $.
    sbcop.z $e |- ( z = <. x , y >. -> ( ph <-> ps ) ) $.
    $( The proper substitution of an ordered pair for a setvar variable
       corresponds to a proper substitution of its first component.
       (Contributed by AV, 8-Apr-2023.) $)
    sbcop1 $p |- ( [. a / x ]. ps <-> [. <. a , y >. / z ]. ph ) $=
      ( cv wsbc cop wceq wi wal wa wex sbc5 syl6bi imp exlimiv sylbi weq eqeq2d
      opeq1 equcoms biimprd com23 alrimiv opex sbc6 sylibr biimpd com3l impbii
      vex ) BCFHZIZAEUODHZJZIZUPEHZURKZALZEMUSUPVBEUPCFUAZBNZCOVBBCUOPVDVBCVCBV
      BVCVABAVCVAUTCHZUQJZKZBALVCURVFUTURVFKFCUOVEUQUCUDUBZVGABGUEQUFRSTUGAEURU
      OUQUHUIUJUSVAANZEOUPAEURPVIUPEVIVCBLZCMUPVIVJCVAAVJVCVAABVCVAVGABLVHVGABG
      UKQULRUGBCUOFUNUIUJSTUM $.

    $d b x y z $.
    $( The proper substitution of an ordered pair for a setvar variable
       corresponds to a proper substitution of each of its components.
       (Contributed by AV, 8-Apr-2023.) $)
    sbcop $p |- ( [. b / y ]. [. a / x ]. ps <-> [. <. a , b >. / z ]. ph ) $=
      ( cv wsbc cop csb sbcop1 sbcbii wb cvv sbcnestg elv wceq csbopg vex eqtri
      csbconstgi csbvargi opeq12i dfsbcq ax-mp 3bitri ) BCFIZJZDGIZJAEUIDIZKZJZ
      DUKJZAEDUKUMLZJZAEUIUKKZJZUJUNDUKABCDEFHMNUOUQOGADEUKUMPQRUPURSUQUSOUPDUK
      UILZDUKULLZKZURUPVBSGDUKUIULPTRUTUIVAUKDFUKGUAZUCDUKVCUDUEUBAEUPURUFUGUH
      $.
  $}

  ${
    $d x z w A $.  $d y z w A $.  $d z w ph $.
    $( Substitution of class ` A ` for ordered pair ` <. x , y >. ` .
       (Contributed by NM, 27-Dec-1996.)  (Revised by Andrew Salmon,
       11-Jul-2011.)  (Proof shortened by Wolf Lammen, 25-Aug-2019.) $)
    copsexg $p |- ( A = <. x , y >. ->
                  ( ph <-> E. x E. y ( A = <. x , y >. /\ ph ) ) ) $=
      ( vz vw cv cop wceq wa wex wb wi vex 19.8a weq syl5 syl5bi weu euequ opth
      eqvinop 19.23bi ex anbi1i 2exbii nfe1 wal anim2i eximi biidd drex1 syl5ib
      anassrs wn anass exbii 19.40 nfeqf2 19.9d anim1d syl6 exlimi equcom eubii
      pm2.61i mpbi eupick com12 sylan9 sylbi impbid eqeq1 anbi1d 2exbidv bibi2d
      mpan imbi12d mpbiri adantr exlimivv pm2.43i ) DBGZCGZHZIZAWFAJZCKBKZLZWFD
      EGZFGZHZIZWLWEIZJZFKEKWFWIMZEFDWCWDBNCNUBWOWPEFWMWPWNWMWPWNAWNAJZCKZBKZLZ
      MWNAWSWNAWSWQWSCWRBOUCUDWNEBPZFCPZJZWSAMWJWKWCWDENFNUAZWSXCAJZCKZBKZXCAWQ
      XEBCWNXCAXDUEUFXGXAXBAJZCKZJZBKZXCAXFXKBXJBUGCBPCUHZXFXKMXFXJCKXLXKXEXJCX
      AXBAXJXHXIXAXHCOUIUNUJXJXJCBXLXJUKULUMXLUOZXFXJXKXFXAXHJZCKZXMXJXEXNCXAXB
      AUPUQXOXACKZXIJXMXJXAXHCURXMXPXAXIXAXMCCBEUSUTVAQRXJBOVBVFVCXAXKXIXBAXKXA
      XIXABSZXKXAXIMBEPZBSXQBETXRXABBEVDVEVGXAXIBVHVQVIXIXBAXBCSZXIXBAMCFPZCSXS
      CFTXTXBCCFVDVEVGXBACVHVQVIVJQRVKVLWMWFWNWIWTDWLWEVMZWMWHWSAWMWGWQBCWMWFWN
      AYAVNVOVPVRVSVTWAVKWB $.
  $}

  ${
    $d x y ps $.  $d x y A $.  $d x y B $.
    $( Closed theorem form of ~ copsex2g .  (Contributed by NM,
       17-Feb-2013.) $)
    copsex2t $p |- ( ( A. x A. y ( ( x = A /\ y = B ) -> ( ph <-> ps ) )
      /\ ( A e. V /\ B e. W ) ) ->
                  ( E. x E. y ( <. A , B >. = <. x , y >. /\ ph ) <-> ps ) ) $=
      ( cv wceq wa wb wal wex cop wcel nfe1 nfv nfbi exlimd wi nfa1 nfa2 opeq12
      nfex copsexg eqcoms syl adantl 2sp imp bitr3d ex elisset anim12i exdistrv
      sylibr impel ) CIZEJZDIZFJZKZABLZUAZDMZCMZVCDNZCNZEFOZUSVAOZJAKZDNZCNZBLZ
      EGPZFHPZKZVGVHVOCVFCUBVNBCVMCQBCRSVGVCVODVEDCUCVNBDVMDCVLDQUEBDRSVGVCVOVG
      VCKAVNBVCAVNLZVGVCVKVJJVSUSVAEFUDVSVJVKACDVJUFUGUHUIVGVCVDVECDUJUKULUMTTV
      RUTCNZVBDNZKVIVPVTVQWACEGUNDFHUNUOUTVBCDUPUQUR $.
  $}

  ${
    $d x y ps $.  $d x y A $.  $d x y B $.
    copsex2g.1 $e |- ( ( x = A /\ y = B ) -> ( ph <-> ps ) ) $.
    $( Implicit substitution inference for ordered pairs.  (Contributed by NM,
       28-May-1995.) $)
    copsex2g $p |- ( ( A e. V /\ B e. W ) ->
                  ( E. x E. y ( <. A , B >. = <. x , y >. /\ ph ) <-> ps ) ) $=
      ( wcel cv wceq wex cop wa wb elisset nfe1 nfv nfbi exdistrv opeq12 eqcoms
      nfex copsexg syl bitr3d exlimi sylbir syl2an ) EGJCKZELZCMZDKZFLZDMZEFNZU
      KUNNZLAOZDMZCMZBPZFHJCEGQDFHQUMUPOULUOOZDMZCMVBULUOCDUAVDVBCVABCUTCRBCSTV
      CVBDVABDUTDCUSDRUDBDSTVCAVABVCURUQLAVAPZUKUNEFUBVEUQURACDUQUEUCUFIUGUHUHU
      IUJ $.
  $}

  ${
    $d x y z w A $.  $d x y z w B $.  $d x y z w C $.  $d x y z w D $.
    $d x y z w ps $.  $d x y z w R $.  $d x y z w S $.
    copsex4g.1 $e |- ( ( ( x = A /\ y = B ) /\ ( z = C /\ w = D ) ) ->
                     ( ph <-> ps ) ) $.
    $( An implicit substitution inference for 2 ordered pairs.  (Contributed by
       NM, 5-Aug-1995.) $)
    copsex4g $p |- ( ( ( A e. R /\ B e. S ) /\ ( C e. R /\ D e. S ) ) ->
                      ( E. x E. y E. z E. w ( ( <. A , B >. = <. x , y >. /\
                      <. C , D >. = <. z , w >. ) /\ ph ) <-> ps ) ) $=
      ( wcel wa cop cv wceq wex vex eqcom opth bitri anbi12i anbi1i a1i 4exbidv
      wb id cgsex4g bitrd ) GKNHLNOIKNJLNOOZGHPZCQZDQZPZRZIJPZEQZFQZPZRZOZAOZFS
      ESDSCSUNGRUOHROZUSIRUTJROZOZAOZFSESDSCSBULVDVHCDEFVDVHUHULVCVGAUQVEVBVFUQ
      UPUMRVEUMUPUAUNUOGHCTDTUBUCVBVAURRVFURVAUAUSUTIJETFTUBUCUDUEUFUGABVGCDEFG
      HIJKLVGUIMUJUK $.
  $}

  $( A property of ordered pairs.  (Contributed by Mario Carneiro,
     26-Apr-2015.) $)
  0nelop $p |- -. (/) e. <. A , B >. $=
    ( c0 cop wcel csn cpr wo id cvv wa oprcl dfopg syl eleqtrd elpri wne necomd
    wceq wn simpld snnzg prnzg jca neanior sylib pm2.65i ) CABDZEZCAFZSCABGZSHZ
    UICUJUKGZEULUICUHUMUIIUIAJEZBJEZKUHUMSABCLZABJJMNOCUJUKPNUICUJQZCUKQZKULTUI
    UQURUIUJCUIUNUJCQUIUNUOUPUAZAJUBNRUIUKCUIUNUKCQUSABJUCNRUDCUJCUKUEUFUG $.

  $( An ordered pair is equal to the ordered pair without the empty set.  This
     is because no ordered pair contains the empty set.  (Contributed by AV,
     15-Nov-2021.) $)
  opwo0id $p |- <. X , Y >. = ( <. X , Y >. \ { (/) } ) $=
    ( cop c0 csn cdif cin wceq wcel 0nelop disjsn mpbir disjdif2 ax-mp eqcomi
    wn ) ABCZDEZFZQQRGDHZSQHTDQIPABJQDKLQRMNO $.

  $( Equivalence of existence implied by equality of ordered pairs.
     (Contributed by NM, 28-May-2008.) $)
  opeqex $p |- ( <. A , B >. = <. C , D >. ->
    ( ( A e. _V /\ B e. _V ) <-> ( C e. _V /\ D e. _V ) ) ) $=
    ( cop wceq c0 wne cvv wcel wa neeq1 opnz 3bitr3g ) ABEZCDEZFOGHPGHAIJBIJKCI
    JDIJKOPGLABMCDMN $.

  $( Equivalence of existence implied by equality of ordered triples.
     (Contributed by NM, 26-Apr-2015.) $)
  oteqex2 $p |- ( <. <. A , B >. , C >. = <. <. R , S >. , T >. ->
    ( C e. _V <-> T e. _V ) ) $=
    ( cop wceq cvv wcel wa opeqex opex biantrur 3bitr4g ) ABGZCGDEGZFGHPIJZCIJZ
    KQIJZFIJZKSUAPCQFLRSABMNTUADEMNO $.

  $( Equivalence of existence implied by equality of ordered triples.
     (Contributed by NM, 28-May-2008.)  (Revised by Mario Carneiro,
     26-Apr-2015.) $)
  oteqex $p |- ( <. <. A , B >. , C >. = <. <. R , S >. , T >. ->
    ( ( A e. _V /\ B e. _V /\ C e. _V ) <->
      ( R e. _V /\ S e. _V /\ T e. _V ) ) ) $=
    ( cop wceq cvv wcel w3a wi simp3 a1i oteqex2 syl5ibr wb wa opex df-3an mpan
    opthg simprbda opeqex syl adantl anbi12d 3bitr4g expcom pm5.21ndd ) ABGZCGD
    EGZFGHZCIJZAIJZBIJZUNKZDIJZEIJZFIJZKZUQUNLUMUOUPUNMNVAUNUMUTURUSUTMABCDEFOZ
    PUNUMUQVAQUNUMRZUOUPRZUNRURUSRZUTRUQVAVCVDVEUNUTVCUKULHZVDVEQUNUMVFCFHZUKIJ
    UNUMVFVGRQABSUKCULFIIUBUAUCABDEUDUEUMUNUTQUNVBUFUGUOUPUNTURUSUTTUHUIUJ $.

  ${
    opcom.1 $e |- A e. _V $.
    opcom.2 $e |- B e. _V $.
    $( An ordered pair commutes iff its members are equal.  (Contributed by NM,
       28-May-2009.) $)
    opcom $p |- ( <. A , B >. = <. B , A >. <-> A = B ) $=
      ( cop wceq wa opth eqcom anbi2i anidm 3bitri ) ABEBAEFABFZBAFZGMMGMABBACD
      HNMMBAIJMKL $.
  $}

  ${
    $d x y A $.  $d y B $.
    moop2.1 $e |- B e. _V $.
    $( "At most one" property of an ordered pair.  (Contributed by NM,
       11-Apr-2004.)  (Revised by Mario Carneiro, 26-Apr-2015.) $)
    moop2 $p |- E* x A = <. B , x >. $=
      ( vy cv cop wceq wmo csb wa wal eqtr2 vex opth simprbi syl gen2 nfcsb1v
      wi nfcv nfop nfeq2 csbeq1a id opeq12d eqeq2d mo4f mpbir ) BCAFZGZHZAIULBA
      EFZCJZUMGZHZKZUJUMHZTZELALUSAEUQUKUOHZURBUKUOMUTCUNHURCUJUNUMDANOPQRULUPA
      EABUOAUNUMAUMCSAUMUAUBUCURUKUOBURCUNUJUMAUMCUDURUEUFUGUHUI $.
  $}

  $( Equivalence for an ordered pair equal to a singleton.  (Contributed by NM,
     3-Jun-2008.)  (Revised by AV, 15-Jul-2022.)  (Avoid depending on this
     detail.) $)
  opeqsng $p |- ( ( A e. V /\ B e. W )
                  -> ( <. A , B >. = { C } <-> ( A = B /\ C = { A } ) ) ) $=
    ( wcel wa cop csn wceq cpr dfopg eqeq1d wb snex a1i eqcom cvv elex syl6bb
    prex preqsn adantr adantl preqsnd simpr eqid jctl impbii bitri syl5bb dfsn2
    anbi1d wi preq2 syl5req pm5.32d bitrd 3bitrd ) ADFZBEFZGZABHZCIZJAIZABKZKZV
    DJZVEVFJZVFCJZGZABJZCVEJZGZVBVCVGVDABDELMVHVKNVBVEVFCAOABUAUBPVBVKVLVJGVNVB
    VIVLVJVIVFVEJZVBVLVEVFQVBVOAAJZBAJZGZVLVBABAUTARFVAADSUCVABRFUTBESUDUEVRVQV
    LVRVQVPVQUFVQVPAUGUHUIBAQUJTUKUMVBVLVJVMVLVJVMNUNVBVLVJVECJVMVLVFVECVLVEAAK
    VFAULABAUOUPMVECQTPUQURUS $.

  ${
    opeqsn.1 $e |- A e. _V $.
    opeqsn.2 $e |- B e. _V $.
    $( Equivalence for an ordered pair equal to a singleton.  (Contributed by
       NM, 3-Jun-2008.)  (Revised by AV, 15-Jul-2022.)  (Avoid depending on
       this detail.) $)
    opeqsn $p |- ( <. A , B >. = { C } <-> ( A = B /\ C = { A } ) ) $=
      ( cvv wcel cop csn wceq wa wb opeqsng mp2an ) AFGBFGABHCIJABJCAIJKLDEABCF
      FMN $.
  $}

  ${
    opeqpr.1 $e |- A e. _V $.
    opeqpr.2 $e |- B e. _V $.
    opeqpr.3 $e |- C e. _V $.
    opeqpr.4 $e |- D e. _V $.
    $( Equivalence for an ordered pair equal to an unordered pair.
       (Contributed by NM, 3-Jun-2008.)  (Avoid depending on this detail.) $)
    opeqpr $p |- ( <. A , B >. = { C , D }
  <-> ( ( C = { A } /\ D = { A , B } ) \/ ( C = { A , B } /\ D = { A } ) ) ) $=
      ( cop cpr wceq csn wa wo eqcom dfop eqeq2i snex prex preq12b 3bitri ) ABI
      ZCDJZKUCUBKUCALZABJZJZKCUDKDUEKMCUEKDUDKMNUBUCOUBUFUCABEFPQCDUDUEGHARABST
      UA $.
  $}

  ${
    snopeqop.a $e |- A e. _V $.
    snopeqop.b $e |- B e. _V $.
    $( Equivalence for an ordered pair equal to a singleton of an ordered pair.
       (Contributed by AV, 18-Sep-2020.)  (Revised by AV, 15-Jul-2022.)  (Avoid
       depending on this detail.) $)
    snopeqop $p |- ( { <. A , B >. } = <. C , D >.
                     <-> ( A = B /\ C = D /\ C = { A } ) ) $=
      ( cvv wcel cop csn wceq wb wa a1i wn wi c0 eqeq2d syl6bi eleq1 w3a ancoms
      eqcom opeqsng syl5bb opeqsn anbi2d 3anan12 bicomi 3bitrd opprc2 opex snnz
      eqneqall adantr notbid eqcoms pm2.21 impd 3ad2ant2 com12 impbid pm2.61ian
      wne mpi opprc1 snex pm2.24i 3ad2ant3 pm2.61i ) CGHZABIZJZCDIZKZABKZCDKZCA
      JZKZUAZLZDGHZVKWAWBVKMZVOVQVLCJKZMZVQVPVSMZMZVTVOVNVMKZWCWEVMVNUCVKWBWHWE
      LCDVLGGUDUBUEWCWDWFVQWDWFLWCABCEFUFNUGWGVTLWCVTWGVPVQVSUHUINUJWBOZVKMZVOV
      TWIVOVTPVKWIVOVMQKZVTWIVNQVMCDUKRWKVMQVDVTVLABULUMVTVMQUNVEZSUOVTWJVOVQVP
      WJVOPVSVQWIVKVOVQWIVKOZVKVOPWIWMLDCDCKWBVKDCGTUPUQVKVOURSUSUTVAVBVCWMVOVT
      WMVOWKVTWMVNQVMCDVFRWLSVTWMVOVSVPWMVOPVQVSWMVRGHZOVOVSVKWNCVRGTUPWNVOAVGV
      HSVIVAVBVJ $.

    propeqop.c $e |- C e. _V $.
    propeqop.d $e |- D e. _V $.
    propeqop.e $e |- E e. _V $.
    propeqop.f $e |- F e. _V $.
    $( Equivalence for an ordered pair equal to a pair of ordered pairs.
       (Contributed by AV, 18-Sep-2020.)  (Proof shortened by AV, 16-Jun-2022.)
       (Avoid depending on this detail.) $)
    propeqop $p |- ( { <. A , B >. , <. C , D >. } = <. E , F >.
                     <-> ( ( A = C /\ E = { A } ) /\
                           ( ( A = B /\ F = { A , D } )
                             \/ ( A = D /\ F = { A , B } ) ) ) ) $=
      ( wceq wa wi adantr imp jca ex impcom cop csn cpr wo opeqsn anbi12i eqcom
      opeqpr orbi12i opex bitri simpl anim12i sneq eqeq2d biimpa adantl biimpcd
      simpr preq1 orcd ancoms eqeq1d biimpd a1dd olcd eqeq1 sneqr eqcomd syl6bi
      jaoi preqsn eqtr sylbi com12 preq1d impancom sylanbrc com23 com13 orim12d
      biimpi a1i13 com14 syl5bi sylbid com24 dfsn2 syl5eq anim1d orcoms 3bitr4i
      syl preq2 impbii ) ABUAZEUBZMZCDUAZEFUCZMZNZWPWTMZWSWQMZNZUDZABMZEAUBZMZN
      ZECUBZMZFCDUCZMZNZEXMMZFXKMZNZUDZNZXIFABUCZMZNZEYAMZFXHMZNZUDZCDMZXLNZNZU
      DZWPWSUCZEFUAZMZACMZXINZXGFADUCZMZNZADMZYBNZUDZNZXBXTXEYJWRXJXAXSABEGHUEC
      DEFIJKLUHUFXCYGXDYIABEFGHKLUHCDEIJUEUFUIYNYMYLMXFYLYMUGEFWPWSKLABUJCDUJUH
      UKUUCYKUUBYPYKYSYPYKOUUAYSYPYKYSYPNZXTYJUUDXJXSYSXGYPXIXGYRULYOXIUSZUMUUD
      XOXRUUDXLXNYPXLYSYOXIXLYOXHXKEACUNUOZUPUQYSYPXNYRYPXNOXGYPYRXNYPYQXMFYOYQ
      XMMXIACDUTPUOURUQQRVARVASUUAYPYKUUAYPNZYJXTUUGYGYIUUGYCYFYPUUAYCYPXIUUAYB
      UUEYTYBUSUMVBVAUUGYHXLUUAYPYHYTYPYHOYBYPYTYHYPACDYOXIULVCURPQYPUUAXLYOXIU
      UAXLOYOXIXLUUAYOXIXLUUFVDVEQTRRVFSVKTXTUUCYJXSXJUUCXSXJNZYPUUBUUHYOXIXJXS
      YOXIXSYOOXGXSXIYOXOXIYOOZXRXLUUIXNXLXIXKXHMZYOEXKXHVGUUJCACAIVHVIVJZPXPUU
      IXQXPXIXMXHMZYOEXMXHVGZUULYHDAMZNZYOCDAIJVLZUUOCACDAVMVIZVNVJPVKVOUQTXJXI
      XSXGXIUSUQRXJXSUUBXJXOYSXRUUAXJXOYSXJXONXGYRXJXGXOXGXIULPXOXJYRXLXJXNYRXL
      XJNZXNYRUURXMYQFUURCADXJXLCAMZXIXLUUSOXGXIXLXHXKMZUUSEXHXKVGUUTACACGVHVIV
      JZUQTVPUOVDVQTRSXGXIXRUUAOXRXIXGUUAXPXQXIXGUUAOZOXPXIXQUVBXPXIUULXQUVBOZU
      UMUULUUOUVCUUPUUOXGXQUUAUUOXGXQUUAOUUOXGNZXQUUAUVDXQNYTYBUVDYTXQUUOYTXGUU
      NYTYHUUNYTDAUGWBUQPPUVDXQYBUVDXKYAFUVDYAXKUVDXGBCMZYAXKMZUUOXGUSUVDCBUUOX
      GCBMUUOACBUUQVCUPVIABCGHVLZVRVIUOUPRSSVSVNVJVSQVTQWATRVBYGYIUUCYFYCYIUUCO
      YIYFYCUDZUUCYIUVHUUCYIUVHNYPUUBUVHYIYPYFYIYPOZYCYDYEUVIYIYEYDYPXLYHYEYDYP
      OOXLYDYEYHYPXLYDXKYAMZYEYHYPOOZEXKYAVGUVJXGUVENZXLUVKUVJUVFUVLXKYAUGUVGUK
      YHUVLYEXLYPYHUVLYEXLYPOUVLXLYPUVLXLNYOXIUVLYOXLABCVMZPUVLXLXIUVLXKXHEUVLU
      USUUJUVLACUVMVICAUNWMUOUPRSWCWDWEWFWGTVTQYCYIYPYCYINYOXIYCYIYOXIYIYOOYBYI
      XIYOXLUUIYHUUKUQVOPQYCXIYIXIYBULPRSVKTYIUVHUUBYIYFYSYCUUAYHXLYFYSOYFXLYHY
      SYDYEXLYHYSOZOYDXLYEUVNYDXLUVFYEUVNOZEYAXKVGUVFUVLUVOUVGUVLYHYEYSUVLYHYEY
      SOUVLYHNZYEYSUVPYENXGYRUVPXGYEUVLXGYHXGUVEULPPUVPYEYRUVPXHYQFUVLYHXHYQMZU
      VLYOYHUVQOUVMYOYHUVQYOYHNYTUVQACDVMYTXHAAUCYQAWHADAWNWIWMSWMQUOUPRSSVSVNV
      JVSQVTQYIXIYTYBYHXLXIYTOXIXLYHYTXIXLYHYTOXIXLNZYHYTUVRCADXIXLUUSUVAQVCVDS
      VTQWJWAQRSVOWKQVKWOWL $.

    $( If a pair of ordered pairs is a subset of an ordered pair, their first
       components are equal.  (Contributed by AV, 20-Sep-2020.)  (Proof
       shortened by AV, 16-Jun-2022.)  (Avoid depending on this detail.) $)
    propssopi $p |- ( { <. A , B >. , <. C , D >. } C_ <. E , F >.
                      -> A = C ) $=
      ( cop cpr csn wceq c0 wo wa sylbi wss dfop sseq2i sspr opex prnz eqneqall
      wne mpi preqsn opth simpl adantr jaoi wi a1d eqcomi eqeq2i propeqop bitri
      imp simpll ) ABMZCDMZNZEFMZUAVEEOZEFNZNZUAZACPZVFVIVEEFKLUBZUCVJVEQPZVEVG
      OPZRZVEVHOPZVEVIPZRZRVKVEVGVHUDVOVKVRVMVKVNVMVEQUHVKVCVDABUEZUFVKVEQUGUIV
      NVCVDPZVDVGPZSVKVCVDVGVSCDUEZUJVTVKWAVTVKBDPZSZVKABCDGHUKZVKWCULZTUMTUNVP
      VKVQVPVTVDVHPZSVKVCVDVHVSWBUJVTWGVKVTWDWGVKUOWEWDVKWGWFUPTVATVQVKEAOPZSAB
      PFADNPSADPFABNPSRZSZVKVQVEVFPWJVIVFVEVFVIVLUQURABCDEFGHIJKLUSUTVKWHWIVBTU
      NUNTT $.
  $}

  ${
    snopeqopsnid.a $e |- A e. _V $.
    $( Equivalence for an ordered pair of two identical singletons equal to a
       singleton of an ordered pair.  (Contributed by AV, 24-Sep-2020.)
       (Revised by AV, 15-Jul-2022.)  (Avoid depending on this detail.) $)
    snopeqopsnid $p |- { <. A , A >. } = <. { A } , { A } >. $=
      ( cop csn wceq eqid snopeqop mpbir3an ) AACDADZICEAAEIIEZJAFIFZKAAIIBBGH
      $.
  $}

  ${
    $d x y z A $.
    $( "At most one" remains true inside ordered pair quantification.
       (Contributed by NM, 28-Aug-2007.) $)
    mosubopt $p |- ( A. y A. z E* x ph ->
                 E* x E. y E. z ( A = <. y , z >. /\ ph ) ) $=
      ( wmo wal cv cop wceq wex wa nfa1 nfe1 nfmo wi nfex sps exlimd wn copsexg
      mobidv biimpcd simpl 2eximi exlimiv con3i nexmo syl pm2.61d1 ) ABFZDGZCGZ
      ECHDHIJZDKZCKZUNALZDKZCKZBFZUMUOUTCULCMUSCBURCNOULUOUTPCULUNUTDUKDMUSDBUR
      DCUQDNQOUKUNUTPDUNUKUTUNAUSBACDEUAUBUCRSRSUPTUSBKZTUTVAUPUSUPBUQUNCDUNAUD
      UEUFUGUSBUHUIUJ $.
  $}

  ${
    $d x y z A $.
    mosubop.1 $e |- E* x ph $.
    $( "At most one" remains true inside ordered pair quantification.
       (Contributed by NM, 28-May-1995.) $)
    mosubop $p |- E* x E. y E. z ( A = <. y , z >. /\ ph ) $=
      ( wmo wal cv cop wceq wa wex gen2 mosubopt ax-mp ) ABGZDHCHECIDIJKALDMCMB
      GQCDFNABCDEOP $.
  $}

  ${
    $d x ph $.  $d x A $.  $d x y $.
    euop2.1 $e |- A e. _V $.
    $( Transfer existential uniqueness to second member of an ordered pair.
       (Contributed by NM, 10-Apr-2004.) $)
    euop2 $p |- ( E! x E. y ( x = <. A , y >. /\ ph ) <-> E! y ph ) $=
      ( cv cop opex moop2 euxfr2 ) ABCDCFZGDKHCBFDEIJ $.
  $}

  ${
    $d a b c x y A $.  $d a b c x y B $.  $d a b c x y C $.  $d a b c x ph $.
    $d y ps $.
    euotd.1 $e |- ( ph -> A e. _V ) $.
    euotd.2 $e |- ( ph -> B e. _V ) $.
    euotd.3 $e |- ( ph -> C e. _V ) $.
    euotd.4 $e |- ( ph -> ( ps <-> ( a = A /\ b = B /\ c = C ) ) ) $.
    $( Prove existential uniqueness for an ordered triple.  (Contributed by
       Mario Carneiro, 20-May-2015.) $)
    euotd $p |- ( ph -> E! x E. a E. b E. c ( x = <. a , b , c >. /\ ps ) ) $=
      ( vy cv wceq wa wex cvv wtru cotp wb wal weu w3a biimpa vex sylibr eqeq2d
      otth biimpd impancom expimpd exlimdvv wcel wsbc tru adantr ad2antrr simpr
      exlimdv eqcomd biimpar jca trud 2thd 3anassrs sbcied spesbcd nfcv nfsbc1v
      mpbiri nfex sbceq1a exbidv spcegf sylc 2exbidv excom13 sylib eqeq1 anbi1d
      3exbidv syl5ibrcom impbid alrimiv otex eqeq2 bibi2d albidv spcev syl eu6
      ) ACOZGOZHOZIOZUAZPZBQZIRZHRGRZWNNOZPZUBZCUCZNRZXBCUDAXBWNDEFUAZPZUBZCUCZ
      XGAXJCAXBXIAXAXIGHAWTXIIAWSBXIABWSXIABQZWSXIXLWRXHWNXLWODPZWPEPZWQFPZUEZW
      RXHPZABXPMUFWOWPDEWQFGUGHUGIUGUJZUHUIUKULUMVAUNAXBXIXHWRPZBQZIRHRGRZAXTGR
      HRZIRZYAAFSUOZXTIFUPZGRZHRZYCLAESUOZYEHEUPZGRZYGKAYIGDAYIGDUPTUQAYITGDSJA
      XMQZYETHESAYHXMKURYKXNQXTTIFSAYDXMXNLUSAXMXNXOXTTUBAXPQZXTTYLXSBYLWRXHYLX
      PXQAXPUTXRUHVBABXPMVCVDYLVEVFVGVHVHVHVLVIYFYJHESHEVJYIHGYEHEVKVMXNYEYIGYE
      HEVNVOVPVQYBYGIFSIFVJYFIHYEIGXTIFVKVMVMXOXTYEHGXTIFVNVRVPVQXTIHGVSVTXIWTX
      TGHIXIWSXSBWNXHWRWAWBWCWDWEWFXFXKNXHDEFWGXCXHPZXEXJCYMXDXIXBXCXHWNWHWIWJW
      KWLXBCNWMUH $.
  $}

  ${
    opthw.1 $e |- A e. _V $.
    opthw.2 $e |- B e. _V $.
    $( Justification theorem for the ordered pair definition in Norbert Wiener,
       "A simplification of the logic of relations", _Proc. of the Cambridge
       Philos.  Soc_., 1914, vol. 17, pp.387-390.  It is also shown as a
       definition in [Enderton] p. 36 and as Exercise 4.8(b) of [Mendelson]
       p. 230.  It is meaningful only for classes that exist as sets (i.e. are
       not proper classes).  See ~ df-op for other ordered pair definitions.
       (Contributed by NM, 28-Sep-2003.) $)
    opthwiener $p |- ( { { { A } , (/) } , { { B } } } =
                    { { { C } , (/) } , { { D } } } <-> ( A = C /\ B = D ) ) $=
      ( csn c0 cpr wceq wcel snex prid2 wn 0ex eqcom preq2d syl sneqr sneq elpr
      wa id wo eleq2 mpbii sylib wb snnz elsn bitri nemtbir nelneq2 mp2an biorf
      mtbi ax-mp sylibr eqtr4d prex preqr1 jca preq1d sylan9eq impbii ) AGZHIZB
      GZGZIZCGZHIZDGZGZIZJZACJZBDJZUBVPVQVRVPVFVKJZVQVPVGVLJZVSVPVJVLVIIZJVTVPV
      JVOWAVPUCVPVIVNVLVPVIVLJZVIVNJZUDZWCVPVIVOKZWDVPVIVJKWEVGVIVHLZMVJVOVIUEU
      FVIVLVNWFUAUGWBNWCWDUHVLVIJZWBHVLKHVIKZNWGNVKHOMWHVHHBFUIWHHVHJVHHJHVHOUJ
      HVHPUKULHVLVIUMUNVLVIPUPWBWCUOUQURZQUSVGVLVIVFHUTVKHUTVARVFVKHALCLVARACES
      RVPVHVMJZVRVPWCWJWIVHVMBLSRBDFSRVBVQVRVJWAVOVQVGVLVIVQVFVKHACTVCVCVRVIVNV
      LVRWJWCBDTVHVMTRQVDVE $.

    $( The union of an ordered pair.  Theorem 65 of [Suppes] p. 39.
       (Contributed by NM, 17-Aug-2004.)  (Revised by Mario Carneiro,
       26-Apr-2015.) $)
    uniop $p |- U. <. A , B >. = { A , B } $=
      ( cop cuni csn cpr cun dfop snex prex unipr wss wceq snsspr1 ssequn1 mpbi
      unieqi 3eqtri ) ABEZFAGZABHZHZFUBUCIZUCUAUDABCDJSUBUCAKABLMUBUCNUEUCOABPU
      BUCQRT $.

    $( Ordered pair membership is inherited by class union.  (Contributed by
       NM, 13-May-2008.)  (Revised by Mario Carneiro, 26-Apr-2015.) $)
    uniopel $p |- ( <. A , B >. e. C -> U. <. A , B >. e. U. C ) $=
      ( cop wcel cuni cpr uniop opi2 eqeltri elssuni sseld mpi ) ABFZCGZPHZPGRC
      HZGRABIPABDEJABDEKLQPSRPCMNO $.
  $}

  ${
    opthhausdorff.a $e |- A e. _V $.
    opthhausdorff.b $e |- B e. _V $.
    opthhausdorff.o $e |- A =/= O $.
    opthhausdorff.n $e |- B =/= O $.
    opthhausdorff.t $e |- B =/= T $.
    opthhausdorff.1 $e |- O e. _V $.
    opthhausdorff.2 $e |- T e. _V $.
    opthhausdorff.3 $e |- O =/= T $.
    $( Justification theorem for the ordered pair definition of Felix Hausdorff
       in "Grundz&uuml;ge der Mengenlehre" ("Basics of Set Theory"), 1914,
       p. 32: ` <. A , B >. ` _H ` = { { A , O } , { B , T } } ` .  Hausdorff
       used ` 1 ` and ` 2 ` instead of ` O ` and ` T ` , but actually, any two
       different fixed sets will do (e.g., ` O = (/) ` and ` T = { (/) } ` ,
       see ~ 0nep0 ).  Furthermore, Hausdorff demanded that ` O ` and ` T ` are
       both different from ` A ` as well as ` B ` , which is actually not
       necessary in full extent ( ` A =/= T ` is not required).  This
       definition is meaningful only for classes ` A ` and ` B ` that exist as
       sets (i.e. are not proper classes):  If ` A ` and ` C ` were different
       proper classes ( ` A =/= C ` ), then
       ` { { A , O } , { B , T } } = { { C , O } , { D , T } `
       ` <-> { { O } , { B , T } } = { { O } , { D , T } ` is true if
       ` B = D ` , but ` ( A = C /\ B = D ) ` would be false.  See ~ df-op for
       other ordered pair definitions.  (Contributed by AV, 14-Jun-2022.) $)
    opthhausdorff $p |- ( { { A , O } , { B , T } } = { { C , O } , { D , T } }
                          <-> ( A = C /\ B = D ) ) $=
      ( cpr wceq wa wo cvv wne wcel wb prex pm3.2i necomi olci preq12nebg mp3an
      prneimg mp2 anim12i eqneqall mpi adantr ccase2 syl2anb wi adantl a1d jaoi
      simpl com12 imp sylbi preq1 preq12d impbii ) AFOZBEOZOCFOZDEOZOPZACPZBDPZ
      QZVLVHVJPZVIVKPZQZVHVKPZVIVJPZQZRZVOVHSUAVISUAVHVITZVLWBUBAFUCBEUCASUAZFS
      UAZQZBSUAZESUAZQZQABTAETQZFBTZFETZQZRWCWFWIWDWEGLUDWGWHHMUDUDWMWJWKWLBFJU
      ENUDUFAFBESSSSUIUJVHVIVJVKSSUGUHVRVOWAVPVMFFPZQZAFPZFCPZQZRZVNEEPZQZBEPZE
      DPZQZRZVOVQWDWEAFTZVPWSUBGLIAFCFSSUGUHWGWHBETZVQXEUBHMKBEDESSUGUHWOXAWRXD
      VOWOVMXAVNVMWNVAVNWTVAUKWPVOWQWPXFVOIVOAFULUMUNXBVOXCXBXGVOKVOBEULUMUNUOU
      PVSADPZFEPZQZAEPFDPQZRZBCPZEFPZQZBFPZECPZQZRZVOVTWDWEXFVSXLUBGLIAFDESSUGU
      HWGWHXGVTXSUBHMKBECFSSUGUHXLXSVOXJXSVOUQXKXJVOXSXIVOXHXIWLVONVOFEULUMURUS
      XSXKVOXOXKVOUQXRXOVOXKXNVOXMXNEFTVOFENUEVOEFULUMURUSXRVOXKXPVOXQXPBFTVOJV
      OBFULUMUNUSUTVBUTVCUPUTVDVOVHVJVIVKVMVPVNACFVEUNVNVQVMBDEVEURVFVG $.
  $}

  ${
    opthhausdorff0.a $e |- A e. _V $.
    opthhausdorff0.b $e |- B e. _V $.
    opthhausdorff0.c $e |- C e. _V $.
    opthhausdorff0.d $e |- D e. _V $.
    opthhausdorff0.1 $e |- O e. _V $.
    opthhausdorff0.2 $e |- T e. _V $.
    opthhausdorff0.3 $e |- O =/= T $.
    $( Justification theorem for the ordered pair definition of Felix Hausdorff
       in "Grundz&uuml;ge der Mengenlehre" ("Basics of Set Theory"), 1914,
       p. 32: ` <. A , B >. ` _H ` = { { A , O } , { B , T } } ` .  Hausdorff
       used ` 1 ` and ` 2 ` instead of ` O ` and ` T ` , but actually, any two
       different fixed sets will do (e.g., ` O = (/) ` and ` T = { (/) } ` ,
       see ~ 0nep0 ).  Furthermore, Hausdorff demanded that ` O ` and ` T ` are
       both different from ` A ` as well as ` B ` , which is actually not
       necessary if all involved classes exist as sets (i.e. are not proper
       classes), in contrast to ~ opthhausdorff .  See ~ df-op for other
       ordered pair definitions.  (Contributed by AV, 12-Jun-2022.) $)
    opthhausdorff0 $p |- ( { { A , O } , { B , T } }
                           = { { C , O } , { D , T } }
                           <-> ( A = C /\ B = D ) ) $=
      ( cpr wceq wa wo prex preq12b adantl preqr1 anim12i wi wne eqneqall simpl
      mpi eqcoms simpr sylan9eqr sylan9eq jca jaoi sylbi com12 imp preq1 adantr
      ex preq12d impbii ) AFNZBENZNCFNZDENZNOZACOZBDOZPZVFVBVDOZVCVEOZPZVBVEOZV
      CVDOZPZQVIVBVCVDVEAFRBERCFRDERSVLVIVOVJVGVKVHACFGIUABDEHJUAUBVMVNVIVMADOZ
      FEOZPZAEOZFDOZPZQVNVIUCZAFDEGKJLSVRWBWAVQWBVPVQFEUDZWBMWBFEUEUGTVNWAVIVNB
      COZEFOZPZBFOZECOZPZQWAVIUCZBECFHLIKSWFWJWIWEWJWDWJFEVQWCWJMWJFEUEUGUHTWIW
      AVIWIWAPVGVHWAWIAECVSVTUFWGWHUIUJWIWABFDWGWHUFVSVTUIUKULUSUMUNUOUMUNUPUMU
      NVIVBVDVCVEVGVJVHACFUQURVHVKVGBDEUQTUTVA $.
  $}

  ${
    $d A c d $.  $d B c d $.  $d V c d $.  $d X c d $.  $d Y c d $.
    $( The singletons consisting of ordered triples which have distinct third
       components are disjoint.  (Contributed by Alexander van der Vekens,
       10-Mar-2018.) $)
    otsndisj $p |- ( ( A e. X /\ B e. Y )
                   -> Disj_ c e. V { <. A , B , c >. } ) $=
      ( vd wcel wa weq cv cotp csn cin c0 wceq wo wral wdisj wn wne otthg 3expa
      w3a wb simp3 syl6bi con3rr3 imp neqned disjsn2 syl expcom orrd ralrimivva
      adantrr oteq3 sneqd disjor sylibr ) ADHZBEHZIZFGJZABFKZLZMZABGKZLZMZNOPZQ
      ZGCRFCRFCVGSVCVLFGCCVCVECHZVLVHCHVCVMIZVDVKVDTZVNVKVOVNIZVFVIUAVKVPVFVIVO
      VNVFVIPZTVNVQVDVNVQAAPZBBPZVDUDZVDVAVBVMVQVTUEABVEADBVHECUBUCVRVSVDUFUGUH
      UIUJVFVIUKULUMUNUPUOCVGVJFGVDVFVIVEVHABUQURUSUT $.
  $}

  ${
    $d B a c d e s $.  $d V a c d e s $.  $d W a c d e s $.  $d X a c d e s $.
    $( The union of singletons consisting of ordered triples which have
       distinct first and third components are disjoint.  (Contributed by
       Alexander van der Vekens, 10-Mar-2018.) $)
    otiunsndisj $p |- ( B e. X
                 -> Disj_ a e. V U_ c e. ( W \ { a } ) { <. a , B , c >. } ) $=
      ( vd vs ve wcel weq cv csn cotp ciun wceq wral wa wn sylibr cdif c0 wdisj
      cin wo wrex eliun wi w3a otthg simp1 syl6bi con3d 3exp impcom com3r imp31
      velsn eqeq1 notbid syl5ibrcom imp sylnibr adantr nrexdv rexlimdva2 syl5bi
      wb sylbi ralrimiv oteq3 sneqd cbviunv eleq2i notbii ralbii expcom adantrr
      disj orrd ralrimivva sneq difeq2d oteq1 disjiunb ) ADJZEGKZFCELZMZUAZWHAF
      LZNZMZOZFCGLZMZUAZWOAWKNZMZOZUDUBPZUEZGBQEBQEBWNUCWFXBEGBBWFWHBJZXBWOBJWF
      XCRZWGXAWGSZXDXAXEXDRZHLZWTJZSZHWNQZXAXFXGIWQWOAILZNZMZOZJZSZHWNQXJXFXPHW
      NXGWNJXGWMJZFWJUFXFXPFXGWJWMUGXFXQXPFWJXFWKWJJZRZXQRZXGXMJZIWQUFXOXTYAIWQ
      XTYASXKWQJXTXGXLPZYAXSXQYBSZXSYCXQWLXLPZSZXEXDXRYEXDXRXEYEXCWFXRXEYEUHZUH
      XCWFXRYFXCWFXRUIZYDWGYGYDWGAAPZFIKZUIWGWHAWKWOBAXKDWJUJWGYHYIUKULUMUNUOUP
      UQXQXGWLPZYCYEVHHWLURYJYBYDXGWLXLUSUTVIVAVBHXLURVCVDVEIXGWQXMUGVCVFVGVJXI
      XPHWNXHXOWTXNXGFIWQWSXMYIWRXLWKXKWOAVKVLVMVNVOVPTHWNWTVSTVQVTVRWAFBWJWMWQ
      EGWSWGWIWPCWHWOWBWCWGWLWRWHWOAWKWDVLWET $.
  $}

  ${
    $d A x y z $.  $d B y $.  $d C x y $.  $d D x y $.
    iunopeqop.b $e |- B e. _V $.
    iunopeqop.c $e |- C e. _V $.
    iunopeqop.d $e |- D e. _V $.
    $( Implication of an ordered pair being equal to an indexed union of
       singletons of ordered pairs.  (Contributed by AV, 20-Sep-2020.)  (Avoid
       depending on this detail.) $)
    iunopeqop $p |- ( A =/= (/) -> ( U_ x e. A { <. x , B >. } = <. C , D >.
                                     -> E. z A = { z } ) ) $=
      ( vy wne cv wrex csn wceq cop wi wcel wa wss c0 wex n0snor2el nfiu1 nfeq1
      wo ciun nfv nfim ssiun2 nfcv nfcsb1v nfop nfsn nfss csbeq1a opeq12d sneqd
      csb id sseq1d vtoclgaf anim12i cun unss sseq2 cpr df-pr eqcomi sseq1i vex
      csbex propssopi eqneqall syl sylbi syl6bi com14 syl5bi mpd rexlimdva ax-1
      rexlimi jaoi ) CUAKALZJLZKZJCMZACMZCBLNOBUBZUFACWEDPZNZUGZEFPZOZWJQZAJBCU
      CWIWPWJWHWPACWOWJAAWMWNACWLUDZUEWJAUHUIWECRZWGWPJCWRWFCRZSZWLWMTZWFAWFDUS
      ZPZNZWMTZSZWGWPQZWRXAWSXEACWLUJZXAXEAWFCAWFUKZAXDWMAXCAWFXBXIAWFDULUMUNWQ
      UOWEWFOZWLXDWMXJWKXCXJWEWFDXBXJUTAWFDUPUQURVAXHVBVCXFWLXDVDZWMTZWTXGWLXDW
      MVEWOXLWGWTWJWOXLXKWNTZWGWTWJQZQZWMWNXKVFXMWKXCVGZWNTZXOXKXPWNXPXKWKXCVHV
      IVJXQXJXOWEDWFXBEFAVKGJVKAWFDGVLHIVMXNWEWFVNVOVPVQVRVSVTWAWCWJWOWBWDVO $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Ordered-pair class abstractions (cont.)
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    $d x z $.  $d y z $.  $d ph z $.
    $( The law of concretion.  Special case of Theorem 9.5 of [Quine] p. 61.
       (Contributed by NM, 14-Apr-1995.)  (Proof shortened by Andrew Salmon,
       25-Jul-2011.) $)
    opabid $p |- ( <. x , y >. e. { <. x , y >. | ph } <-> ph ) $=
      ( vz cv cop wceq wa wex copab opex copsexg bicomd df-opab elab2 ) DEZBEZC
      EZFZGZAHCIBIZADSABCJQRKTAUAABCPLMABCDNO $.
  $}

  ${
    $d x z A $.  $d y z A $.  $d z ph $.
    $( Membership in a class abstraction of pairs.  (Contributed by NM,
       24-Mar-1998.) $)
    elopab $p |- ( A e. { <. x , y >. | ph } <->
                 E. x E. y ( A = <. x , y >. /\ ph ) ) $=
      ( vz copab wcel cvv cv cop wceq wa elex opex eleq1 mpbiri adantr exlimivv
      wex eqeq1 anbi1d 2exbidv df-opab elab2g pm5.21nii ) DABCFZGDHGZDBIZCIZJZK
      ZALZCSBSZDUFMULUGBCUKUGAUKUGUJHGUHUINDUJHOPQREIZUJKZALZCSBSUMEDUFHUNDKZUP
      ULBCUQUOUKAUNDUJTUAUBABCEUCUDUE $.
  $}

  ${
    $d x y z $.  $d x y w $.
    $( The law of concretion in terms of substitutions.  Less general than
       ~ opelopabsb , but having a much shorter proof.  (Contributed by NM,
       30-Sep-2002.)  (Proof shortened by Andrew Salmon, 25-Jul-2011.)
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    opelopabsbALT $p |- ( <. z , w >. e. { <. x , y >. | ph }
                 <-> [ w / y ] [ z / x ] ph ) $=
      ( cv cop wceq wa wex copab wcel wsb excom vex opth equcom anbi12ci anbi1i
      bitri 2exbii elopab 2sb5 3bitr4i ) DFZEFZGZBFZCFZGHZAIZCJBJZUIUFHZUHUEHZI
      ZAIZBJCJZUGABCKLABDMCEMULUKBJCJUQUKBCNUKUPCBUJUOAUJUEUHHZUFUIHZIUOUEUFUHU
      IDOEOPURUNUSUMDBQECQRTSUATABCUGUBACBEDUCUD $.
  $}

  ${
    $d x y z w $.  $d w z A $.  $d w x B $.  $d w z ph $.
    $( The law of concretion in terms of substitutions.  (Contributed by NM,
       30-Sep-2002.)  (Revised by Mario Carneiro, 18-Nov-2016.) $)
    opelopabsb $p |- ( <. A , B >. e. { <. x , y >. | ph }
                 <-> [. A / x ]. [. B / y ]. ph ) $=
      ( vz vw cop wcel cvv wa wsbc c0 wne wceq cv wex wb eleq1d bibi12d vex nex
      copab wn opnzi simpl eqcomd necon3ai ax-mp elopab mtbir eleq1 mtbiri opnz
      necon2ai sylib sbcex spesbc exlimiv syl jca opeq1 dfsbcq2 sbcbidv nfopab1
      wsb opeq2 nfel2 nfs1v nfbi sbequ12 nfopab2 opabid chvar vtocl2g pm5.21nii
      weq ) DEHZABCUCZIZDJIZEJIZKZACELZBDLZVTVRMNWCVTVRMVRMOVTMVSIZWFMBPZCPZHZO
      ZAKZCQZBQWLBWKCWIMNWKUDWGWHBUACUAUEWKWIMWKMWIWJAUFUGUHUIUBUBABCMUJUKVRMVS
      ULUMUODEUNUPWEWAWBWDBDUQWEWDBQWBWDBDURWDWBBACEUQUSUTVAFPZGPZHZVSIZACGVFZB
      FVFZRZDWNHZVSIZWQBDLZRVTWERFGDEJJWMDOZWPXAWRXBXCWOWTVSWMDWNVBSWQBFDVCTWNE
      OZXAVTXBWEXDWTVRVSWNEDVGSXDWQWDBDACGEVCVDTWGWNHZVSIZWQRZWSBFWPWRBBWOVSABC
      VEVHWQBFVIVJBFVQZXFWPWQWRXHXEWOVSWGWMWNVBSWQBFVKTWIVSIZARXGCGXFWQCCXEVSAB
      CVLVHACGVIVJCGVQZXIXFAWQXJWIXEVSWHWNWGVGSACGVKTABCVMVNVNVOVP $.

    brabsb.1 $e |- R = { <. x , y >. | ph } $.
    $( The law of concretion in terms of substitutions.  (Contributed by NM,
       17-Mar-2008.) $)
    brabsb $p |- ( A R B <-> [. A / x ]. [. B / y ]. ph ) $=
      ( wbr cop wcel copab wsbc df-br eleq2i opelopabsb 3bitri ) DEFHDEIZFJQABC
      KZJACELBDLDEFMFRQGNABCDEOP $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y ch $.
    $( Closed theorem form of ~ opelopab .  (Contributed by NM,
       19-Feb-2013.) $)
    opelopabt $p |- ( ( A. x A. y ( x = A -> ( ph <-> ps ) )
                     /\ A. x A. y ( y = B -> ( ps <-> ch ) )
                     /\ ( A e. V /\ B e. W ) ) ->
                    ( <. A , B >. e. { <. x , y >. | ph } <-> ch ) ) $=
      ( cop copab wcel cv wceq wa wex wb wi wal w3a elopab prth 2alimi copsex2t
      19.26-2 bitr syl6 sylbir stoic3 syl5bb ) FGJZADEKLUKDMZEMZJNAOEPDPZULFNZA
      BQZRZESDSZUMGNZBCQZRZESDSZFHLGILOZTCADEUKUAURVBUOUSOZACQZRZESDSZVCUNCQURV
      BOUQVAOZESDSVGUQVADEUEVHVFDEVHVDUPUTOVEUOUPUSUTUBABCUFUGUCUHACDEFGHIUDUIU
      J $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y ps $.
    opelopabga.1 $e |- ( ( x = A /\ y = B ) -> ( ph <-> ps ) ) $.
    $( The law of concretion.  Theorem 9.5 of [Quine] p. 61.  (Contributed by
       Mario Carneiro, 19-Dec-2013.) $)
    opelopabga $p |- ( ( A e. V /\ B e. W ) ->
                    ( <. A , B >. e. { <. x , y >. | ph } <-> ps ) ) $=
      ( cop copab wcel cv wceq wa wex elopab copsex2g syl5bb ) EFJZACDKLTCMDMJN
      AODPCPEGLFHLOBACDTQABCDEFGHIRS $.

    ${
      brabga.2 $e |- R = { <. x , y >. | ph } $.
      $( The law of concretion for a binary relation.  (Contributed by Mario
         Carneiro, 19-Dec-2013.) $)
      brabga $p |- ( ( A e. V /\ B e. W ) -> ( A R B <-> ps ) ) $=
        ( wbr cop copab wcel wa df-br eleq2i bitri opelopabga syl5bb ) EFGLZEFM
        ZACDNZOZEHOFIOPBUBUCGOUEEFGQGUDUCKRSABCDEFHIJTUA $.
    $}

    $d x y C $.  $d x y D $.
    $( Ordered pair membership in an ordered pair class abstraction.
       (Contributed by Mario Carneiro, 19-Dec-2013.) $)
    opelopab2a $p |- ( ( A e. C /\ B e. D ) -> ( <. A , B >. e.
                 { <. x , y >. | ( ( x e. C /\ y e. D ) /\ ph ) } <-> ps ) ) $=
      ( wcel wa cop cv copab wceq eleq1 bi2anan9 anbi12d opelopabga bianabs ) E
      GJZFHJZKZEFLCMZGJZDMZHJZKZAKZCDNJBUIUCBKCDEFGHUDEOZUFFOZKUHUCABUJUEUAUKUG
      UBUDEGPUFFHPQIRST $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y ps $.
    opelopaba.1 $e |- A e. _V $.
    opelopaba.2 $e |- B e. _V $.
    opelopaba.3 $e |- ( ( x = A /\ y = B ) -> ( ph <-> ps ) ) $.
    $( The law of concretion.  Theorem 9.5 of [Quine] p. 61.  (Contributed by
       Mario Carneiro, 19-Dec-2013.) $)
    opelopaba $p |- ( <. A , B >. e. { <. x , y >. | ph } <-> ps ) $=
      ( cvv wcel cop copab wb opelopabga mp2an ) EJKFJKEFLACDMKBNGHABCDEFJJIOP
      $.

    ${
      braba.4 $e |- R = { <. x , y >. | ph } $.
      $( The law of concretion for a binary relation.  (Contributed by NM,
         19-Dec-2013.) $)
      braba $p |- ( A R B <-> ps ) $=
        ( cvv wcel wbr wb brabga mp2an ) ELMFLMEFGNBOHIABCDEFGLLJKPQ $.
    $}
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y ch $.
    opelopabg.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    opelopabg.2 $e |- ( y = B -> ( ps <-> ch ) ) $.
    $( The law of concretion.  Theorem 9.5 of [Quine] p. 61.  (Contributed by
       NM, 28-May-1995.)  (Revised by Mario Carneiro, 19-Dec-2013.) $)
    opelopabg $p |- ( ( A e. V /\ B e. W ) ->
                    ( <. A , B >. e. { <. x , y >. | ph } <-> ch ) ) $=
      ( cv wceq sylan9bb opelopabga ) ACDEFGHIDLFMABELGMCJKNO $.

    ${
      brabg.5 $e |- R = { <. x , y >. | ph } $.
      $( The law of concretion for a binary relation.  (Contributed by NM,
         16-Aug-1999.)  (Revised by Mario Carneiro, 19-Dec-2013.) $)
      brabg $p |- ( ( A e. C /\ B e. D ) -> ( A R B <-> ch ) ) $=
        ( cv wceq sylan9bb brabga ) ACDEFGJHIDNFOABENGOCKLPMQ $.
    $}
  $}

  ${
    $d x y A $.  $d x y B $.
    opelopabgf.x $e |- F/ x ps $.
    opelopabgf.y $e |- F/ y ch $.
    opelopabgf.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    opelopabgf.2 $e |- ( y = B -> ( ps <-> ch ) ) $.
    $( The law of concretion.  Theorem 9.5 of [Quine] p. 61.  This version of
       ~ opelopabg uses bound-variable hypotheses in place of distinct variable
       conditions.  (Contributed by Alexander van der Vekens, 8-Jul-2018.) $)
    opelopabgf $p |- ( ( A e. V /\ B e. W )
                       -> ( <. A , B >. e. { <. x , y >. | ph } <-> ch ) ) $=
      ( cop copab wcel wsbc wa opelopabsb sbciegf nfcv cv wceq sbcbidv sylan9bb
      nfsbc syl5bb ) FGNADEOPAEGQZDFQZFHPZGIPZRCADEFGSUJUIBEGQZUKCUHULDFHBDEGDG
      UAJUFDUBFUCABEGLUDTBCEGIKMTUEUG $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.  $d x y D $.  $d x y ch $.
    opelopab2.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    opelopab2.2 $e |- ( y = B -> ( ps <-> ch ) ) $.
    $( Ordered pair membership in an ordered pair class abstraction.
       (Contributed by NM, 14-Oct-2007.)  (Revised by Mario Carneiro,
       19-Dec-2013.) $)
    opelopab2 $p |- ( ( A e. C /\ B e. D ) -> ( <. A , B >. e.
                 { <. x , y >. | ( ( x e. C /\ y e. D ) /\ ph ) } <-> ch ) ) $=
      ( cv wceq sylan9bb opelopab2a ) ACDEFGHIDLFMABELGMCJKNO $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y ch $.
    opelopab.1 $e |- A e. _V $.
    opelopab.2 $e |- B e. _V $.
    opelopab.3 $e |- ( x = A -> ( ph <-> ps ) ) $.
    opelopab.4 $e |- ( y = B -> ( ps <-> ch ) ) $.
    $( The law of concretion.  Theorem 9.5 of [Quine] p. 61.  (Contributed by
       NM, 16-May-1995.) $)
    opelopab $p |- ( <. A , B >. e. { <. x , y >. | ph } <-> ch ) $=
      ( cvv wcel cop copab wb opelopabg mp2an ) FLMGLMFGNADEOMCPHIABCDEFGLLJKQR
      $.

    ${
      brab.5 $e |- R = { <. x , y >. | ph } $.
      $( The law of concretion for a binary relation.  (Contributed by NM,
         16-Aug-1999.) $)
      brab $p |- ( A R B <-> ch ) $=
        ( cvv wcel wbr wb brabg mp2an ) FNOGNOFGHPCQIJABCDEFGNNHKLMRS $.
    $}
  $}

  ${
    $d x y A $.  $d x y B $.
    opelopabaf.x $e |- F/ x ps $.
    opelopabaf.y $e |- F/ y ps $.
    opelopabaf.1 $e |- A e. _V $.
    opelopabaf.2 $e |- B e. _V $.
    opelopabaf.3 $e |- ( ( x = A /\ y = B ) -> ( ph <-> ps ) ) $.
    $( The law of concretion.  Theorem 9.5 of [Quine] p. 61.  This version of
       ~ opelopab uses bound-variable hypotheses in place of distinct variable
       conditions."  (Contributed by Mario Carneiro, 19-Dec-2013.)  (Proof
       shortened by Mario Carneiro, 18-Nov-2016.) $)
    opelopabaf $p |- ( <. A , B >. e. { <. x , y >. | ph } <-> ps ) $=
      ( cop copab wcel wsbc opelopabsb cvv wb nfv sbc2iegf mp2an bitri ) EFLACD
      MNADFOCEOZBACDEFPEQNFQNZUCBRIJABCDEFQQGHUDCSKTUAUB $.
  $}

  ${
    $d x y A $.  $d x y B $.
    opelopabf.x $e |- F/ x ps $.
    opelopabf.y $e |- F/ y ch $.
    opelopabf.1 $e |- A e. _V $.
    opelopabf.2 $e |- B e. _V $.
    opelopabf.3 $e |- ( x = A -> ( ph <-> ps ) ) $.
    opelopabf.4 $e |- ( y = B -> ( ps <-> ch ) ) $.
    $( The law of concretion.  Theorem 9.5 of [Quine] p. 61.  This version of
       ~ opelopab uses bound-variable hypotheses in place of distinct variable
       conditions."  (Contributed by NM, 19-Dec-2008.) $)
    opelopabf $p |- ( <. A , B >. e. { <. x , y >. | ph } <-> ch ) $=
      ( cop wcel wsbc cvv wb sbciegf ax-mp copab opelopabsb nfcv cv wceq 3bitri
      nfsbc sbcbidv ) FGNADEUAOAEGPZDFPZBEGPZCADEFGUBFQOUJUKRJUIUKDFQBDEGDGUCHU
      GDUDFUEABEGLUHSTGQOUKCRKBCEGQIMSTUF $.
  $}

  ${
    $d ph z $.  $d ps z $.  $d x z $.  $d y z $.
    $( Equivalence of ordered pair abstraction subclass and implication.
       (Contributed by NM, 27-Dec-1996.)  (Revised by Mario Carneiro,
       19-May-2013.) $)
    ssopab2 $p |- ( A. x A. y ( ph -> ps ) ->
        { <. x , y >. | ph } C_ { <. x , y >. | ps } ) $=
      ( vz wi wal cv cop wceq wa wex cab anim2d aleximi ss2abdv df-opab 3sstr4g
      copab id ) ABFZDGZCGZEHCHDHIJZAKZDLZCLZEMUDBKZDLZCLZEMACDSBCDSUCUGUJEUBUF
      UICUAUEUHDUAABUDUATNOOPACDEQBCDEQR $.
  $}

  $( Equivalence of ordered pair abstraction subclass and implication.
     (Contributed by NM, 27-Dec-1996.)  (Proof shortened by Mario Carneiro,
     18-Nov-2016.) $)
  ssopab2b $p |- ( { <. x , y >. | ph } C_ { <. x , y >. | ps } <->
               A. x A. y ( ph -> ps ) ) $=
    ( copab wss wi wal nfopab1 nfss nfopab2 cop wcel ssel opabid 3imtr3g alrimi
    cv ssopab2 impbii ) ACDEZBCDEZFZABGZDHZCHUCUECCUAUBACDIBCDIJUCUDDDUAUBACDKB
    CDKJUCCRDRLZUAMUFUBMABUAUBUFNACDOBCDOPQQABCDST $.

  ${
    ssopab2i.1 $e |- ( ph -> ps ) $.
    $( Inference of ordered pair abstraction subclass from implication.
       (Contributed by NM, 5-Apr-1995.) $)
    ssopab2i $p |- { <. x , y >. | ph } C_ { <. x , y >. | ps } $=
      ( wi wal copab wss ssopab2 ax-gen mpg ) ABFZDGACDHBCDHICABCDJMDEKL $.
  $}

  ${
    $d x ph $.  $d y ph $.
    ssopab2dv.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Inference of ordered pair abstraction subclass from implication.
       (Contributed by NM, 19-Jan-2014.)  (Revised by Mario Carneiro,
       24-Jun-2014.) $)
    ssopab2dv $p |- ( ph -> { <. x , y >. | ps } C_ { <. x , y >. | ch } ) $=
      ( wi wal copab wss alrimivv ssopab2 syl ) ABCGZEHDHBDEICDEIJANDEFKBCDELM
      $.
  $}

  $( Equivalence of ordered pair abstraction equality and biconditional.
     (Contributed by Mario Carneiro, 4-Jan-2017.) $)
  eqopab2b $p |- ( { <. x , y >. | ph } = { <. x , y >. | ps }
                <-> A. x A. y ( ph <-> ps ) ) $=
    ( copab wss wa wi wal wceq wb ssopab2b anbi12i eqss 2albiim 3bitr4i ) ACDEZ
    BCDEZFZRQFZGABHDICIZBAHDICIZGQRJABKDICISUATUBABCDLBACDLMQRNABCDOP $.

  ${
    $d z ph $.  $d z x $.  $d z y $.
    $( Nonempty ordered pair class abstraction.  (Contributed by NM,
       10-Oct-2007.) $)
    opabn0 $p |- ( { <. x , y >. | ph } =/= (/) <-> E. x E. y ph ) $=
      ( vz copab c0 wne cv wcel wex n0 cop wceq elopab exbii exrot3 opex isseti
      wa bitri 19.41v mpbiran 2exbii ) ABCEZFGDHZUDIZDJZACJBJZDUDKUGUEBHZCHZLZM
      ZASZCJBJZDJZUHUFUNDABCUENOUOUMDJZCJBJUHUMDBCPUPABCUPULDJADUKUIUJQRULADUAU
      BUCTTT $.
  $}

  $( Empty ordered pair class abstraction.  (Contributed by AV,
     29-Oct-2021.) $)
  opab0 $p |- ( { <. x , y >. | ph } = (/) <-> A. x A. y -. ph ) $=
    ( copab c0 wceq wn wal wne wex opabn0 df-ne 2exnaln 3bitr3i con4bii ) ABCDZ
    EFZAGCHBHZPEIACJBJQGRGABCKPELABCMNO $.

  ${
    $d w y z A $.  $d w ph $.  $d w x y z $.
    $( Move substitution into a class abstraction.  Version of ~ csbopabgALT
       without a sethood antecedent but depending on more axioms.  (Contributed
       by NM, 6-Aug-2007.)  (Revised by NM, 23-Aug-2018.) $)
    csbopab $p |- [_ A / x ]_ { <. y , z >. | ph }
              = { <. y , z >. | [. A / x ]. ph } $=
      ( vw cvv wcel copab csb wsbc wceq cv wsb csbeq1 opabbidv wn c0 wex nexdv
      dfsbcq2 eqeq12d vex nfs1v nfopab sbequ12 csbief vtoclg csbprc sbcex con3i
      weq opabn0 necon1bbii sylib eqtr4d pm2.61i ) EGHZBEACDIZJZABEKZCDIZLZBFMZ
      USJZABFNZCDIZLVCFEGVDELZVEUTVGVBBVDEUSOVHVFVACDABFEUAPUBBVDUSVGFUCVFCDBAB
      FUDUEBFULAVFCDABFUFPUGUHURQZUTRVBBEUSUIVIVADSZCSZQVBRLVIVJCVIVADVAURABEUJ
      UKTTVKVBRVACDUMUNUOUPUQ $.

    $( Move substitution into a class abstraction.  Version of ~ csbopab with a
       sethood antecedent but depending on fewer axioms.  (Contributed by NM,
       6-Aug-2007.)  (Proof shortened by Mario Carneiro, 17-Nov-2016.)
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    csbopabgALT $p |- ( A e. V -> [_ A / x ]_ { <. y , z >. | ph }
              = { <. y , z >. | [. A / x ]. ph } ) $=
      ( vw cv copab csb wsb wceq wsbc csbeq1 dfsbcq2 opabbidv eqeq12d vex nfs1v
      nfopab sbequ12 csbief vtoclg ) BGHZACDIZJZABGKZCDIZLBEUEJZABEMZCDIZLGEFUD
      ELZUFUIUHUKBUDEUENULUGUJCDABGEOPQBUDUEUHGRUGCDBABGSTBHUDLAUGCDABGUAPUBUC
      $.
  $}

  ${
    $d A y z $.  $d V y z $.  $d Y y z $.  $d Z z $.  $d x y z $.
    $( Move substitution into a maps-to notation.  (Contributed by AV,
       26-Sep-2019.) $)
    csbmpt12 $p |- ( A e. V -> [_ A / x ]_ ( y e. Y |-> Z )
                             = ( y e. [_ A / x ]_ Y |-> [_ A / x ]_ Z ) ) $=
      ( vz wcel cv wceq copab csb cmpt wsbc csbopab sbcan sbcel12 syl5bb df-mpt
      wa csbconstg eleq1d sbceq2g anbi12d opabbidv syl5eq csbeq2i 3eqtr4g ) CDH
      ZACBIZEHZGIZFJZTZBGKZLZUJACELZHZULACFLZJZTZBGKZACBEFMZLBUQUSMUIUPUNACNZBG
      KVBUNABGCOUIVDVABGVDUKACNZUMACNZTUIVAUKUMACPUIVEURVFUTVEACUJLZUQHUIURACUJ
      EQUIVGUJUQACUJDUAUBRACULFDUCUDRUEUFACVCUOBGEFSUGBGUQUSSUH $.

    $d Y x $.
    $( Move substitution into the second part of a maps-to notation.
       (Contributed by AV, 26-Sep-2019.) $)
    csbmpt2 $p |- ( A e. V -> [_ A / x ]_ ( y e. Y |-> Z )
                              = ( y e. Y |-> [_ A / x ]_ Z ) ) $=
      ( wcel cmpt csb csbmpt12 csbconstg mpteq1d eqtrd ) CDGZACBEFHIBACEIZACFIZ
      HBEPHABCDEFJNBOEPACEDKLM $.
  $}

  ${
    $d ph w $.  $d A w x $.  $d A y $.  $d w y z $.  $d x z $.
    $( Move indexed union inside an ordered-pair abstraction.  (Contributed by
       Stefan O'Rear, 20-Feb-2015.) $)
    iunopab $p |- U_ z e. A { <. x , y >. | ph } =
        { <. x , y >. | E. z e. A ph } $=
      ( vw cv copab wcel wrex cab cop wceq wex ciun elopab rexcom4 exbii bitri
      wa rexbii r19.42v abbii df-iun df-opab 3eqtr4i ) FGZABCHZIZDEJZFKUGBGCGLM
      ZADEJZTZCNZBNZFKDEUHOULBCHUJUOFUJUKATZCNZBNZDEJZUOUIURDEABCUGPUAUSUQDEJZB
      NUOUQDBEQUTUNBUTUPDEJZCNUNUPDCEQVAUMCUKADEUBRSRSSUCDFEUHUDULBCFUEUF $.
  $}

  ${
    $d A x y $.  $d R x y $.
    $( Membership in a class abstraction of pairs, defined by a binary
       relation.  (Contributed by AV, 16-Feb-2021.) $)
    elopabr $p |- ( A e. { <. x , y >. | x R y } -> A e. R ) $=
      ( cv wbr copab wcel cop wceq wa wex elopab df-br biimpi eleq1 syl5ibr imp
      exlimivv sylbi ) CAEZBEZDFZABGHCUAUBIZJZUCKZBLALCDHZUCABCMUFUGABUEUCUGUCU
      GUEUDDHZUCUHUAUBDNOCUDDPQRST $.

    $( Membership in a class abstraction of pairs, defined by a restricted
       binary relation.  (Contributed by AV, 16-Feb-2021.) $)
    elopabran $p |- ( A e. { <. x , y >. | ( x R y /\ ps ) } -> A e. R ) $=
      ( cv wbr wa copab wcel simpl ssopab2i sseli elopabr syl ) DBFCFEGZAHZBCIZ
      JDPBCIZJDEJRSDQPBCPAKLMBCDENO $.
  $}

  ${
    $d F f p $.  $d P f p $.  $d W f p $.  $d ch f p $.
    rbropapd.1 $e |- ( ph -> M = { <. f , p >. | ( f W p /\ ps ) } ) $.
    rbropapd.2 $e |- ( ( f = F /\ p = P ) -> ( ps <-> ch ) ) $.
    $( Properties of a pair in an extended binary relation.  (Contributed by
       Alexander van der Vekens, 30-Oct-2017.) $)
    rbropapd $p |- ( ph -> ( ( F e. X /\ P e. Y )
                     -> ( F M P <-> ( F W P /\ ch ) ) ) ) $=
      ( wcel wa wbr wb cop cv wceq copab df-br eleq2d syl5bb anbi12d opelopabga
      breq12 sylan9bb ex ) AFINDJNOZFDGPZFDHPZCOZQAUKFDRZESZKSZHPZBOZEKUAZNZUJU
      MUKUNGNAUTFDGUBAGUSUNLUCUDURUMEKFDIJUOFTUPDTOUQULBCUOFUPDHUGMUEUFUHUI $.

    $( Properties of a pair in a restricted binary relation ` M ` expressed as
       an ordered-pair class abstraction: ` M ` is the binary relation ` W `
       restricted by the condition ` ps ` .  (Contributed by AV,
       31-Jan-2021.) $)
    rbropap $p |- ( ( ph /\ F e. X /\ P e. Y )
                    -> ( F M P <-> ( F W P /\ ch ) ) ) $=
      ( wcel wbr wa wb rbropapd 3impib ) AFINDJNFDGOFDHOCPQABCDEFGHIJKLMRS $.
  $}

  ${
    $d F f p $.  $d P f p $.  $d W f p $.  $d ch f p $.  $d th f p $.
    2rbropap.1 $e |- ( ph -> M = { <. f , p >. | ( f W p /\ ps /\ ta ) } ) $.
    2rbropap.2 $e |- ( ( f = F /\ p = P ) -> ( ps <-> ch ) ) $.
    2rbropap.3 $e |- ( ( f = F /\ p = P ) -> ( ta <-> th ) ) $.
    $( Properties of a pair in a restricted binary relation ` M ` expressed as
       an ordered-pair class abstraction: ` M ` is the binary relation ` W `
       restricted by the conditions ` ps ` and ` ta ` .  (Contributed by AV,
       31-Jan-2021.) $)
    2rbropap $p |- ( ( ph /\ F e. X /\ P e. Y )
                    -> ( F M P <-> ( F W P /\ ch /\ th ) ) ) $=
      ( wcel w3a wbr wa cv copab 3anass opabbii syl6eq anbi12d rbropap syl6bbr
      wceq ) AHKQFLQRHFISHFJSZCDTZTUJCDRABETZUKFGHIJKLMAIGUAZMUAZJSZBERZGMUBUOU
      LTZGMUBNUPUQGMUOBEUCUDUEUMHUIUNFUITBCEDOPUFUGUJCDUCUH $.
  $}

  $( The empty set is never an element in an ordered-pair class abstraction.
     (Contributed by Alexander van der Vekens, 5-Nov-2017.) $)
  0nelopab $p |- -. (/) e. { <. x , y >. | ph } $=
    ( c0 copab wcel wn cv cop wa wex elopab nfopab1 nfel2 nfn nfopab2 vex sylbi
    wceq exlimi wne wi opnzi nesym pm2.21 ax-mp adantr id pm2.61i ) DABCEZFZUKG
    ZUKDBHZCHZIZSZAJZCKZBKULABCDLURULBUKBBDUJABCMNOUQULCUKCCDUJABCPNOUPULAUODUA
    ZUPULUBZUMUNBQCQUCUSUPGUTUODUDUPULUERUFUGTTRULUHUI $.

  $( If two classes are in a relationship given by an ordered-pair class
     abstraction, the classes are sets.  (Contributed by Alexander van der
     Vekens, 5-Nov-2017.) $)
  brabv $p |- ( X { <. x , y >. | ph } Y -> ( X e. _V /\ Y e. _V ) ) $=
    ( copab wbr cop wcel cvv wa df-br wn wceq opprc 0nelopab eleq1 mtbiri syl
    c0 con4i sylbi ) DEABCFZGDEHZUCIZDJIEJIKZDEUCLUFUEUFMUDTNZUEMDEOUGUETUCIABC
    PUDTUCQRSUAUB $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Power class of union and intersection
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    $d A x y $.  $d B x y $.
    $( The power class of the intersection of two classes is the intersection
       of their power classes.  Exercise 4.12(j) of [Mendelson] p. 235.
       (Contributed by NM, 23-Nov-2003.) $)
    pwin $p |- ~P ( A i^i B ) = ( ~P A i^i ~P B ) $=
      ( vx cpw cin cv wss wa wcel ssin selpw anbi12i 3bitr4i ineqri eqcomi ) AD
      ZBDZEABEZDZCPQSCFZAGZTBGZHTRGTPIZTQIZHTSITABJUCUAUDUBCAKCBKLCRKMNO $.

    $( The power class of the union of two classes includes the union of their
       power classes.  Exercise 4.12(k) of [Mendelson] p. 235.  (Contributed by
       NM, 23-Nov-2003.) $)
    pwunss $p |- ( ~P A u. ~P B ) C_ ~P ( A u. B ) $=
      ( vx cpw cun cv wss wo wcel ssun elun selpw orbi12i bitri 3imtr4i ssriv )
      CADZBDZEZABEZDZCFZAGZUBBGZHZUBTGUBSIZUBUAIUBABJUFUBQIZUBRIZHUEUBQRKUGUCUH
      UDCALCBLMNCTLOP $.

    $( The power class of the union of two classes is a subset of the union of
       their power classes, iff one class is a subclass of the other.  Exercise
       4.12(l) of [Mendelson] p. 235.  (Contributed by NM, 23-Nov-2003.) $)
    pwssun $p |- ( ( A C_ B \/ B C_ A ) <->
               ~P ( A u. B ) C_ ( ~P A u. ~P B ) ) $=
      ( vy vx wss wo cun cpw wceq pweq eqimss syl sylbi orim12i wn wa wcel elpw
      cv wi ssequn2 ssequn1 orcoms ssun cpr csn vex snss unss12 syl2anb zfpair2
      df-pr sseq1i bitr2i sylib ssel syl5 expcomd imp31 elun bitr4i simprbi ord
      prss simplbi impancom ssrdv exp31 con1b syl6ib com23 imp ex orrd impbii )
      ABEZBAEZFZABGZHZAHZBHZGZEZVRVTWAEZVTWBEZFZWDVQVPWGVQWEVPWFVQVSAIZWEBAUAWH
      VTWAIWEVSAJVTWAKLMVPVSBIZWFABUBWIVTWBIWFVSBJVTWBKLMNUCVTWAWBUDLWDVPVQWDVP
      OZVQWDWJPCBAWDWJCSZBQZWKAQZTWDWLWJWMWDWLWMOZVPTWJWMTWDWLWNVPWDWLPZWNPDABW
      ODSZAQZWNWPBQZWOWQPZWMWRWSWPWKUEZWAQZWTWBQZFZWMWRFWSWTWCQZXCWDWLWQXDWDWQW
      LXDWQWLPZWTVTQZWDXDXEWPUFZWKUFZGZVSEZXFWQXGAEXHBEXJWLWPADUGZUHWKBCUGZUHXG
      AXHBUIUJXFWTVSEXJWTVSDCUKZRWTXIVSWPWKULUMUNUOVTWCWTUPUQURUSWTWAWBUTUOXAWM
      XBWRXAWQWMXAWTAEWQWMPWTAXMRWPWKAXKXLVDVAVBXBWRWLXBWTBEWRWLPWTBXMRWPWKBXKX
      LVDVAVENLVCVFVGVHWMVPVIVJVKVLVGVMVNVO $.
  $}

  $( Break up the power class of a union into a union of smaller classes.
     (Contributed by NM, 25-Mar-2007.)  (Proof shortened by Thierry Arnoux,
     20-Dec-2016.) $)
  pwundif $p |- ~P ( A u. B ) =
                ( ( ~P ( A u. B ) \ ~P A ) u. ~P A ) $=
    ( cun cpw cdif undif1 wss wceq pwunss unss mpbir simpli ssequn2 mpbi eqtr2i
    wa ) ABCDZADZERCQRCZQQRFRQGZSQHTBDZQGZTUBPRUACQGABIRUAQJKLRQMNO $.

  $( The power class of the union of two classes equals the union of their
     power classes, iff one class is a subclass of the other.  Part of Exercise
     7(b) of [Enderton] p. 28.  (Contributed by NM, 23-Nov-2003.) $)
  pwun $p |- ( ( A C_ B \/ B C_ A ) <->
             ~P ( A u. B ) = ( ~P A u. ~P B ) ) $=
    ( cun cpw wss wa wo wceq pwunss biantru pwssun eqss 3bitr4i ) ABCDZADBDCZEZ
    PONEZFABEBAEGNOHQPABIJABKNOLM $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  The identity relation
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $c _I $.  $( Letter I for the identity relation. $)

  $( Extend the definition of a class to include the identity relation. $)
  cid $a class _I $.

  ${
    $d x y $.
    $( Define the identity relation.  Definition 9.15 of [Quine] p. 64.  For
       example, ` 5 _I 5 ` and ` -. 4 _I 5 ` ( ~ ex-id ).  (Contributed by NM,
       13-Aug-1995.) $)
    df-id $a |- _I = { <. x , y >. | x = y } $.
  $}

  ${
    $d w z x $.  $d w z y $.
    $( A stronger version of ~ df-id that does not require ` x ` and ` y ` to
       be disjoint.  This is not the "official" definition since our definition
       soundness check without this requirement would be much more complex.
       The proof can be instructive in showing how disjoint variable
       requirements may be eliminated, a task that is not necessarily obvious.
       (Contributed by NM, 5-Feb-2008.)  (Revised by Mario Carneiro,
       18-Nov-2016.)  Use directly the definition ~ df-id when sufficient,
       since the derivation of ~ dfid3 is nontrivial and uses auxiliary axioms
       ~ ax-10 to ~ ax-13 .  (New usage is discouraged.) $)
    dfid3 $p |- _I = { <. x , y >. | x = y } $=
      ( vz vw weq copab cv cop wa wex cab wb exbii opeq2 eqeq2d equequ2 anbi12d
      wceq nfnae nfcvd cid df-id wal equcom anbi1ci equsexvw equid biantru nfe1
      3bitri 19.9 bitr4i sps drex1 drex2 syl5bb wn nfcvf2 nfopd nfeqd nfand a1i
      wi cbvexd exbid pm2.61i abbii df-opab 3eqtr4i eqtri ) UAACEZACFZABEZABFZA
      CUBDGZAGZCGZHZRZVKIZCJZAJZDKVOVPBGZHZRZVMIZBJZAJZDKVLVNWBWHDVMAUCZWBWHLWB
      VOVPVPHZRZAAEZIZAJZAJZWIWHWBWNWOWAWMAWACAEZVSIZCJWKWMVTWQCVKWPVSACUDUEMVS
      WKCAWPVRWJVOVQVPVPNOUFWLWKAUGUHUJMWNAWMAUIUKULWNWGABAWMWFABVMWMWFLAVMWKWE
      WLVMVMWJWDVOVPWCVPNOABAPQUMUNUOUPWIUQZWAWGAABASWRVTWFCBABBSWRVSVKBWRBVOVR
      WRBVOTWRBVPVQABURZWRBVQTZUSUTWRBVPVQWSWTUTVACBEZVTWFLVCWRXAVSWEVKVMXAVRWD
      VOVQWCVPNOCBAPQVBVDVEVFVGVKACDVHVMABDVHVIVJ $.
  $}

  ${
    $d x y $.
    $( The identity function using maps-to notation.  (Contributed by Scott
       Fenton, 15-Dec-2017.) $)
    dfid4 $p |- _I = ( x e. _V |-> x ) $=
      ( vy weq copab cv cvv wcel wa cid equcom vex biantrur bitri opabbii df-id
      cmpt df-mpt 3eqtr4i ) ABCZABDAEZFGZBACZHZABDIAFTPSUCABSUBUCABJUAUBAKLMNAB
      OABFTQR $.
  $}

  $( Alternate definition of the identity relation.  (Contributed by NM,
     15-Mar-2007.)  Use ~ df-id when sufficient (see comment at ~ dfid3 ).
     (New usage is discouraged.) $)
  dfid2 $p |- _I = { <. x , x >. | x = x } $=
    ( dfid3 ) AAB $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  The membership relation (or epsilon relation)
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $c _E $.  $( Upright uppercase letter E for the membership relation. $)

  $( Extend class notation to include the membership relation. $)
  cep $a class _E $.

  ${
    $d x y $.
    $( Define the membership relation (also called "epsilon relation" since it
       is sometimes denoted by the lowercase Greek letter "epsilon").  Similar
       to Definition 6.22 of [TakeutiZaring] p. 30.  The membership relation
       and the membership predicate agree, that is,
       ` |- ( A _E B <-> A e. B ) ` when ` B ` is a set (see ~ epelg ).  Thus,
       ` |- 5 _E { 1 , 5 } ` ( ~ ex-eprel ).  (Contributed by NM,
       13-Aug-1995.) $)
    df-eprel $a |- _E = { <. x , y >. | x e. y } $.
  $}

  ${
    $d A x y $.  $d B x y $.
    $( The membership relation and the membership predicate agree when the
       "containing" class is a set.  General version of ~ epel and closed form
       of ~ epeli .  (Contributed by Scott Fenton, 27-Mar-2011.)  (Revised by
       Mario Carneiro, 28-Apr-2015.)  (Proof shortened by BJ, 14-Jul-2023.) $)
    epelg $p |- ( B e. V -> ( A _E B <-> A e. B ) ) $=
      ( vx vy wcel cvv cep wbr wi cop df-br c0 wceq cv 0nelopab df-eprel eqcomi
      copab a1i eleq2i mtbi eleq1 mtbiri con2i opprc1 nsyl2 sylbi eleq12 brabga
      elex wb expcom pm5.21ndd ) BCFZAGFZABHIZABFZUQUPJUOUQABKZHFZUPABHLUTUSMNZ
      UPVAUTVAUTMHFZMDOZEOZFZDESZFVBVEDEPVFHMHVFDEQZRUAUBUSMHUCUDUEABUFUGUHTURU
      PJUOABUKTUPUOUQURULVEURDEABHGCVCAVDBUIVGUJUMUN $.

    $( Obsolete version of ~ epelg as of 14-Jul-2023.  (Contributed by Scott
       Fenton, 27-Mar-2011.)  (Revised by Mario Carneiro, 28-Apr-2015.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    epelgOLD $p |- ( B e. V -> ( A _E B <-> A e. B ) ) $=
      ( vx vy wcel cvv cep wbr wi cop df-br cv copab wceq wa wex vex sylbi a1i
      elopab pm3.2i opeqex mpbiri simpld adantr exlimivv df-eprel eleq2s eleq12
      elex wb brabga expcom pm5.21ndd ) BCFZAGFZABHIZABFZURUQJUPURABKZHFUQABHLU
      QUTDMZEMZFZDENZHUTVDFUTVAVBKOZVCPZEQDQUQVCDEUTUAVFUQDEVEUQVCVEUQBGFZVEUQV
      GPVAGFZVBGFZPVHVIDRERUBABVAVBUCUDUEUFUGSDEUHZUISTUSUQJUPABUKTUQUPURUSULVC
      USDEABHGCVAAVBBUJVJUMUNUO $.
  $}

  ${
    epeli.1 $e |- B e. _V $.
    $( The membership relation and the membership predicate agree when the
       "containing" class is a set.  Inference associated with ~ epelg .
       (Contributed by Scott Fenton, 11-Apr-2012.) $)
    epeli $p |- ( A _E B <-> A e. B ) $=
      ( cvv wcel cep wbr wb epelg ax-mp ) BDEABFGABEHCABDIJ $.
  $}

  $( The membership relation and the membership predicate agree when the
     "containing" class is a setvar.  (Contributed by NM, 13-Aug-1995.)
     Replace the first setvar variable with a class variable.  (Revised by BJ,
     13-Sep-2022.) $)
  epel $p |- ( A _E x <-> A e. x ) $=
    ( cv vex epeli ) BACADE $.

  $( An example for the membership relation.  (Contributed by AV,
     19-Jun-2022.) $)
  0sn0ep $p |- (/) _E { (/) } $=
    ( c0 csn cep wbr wcel 0ex snid snex epeli mpbir ) AABZCDAKEAFGAKAHIJ $.

  $( The membership relation is nonempty.  (Contributed by AV, 19-Jun-2022.) $)
  epn0 $p |- _E =/= (/) $=
    ( c0 csn cep wbr wne 0sn0ep brne0 ax-mp ) AABZCDCAEFAICGH $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Partial and complete ordering
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  We have not yet defined relations ( ~ df-rel ), but here we introduce a few
  related notions we will use to develop ordinals.  The class variable ` R ` is
  no different from other class variables, but it reminds us that normally it
  represents what we will later call a "relation".

$)

  $( Declare new constant symbols. $)
  $c Po $.  $( Partial ordering predicate symbol (read: 'partial ordering'). $)
  $c Or $.  $( Strict complete ordering predicate symbol (read: 'orders'). $)

  $( Extend wff notation to include the strict partial ordering predicate.
     Read:  " ` R ` is a partial order on ` A ` ". $)
  wpo $a wff R Po A $.

  $( Extend wff notation to include the strict complete ordering predicate.
     Read:  " ` R ` orders ` A ` ". $)
  wor $a wff R Or A $.

  ${
    $d x y z R $.  $d x y z A $.
    $( Define the strict partial order predicate.  Definition of [Enderton]
       p. 168.  The expression ` R Po A ` means ` R ` is a partial order on
       ` A ` .  For example, ` < Po RR ` is true, while ` <_ Po RR ` is false
       ( ~ ex-po ).  (Contributed by NM, 16-Mar-1997.) $)
    df-po $a |- ( R Po A <-> A. x e. A A. y e. A A. z e. A
                ( -. x R x /\ ( ( x R y /\ y R z ) -> x R z ) ) ) $.

    $( Define the strict complete (linear) order predicate.  The expression
       ` R Or A ` is true if relationship ` R ` orders ` A ` .  For example,
       ` < Or RR ` is true ( ~ ltso ).  Equivalent to Definition 6.19(1) of
       [TakeutiZaring] p. 29.  (Contributed by NM, 21-Jan-1996.) $)
    df-so $a |- ( R Or A <-> ( R Po A /\ A. x e. A A. y e. A
                ( x R y \/ x = y \/ y R x ) ) ) $.
  $}

  ${
    $d x y z R $.  $d x y z A $.  $d x y z B $.
    $( Subset theorem for the partial ordering predicate.  (Contributed by NM,
       27-Mar-1997.)  (Proof shortened by Mario Carneiro, 18-Nov-2016.) $)
    poss $p |- ( A C_ B -> ( R Po B -> R Po A ) ) $=
      ( vx vy vz wss cv wbr wn wa wi wral wpo ssralv ss2ralv ralimdv syld df-po
      3imtr4g ) ABGZDHZUBCIJUBEHZCIUCFHZCIKUBUDCILKZFBMEBMZDBMZUEFAMEAMZDAMZBCN
      ACNUAUGUFDAMUIUFDABOUAUFUHDAUEEFABPQRDEFBCSDEFACST $.
  $}

  ${
    $d x y z R $.  $d x y z S $.  $d x y z A $.
    $( Equality theorem for partial ordering predicate.  (Contributed by NM,
       27-Mar-1997.) $)
    poeq1 $p |- ( R = S -> ( R Po A <-> S Po A ) ) $=
      ( vx vy vz wceq cv wbr wn wa wral wpo breq notbid anbi12d imbi12d ralbidv
      wi df-po 2ralbidv 3bitr4g ) BCGZDHZUDBIZJZUDEHZBIZUGFHZBIZKZUDUIBIZSZKZFA
      LZEALDALUDUDCIZJZUDUGCIZUGUICIZKZUDUICIZSZKZFALZEALDALABMACMUCUOVDDEAAUCU
      NVCFAUCUFUQUMVBUCUEUPUDUDBCNOUCUKUTULVAUCUHURUJUSUDUGBCNUGUIBCNPUDUIBCNQP
      RUADEFABTDEFACTUB $.
  $}

  $( Equality theorem for partial ordering predicate.  (Contributed by NM,
     27-Mar-1997.) $)
  poeq2 $p |- ( A = B -> ( R Po A <-> R Po B ) ) $=
    ( wceq wpo wss wi eqimss2 poss syl eqimss impbid ) ABDZACEZBCEZMBAFNOGBAHBA
    CIJMABFONGABKABCIJL $.

  ${
    $d R a b c $.  $d A a b c $.  $d x a b c $.
    nfpo.r $e |- F/_ x R $.
    nfpo.a $e |- F/_ x A $.
    $( Bound-variable hypothesis builder for partial orders.  (Contributed by
       Stefan O'Rear, 20-Jan-2015.) $)
    nfpo $p |- F/ x R Po A $=
      ( va vb vc wpo cv wbr wn wa wi wral df-po nfcv nfbr nfan nfral nfim nfxfr
      nfn ) BCIFJZUDCKZLZUDGJZCKZUGHJZCKZMZUDUICKZNZMZHBOZGBOZFBOAFGHBCPUPAFBEU
      OAGBEUNAHBEUFUMAUEAAUDUDCAUDQZDUQRUCUKULAUHUJAAUDUGCUQDAUGQZRAUGUICURDAUI
      QZRSAUDUICUQDUSRUASTTTUB $.

    $( Bound-variable hypothesis builder for total orders.  (Contributed by
       Stefan O'Rear, 20-Jan-2015.) $)
    nfso $p |- F/ x R Or A $=
      ( va vb wor wpo cv wbr weq w3o wral wa df-so nfpo nfcv nfbr nfral nf3or
      nfv nfan nfxfr ) BCHBCIZFJZGJZCKZFGLZUGUFCKZMZGBNZFBNZOAFGBCPUEUMAABCDEQU
      LAFBEUKAGBEUHUIUJAAUFUGCAUFRZDAUGRZSUIAUBAUGUFCUODUNSUATTUCUD $.
  $}

  ${
    $d x y z R $.  $d x y z A $.  $d x y z B $.  $d x y z C $.  $d x y z D $.
    $( Properties of partial order relation in class notation.  (Contributed by
       NM, 27-Mar-1997.) $)
    pocl $p |- ( R Po A -> ( ( B e. A /\ C e. A /\ D e. A ) ->
               ( -. B R B /\ ( ( B R C /\ C R D ) -> B R D ) ) ) ) $=
      ( vx vy vz wcel wbr wa wi cv wceq breq1 imbi2d breq2 anbi2d wal wral r3al
      w3a wpo wn id breq12d notbid anbi1d imbi12d anbi12d imbi1d df-po 19.21bbi
      sylbb 19.21bi com12 vtocl3ga ) BAICAIDAIUBAEUCZBBEJZUDZBCEJZCDEJZKZBDEJZL
      ZKZURFMZVGEJZUDZVGGMZEJZVJHMZEJZKZVGVLEJZLZKZLURUTBVJEJZVMKZBVLEJZLZKZLUR
      UTVACVLEJZKZVTLZKZLURVFLFGHBCDAAAVGBNZVQWBURWGVIUTVPWAWGVHUSWGVGBVGBEWGUE
      ZWHUFUGWGVNVSVOVTWGVKVRVMVGBVJEOUHVGBVLEOUIUJPVJCNZWBWFURWIWAWEUTWIVSWDVT
      WIVRVAVMWCVJCBEQVJCVLEOUJUKRPVLDNZWFVFURWJWEVEUTWJWDVCVTVDWJWCVBVAVLDCEQR
      VLDBEQUIRPURVGAIVJAIVLAIUBZVQURWKVQLZHURWLHSZFGURVQHATGATFATWMGSFSFGHAEUL
      VQFGHAAAUAUNUMUOUPUQUP $.
  $}

  ${
    $d x y z A $.  $d x y z R $.  $d x y z ph $.
    ispod.1 $e |- ( ( ph /\ x e. A ) -> -. x R x ) $.
    ispod.2 $e |- ( ( ph /\ ( x e. A /\ y e. A /\ z e. A ) ) ->
                    ( ( x R y /\ y R z ) -> x R z ) ) $.
    $( Sufficient conditions for a partial order.  (Contributed by NM,
       9-Jul-2014.) $)
    ispod $p |- ( ph -> R Po A ) $=
      ( cv wbr wn wa wi wral wpo wcel w3a 3ad2antr1 jca ralrimivvva sylibr
      df-po ) ABIZUCFJKZUCCIZFJUEDIZFJLUCUFFJMZLZDENCENBENEFOAUHBCDEEEAUCEPZUEE
      PZUFEPZQLUDUGAUJUIUDUKGRHSTBCDEFUBUA $.
  $}

  ${
    $d x y z A $.  $d x y z ph $.  $d x y z R $.  $d x y z X $.  $d y z Y $.
    $d z Z $.
    swopolem.1 $e |- ( ( ph /\ ( x e. A /\ y e. A /\ z e. A ) ) ->
                    ( x R y -> ( x R z \/ z R y ) ) ) $.
    $( Perform the substitutions into the strict weak ordering law.
       (Contributed by Mario Carneiro, 31-Dec-2014.) $)
    swopolem $p |- ( ( ph /\ ( X e. A /\ Y e. A /\ Z e. A ) ) ->
                    ( X R Y -> ( X R Z \/ Z R Y ) ) ) $=
      ( cv wbr wo wi wral wcel wceq breq1 imbi12d breq2 w3a ralrimivvva orbi12d
      orbi1d orbi2d imbi2d rspc3v mpan9 ) ABKZCKZFLZUIDKZFLZULUJFLZMZNZDEOCEOBE
      OGEPHEPIEPUAGHFLZGIFLZIHFLZMZNZAUPBCDEEEJUBUPVAGUJFLZGULFLZUNMZNUQVCULHFL
      ZMZNBCDGHIEEEUIGQZUKVBUOVDUIGUJFRVGUMVCUNUIGULFRUDSUJHQZVBUQVDVFUJHGFTVHU
      NVEVCUJHULFTUESULIQZVFUTUQVIVCURVEUSULIGFTULIHFRUCUFUGUH $.
  $}

  ${
    $d x y z A $.  $d x y z R $.  $d x y z ph $.
    swopo.1 $e |- ( ( ph /\ ( y e. A /\ z e. A ) ) ->
                    ( y R z -> -. z R y ) ) $.
    swopo.2 $e |- ( ( ph /\ ( x e. A /\ y e. A /\ z e. A ) ) ->
                    ( x R y -> ( x R z \/ z R y ) ) ) $.
    $( A strict weak order is a partial order.  (Contributed by Mario Carneiro,
       9-Jul-2014.) $)
    swopo $p |- ( ph -> R Po A ) $=
      ( cv wcel wa wbr wn wi wral weq breq1 breq2 notbid imbi12d ralrimivva w3a
      id ancli rspc2va syl2anr pm2.01d 3adantr1 wo imp orcomd ord expimpd ispod
      sylan2d ) ABCDEFABIZEJZKUPUPFLZUQUQUQKCIZDIZFLZUTUSFLZMZNZDEOCEOURURMZNZA
      UQUQUQUCUDAVDCDEEGUAVDVFUPUTFLZUTUPFLZMZNCDUPUPEECBPZVAVGVCVIUSUPUTFQVJVB
      VHUSUPUTFRSTDBPZVGURVIVEUTUPUPFRVKVHURUTUPUPFQSTUEUFUGAUQUSEJZUTEJZUBKZVA
      VCUPUSFLZVGAVLVMVDUQGUHVNVOVCVGVNVOKZVBVGVPVGVBVNVOVGVBUIHUJUKULUMUOUN $.
  $}

  $( A partial order relation is irreflexive.  (Contributed by NM,
     27-Mar-1997.) $)
  poirr $p |- ( ( R Po A /\ B e. A ) -> -. B R B ) $=
    ( wcel wpo w3a wbr wn wa df-3an anabs1 anidm 3bitrri wi pocl simpld sylan2b
    imp ) BADZACEZSSSFZBBCGZHZUASSIZSIUDSSSSJSSKSLMTUAIUCUBUBIUBNZTUAUCUEIABBBC
    ORPQ $.

  $( A partial order relation is a transitive relation.  (Contributed by NM,
     27-Mar-1997.) $)
  potr $p |- ( ( R Po A /\ ( B e. A /\ C e. A /\ D e. A ) ) ->
             ( ( B R C /\ C R D ) -> B R D ) ) $=
    ( wpo wcel w3a wa wbr wn wi pocl imp simprd ) AEFZBAGCAGDAGHZIBBEJKZBCEJCDE
    JIBDEJLZPQRSIABCDEMNO $.

  $( A partial order relation has no 2-cycle loops.  (Contributed by NM,
     27-Mar-1997.) $)
  po2nr $p |- ( ( R Po A /\ ( B e. A /\ C e. A ) ) ->
              -. ( B R C /\ C R B ) ) $=
    ( wpo wcel wa wbr wn poirr adantrr wi potr 3exp2 com34 pm2.43d imp32 mtod )
    ADEZBAFZCAFZGGBCDHCBDHGZBBDHZSTUCIUAABDJKSTUAUBUCLZSTUAUDLSTUATUDSTUATUDABC
    BDMNOPQR $.

  $( A partial order relation has no 3-cycle loops.  (Contributed by NM,
     27-Mar-1997.) $)
  po3nr $p |- ( ( R Po A /\ ( B e. A /\ C e. A /\ D e. A ) ) ->
             -. ( B R C /\ C R D /\ D R B ) ) $=
    ( wpo wcel w3a wa wbr wn po2nr 3adantr2 df-3an potr anim1d syl5bi mtod ) AE
    FZBAGZCAGZDAGZHIZBCEJZCDEJZDBEJZHZBDEJZUFIZSTUBUIKUAABDELMUGUDUEIZUFIUCUIUD
    UEUFNUCUJUHUFABCDEOPQR $.

  $( Two classes which are in a partial order relation are not equal.
     (Contributed by AV, 13-Mar-2023.) $)
  po2ne $p |- ( ( R Po V /\ ( A e. V /\ B e. V ) /\ A R B ) -> A =/= B ) $=
    ( wpo wcel wa wbr w3a wne wi breq1 wn poirr adantrl pm2.21d ex com13 syl6bi
    wceq com24 3impd ax-1 pm2.61ine ) DCEZADFZBDFZGZABCHZIZABJZKABABTZUEUHUIUKU
    LUIUHUEUKULUIBBCHZUHUEUKKKABBCLUEUHUMUKUEUHUMUKKUEUHGUMUKUEUGUMMUFDBCNOPQRS
    UAUBUKUJUCUD $.

  ${
    $d x y z R $.
    $( Any relation is a partial ordering of the empty set.  (Contributed by
       NM, 28-Mar-1997.)  (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
    po0 $p |- R Po (/) $=
      ( vx vy vz c0 wpo cv wbr wn wa wi wral ral0 df-po mpbir ) EAFBGZPAHIPCGZA
      HQDGZAHJPRAHKJDELCELZBELSBMBCDEANO $.
  $}

  ${
    $d R v w x y z $.  $d S v w z $.  $d X v w y z $.  $d Y x z $.
    $d A v w x z $.  $d B v w x z $.
    pofun.1 $e |- S = { <. x , y >. | X R Y } $.
    pofun.2 $e |- ( x = y -> X = Y ) $.
    $( A function preserves a partial order relation.  (Contributed by Jeff
       Madsen, 18-Jun-2011.) $)
    pofun $p |- ( ( R Po B /\ A. x e. A X e. B ) -> S Po A ) $=
      ( vv vw vz wcel wa cv wbr csb weq cop wpo wn nfcsb1v nfel1 csbeq1a eleq1d
      wral rspc impcom poirr copab df-br eleq2i nfcv nfbr nfv vex breq1d csbeq1
      csbie syl5eqr breq2d opelopabf 3bitri sylnibr sylan2 anassrs w3a wi com12
      3anim123d imp adantll potr anbi12i 3imtr4g adantlr syldan ispod ) DEUAZGD
      NZACUGZOZKLMCFVTWBKPZCNZWDWDFQZUBZWBWEOVTAWDGRZDNZWGWEWBWIWAWIAWDCAWHDAWD
      GUCZUDAKSZGWHDAWDGUEZUFUHZUIVTWIOWHWHEQZWFDWHEUJWFWDWDTZFNWOGHEQZABUKZNWN
      WDWDFULFWQWOIUMWPWHHEQZWNABWDWDAWHHEWJAEUNZAHUNZUOZWNBUPKUQZXBWKGWHHEWLUR
      ZBKSZHWHWHEXDHABPZGRZWHAXEGHBUQJUTZAXEWDGUSVAVBVCVDVEVFVGWCWELPZCNZMPZCNZ
      VHZWIAXHGRZDNZAXJGRZDNZVHZWDXHFQZXHXJFQZOZWDXJFQZVIZWBXLXQVTWBXLXQWBWEWIX
      IXNXKXPWEWBWIWMVJXIWBXNWAXNAXHCAXMDAXHGUCZUDALSZGXMDAXHGUEZUFUHVJXKWBXPWA
      XPAXJCAXODAXJGUCUDAMSGXODAXJGUEUFUHVJVKVLVMVTXQYBWBVTXQOWHXMEQZXMXOEQZOWH
      XOEQZXTYADWHXMXOEVNXRYFXSYGXRWDXHTZFNYIWQNYFWDXHFULFWQYIIUMWPWRYFABWDXHXA
      YFBUPXBLUQZXCBLSZHXMWHEYKHXFXMXGAXEXHGUSVAVBVCVDXSXHXJTZFNYLWQNYGXHXJFULF
      WQYLIUMWPXMHEQYGABXHXJAXMHEYCWSWTUOYGBUPYJMUQZYDGXMHEYEURBMSZHXOXMEYNHXFX
      OXGAXEXJGUSVAZVBVCVDVOYAWDXJTZFNYPWQNYHWDXJFULFWQYPIUMWPWRYHABWDXJXAYHBUP
      XBYMXCYNHXOWHEYOVBVCVDVPVQVRVS $.
  $}

  ${
    $d x y R $.  $d x y A $.
    $( A strict linear order is a strict partial order.  (Contributed by NM,
       28-Mar-1997.) $)
    sopo $p |- ( R Or A -> R Po A ) $=
      ( vx vy wor wpo cv wbr weq w3o wral df-so simplbi ) ABEABFCGZDGZBHCDIONBH
      JDAKCAKCDABLM $.
  $}

  ${
    $d x y R $.  $d x y A $.  $d x y B $.
    $( Subset theorem for the strict ordering predicate.  (Contributed by NM,
       16-Mar-1997.)  (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
    soss $p |- ( A C_ B -> ( R Or B -> R Or A ) ) $=
      ( vx vy wss wpo cv wbr weq w3o wral wa poss ss2ralv anim12d df-so 3imtr4g
      wor ) ABFZBCGZDHZEHZCIDEJUCUBCIKZEBLDBLZMACGZUDEALDALZMBCSACSTUAUFUEUGABC
      NUDDEABOPDEBCQDEACQR $.
  $}

  ${
    $d x y R $.  $d x y S $.  $d x y A $.
    $( Equality theorem for the strict ordering predicate.  (Contributed by NM,
       16-Mar-1997.) $)
    soeq1 $p |- ( R = S -> ( R Or A <-> S Or A ) ) $=
      ( vx vy wceq wpo cv wbr w3o wral wa wor poeq1 breq biidd 2ralbidv anbi12d
      3orbi123d df-so 3bitr4g ) BCFZABGZDHZEHZBIZUDUEFZUEUDBIZJZEAKDAKZLACGZUDU
      ECIZUGUEUDCIZJZEAKDAKZLABMACMUBUCUKUJUOABCNUBUIUNDEAAUBUFULUGUGUHUMUDUEBC
      OUBUGPUEUDBCOSQRDEABTDEACTUA $.
  $}

  $( Equality theorem for the strict ordering predicate.  (Contributed by NM,
     16-Mar-1997.) $)
  soeq2 $p |- ( A = B -> ( R Or A <-> R Or B ) ) $=
    ( wceq wor wss wa wi wb soss anim12i eqss dfbi2 3imtr4i bicomd ) ABDZBCEZAC
    EZABFZBAFZGQRHZRQHZGPQRISUATUBABCJBACJKABLQRMNO $.

  $( A strict order relation is irreflexive.  (Contributed by NM,
     24-Nov-1995.) $)
  sonr $p |- ( ( R Or A /\ B e. A ) -> -. B R B ) $=
    ( wor wpo wcel wbr wn sopo poirr sylan ) ACDACEBAFBBCGHACIABCJK $.

  $( A strict order relation is a transitive relation.  (Contributed by NM,
     21-Jan-1996.) $)
  sotr $p |- ( ( R Or A /\ ( B e. A /\ C e. A /\ D e. A ) ) ->
             ( ( B R C /\ C R D ) -> B R D ) ) $=
    ( wor wpo wcel w3a wbr wa wi sopo potr sylan ) AEFAEGBAHCAHDAHIBCEJCDEJKBDE
    JLAEMABCDENO $.

  ${
    $d x y A $.  $d x y B $.  $d x y C $.  $d x y R $.
    $( A strict order relation is linear (satisfies trichotomy).  (Contributed
       by NM, 21-Jan-1996.) $)
    solin $p |- ( ( R Or A /\ ( B e. A /\ C e. A ) ) ->
              ( B R C \/ B = C \/ C R B ) ) $=
      ( vx vy wcel wa wor wbr wceq w3o cv wi breq1 eqeq1 breq2 3orbi123d imbi2d
      wral eqeq2 wpo df-so rsp2 simplbiim com12 vtocl2ga impcom ) BAGCAGHADIZBC
      DJZBCKZCBDJZLZUIEMZFMZDJZUNUOKZUOUNDJZLZNUIBUODJZBUOKZUOBDJZLZNUIUMNEFBCA
      AUNBKZUSVCUIVDUPUTUQVAURVBUNBUODOUNBUOPUNBUODQRSUOCKZVCUMUIVEUTUJVAUKVBUL
      UOCBDQUOCBUAUOCBDORSUIUNAGUOAGHZUSUIADUBUSFATEATVFUSNEFADUCUSEFAAUDUEUFUG
      UH $.
  $}

  $( A strict order relation has no 2-cycle loops.  (Contributed by NM,
     21-Jan-1996.) $)
  so2nr $p |- ( ( R Or A /\ ( B e. A /\ C e. A ) ) ->
              -. ( B R C /\ C R B ) ) $=
    ( wor wpo wcel wa wbr wn sopo po2nr sylan ) ADEADFBAGCAGHBCDICBDIHJADKABCDL
    M $.

  $( A strict order relation has no 3-cycle loops.  (Contributed by NM,
     21-Jan-1996.) $)
  so3nr $p |- ( ( R Or A /\ ( B e. A /\ C e. A /\ D e. A ) ) ->
             -. ( B R C /\ C R D /\ D R B ) ) $=
    ( wor wpo wcel w3a wbr wn sopo po3nr sylan ) AEFAEGBAHCAHDAHIBCEJCDEJDBEJIK
    AELABCDEMN $.

  $( A strict order relation satisfies strict trichotomy.  (Contributed by NM,
     19-Feb-1996.) $)
  sotric $p |- ( ( R Or A /\ ( B e. A /\ C e. A ) ) ->
              ( B R C <-> -. ( B = C \/ C R B ) ) ) $=
    ( wor wcel wa wceq wo wn wi sonr breq2 notbid syl5ibcom adantrr so2nr imnan
    wbr sylibr con2d jaod w3o solin 3orass sylib ord impbid con2bid ) ADEZBAFZC
    AFZGGZBCHZCBDSZIZBCDSZUMUPUQJZUMUNURUOUJUKUNURKULUJUKGBBDSZJUNURABDLUNUSUQB
    CBDMNOPUMUQUOUMUQUOGJUQUOJKABCDQUQUORTUAUBUMUQUPUMUQUNUOUCUQUPIABCDUDUQUNUO
    UEUFUGUHUI $.

  $( Trichotomy law for strict order relation.  (Contributed by NM,
     9-Apr-1996.)  (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
  sotrieq $p |- ( ( R Or A /\ ( B e. A /\ C e. A ) ) ->
              ( B = C <-> -. ( B R C \/ C R B ) ) ) $=
    ( wor wcel wa wo wceq wn sonr adantrr pm1.2 nsyl breq2 breq1 orbi12d notbid
    wbr sylib syl5ibcom con2d w3o solin 3orass or12 ord impbid con2bid ) ADEZBA
    FZCAFZGGZBCDSZCBDSZHZBCIZUMUPUQJUMUQUPUMBBDSZURHZJUQUPJUMURUSUJUKURJULABDKL
    URMNUQUSUPUQURUNURUOBCBDOBCBDPQRUAUBUMUQUPUMUNUQUOHHZUQUPHUMUNUQUOUCUTABCDU
    DUNUQUOUETUNUQUOUFTUGUHUI $.

  $( Trichotomy law for strict order relation.  (Contributed by NM,
     5-May-1999.) $)
  sotrieq2 $p |- ( ( R Or A /\ ( B e. A /\ C e. A ) ) ->
              ( B = C <-> ( -. B R C /\ -. C R B ) ) ) $=
    ( wor wcel wa wceq wbr wo wn sotrieq ioran syl6bb ) ADEBAFCAFGGBCHBCDIZCBDI
    ZJKOKPKGABCDLOPMN $.

  $( Asymmetry law for strict orderings.  (Contributed by Scott Fenton,
     24-Nov-2021.) $)
  soasym $p |- ( ( R Or A /\ ( X e. A /\ Y e. A ) ) ->
  ( X R Y -> -. Y R X ) ) $=
    ( wor wcel wa wbr wceq wo wn sotric pm2.46 syl6bi ) ABECAFDAFGGCDBHCDIZDCBH
    ZJKPKACDBLOPMN $.

  $( A transitivity relation.  (Read ` B <_ C ` and ` C < D ` implies
     ` B < D ` .)  (Contributed by Mario Carneiro, 10-May-2013.) $)
  sotr2 $p |- ( ( R Or A /\ ( B e. A /\ C e. A /\ D e. A ) ) ->
                ( ( -. C R B /\ C R D ) -> B R D ) ) $=
    ( wor wcel w3a wa wbr wn wceq wo wi sotric ancom2s 3adantr3 con2bid breq1
    wb biimpd a1i sotr expd jaod sylbird impd ) AEFZBAGZCAGZDAGZHIZCBEJZKZCDEJZ
    BDEJZULUNCBLZBCEJZMZUOUPNZULUMUSUHUIUJUMUSKTZUKUHUJUIVAACBEOPQRULUQUTURUQUT
    NULUQUOUPCBDESUAUBULURUOUPABCDEUCUDUEUFUG $.

  ${
    $d x y R $.  $d x y A $.  $d x y ph $.
    issod.1 $e |- ( ph -> R Po A ) $.
    issod.2 $e |- ( ( ph /\ ( x e. A /\ y e. A ) ) ->
                    ( x R y \/ x = y \/ y R x ) ) $.
    $( An irreflexive, transitive, linear relation is a strict ordering.
       (Contributed by NM, 21-Jan-1996.)  (Revised by Mario Carneiro,
       9-Jul-2014.) $)
    issod $p |- ( ph -> R Or A ) $=
      ( wpo cv wbr weq w3o wral wor ralrimivva df-so sylanbrc ) ADEHBIZCIZEJBCK
      SREJLZCDMBDMDENFATBCDDGOBCDEPQ $.
  $}

  ${
    $d x y z R $.  $d x y z A $.
    issoi.1 $e |- ( x e. A -> -. x R x ) $.
    issoi.2 $e |- ( ( x e. A /\ y e. A /\ z e. A ) ->
                  ( ( x R y /\ y R z ) -> x R z ) ) $.
    issoi.3 $e |- ( ( x e. A /\ y e. A ) -> ( x R y \/ x = y \/ y R x ) ) $.
    $( An irreflexive, transitive, linear relation is a strict ordering.
       (Contributed by NM, 21-Jan-1996.)  (Revised by Mario Carneiro,
       9-Jul-2014.) $)
    issoi $p |- R Or A $=
      ( wor wtru cv wcel wbr wn adantl w3a wa wi ispod weq w3o issod mptru ) DE
      IJABDEJABCDEAKZDLZUDUDEMNJFOUEBKZDLZCKZDLPUDUFEMZUFUHEMQUDUHEMRJGOSUEUGQU
      IABTUFUDEMUAJHOUBUC $.
  $}

  ${
    $d x y z R $.  $d x y z A $.
    isso2i.1 $e |- ( ( x e. A /\ y e. A ) ->
                     ( x R y <-> -. ( x = y \/ y R x ) ) ) $.
    isso2i.2 $e |- ( ( x e. A /\ y e. A /\ z e. A ) ->
                     ( ( x R y /\ y R z ) -> x R z ) ) $.
    $( Deduce strict ordering from its properties.  (Contributed by NM,
       29-Jan-1996.)  (Revised by Mario Carneiro, 9-Jul-2014.) $)
    isso2i $p |- R Or A $=
      ( cv wcel wbr wn wa weq wo equid orci wb wi eleq1w anbi2d equequ2 orbi12d
      breq1 breq2 notbid bibi12d imbi12d con2bid chvarv anidms w3o biimprd orrd
      mpbii 3orass sylibr issoi ) ABCDEAHZDIZURUREJZKZUSUSLZAAMZUTNZVAVCUTAOPUS
      BHZDIZLZABMZVEUREJZNZURVEEJZKZQZRVBVDVAQZRBABAMZVGVBVMVNVOVFUSUSBADSTVOVJ
      VDVLVAVOVHVCVIUTBAAUAVEURUREUCUBVOVKUTVEURUREUDUEUFUGVGVKVJFUHZUIUNUJGVGV
      KVJNVKVHVIUKVGVKVJVGVJVLVPULUMVKVHVIUOUPUQ $.
  $}

  ${
    $d x y R $.
    $( Any relation is a strict ordering of the empty set.  (Contributed by NM,
       16-Mar-1997.)  (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
    so0 $p |- R Or (/) $=
      ( vx vy c0 wor wpo cv wbr weq w3o wral po0 ral0 df-so mpbir2an ) DAEDAFBG
      ZCGZAHBCIQPAHJCDKZBDKALRBMBCDANO $.
  $}

  ${
    $d x y z A $.  $d x y z R $.
    $( A totally ordered set has at most one minimal element.  (Contributed by
       Mario Carneiro, 24-Jun-2015.)  (Revised by NM, 16-Jun-2017.) $)
    somo $p |- ( R Or A -> E* x e. A A. y e. A -. y R x ) $=
      ( vz wor cv wbr wn wral wa weq wi wrmo wcel breq1 notbid rspcv wo sylib
      im2anan9 ancomsd imp ioran w3o solin df-3or or32 ord syl5bir syl5 pm2.43d
      exp4b ralrimivv breq2 ralbidv rmo4 sylibr ) CDFZBGZAGZDHZIZBCJZUTEGZDHZIZ
      BCJZKZAELZMZECJACJVDACNUSVKAECCUSVACOZVECOZKZVKUSVNVNVIVJVNVIKVAVEDHZIZVE
      VADHZIZKZUSVNKZVJVNVIVSVNVHVDVSVLVHVPVMVDVRVGVPBVACBALVFVOUTVAVEDPQRVCVRB
      VECBELVBVQUTVEVADPQRUAUBUCVSVOVQSZIVTVJVOVQUDVTWAVJVTVOVJSVQSZWAVJSVTVOVJ
      VQUEWBCVAVEDUFVOVJVQUGTVOVJVQUHTUIUJUKUMULUNVDVHAECVJVCVGBCVJVBVFVAVEUTDU
      OQUPUQUR $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Founded and well-ordering relations
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Declare new constant symbols. $)
  $c Fr $.  $( Well-founded predicate symbol (read: "well-founded"). $)
  $c Se $.  $( Set-like predicate symbol (read: "set-like"). $)
  $c We $.  $( Well-ordering predicate symbol (read: "well-orders"). $)

  $( Extend wff notation to include the well-founded predicate.  Read:  " ` R `
     is a well-founded relation on ` A ` ". $)
  wfr $a wff R Fr A $.

  $( Extend wff notation to include the set-like predicate.  Read:  " ` R ` is
     set-like on ` A ` ". $)
  wse $a wff R Se A $.

  $( Extend wff notation to include the well-ordering predicate.  Read:
      " ` R ` well-orders ` A ` ". $)
  wwe $a wff R We A $.

  ${
    $d x y z R $.  $d x y z A $.
    $( Define the well-founded relation predicate.  Definition 6.24(1) of
       [TakeutiZaring] p. 30.  For alternate definitions, see ~ dffr2 and
       ~ dffr3 .  (Contributed by NM, 3-Apr-1994.) $)
    df-fr $a |- ( R Fr A <-> A. x ( ( x C_ A /\ x =/= (/) ) ->
                E. y e. x A. z e. x -. z R y ) ) $.

    $( Define the set-like predicate.  (Contributed by Mario Carneiro,
       19-Nov-2014.) $)
    df-se $a |- ( R Se A <-> A. x e. A { y e. A | y R x } e. _V ) $.
  $}

  $( Define the well-ordering predicate.  For an alternate definition, see
     ~ dfwe2 .  (Contributed by NM, 3-Apr-1994.) $)
  df-we $a |- ( R We A <-> ( R Fr A /\ R Or A ) ) $.

  ${
    $d x y z A $.  $d x y z B $.  $d x y z R $.  $d x y V $.
    $( Property of well-founded relation (one direction of definition).
       (Contributed by NM, 18-Mar-1997.) $)
    fri $p |- ( ( ( B e. C /\ R Fr A ) /\ ( B C_ A /\ B =/= (/) ) ) ->
                E. x e. B A. y e. B -. y R x ) $=
      ( vz wcel wfr wss c0 wne wa cv wbr wn wral wrex wi wal df-fr wceq anbi12d
      sseq1 neeq1 raleq rexeqbi1dv imbi12d spcgv syl5bi imp31 ) DEHZCFIZDCJZDKL
      ZMZBNANFOPZBDQZADRZUMGNZCJZUTKLZMZUQBUTQZAUTRZSZGTULUPUSSZGABCFUAVFVGGDEU
      TDUBZVCUPVEUSVHVAUNVBUOUTDCUDUTDKUEUCVDURAUTDUQBUTDUFUGUHUIUJUK $.

    $( The ` R ` -preimage of an element of the base set in a set-like relation
       is a set.  (Contributed by Mario Carneiro, 19-Nov-2014.) $)
    seex $p |- ( ( R Se A /\ B e. A ) -> { x e. A | x R B } e. _V ) $=
      ( vy wse cv wbr crab cvv wcel wral df-se wceq breq2 rabbidv eleq1d sylanb
      rspccva ) BDFAGZEGZDHZABIZJKZEBLCBKTCDHZABIZJKZEABDMUDUGECBUACNZUCUFJUHUB
      UEABUACTDOPQSR $.

    $( Any relation on a set is set-like on it.  (Contributed by Mario
       Carneiro, 22-Jun-2015.) $)
    exse $p |- ( A e. V -> R Se A ) $=
      ( vy vx wcel cv wbr crab cvv wral wse rabexg ralrimivw df-se sylibr ) ACF
      ZDGEGBHZDAIJFZEAKABLQSEARDACMNEDABOP $.
  $}

  ${
    $d x y z A $.  $d x y z R $.
    $( Alternate definition of well-founded relation.  Similar to Definition
       6.21 of [TakeutiZaring] p. 30.  (Contributed by NM, 17-Feb-2004.)
       (Proof shortened by Andrew Salmon, 27-Aug-2011.)  (Proof shortened by
       Mario Carneiro, 23-Jun-2015.) $)
    dffr2 $p |- ( R Fr A <-> A. x ( ( x C_ A /\ x =/= (/) ) ->
                E. y e. x { z e. x | z R y } = (/) ) ) $=
      ( wfr cv wss c0 wne wa wbr wn wral wrex wi wal crab wceq df-fr rabeq0
      rexbii imbi2i albii bitr4i ) DEFAGZDHUFIJKZCGBGELZMCUFNZBUFOZPZAQUGUHCUFR
      ISZBUFOZPZAQABCDETUNUKAUMUJUGULUIBUFUHCUFUAUBUCUDUE $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y R $.
    frc.1 $e |- B e. _V $.
    $( Property of well-founded relation (one direction of definition using
       class variables).  (Contributed by NM, 17-Feb-2004.)  (Revised by Mario
       Carneiro, 19-Nov-2014.) $)
    frc $p |- ( ( R Fr A /\ B C_ A /\ B =/= (/) ) ->
                E. x e. B { y e. B | y R x } = (/) ) $=
      ( wfr wss c0 wne w3a cv wbr wn wral wrex crab wceq cvv wcel wa fri mpanl1
      3impb rabeq0 rexbii sylibr ) CEGZDCHZDIJZKBLALEMZNBDOZADPZUKBDQIRZADPUHUI
      UJUMDSTUHUIUJUAUMFABCDSEUBUCUDUNULADUKBDUEUFUG $.
  $}

  ${
    $d x y z A $.  $d x y z B $.  $d x y z R $.  $d x y S $.
    $( Subset theorem for the well-founded predicate.  Exercise 1 of
       [TakeutiZaring] p. 31.  (Contributed by NM, 3-Apr-1994.)  (Proof
       shortened by Andrew Salmon, 25-Jul-2011.) $)
    frss $p |- ( A C_ B -> ( R Fr B -> R Fr A ) ) $=
      ( vx vz vy wss cv c0 wne wa wbr wn wral wrex wi wal wfr sstr2 df-fr com12
      anim1d imim1d alimdv 3imtr4g ) ABGZDHZBGZUGIJZKZEHFHCLMEUGNFUGOZPZDQUGAGZ
      UIKZUKPZDQBCRACRUFULUODUFUNUJUKUFUMUHUIUMUFUHUGABSUAUBUCUDDFEBCTDFEACTUE
      $.

    $( Subset theorem for the set-like predicate.  (Contributed by Mario
       Carneiro, 24-Jun-2015.) $)
    sess1 $p |- ( R C_ S -> ( S Se A -> R Se A ) ) $=
      ( vy vx wss cv wbr crab cvv wcel wral wi simpl ssbrd ss2rabdv ssexg df-se
      wse wa ex syl ralimdv 3imtr4g ) BCFZDGZEGZCHZDAIZJKZEALUFUGBHZDAIZJKZEALA
      CSABSUEUJUMEAUEULUIFZUJUMMUEUKUHDAUEUFAKZTBCUFUGUEUONOPUNUJUMULUIJQUAUBUC
      EDACREDABRUD $.

    $( Subset theorem for the set-like predicate.  (Contributed by Mario
       Carneiro, 24-Jun-2015.) $)
    sess2 $p |- ( A C_ B -> ( R Se B -> R Se A ) ) $=
      ( vy vx wss cv wbr crab cvv wcel wral wse ssralv wi rabss2 ssexg ex df-se
      syl ralimdv syld 3imtr4g ) ABFZDGEGCHZDBIZJKZEBLZUEDAIZJKZEALZBCMACMUDUHU
      GEALUKUGEABNUDUGUJEAUDUIUFFZUGUJOUEDABPULUGUJUIUFJQRTUAUBEDBCSEDACSUC $.
  $}

  ${
    $d x y z R $.  $d x y z S $.  $d x y z A $.
    $( Equality theorem for the well-founded predicate.  (Contributed by NM,
       9-Mar-1997.) $)
    freq1 $p |- ( R = S -> ( R Fr A <-> S Fr A ) ) $=
      ( vx vz vy wceq cv wss c0 wne wa wbr wn wral wrex wi wal wfr df-fr notbid
      breq rexralbidv imbi2d albidv 3bitr4g ) BCGZDHZAIUHJKLZEHZFHZBMZNZEUHOFUH
      PZQZDRUIUJUKCMZNZEUHOFUHPZQZDRABSACSUGUOUSDUGUNURUIUGUMUQFEUHUHUGULUPUJUK
      BCUBUAUCUDUEDFEABTDFEACTUF $.
  $}

  $( Equality theorem for the well-founded predicate.  (Contributed by NM,
     3-Apr-1994.) $)
  freq2 $p |- ( A = B -> ( R Fr A <-> R Fr B ) ) $=
    ( wceq wfr wss wi eqimss2 frss syl eqimss impbid ) ABDZACEZBCEZMBAFNOGBAHBA
    CIJMABFONGABKABCIJL $.

  $( Equality theorem for the set-like predicate.  (Contributed by Mario
     Carneiro, 24-Jun-2015.) $)
  seeq1 $p |- ( R = S -> ( R Se A <-> S Se A ) ) $=
    ( wceq wse wss wi eqimss2 sess1 syl eqimss impbid ) BCDZABEZACEZMCBFNOGCBHA
    CBIJMBCFONGBCKABCIJL $.

  $( Equality theorem for the set-like predicate.  (Contributed by Mario
     Carneiro, 24-Jun-2015.) $)
  seeq2 $p |- ( A = B -> ( R Se A <-> R Se B ) ) $=
    ( wceq wse wss wi eqimss2 sess2 syl eqimss impbid ) ABDZACEZBCEZMBAFNOGBAHB
    ACIJMABFONGABKABCIJL $.

  ${
    $d R a b c $.  $d A a b c $.  $d x a b c $.
    nffr.r $e |- F/_ x R $.
    nffr.a $e |- F/_ x A $.
    $( Bound-variable hypothesis builder for well-founded relations.
       (Contributed by Stefan O'Rear, 20-Jan-2015.)  (Revised by Mario
       Carneiro, 14-Oct-2016.) $)
    nffr $p |- F/ x R Fr A $=
      ( va vc vb wfr cv wss c0 wne wa wbr wn wral wrex wi nfcv wal nfss nfv nfn
      df-fr nfan nfbr nfral nfrex nfim nfal nfxfr ) BCIFJZBKZUMLMZNZGJZHJZCOZPZ
      GUMQZHUMRZSZFUAAFHGBCUEVCAFUPVBAUNUOAAUMBAUMTZEUBUOAUCUFVAAHUMVDUTAGUMVDU
      SAAUQURCAUQTDAURTUGUDUHUIUJUKUL $.

    $( Bound-variable hypothesis builder for set-like relations.  (Contributed
       by Mario Carneiro, 24-Jun-2015.)  (Revised by Mario Carneiro,
       14-Oct-2016.) $)
    nfse $p |- F/ x R Se A $=
      ( va vb wse cv wbr crab cvv wcel wral df-se nfcv nfbr nfrab nfel1 nfral
      nfxfr ) BCHFIZGIZCJZFBKZLMZGBNAGFBCOUFAGBEAUELUDAFBAUBUCCAUBPDAUCPQERSTUA
      $.

    $( Bound-variable hypothesis builder for well-orderings.  (Contributed by
       Stefan O'Rear, 20-Jan-2015.)  (Revised by Mario Carneiro,
       14-Oct-2016.) $)
    nfwe $p |- F/ x R We A $=
      ( wwe wfr wor wa df-we nffr nfso nfan nfxfr ) BCFBCGZBCHZIABCJOPAABCDEKAB
      CDELMN $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y R $.
    $( A well-founded relation is irreflexive.  Special case of Proposition
       6.23 of [TakeutiZaring] p. 30.  (Contributed by NM, 2-Jan-1994.)
       (Revised by Mario Carneiro, 22-Jun-2015.) $)
    frirr $p |- ( ( R Fr A /\ B e. A ) -> -. B R B ) $=
      ( vx vy wfr wcel wa cv wbr csn crab c0 wceq wrex wss adantl wral notbid
      wn wne simpl snssi snnzg snex frc syl3anc wb rabeq0 ralbidv syl5bb rexsng
      breq2 breq1 ralsng bitrd mpbid ) ACFZBAGZHZDIZEIZCJZDBKZLMNZEVDOZBBCJZTZU
      TURVDAPZVDMUAZVFURUSUBUSVIURBAUCQUSVJURBAUDQEDAVDCBUEUFUGUSVFVHUHURUSVFVA
      BCJZTZDVDRZVHVEVMEBAVEVCTZDVDRVBBNZVMVCDVDUIVOVNVLDVDVOVCVKVBBVACUMSUJUKU
      LVLVHDBAVABNVKVGVABBCUNSUOUPQUQ $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.  $d x y R $.
    $( A well-founded relation has no 2-cycle loops.  Special case of
       Proposition 6.23 of [TakeutiZaring] p. 30.  (Contributed by NM,
       30-May-1994.)  (Revised by Mario Carneiro, 22-Jun-2015.) $)
    fr2nr $p |- ( ( R Fr A /\ ( B e. A /\ C e. A ) ) ->
                -. ( B R C /\ C R B ) ) $=
      ( vx vy wcel wa wbr wn wo cv wral cvv adantl ad2antrl wceq notbid ralbidv
      breq2 wfr cpr wrex wss wne prex a1i simpl prssi prnzg fri syl22anc rexprg
      c0 wb mpbid wi prid2g ad2antll breq1 syl prid1g orim12d mpd orcomd sylibr
      rspcv ianor ) ADUAZBAGZCAGZHZHZBCDIZJZCBDIZJZKVNVPHJVMVQVOVMELZBDIZJZEBCU
      BZMZVRCDIZJZEWAMZKZVQVOKVMVRFLZDIZJZEWAMZFWAUCZWFVMWANGZVIWAAUDZWAUNUEZWK
      WLVMBCUFUGVIVLUHVLWMVIBCAUIOVJWNVIVKBCAUJPFEAWANDUKULVLWKWFUOVIWJWBWEFBCA
      AWGBQZWIVTEWAWOWHVSWGBVRDTRSWGCQZWIWDEWAWPWHWCWGCVRDTRSUMOUPVMWBVQWEVOVMC
      WAGZWBVQUQVKWQVIVJBCAURUSVTVQECWAVRCQVSVPVRCBDUTRVGVAVMBWAGZWEVOUQVJWRVIV
      KBCAVBPWDVOEBWAVRBQWCVNVRBCDUTRVGVAVCVDVEVNVPVHVF $.
  $}

  ${
    $d x y z R $.
    $( Any relation is well-founded on the empty set.  (Contributed by NM,
       17-Sep-1993.) $)
    fr0 $p |- R Fr (/) $=
      ( vx vz vy c0 wfr cv wss wne wa wbr crab wceq wrex dffr2 ss0 a1d necon1ad
      wi wn imp mpgbir ) EAFBGZEHZUCEIZJCGDGAKCUCLEMDUCNZSBBDCEAOUDUEUFUDUFUCEU
      DUCEMUFTUCPQRUAUB $.
  $}

  ${
    $d A x y z $.  $d R x y z $.  $d ph y z $.  $d ps x z $.
    frminex.1 $e |- A e. _V $.
    frminex.2 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( If an element of a well-founded set satisfies a property ` ph ` , then
       there is a minimal element that satisfies ` ph ` .  (Contributed by Jeff
       Madsen, 18-Jun-2010.)  (Proof shortened by Mario Carneiro,
       18-Nov-2016.) $)
    frminex $p |- ( R Fr A -> ( E. x e. A ph ->
                      E. x e. A ( ph /\ A. y e. A ( ps -> -. y R x ) ) ) ) $=
      ( vz wrex crab c0 wne cv wbr wn wi wral wa cvv wfr rabn0 wss rabex ssrab2
      wcel fri ralrab rexbii weq breq2 notbid imbi2d ralbidv rexrab2 bitri an4s
      sylib mpanl12 ex syl5bir ) ACEJACEKZLMZEFUAZABDNZCNZFOZPZQZDERZSCEJZACEUB
      VDVCVKVBTUFZVBEUCZVDVCSVKACEGUDACEUEVLVDVMVCVKVLVDSVMVCSSVEINZFOZPZDVBRZI
      VBJZVKIDEVBTFUGVRBVPQZDERZIVBJVKVQVTIVBABVPDCEHUHUIAVTVJICEICUJZVSVIDEWAV
      PVHBWAVOVGVNVFVEFUKULUMUNUOUPURUQUSUTVA $.
  $}

  $( Irreflexivity of the epsilon relation: a class founded by epsilon is not a
     member of itself.  (Contributed by NM, 18-Apr-1994.)  (Revised by Mario
     Carneiro, 22-Jun-2015.) $)
  efrirr $p |- ( _E Fr A -> -. A e. A ) $=
    ( cep wfr wcel wa wbr frirr wb epelg adantl mtbid pm2.01da ) ABCZAADZMNEAAB
    FZNAABGNONHMAAAIJKL $.

  $( A set founded by epsilon contains no 2-cycle loops.  (Contributed by NM,
     19-Apr-1994.) $)
  efrn2lp $p |- ( ( _E Fr A /\ ( B e. A /\ C e. A ) ) ->
                -. ( B e. C /\ C e. B ) ) $=
    ( cep wfr wcel wa wbr fr2nr wb epelg bi2anan9r adantl mtbid ) ADEZBAFZCAFZG
    ZGBCDHZCBDHZGZBCFZCBFZGZABCDIRUAUDJOQSUBPTUCBCAKCBAKLMN $.

  ${
    $d x y A $.
    $( The epsilon relation is set-like on any class.  (This is the origin of
       the term "set-like": a set-like relation "acts like" the epsilon
       relation of sets and their elements.)  (Contributed by Mario Carneiro,
       22-Jun-2015.) $)
    epse $p |- _E Se A $=
      ( vy vx cep wse cv wbr crab cvv wcel wral cab epel bicomi abbi2i eqeltrri
      vex rabssab ssexi rgenw df-se mpbir ) ADEBFZCFZDGZBAHZIJZCAKUGCAUFUEBLZUD
      UHIUEBUDUEUCUDJCUCMNOCQPUEBARSTCBADUAUB $.
  $}

  $( Similar to Theorem 7.2 of [TakeutiZaring] p. 35, of except that the Axiom
     of Regularity is not required due to antecedent ` _E Fr A ` .
     (Contributed by NM, 4-May-1994.) $)
  tz7.2 $p |- ( ( Tr A /\ _E Fr A /\ B e. A ) -> ( B C_ A /\ B =/= A ) ) $=
    ( wtr cep wfr wcel wss wne wa trss wn wceq efrirr eleq1 syl5ibrcom necon2ad
    notbid anim12ii 3impia ) ACZADEZBAFZBAGZBAHZITUBUCUAUDABJUAUBBAUAUBKBALZAAF
    ZKAMUEUBUFBAANQOPRS $.
  $( $j usage 'tz7.2' avoids 'ax-reg'; $)

  ${
    $d x y z A $.
    $( An alternate way of saying that the epsilon relation is well-founded.
       (Contributed by NM, 17-Feb-2004.)  (Revised by Mario Carneiro,
       23-Jun-2015.) $)
    dfepfr $p |- ( _E Fr A <-> A. x ( ( x C_ A /\ x =/= (/) ) ->
                  E. y e. x ( x i^i y ) = (/) ) ) $=
      ( vz cep wfr cv wss c0 wne wa wbr crab wceq wrex wi wal cin dffr2 wel
      epel rabbii dfin5 eqtr4i eqeq1i rexbii imbi2i albii bitri ) CEFAGZCHUJIJK
      ZDGZBGZELZDUJMZINZBUJOZPZAQUKUJUMRZINZBUJOZPZAQABDCESURVBAUQVAUKUPUTBUJUO
      USIUODBTZDUJMUSUNVCDUJBULUAUBDUJUMUCUDUEUFUGUHUI $.
  $}

  ${
    $d x y A $.  $d x y B $.
    epfrc.1 $e |- B e. _V $.
    $( A subset of an epsilon-founded class has a minimal element.
       (Contributed by NM, 17-Feb-2004.)  (Revised by David Abernethy,
       22-Feb-2011.) $)
    epfrc $p |- ( ( _E Fr A /\ B C_ A /\ B =/= (/) ) ->
                  E. x e. B ( B i^i x ) = (/) ) $=
      ( vy cep wfr wss c0 wne w3a cv wbr crab wceq wrex cin frc wel dfin5 epel
      rabbii eqtr4i eqeq1i rexbii sylibr ) BFGCBHCIJKELZALZFMZECNZIOZACPCUHQZIO
      ZACPAEBCFDRUMUKACULUJIULEASZECNUJECUHTUIUNECAUGUAUBUCUDUEUF $.
  $}

  $( Subset theorem for the well-ordering predicate.  Exercise 4 of
     [TakeutiZaring] p. 31.  (Contributed by NM, 19-Apr-1994.) $)
  wess $p |- ( A C_ B -> ( R We B -> R We A ) ) $=
    ( wss wfr wor wa wwe frss soss anim12d df-we 3imtr4g ) ABDZBCEZBCFZGACEZACF
    ZGBCHACHNOQPRABCIABCJKBCLACLM $.

  $( Equality theorem for the well-ordering predicate.  (Contributed by NM,
     9-Mar-1997.) $)
  weeq1 $p |- ( R = S -> ( R We A <-> S We A ) ) $=
    ( wceq wfr wor wa wwe freq1 soeq1 anbi12d df-we 3bitr4g ) BCDZABEZABFZGACEZ
    ACFZGABHACHNOQPRABCIABCJKABLACLM $.

  $( Equality theorem for the well-ordering predicate.  (Contributed by NM,
     3-Apr-1994.) $)
  weeq2 $p |- ( A = B -> ( R We A <-> R We B ) ) $=
    ( wceq wfr wor wa wwe freq2 soeq2 anbi12d df-we 3bitr4g ) ABDZACEZACFZGBCEZ
    BCFZGACHBCHNOQPRABCIABCJKACLBCLM $.

  $( A well-ordering is well-founded.  (Contributed by NM, 22-Apr-1994.) $)
  wefr $p |- ( R We A -> R Fr A ) $=
    ( wwe wfr wor df-we simplbi ) ABCABDABEABFG $.

  $( A well-ordering is a strict ordering.  (Contributed by NM,
     16-Mar-1997.) $)
  weso $p |- ( R We A -> R Or A ) $=
    ( wwe wfr wor df-we simprbi ) ABCABDABEABFG $.

  $( The elements of an epsilon well-ordering are comparable.  (Contributed by
     NM, 17-May-1994.) $)
  wecmpep $p |- ( ( _E We A /\ ( x e. A /\ y e. A ) ) ->
                 ( x e. y \/ x = y \/ y e. x ) ) $=
    ( cep wwe wor cv wcel wa weq w3o weso solin epel biid 3orbi123i sylib sylan
    wbr ) CDECDFZAGZCHBGZCHIZUAUBHZABJZUBUAHZKZCDLTUCIUAUBDSZUEUBUADSZKUGCUAUBD
    MUHUDUEUEUIUFBUANUEOAUBNPQR $.

  $( An epsilon well-ordering is a transitive relation.  (Contributed by NM,
     22-Apr-1994.) $)
  wetrep $p |- ( ( _E We A /\ ( x e. A /\ y e. A /\ z e. A ) ) ->
             ( ( x e. y /\ y e. z ) -> x e. z ) ) $=
    ( cep wwe cv wcel w3a wa wbr wel wor weso sotr sylan epel anbi12i 3imtr3g
    wi ) DEFZAGZDHBGZDHCGZDHIZJUBUCEKZUCUDEKZJZUBUDEKZABLZBCLZJACLUADEMUEUHUITD
    ENDUBUCUDEOPUFUJUGUKBUBQCUCQRCUBQS $.

  ${
    $d y z A $.  $d x y z B $.
    $( A nonempty (possibly proper) subclass of a class well-ordered by ` _E `
       has a minimal element.  Special case of Proposition 6.26 of
       [TakeutiZaring] p. 31.  (Contributed by NM, 17-Feb-2004.) $)
    wefrc $p |- ( ( _E We A /\ B C_ A /\ B =/= (/) ) ->
               E. x e. B ( B i^i x ) = (/) ) $=
      ( vy vz cep wwe wss c0 wne cv cin wceq wrex wi wcel wa eqeq1d ex wel wess
      wex ineq2 rspcev adantl inss1 wfr wefr vex inex2 epfrc syl3an1 3exp rexin
      n0 mpi syl6ib adantr wral elin w3a df-3an 3anrot bitr3i wetrep expd exp44
      sylan2b imp com34 impd syl5bi imp4a com23 ralrimdv dfss3 dfss in32 eqeq2i
      syl6ibr sylbb biimprd syl6 reximdvai syld pm2.61dne exlimdv syl6com 3imp
      ) BFGZCBHZCIJZCAKZLZIMZACNZWKWJCFGZWLWPOCBFUAWLDKZCPZDUBWQWPDCUOWQWSWPDWQ
      WSWPWQWSQZWPCWRLZIWSXAIMZWPOWQWSXBWPWOXBAWRCWMWRMWNXAIWMWRCUCRUDSUEWTXAIJ
      ZADTZXAWMLZIMZQZACNZWPWQXCXHOWSWQXCXFAXANZXHWQXACHZXCXIOCWRUFWQXJXCXIWQCF
      UGXJXCXICFUHACXAWRCDUIUJUKULUMUPXFACWRUNUQURWTXGWOACWTWMCPZXDXFWOWTXKXDXF
      WOOZWTXKXDQZWNWRHZXLWTXMEDTZEWNUSXNWTXMXOEWNWTEKZWNPZXMXOWTXQXKXDXOXQXPCP
      ZEATZQWTXKXDXOOZOZXPCWMUTWTXRXSYAWTXRXKXSXTWQWSXRXKXSXTOZOOWQWSXRXKYBWSXR
      QXKQZWQXRXKWSVAZYBYCWSXRXKVAYDWSXRXKVBWSXRXKVCVDWQYDQXSXDXOEADCVEVFVHVGVI
      VJVKVLVMVNVOEWNWRVPVTXNWOXFXNWNXEIXNWNWNWRLZMWNXEMWNWRVQYEXEWNCWMWRVRVSWA
      RWBWCVFVMWDWEWFSWGVLWHWI $.
  $}

  $( Any relation is a well-ordering of the empty set.  (Contributed by NM,
     16-Mar-1997.) $)
  we0 $p |- R We (/) $=
    ( c0 wwe wfr wor fr0 so0 df-we mpbir2an ) BACBADBAEAFAGBAHI $.

  ${
    $d x y z A $.  $d w x y z B $.  $d w x y z R $.
    $( A subset of a well-ordered set has a unique minimal element.
       (Contributed by NM, 18-Mar-1997.)  (Revised by Mario Carneiro,
       28-Apr-2015.) $)
    wereu $p |- ( ( R We A /\ ( B e. V /\ B C_ A /\ B =/= (/) ) ) ->
                E! x e. B A. y e. B -. y R x ) $=
      ( wwe wcel wss c0 wne w3a wa cv wbr wn wral wrex wi wor wrmo wreu wfr fri
      wefr exp32 expcom 3imp2 sylan weso soss mpan9 somo syl 3ad2antr2 sylanbrc
      reu5 ) CEGZDFHZDCIZDJKZLZMBNANEOPBDQZADRZVCADUAZVCADUBURCEUCZVBVDCEUEVFUS
      UTVAVDUSVFUTVAVDSSUSVFMUTVAVDABCDFEUDUFUGUHUIURUSUTVEVAURUTMDETZVEURCETUT
      VGCEUJDCEUKULABDEUMUNUOVCADUQUP $.

    $( All nonempty (possibly proper) subclasses of ` A ` , which has a
       well-founded relation ` R ` , have ` R `-minimal elements.  Proposition
       6.26 of [TakeutiZaring] p. 31.  (Contributed by Scott Fenton,
       29-Jan-2011.)  (Revised by Mario Carneiro, 24-Jun-2015.) $)
    wereu2 $p |- ( ( ( R We A /\ R Se A ) /\ ( B C_ A /\ B =/= (/) ) ) ->
                E! x e. B A. y e. B -. y R x ) $=
      ( vz vw wa c0 cv wbr wn wral wrex wcel wi breq1 syl5bi sylc ad2antrr wrmo
      wwe wse wss wne wreu wex n0 crab wceq rabeq0 notbid cbvralv breq2 ralbidv
      weq syl5bb rspcev ex ad2antll cvv simprl simplr sess2 simprr seex syl2anc
      wfr wefr ssrab2 syl5ss fri expr syl21anc rexrab ralrab wor weso soss sotr
      simpr syl13anc ancomsd expdimp an32s con3d idd jad ralimdva reximdva syld
      expimpd pm2.61dne exlimdv impr somo syl reu5 sylanbrc ) CEUBZCEUCZHZDCUDZ
      DIUEZHZHZBJZAJZEKZLZBDMZADNZXKADUAZXKADUFXBXCXDXLXDFJZDOZFUGXBXCHZXLFDUHX
      PXOXLFXBXCXOXLXBXCXOHZHZXLGJZXNEKZGDUIZIYAIUJXTLZGDMZXRXLXTGDUKXOYCXLPXBX
      CXOYCXLXKYCAXNDXKXSXHEKZLZGDMAFUPZYCXJYEBGDBGUPXIYDXGXSXHEQULUMYFYEYBGDYF
      YDXTXHXNXSEUNULUOUQURUSUTRXRYAIUEZXJBYAMZAYANZXLXRYAVAOZCEVHZYACUDZYGYIPX
      RDEUCZXOYJXRXCXAYMXBXCXOVBZWTXAXQVCDCEVDSXBXCXOVEZGDXNEVFVGWTYKXAXQCEVITX
      RYADCXTGDVJYNVKYJYKHYLYGYIABCYAVAEVLVMVNYIXHXNEKZYHHZADNXRXLXTYPYHAGDXSXH
      XNEQVOXRYQXKADXRXHDOZHZYPYHXKYHXGXNEKZXJPZBDMYSYPHZXKXTYTXJBGDXSXGXNEQVPU
      UBUUAXJBDUUBXGDOZHZYTXJXJUUDXIYTYSUUCYPXIYTPYSUUCHZYPXIYTUUEXIYPYTUUEDEVQ
      ZUUCYRXOXIYPHYTPXRUUFYRUUCXRXCCEVQZUUFYNWTUUGXAXQCEVRZTDCEVSZSTYSUUCWAXRY
      RUUCVCXRXOYRUUCYOTDXGXHXNEVTWBWCWDWEWFUUDXJWGWHWIRWLWJRWKWMVMWNRWOXFUUFXM
      XFXCUUGUUFXBXCXDVBWTUUGXAXEUUHTUUISABDEWPWQXKADWRWS $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Relations
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Introduce new constant symbols. $)
  $c X. $.  $( Times symbol (Cartesian product symbol) $)
  $c `' $.  $( Small elevated smiley (converse operation) $)
  $c dom $.  $( Domain $)
  $c ran $.  $( Range $)
  $c |` $.  $( Right hook (restriction symbol) $)
  $c " $.  $( Left quote (image symbol) $)
  $c o. $.  $( Small circle (composition symbol) $)
  $c Rel $.  $( Relation predicate $)

  $( Extend the definition of a class to include the Cartesian product. $)
  cxp $a class ( A X. B ) $.

  $( Extend the definition of a class to include the converse of a class. $)
  ccnv $a class `' A $.

  $( Extend the definition of a class to include the domain of a class. $)
  cdm $a class dom A $.

  $( Extend the definition of a class to include the range of a class. $)
  crn $a class ran A $.

  $( Extend the definition of a class to include the restriction of a class.
     Read:  "the restriction of ` A ` to ` B ` ". $)
  cres $a class ( A |` B ) $.

  $( Extend the definition of a class to include the image of a class.  Read:
     "the image of ` B ` under ` A ` ". $)
  cima $a class ( A " B ) $.

  $( Extend the definition of a class to include the composition of two
     classes.  (Read:  The composition of ` A ` and ` B ` .) $)
  ccom $a class ( A o. B ) $.

  $( Extend the definition of a wff to include the relation predicate.  Read:
      " ` A ` is a relation". $)
  wrel $a wff Rel A $.

  ${
    $d x y z A $.  $d x y z B $.
    $( Define the Cartesian product of two classes.  This is also sometimes
       called the "cross product" but that term also has other meanings; we
       intentionally choose a less ambiguous term.  Definition 9.11 of [Quine]
       p. 64.  For example, ` ( { 1 , 5 } X. { 2 , 7 } ) = `
       ` ( { <. 1 , 2 >. , <. 1 , 7 >. } u. { <. 5 , 2 >. , <. 5 , 7 >. } ) `
       ( ~ ex-xp ).  Another example is that the set of rational numbers are
       defined in ~ df-q using the Cartesian product ` ( ZZ X. NN ) ` ; the
       left- and right-hand sides of the Cartesian product represent the top
       (integer) and bottom (natural) numbers of a fraction.  (Contributed by
       NM, 4-Jul-1994.) $)
    df-xp $a |- ( A X. B ) = { <. x , y >. | ( x e. A /\ y e. B ) } $.

    $( Define the relation predicate.  Definition 6.4(1) of [TakeutiZaring]
       p. 23.  For alternate definitions, see ~ dfrel2 and ~ dfrel3 .
       (Contributed by NM, 1-Aug-1994.) $)
    df-rel $a |- ( Rel A <-> A C_ ( _V X. _V ) ) $.

    $( Define the converse of a class.  Definition 9.12 of [Quine] p. 64.  The
       converse of a binary relation swaps its arguments, i.e., if ` A e. _V `
       and ` B e. _V ` then ` ( A ``' R B <-> B R A ) ` , as proven in ~ brcnv
       (see ~ df-br and ~ df-rel for more on relations).  For example,
       ` ``' { <. 2 , 6 >. , <. 3 , 9 >. } = { <. 6 , 2 >. , <. 9 , 3 >. } `
       ( ~ ex-cnv ).  We use Quine's breve accent (smile) notation.  Like
       Quine, we use it as a prefix, which eliminates the need for parentheses.
       Many authors use the postfix superscript "minus one".  The term
       "converse" is Quine's terminology; some authors call it "inverse",
       especially when the argument is a function.  (Contributed by NM,
       4-Jul-1994.) $)
    df-cnv $a |- `' A = { <. x , y >. | y A x } $.

    $( Define the composition of two classes.  Definition 6.6(3) of
       [TakeutiZaring] p. 24.  For example, ` ( ( exp o. cos ) `` 0 ) = _e `
       ( ~ ex-co ) because ` ( cos `` 0 ) = 1 ` (see ~ cos0 ) and
       ` ( exp `` 1 ) = _e ` (see ~ df-e ).  Note that Definition 7 of [Suppes]
       p. 63 reverses ` A ` and ` B ` , uses ` /. ` instead of ` o. ` , and
       calls the operation "relative product."  (Contributed by NM,
       4-Jul-1994.) $)
    df-co $a |- ( A o. B ) = { <. x , y >. | E. z ( x B z /\ z A y ) } $.

    $( Define the domain of a class.  Definition 3 of [Suppes] p. 59.  For
       example, ` F = { <. 2 , 6 >. , <. 3 , 9 >. } -> dom F = { 2 , 3 } `
       ( ~ ex-dm ).  Another example is the domain of the complex arctangent,
       ` ( A e. dom arctan <-> ( A e. CC /\ A =/= -u _i /\ A =/= _i ) ) ` (for
       proof see ~ atandm ).  Contrast with range (defined in ~ df-rn ).  For
       alternate definitions see ~ dfdm2 , ~ dfdm3 , and ~ dfdm4 .  The
       notation " ` dom ` " is used by Enderton; other authors sometimes use
       script D. (Contributed by NM, 1-Aug-1994.) $)
    df-dm $a |- dom A = { x | E. y x A y } $.

    $( Define the range of a class.  For example,
       ` F = { <. 2 , 6 >. , <. 3 , 9 >. } -> ran F = { 6 , 9 } ` ( ~ ex-rn ).
       Contrast with domain (defined in ~ df-dm ).  For alternate definitions,
       see ~ dfrn2 , ~ dfrn3 , and ~ dfrn4 .  The notation " ` ran ` " is used
       by Enderton; other authors sometimes use script R or script W.
       (Contributed by NM, 1-Aug-1994.) $)
    df-rn $a |- ran A = dom `' A $.

    $( Define the restriction of a class.  Definition 6.6(1) of [TakeutiZaring]
       p. 24.  For example, the expression ` ( exp |`` RR ) ` (used in
       ~ reeff1 ) means "the exponential function e to the x, but the exponent
       x must be in the reals" ( ~ df-ef defines the exponential function,
       which normally allows the exponent to be a complex number).  Another
       example is that ` ( F = { <. 2 , 6 >. , <. 3 , 9 >. } `
       ` /\ B = { 1 , 2 } ) -> ( F |`` B ) = { <. 2 , 6 >. } ` ( ~ ex-res ).
       (Contributed by NM, 2-Aug-1994.) $)
    df-res $a |- ( A |` B ) = ( A i^i ( B X. _V ) ) $.

    $( Define the image of a class (as restricted by another class).
       Definition 6.6(2) of [TakeutiZaring] p. 24.  For example,
       ` ( F = { <. 2 , 6 >. , <. 3 , 9 >. } /\ B = { 1 , 2 } ) `
       ` -> ( F " B ) = { 6 } ` ( ~ ex-ima ).  Contrast with restriction
       ( ~ df-res ) and range ( ~ df-rn ).  For an alternate definition, see
       ~ dfima2 .  (Contributed by NM, 2-Aug-1994.) $)
    df-ima $a |- ( A " B ) = ran ( A |` B ) $.
  $}

  ${
    $d x y z A $.  $d x y z B $.  $d x y z C $.
    $( Equality theorem for Cartesian product.  (Contributed by NM,
       4-Jul-1994.) $)
    xpeq1 $p |- ( A = B -> ( A X. C ) = ( B X. C ) ) $=
      ( vx vy wceq cv wcel wa copab cxp eleq2 anbi1d opabbidv df-xp 3eqtr4g ) A
      BFZDGZAHZEGCHZIZDEJRBHZTIZDEJACKBCKQUAUCDEQSUBTABRLMNDEACODEBCOP $.

    ${
      $d x y A $.  $d x y B $.  $d x y C $.  $d x y D $.
      $( Subset theorem for Cartesian product.  Generalization of Theorem 101
         of [Suppes] p. 52.  (Contributed by NM, 26-Aug-1995.)  (Proof
         shortened by Andrew Salmon, 27-Aug-2011.) $)
      xpss12 $p |- ( ( A C_ B /\ C C_ D ) -> ( A X. C ) C_ ( B X. D ) ) $=
        ( vx vy wss wa cv wcel copab cxp ssel im2anan9 ssopab2dv df-xp 3sstr4g
        ) ABGZCDGZHZEIZAJZFIZCJZHZEFKUABJZUCDJZHZEFKACLBDLTUEUHEFRUBUFSUDUGABUA
        MCDUCMNOEFACPEFBDPQ $.
    $}

    $( A Cartesian product is included in the ordered pair universe.  Exercise
       3 of [TakeutiZaring] p. 25.  (Contributed by NM, 2-Aug-1994.) $)
    xpss $p |- ( A X. B ) C_ ( _V X. _V ) $=
      ( cvv wss cxp ssv xpss12 mp2an ) ACDBCDABECCEDAFBFACBCGH $.

    $( Intersection with a Cartesian product is a subclass of restriction.
       (Contributed by Peter Mazsa, 19-Jul-2019.) $)
    inxpssres $p |- ( R i^i ( A X. B ) ) C_ ( R |` A ) $=
      ( cxp cin cvv cres wss ssid ssv xpss12 mp2an sslin ax-mp df-res sseqtr4i
      ) CABDZEZCAFDZEZCAGQSHZRTHAAHBFHUAAIBJAABFKLQSCMNCAOP $.

    $( A Cartesian product is a relation.  Theorem 3.13(i) of [Monk1] p. 37.
       (Contributed by NM, 2-Aug-1994.) $)
    relxp $p |- Rel ( A X. B ) $=
      ( cxp wrel cvv wss xpss df-rel mpbir ) ABCZDJEECFABGJHI $.

    $( Subset relation for Cartesian product.  (Contributed by Jeff Hankins,
       30-Aug-2009.) $)
    xpss1 $p |- ( A C_ B -> ( A X. C ) C_ ( B X. C ) ) $=
      ( wss cxp ssid xpss12 mpan2 ) ABDCCDACEBCEDCFABCCGH $.

    $( Subset relation for Cartesian product.  (Contributed by Jeff Hankins,
       30-Aug-2009.) $)
    xpss2 $p |- ( A C_ B -> ( C X. A ) C_ ( C X. B ) ) $=
      ( wss cxp ssid xpss12 mpan ) CCDABDCAECBEDCFCCABGH $.

    $( Equality theorem for Cartesian product.  (Contributed by NM,
       5-Jul-1994.) $)
    xpeq2 $p |- ( A = B -> ( C X. A ) = ( C X. B ) ) $=
      ( vx vy wceq cv wcel wa copab cxp eleq2 anbi2d opabbidv df-xp 3eqtr4g ) A
      BFZDGCHZEGZAHZIZDEJRSBHZIZDEJCAKCBKQUAUCDEQTUBRABSLMNDECAODECBOP $.

    $( Membership in a Cartesian product.  Uses fewer axioms than ~ elxp .
       (Contributed by NM, 4-Jul-1994.) $)
    elxpi $p |- ( A e. ( B X. C ) -> E. x E. y ( A = <. x , y >. /\
               ( x e. B /\ y e. C ) ) ) $=
      ( vz cv cop wceq wcel wa wex cab cxp eqeq1 anbi1d 2exbidv elabg ibi copab
      df-xp df-opab eqtri eleq2s ) CAGZBGZHZIZUEDJUFEJKZKZBLALZCFGZUGIZUIKZBLAL
      ZFMZDENZCUPJUKUOUKFCUPULCIZUNUJABURUMUHUIULCUGOPQRSUQUIABTUPABDEUAUIABFUB
      UCUD $.

    $( Membership in a Cartesian product.  (Contributed by NM, 4-Jul-1994.) $)
    elxp $p |- ( A e. ( B X. C ) <-> E. x E. y ( A = <. x , y >. /\
               ( x e. B /\ y e. C ) ) ) $=
      ( cxp wcel cv wa copab cop wceq wex df-xp eleq2i elopab bitri ) CDEFZGCAH
      ZDGBHZEGIZABJZGCSTKLUAIBMAMRUBCABDENOUAABCPQ $.

    $( Membership in a Cartesian product.  (Contributed by NM, 23-Feb-2004.)
       (Proof shortened by JJ, 13-Aug-2021.) $)
    elxp2 $p |- ( A e. ( B X. C ) <-> E. x e. B E. y e. C A = <. x , y >. ) $=
      ( cv cop wceq wcel wa wex cxp wrex ancom 2exbii elxp r2ex 3bitr4i ) CAFZB
      FZGHZSDITEIJZJZBKAKUBUAJZBKAKCDELIUABEMADMUCUDABUAUBNOABCDEPUAABDEQR $.
  $}

  $( Equality theorem for Cartesian product.  (Contributed by FL,
     31-Aug-2009.) $)
  xpeq12 $p |- ( ( A = B /\ C = D ) -> ( A X. C ) = ( B X. D ) ) $=
    ( wceq cxp xpeq1 xpeq2 sylan9eq ) ABECDEACFBCFBDFABCGCDBHI $.

  ${
    xpeq1i.1 $e |- A = B $.
    $( Equality inference for Cartesian product.  (Contributed by NM,
       21-Dec-2008.) $)
    xpeq1i $p |- ( A X. C ) = ( B X. C ) $=
      ( wceq cxp xpeq1 ax-mp ) ABEACFBCFEDABCGH $.

    $( Equality inference for Cartesian product.  (Contributed by NM,
       21-Dec-2008.) $)
    xpeq2i $p |- ( C X. A ) = ( C X. B ) $=
      ( wceq cxp xpeq2 ax-mp ) ABECAFCBFEDABCGH $.
  $}

  ${
    xpeq12i.1 $e |- A = B $.
    xpeq12i.2 $e |- C = D $.
    $( Equality inference for Cartesian product.  (Contributed by FL,
       31-Aug-2009.) $)
    xpeq12i $p |- ( A X. C ) = ( B X. D ) $=
      ( wceq cxp xpeq12 mp2an ) ABGCDGACHBDHGEFABCDIJ $.
  $}

  ${
    xpeq1d.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for Cartesian product.  (Contributed by Jeff Madsen,
       17-Jun-2010.) $)
    xpeq1d $p |- ( ph -> ( A X. C ) = ( B X. C ) ) $=
      ( wceq cxp xpeq1 syl ) ABCFBDGCDGFEBCDHI $.

    $( Equality deduction for Cartesian product.  (Contributed by Jeff Madsen,
       17-Jun-2010.) $)
    xpeq2d $p |- ( ph -> ( C X. A ) = ( C X. B ) ) $=
      ( wceq cxp xpeq2 syl ) ABCFDBGDCGFEBCDHI $.

    ${
      xpeq12d.2 $e |- ( ph -> C = D ) $.
      $( Equality deduction for Cartesian product.  (Contributed by NM,
         8-Dec-2013.) $)
      xpeq12d $p |- ( ph -> ( A X. C ) = ( B X. D ) ) $=
        ( wceq cxp xpeq12 syl2anc ) ABCHDEHBDICEIHFGBCDEJK $.
    $}

    $( Equality deduction for a Cartesian square, see Wikipedia "Cartesian
       product",
~ https://en.wikipedia.org/wiki/Cartesian_product#n-ary_Cartesian_power .
       (Contributed by AV, 13-Jan-2020.) $)
    sqxpeqd $p |- ( ph -> ( A X. A ) = ( B X. B ) ) $=
      ( xpeq12d ) ABCBCDDE $.
  $}

  ${
    $d y z A $.  $d y z B $.  $d x y z $.
    nfxp.1 $e |- F/_ x A $.
    nfxp.2 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for Cartesian product.  (Contributed
       by NM, 15-Sep-2003.)  (Revised by Mario Carneiro, 15-Oct-2016.) $)
    nfxp $p |- F/_ x ( A X. B ) $=
      ( vy vz cxp cv wcel wa copab df-xp nfcri nfan nfopab nfcxfr ) ABCHFIBJZGI
      CJZKZFGLFGBCMTFGARSAAFBDNAGCENOPQ $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.
    $( The empty set is not a member of a Cartesian product.  (Contributed by
       NM, 2-May-1996.)  (Revised by Mario Carneiro, 26-Apr-2015.)  (Proof
       shortened by JJ, 13-Aug-2021.) $)
    0nelxp $p |- -. (/) e. ( A X. B ) $=
      ( vx vy c0 cxp wcel cv cop wceq wa wex vex opnzi nesymi intnanr nex mtbir
      elxp ) EABFGECHZDHZIZJZTAGUABGKZKZDLZCLUFCUEDUCUDUBETUACMDMNOPQQCDEABSR
      $.

    $( A member of a Cartesian product (ordered pair) doesn't contain the empty
       set.  (Contributed by NM, 15-Dec-2008.) $)
    0nelelxp $p |- ( C e. ( A X. B ) -> -. (/) e. C ) $=
      ( vx vy cxp wcel cv cop wceq wa wex c0 wn elxp 0nelop eleq2 mtbiri adantr
      exlimivv sylbi ) CABFGCDHZEHZIZJZUBAGUCBGKZKZELDLMCGZNZDECABOUGUIDEUEUIUF
      UEUHMUDGUBUCPCUDMQRSTUA $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.  $d x y D $.
    $( Ordered pair membership in a Cartesian product.  (Contributed by NM,
       15-Nov-1994.)  (Proof shortened by Andrew Salmon, 12-Aug-2011.)
       (Revised by Mario Carneiro, 26-Apr-2015.) $)
    opelxp $p |- ( <. A , B >. e. ( C X. D ) <-> ( A e. C /\ B e. D ) ) $=
      ( vx vy cop cxp wcel cv wceq wrex wa elxp2 wb opth2 eleq1 bi2anan9 eqeq2d
      vex sylbi biimprcd rexlimivv eqid opeq1 opeq2 rspc2ev mp3an3 impbii bitri
      ) ABGZCDHIUKEJZFJZGZKZFDLECLZACIZBDIZMZEFUKCDNUPUSUOUSEFCDUOUSULCIZUMDIZM
      ZUOAULKZBUMKZMUSVBOABULUMETFTPVCUQUTVDURVAAULCQBUMDQRUAUBUCUQURUKUKKZUPUK
      UDUOVEUKAUMGZKEFABCDULAKUNVFUKULAUMUESUMBKVFUKUKUMBAUFSUGUHUIUJ $.
  $}

  $( Ordered pair membership in a Cartesian product (implication).
     (Contributed by NM, 28-May-1995.) $)
  opelxpi $p |- ( ( A e. C /\ B e. D ) -> <. A , B >. e. ( C X. D ) ) $=
    ( cop cxp wcel wa opelxp biimpri ) ABECDFGACGBDGHABCDIJ $.

  ${
    opelxpd.1 $e |- ( ph -> A e. C ) $.
    opelxpd.2 $e |- ( ph -> B e. D ) $.
    $( Ordered pair membership in a Cartesian product, deduction form.
       (Contributed by Glauco Siliprandi, 3-Mar-2021.) $)
    opelxpd $p |- ( ph -> <. A , B >. e. ( C X. D ) ) $=
      ( wcel cop cxp opelxpi syl2anc ) ABDHCEHBCIDEJHFGBCDEKL $.
  $}

  ${
    opelvv.1 $e |- A e. _V $.
    opelvv.2 $e |- B e. _V $.
    $( Ordered pair membership in the universal class of ordered pairs.
       (Contributed by NM, 22-Aug-2013.)  (Revised by Mario Carneiro,
       26-Apr-2015.) $)
    opelvv $p |- <. A , B >. e. ( _V X. _V ) $=
      ( cvv wcel cop cxp opelxpi mp2an ) AEFBEFABGEEHFCDABEEIJ $.
  $}

  $( Ordered pair membership in the universal class of ordered pairs.
     (Contributed by Mario Carneiro, 3-May-2015.) $)
  opelvvg $p |- ( ( A e. V /\ B e. W ) -> <. A , B >. e. ( _V X. _V ) ) $=
    ( wcel cvv cop cxp elex opelxpi syl2an ) ACEAFEBFEABGFFHEBDEACIBDIABFFJK $.

  $( The first member of an ordered pair of classes in a Cartesian product
     belongs to first Cartesian product argument.  (Contributed by NM,
     28-May-2008.)  (Revised by Mario Carneiro, 26-Apr-2015.) $)
  opelxp1 $p |- ( <. A , B >. e. ( C X. D ) -> A e. C ) $=
    ( cop cxp wcel opelxp simplbi ) ABECDFGACGBDGABCDHI $.

  $( The second member of an ordered pair of classes in a Cartesian product
     belongs to second Cartesian product argument.  (Contributed by Mario
     Carneiro, 26-Apr-2015.) $)
  opelxp2 $p |- ( <. A , B >. e. ( C X. D ) -> B e. D ) $=
    ( cop cxp wcel opelxp simprbi ) ABECDFGACGBDGABCDHI $.

  $( The first member of an ordered triple of classes in a Cartesian product
     belongs to first Cartesian product argument.  (Contributed by NM,
     28-May-2008.) $)
  otelxp1 $p |- ( <. <. A , B >. , C >. e. ( ( R X. S ) X. T )
          -> A e. R ) $=
    ( cop cxp wcel opelxp1 syl ) ABGZCGDEHZFHILMIADILCMFJABDEJK $.

  $( An ordered triple is an element of a doubled Cartesian product.
     (Contributed by Alexander van der Vekens, 26-Feb-2018.) $)
  otel3xp $p |- ( ( T = <. A , B , C >. /\ ( A e. X /\ B e. Y /\ C e. Z ) )
                         -> T e. ( ( X X. Y ) X. Z ) ) $=
    ( cotp wceq wcel w3a cxp cop df-ot wa 3simpa opelxp sylibr simp3 opelxpd
    syl5eqel eleq1 syl5ibr imp ) DABCHZIZAEJZBFJZCGJZKZDEFLZGLZJZUJUMUFUEULJUJU
    EABMZCMULABCNUJUNCUKGUJUGUHOUNUKJUGUHUIPABEFQRUGUHUISTUADUEULUBUCUD $.

  ${
    $d x y z A $.  $d x y z B $.  $d y z ph $.  $d x ps $.
    rabxp.1 $e |- ( x = <. y , z >. -> ( ph <-> ps ) ) $.
    $( Membership in a class builder restricted to a Cartesian product.
       (Contributed by NM, 20-Feb-2014.) $)
    rabxp $p |- { x e. ( A X. B ) | ph }
             = { <. y , z >. | ( y e. A /\ z e. B /\ ps ) } $=
      ( cv cxp wcel wa cab cop wceq w3a wex crab copab elxp anbi1i anass anbi2d
      19.41vv df-3an syl6bbr pm5.32i bitri 2exbii 3bitr2i abbii df-opab 3eqtr4i
      df-rab ) CIZFGJZKZALZCMUODIZEIZNOZUSFKZUTGKZBPZLZEQDQZCMACUPRVDDESURVFCUR
      VAVBVCLZLZEQDQZALVHALZEQDQVFUQVIADEUOFGTUAVHADEUDVJVEDEVJVAVGALZLVEVAVGAU
      BVAVKVDVAVKVGBLVDVAABVGHUCVBVCBUEUFUGUHUIUJUKACUPUNVDDECULUM $.
  $}

  $( Binary relation on a Cartesian product.  (Contributed by NM,
     22-Apr-2004.) $)
  brxp $p |- ( A ( C X. D ) B <-> ( A e. C /\ B e. D ) ) $=
    ( cxp wbr cop wcel wa df-br opelxp bitri ) ABCDEZFABGMHACHBDHIABMJABCDKL $.

  $( A true binary relation on a relation implies the arguments are sets.
     (This is a property of our ordered pair definition.)  (Contributed by
     Mario Carneiro, 26-Apr-2015.) $)
  brrelex12 $p |- ( ( Rel R /\ A R B ) -> ( A e. _V /\ B e. _V ) ) $=
    ( wrel wbr wa cvv cxp wcel wss df-rel biimpi ssbrd imp brxp sylib ) CDZABCE
    ZFABGGHZEZAGIBGIFQRTQCSABQCSJCKLMNABGGOP $.

  $( A true binary relation on a relation implies the first argument is a set.
     (This is a property of our ordered pair definition.)  (Contributed by NM,
     18-May-2004.)  (Revised by Mario Carneiro, 26-Apr-2015.) $)
  brrelex1 $p |- ( ( Rel R /\ A R B ) -> A e. _V ) $=
    ( wrel wbr wa cvv wcel brrelex12 simpld ) CDABCEFAGHBGHABCIJ $.

  $( A true binary relation on a relation implies the second argument is a set.
     (This is a property of our ordered pair definition.)  (Contributed by
     Mario Carneiro, 26-Apr-2015.) $)
  brrelex2 $p |- ( ( Rel R /\ A R B ) -> B e. _V ) $=
    ( wrel wbr wa cvv wcel brrelex12 simprd ) CDABCEFAGHBGHABCIJ $.

  ${
    brrelexi.1 $e |- Rel R $.
    $( Two classes that are related by a binary relation are sets.  (An
       artifact of our ordered pair definition.)  (Contributed by BJ,
       3-Oct-2022.) $)
    brrelex12i $p |- ( A R B -> ( A e. _V /\ B e. _V ) ) $=
      ( wrel wbr cvv wcel wa brrelex12 mpan ) CEABCFAGHBGHIDABCJK $.

    $( The first argument of a binary relation exists.  (An artifact of our
       ordered pair definition.)  (Contributed by NM, 4-Jun-1998.) $)
    brrelex1i $p |- ( A R B -> A e. _V ) $=
      ( wrel wbr cvv wcel brrelex1 mpan ) CEABCFAGHDABCIJ $.

    $( The second argument of a binary relation exists.  (An artifact of our
       ordered pair definition.)  (Contributed by Mario Carneiro,
       26-Apr-2015.) $)
    brrelex2i $p |- ( A R B -> B e. _V ) $=
      ( wrel wbr cvv wcel brrelex2 mpan ) CEABCFBGHDABCIJ $.
  $}

  ${
    nprrel12.1 $e |- Rel R $.
    $( Proper classes are not related via any relation.  (Contributed by AV,
       29-Oct-2021.) $)
    nprrel12 $p |- ( -. ( A e. _V /\ B e. _V ) -> -. A R B ) $=
      ( wbr cvv wcel wa brrelex12i con3i ) ABCEAFGBFGHABCDIJ $.

    nprrel.2 $e |- -. A e. _V $.
    $( No proper class is related to anything via any relation.  (Contributed
       by Roy F. Longton, 30-Jul-2005.) $)
    nprrel $p |- -. A R B $=
      ( wbr cvv wcel brrelex1i mto ) ABCFAGHEABCDIJ $.
  $}

  $( A binary relation does not contain the empty set.  (Contributed by AV,
     15-Nov-2021.)  (Revised by BJ, 14-Jul-2023.) $)
  0nelrel0 $p |- ( Rel R -> -. (/) e. R ) $=
    ( wrel cvv cxp c0 wss df-rel biimpi wcel wn 0nelxp a1i ssneldd ) ABZACCDZEN
    AOFAGHEOIJNCCKLM $.

  $( A binary relation does not contain the empty set.  (Contributed by AV,
     15-Nov-2021.) $)
  0nelrel $p |- ( Rel R -> (/) e/ R ) $=
    ( wrel c0 wcel wn wnel 0nelrel0 df-nel sylibr ) ABCADECAFAGCAHI $.

  ${
    $d x y A $.  $d x y B $.
    $( Representation of a constant function using the mapping operation.
       (Note that ` x ` cannot appear free in ` B ` .)  (Contributed by NM,
       12-Oct-1999.)  (Revised by Mario Carneiro, 16-Nov-2013.) $)
    fconstmpt $p |- ( A X. { B } ) = ( x e. A |-> B ) $=
      ( vy cv wcel csn wa copab wceq cxp cmpt velsn anbi2i opabbii df-xp df-mpt
      3eqtr4i ) AEBFZDEZCGZFZHZADISTCJZHZADIBUAKABCLUCUEADUBUDSDCMNOADBUAPADBCQ
      R $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x y z C $.  $d x y z R $.
    vtoclr.1 $e |- Rel R $.
    vtoclr.2 $e |- ( ( x R y /\ y R z ) -> x R z ) $.
    $( Variable to class conversion of transitive relation.  (Contributed by
       NM, 9-Jun-1998.)  (Revised by Mario Carneiro, 26-Apr-2015.) $)
    vtoclr $p |- ( ( A R B /\ B R C ) -> A R C ) $=
      ( wbr wa wi cvv wcel cv wceq breq1 imbi12d imbi2d breq2 brrelex12i anbi1d
      brrelex2i anbi12d imbi1d anbi2d vtoclg vtocl2g syl2im imp pm2.43i ) DEGJZ
      EFGJZKZDFGJZULUMUNUOLZULDMNEMNKUMFMNZUPDEGHUAEFGHUCUQAOZBOZGJZUSFGJZKZURF
      GJZLZLUQDUSGJZVAKZUOLZLUQUPLABDEMMURDPZVDVGUQVHVBVFVCUOVHUTVEVAURDUSGQUBU
      RDFGQRSUSEPZVGUPUQVIVFUNUOVIVEULVAUMUSEDGTUSEFGQUDUESUTUSCOZGJZKZURVJGJZL
      VDCFMVJFPZVLVBVMVCVNVKVAUTVJFUSGTUFVJFURGTRIUGUHUIUJUK $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.  $d x D $.
    $( Justification theorem for an ordered pair definition that works for any
       classes, including proper classes.  This is a possible definition
       implied by the footnote in [Jech] p. 78, which says, "The sophisticated
       reader will not object to our use of a pair of classes."  (Contributed
       by NM, 28-Sep-2003.) $)
    opthprc $p |- ( ( ( A X. { (/) } ) u. ( B X. { { (/) } } ) ) =
                    ( ( C X. { (/) } ) u. ( D X. { { (/) } } ) )
                  <-> ( A = C /\ B = D ) ) $=
      ( vx c0 csn cxp cun wceq wa wcel wo opelxp mpbiran2 bianfi bitr4i orbi12i
      elun 3bitr4ri cv cop eleq2 0ex snid 0nep0 elsn nemtbir 3bitr4g eqrdv snex
      biorfi eqcom bitri wn wb biorf ax-mp jca xpeq1 uneq12 syl2an impbii ) AFG
      ZHZBVDGZHZIZCVDHZDVFHZIZJZACJZBDJZKVLVMVNVLEACVLEUAZFUBZVHLZVPVKLZVOALZVO
      CLZVHVKVPUCVPVELZVPVGLZMVSFVFLZMVQVSWAVSWBWCWAVSFVDLZFUDUEZVOFAVDNOWBVOBL
      ZWCKWCVOFBVFNWCWFWCFVDUFFVDUDUGUHZPQRVPVEVGSWCVSWGULTVPVILZVPVJLZMVTWCMVR
      VTWHVTWIWCWHVTWDWEVOFCVDNOWIVODLZWCKWCVOFDVFNWCWJWGPQRVPVIVJSWCVTWGULTUIU
      JVLEBDVLVOVDUBZVHLZWKVKLZWFWJVHVKWKUCWKVELZWKVGLZMVDVDLZWFMZWLWFWNWPWOWFW
      NVSWPKWPVOVDAVDNWPVSWPFVDUFWPVDFJFVDJVDFFUKZUGVDFUMUNUHZPQWOWFVDVFLZVDWRU
      EZVOVDBVFNORWKVEVGSWPUOZWFWQUPWSWPWFUQURTWKVILZWKVJLZMWPWJMZWMWJXCWPXDWJX
      CVTWPKWPVOVDCVDNWPVTWSPQXDWJWTXAVOVDDVFNORWKVIVJSXBWJXEUPWSWPWJUQURTUIUJU
      SVMVEVIJVGVJJVLVNACVDUTBDVFUTVEVIVGVJVAVBVC $.
  $}

  ${
    brel.1 $e |- R C_ ( C X. D ) $.
    $( Two things in a binary relation belong to the relation's domain.
       (Contributed by NM, 17-May-1996.)  (Revised by Mario Carneiro,
       26-Apr-2015.) $)
    brel $p |- ( A R B -> ( A e. C /\ B e. D ) ) $=
      ( wbr cxp wcel wa ssbri brxp sylib ) ABEGABCDHZGACIBDIJENABFKABCDLM $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.
    $( Membership in a Cartesian product.  (Contributed by NM, 5-Mar-1995.) $)
    elxp3 $p |- ( A e. ( B X. C ) <->
            E. x E. y ( <. x , y >. = A /\ <. x , y >. e. ( B X. C ) ) ) $=
      ( cxp wcel cv cop wceq wa wex elxp eqcom opelxp anbi12i 2exbii bitr4i ) C
      DEFZGCAHZBHZIZJZTDGUAEGKZKZBLALUBCJZUBSGZKZBLALABCDEMUHUEABUFUCUGUDUBCNTU
      ADEOPQR $.
  $}

  ${
    $d y z A $.  $d y z B $.  $d y z C $.  $d x y z $.
    $( Membership in a union of Cartesian products.  (Contributed by Mario
       Carneiro, 29-Dec-2014.)  (Revised by Mario Carneiro, 1-Jan-2017.) $)
    opeliunxp $p |- ( <. x , C >. e. U_ x e. A ( { x } X. B ) <->
                     ( x e. A /\ C e. B ) ) $=
      ( vy vz cv cop csn cxp ciun wcel wrex wa wceq eleq2d anbi12d bitri 3bitri
      wex cab wsb csb df-iun eleq2i opex nfv nfs1v nfcv nfcsb1v nfxp nfcri nfan
      df-rex sbequ12 csbeq1a xpeq12d cbvexv1 anbi2d exbidv syl5bb opelxp anbi2i
      sneq eleq1 elab an12 velsn equcom anbi1i sbequ12r equcoms eqcomd equsexvw
      exbii ) AGZDHZABVPIZCJZKZLVQEGZVSLZABMZEUAZLVPBLZAFUBZVQFGZIZAWGCUCZJZLZN
      ZFTZWEDCLZNZVTWDVQAEBVSUDUEWCWMEVQVPDUFWCWFWAWJLZNZFTZWAVQOZWMWCWEWBNZATW
      RWBABUNWTWQAFWTFUGWFWPAWEAFUHAEWJAWHWIAWHUIAWGCUJUKULUMVPWGOZWEWFWBWPWEAF
      UOXAVSWJWAXAVRWHCWIVPWGVDAWGCUPZUQPQURRWSWQWLFWSWPWKWFWAVQWJVEUSUTVAVFWMW
      GVPOZWFDWILZNZNZFTWOWLXFFWLWFVPWHLZXDNZNXGXENXFWKXHWFVPDWHWIVBVCWFXGXDVGX
      GXCXEXGXAXCAWGVHAFVIRVJSVOXEWOFAXCWFWEXDWNWEFAVKXCWICDXCCWICWIOAFXBVLVMPQ
      VNRS $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.
    $( Distributive law for Cartesian product over union.  Theorem 103 of
       [Suppes] p. 52.  (Contributed by NM, 12-Aug-2004.) $)
    xpundi $p |- ( A X. ( B u. C ) ) = ( ( A X. B ) u. ( A X. C ) ) $=
      ( vx vy cun cxp cv wcel wa copab df-xp uneq12i wo elun andi bitri opabbii
      anbi2i eqtr4i unopab ) ABCFZGDHAIZEHZUBIZJZDEKZABGZACGZFZDEAUBLUJUCUDBIZJ
      ZDEKZUCUDCIZJZDEKZFZUGUHUMUIUPDEABLDEACLMUGULUONZDEKUQUFURDEUFUCUKUNNZJUR
      UEUSUCUDBCOSUCUKUNPQRULUODEUATTT $.

    $( Distributive law for Cartesian product over union.  Similar to Theorem
       103 of [Suppes] p. 52.  (Contributed by NM, 30-Sep-2002.) $)
    xpundir $p |- ( ( A u. B ) X. C ) = ( ( A X. C ) u. ( B X. C ) ) $=
      ( vx vy cun cxp cv wcel wa copab df-xp uneq12i wo elun anbi1i andir bitri
      opabbii eqtr4i unopab ) ABFZCGDHZUBIZEHCIZJZDEKZACGZBCGZFZDEUBCLUJUCAIZUE
      JZDEKZUCBIZUEJZDEKZFZUGUHUMUIUPDEACLDEBCLMUGULUONZDEKUQUFURDEUFUKUNNZUEJU
      RUDUSUEUCABOPUKUNUEQRSULUODEUATTT $.
  $}

  ${
    $d w y z A $.  $d w y z B $.  $d w x y z C $.
    $( Distributive law for Cartesian product over indexed union.  (Contributed
       by Mario Carneiro, 27-Apr-2014.) $)
    xpiundi $p |- ( C X. U_ x e. A B ) = U_ x e. A ( C X. B ) $=
      ( vz vw vy ciun cxp cv wrex wcel wa wex eliun exbii df-rex rexbii 3bitr4i
      elxp2 cop wceq rexcom anbi1i rexcom4 r19.41v 3bitri eqriv ) EDABCHZIZABDC
      IZHZEJZFJGJZUAUBZGUIKZFDKZUMUKLZABKZUMUJLUMULLUOGCKZABKZFDKUTFDKZABKUQUSU
      TFADBUCUPVAFDUNUILZUOMZGNUNCLZABKZUOMZGNZUPVAVDVGGVCVFUOAUNBCOUDPUOGUIQVA
      VEUOMZGNZABKVIABKZGNVHUTVJABUOGCQRVIAGBUEVKVGGVEUOABUFPUGSRURVBABFGUMDCTR
      SFGUMDUITAUMBUKOSUH $.

    $( Distributive law for Cartesian product over indexed union.  (Contributed
       by Mario Carneiro, 27-Apr-2014.) $)
    xpiundir $p |- ( U_ x e. A B X. C ) = U_ x e. A ( B X. C ) $=
      ( vz vy vw ciun cxp cv cop wrex wcel wa df-rex rexbii eliun elxp2 3bitr4i
      wex wceq rexcom4 anbi1i r19.41v bitr4i exbii 3bitr4ri eqriv ) EABCHZDIZAB
      CDIZHZEJZFJZGJKUAGDLZFUILZUMUKMZABLZUMUJMUMULMUNUIMZUONZFTZUOFCLZABLZUPUR
      UNCMZUONZFTZABLVEABLZFTVCVAVEAFBUBVBVFABUOFCOPUTVGFUTVDABLZUONVGUSVHUOAUN
      BCQUCVDUOABUDUEUFUGUOFUIOUQVBABFGUMCDRPSFGUMUIDRAUMBUKQSUH $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Membership in a union of Cartesian products when the second factor is
       constant.  (Contributed by Mario Carneiro, 29-Dec-2014.) $)
    iunxpconst $p |- U_ x e. A ( { x } X. B ) = ( A X. B ) $=
      ( cv csn ciun cxp xpiundir iunid xpeq1i eqtr3i ) ABADEZFZCGABLCGFBCGABLCH
      MBCABIJK $.
  $}

  $( The Cartesian product of two unions.  (Contributed by NM, 12-Aug-2004.) $)
  xpun $p |- ( ( A u. B ) X. ( C u. D ) ) =
            ( ( ( A X. C ) u. ( A X. D ) ) u. ( ( B X. C ) u. ( B X. D ) ) ) $=
    ( cun cxp xpundi xpundir uneq12i un4 3eqtri ) ABEZCDEFLCFZLDFZEACFZBCFZEZAD
    FZBDFZEZEOREPSEELCDGMQNTABCHABDHIOPRSJK $.

  ${
    $d w x y z A $.
    $( Membership in universal class of ordered pairs.  (Contributed by NM,
       4-Jul-1994.) $)
    elvv $p |- ( A e. ( _V X. _V ) <-> E. x E. y A = <. x , y >. ) $=
      ( cvv cxp wcel cv cop wceq wa wex elxp vex pm3.2i biantru 2exbii bitr4i )
      CDDEFCAGZBGZHIZRDFZSDFZJZJZBKAKTBKAKABCDDLTUDABUCTUAUBAMBMNOPQ $.

    $( Membership in universal class of ordered triples.  (Contributed by NM,
       17-Dec-2008.) $)
    elvvv $p |- ( A e. ( ( _V X. _V ) X. _V )
                 <-> E. x E. y E. z A = <. <. x , y >. , z >. ) $=
      ( vw cvv cxp wcel cv cop wceq wa wex elxp ancom 2exbii 19.42vv elvv bitri
      3bitr2i anbi2i vex biantru anass 3bitrri exrot4 excom opex eqeq2d ceqsexv
      opeq1 exbii ) DFFGZFGHDEIZCIZJZKZUNUMHZUOFHZLLZCMEMZDAIZBIZJZUOJZKZCMZBMA
      MZECDUMFNVAUNVDKZUQLZBMAMZCMEMVJCMEMZBMAMVHUTVKECVKUQVILZBMAMZUQURLZUSLZU
      TVJVMABVIUQOPVNUQVIBMAMZLVOVPUQVIABQURVQUQABUNRUAUSVOCUBUCTUQURUSUDUEPVJA
      BECUFVLVGABVLVJEMZCMVGVJECUGVRVFCUQVFEVDVBVCUHVIUPVEDUNVDUOUKUIUJULSPTS
      $.

    $( An ordered pair contains its union.  (Contributed by NM,
       16-Sep-2006.) $)
    elvvuni $p |- ( A e. ( _V X. _V ) -> U. A e. A ) $=
      ( vx vy cvv cxp wcel cv cop wceq wex cuni elvv cpr vex uniop opi2 eqeltri
      unieq id eleq12d mpbiri exlimivv sylbi ) ADDEFABGZCGZHZIZCJBJAKZAFZBCALUG
      UIBCUGUIUFKZUFFUJUDUEMUFUDUEBNZCNZOUDUEUKULPQUGUHUJAUFAUFRUGSTUAUBUC $.
  $}

  $( Intersection with cross product binary relation.  (Contributed by NM,
     3-Mar-2007.)  (Revised by Mario Carneiro, 26-Apr-2015.)  Group conjuncts
     and avoid ~ df-3an .  (Revised by Peter Mazsa, 18-Sep-2022.) $)
  brinxp2 $p |- ( C ( R i^i ( A X. B ) ) D <->
                ( ( C e. A /\ D e. B ) /\ C R D ) ) $=
    ( cxp cin wbr wa wcel brin ancom brxp anbi1i 3bitri ) CDEABFZGHCDEHZCDPHZIR
    QICAJDBJIZQICDEPKQRLRSQCDABMNO $.

  $( Obsolete version of ~ brinxp2 as of 18-Sep-2022.  (Contributed by NM,
     3-Mar-2007.)  (Revised by Mario Carneiro, 26-Apr-2015.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  brinxp2OLD $p |- ( A ( R i^i ( C X. D ) ) B <->
                ( A e. C /\ B e. D /\ A R B ) ) $=
    ( cxp cin wbr wa wcel w3a brin ancom brxp anbi1i df-3an bitr4i 3bitri ) ABE
    CDFZGHABEHZABSHZIUATIZACJZBDJZTKZABESLTUAMUBUCUDIZTIUEUAUFTABCDNOUCUDTPQR
    $.

  $( Intersection of binary relation with Cartesian product.  (Contributed by
     NM, 9-Mar-1997.) $)
  brinxp $p |- ( ( A e. C /\ B e. D ) ->
               ( A R B <-> A ( R i^i ( C X. D ) ) B ) ) $=
    ( cxp cin wbr wcel wa brinxp2 baibr ) ABECDFGHACIBDIJABEHCDABEKL $.

  $( Ordered pair element in an intersection with Cartesian product.
     (Contributed by Peter Mazsa, 21-Jul-2019.) $)
  opelinxp $p |- ( <. C , D >. e. ( R i^i ( A X. B ) ) <->
                   ( ( C e. A /\ D e. B ) /\ <. C , D >. e. R ) ) $=
    ( cxp cin wbr wcel wa cop brinxp2 df-br anbi2i 3bitr3i ) CDEABFGZHCAIDBIJZC
    DEHZJCDKZPIQSEIZJABCDELCDPMRTQCDEMNO $.

  ${
    $d x y z A $.  $d x y z R $.
    $( Intersection of partial order with Cartesian product of its field.
       (Contributed by Mario Carneiro, 10-Jul-2014.) $)
    poinxp $p |- ( R Po A <-> ( R i^i ( A X. A ) ) Po A ) $=
      ( vx vy vz cv wbr wn wa wi wral cxp cin wpo wcel wb brinxp ralbidva df-po
      anbi12d anidms ad2antrr notbid adantll adantlr imbi12d ralbiia 3bitr4i
      adantr ) CFZUJBGZHZUJDFZBGZUMEFZBGZIZUJUOBGZJZIZEAKZDAKZCAKUJUJBAALMZGZHZ
      UJUMVCGZUMUOVCGZIZUJUOVCGZJZIZEAKZDAKZCAKABNAVCNVBVMCAUJAOZVAVLDAVNUMAOZI
      ZUTVKEAVPUOAOZIZULVEUSVJVRUKVDVNUKVDPZVOVQVNVSUJUJAABQUAUBUCVRUQVHURVIVRU
      NVFUPVGVPUNVFPVQUJUMAABQUIVOVQUPVGPVNUMUOAABQUDTVNVQURVIPVOUJUOAABQUEUFTR
      RUGCDEABSCDEAVCSUH $.

    $( Intersection of total order with Cartesian product of its field.
       (Contributed by Mario Carneiro, 10-Jul-2014.) $)
    soinxp $p |- ( R Or A <-> ( R i^i ( A X. A ) ) Or A ) $=
      ( vx vy wpo cv wbr weq w3o wral wa cxp cin poinxp wcel brinxp biidd df-so
      wor wb ancoms 3orbi123d ralbidva ralbiia anbi12i 3bitr4i ) ABEZCFZDFZBGZC
      DHZUIUHBGZIZDAJZCAJZKABAALMZEZUHUIUPGZUKUIUHUPGZIZDAJZCAJZKABSAUPSUGUQUOV
      BABNUNVACAUHAOZUMUTDAVCUIAOZKZUJURUKUKULUSUHUIAABPVEUKQVDVCULUSTUIUHAABPU
      AUBUCUDUECDABRCDAUPRUF $.

    $( Intersection of well-founded relation with Cartesian product of its
       field.  (Contributed by Mario Carneiro, 10-Jul-2014.) $)
    frinxp $p |- ( R Fr A <-> ( R i^i ( A X. A ) ) Fr A ) $=
      ( vz vy vx cv wss c0 wa wbr wn wral wrex wi wal wfr wb wcel ssel df-fr
      wne cxp cin anim12d brinxp ancoms notbid ralbidva rexbidva adantr pm5.74i
      syl6 impl albii 3bitr4i ) CFZAGZUPHUAZIZDFZEFZBJZKZDUPLZEUPMZNZCOUSUTVABA
      AUBUCZJZKZDUPLZEUPMZNZCOABPAVGPVFVLCUSVEVKUQVEVKQURUQVDVJEUPUQVAUPRZIZVCV
      IDUPVNUTUPRZIVBVHUQVMVOVBVHQZUQVMVOIVAARZUTARZIVPUQVMVQVOVRUPAVASUPAUTSUD
      VRVQVPUTVAAABUEUFULUMUGUHUIUJUKUNCEDABTCEDAVGTUO $.

    $( Intersection of set-like relation with Cartesian product of its field.
       (Contributed by Mario Carneiro, 22-Jun-2015.) $)
    seinxp $p |- ( R Se A <-> ( R i^i ( A X. A ) ) Se A ) $=
      ( vy vx cv wbr crab cvv wcel cxp cin wse wb brinxp ancoms rabbidva eleq1d
      wral ralbiia df-se 3bitr4i ) CEZDEZBFZCAGZHIZDARUBUCBAAJKZFZCAGZHIZDARABL
      AUGLUFUJDAUCAIZUEUIHUKUDUHCAUBAIUKUDUHMUBUCAABNOPQSDCABTDCAUGTUA $.

    $( Intersection of well-ordering with Cartesian product of its field.
       (Contributed by NM, 9-Mar-1997.)  (Revised by Mario Carneiro,
       10-Jul-2014.) $)
    weinxp $p |- ( R We A <-> ( R i^i ( A X. A ) ) We A ) $=
      ( wfr wor wa cxp cin wwe frinxp soinxp anbi12i df-we 3bitr4i ) ABCZABDZEA
      BAAFGZCZAPDZEABHAPHNQORABIABJKABLAPLM $.
  $}

  ${
    $d x y z A $.  $d x y z R $.
    $( Partial ordering of a singleton.  (Contributed by NM, 27-Apr-2009.)
       (Revised by Mario Carneiro, 23-Apr-2015.) $)
    posn $p |- ( Rel R -> ( R Po { A } <-> -. A R A ) ) $=
      ( vx vy vz cvv wpo wbr wn wb wa c0 wceq cv wi breq2 anbi2d ralsng ralbidv
      wral wrel wcel csn po0 snprc poeq2 mpbiri adantl brrelex1 stoic1a 2thd ex
      sylbi df-po imbi12d simpl syl5ib bicomd bitrd breq12 anidms notbid syl5bb
      biantrud pm2.61d2 ) BUAZAFUBZAUCZBGZAABHZIZJZVFVGIZVLVFVMKVIVKVMVIVFVMVIL
      BGZBUDVMVHLMVIVNJAUEVHLBUFUMUGUHVFVJVGAABUIUJUKULVICNZVOBHZIZVODNZBHZVREN
      ZBHZKZVOVTBHZOZKZEVHTZDVHTZCVHTZVGVKCDEVHBUNVGWHVQCVHTVKVGWGVQCVHVGWGVQVS
      VRABHZKZVOABHZOZKZDVHTVQVGWFWMDVHWEWMEAFVTAMZWDWLVQWNWBWJWCWKWNWAWIVSVTAV
      RBPQVTAVOBPUOQRSWMVQDAFVRAMZVQWMWOWLVQWJVSWOWKVSWIUPVRAVOBPUQVDURRUSSVQVK
      CAFVOAMZVPVJWPVPVJJVOAVOABUTVAVBRUSVCVE $.

    $( Strict ordering on a singleton.  (Contributed by Mario Carneiro,
       28-Dec-2014.) $)
    sosn $p |- ( Rel R -> ( R Or { A } <-> -. A R A ) ) $=
      ( vx vy csn wor wpo wrel wbr wn cv weq wral wcel wa elsni eqcomd sylan9eq
      w3o 3mix2d rgen2 df-so mpbiran2 posn syl5bb ) AEZBFZUFBGZBHAABIJUGUHCKZDK
      ZBIZCDLZUJUIBIZSZDUFMCUFMUNCDUFUFUIUFNZUJUFNZOULUKUMUOUPUIAUJUIAPUPUJAUJA
      PQRTUACDUFBUBUCABUDUE $.

    $( Founded relation on a singleton.  (Contributed by Mario Carneiro,
       28-Dec-2014.)  (Revised by Mario Carneiro, 23-Apr-2015.) $)
    frsn $p |- ( Rel R -> ( R Fr { A } <-> -. A R A ) ) $=
      ( vz vy vx cvv wfr wbr wn wa c0 wceq adantl cv wral wrex wne wi wal imp
      wrel wcel csn wb snprc fr0 freq2 mpbiri sylbi brrelex1 stoic1a 2thd df-fr
      ex wss wo sssn neor sylbb eqimss snnzg neeq1 syl5ibrcom jca imbi1d albidv
      impbida snex raleq rexeqbi1dv ceqsalv syl6bb syl5bb notbid ralbidv rexsng
      breq2 breq1 ralsng 3bitrd pm2.61d2 ) BUAZAFUBZAUCZBGZAABHZIZUDZWBWCIZWHWB
      WIJWEWGWIWEWBWIWDKLZWEAUEWJWEKBGBUFWDKBUGUHUIMWBWFWCAABUJUKULUNWCWECNZDNZ
      BHZIZCWDOZDWDPZWKABHZIZCWDOZWGWEENZWDUOZWTKQZJZWNCWTOZDWTPZRZESZWCWPEDCWD
      BUMWCXGWTWDLZXERZESWPWCXFXIEWCXCXHXEWCXCXHXCXHWCXAXBXHXAWTKLXHUPXBXHRWTAU
      QXHWTKURUSTMWCXHJXAXBXHXAWCWTWDUTMWCXHXBWCXBXHWDKQAFVAWTWDKVBVCTVDVGVEVFX
      EWPEWDAVHXDWODWTWDWNCWTWDVIVJVKVLVMWOWSDAFWLALZWNWRCWDXJWMWQWLAWKBVQVNVOV
      PWRWGCAFWKALWQWFWKAABVRVNVSVTWA $.

    $( Well-ordering of a singleton.  (Contributed by Mario Carneiro,
       28-Dec-2014.) $)
    wesn $p |- ( Rel R -> ( R We { A } <-> -. A R A ) ) $=
      ( wrel csn wfr wor wa wbr wn wwe frsn sosn anbi12d df-we pm4.24 3bitr4g )
      BCZADZBEZRBFZGAABHIZUAGRBJUAQSUATUAABKABLMRBNUAOP $.
  $}

  ${
    $d A x y $.
    $( Membership in an ordered pair class builder implies membership in a
       Cartesian product.  (Contributed by Alexander van der Vekens,
       23-Jun-2018.) $)
    elopaelxp $p |- ( A e. { <. x , y >. | ps } -> A e. ( _V X. _V ) ) $=
      ( cv cop wceq wa wex copab wcel cvv cxp simpl 2eximi elopab elvv 3imtr4i
      ) DBECEFGZAHZCIBISCIBIDABCJKDLLMKTSBCSANOABCDPBCDQR $.
  $}

  ${
    $d A x y $.  $d B x y $.
    bropaex12.1 $e |- R = { <. x , y >. | ps } $.
    $( Two classes related by an ordered pair class builder are sets.
       (Contributed by AV, 21-Jan-2020.) $)
    bropaex12 $p |- ( A R B -> ( A e. _V /\ B e. _V ) ) $=
      ( wbr cop cvv cxp wcel wa copab df-br eleq2i bitri elopaelxp sylbi opelxp
      sylib ) DEFHZDEIZJJKLZDJLEJLMUBUCABCNZLZUDUBUCFLUFDEFOFUEUCGPQABCUCRSDEJJ
      TUA $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( An abstraction relation is a subset of a related Cartesian product.
       (Contributed by NM, 16-Jul-1995.) $)
    opabssxp $p |- { <. x , y >. | ( ( x e. A /\ y e. B ) /\ ph ) }
                   C_ ( A X. B ) $=
      ( cv wcel wa copab cxp simpl ssopab2i df-xp sseqtr4i ) BFDGCFEGHZAHZBCIOB
      CIDEJPOBCOAKLBCDEMN $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.  $d x y D $.  $d x y ps $.
    brab2a.1 $e |- ( ( x = A /\ y = B ) -> ( ph <-> ps ) ) $.
    brab2a.2 $e |- R = { <. x , y >. | ( ( x e. C /\ y e. D ) /\ ph ) } $.
    $( The law of concretion for a binary relation.  Ordered pair membership in
       an ordered pair class abstraction.  (Contributed by Mario Carneiro,
       28-Apr-2015.) $)
    brab2a $p |- ( A R B <-> ( ( A e. C /\ B e. D ) /\ ps ) ) $=
      ( wbr wcel wa cv copab cxp opabssxp eqsstri brel eleq2i opelopab2a syl5bb
      cop df-br bitri biadanii ) EFILZEGMFHMNZBEFGHIICOGMDOHMNANCDPZGHQKACDGHRS
      TUHEFUDZUJMZUIBUHUKIMULEFIUEIUJUKKUAUFABCDEFGHJUBUCUG $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.  $d x y ps $.
    optocl.1 $e |- D = ( B X. C ) $.
    optocl.2 $e |- ( <. x , y >. = A -> ( ph <-> ps ) ) $.
    optocl.3 $e |- ( ( x e. B /\ y e. C ) -> ph ) $.
    $( Implicit substitution of class for ordered pair.  (Contributed by NM,
       5-Mar-1995.) $)
    optocl $p |- ( A e. D -> ps ) $=
      ( cxp wcel cv cop wceq wa wex elxp3 sylbi opelxp syl5ib exlimivv eleq2s
      imp ) BEFGLZHEUFMCNZDNZOZEPZUIUFMZQZDRCRBCDEFGSULBCDUJUKBUKAUJBUKUGFMUHGM
      QAUGUHFGUAKTJUBUEUCTIUD $.
  $}

  ${
    $d x y z w A $.  $d z w B $.  $d x y z w C $.  $d x y z w D $.
    $d x y ps $.  $d z w ch $.  $d z w R $.
    2optocl.1 $e |- R = ( C X. D ) $.
    2optocl.2 $e |- ( <. x , y >. = A -> ( ph <-> ps ) ) $.
    2optocl.3 $e |- ( <. z , w >. = B -> ( ps <-> ch ) ) $.
    2optocl.4 $e |- ( ( ( x e. C /\ y e. D ) /\ ( z e. C /\ w e. D ) ) ->
                   ph ) $.
    $( Implicit substitution of classes for ordered pairs.  (Contributed by NM,
       12-Mar-1995.) $)
    2optocl $p |- ( ( A e. R /\ B e. R ) -> ch ) $=
      ( wcel wi cv cop wceq imbi2d wa ex optocl com12 impcom ) ILQHLQZCUHBRUHCR
      FGIJKLMFSZGSZTIUABCUHOUBUHUIJQUJKQUCZBUKARUKBRDEHJKLMDSZESZTHUAABUKNUBULJ
      QUMKQUCUKAPUDUEUFUEUG $.
  $}

  ${
    $d x y z w v u A $.  $d z w v u B $.  $d v u C $.  $d x y z w v u D $.
    $d x y z w v u F $.  $d z w v u R $.  $d x y ps $.  $d z w ch $.
    $d v u th $.
    3optocl.1 $e |- R = ( D X. F ) $.
    3optocl.2 $e |- ( <. x , y >. = A -> ( ph <-> ps ) ) $.
    3optocl.3 $e |- ( <. z , w >. = B -> ( ps <-> ch ) ) $.
    3optocl.4 $e |- ( <. v , u >. = C -> ( ch <-> th ) ) $.
    3optocl.5 $e |- ( ( ( x e. D /\ y e. F ) /\ ( z e. D /\ w e. F )
                    /\ ( v e. D /\ u e. F ) ) -> ph ) $.
    $( Implicit substitution of classes for ordered pairs.  (Contributed by NM,
       12-Mar-1995.) $)
    3optocl $p |- ( ( A e. R /\ B e. R /\ C e. R ) -> th ) $=
      ( wcel wa wi cv cop wceq imbi2d 3expia 2optocl com12 optocl impcom 3impa
      ) KOUBZLOUBZMOUBZDUQUOUPUCZDURCUDURDUDIJMNPOQIUEZJUEZUFMUGCDURTUHURUSNUBU
      TPUBUCZCVAAUDVABUDVACUDEFGHKLNPOQEUEZFUEZUFKUGABVARUHGUEZHUEZUFLUGBCVASUH
      VBNUBVCPUBUCVDNUBVEPUBUCVAAUAUIUJUKULUMUN $.
  $}

  ${
    $d x y z w v u A $.  $d x y z w v u B $.  $d x y z w v u C $.
    $d x y z w v u D $.  $d x y z w v u S $.  $d x y ph $.  $d z w v u ps $.
    opbrop.1 $e |- ( ( ( z = A /\ w = B ) /\ ( v = C /\ u = D ) ) ->
                     ( ph <-> ps ) ) $.
    opbrop.2 $e |- R = { <. x , y >. | ( ( x e. ( S X. S ) /\
                      y e. ( S X. S ) ) /\
                      E. z E. w E. v E. u ( ( x = <. z , w >. /\
                      y = <. v , u >. ) /\ ph ) ) } $.
    $( Ordered pair membership in a relation.  Special case.  (Contributed by
       NM, 5-Aug-1995.) $)
    opbrop $p |- ( ( ( A e. S /\ B e. S ) /\ ( C e. S /\ D e. S ) ) ->
                   ( <. A , B >. R <. C , D >. <-> ps ) ) $=
      ( wcel wa cv wex cop wbr cxp opelxpi anim12i wceq opex eleq1 anbi1d eqeq1
      4exbidv anbi12d anbi2d brab copsex4g syl5bb mpbirand ) INQJNQRZKNQLNQRZRZ
      IJUAZKLUAZMUBZVANNUCZQZVBVDQZRZBURVEUSVFIJNNUDKLNNUDUEVCVGVAESFSUAZUFZVBG
      SHSUAZUFZRZARZHTGTFTETZRZUTVGBRCSZVDQZDSZVDQZRZVPVHUFZVRVJUFZRZARZHTGTFTE
      TZRVEVSRZVIWBRZARZHTGTFTETZRVOCDVAVBMIJUGKLUGVPVAUFZVTWFWEWIWJVQVEVSVPVAV
      DUHUIWJWDWHEFGHWJWCWGAWJWAVIWBVPVAVHUJUIUIUKULVRVBUFZWFVGWIVNWKVSVFVEVRVB
      VDUHUMWKWHVMEFGHWKWGVLAWKWBVKVIVRVBVJUJUMUIUKULPUNUTVNBVGABEFGHIJKLNNOUOU
      MUPUQ $.
  $}

  ${
    $d x y z A $.
    $( The Cartesian product with the empty set is empty.  Part of Theorem
       3.13(ii) of [Monk1] p. 37.  (Contributed by NM, 4-Jul-1994.) $)
    0xp $p |- ( (/) X. A ) = (/) $=
      ( vz vx vy c0 cxp cv wcel cop wceq wa wex noel simprl mto elxp mtbir nel0
      nex ) BEAFZBGZTHUACGZDGZIJZUBEHZUCAHZKKZDLZCLUHCUGDUGUEUBMUDUEUFNOSSCDUAE
      APQR $.
  $}

  ${
    $d A w y z $.  $d B w y z $.  $d C w y z $.  $d w x y z $.
    $( Distribute proper substitution through the Cartesian product of two
       classes.  (Contributed by Alan Sare, 10-Nov-2012.)  (Revised by NM,
       23-Aug-2018.) $)
    csbxp $p |- [_ A / x ]_ ( B X. C ) = ( [_ A / x ]_ B X. [_ A / x ]_ C ) $=
      ( vz vw vy cv wcel wex cab csb cxp wsbc sbcex2 sbcan bitri intnand eqtri
      wa cop wceq csbab cvv wb sbcg sbcel2 anbi12i a1i anbi12d sbcex con3i noel
      wn c0 neleqtrrd 2falsed pm2.61i exbii abbii copab df-opab csbeq2i 3eqtr4i
      csbprc df-xp ) ABEHFHZGHZUAUBZVGCIZVHDIZTZTZGJZFJZEKZLZVIVGABCLZIZVHABDLZ
      IZTZTZGJZFJZEKZABCDMZLVRVTMZVQVOABNZEKWFVOAEBUCWIWEEWIVNABNZFJWEVNFABOWJW
      DFWJVMABNZGJWDVMGABOWKWCGWKVIABNZVLABNZTZWCVIVLABPBUDIZWNWCUEWOWLVIWMWBVI
      ABUDUFWMWBUEWOWMVJABNZVKABNZTWBVJVKABPWPVSWQWAABVGCUGABVHDUGUHQUIUJWOUNZW
      NWCWRWMWLWMWOVLABUKULRWRWBVIWRWAVSWRVTUOVHVHUOIUNWRVHUMUIABDVEUPRRUQURQUS
      QUSQUTSABWGVPWGVLFGVAVPFGCDVFVLFGEVBSVCWHWBFGVAWFFGVRVTVFWBFGEVBSVD $.
  $}

  $( Equality theorem for the relation predicate.  (Contributed by NM,
     1-Aug-1994.) $)
  releq $p |- ( A = B -> ( Rel A <-> Rel B ) ) $=
    ( wceq cvv cxp wss wrel sseq1 df-rel 3bitr4g ) ABCADDEZFBKFAGBGABKHAIBIJ $.

  ${
    releqi.1 $e |- A = B $.
    $( Equality inference for the relation predicate.  (Contributed by NM,
       8-Dec-2006.) $)
    releqi $p |- ( Rel A <-> Rel B ) $=
      ( wceq wrel wb releq ax-mp ) ABDAEBEFCABGH $.
  $}

  ${
    releqd.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for the relation predicate.  (Contributed by NM,
       8-Mar-2014.) $)
    releqd $p |- ( ph -> ( Rel A <-> Rel B ) ) $=
      ( wceq wrel wb releq syl ) ABCEBFCFGDBCHI $.
  $}

  ${
    nfrel.1 $e |- F/_ x A $.
    $( Bound-variable hypothesis builder for a relation.  (Contributed by NM,
       31-Jan-2004.)  (Revised by Mario Carneiro, 15-Oct-2016.) $)
    nfrel $p |- F/ x Rel A $=
      ( wrel cvv cxp wss df-rel nfcv nfss nfxfr ) BDBEEFZGABHABLCALIJK $.
  $}

  $( Distribute proper substitution through a relation predicate.  (Contributed
     by Alexander van der Vekens, 23-Jul-2017.) $)
  sbcrel $p |- ( A e. V -> ( [. A / x ]. Rel R <-> Rel [_ A / x ]_ R ) ) $=
    ( wcel cvv cxp wss wsbc sbcssg csbconstg sseq2d bitrd df-rel sbcbii 3bitr4g
    csb wrel ) BDEZCFFGZHZABIZABCQZTHZCRZABIUCRSUBUCABTQZHUDABCTDJSUFTUCABTDKLM
    UEUAABCNOUCNP $.

  $( Subclass theorem for relation predicate.  Theorem 2 of [Suppes] p. 58.
     (Contributed by NM, 15-Aug-1994.) $)
  relss $p |- ( A C_ B -> ( Rel B -> Rel A ) ) $=
    ( wss cvv cxp wrel sstr2 df-rel 3imtr4g ) ABCBDDEZCAJCBFAFABJGBHAHI $.

  ${
    $d x y z A $.  $d x y z B $.
    $( A subclass relationship depends only on a relation's ordered pairs.
       Theorem 3.2(i) of [Monk1] p. 33.  (Contributed by NM, 2-Aug-1994.)
       (Proof shortened by Andrew Salmon, 27-Aug-2011.)  Remove dependency on
       ~ ax-sep , ~ ax-nul , ~ ax-pr .  (Revised by KP, 25-Oct-2021.) $)
    ssrel $p |- ( Rel A -> ( A C_ B <->
                A. x A. y ( <. x , y >. e. A -> <. x , y >. e. B ) ) ) $=
      ( vz wrel wss cv cop wcel wi wal ssel alrimivv wceq wex cvv dfss2 eleq1
      wa cxp df-rel sylbb copab cab df-xp df-opab eqtri abeq2i simpl sylbi sylg
      2eximi imim2i imbi12d biimprcd 2alimi 19.23vv sylib com23 a2d alimdv syl5
      syl6ibr com12 impbid2 ) CFZCDGZAHZBHZIZCJZVKDJZKZBLALZVHVNABCDVKMNVOVGVHV
      OVGEHZCJZVPDJZKZELZVHVGVQVPVKOZBPAPZKZELVOVTVGVQVPQQUAZJZKZWCEVGCWDGWFELC
      UBECWDRUCWEWBVQWEWAVIQJVJQJTZTZBPAPZWBWIEWDWDWGABUDWIEUEABQQUFWGABEUGUHUI
      WHWAABWAWGUJUMUKUNULVOWCVSEVOVQWBVRVOWBVQVRVOWAVSKZBLALWBVSKVNWJABWAVSVNW
      AVQVLVRVMVPVKCSVPVKDSUOUPUQWAVSABURUSUTVAVBVCECDRVDVEVF $.

    $( Extensionality principle for relations.  Theorem 3.2(ii) of [Monk1]
       p. 33.  (Contributed by NM, 2-Aug-1994.) $)
    eqrel $p |- ( ( Rel A /\ Rel B ) -> ( A = B <->
                A. x A. y ( <. x , y >. e. A <-> <. x , y >. e. B ) ) ) $=
      ( wrel wa wss cv cop wcel wi wal wceq ssrel bi2anan9 eqss 2albiim 3bitr4g
      wb ) CEZDEZFCDGZDCGZFAHBHIZCJZUDDJZKBLALZUFUEKBLALZFCDMUEUFSBLALTUBUGUAUC
      UHABCDNABDCNOCDPUEUFABQR $.
  $}

  ${
    $d x y z A $.  $d x y z B $.  $d x y z R $.  $d x y z S $.
    $( A subclass relationship depends only on a relation's ordered pairs.
       This version of ~ ssrel is restricted to the relation's domain.
       (Contributed by Thierry Arnoux, 25-Jan-2018.) $)
    ssrel2 $p |- ( R C_ ( A X. B ) -> ( R C_ S <-> A. x e. A A. y e. B
      ( <. x , y >. e. R -> <. x , y >. e. S ) ) ) $=
      ( vz cxp wss cv cop wcel wi wral wrex wal eleq1 r19.23v bitri dfss2 sylib
      wa ssel ralrimivv wceq imbi12d biimprcd 2ralimi ralbii com23 alimdv elxp2
      a1d a2d imbi2i albii 3imtr4g com12 impbid2 ) ECDHZIZEFIZAJZBJZKZELZVEFLZM
      ZBDNACNZVBVHABCDVBVHVCCLVDDLUBEFVEUCUMUDVIVAVBVIGJZELZVJVEUEZBDOZACOZMZGP
      ZVKVJFLZMZGPVAVBVIVOVRGVIVKVNVQVIVNVKVQVIVLVRMZBDNZACNZVNVRMZVHVSABCDVLVR
      VHVLVKVFVQVGVJVEEQVJVEFQUFUGUHWAVMVRMZACNWBVTWCACVLVRBDRUIVMVRACRSUAUJUNU
      KVAVKVJUTLZMZGPVPGEUTTWEVOGWDVNVKABVJCDULUOUPSGEFTUQURUS $.
  $}

  ${
    $d x y A $.  $d x y B $.
    relssi.1 $e |- Rel A $.
    relssi.2 $e |- ( <. x , y >. e. A -> <. x , y >. e. B ) $.
    $( Inference from subclass principle for relations.  (Contributed by NM,
       31-Mar-1998.) $)
    relssi $p |- A C_ B $=
      ( wss cv cop wcel wi wal wrel wb ssrel ax-mp ax-gen mpgbir ) CDGZAHBHIZCJ
      TDJKZBLZACMSUBALNEABCDOPUABFQR $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y ph $.
    relssdv.1 $e |- ( ph -> Rel A ) $.
    relssdv.2 $e |- ( ph -> ( <. x , y >. e. A -> <. x , y >. e. B ) ) $.
    $( Deduction from subclass principle for relations.  (Contributed by NM,
       11-Sep-2004.) $)
    relssdv $p |- ( ph -> A C_ B ) $=
      ( wss cv cop wcel wi wal alrimivv wrel wb ssrel syl mpbird ) ADEHZBICIJZD
      KUAEKLZCMBMZAUBBCGNADOTUCPFBCDEQRS $.
  $}

  ${
    $d x y A $.  $d x y B $.
    eqrelriv.1 $e |- ( <. x , y >. e. A <-> <. x , y >. e. B ) $.
    $( Inference from extensionality principle for relations.  (Contributed by
       FL, 15-Oct-2012.) $)
    eqrelriv $p |- ( ( Rel A /\ Rel B ) -> A = B ) $=
      ( wrel wa wceq cv cop wcel wb wal gen2 eqrel mpbiri ) CFDFGCDHAIBIJZCKQDK
      LZBMAMRABENABCDOP $.
  $}

  ${
    $d x y A $.  $d x y B $.
    eqreliiv.1 $e |- Rel A $.
    eqreliiv.2 $e |- Rel B $.
    eqreliiv.3 $e |- ( <. x , y >. e. A <-> <. x , y >. e. B ) $.
    $( Inference from extensionality principle for relations.  (Contributed by
       NM, 17-Mar-1995.) $)
    eqrelriiv $p |- A = B $=
      ( wrel wceq eqrelriv mp2an ) CHDHCDIEFABCDGJK $.
  $}

  ${
    $d x y A $.  $d x y B $.
    eqbrriv.1 $e |- Rel A $.
    eqbrriv.2 $e |- Rel B $.
    eqbrriv.3 $e |- ( x A y <-> x B y ) $.
    $( Inference from extensionality principle for relations.  (Contributed by
       NM, 12-Dec-2006.) $)
    eqbrriv $p |- A = B $=
      ( cv wbr cop wcel df-br 3bitr3i eqrelriiv ) ABCDEFAHZBHZCIOPDIOPJZCKQDKGO
      PCLOPDLMN $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d ph x $.  $d ph y $.
    eqrelrdv.1 $e |- Rel A $.
    eqrelrdv.2 $e |- Rel B $.
    eqrelrdv.3 $e |- ( ph -> ( <. x , y >. e. A <-> <. x , y >. e. B ) ) $.
    $( Deduce equality of relations from equivalence of membership.
       (Contributed by Rodolfo Medina, 10-Oct-2010.) $)
    eqrelrdv $p |- ( ph -> A = B ) $=
      ( cv cop wcel wb wal wceq alrimivv wrel eqrel mp2an sylibr ) ABICIJZDKTEK
      LZCMBMZDENZAUABCHODPEPUCUBLFGBCDEQRS $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d ph x $.  $d ph y $.
    eqbrrdv.1 $e |- ( ph -> Rel A ) $.
    eqbrrdv.2 $e |- ( ph -> Rel B ) $.
    eqbrrdv.3 $e |- ( ph -> ( x A y <-> x B y ) ) $.
    $( Deduction from extensionality principle for relations.  (Contributed by
       Mario Carneiro, 3-Jan-2017.) $)
    eqbrrdv $p |- ( ph -> A = B ) $=
      ( wceq cv cop wcel wb wal wbr df-br 3bitr3g alrimivv wrel eqrel syl2anc
      mpbird ) ADEIZBJZCJZKZDLZUFELZMZCNBNZAUIBCAUDUEDOUDUEEOUGUHHUDUEDPUDUEEPQ
      RADSESUCUJMFGBCDETUAUB $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d ph x $.  $d ph y $.
    eqbrrdiv.1 $e |- Rel A $.
    eqbrrdiv.2 $e |- Rel B $.
    eqbrrdiv.3 $e |- ( ph -> ( x A y <-> x B y ) ) $.
    $( Deduction from extensionality principle for relations.  (Contributed by
       Rodolfo Medina, 10-Oct-2010.) $)
    eqbrrdiv $p |- ( ph -> A = B ) $=
      ( cv wbr cop wcel df-br 3bitr3g eqrelrdv ) ABCDEFGABIZCIZDJPQEJPQKZDLRELH
      PQDMPQEMNO $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d ph x $.  $d ph y $.
    eqrelrdv2.1 $e |- ( ph
       -> ( <. x , y >. e. A <-> <. x , y >. e. B ) ) $.
    $( A version of ~ eqrelrdv .  (Contributed by Rodolfo Medina,
       10-Oct-2010.) $)
    eqrelrdv2 $p |- ( ( ( Rel A /\ Rel B ) /\ ph ) -> A = B ) $=
      ( wrel wa wceq cv cop wcel wb wal alrimivv eqrel syl5ibr imp ) DGEGHZADEI
      ZATSBJCJKZDLUAELMZCNBNAUBBCFOBCDEPQR $.
  $}

  ${
    $d w x y z A $.  $d w x y z B $.
    $( A subclass relationship determined by ordered triples.  Use ~ relrelss
       to express the antecedent in terms of the relation predicate.
       (Contributed by NM, 17-Dec-2008.)  (Proof shortened by Andrew Salmon,
       27-Aug-2011.) $)
    ssrelrel $p |- ( A C_ ( ( _V X. _V ) X. _V ) -> ( A C_ B <->
                   A. x A. y A. z ( <. <. x , y >. , z >. e. A
                       -> <. <. x , y >. , z >. e. B ) ) ) $=
      ( vw cvv cxp wss cv cop wcel wi wal ssel alrimiv wex eleq1 sylib dfss2
      alrimivv wceq elvvv imbi12d biimprcd alimi 19.23v 2alimi syl5bi com23 a2d
      19.23vv alimdv 3imtr4g com12 impbid2 ) DGGHGHZIZDEIZAJBJKCJKZDLZUTELZMZCN
      ZBNANZUSVDABUSVCCDEUTOPUAVEURUSVEFJZDLZVFUQLZMZFNVGVFELZMZFNURUSVEVIVKFVE
      VGVHVJVEVHVGVJVHVFUTUBZCQZBQAQZVEVKABCVFUCVEVMVKMZBNANVNVKMVDVOABVDVLVKMZ
      CNVOVCVPCVLVKVCVLVGVAVJVBVFUTDRVFUTERUDUEUFVLVKCUGSUHVMVKABULSUIUJUKUMFDU
      QTFDETUNUOUP $.

    $( Extensionality principle for ordered triples (used by 2-place operations
       ~ df-oprab ), analogous to ~ eqrel .  Use ~ relrelss to express the
       antecedent in terms of the relation predicate.  (Contributed by NM,
       17-Dec-2008.) $)
    eqrelrel $p |- ( ( A u. B ) C_ ( ( _V X. _V ) X. _V ) -> ( A = B <->
                   A. x A. y A. z ( <. <. x , y >. , z >. e. A
                       <-> <. <. x , y >. , z >. e. B ) ) ) $=
      ( cun cvv cxp wss wa wceq cv cop wcel wb wal unss wi ssrelrel bi2anan9
      eqss 2albiim albii 19.26 bitri 3bitr4g sylbir ) DEFGGHGHZIDUHIZEUHIZJZDEK
      ZALBLMCLMZDNZUMENZOCPBPZAPZODEUHQUKDEIZEDIZJUNUORCPBPZAPZUOUNRCPBPZAPZJZU
      LUQUIURVAUJUSVCABCDESABCEDSTDEUAUQUTVBJZAPVDUPVEAUNUOBCUBUCUTVBAUDUEUFUG
      $.
  $}

  ${
    $d x y A $.
    $( A member of a relation is an ordered pair.  (Contributed by NM,
       17-Sep-2006.) $)
    elrel $p |- ( ( Rel R /\ A e. R ) -> E. x E. y A = <. x , y >. ) $=
      ( wrel wcel wa cvv cxp cop wceq wex wss df-rel biimpi sselda elvv sylib
      cv ) DEZCDFGCHHIZFCASBSJKBLALTDUACTDUAMDNOPABCQR $.
  $}

  $( The empty set is a relation.  (Contributed by NM, 26-Apr-1998.) $)
  rel0 $p |- Rel (/) $=
    ( c0 wrel cvv cxp wss 0ss df-rel mpbir ) ABACCDZEIFAGH $.

  $( The universal class is not a relation.  (Contributed by Thierry Arnoux,
     23-Jan-2022.) $)
  nrelv $p |- -. Rel _V $=
    ( cvv wrel cxp wss c0 wcel wn 0ex 0nelxp nelss mp2an df-rel mtbir ) ABAAACZ
    DZEAFENFGOGHAAIEANJKALM $.

  $( A singleton is a relation iff it is a singleton on an ordered pair.
     (Contributed by NM, 24-Sep-2013.)  (Revised by BJ, 12-Feb-2022.) $)
  relsng $p |- ( A e. V -> ( Rel { A } <-> A e. ( _V X. _V ) ) ) $=
    ( wcel cvv cxp csn wss wrel snssg df-rel syl6rbbr ) ABCADDEZCAFZLGMHALBIMJK
    $.

  $( An at-most-singleton is a relation iff it is empty (because it is a
     "singleton on a proper class") or it is a singleton of an ordered pair.
     (Contributed by BJ, 26-Feb-2023.) $)
  relsnb $p |- ( Rel { A } <-> ( -. A e. _V \/ A e. ( _V X. _V ) ) ) $=
    ( csn wrel cvv wcel wn cxp wo wi relsng biimpcd imor sylib wceq snprc releq
    c0 rel0 mpbiri sylbi ibir jaoi impbii ) ABZCZADEZFZADDGZEZHZUEUFUIIUJUFUEUI
    ADJKUFUILMUGUEUIUGUDQNZUEAOUKUEQCRUDQPSTUIUEAUHJUAUBUC $.

  $( A singleton of an ordered pair is a relation.  (Contributed by NM,
     17-May-1998.)  (Revised by BJ, 12-Feb-2022.) $)
  relsnopg $p |- ( ( A e. V /\ B e. W ) -> Rel { <. A , B >. } ) $=
    ( wcel wa cop csn wrel cvv cxp opelvvg wb opex relsng mp1i mpbird ) ACEBDEF
    ZABGZHIZSJJKEZABCDLSJETUAMRABNSJOPQ $.

  ${
    relsn.1 $e |- A e. _V $.
    $( A singleton is a relation iff it is an ordered pair.  (Contributed by
       NM, 24-Sep-2013.) $)
    relsn $p |- ( Rel { A } <-> A e. ( _V X. _V ) ) $=
      ( cvv wcel csn wrel cxp wb relsng ax-mp ) ACDAEFACCGDHBACIJ $.

    relsnop.2 $e |- B e. _V $.
    $( A singleton of an ordered pair is a relation.  (Contributed by NM,
       17-May-1998.)  (Revised by Mario Carneiro, 26-Apr-2015.) $)
    relsnop $p |- Rel { <. A , B >. } $=
      ( cvv wcel cop csn wrel relsnopg mp2an ) AEFBEFABGHICDABEEJK $.
  $}

  ${
    $d x y A $.  $d x y ph $.
    copsex2ga.1 $e |- ( A = <. x , y >. -> ( ph <-> ps ) ) $.
    $( Implicit substitution inference for ordered pairs.  Compare
       ~ copsex2ga .  (Contributed by NM, 12-Mar-2014.) $)
    copsex2gb $p |- ( E. x E. y ( A = <. x , y >. /\ ps )
         <-> ( A e. ( _V X. _V ) /\ ph ) ) $=
      ( cvv cxp wcel wa cv cop wceq elvv anbi1i 19.41vv pm5.32i 2exbii 3bitr2ri
      wex ) EGGHIZAJECKDKLMZDTCTZAJUBAJZDTCTUBBJZDTCTUAUCACDENOUBACDPUDUECDUBAB
      FQRS $.

    $( Implicit substitution inference for ordered pairs.  Compare ~ copsex2g .
       (Contributed by NM, 26-Feb-2014.)  (Proof shortened by Mario Carneiro,
       31-Aug-2015.) $)
    copsex2ga $p |- ( A e. ( V X. W )
        -> ( ph <-> E. x E. y ( A = <. x , y >. /\ ps ) ) ) $=
      ( cxp wcel cvv cv cop wceq wa wex wb xpss sseli copsex2gb baibr syl ) EFG
      IZJEKKIZJZAECLDLMNBODPCPZQUCUDEFGRSUFUEAABCDEHTUAUB $.

    $( Membership in an ordered pair class builder.  (Contributed by NM,
       25-Feb-2014.)  (Revised by Mario Carneiro, 31-Aug-2015.) $)
    elopaba $p |- ( A e. { <. x , y >. | ps } <->
            ( A e. ( _V X. _V ) /\ ph ) ) $=
      ( copab wcel cv cop wceq wa wex cvv cxp elopab copsex2gb bitri ) EBCDGHEC
      IDIJKBLDMCMENNOHALBCDEPABCDEFQR $.
  $}

  ${
    $d A x y $.  $d B x y $.
    $( A Cartesian product is included in the power of the power of the union
       of its arguments.  (Contributed by NM, 13-Sep-2006.) $)
    xpsspw $p |- ( A X. B ) C_ ~P ~P ( A u. B ) $=
      ( vx vy cxp cun cpw relxp cv wcel csn cpr wss snssi syl elpw sylibr sylib
      wa vex opelxp ssun3 snex adantr df-pr ssun4 anim12i unss syl5eqss zfpair2
      cop jca prex dfop eleq1i prss 3bitr4ri sylbi relssi ) CDABEZABFZGZGZABHCI
      ZDIZUKZUTJVDAJZVEBJZSZVFVCJZVDVEABUAVIVDKZVBJZVDVELZVBJZSZVJVIVLVNVGVLVHV
      GVKVAMZVLVGVKAMVPVDANVKABUBOZVKVAVDUCZPQUDVIVMVAMVNVIVMVKVEKZFZVAVDVEUEVI
      VPVSVAMZSVTVAMVGVPVHWAVQVHVSBMWAVEBNVSBAUFOUGVKVSVAUHRUIVMVACDUJZPQULVKVM
      LZVCJWCVBMVJVOWCVBVKVMUMPVFWCVCVDVECTDTUNUOVKVMVBVRWBUPUQRURUS $.
  $}

  $( The double class union of a Cartesian product is included in the union of
     its arguments.  (Contributed by NM, 16-Sep-2006.) $)
  unixpss $p |- U. U. ( A X. B ) C_ ( A u. B ) $=
    ( cxp cuni cun cpw xpsspw unissi unipw sseqtri ) ABCZDZDABEZFZDMLNLNFZDNKOA
    BGHNIJHMIJ $.

  $( The union of two relations is a relation.  Compare Exercise 5 of
     [TakeutiZaring] p. 25.  (Contributed by NM, 12-Aug-1994.) $)
  relun $p |- ( Rel ( A u. B ) <-> ( Rel A /\ Rel B ) ) $=
    ( cvv cxp wss wa cun wrel unss df-rel anbi12i 3bitr4ri ) ACCDZEZBMEZFABGZME
    AHZBHZFPHABMIQNROAJBJKPJL $.

  $( The intersection with a relation is a relation.  (Contributed by NM,
     16-Aug-1994.) $)
  relin1 $p |- ( Rel A -> Rel ( A i^i B ) ) $=
    ( cin wss wrel wi inss1 relss ax-mp ) ABCZADAEJEFABGJAHI $.

  $( The intersection with a relation is a relation.  (Contributed by NM,
     17-Jan-2006.) $)
  relin2 $p |- ( Rel B -> Rel ( A i^i B ) ) $=
    ( cin wss wrel wi inss2 relss ax-mp ) ABCZBDBEJEFABGJBHI $.

  $( Intersection with a Cartesian product is a relation.  (Contributed by
     Peter Mazsa, 4-Mar-2019.) $)
  relinxp $p |- Rel ( R i^i ( A X. B ) ) $=
    ( cxp wrel cin relxp relin2 ax-mp ) ABDZECJFEABGCJHI $.

  $( A difference cutting down a relation is a relation.  (Contributed by NM,
     31-Mar-1998.) $)
  reldif $p |- ( Rel A -> Rel ( A \ B ) ) $=
    ( cdif wss wrel wi difss relss ax-mp ) ABCZADAEJEFABGJAHI $.

  ${
    $d y A $.  $d y B $.  $d x y $.
    $( An indexed union is a relation iff each member of its indexed family is
       a relation.  (Contributed by NM, 19-Dec-2008.) $)
    reliun $p |- ( Rel U_ x e. A B <-> A. x e. A Rel B ) $=
      ( vy ciun wrel cv wcel wrex cab cvv cxp wss wral df-iun releqi df-rel wal
      wi 3bitri abss dfss2 bitri ralbii ralcom4 r19.23v albii bitr4i ) ABCEZFDG
      ZCHZABIZDJZFUMKKLZMZCFZABNZUIUMADBCOPUMQUOULUJUNHZSZDRZUQULDUNUAUQUKURSZD
      RZABNVAABNZDRUTUPVBABUPCUNMVBCQDCUNUBUCUDVAADBUEVCUSDUKURABUFUGTUHT $.
  $}

  $( An indexed intersection is a relation if at least one of the member of the
     indexed family is a relation.  (Contributed by NM, 8-Mar-2014.) $)
  reliin $p |- ( E. x e. A Rel B -> Rel |^|_ x e. A B ) $=
    ( cvv cxp wss wrex ciin wrel iinss df-rel rexbii 3imtr4i ) CDDEZFZABGABCHZN
    FCIZABGPIABCNJQOABCKLPKM $.

  ${
    $d x A $.
    $( The union of a class is a relation iff any member is a relation.
       Exercise 6 of [TakeutiZaring] p. 25 and its converse.  (Contributed by
       NM, 13-Aug-2004.) $)
    reluni $p |- ( Rel U. A <-> A. x e. A Rel x ) $=
      ( cuni wrel cv ciun wral uniiun releqi reliun bitri ) BCZDABAEZFZDMDABGLN
      ABHIABMJK $.

    $( The intersection of a class is a relation if at least one member is a
       relation.  (Contributed by NM, 8-Mar-2014.) $)
    relint $p |- ( E. x e. A Rel x -> Rel |^| A ) $=
      ( cv wrel wrex ciin cint reliin intiin releqi sylibr ) ACZDABEABLFZDBGZDA
      BLHNMABIJK $.
  $}

  ${
    $d x y $.
    relopabiv.1 $e |- A = { <. x , y >. | ph } $.
    $( A class of ordered pairs is a relation.  For a version without disjoint
       variable condition, but a longer proof using ~ ax-13 , see ~ relopabi .
       (Contributed by BJ, 22-Jul-2023.) $)
    relopabiv $p |- Rel A $=
      ( wrel cvv cxp wss copab cv wcel wa vex pm3.2i a1i ssopab2i df-xp 3sstr4i
      df-rel mpbir ) DFDGGHZIABCJBKGLZCKGLZMZBCJDUBAUEBCUEAUCUDBNCNOPQEBCGGRSDT
      UA $.
  $}

  ${
    $d ph z $.  $d A z $.  $d u x z $.  $d u y z $.
    relopabi.1 $e |- A = { <. x , y >. | ph } $.
    $( A class of ordered pairs is a relation.  (Contributed by Mario Carneiro,
       21-Dec-2013.)  Remove dependency on ~ ax-sep , ~ ax-nul , ~ ax-pr .
       (Revised by KP, 25-Oct-2021.) $)
    relopabi $p |- Rel A $=
      ( vz vu cvv cv wcel wex cop wceq wa copab cab df-opab eqtri 2eximi syl
      wrel cxp abeq2i simpl sylbi ax6evr pm3.21 eximdv opeq2 eqtr2 eqcomd sylan
      wss mpi eximi eqcoms excomim vex pm3.2i jctr df-xp sylibr 3syl ax5e ssriv
      df-rel mpbir ) DUADHHUBZUMFDVHFIZDJZVIVHJZCKZVKVJVIBIZCIZLZMZCKBKZVIVMGIZ
      LZMZGKZBKZCKZVLVJVPANZCKBKZVQWEFDDABCOWEFPEABCFQRUCWDVPBCVPAUDSUEVQWACKBK
      WCVPWABCWAVOVIVOVIMZVNVRMZWFNZGKZWAWFWGGKWIGCUFWFWGWHGWFWGUGUHUNWHVTGWGVO
      VSMZWFVTVNVRVMUIWJWFNVSVIVOVSVIUJUKULUOTUPSWABCUQTWBVKCWBVTVMHJZVRHJZNZNZ
      GKBKZVKVTWNBGVTWMWKWLBURGURUSUTSWOFVHVHWMBGOWOFPBGHHVAWMBGFQRUCVBUOVCVKCV
      DTVEDVFVG $.

    $( Alternate proof of ~ relopabi (shorter but uses more axioms).
       (Contributed by Mario Carneiro, 21-Dec-2013.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    relopabiALT $p |- Rel A $=
      ( vz wrel cvv cxp wss cv cop wceq wa wex cab copab df-opab wcel vex eqtri
      opelvv eleq1 mpbiri adantr exlimivv abssi eqsstri df-rel mpbir ) DGDHHIZJ
      DFKZBKZCKZLZMZANZCOBOZFPZUKDABCQUSEABCFRUAURFUKUQULUKSZBCUPUTAUPUTUOUKSUM
      UNBTCTUBULUOUKUCUDUEUFUGUHDUIUJ $.
  $}

  $( A class of ordered pairs is a relation.  (Contributed by NM, 8-Mar-1995.)
     Remove disjoint variable conditions.  (Revised by Alan Sare, 9-Jul-2013.)
     (Proof shortened by Mario Carneiro, 21-Dec-2013.) $)
  relopab $p |- Rel { <. x , y >. | ph } $=
    ( copab eqid relopabi ) ABCABCDZGEF $.

  ${
    $d A y $.  $d B y $.  $d x y $.
    $( The maps-to notation always describes a relationship.  (Contributed by
       Scott Fenton, 16-Apr-2012.) $)
    mptrel $p |- Rel ( x e. A |-> B ) $=
      ( vy cv wcel wceq wa cmpt df-mpt relopabi ) AEBFDECGHADABCIADBCJK $.
  $}

  ${
    $d w x y z A $.  $d x y B $.  $d x y C $.  $d x y D $.  $d ph z w $.
    $d ps z w $.
    $( The identity relation is a relation.  Part of Exercise 4.12(p) of
       [Mendelson] p. 235.  (Contributed by NM, 26-Apr-1998.)  (Revised by
       Mario Carneiro, 21-Dec-2013.) $)
    reli $p |- Rel _I $=
      ( vx vy weq cid df-id relopabi ) ABCABDABEF $.

    $( The membership relation is a relation.  (Contributed by NM,
       26-Apr-1998.)  (Revised by Mario Carneiro, 21-Dec-2013.) $)
    rele $p |- Rel _E $=
      ( vx vy wel cep df-eprel relopabi ) ABCABDABEF $.

    $( A relation expressed as an ordered pair abstraction.  (Contributed by
       NM, 11-Dec-2006.) $)
    opabid2 $p |- ( Rel A -> { <. x , y >. | <. x , y >. e. A } = A ) $=
      ( vz vw wrel cv cop wcel copab wceq wb wal vex opeq1 eleq1d opelopab gen2
      opeq2 relopab eqrel mpan mpbiri ) CFZAGZBGZHZCIZABJZCKZDGZEGZHZUIIUMCIZLZ
      EMDMZUODEUHUKUFHZCIUNABUKULDNENUEUKKUGUQCUEUKUFOPUFULKUQUMCUFULUKSPQRUIFU
      DUJUPLUHABTDEUICUAUBUC $.

    $( Intersection of two ordered pair class abstractions.  (Contributed by
       NM, 30-Sep-2002.) $)
    inopab $p |- ( { <. x , y >. | ph } i^i { <. x , y >. | ps } ) =
               { <. x , y >. | ( ph /\ ps ) } $=
      ( vz vw copab cin wa wrel relopab relin1 ax-mp cv cop wcel wsb sban sbbii
      opelopabsbALT anbi12i 3bitr4ri elin 3bitr4i eqrelriiv ) EFACDGZBCDGZHZABI
      ZCDGZUFJUHJACDKUFUGLMUICDKENFNOZUFPZUKUGPZIZUICEQZDFQZUKUHPUKUJPACEQZBCEQ
      ZIZDFQUQDFQZURDFQZIUPUNUQURDFRUOUSDFABCERSULUTUMVAACDEFTBCDEFTUAUBUKUFUGU
      CUICDEFTUDUE $.

    $( The difference of two ordered-pair abstractions.  (Contributed by Stefan
       O'Rear, 17-Jan-2015.) $)
    difopab $p |- ( { <. x , y >. | ph } \ { <. x , y >. | ps } ) =
        { <. x , y >. | ( ph /\ -. ps ) } $=
      ( vz vw copab wn wa wrel relopab cv wcel wsbc sbcan sbcbii opelopabsb cvv
      wb sbcng cdif reldif ax-mp cop elv notbii anbi12i eldif 3bitr4i eqrelriiv
      3bitr4ri ) EFACDGZBCDGZUAZABHZIZCDGZULJUNJACDKULUMUBUCUPCDKELZFLZUDZULMZU
      TUMMZHZIZUPDUSNZCURNZUTUNMUTUQMADUSNZUODUSNZIZCURNVGCURNZVHCURNZIVFVDVGVH
      CUROVEVICURAUODUSOPVAVJVCVKACDURUSQBDUSNZHZCURNZVLCURNZHZVKVCVNVPSEVLCURR
      TUEVHVMCURVHVMSFBDUSRTUEPVBVOBCDURUSQUFUKUGUKUTULUMUHUPCDURUSQUIUJ $.

    $( The intersection of two Cartesian products.  Exercise 9 of
       [TakeutiZaring] p. 25.  (Contributed by NM, 3-Aug-1994.)  (Proof
       shortened by Andrew Salmon, 27-Aug-2011.) $)
    inxp $p |- ( ( A X. B ) i^i ( C X. D ) ) =
                   ( ( A i^i C ) X. ( B i^i D ) ) $=
      ( vx vy cv wcel wa copab cin cxp inopab elin anbi12i bitr4i opabbii eqtri
      an4 df-xp ineq12i 3eqtr4i ) EGZAHZFGZBHZIZEFJZUCCHZUEDHZIZEFJZKZUCACKZHZU
      EBDKZHZIZEFJZABLZCDLZKUNUPLUMUGUKIZEFJUSUGUKEFMVBUREFVBUDUIIZUFUJIZIURUDU
      FUIUJSUOVCUQVDUCACNUEBDNOPQRUTUHVAULEFABTEFCDTUAEFUNUPTUB $.

    $( Distributive law for Cartesian product over intersection.  Theorem 102
       of [Suppes] p. 52.  (Contributed by NM, 26-Sep-2004.) $)
    xpindi $p |- ( A X. ( B i^i C ) ) = ( ( A X. B ) i^i ( A X. C ) ) $=
      ( cxp cin inxp inidm xpeq1i eqtr2i ) ABDACDEAAEZBCEZDAKDABACFJAKAGHI $.

    $( Distributive law for Cartesian product over intersection.  Similar to
       Theorem 102 of [Suppes] p. 52.  (Contributed by NM, 26-Sep-2004.) $)
    xpindir $p |- ( ( A i^i B ) X. C ) = ( ( A X. C ) i^i ( B X. C ) ) $=
      ( cxp cin inxp inidm xpeq2i eqtr2i ) ACDBCDEABEZCCEZDJCDACBCFKCJCGHI $.
  $}

  ${
    $d x y z A $.  $d x y z C $.  $d y z B $.
    $( Distributive law for Cartesian product over indexed intersection.
       (Contributed by Mario Carneiro, 21-Mar-2015.) $)
    xpiindi $p |- ( A =/= (/) ->
      ( C X. |^|_ x e. A B ) = |^|_ x e. A ( C X. B ) ) $=
      ( vy vz ciin cxp wrel wa c0 wral relxp cv wcel cvv eliin opelxp 3bitr4g
      wb wne wceq wrex rgenw r19.2z mpan2 reliin syl cop r19.28zv bicomd anbi2i
      jctil elv ralbii opex ax-mp eqrelrdv2 mpancom ) DABCGZHZIZABDCHZGZIZJBKUA
      ZVAVDUBVFVEVBVFVCIZABUCZVEVFVGABLVHVGABDCMUDVGABUEUFABVCUGUHDUTMUMVFEFVAV
      DVFENZDOZFNZUTOZJZVIVKUIZVCOZABLZVNVAOVNVDOZVFVJVKCOZABLZJZVJVRJZABLZVMVP
      VFWBVTVJVRABUJUKVLVSVJVLVSTFAVKBCPQUNULVOWAABVIVKDCRUOSVIVKDUTRVNPOVQVPTV
      IVKUPAVNBVCPQUQSURUS $.

    $( Distributive law for Cartesian product over relativized indexed
       intersection.  (Contributed by Mario Carneiro, 21-Mar-2015.) $)
    xpriindi $p |- ( C X. ( D i^i |^|_ x e. A B ) ) =
      ( ( C X. D ) i^i |^|_ x e. A ( C X. B ) ) $=
      ( ciin cin cxp wceq c0 cvv iineq1 0iin syl6eq ineq2d xpeq2d eqtr4d xpindi
      inv1 wne xpiindi syl5eq pm2.61ine ) DEABCFZGZHZDEHZABDCHZFZGZIBJBJIZUFUGU
      JUKUEEDUKUEEKGEUKUDKEUKUDAJCFKABJCLACMNOESNPUKUJUGKGUGUKUIKUGUKUIAJUHFKAB
      JUHLAUHMNOUGSNQBJTZUFUGDUDHZGUJDEUDRULUMUIUGABCDUAOUBUC $.
  $}

  ${
    $d y A $.  $d y B $.  $d x y C $.  $d x D $.  $d x E $.
    $( Membership in a union of Cartesian products.  Analogue of ~ elxp for
       nonconstant ` B ( x ) ` .  (Contributed by Mario Carneiro,
       29-Dec-2014.) $)
    eliunxp $p |- ( C e. U_ x e. A ( { x } X. B ) <->
      E. x E. y ( C = <. x , y >. /\ ( x e. A /\ y e. B ) ) ) $=
      ( cv csn cxp ciun wcel cop wceq wex wa wrel wral relxp rgenw reliun exbii
      mpbir elrel mpan pm4.71ri nfiu1 nfel2 19.41 19.41v eleq1 opeliunxp syl6bb
      pm5.32i bitr3i 3bitr2i ) EACAFZGZDHZIZJZEUOBFZKZLZBMZAMZUSNVCUSNZAMVBUOCJ
      UTDJNZNZBMZAMUSVDUROZUSVDVIUQOZACPVJACUPDQRACUQSUAABEURUBUCUDVCUSAAEURACU
      QUEUFUGVEVHAVEVBUSNZBMVHVBUSBUHVKVGBVBUSVFVBUSVAURJVFEVAURUIACDUTUJUKULTU
      MTUN $.

    $d x A $.
    opeliunxp2.1 $e |- ( x = C -> B = E ) $.
    $( Membership in a union of Cartesian products.  (Contributed by Mario
       Carneiro, 14-Feb-2015.) $)
    opeliunxp2 $p |- ( <. C , D >. e. U_ x e. A ( { x } X. B ) <->
      ( C e. A /\ D e. E ) ) $=
      ( cop cv csn cxp ciun wcel cvv wa wbr df-br wrel wral wb reliun brrelex1i
      relxp rgenw mpbir sylbir elex adantr nfiu1 nfel2 nfbi opeq1 eleq1d eleq2d
      nfv wceq eleq1 anbi12d bibi12d opeliunxp vtoclg1f pm5.21nii ) DEHZABAIZJZ
      CKZLZMZDNMZDBMZEFMZOZVHDEVGPVIDEVGQDEVGVGRVFRZABSVMABVECUCUDABVFUAUEUBUFV
      JVIVKDBUGUHVDEHZVGMZVDBMZECMZOZTVHVLTADNVHVLAAVCVGABVFUIUJVLAUOUKVDDUPZVO
      VHVRVLVSVNVCVGVDDEULUMVSVPVJVQVKVDDBUQVSCFEGUNURUSABCEUTVAVB $.
  $}

  ${
    $d x y z A $.  $d x z B $.  $d y z ph $.  $d x ps $.
    ralxp.1 $e |- ( x = <. y , z >. -> ( ph <-> ps ) ) $.
    $( Write a double restricted quantification as one universal quantifier.
       In this version of ~ ralxp , ` B ( y ) ` is not assumed to be constant.
       (Contributed by Mario Carneiro, 29-Dec-2014.) $)
    raliunxp $p |- ( A. x e. U_ y e. A ( { y } X. B ) ph <->
      A. y e. A A. z e. B ps ) $=
      ( cv csn cxp ciun wcel wi wal wa wral wex albii bitri wceq eliunxp imbi1i
      cop 19.23vv bitr4i alrot3 impexp opex imbi2d ceqsalv 2albii r2al 3bitr4i
      df-ral ) CIZDFDIZJGKLZMZANZCOZUQFMEIZGMPZBNZEODOZACURQBEGQDFQVAUPUQVBUDZU
      AZVCPZANZEODOZCOZVEUTVJCUTVHERDRZANVJUSVLADEFGUPUBUCVHADEUEUFSVKVICOZEODO
      VEVICDEUGVMVDDEVMVGVCANZNZCOVDVIVOCVGVCAUHSVNVDCVFUQVBUIVGABVCHUJUKTULTTA
      CURUOBDEFGUMUN $.

    $( Write a double restricted quantification as one universal quantifier.
       In this version of ~ rexxp , ` B ( y ) ` is not assumed to be constant.
       (Contributed by Mario Carneiro, 14-Feb-2015.) $)
    rexiunxp $p |- ( E. x e. U_ y e. A ( { y } X. B ) ph <->
      E. y e. A E. z e. B ps ) $=
      ( wn cv csn cxp ciun wral wrex cop wceq notbid raliunxp dfrex2 3bitr4i
      ralnex ralbii bitri notbii ) AIZCDFDJZKGLMZNZIBEGOZIZDFNZIACUHOUJDFOUIULU
      IBIZEGNZDFNULUFUMCDEFGCJUGEJPQABHRSUNUKDFBEGUBUCUDUEACUHTUJDFTUA $.

    $d y B $.
    $( Universal quantification restricted to a Cartesian product is equivalent
       to a double restricted quantification.  The hypothesis specifies an
       implicit substitution.  (Contributed by NM, 7-Feb-2004.)  (Revised by
       Mario Carneiro, 29-Dec-2014.) $)
    ralxp $p |- ( A. x e. ( A X. B ) ph <-> A. y e. A A. z e. B ps ) $=
      ( cxp wral cv csn ciun iunxpconst raleqi raliunxp bitr3i ) ACFGIZJACDFDKL
      GIMZJBEGJDFJACSRDFGNOABCDEFGHPQ $.

    $( Existential quantification restricted to a Cartesian product is
       equivalent to a double restricted quantification.  (Contributed by NM,
       11-Nov-1995.)  (Revised by Mario Carneiro, 14-Feb-2015.) $)
    rexxp $p |- ( E. x e. ( A X. B ) ph <-> E. y e. A E. z e. B ps ) $=
      ( cxp wrex cv csn ciun iunxpconst rexeqi rexiunxp bitr3i ) ACFGIZJACDFDKL
      GIMZJBEGJDFJACSRDFGNOABCDEFGHPQ $.
  $}

  ${
    $d y z ph $.  $d x ps $.  $d x y z $.
    exopxfr.1 $e |- ( x = <. y , z >. -> ( ph <-> ps ) ) $.
    $( Transfer ordered-pair existence from/to single variable existence.
       (Contributed by NM, 26-Feb-2014.)  (Proof shortened by Mario Carneiro,
       31-Aug-2015.) $)
    exopxfr $p |- ( E. x e. ( _V X. _V ) ph <-> E. y E. z ps ) $=
      ( cvv cxp wrex wex rexxp rexv exbii 3bitri ) ACGGHIBEGIZDGIODJBEJZDJABCDE
      GGFKODLOPDBELMN $.
  $}

  ${
    $d x y z A $.  $d y z ph $.  $d x ps $.
    exopxfr2.1 $e |- ( x = <. y , z >. -> ( ph <-> ps ) ) $.
    $( Transfer ordered-pair existence from/to single variable existence.
       (Contributed by NM, 26-Feb-2014.) $)
    exopxfr2 $p |- ( Rel A -> ( E. x e. A ph
              <-> E. y E. z ( <. y , z >. e. A /\ ps ) ) ) $=
      ( wrel wrex cv wcel wa cvv cxp cop wex wss df-rel biimpi sseld wceq eleq1
      adantrd pm4.71rd rexbidv2 anbi12d exopxfr syl6bb ) FHZACFICJZFKZALZCMMNZI
      DJEJOZFKZBLZEPDPUIAULCFUMUIULUJUMKZUIUKUQAUIFUMUJUIFUMQFRSTUCUDUEULUPCDEU
      JUNUAUKUOABUJUNFUBGUFUGUH $.
  $}

  ${
    $d x A $.
    $( Disjoint union is a subset of a Cartesian product.  (Contributed by
       Stefan O'Rear, 21-Nov-2014.) $)
    djussxp $p |- U_ x e. A ( { x } X. B ) C_ ( A X. _V ) $=
      ( cv csn cxp ciun cvv wss iunss wcel snssi ssv xpss12 sylancl mprgbir ) A
      BADZEZCFZGBHFZISTIZABABSTJQBKRBICHIUAQBLCMRBCHNOP $.
  $}

  ${
    $d u v w x y A $.  $d u v w x y z B $.  $d u v w ph $.  $d u v w ps $.
    ralxpf.1 $e |- F/ y ph $.
    ralxpf.2 $e |- F/ z ph $.
    ralxpf.3 $e |- F/ x ps $.
    ralxpf.4 $e |- ( x = <. y , z >. -> ( ph <-> ps ) ) $.
    $( Version of ~ ralxp with bound-variable hypotheses.  (Contributed by NM,
       18-Aug-2006.)  (Revised by Mario Carneiro, 15-Oct-2016.) $)
    ralxpf $p |- ( A. x e. ( A X. B ) ph <-> A. y e. A A. z e. B ps ) $=
      ( vw vu vv wral wsb cv wceq vex nfsb cxp cbvralsv ralbii nfcv nfs1v nfral
      nfv sbequ12 ralbidv cbvral cop wa wex wb eqvinop nfbi opth sylan9bb sylbi
      sbhypf exlimi ralxp 3bitr4ri bitri ) ACFGUAZOACLPZLVEOZBEGOZDFOZACLVEUBBD
      MPZEGOZMFOVJENPZNGOZMFOVIVGVKVMMFVJENGUBUCVHVKDMFVHMUGVJDEGDGUDBDMUEZUFDQ
      ZMQZRZBVJEGBDMUHZUIUJVFVLLMNFGLQZVPNQZUKZRVSVOEQZUKZRZWCWARZULZEUMZDUMVFV
      LUNZDEVSVPVTMSNSUOWGWHDVFVLDACLDHTVJENDVNTUPWFWHEVFVLEACLEITVJENUEUPWDVFB
      WEVLABCLWCJKUTWEVQWBVTRZULBVLUNVOWBVPVTDSESUQVQBVJWIVLVRVJENUHURUSURVAVAU
      SVBVCVD $.

    $( Version of ~ rexxp with bound-variable hypotheses.  (Contributed by NM,
       19-Dec-2008.)  (Revised by Mario Carneiro, 15-Oct-2016.) $)
    rexxpf $p |- ( E. x e. ( A X. B ) ph <-> E. y e. A E. z e. B ps ) $=
      ( wn cxp wral wrex nfn cv cop wceq dfrex2 notbid ralxpf ralnex 3bitr4i
      ralbii bitri notbii ) ALZCFGMZNZLBEGOZLZDFNZLACUIOUKDFOUJUMUJBLZEGNZDFNUM
      UHUNCDEFGADHPAEIPBCJPCQDQEQRSABKUAUBUOULDFBEGUCUEUFUGACUITUKDFTUD $.
  $}

  ${
    $d w x y A $.  $d w x y z B $.  $d w C $.  $d w D $.
    iunxpf.1 $e |- F/_ y C $.
    iunxpf.2 $e |- F/_ z C $.
    iunxpf.3 $e |- F/_ x D $.
    iunxpf.4 $e |- ( x = <. y , z >. -> C = D ) $.
    $( Indexed union on a Cartesian product equals a double indexed union.  The
       hypothesis specifies an implicit substitution.  (Contributed by NM,
       19-Dec-2008.) $)
    iunxpf $p |- U_ x e. ( A X. B ) C = U_ y e. A U_ z e. B D $=
      ( vw cxp ciun cv wcel wrex nfcri cop eliun wceq eleq2d rexxpf bitri eqriv
      rexbii 3bitr4i ) LADEMZFNZBDCEGNZNZLOZFPZAUHQULGPZCEQZBDQZULUIPULUKPZUMUN
      ABCDEBLFHRCLFIRALGJRAOBOCOSUAFGULKUBUCAULUHFTUQULUJPZBDQUPBULDUJTURUOBDCU
      LEGTUFUDUGUE $.
  $}

  ${
    $d x y A $.  $d x y ph $.
    opabbi2dv.1 $e |- Rel A $.
    opabbi2dv.3 $e |- ( ph -> ( <. x , y >. e. A <-> ps ) ) $.
    $( Deduce equality of a relation and an ordered-pair class builder.
       Compare ~ abbi2dv .  (Contributed by NM, 24-Feb-2014.) $)
    opabbi2dv $p |- ( ph -> A = { <. x , y >. | ps } ) $=
      ( cv cop wcel copab wrel wceq opabid2 ax-mp opabbidv syl5eqr ) AECHDHIEJZ
      CDKZBCDKELSEMFCDENOARBCDGPQ $.
  $}

  ${
    $d v w x y z A $.  $d v w x y z B $.
    relop.1 $e |- A e. _V $.
    relop.2 $e |- B e. _V $.
    $( A necessary and sufficient condition for a Kuratowski ordered pair to be
       a relation.  (Contributed by NM, 3-Jun-2008.)  (Avoid depending on this
       detail.) $)
    relop $p |- ( Rel <. A , B >.
                  <-> E. x E. y ( A = { x } /\ B = { x , y } ) ) $=
      ( vz vw vv cop cv wceq cpr wa wex wi wal bitri weq eqeq2d cvv cxp wss csn
      wrel df-rel wcel dfss2 elop elvv imbi12i jaob albii 19.26 eqeq1 eqcom vex
      snex opeqsn syl6bb 2exbidv imbi12d spcv sneq cbvexvw ax6evr mpbiran exbii
      wo 19.41v eqid a1bi 3bitr2ri sylib prex mpi opeqpr idd preqsn simplbi syl
      eqtr2 dfsn2 preq2 syl5req syl5eq biimpd expd com12 adantr mpd expcom impd
      anbi12d syl5bi 2eximdv exlimiv imp syl2an sylbi simpr equid sylibr eqtr4d
      jaod jctl opeq12 spc2ev adantlr preq12 biimpa dfop syl6eqr jaodan 3imtr4g
      ex ssrdv exlimivv impbii ) CDJZUEXTUAUAUBZUCZCAKZUDZLZDYCBKZMZLZNZBOAOZXT
      UFYBYJYBGKZCUDZLZYKYCYFJZLZBOAOZPZGQZYKCDMZLZYPPZGQZNZYJYBYKXTUGZYKYAUGZP
      ZGQZUUCGXTYAUHUUGYQUUANZGQUUCUUFUUHGUUFYMYTVIZYPPUUHUUDUUIUUEYPYKCDEFUIZA
      BYKUJUKYMYPYTULRUMYQUUAGUNRRYRCHKZUDZLZHOZYSYNLZBOAOZYJUUBYRYLYLLZABSZYEN
      ZBOZAOZPZUUNYQUVBGYLCURYMYMUUQYPUVAYKYLYLUOYMYOUUSABYMYOYLYNLZUUSYKYLYNUO
      UVCYNYLLUUSYLYNUPYCYFCAUQZBUQZUSRUTVAVBVCUUNYEAOUVAUVBUUMYEHAHASZUULYDCUU
      KYCVDTVEUUTYEAUUTUURBOYEBAVFUURYEBVJVGVHUUQUVAYLVKVLVMVNUUBYSYSLZUUPYSVKU
      UAUVGUUPPGYSCDVOYTYTUVGYPUUPYKYSYSUOYTYOUUOABYKYSYNUOVAVBVCVPUUNUUPYJUUMU
      UPYJPHUUMUUOYIABUUOYICYGLZDYDLZNZVIZUUMYIUUOYNYSLUVKYSYNUPYCYFCDUVDUVEEFV
      QRUUMYIYIUVJUUMYIVRUUMUVHUVIYIUVHUUMUVIYIPZUVHUUMNZUURUVLUVMYGUULLZUURCYG
      UULWBUVNUURBHSYCYFUUKUVDUVEVSVTWAUVHUURUVLPUUMUURUVHUVLUURUVHUVIYIUURUVJY
      IUURUVHYEUVIYHUURYGYDCUURYDYCYCMZYGYCWCZYCYFYCWDZWETUURYDYGDUURYDUVOYGUVP
      UVQWFTWNWGWHWIWJWKWLWMXEWOWPWQWRWSWTYIYBABYIGXTYAYIUUIYKUUKIKZJZLZIOHOZUU
      DUUEYIUUIUWAYIYMUWAYTYEYMUWAYHYEYMNZYKYCYCJZLZUWAUWBYKYLUWCYEYMXAYEUWCYLL
      ZYMYEAASZYENUWEYEUWFAXBXFYCYCCUVDUVDUSXCWJXDUVTUWDHIYCYCUVDUVDUVFIASNUVSU
      WCYKUUKUVRYCYCXGTXHWAXIYIYTNZYOUWAUWGYKYDYGMZYNYIYTYKUWHLYIYSUWHYKCDYDYGX
      JTXKYCYFUVDUVEXLXMUVTYOHIYCYFUVDUVEUVFIBSNUVSYNYKUUKUVRYCYFXGTXHWAXNXPUUJ
      HIYKUJXOXQXRXSR $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( For sets, the identity relation is the same as equality.  (Contributed
       by NM, 30-Apr-2004.)  (Proof shortened by Andrew Salmon,
       27-Aug-2011.) $)
    ideqg $p |- ( B e. V -> ( A _I B <-> A = B ) ) $=
      ( vx vy wcel cid wbr wceq wa reli brrelex1i anim12ci eleq1 biimparc elexd
      cvv id simpl cv jca eqeq1 eqeq2 df-id brabg pm5.21nd ) BCFZABGHZABIZAQFZU
      GJUGUGUHUJUGRABGKLMUGUIJZUJUGUKACUIACFUGABCNOPUGUISUADTZETZIAUMIUIDEABQCG
      ULAUMUBUMBAUCDEUDUEUF $.
  $}

  ${
    ideq.1 $e |- B e. _V $.
    $( For sets, the identity relation is the same as equality.  (Contributed
       by NM, 13-Aug-1995.) $)
    ideq $p |- ( A _I B <-> A = B ) $=
      ( cvv wcel cid wbr wceq wb ideqg ax-mp ) BDEABFGABHICABDJK $.
  $}

  $( A set is identical to itself.  (Contributed by NM, 28-May-2008.)  (Proof
     shortened by Andrew Salmon, 27-Aug-2011.) $)
  ididg $p |- ( A e. V -> A _I A ) $=
    ( wcel cid wbr wceq eqid ideqg mpbiri ) ABCAADEAAFAGAABHI $.

  $( Two ways of expressing set existence.  (Contributed by NM, 16-Feb-2008.)
     (Proof shortened by Andrew Salmon, 27-Aug-2011.)  (Revised by Mario
     Carneiro, 26-Apr-2015.) $)
  issetid $p |- ( A e. _V <-> A _I A ) $=
    ( cvv wcel cid wbr ididg reli brrelex1i impbii ) ABCAADEABFAADGHI $.

  ${
    $d A x y z $.  $d B x y z $.  $d C x y z $.
    $( Subclass theorem for composition.  (Contributed by FL, 30-Dec-2010.) $)
    coss1 $p |- ( A C_ B -> ( A o. C ) C_ ( B o. C ) ) $=
      ( vx vy vz wss cv wbr wex copab ccom ssbr anim2d eximdv ssopab2dv 3sstr4g
      wa df-co ) ABGZDHEHZCIZUAFHZAIZRZEJZDFKUBUAUCBIZRZEJZDFKACLBCLTUFUIDFTUEU
      HETUDUGUBABUAUCMNOPDFEACSDFEBCSQ $.

    $( Subclass theorem for composition.  (Contributed by NM, 5-Apr-2013.) $)
    coss2 $p |- ( A C_ B -> ( C o. A ) C_ ( C o. B ) ) $=
      ( vx vy vz wss cv wbr wex copab ccom ssbr anim1d eximdv ssopab2dv 3sstr4g
      wa df-co ) ABGZDHZEHZAIZUBFHCIZRZEJZDFKUAUBBIZUDRZEJZDFKCALCBLTUFUIDFTUEU
      HETUCUGUDABUAUBMNOPDFECASDFECBSQ $.
  $}

  $( Equality theorem for composition of two classes.  (Contributed by NM,
     3-Jan-1997.) $)
  coeq1 $p |- ( A = B -> ( A o. C ) = ( B o. C ) ) $=
    ( wss wa ccom wceq coss1 anim12i eqss 3imtr4i ) ABDZBADZEACFZBCFZDZONDZEABG
    NOGLPMQABCHBACHIABJNOJK $.

  $( Equality theorem for composition of two classes.  (Contributed by NM,
     3-Jan-1997.) $)
  coeq2 $p |- ( A = B -> ( C o. A ) = ( C o. B ) ) $=
    ( wss wa ccom wceq coss2 anim12i eqss 3imtr4i ) ABDZBADZECAFZCBFZDZONDZEABG
    NOGLPMQABCHBACHIABJNOJK $.

  ${
    coeq1i.1 $e |- A = B $.
    $( Equality inference for composition of two classes.  (Contributed by NM,
       16-Nov-2000.) $)
    coeq1i $p |- ( A o. C ) = ( B o. C ) $=
      ( wceq ccom coeq1 ax-mp ) ABEACFBCFEDABCGH $.

    $( Equality inference for composition of two classes.  (Contributed by NM,
       16-Nov-2000.) $)
    coeq2i $p |- ( C o. A ) = ( C o. B ) $=
      ( wceq ccom coeq2 ax-mp ) ABECAFCBFEDABCGH $.
  $}

  ${
    coeq1d.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for composition of two classes.  (Contributed by NM,
       16-Nov-2000.) $)
    coeq1d $p |- ( ph -> ( A o. C ) = ( B o. C ) ) $=
      ( wceq ccom coeq1 syl ) ABCFBDGCDGFEBCDHI $.

    $( Equality deduction for composition of two classes.  (Contributed by NM,
       16-Nov-2000.) $)
    coeq2d $p |- ( ph -> ( C o. A ) = ( C o. B ) ) $=
      ( wceq ccom coeq2 syl ) ABCFDBGDCGFEBCDHI $.
  $}

  ${
    coeq12i.1 $e |- A = B $.
    coeq12i.2 $e |- C = D $.
    $( Equality inference for composition of two classes.  (Contributed by FL,
       7-Jun-2012.) $)
    coeq12i $p |- ( A o. C ) = ( B o. D ) $=
      ( ccom coeq1i coeq2i eqtri ) ACGBCGBDGABCEHCDBFIJ $.
  $}

  ${
    coeq12d.1 $e |- ( ph -> A = B ) $.
    coeq12d.2 $e |- ( ph -> C = D ) $.
    $( Equality deduction for composition of two classes.  (Contributed by FL,
       7-Jun-2012.) $)
    coeq12d $p |- ( ph -> ( A o. C ) = ( B o. D ) ) $=
      ( ccom coeq1d coeq2d eqtrd ) ABDHCDHCEHABCDFIADECGJK $.
  $}

  ${
    $d w x y z $.  $d y z w A $.  $d y z w B $.
    nfco.1 $e |- F/_ x A $.
    nfco.2 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for function value.  (Contributed by
       NM, 1-Sep-1999.) $)
    nfco $p |- F/_ x ( A o. B ) $=
      ( vy vw vz ccom cv wbr wa wex copab df-co nfcv nfbr nfan nfex nfopab
      nfcxfr ) ABCIFJZGJZCKZUCHJZBKZLZGMZFHNFHGBCOUHFHAUGAGUDUFAAUBUCCAUBPEAUCP
      ZQAUCUEBUIDAUEPQRSTUA $.
  $}

  ${
    $d x y z A $.  $d x y z B $.  $d x y z C $.  $d x y z D $.
    $( Ordered pair membership in a composition.  (Contributed by NM,
       24-Feb-2015.) $)
    brcog $p |- ( ( A e. V /\ B e. W ) -> ( A ( C o. D ) B <->
                   E. x ( A D x /\ x C B ) ) ) $=
      ( vy vz cv wbr wa wex ccom wceq breq1 breq2 bi2anan9 exbidv df-co brabga
      ) HJZAJZEKZUCIJZDKZLZAMBUCEKZUCCDKZLZAMHIBCDENFGUBBOZUECOZLUGUJAUKUDUHULU
      FUIUBBUCEPUECUCDQRSHIADETUA $.

    $( Ordered pair membership in a composition.  (Contributed by NM,
       27-Jan-1997.)  (Revised by Mario Carneiro, 24-Feb-2015.) $)
    opelco2g $p |- ( ( A e. V /\ B e. W ) -> ( <. A , B >. e. ( C o. D ) <->
                   E. x ( <. A , x >. e. D /\ <. x , B >. e. C ) ) ) $=
      ( wcel wa ccom wbr cv wex cop brcog df-br anbi12i exbii 3bitr3g ) BFHCGHI
      BCDEJZKBALZEKZUACDKZIZAMBCNTHBUANEHZUACNDHZIZAMABCDEFGOBCTPUDUGAUBUEUCUFB
      UAEPUACDPQRS $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.  $d x D $.  $d x X $.
    $( Ordered pair membership in a composition.  (Contributed by Thierry
       Arnoux, 14-Jan-2018.) $)
    brcogw $p |- ( ( ( A e. V /\ B e. W /\ X e. Z ) /\ ( A D X /\ X C B ) )
      -> A ( C o. D ) B ) $=
      ( vx wcel w3a wa wbr cv wex ccom 3simpa wceq breq2 breq1 spcegv 3ad2antl3
      anbi12d imp brcog biimpar syl2an2r ) AEJZBFJZGHJZKUHUILZAGDMZGBCMZLZAINZD
      MZUOBCMZLZIOZABCDPMZUHUIUJQUJUHUNUSUIUJUNUSURUNIGHUOGRUPULUQUMUOGADSUOGBC
      TUCUAUDUBUKUTUSIABCDEFUEUFUG $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d ph x $.  $d ph y $.
    eqbrrdva.1 $e |- ( ph -> A C_ ( C X. D ) ) $.
    eqbrrdva.2 $e |- ( ph -> B C_ ( C X. D ) ) $.
    eqbrrdva.3 $e |- ( ( ph /\ x e. C /\ y e. D ) -> ( x A y <-> x B y ) ) $.
    $( Deduction from extensionality principle for relations, given an
       equivalence only on the relation domain and range.  (Contributed by
       Thierry Arnoux, 28-Nov-2017.) $)
    eqbrrdva $p |- ( ph -> A = B ) $=
      ( cvv cxp wss wrel syl6ss df-rel sylibr cv wcel wbr xpss wa ssbrd brxp wb
      syl6ib 3expib pm5.21ndd eqbrrdv ) ABCDEADKKLZMDNADFGLZUJHFGUAZODPQAEUJMEN
      AEUKUJIULOEPQABRZFSZCRZGSZUBZUMUODTZUMUOETZAURUMUOUKTZUQADUKUMUOHUCUMUOFG
      UDZUFAUSUTUQAEUKUMUOIUCVAUFAUNUPURUSUEJUGUHUI $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.  $d x D $.
    opelco.1 $e |- A e. _V $.
    opelco.2 $e |- B e. _V $.
    $( Binary relation on a composition.  (Contributed by NM, 21-Sep-2004.)
       (Revised by Mario Carneiro, 24-Feb-2015.) $)
    brco $p |- ( A ( C o. D ) B <-> E. x ( A D x /\ x C B ) ) $=
      ( cvv wcel ccom wbr cv wa wex wb brcog mp2an ) BHICHIBCDEJKBALZEKRCDKMANO
      FGABCDEHHPQ $.

    $( Ordered pair membership in a composition.  (Contributed by NM,
       27-Dec-1996.)  (Revised by Mario Carneiro, 24-Feb-2015.) $)
    opelco $p |- ( <. A , B >. e. ( C o. D ) <-> E. x ( A D x /\ x C B ) ) $=
      ( cop ccom wcel wbr cv wa wex df-br brco bitr3i ) BCHDEIZJBCRKBALZEKSCDKM
      ANBCROABCDEFGPQ $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( Subset theorem for converse.  (Contributed by NM, 22-Mar-1998.)  (Proof
       shortened by Kyle Wyonch, 27-Apr-2021.) $)
    cnvss $p |- ( A C_ B -> `' A C_ `' B ) $=
      ( vy vx wss cv wbr copab ccnv ssbr ssopab2dv df-cnv 3sstr4g ) ABEZCFZDFZA
      GZDCHOPBGZDCHAIBINQRDCABOPJKDCALDCBLM $.
  $}

  $( Equality theorem for converse relation.  (Contributed by NM,
     13-Aug-1995.) $)
  cnveq $p |- ( A = B -> `' A = `' B ) $=
    ( wss wa ccnv wceq cnvss anim12i eqss 3imtr4i ) ABCZBACZDAEZBEZCZNMCZDABFMN
    FKOLPABGBAGHABIMNIJ $.

  ${
    cnveqi.1 $e |- A = B $.
    $( Equality inference for converse relation.  (Contributed by NM,
       23-Dec-2008.) $)
    cnveqi $p |- `' A = `' B $=
      ( wceq ccnv cnveq ax-mp ) ABDAEBEDCABFG $.
  $}

  ${
    cnveqd.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for converse relation.  (Contributed by NM,
       6-Dec-2013.) $)
    cnveqd $p |- ( ph -> `' A = `' B ) $=
      ( wceq ccnv cnveq syl ) ABCEBFCFEDBCGH $.
  $}

  ${
    $d x y A $.  $d x y R $.
    $( Membership in a converse relation.  Equation 5 of [Suppes] p. 62.
       (Contributed by NM, 24-Mar-1998.) $)
    elcnv $p |- ( A e. `' R <-> E. x E. y ( A = <. x , y >. /\ y R x ) ) $=
      ( ccnv wcel cv wbr copab cop wceq wa wex df-cnv eleq2i elopab bitri ) CDE
      ZFCBGZAGZDHZABIZFCTSJKUALBMAMRUBCABDNOUAABCPQ $.

    $( Membership in a converse relation.  Equation 5 of [Suppes] p. 62.
       (Contributed by NM, 11-Aug-2004.) $)
    elcnv2 $p |- ( A e. `' R <->
                 E. x E. y ( A = <. x , y >. /\ <. y , x >. e. R ) ) $=
      ( ccnv wcel cv cop wceq wbr wa wex elcnv df-br anbi2i 2exbii bitri ) CDEF
      CAGZBGZHIZSRDJZKZBLALTSRHDFZKZBLALABCDMUBUDABUAUCTSRDNOPQ $.
  $}

  ${
    $d y z A $.  $d x y z $.
    nfcnv.1 $e |- F/_ x A $.
    $( Bound-variable hypothesis builder for converse relation.  (Contributed
       by NM, 31-Jan-2004.)  (Revised by Mario Carneiro, 15-Oct-2016.) $)
    nfcnv $p |- F/_ x `' A $=
      ( vz vy ccnv cv wbr copab df-cnv nfcv nfbr nfopab nfcxfr ) ABFDGZEGZBHZED
      IEDBJQEDAAOPBAOKCAPKLMN $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y R $.
    $( The converse of a binary relation swaps arguments.  Theorem 11 of
       [Suppes] p. 61.  (Contributed by NM, 10-Oct-2005.) $)
    brcnvg $p |- ( ( A e. C /\ B e. D ) -> ( A `' R B <-> B R A ) ) $=
      ( vy vx cv wbr ccnv breq2 breq1 df-cnv brabg ) FHZGHZEIOAEIBAEIGFABCDEJPA
      OEKOBAELGFEMN $.
  $}

  $( Ordered-pair membership in converse relation.  (Contributed by NM,
     13-May-1999.)  (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
  opelcnvg $p |- ( ( A e. C /\ B e. D ) ->
                              ( <. A , B >. e. `' R <-> <. B , A >. e. R ) ) $=
    ( wcel wa ccnv wbr cop brcnvg df-br 3bitr3g ) ACFBDFGABEHZIBAEIABJNFBAJEFAB
    CDEKABNLBAELM $.

  ${
    opelcnv.1 $e |- A e. _V $.
    opelcnv.2 $e |- B e. _V $.
    $( Ordered-pair membership in converse relation.  (Contributed by NM,
       13-Aug-1995.) $)
    opelcnv $p |- ( <. A , B >. e. `' R <-> <. B , A >. e. R ) $=
      ( cvv wcel cop ccnv wb opelcnvg mp2an ) AFGBFGABHCIGBAHCGJDEABFFCKL $.

    $( The converse of a binary relation swaps arguments.  Theorem 11 of
       [Suppes] p. 61.  (Contributed by NM, 13-Aug-1995.) $)
    brcnv $p |- ( A `' R B <-> B R A ) $=
      ( cvv wcel ccnv wbr wb brcnvg mp2an ) AFGBFGABCHIBACIJDEABFFCKL $.
  $}

  ${
    $d y z A $.  $d y z F $.  $d y z V $.  $d x y z $.
    $( Move class substitution in and out of the converse of a relation.
       Version of ~ csbcnvgALT without a sethood antecedent but depending on
       more axioms.  (Contributed by Thierry Arnoux, 8-Feb-2017.)  (Revised by
       NM, 23-Aug-2018.) $)
    csbcnv $p |- `' [_ A / x ]_ F = [_ A / x ]_ `' F $=
      ( vz vy csb ccnv cv wbr copab wsbc sbcbr opabbii csbopab 3eqtr4ri csbeq2i
      df-cnv eqtr4i ) ABCFZGZABDHZEHZCIZEDJZFZABCGZFUCABKZEDJUAUBSIZEDJUETUGUHE
      DABUAUBCLMUCAEDBNEDSQOABUFUDEDCQPR $.

    $( Move class substitution in and out of the converse of a relation.
       Version of ~ csbcnv with a sethood antecedent but depending on fewer
       axioms.  (Contributed by Thierry Arnoux, 8-Feb-2017.)
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    csbcnvgALT $p |- ( A e. V -> `' [_ A / x ]_ F = [_ A / x ]_ `' F ) $=
      ( vz vy wcel csb ccnv cv wbr copab wsbc sbcbr123 csbconstg breq12d syl5bb
      opabbidv csbopabgALT df-cnv wceq a1i 3eqtr4rd csbeq2i syl6eqr ) BDGZABCHZ
      IZABEJZFJZCKZFELZHZABCIZHUFUKABMZFELUIUJUGKZFELZUMUHUFUOUPFEUOABUIHZABUJH
      ZUGKUFUPABUIUJCNUFURUIUSUJUGABUIDOABUJDOPQRUKAFEBDSUHUQUAUFFEUGTUBUCABUNU
      LFECTUDUE $.
  $}

  ${
    $d x y z A $.  $d x y z B $.
    $( Distributive law of converse over class composition.  Theorem 26 of
       [Suppes] p. 64.  (Contributed by NM, 19-Mar-1998.)  (Proof shortened by
       Andrew Salmon, 27-Aug-2011.) $)
    cnvco $p |- `' ( A o. B ) = ( `' B o. `' A ) $=
      ( vx vy vz cv ccom wbr copab ccnv wa wex exancom brco brcnv anbi12i exbii
      vex 3bitr4i opabbii df-cnv df-co 3eqtr4i ) CFZDFZABGZHZDCIUEEFZAJZHZUHUDB
      JZHZKZELZDCIUFJUKUIGUGUNDCUDUHBHZUHUEAHZKELUPUOKZELUGUNUOUPEMEUDUEABCRZDR
      ZNUMUQEUJUPULUOUEUHAUSERZOUHUDBUTUROPQSTDCUFUADCEUKUIUBUC $.
  $}

  ${
    $d x y z w A $.
    $( The converse of a class union is the (indexed) union of the converses of
       its members.  (Contributed by NM, 11-Aug-2004.) $)
    cnvuni $p |- `' U. A = U_ x e. A `' x $=
      ( vy vz vw cuni ccnv cv ciun wcel wrex cop wa elcnv2 eluni2 anbi2i bitr4i
      wceq wex rexcom4 r19.42v 2exbii rexbii exbii 3bitrri 3bitri eliun eqriv )
      CBFZGZABAHZGZIZCHZUJJZUNULJZABKZUNUMJUOUNDHZEHZLRZUSURLZUIJZMZESDSUTVAUKJ
      ZMZABKZESZDSZUQDEUNUINVCVFDEVCUTVDABKZMVFVBVIUTAVABOPUTVDABUAQUBUQVEESZDS
      ZABKVJABKZDSVHUPVKABDEUNUKNUCVJADBTVLVGDVEAEBTUDUEUFAUNBULUGQUH $.
  $}

  ${
    $d x y A $.
    $( Alternate definition of domain.  Definition 6.5(1) of [TakeutiZaring]
       p. 24.  (Contributed by NM, 28-Dec-1996.) $)
    dfdm3 $p |- dom A = { x | E. y <. x , y >. e. A } $=
      ( cdm cv wbr wex cab cop wcel df-dm df-br exbii abbii eqtri ) CDAEZBEZCFZ
      BGZAHPQICJZBGZAHABCKSUAARTBPQCLMNO $.

    $( Alternate definition of range.  Definition 4 of [Suppes] p. 60.
       (Contributed by NM, 27-Dec-1996.) $)
    dfrn2 $p |- ran A = { y | E. x x A y } $=
      ( crn ccnv cdm cv wbr wex cab df-rn df-dm vex brcnv exbii abbii 3eqtri )
      CDCEZFBGZAGZRHZAIZBJTSCHZAIZBJCKBARLUBUDBUAUCASTCBMAMNOPQ $.

    $( Alternate definition of range.  Definition 6.5(2) of [TakeutiZaring]
       p. 24.  (Contributed by NM, 28-Dec-1996.) $)
    dfrn3 $p |- ran A = { y | E. x <. x , y >. e. A } $=
      ( crn cv wbr wex cab cop wcel dfrn2 df-br exbii abbii eqtri ) CDAEZBEZCFZ
      AGZBHPQICJZAGZBHABCKSUABRTAPQCLMNO $.
  $}

  ${
    $d A x y $.  $d B x y $.
    $( Membership in a range.  (Contributed by Scott Fenton, 2-Feb-2011.) $)
    elrn2g $p |- ( A e. V -> ( A e. ran B <-> E. x <. x , A >. e. B ) ) $=
      ( vy cv cop wcel wex crn wceq opeq2 eleq1d exbidv dfrn3 elab2g ) AFZEFZGZ
      CHZAIQBGZCHZAIEBCJDRBKZTUBAUCSUACRBQLMNAECOP $.

    $( Membership in a range.  (Contributed by Scott Fenton, 2-Feb-2011.) $)
    elrng $p |- ( A e. V -> ( A e. ran B <-> E. x x B A ) ) $=
      ( wcel crn cv cop wex wbr elrn2g df-br exbii syl6bbr ) BDEBCFEAGZBHCEZAIO
      BCJZAIABCDKQPAOBCLMN $.
  $}

  ${
    $d A a $.  $d B a $.  $d R a $.  $d Y a $.
    $( If a relation is a subset of a cartesian product, then for each element
       of the range of the relation there is an element of the first set of the
       cartesian product which is related to the element of the range by the
       relation.  (Contributed by AV, 24-Oct-2020.) $)
    ssrelrn $p |- ( ( R C_ ( A X. B ) /\ Y e. ran R ) -> E. a e. A a R Y ) $=
      ( cxp wss crn wcel wa cv wbr wex wrex wi elrng ssbr brxp simplbi syl6 ex
      ancrd adantl eximdv com23 sylbid pm2.43i impcom df-rex sylibr ) CABFZGZDC
      HZIZJEKZAIZUODCLZJZEMZUQEANUNULUSUNULUSOZUNUNUQEMZUTEDCUMPUNULVAUSUNULVAU
      SOUNULJUQUREULUQUROUNULUQUPULUQUODUKLZUPCUKUODQVBUPDBIUODABRSTUBUCUDUAUEU
      FUGUHUQEAUIUJ $.
  $}

  ${
    $d x y A $.
    $( Alternate definition of domain.  (Contributed by NM, 28-Dec-1996.) $)
    dfdm4 $p |- dom A = ran `' A $=
      ( vy vx cv wbr wex cab crn cdm vex brcnv exbii abbii dfrn2 df-dm 3eqtr4ri
      ccnv ) BDZCDZAQZEZBFZCGSRAEZBFZCGTHAIUBUDCUAUCBRSABJCJKLMBCTNCBAOP $.
  $}

  ${
    $d x y w v $.  $d w v A $.
    dfdmf.1 $e |- F/_ x A $.
    dfdmf.2 $e |- F/_ y A $.
    $( Definition of domain, using bound-variable hypotheses instead of
       distinct variable conditions.  (Contributed by NM, 8-Mar-1995.)
       (Revised by Mario Carneiro, 15-Oct-2016.) $)
    dfdmf $p |- dom A = { x | E. y x A y } $=
      ( vw vv cdm cv wbr wex cab df-dm nfcv nfbr nfv breq2 cbvexv1 abbii nfex
      weq breq1 exbidv cbvab 3eqtri ) CHFIZGIZCJZGKZFLUFBIZCJZBKZFLAIZUJCJZBKZA
      LFGCMUIULFUHUKGBBUFUGCBUFNEBUGNOUKGPUGUJUFCQRSULUOFAUKABAUFUJCAUFNDAUJNOT
      UOFPFAUAUKUNBUFUMUJCUBUCUDUE $.
  $}

  ${
    $d A w y $.  $d B w y $.  $d x w y $.
    $( Distribute proper substitution through the domain of a class.
       (Contributed by Alexander van der Vekens, 23-Jul-2017.)  (Revised by NM,
       24-Aug-2018.) $)
    csbdm $p |- [_ A / x ]_ dom B = dom [_ A / x ]_ B $=
      ( vy vw cv cop wcel wex cab csb cdm csbab sbcex2 sbcel2 exbii bitri abbii
      wsbc dfdm3 eqtri csbeq2i 3eqtr4i ) ABDFEFGZCHZEIZDJZKZUDABCKZHZEIZDJZABCL
      ZKUILUHUFABSZDJULUFADBMUNUKDUNUEABSZEIUKUEEABNUOUJEABUDCOPQRUAABUMUGDECTU
      BDEUITUC $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( Domain membership.  Theorem 4 of [Suppes] p. 59.  (Contributed by Mario
       Carneiro, 9-Jul-2014.) $)
    eldmg $p |- ( A e. V -> ( A e. dom B <-> E. y A B y ) ) $=
      ( vx cv wbr wex cdm wceq breq1 exbidv df-dm elab2g ) EFZAFZCGZAHBPCGZAHEB
      CIDOBJQRAOBPCKLEACMN $.

    $( Domain membership.  Theorem 4 of [Suppes] p. 59.  (Contributed by NM,
       27-Jan-1997.)  (Revised by Mario Carneiro, 9-Jul-2014.) $)
    eldm2g $p |- ( A e. V -> ( A e. dom B <-> E. y <. A , y >. e. B ) ) $=
      ( wcel cdm cv wbr wex cop eldmg df-br exbii syl6bb ) BDEBCFEBAGZCHZAIBOJC
      EZAIABCDKPQABOCLMN $.
  $}

  ${
    $d y A $.  $d y B $.
    eldm.1 $e |- A e. _V $.
    $( Membership in a domain.  Theorem 4 of [Suppes] p. 59.  (Contributed by
       NM, 2-Apr-2004.) $)
    eldm $p |- ( A e. dom B <-> E. y A B y ) $=
      ( cvv wcel cdm cv wbr wex wb eldmg ax-mp ) BEFBCGFBAHCIAJKDABCELM $.

    $( Membership in a domain.  Theorem 4 of [Suppes] p. 59.  (Contributed by
       NM, 1-Aug-1994.) $)
    eldm2 $p |- ( A e. dom B <-> E. y <. A , y >. e. B ) $=
      ( cvv wcel cdm cv cop wex wb eldm2g ax-mp ) BEFBCGFBAHICFAJKDABCELM $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( Subset theorem for domain.  (Contributed by NM, 11-Aug-1994.) $)
    dmss $p |- ( A C_ B -> dom A C_ dom B ) $=
      ( vx vy wss cdm cv cop wcel wex ssel eximdv vex eldm2 3imtr4g ssrdv ) ABE
      ZCAFZBFZQCGZDGHZAIZDJUABIZDJTRITSIQUBUCDABUAKLDTACMZNDTBUDNOP $.
  $}

  $( Equality theorem for domain.  (Contributed by NM, 11-Aug-1994.) $)
  dmeq $p |- ( A = B -> dom A = dom B ) $=
    ( wss wa cdm wceq dmss anim12i eqss 3imtr4i ) ABCZBACZDAEZBEZCZNMCZDABFMNFK
    OLPABGBAGHABIMNIJ $.

  ${
    dmeqi.1 $e |- A = B $.
    $( Equality inference for domain.  (Contributed by NM, 4-Mar-2004.) $)
    dmeqi $p |- dom A = dom B $=
      ( wceq cdm dmeq ax-mp ) ABDAEBEDCABFG $.
  $}

  ${
    dmeqd.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for domain.  (Contributed by NM, 4-Mar-2004.) $)
    dmeqd $p |- ( ph -> dom A = dom B ) $=
      ( wceq cdm dmeq syl ) ABCEBFCFEDBCGH $.
  $}

  ${
    $d y A $.  $d y B $.  $d y C $.
    opeldmd.1 $e |- ( ph -> A e. V ) $.
    opeldmd.2 $e |- ( ph -> B e. W ) $.
    $( Membership of first of an ordered pair in a domain.  Deduction version
       of ~ opeldm .  (Contributed by AV, 11-Mar-2021.) $)
    opeldmd $p |- ( ph -> ( <. A , B >. e. C -> A e. dom C ) ) $=
      ( vy cop wcel cv wex cdm wi wceq opeq2 eleq1d spcegv syl eldm2g sylibrd
      wb ) ABCJZDKZBILZJZDKZIMZBDNKZACFKUEUIOHUHUEICFUFCPUGUDDUFCBQRSTABEKUJUIU
      CGIBDEUATUB $.
  $}

  ${
    $d y A $.  $d y B $.  $d y C $.
    opeldm.1 $e |- A e. _V $.
    opeldm.2 $e |- B e. _V $.
    $( Membership of first of an ordered pair in a domain.  (Contributed by NM,
       30-Jul-1995.) $)
    opeldm $p |- ( <. A , B >. e. C -> A e. dom C ) $=
      ( vy cop wcel cv wex cdm wceq opeq2 eleq1d spcev eldm2 sylibr ) ABGZCHZAF
      IZGZCHZFJACKHUBSFBETBLUARCTBAMNOFACDPQ $.

    $( Membership of first of a binary relation in a domain.  (Contributed by
       NM, 30-Jul-1995.) $)
    breldm $p |- ( A R B -> A e. dom R ) $=
      ( wbr cop wcel cdm df-br opeldm sylbi ) ABCFABGCHACIHABCJABCDEKL $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x R $.
    $( Membership of first of a binary relation in a domain.  (Contributed by
       NM, 21-Mar-2007.) $)
    breldmg $p |- ( ( A e. C /\ B e. D /\ A R B ) -> A e. dom R ) $=
      ( vx wcel wbr cdm wa cv wex breq2 spcegv imp eldmg syl5ibr 3impib ) ACGZB
      DGZABEHZAEIGZTUAJUBSAFKZEHZFLZTUAUEUDUAFBDUCBAEMNOFAECPQR $.

    $( The domain of a union is the union of domains.  Exercise 56(a) of
       [Enderton] p. 65.  (Contributed by NM, 12-Aug-1994.)  (Proof shortened
       by Andrew Salmon, 27-Aug-2011.) $)
    dmun $p |- dom ( A u. B ) = ( dom A u. dom B ) $=
      ( vy vx cv wbr wex cab cun cdm wo unab brun exbii 19.43 abbii eqtri df-dm
      bitr2i uneq12i 3eqtr4ri ) CEZDEZAFZDGZCHZUBUCBFZDGZCHZIZUBUCABIZFZDGZCHZA
      JZBJZIUKJUJUEUHKZCHUNUEUHCLUQUMCUMUDUGKZDGUQULURDUBUCABMNUDUGDOSPQUOUFUPU
      ICDARCDBRTCDUKRUA $.

    $( The domain of an intersection belong to the intersection of domains.
       Theorem 6 of [Suppes] p. 60.  (Contributed by NM, 15-Sep-2004.) $)
    dmin $p |- dom ( A i^i B ) C_ ( dom A i^i dom B ) $=
      ( vx vy cin cdm cv cop wcel wa wex 19.40 eldm2 elin exbii anbi12i 3imtr4i
      vex bitri ssriv ) CABEZFZAFZBFZEZCGZDGHZAIZUGBIZJZDKZUHDKZUIDKZJZUFUBIZUF
      UEIZUHUIDLUOUGUAIZDKUKDUFUACRZMUQUJDUGABNOSUPUFUCIZUFUDIZJUNUFUCUDNUSULUT
      UMDUFAURMDUFBURMPSQT $.
  $}

  ${
    $d x y z $.  $d y z A $.  $d y z B $.
    $( The domain of an indexed union.  (Contributed by Mario Carneiro,
       26-Apr-2016.) $)
    dmiun $p |- dom U_ x e. A B = U_ x e. A dom B $=
      ( vy vz ciun cdm cv cop wcel wex wrex rexcom4 eldm2 rexbii eliun 3bitr4ri
      vex exbii 3bitr4i eqriv ) DABCFZGZABCGZFZDHZEHIZUBJZEKZUFUDJZABLZUFUCJUFU
      EJUGCJZEKZABLULABLZEKUKUIULAEBMUJUMABEUFCDRZNOUHUNEAUGBCPSQEUFUBUONAUFBUD
      PTUA $.

    $d x A $.
    $( The domain of a union.  Part of Exercise 8 of [Enderton] p. 41.
       (Contributed by NM, 3-Feb-2004.) $)
    dmuni $p |- dom U. A = U_ x e. A dom x $=
      ( vy vz cuni cdm cv ciun cop wcel wex wrex excom ancom 19.41v vex 3bitr4i
      wa eldm2 exbii anbi2i bitri eluni df-rex eliun eqriv ) CBEZFZABAGZFZHZCGZ
      DGIZUGJZDKZULUJJZABLZULUHJULUKJUMUIJZUIBJZRZAKZDKZUSUPRZAKZUOUQVBUTDKZAKV
      DUTDAMVEVCAURDKZUSRUSVFRVEVCVFUSNURUSDOUPVFUSDULUICPZSUAQTUBUNVADAUMBUCTU
      PABUDQDULUGVGSAULBUJUEQUF $.
  $}

  ${
    $d x y $.
    $( The domain of a class of ordered pairs.  (Contributed by NM,
       16-May-1995.)  (Revised by Mario Carneiro, 4-Dec-2016.) $)
    dmopab $p |- dom { <. x , y >. | ph } = { x | E. y ph } $=
      ( copab cdm wbr wex cab nfopab1 nfopab2 dfdmf cop wcel df-br opabid bitri
      cv exbii abbii eqtri ) ABCDZEBQZCQZUAFZCGZBHACGZBHBCUAABCIABCJKUEUFBUDACU
      DUBUCLUAMAUBUCUANABCOPRST $.
  $}

  ${
    $d x y A $.
    $( Upper bound for the domain of a restricted class of ordered pairs.
       (Contributed by NM, 31-Jan-2004.) $)
    dmopabss $p |- dom { <. x , y >. | ( x e. A /\ ph ) } C_ A $=
      ( cv wcel wa copab cdm wex cab dmopab 19.42v abbii ssab2 eqsstri ) BEDFZA
      GZBCHIRCJZBKZDRBCLTQACJZGZBKDSUBBQACMNUABDOPP $.
  $}

  ${
    $d x y A $.
    $( The domain of a restricted class of ordered pairs.  (Contributed by NM,
       31-Jan-2004.) $)
    dmopab3 $p |- ( A. x e. A E. y ph <->
               dom { <. x , y >. | ( x e. A /\ ph ) } = A ) $=
      ( wex wral cv wcel wi wal wa wb copab cdm wceq df-ral pm4.71 albii dmopab
      cab 19.42v abbii eqtri eqeq1i eqcom abeq2 3bitr2ri 3bitri ) ACEZBDFBGDHZU
      IIZBJUJUJUIKZLZBJZUJAKZBCMNZDOZUIBDPUKUMBUJUIQRUQULBTZDODUROUNUPURDUPUOCE
      ZBTURUOBCSUSULBUJACUAUBUCUDDURUEULBDUFUGUH $.
  $}

  ${
    $d x y z A $.  $d x y z B $.  $d x y z ph $.  $d z ps $.
    opabssxpd.x $e |- ( ( ph /\ ps ) -> x e. A ) $.
    opabssxpd.y $e |- ( ( ph /\ ps ) -> y e. B ) $.
    $( An ordered-pair class abstraction is a subset of a Cartesian product.
       Formerly part of proof for ~ opabex2 .  (Contributed by AV,
       26-Nov-2021.) $)
    opabssxpd $p |- ( ph -> { <. x , y >. | ps } C_ ( A X. B ) ) $=
      ( vz copab cv cop wceq wa wex cab cxp df-opab wcel simprl opelxpd adantrl
      eqeltrd ex exlimdvv abssdv syl5eqss ) ABCDJIKZCKZDKZLZMZBNZDOCOZIPEFQZBCD
      IRAUNIUOAUMUHUOSZCDAUMUPAUMNUHUKUOAULBTABUKUOSULABNUIUJEFGHUAUBUCUDUEUFUG
      $.
  $}

  ${
    $d x y $.
    $( The domain of the empty set is empty.  Part of Theorem 3.8(v) of [Monk1]
       p. 36.  (Contributed by NM, 4-Jul-1994.)  (Proof shortened by Andrew
       Salmon, 27-Aug-2011.) $)
    dm0 $p |- dom (/) = (/) $=
      ( vx vy c0 cdm cv wcel cop wex noel nex vex eldm2 mtbir nel0 ) ACDZAEZOFP
      BEGZCFZBHRBQIJBPCAKLMN $.

    $( The domain of the identity relation is the universe.  (Contributed by
       NM, 30-Apr-1998.)  (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
    dmi $p |- dom _I = _V $=
      ( vx vy cid cdm cvv wceq cv wcel eqv wbr wex ax6ev vex equcom bitri exbii
      ideq mpbir eldm mpgbir ) CDZEFAGZUAHZAAUAIUCUBBGZCJZBKZUFUDUBFZBKBALUEUGB
      UEUBUDFUGUBUDBMQABNOPRBUBCAMSRT $.

    $( The domain of the universe is the universe.  (Contributed by NM,
       8-Aug-2003.) $)
    dmv $p |- dom _V = _V $=
      ( cvv cdm ssv cid dmi wss dmss ax-mp eqsstr3i eqssi ) ABZAKCADBZKEDAFLKFD
      CDAGHIJ $.
  $}

  ${
    $d x y A $.
    $( An empty domain is equivalent to an empty range.  (Contributed by NM,
       21-May-1998.) $)
    dm0rn0 $p |- ( dom A = (/) <-> ran A = (/) ) $=
      ( vx vy cv wbr wex cab c0 wceq wcel wb wal alnex noel albii abeq1 3bitr4i
      wn nbn eqeq1i cdm crn excom xchbinx bitr4i 3bitr3i df-dm dfrn2 ) BDZCDZAE
      ZCFZBGZHIZUKBFZCGZHIZAUAZHIAUBZHIULUIHJZKZBLZUOUJHJZKZCLZUNUQULRZBLZUORZC
      LZVBVEVGUOCFZRVIVGULBFVJULBMUKBCUCUDUOCMUEVFVABUTULUINSOVHVDCVCUOUJNSOUFU
      LBHPUOCHPQURUMHBCAUGTUSUPHBCAUHTQ $.

    $( A relation is empty iff its domain is empty.  (Contributed by NM,
       15-Sep-2004.) $)
    reldm0 $p |- ( Rel A -> ( A = (/) <-> dom A = (/) ) ) $=
      ( vx vy wrel c0 wceq cv cop wcel wb wal cdm rel0 eqrel mpan2 wn eq0 alnex
      wex albii vex eldm2 xchbinxr noel nbn bitr3i bitr2i syl6bb ) ADZAEFZBGZCG
      HZAIZULEIZJZCKZBKZALZEFZUIEDUJUQJMBCAENOUSUKURIZPZBKUQBURQVAUPBVAUMPZCKZU
      PVCUMCSUTUMCRCUKABUAUBUCVBUOCUNUMULUDUETUFTUGUH $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( The domain of a Cartesian product.  Part of Theorem 3.13(x) of [Monk1]
       p. 37.  (Contributed by NM, 28-Jul-1995.)  (Proof shortened by Andrew
       Salmon, 27-Aug-2011.) $)
    dmxp $p |- ( B =/= (/) -> dom ( A X. B ) = A ) $=
      ( vy vx c0 wne cxp cdm cv wcel wa copab df-xp dmeqi wex wral n0 ralrimivw
      wceq biimpi dmopab3 sylib syl5eq ) BEFZABGZHCIAJDIBJZKCDLZHZAUEUGCDABMNUD
      UFDOZCAPUHASUDUICAUDUIDBQTRUFCDAUAUBUC $.
  $}

  $( The domain of a square Cartesian product.  (Contributed by NM,
     28-Jul-1995.) $)
  dmxpid $p |- dom ( A X. A ) = A $=
    ( cxp cdm wceq c0 dm0 xpeq1 0xp syl6eq dmeqd id 3eqtr4a dmxp pm2.61ine ) AA
    BZCZADAEAEDZECEPAFQOEQOEABEAEAGAHIJQKLAAMN $.

  $( The domain of the intersection of two square Cartesian products.  Unlike
     ~ dmin , equality holds.  (Contributed by NM, 29-Jan-2008.) $)
  dmxpin $p |- dom ( ( A X. A ) i^i ( B X. B ) ) = ( A i^i B ) $=
    ( cxp cin cdm inxp dmeqi dmxpid eqtri ) AACBBCDZEABDZKCZEKJLAABBFGKHI $.

  $( The Cartesian product of a class with itself is one-to-one.  (Contributed
     by NM, 5-Nov-2006.)  (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
  xpid11 $p |- ( ( A X. A ) = ( B X. B ) <-> A = B ) $=
    ( cxp wceq cdm dmeq dmxpid 3eqtr3g xpeq12 anidms impbii ) AACZBBCZDZABDZNLE
    MEABLMFAGBGHONABABIJK $.

  $( The domain of the double converse of a class (which doesn't have to be a
     relation as in ~ dfrel2 ).  (Contributed by NM, 8-Apr-2007.) $)
  dmcnvcnv $p |- dom `' `' A = dom A $=
    ( cdm ccnv crn dfdm4 df-rn eqtr2i ) ABACZDHCBAEHFG $.

  $( The range of the double converse of a class.  (Contributed by NM,
     8-Apr-2007.) $)
  rncnvcnv $p |- ran `' `' A = ran A $=
    ( crn ccnv cdm df-rn dfdm4 eqtr2i ) ABACZDHCBAEHFG $.

  ${
    $d x y A $.  $d x y B $.
    $( The first member of an ordered pair in a relation belongs to the domain
       of the relation.  (Contributed by NM, 28-Jul-2004.) $)
    elreldm $p |- ( ( Rel A /\ B e. A ) -> |^| |^| B e. dom A ) $=
      ( vx vy wrel wcel cint cdm cv cop wceq wex cvv cxp wss wi df-rel ssel vex
      sylbi elvv syl6ib eleq1 opeldm syl6bi inteqd op1stb syl6eq eleq1d sylibrd
      inteq exlimivv syli imp ) AEZBAFZBGZGZAHZFZUPUOBCIZDIZJZKZDLCLZUTUOUPBMMN
      ZFZVEUOAVFOUPVGPAQAVFBRTCDBUAUBVDUPUTPCDVDUPVAUSFZUTVDUPVCAFVHBVCAUCVAVBA
      CSZDSZUDUEVDURVAUSVDURVCGZGVAVDUQVKBVCUKUFVAVBVIVJUGUHUIUJULUMUN $.
  $}

  $( Equality theorem for range.  (Contributed by NM, 29-Dec-1996.) $)
  rneq $p |- ( A = B -> ran A = ran B ) $=
    ( wceq ccnv cdm crn cnveq dmeqd df-rn 3eqtr4g ) ABCZADZEBDZEAFBFKLMABGHAIBI
    J $.

  ${
    rneqi.1 $e |- A = B $.
    $( Equality inference for range.  (Contributed by NM, 4-Mar-2004.) $)
    rneqi $p |- ran A = ran B $=
      ( wceq crn rneq ax-mp ) ABDAEBEDCABFG $.
  $}

  ${
    rneqd.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for range.  (Contributed by NM, 4-Mar-2004.) $)
    rneqd $p |- ( ph -> ran A = ran B ) $=
      ( wceq crn rneq syl ) ABCEBFCFEDBCGH $.
  $}

  $( Subset theorem for range.  (Contributed by NM, 22-Mar-1998.) $)
  rnss $p |- ( A C_ B -> ran A C_ ran B ) $=
    ( wss ccnv cdm crn cnvss dmss syl df-rn 3sstr4g ) ABCZADZEZBDZEZAFBFLMOCNPC
    ABGMOHIAJBJK $.

  ${
    rnssi.1 $e |- A C_ B $.
    $( Subclass inference for range.  (Contributed by Peter Mazsa,
       24-Sep-2022.) $)
    rnssi $p |- ran A C_ ran B $=
      ( wss crn rnss ax-mp ) ABDAEBEDCABFG $.
  $}

  $( The second argument of a binary relation belongs to its range.
     (Contributed by NM, 29-Jun-2008.) $)
  brelrng $p |- ( ( A e. F /\ B e. G /\ A C B ) -> B e. ran C ) $=
    ( wcel wbr w3a ccnv cdm crn wb brcnvg ancoms biimp3ar 3com12 syld3an3 df-rn
    breldmg syl6eleqr ) ADFZBEFZABCGZHBCIZJZCKUAUBUCBAUDGZBUEFZUAUBUFUCUBUAUFUC
    LBAEDCMNOUBUAUFUGBAEDUDSPQCRT $.

  ${
    brelrn.1 $e |- A e. _V $.
    brelrn.2 $e |- B e. _V $.
    $( The second argument of a binary relation belongs to its range.
       (Contributed by NM, 13-Aug-2004.) $)
    brelrn $p |- ( A C B -> B e. ran C ) $=
      ( cvv wcel wbr crn brelrng mp3an12 ) AFGBFGABCHBCIGDEABCFFJK $.

    $( Membership of second member of an ordered pair in a range.  (Contributed
       by NM, 23-Feb-1997.) $)
    opelrn $p |- ( <. A , B >. e. C -> B e. ran C ) $=
      ( cop wcel wbr crn df-br brelrn sylbir ) ABFCGABCHBCIGABCJABCDEKL $.
  $}

  $( The first argument of a binary relation belongs to its domain.  Note that
     ` A R B ` does not imply ` Rel R ` : see for example ~ nrelv and ~ brv .
     (Contributed by NM, 2-Jul-2008.) $)
  releldm $p |- ( ( Rel R /\ A R B ) -> A e. dom R ) $=
    ( wrel wbr wa cvv wcel cdm brrelex1 brrelex2 simpr breldmg syl3anc ) CDZABC
    EZFAGHBGHPACIHABCJABCKOPLABGGCMN $.

  $( The second argument of a binary relation belongs to its range.
     (Contributed by NM, 2-Jul-2008.) $)
  relelrn $p |- ( ( Rel R /\ A R B ) -> B e. ran R ) $=
    ( wrel wbr wa cvv wcel crn brrelex1 brrelex2 simpr brelrng syl3anc ) CDZABC
    EZFAGHBGHPBCIHABCJABCKOPLABCGGMN $.

  ${
    $d x A $.  $d x R $.
    $( Membership in a domain.  (Contributed by Mario Carneiro, 5-Nov-2015.) $)
    releldmb $p |- ( Rel R -> ( A e. dom R <-> E. x A R x ) ) $=
      ( wrel cdm wcel cv wbr wex eldmg ibi releldm ex exlimdv impbid2 ) CDZBCEZ
      FZBAGZCHZAIZRUAABCQJKPTRAPTRBSCLMNO $.

    $( Membership in a range.  (Contributed by Mario Carneiro, 5-Nov-2015.) $)
    relelrnb $p |- ( Rel R -> ( A e. ran R <-> E. x x R A ) ) $=
      ( wrel crn wcel cv wbr wex elrng ibi relelrn ex exlimdv impbid2 ) CDZBCEZ
      FZAGZBCHZAIZRUAABCQJKPTRAPTRSBCLMNO $.
  $}

  ${
    releldm.1 $e |- Rel R $.
    $( The first argument of a binary relation belongs to its domain.
       (Contributed by NM, 28-Apr-2015.) $)
    releldmi $p |- ( A R B -> A e. dom R ) $=
      ( wrel wbr cdm wcel releldm mpan ) CEABCFACGHDABCIJ $.

    $( The second argument of a binary relation belongs to its range.
       (Contributed by NM, 28-Apr-2015.) $)
    relelrni $p |- ( A R B -> B e. ran R ) $=
      ( wrel wbr crn wcel relelrn mpan ) CEABCFBCGHDABCIJ $.
  $}

  ${
    $d x y w v $.  $d w v A $.
    dfrnf.1 $e |- F/_ x A $.
    dfrnf.2 $e |- F/_ y A $.
    $( Definition of range, using bound-variable hypotheses instead of distinct
       variable conditions.  (Contributed by NM, 14-Aug-1995.)  (Revised by
       Mario Carneiro, 15-Oct-2016.) $)
    dfrnf $p |- ran A = { y | E. x x A y } $=
      ( vv vw crn cv wbr wex cab dfrn2 nfcv nfbr nfv breq1 cbvexv1 abbii nfex
      weq breq2 exbidv cbvab 3eqtri ) CHFIZGIZCJZFKZGLAIZUGCJZAKZGLUJBIZCJZAKZB
      LFGCMUIULGUHUKFAAUFUGCAUFNDAUGNOUKFPUFUJUGCQRSULUOGBUKBABUJUGCBUJNEBUGNOT
      UOGPGBUAUKUNAUGUMUJCUBUCUDUE $.
  $}

  ${
    $d x y A $.  $d x y B $.
    elrn.1 $e |- A e. _V $.
    $( Membership in a range.  (Contributed by NM, 10-Jul-1994.) $)
    elrn2 $p |- ( A e. ran B <-> E. x <. x , A >. e. B ) $=
      ( vy cv cop wcel wex crn wceq opeq2 eleq1d exbidv dfrn3 elab2 ) AFZEFZGZC
      HZAIQBGZCHZAIEBCJDRBKZTUBAUCSUACRBQLMNAECOP $.

    $( Membership in a range.  (Contributed by NM, 2-Apr-2004.) $)
    elrn $p |- ( A e. ran B <-> E. x x B A ) $=
      ( crn wcel cv cop wex wbr elrn2 df-br exbii bitr4i ) BCEFAGZBHCFZAIOBCJZA
      IABCDKQPAOBCLMN $.
  $}

  ${
    $d x y z $.  $d y z A $.
    nfrn.1 $e |- F/_ x A $.
    $( Bound-variable hypothesis builder for domain.  (Contributed by NM,
       30-Jan-2004.)  (Revised by Mario Carneiro, 15-Oct-2016.) $)
    nfdm $p |- F/_ x dom A $=
      ( vy vz cdm cv wbr wex cab df-dm nfcv nfbr nfex nfab nfcxfr ) ABFDGZEGZBH
      ZEIZDJDEBKTADSAEAQRBAQLCARLMNOP $.

    $( Bound-variable hypothesis builder for range.  (Contributed by NM,
       1-Sep-1999.)  (Revised by Mario Carneiro, 15-Oct-2016.) $)
    nfrn $p |- F/_ x ran A $=
      ( crn ccnv cdm df-rn nfcnv nfdm nfcxfr ) ABDBEZFBGAKABCHIJ $.
  $}

  $( Domain of an intersection.  (Contributed by FL, 15-Oct-2012.) $)
  dmiin $p |- dom |^|_ x e. A B C_ |^|_ x e. A dom B $=
    ( ciin cdm wss nfii1 nfdm ssiinf cv wcel iinss2 dmss syl mprgbir ) ABCDZEZA
    BCEZDFQRFZABABRQAPABCGHIAJBKPCFSABCLPCMNO $.

  ${
    $d x y $.
    $( The range of a class of ordered pairs.  (Contributed by NM,
       14-Aug-1995.)  (Revised by Mario Carneiro, 4-Dec-2016.) $)
    rnopab $p |- ran { <. x , y >. | ph } = { y | E. x ph } $=
      ( copab crn wbr wex cab nfopab1 nfopab2 dfrnf cop wcel df-br opabid bitri
      cv exbii abbii eqtri ) ABCDZEBQZCQZUAFZBGZCHABGZCHBCUAABCIABCJKUEUFCUDABU
      DUBUCLUAMAUBUCUANABCOPRST $.
  $}

  ${
    $d y z A $.  $d y z B $.  $d x y z C $.
    rnmpt.1 $e |- F = ( x e. A |-> B ) $.
    $( The range of a function in maps-to notation.  (Contributed by Scott
       Fenton, 21-Mar-2011.)  (Revised by Mario Carneiro, 31-Aug-2015.) $)
    rnmpt $p |- ran F = { y | E. x e. A y = B } $=
      ( cv wcel wceq wa copab crn wex cab wrex rnopab cmpt df-mpt eqtri rneqi
      df-rex abbii 3eqtr4i ) AGCHBGDIZJZABKZLUEAMZBNELUDACOZBNUEABPEUFEACDQUFFA
      BCDRSTUHUGBUDACUAUBUC $.

    $( The range of a function in maps-to notation.  (Contributed by Mario
       Carneiro, 20-Feb-2015.) $)
    elrnmpt $p |- ( C e. V -> ( C e. ran F <-> E. x e. A C = B ) ) $=
      ( vy cv wceq wrex crn eqeq1 rexbidv rnmpt elab2g ) HIZCJZABKDCJZABKHDELFQ
      DJRSABQDCMNAHBCEGOP $.

    ${
      $d x A $.  $d x D $.
      elrnmpt1s.1 $e |- ( x = D -> B = C ) $.
      $( Elementhood in an image set.  (Contributed by Mario Carneiro,
         12-Sep-2015.) $)
      elrnmpt1s $p |- ( ( D e. A /\ C e. V ) -> C e. ran F ) $=
        ( wcel wceq wrex crn eqid rspceeqv mpan2 elrnmpt biimparc sylan ) EBJZD
        CKABLZDGJZDFMJZTDDKUADNAEBCDDIOPUBUCUAABCDFGHQRS $.
    $}

    $( Elementhood in an image set.  (Contributed by Mario Carneiro,
       31-Aug-2015.) $)
    elrnmpt1 $p |- ( ( x e. A /\ B e. V ) -> B e. ran F ) $=
      ( vz vy wcel cv crn csb wceq wa wex vex wb id csbeq1a nfcsb1v bitr2d wrex
      eleq12d biantrud equcoms spcev df-rex nfv nfcri nfeq2 nfan eqeq2d anbi12d
      cbvexv1 bitri eqeq1 anbi2d exbidv syl5bb rnmpt elab2g syl5ibr impcom ) CE
      IZAJZBIZCDKZIZVFVHVDGJZAVIBLZIZCAVICLZMZNZGOZVNVFGVEAPVNVFQAGVEVIMZVFVKVN
      VPVEVIBVJVPRAVIBSUCZVPVMVKAVICSZUDUAUEUFHJZCMZABUBZVOHCVGEWAVKVSVLMZNZGOZ
      VTVOWAVFVTNZAOWDVTABUGWEWCAGWEGUHVKWBAAGVJAVIBTUIAVSVLAVICTUJUKVPVFVKVTWB
      VQVPCVLVSVRULUMUNUOVTWCVNGVTWBVMVKVSCVLUPUQURUSAHBCDFUTVAVBVC $.

    $( Membership in the range of a function.  (Contributed by NM,
       27-Aug-2007.)  (Revised by Mario Carneiro, 31-Aug-2015.) $)
    elrnmptg $p |- ( A. x e. A B e. V ->
      ( C e. ran F <-> E. x e. A C = B ) ) $=
      ( vy crn wcel cv wceq wrex cab wral rnmpt eleq2i cvv wa syl wi wb rexbidv
      r19.29 eleq1 biimparc elexd rexlimivw ex eqeq1 elab3g syl5bb ) DEIZJDHKZC
      LZABMZHNZJZCFJZABOZDCLZABMZUMUQDAHBCEGPQUTVBDRJZUAURVBUBUTVBVCUTVBSUSVASZ
      ABMVCUSVAABUDVDVCABVDDFVADFJUSDCFUEUFUGUHTUIUPVBHDRUNDLUOVAABUNDCUJUCUKTU
      L $.

    elrnmpti.2 $e |- B e. _V $.
    $( Membership in the range of a function.  (Contributed by NM,
       30-Aug-2004.)  (Revised by Mario Carneiro, 31-Aug-2015.) $)
    elrnmpti $p |- ( C e. ran F <-> E. x e. A C = B ) $=
      ( cvv wcel wral crn wceq wrex wb rgenw elrnmptg ax-mp ) CHIZABJDEKIDCLABM
      NRABGOABCDEHFPQ $.
  $}

  $( The range of the empty set is empty.  Part of Theorem 3.8(v) of [Monk1]
     p. 36.  (Contributed by NM, 4-Jul-1994.) $)
  rn0 $p |- ran (/) = (/) $=
    ( c0 cdm wceq crn dm0 dm0rn0 mpbi ) ABACADACEAFG $.

  ${
    $d y A $.  $d y B $.  $d x y $.
    $( Alternate definition of indexed union when ` B ` is a set.  (Contributed
       by Mario Carneiro, 31-Aug-2015.) $)
    dfiun3g $p |- ( A. x e. A B e. C ->
                  U_ x e. A B = U. ran ( x e. A |-> B ) ) $=
      ( vy wcel wral ciun wceq wrex cab cuni cmpt crn dfiun2g eqid rnmpt unieqi
      cv syl6eqr ) CDFABGABCHESCIABJEKZLABCMZNZLAEBCDOUCUAAEBCUBUBPQRT $.

    $( Alternate definition of indexed intersection when ` B ` is a set.
       (Contributed by Mario Carneiro, 31-Aug-2015.) $)
    dfiin3g $p |- ( A. x e. A B e. C
               -> |^|_ x e. A B = |^| ran ( x e. A |-> B ) ) $=
      ( vy wcel wral ciin wceq wrex cab cint cmpt crn dfiin2g eqid rnmpt inteqi
      cv syl6eqr ) CDFABGABCHESCIABJEKZLABCMZNZLAEBCDOUCUAAEBCUBUBPQRT $.
  $}

  ${
    dfiun3.1 $e |- B e. _V $.
    $( Alternate definition of indexed union when ` B ` is a set.  (Contributed
       by Mario Carneiro, 31-Aug-2015.) $)
    dfiun3 $p |- U_ x e. A B = U. ran ( x e. A |-> B ) $=
      ( cvv wcel ciun cmpt crn cuni wceq dfiun3g cv a1i mprg ) CEFZABCGABCHIJKA
      BABCELPAMBFDNO $.

    $( Alternate definition of indexed intersection when ` B ` is a set.
       (Contributed by Mario Carneiro, 31-Aug-2015.) $)
    dfiin3 $p |- |^|_ x e. A B = |^| ran ( x e. A |-> B ) $=
      ( cvv wcel ciin cmpt crn cint wceq dfiin3g cv a1i mprg ) CEFZABCGABCHIJKA
      BABCELPAMBFDNO $.
  $}

  ${
    $d V k $.  $d X k $.
    $( Express a relative indexed intersection as an intersection.
       (Contributed by Stefan O'Rear, 22-Feb-2015.) $)
    riinint $p |- ( ( X e. V /\ A. k e. I S C_ X ) ->
        ( X i^i |^|_ k e. I S ) = |^| ( { X } u. ran ( k e. I |-> S ) ) ) $=
      ( wcel wss wral wa ciin cin cmpt crn cint csn cun cvv wceq ssexg expcom
      ralimdv imp dfiin3g syl ineq2d intun intsng adantr ineq1d syl5eq eqtr4d )
      EDFZAEGZBCHZIZEBCAJZKEBCALMZNZKZEOZUQPNZUOUPUREUOAQFZBCHZUPURRULUNVCULUMV
      BBCUMULVBAEDSTUAUBBCAQUCUDUEUOVAUTNZURKUSUTUQUFUOVDEURULVDERUNEDUGUHUIUJU
      K $.
  $}

  ${
    $d x y A $.
    $( A relation is empty iff its range is empty.  (Contributed by NM,
       15-Sep-2004.) $)
    relrn0 $p |- ( Rel A -> ( A = (/) <-> ran A = (/) ) ) $=
      ( wrel c0 wceq cdm crn reldm0 dm0rn0 syl6bb ) ABACDAECDAFCDAGAHI $.

    $( The domain and range of a class are included in its double union.
       (Contributed by NM, 13-May-2008.) $)
    dmrnssfld $p |- ( dom A u. ran A ) C_ U. U. A $=
      ( vx vy cdm crn cuni cv cop wex vex eldm2 cpr prid1 wss sseld mpi exlimiv
      wcel sylbi ssriv uniop uniopel syl5eqelr elssuni syl elrn2 prid2 unssi )
      ADZAEZAFZFZBUIULBGZUIRUMCGZHZARZCIUMULRZCUMABJZKUPUQCUPUMUMUNLZRUQUMUNURM
      UPUSULUMUPUSUKRUSULNUPUSUOFUKUMUNURCJZUAUMUNAURUTUBUCUSUKUDUEZOPQSTCUJULU
      NUJRUPBIUNULRZBUNAUTUFUPVBBUPUNUSRVBUMUNUTUGUPUSULUNVAOPQSTUH $.
  $}

  ${
    $d x y z A $.  $d x y z B $.
    $( Domain of a composition.  Theorem 21 of [Suppes] p. 63.  (Contributed by
       NM, 19-Mar-1998.)  (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
    dmcoss $p |- dom ( A o. B ) C_ dom B $=
      ( vx vy vz ccom cdm cv cop wcel wex wbr nfe1 wa exsimpl vex breq2 cbvexvw
      opelco 3imtr4i exlimi eldm2 eldm ssriv ) CABFZGZBGZCHZDHZIUEJZDKUHUIBLZDK
      ZUHUFJUHUGJUJULDUKDMUHEHZBLZUMUIALZNEKUNEKUJULUNUOEOEUHUIABCPZDPSUKUNDEUI
      UMUHBQRTUADUHUEUPUBDUHBUPUCTUD $.
  $}

  $( Range of a composition.  (Contributed by NM, 19-Mar-1998.) $)
  rncoss $p |- ran ( A o. B ) C_ ran A $=
    ( ccnv ccom cdm crn dmcoss df-rn cnvco dmeqi eqtri 3sstr4i ) BCZACZDZEZNEAB
    DZFZAFMNGRQCZEPQHSOABIJKAHL $.

  ${
    $d x y z A $.  $d x y z B $.
    $( Domain of a composition.  (Contributed by NM, 28-May-1998.)  (Proof
       shortened by Andrew Salmon, 27-Aug-2011.) $)
    dmcosseq $p |- ( ran B C_ dom A -> dom ( A o. B ) = dom B ) $=
      ( vx vy vz crn cdm wss ccom dmcoss a1i cv wbr wex wcel wi vex eldm eximdv
      syl6ibr wa ssel elrn imbi12i 19.8a imim1i pm3.2 sylcom sylbi excom opelco
      cop syl exbii eldm2 3imtr4g ssrdv eqssd ) BFZAGZHZABIZGZBGZVCVDHVAABJKVAC
      VDVCVACLZDLZBMZDNZVEELZULVBOZENZVEVDOVEVCOVAVHVGVFVIAMZUAZDNZENZVKVAVHVME
      NZDNVOVAVGVPDVAVFUSOZVFUTOZPZVGVPPZUSUTVFUBVSVGCNZVLENZPZVTVQWAVRWBCVFBDQ
      ZUCEVFAWDRUDWCVGWBVPVGWAWBVGCUEUFVGVLVMEVGVLUGSUHUIUMSVMEDUJTVJVNEDVEVIAB
      CQZEQUKUNTDVEBWEREVEVBWEUOUPUQUR $.

    $( Domain of a composition.  (Contributed by NM, 19-Mar-1998.) $)
    dmcoeq $p |- ( dom A = ran B -> dom ( A o. B ) = dom B ) $=
      ( cdm crn wceq wss ccom eqimss2 dmcosseq syl ) ACZBDZELKFABGCBCELKHABIJ
      $.
  $}

  $( Range of a composition.  (Contributed by NM, 19-Mar-1998.) $)
  rncoeq $p |- ( dom A = ran B -> ran ( A o. B ) = ran A ) $=
    ( ccnv cdm crn wceq ccom dmcoeq eqcom df-rn dfdm4 eqeq12i bitri cnvco dmeqi
    eqtri 3imtr4i ) BCZDZACZEZFZRTGZDZTDZFADZBEZFZABGZEZAEZFRTHUHUGUFFUBUFUGIUG
    SUFUABJAKLMUJUDUKUEUJUICZDUDUIJULUCABNOPAJLQ $.

  $( Equality theorem for restrictions.  (Contributed by NM, 7-Aug-1994.) $)
  reseq1 $p |- ( A = B -> ( A |` C ) = ( B |` C ) ) $=
    ( wceq cvv cxp cin cres ineq1 df-res 3eqtr4g ) ABDACEFZGBLGACHBCHABLIACJBCJ
    K $.

  $( Equality theorem for restrictions.  (Contributed by NM, 8-Aug-1994.) $)
  reseq2 $p |- ( A = B -> ( C |` A ) = ( C |` B ) ) $=
    ( wceq cvv cxp cin cres xpeq1 ineq2d df-res 3eqtr4g ) ABDZCAEFZGCBEFZGCAHCB
    HMNOCABEIJCAKCBKL $.

  ${
    reseqi.1 $e |- A = B $.
    $( Equality inference for restrictions.  (Contributed by NM,
       21-Oct-2014.) $)
    reseq1i $p |- ( A |` C ) = ( B |` C ) $=
      ( wceq cres reseq1 ax-mp ) ABEACFBCFEDABCGH $.

    $( Equality inference for restrictions.  (Contributed by Paul Chapman,
       22-Jun-2011.) $)
    reseq2i $p |- ( C |` A ) = ( C |` B ) $=
      ( wceq cres reseq2 ax-mp ) ABECAFCBFEDABCGH $.

    reseqi.2 $e |- C = D $.
    $( Equality inference for restrictions.  (Contributed by NM,
       21-Oct-2014.) $)
    reseq12i $p |- ( A |` C ) = ( B |` D ) $=
      ( cres reseq1i reseq2i eqtri ) ACGBCGBDGABCEHCDBFIJ $.
  $}

  ${
    reseqd.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for restrictions.  (Contributed by NM,
       21-Oct-2014.) $)
    reseq1d $p |- ( ph -> ( A |` C ) = ( B |` C ) ) $=
      ( wceq cres reseq1 syl ) ABCFBDGCDGFEBCDHI $.

    $( Equality deduction for restrictions.  (Contributed by Paul Chapman,
       22-Jun-2011.) $)
    reseq2d $p |- ( ph -> ( C |` A ) = ( C |` B ) ) $=
      ( wceq cres reseq2 syl ) ABCFDBGDCGFEBCDHI $.

    reseqd.2 $e |- ( ph -> C = D ) $.
    $( Equality deduction for restrictions.  (Contributed by NM,
       21-Oct-2014.) $)
    reseq12d $p |- ( ph -> ( A |` C ) = ( B |` D ) ) $=
      ( cres reseq1d reseq2d eqtrd ) ABDHCDHCEHABCDFIADECGJK $.
  $}

  ${
    nfres.1 $e |- F/_ x A $.
    nfres.2 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for restriction.  (Contributed by NM,
       15-Sep-2003.)  (Revised by David Abernethy, 19-Jun-2012.) $)
    nfres $p |- F/_ x ( A |` B ) $=
      ( cres cvv cxp cin df-res nfcv nfxp nfin nfcxfr ) ABCFBCGHZIBCJABODACGEAG
      KLMN $.
  $}

  $( Distribute proper substitution through the restriction of a class.
     (Contributed by Alan Sare, 10-Nov-2012.)  (Revised by NM, 23-Aug-2018.) $)
  csbres $p |- [_ A / x ]_ ( B |` C ) = ( [_ A / x ]_ B |` [_ A / x ]_ C ) $=
    ( cres csb cvv cxp cin df-res csbeq2i wcel csbxp csbconstg xpeq2d syl5eq wn
    wceq c0 csbprc 0xp a1i xpeq1d 3eqtr4rd pm2.61i ineq2i csbin 3eqtr4i eqtri )
    ABCDEZFABCDGHZIZFZABCFZABDFZEZABUJULCDJKUNABUKFZIUNUOGHZIUMUPUQURUNBGLZUQUR
    RUSUQUOABGFZHURABDGMUSUTGUOABGGNOPUSQZSGHZSURUQVBSRVAGUAUBVAUOSGABDTUCABUKT
    UDUEUFABCUKUGUNUOJUHUI $.

  $( A restriction to the empty set is empty.  (Contributed by NM,
     12-Nov-1994.) $)
  res0 $p |- ( A |` (/) ) = (/) $=
    ( c0 cres cvv cxp cin df-res 0xp ineq2i in0 3eqtri ) ABCABDEZFABFBABGLBADHI
    AJK $.

  ${
    $d A x y z $.  $d B x y z $.
    $( Alternate definition of restriction.  (Contributed by Scott Fenton,
       17-Apr-2014.)  (Revised by Mario Carneiro, 19-Apr-2014.) $)
    dfres3 $p |- ( A |` B ) = ( A i^i ( B X. ran A ) ) $=
      ( vx vy vz cres cvv cxp cin crn df-res cv wcel wa cop wceq wex vex elxp
      wb biantru opelrn biantrud syl5bbr syl6bi pm5.32d 2exbidv 3bitr4g pm5.32i
      eleq1 com12 elin bitr4i ineqri eqtri ) ABFABGHZIABAJZHZIZABKCAUPUSCLZAMZU
      TUPMZNVAUTURMZNUTUSMVAVBVCVAUTDLZELZOZPZVDBMZVEGMZNZNZEQDQVGVHVEUQMZNZNZE
      QDQVBVCVAVKVNDEVAVGVJVMVGVAVJVMTZVGVAVFAMZVOUTVFAUJVJVHVPVMVIVHERZUAVPVLV
      HVDVEADRVQUBUCUDUEUKUFUGDEUTBGSDEUTBUQSUHUIUTAURULUMUNUO $.
  $}

  $( Ordered pair elementhood in a restriction.  Exercise 13 of [TakeutiZaring]
     p. 25.  (Contributed by NM, 13-Nov-1995.)  (Revised by BJ, 18-Feb-2022.)
     Commute the consequent.  (Revised by Peter Mazsa, 24-Sep-2022.) $)
  opelres $p |- ( C e. V ->
      ( <. B , C >. e. ( R |` A ) <-> ( B e. A /\ <. B , C >. e. R ) ) ) $=
    ( cop cres wcel cvv cxp wa df-res elin2 elex biantrud opelxp anbi1cd syl5bb
    syl6rbbr ) BCFZDAGZHTDHZTAIJZHZKCEHZBAHZUBKTDUCUADALMUEUDUFUBUEUFUFCIHZKUDU
    EUGUFCENOBCAIPSQR $.

  $( Binary relation on a restriction.  (Contributed by Mario Carneiro,
     4-Nov-2015.)  Commute the consequent.  (Revised by Peter Mazsa,
     24-Sep-2022.) $)
  brres $p |- ( C e. V -> ( B ( R |` A ) C <-> ( B e. A /\ B R C ) ) ) $=
    ( wcel cop cres wa wbr opelres df-br anbi2i 3bitr4g ) CEFBCGZDAHZFBAFZODFZI
    BCPJQBCDJZIABCDEKBCPLSRQBCDLMN $.

  ${
    opelresi.1 $e |- C e. _V $.
    $( Ordered pair membership in a restriction.  Exercise 13 of
       [TakeutiZaring] p. 25.  (Contributed by NM, 13-Nov-1995.) $)
    opelresi $p |- ( <. B , C >. e. ( R |` A ) <->
                     ( B e. A /\ <. B , C >. e. R ) ) $=
      ( cvv wcel cop cres wa wb opelres ax-mp ) CFGBCHZDAIGBAGNDGJKEABCDFLM $.

    $( Binary relation on a restriction.  (Contributed by NM, 12-Dec-2006.) $)
    brresi $p |- ( B ( R |` A ) C <-> ( B e. A /\ B R C ) ) $=
      ( cvv wcel cres wbr wa wb brres ax-mp ) CFGBCDAHIBAGBCDIJKEABCDFLM $.
  $}

  $( Old proof of ~ opelres .  Obsolete as of 24-Sep-2022.  (Contributed by NM,
     14-Oct-2005.)  (Revised by BJ, 18-Feb-2022.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  opelresgOLD2 $p |- ( B e. V -> ( <. A , B >. e. ( C |` D ) <->
                       ( <. A , B >. e. C /\ A e. D ) ) ) $=
    ( wcel cop cres cvv cxp cin wa wb df-res eleq2i a1i elin opelxp elex biid
    rbaib syl syl5bb anbi2d 3bitrd ) BEFZABGZCDHZFZUGCDIJZKZFZUGCFZUGUJFZLZUMAD
    FZLUIULMUFUHUKUGCDNOPULUOMUFUGCUJQPUFUNUPUMUNUPBIFZLZUFUPABDIRUFUQURUPMBESU
    RUPUQURTUAUBUCUDUE $.

  $( Old proof of ~ brres .  Obsolete as of 24-Sep-2022.  (Contributed by Mario
     Carneiro, 4-Nov-2015.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  brresgOLD2 $p |- ( B e. V -> ( A ( C |` D ) B <-> ( A C B /\ A e. D ) ) ) $=
    ( wcel cop cres wa wbr opelresgOLD2 df-br anbi1i 3bitr4g ) BEFABGZCDHZFOCFZ
    ADFZIABPJABCJZRIABCDEKABPLSQRABCLMN $.

  ${
    opelresOLD2.1 $e |- B e. _V $.
    $( Old proof of ~ opelresi .  Obsolete as of 24-Sep-2022.  (Contributed by
       NM, 13-Nov-1995.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    opelresOLD2 $p |- ( <. A , B >. e. ( C |` D ) <->
                    ( <. A , B >. e. C /\ A e. D ) ) $=
      ( cvv wcel cop cres wa wb opelresgOLD2 ax-mp ) BFGABHZCDIGNCGADGJKEABCDFL
      M $.

    $( Old proof of ~ brresi .  Obsolete as of 24-Sep-2022.  (Contributed by
       NM, 12-Dec-2006.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    brresOLD2 $p |- ( A ( C |` D ) B <-> ( A C B /\ A e. D ) ) $=
      ( cvv wcel cres wbr wa wb brresgOLD2 ax-mp ) BFGABCDHIABCIADGJKEABCDFLM
      $.
  $}

  ${
    opres.1 $e |- B e. _V $.
    $( Ordered pair membership in a restriction when the first member belongs
       to the restricting class.  (Contributed by NM, 30-Apr-2004.)  (Proof
       shortened by Andrew Salmon, 27-Aug-2011.) $)
    opres $p |- ( A e. D ->
                    ( <. A , B >. e. ( C |` D ) <-> <. A , B >. e. C ) ) $=
      ( cop cres wcel opelresi baib ) ABFZCDGHADHKCHDABCEIJ $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( A restricted identity relation is equivalent to equality in its domain.
       (Contributed by NM, 30-Apr-2004.) $)
    resieq $p |- ( ( B e. A /\ C e. A ) -> ( B ( _I |` A ) C <-> B = C ) ) $=
      ( vx wcel cid cres wbr wceq wb cv wi breq2 eqeq2 bibi12d imbi2d cop opres
      vex df-br ideq bitr3i 3bitr4g vtoclg impcom ) CAEBAEZBCFAGZHZBCIZJZUFBDKZ
      UGHZBUKIZJZLUFUJLDCAUKCIZUNUJUFUOULUHUMUIUKCBUGMUKCBNOPUFBUKQZUGEUPFEZULU
      MBUKFADSZRBUKUGTUMBUKFHUQBUKURUABUKFTUBUCUDUE $.
  $}

  $( ` <. A , A >. ` belongs to a restriction of the identity class iff ` A `
     belongs to the restricting class.  (Contributed by FL, 27-Oct-2008.)
     (Revised by NM, 30-Mar-2016.) $)
  opelidres $p |- ( A e. V -> ( <. A , A >. e. ( _I |` B ) <-> A e. B ) ) $=
    ( wcel cop cid cres wbr ididg df-br sylib opelres mpbiran2d ) ACDZAAEZFBGDA
    BDOFDZNAAFHPACIAAFJKBAAFCLM $.

  $( The restriction of a restriction.  (Contributed by NM, 27-Mar-2008.) $)
  resres $p |- ( ( A |` B ) |` C ) = ( A |` ( B i^i C ) ) $=
    ( cres cvv cxp cin df-res ineq1i xpindir ineq2i inass 3eqtr4ri 3eqtri ) ABD
    ZCDOCEFZGABEFZGZPGZABCGZDZOCHORPABHIATEFZGAQPGZGUASUBUCABCEJKATHAQPLMN $.

  $( Distributive law for restriction over union.  Theorem 31 of [Suppes]
     p. 65.  (Contributed by NM, 30-Sep-2002.) $)
  resundi $p |- ( A |` ( B u. C ) ) = ( ( A |` B ) u. ( A |` C ) ) $=
    ( cun cvv cxp cin cres xpundir ineq2i indi eqtri df-res uneq12i 3eqtr4i ) A
    BCDZEFZGZABEFZGZACEFZGZDZAPHABHZACHZDRASUADZGUCQUFABCEIJASUAKLAPMUDTUEUBABM
    ACMNO $.

  $( Distributive law for restriction over union.  (Contributed by NM,
     23-Sep-2004.) $)
  resundir $p |- ( ( A u. B ) |` C ) = ( ( A |` C ) u. ( B |` C ) ) $=
    ( cun cvv cxp cin cres indir df-res uneq12i 3eqtr4i ) ABDZCEFZGANGZBNGZDMCH
    ACHZBCHZDABNIMCJQORPACJBCJKL $.

  $( Class restriction distributes over intersection.  (Contributed by FL,
     6-Oct-2008.) $)
  resindi $p |- ( A |` ( B i^i C ) ) = ( ( A |` B ) i^i ( A |` C ) ) $=
    ( cin cvv cxp cres xpindir ineq2i inindi eqtri df-res ineq12i 3eqtr4i ) ABC
    DZEFZDZABEFZDZACEFZDZDZAOGABGZACGZDQARTDZDUBPUEABCEHIARTJKAOLUCSUDUAABLACLM
    N $.

  $( Class restriction distributes over intersection.  (Contributed by NM,
     18-Dec-2008.) $)
  resindir $p |- ( ( A i^i B ) |` C ) = ( ( A |` C ) i^i ( B |` C ) ) $=
    ( cin cvv cxp cres inindir df-res ineq12i 3eqtr4i ) ABDZCEFZDAMDZBMDZDLCGAC
    GZBCGZDABMHLCIPNQOACIBCIJK $.

  $( Move intersection into class restriction.  (Contributed by NM,
     18-Dec-2008.) $)
  inres $p |- ( A i^i ( B |` C ) ) = ( ( A i^i B ) |` C ) $=
    ( cin cvv cxp cres inass df-res ineq2i 3eqtr4ri ) ABDZCEFZDABMDZDLCGABCGZDA
    BMHLCIONABCIJK $.

  $( Commutative law for restriction and difference.  (Contributed by AV,
     7-Jun-2021.) $)
  resdifcom $p |- ( ( A |` B ) \ C ) = ( ( A \ C ) |` B ) $=
    ( cdif cvv cxp cin cres indif1 df-res difeq1i 3eqtr4ri ) ACDZBEFZGANGZCDMBH
    ABHZCDANCIMBJPOCABJKL $.

  ${
    $d x C $.
    $( Distribution of restriction over indexed union.  (Contributed by Mario
       Carneiro, 29-May-2015.)  (Proof shortened by JJ, 25-Aug-2021.) $)
    resiun1 $p |- ( U_ x e. A B |` C ) = U_ x e. A ( B |` C ) $=
      ( cvv cxp cin ciun cres iunin1 wceq cv wcel df-res a1i iuneq2i 3eqtr4ri )
      ABCDEFZGZHABCHZRGABCDIZHTDIABRCJABUASUASKALBMCDNOPTDNQ $.

    $( Distribution of restriction over indexed union.  (Contributed by Mario
       Carneiro, 29-May-2015.) $)
    resiun2 $p |- ( C |` U_ x e. A B ) = U_ x e. A ( C |` B ) $=
      ( ciun cres cvv cxp cin df-res wceq cv a1i iuneq2i xpiundir ineq2i iunin2
      wcel eqtr4i ) DABCEZFDTGHZIZABDCFZEZDTJUDABDCGHZIZEZUBABUCUFUCUFKALBRDCJM
      NUBDABUEEZIUGUAUHDABCGOPABDUEQSSS $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( The domain of a restriction.  Exercise 14 of [TakeutiZaring] p. 25.
       (Contributed by NM, 1-Aug-1994.) $)
    dmres $p |- dom ( A |` B ) = ( B i^i dom A ) $=
      ( vx vy cdm cin cres cv cop wex wa vex eldm2 19.42v opelresi exbii anbi2i
      wcel 3bitr4i bitr2i ineqri eqcomi ) BAEZFABGZEZCBUCUECHZUERUFDHZIZUDRZDJZ
      UFBRZUFUCRZKZDUFUDCLZMUKUHARZKZDJUKUODJZKUJUMUKUODNUIUPDBUFUGADLOPULUQUKD
      UFAUNMQSTUAUB $.
  $}

  $( A domain restricted to a subclass equals the subclass.  (Contributed by
     NM, 2-Mar-1997.) $)
  ssdmres $p |- ( A C_ dom B <-> dom ( B |` A ) = A ) $=
    ( cdm wss cin wceq cres df-ss dmres eqeq1i bitr4i ) ABCZDALEZAFBAGCZAFALHNM
    ABAIJK $.

  $( The domain of a restriction to a set exists.  (Contributed by NM,
     7-Apr-1995.) $)
  dmresexg $p |- ( B e. V -> dom ( A |` B ) e. _V ) $=
    ( wcel cres cdm cin cvv dmres inex1g syl5eqel ) BCDABEFBAFZGHABIBLCJK $.

  $( A class includes its restriction.  Exercise 15 of [TakeutiZaring] p. 25.
     (Contributed by NM, 2-Aug-1994.) $)
  resss $p |- ( A |` B ) C_ A $=
    ( cres cvv cxp cin df-res inss1 eqsstri ) ABCABDEZFAABGAJHI $.

  $( Commutative law for restriction.  (Contributed by NM, 27-Mar-1998.) $)
  rescom $p |- ( ( A |` B ) |` C ) = ( ( A |` C ) |` B ) $=
    ( cin cres incom reseq2i resres 3eqtr4i ) ABCDZEACBDZEABECEACEBEJKABCFGABCH
    ACBHI $.

  $( Subclass theorem for restriction.  (Contributed by NM, 16-Aug-1994.) $)
  ssres $p |- ( A C_ B -> ( A |` C ) C_ ( B |` C ) ) $=
    ( wss cvv cxp cin cres ssrin df-res 3sstr4g ) ABDACEFZGBLGACHBCHABLIACJBCJK
    $.

  $( Subclass theorem for restriction.  (Contributed by NM, 22-Mar-1998.)
     (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
  ssres2 $p |- ( A C_ B -> ( C |` A ) C_ ( C |` B ) ) $=
    ( wss cvv cxp cin cres xpss1 sslin syl df-res 3sstr4g ) ABDZCAEFZGZCBEFZGZC
    AHCBHNOQDPRDABEIOQCJKCALCBLM $.

  $( A restriction is a relation.  Exercise 12 of [TakeutiZaring] p. 25.
     (Contributed by NM, 2-Aug-1994.)  (Proof shortened by Andrew Salmon,
     27-Aug-2011.) $)
  relres $p |- Rel ( A |` B ) $=
    ( cres cvv cxp wss wrel cin df-res inss2 eqsstri relxp relss mp2 ) ABCZBDEZ
    FPGOGOAPHPABIAPJKBDLOPMN $.

  $( Absorption law for restriction.  Exercise 17 of [TakeutiZaring] p. 25.
     (Contributed by NM, 9-Aug-1994.) $)
  resabs1 $p |- ( B C_ C -> ( ( A |` C ) |` B ) = ( A |` B ) ) $=
    ( wss cres cin resres wceq sseqin2 reseq2 sylbi syl5eq ) BCDZACEBEACBFZEZAB
    EZACBGMNBHOPHBCINBAJKL $.

  ${
    resabs1d.b $e |- ( ph -> B C_ C ) $.
    $( Absorption law for restriction, deduction form.  (Contributed by Glauco
       Siliprandi, 11-Dec-2019.) $)
    resabs1d $p |- ( ph -> ( ( A |` C ) |` B ) = ( A |` B ) ) $=
      ( wss cres wceq resabs1 syl ) ACDFBDGCGBCGHEBCDIJ $.
  $}

  $( Absorption law for restriction.  (Contributed by NM, 27-Mar-1998.) $)
  resabs2 $p |- ( B C_ C -> ( ( A |` B ) |` C ) = ( A |` B ) ) $=
    ( wss cres rescom resabs1 syl5eq ) BCDABEZCEACEBEIABCFABCGH $.

  $( Idempotent law for restriction.  (Contributed by NM, 27-Mar-1998.) $)
  residm $p |- ( ( A |` B ) |` B ) = ( A |` B ) $=
    ( wss cres wceq ssid resabs2 ax-mp ) BBCABDZBDIEBFABBGH $.

  $( A restriction to an image.  (Contributed by NM, 29-Sep-2004.) $)
  resima $p |- ( ( A |` B ) " B ) = ( A " B ) $=
    ( cres crn cima residm rneqi df-ima 3eqtr4i ) ABCZBCZDJDJBEABEKJABFGJBHABHI
    $.

  $( Image under a restricted class.  (Contributed by FL, 31-Aug-2009.)  (Proof
     shortened by JJ, 25-Aug-2021.) $)
  resima2 $p |- ( B C_ C -> ( ( A |` C ) " B ) = ( A " B ) ) $=
    ( wss cin cres crn cima wceq sseqin2 reseq2 sylbi rneqd df-ima resres rneqi
    eqtri 3eqtr4g ) BCDZACBEZFZGZABFZGACFZBHZABHSUAUCSTBIUAUCIBCJTBAKLMUEUDBFZG
    UBUDBNUFUAACBOPQABNR $.

  $( Restriction of a constant function (or other Cartesian product).
     (Contributed by Stefan O'Rear, 24-Jan-2015.) $)
  xpssres $p |- ( C C_ A -> ( ( A X. B ) |` C ) = ( C X. B ) ) $=
    ( wss cxp cres cin cvv df-res inxp inv1 xpeq2i 3eqtri sseqin2 biimpi xpeq1d
    wceq syl5eq ) CADZABEZCFZACGZBEZCBEUATCHEGUBBHGZEUCTCIABCHJUDBUBBKLMSUBCBSU
    BCQCANOPR $.

  ${
    $d x y A $.  $d x y B $.  $d x y C $.  $d x y R $.
    $( Membership in an intersection with a Cartesian product.  (Contributed by
       Peter Mazsa, 9-Sep-2022.) $)
    elinxp $p |- ( C e. ( R i^i ( A X. B ) ) <->
      E. x e. A E. y e. B ( C = <. x , y >. /\ <. x , y >. e. R ) ) $=
      ( cxp cin wcel cv cop wceq wa wrex wex wrel relinxp elrel mpan eleq1 an12
      biimpd opelinxp biimpi syl6com ancld syl6ib 2eximdv r2ex simplbi2 biimprd
      mpd sylibr syl9 impd rexlimivv impbii ) EFCDGHZIZEAJZBJZKZLZVBFIZMZBDNACN
      ZUSUTCIVADIMZVEMZBOAOZVFUSVCBOAOZVIURPUSVJCDFQABEURRSUSVCVHABUSVCVCVGVDMZ
      MVHUSVCVKVCUSVBURIZVKVCUSVLEVBURTZUBVLVKCDUTVAFUCZUDUEUFVCVGVDUAUGUHULVEA
      BCDUIUMVEUSABCDVGVCVDUSVGVDVLVCUSVLVGVDVNUJVCUSVLVMUKUNUOUPUQ $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.
    $( Membership in a restriction.  (Contributed by Scott Fenton,
       17-Mar-2011.)  (Proof shortened by Peter Mazsa, 9-Sep-2022.) $)
    elres $p |- ( A e. ( B |` C )
          <-> E. x e. C E. y ( A = <. x , y >. /\ <. x , y >. e. B ) ) $=
      ( cres wcel cvv cxp cin cv cop wceq wa wrex wex df-res eleq2i elinxp rexv
      rexbii 3bitri ) CDEFZGCDEHIJZGCAKBKLZMUEDGNZBHOZAEOUFBPZAEOUCUDCDEQRABEHC
      DSUGUHAEUFBTUAUB $.

    $d x y A $.  $d x y B $.  $d x y C $.
    $( Obsolete proof of ~ elres as of 15-Sep-2022.  (Contributed by Scott
       Fenton, 17-Mar-2011.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    elresOLD $p |- ( A e. ( B |` C )
          <-> E. x e. C E. y ( A = <. x , y >. /\ <. x , y >. e. B ) ) $=
      ( cres wcel cv cop wceq wex wrex wrel relres elrel mpan eleq1 biimpd vex
      wa opelresOLD2 biimpi ancomd syl6com ancld an12 syl6ib 2eximdv mpd df-rex
      rexcom4 exbii excom 3bitri simplbi2com biimprd syl9 impd exlimdv rexlimiv
      sylibr impbii ) CDEFZGZCAHZBHZIZJZVGDGZTZBKZAELZVDVEEGZVJTZBKAKZVLVDVHBKA
      KZVOVCMVDVPDENABCVCOPVDVHVNABVDVHVHVMVITZTVNVDVHVQVHVDVGVCGZVQVHVDVRCVGVC
      QZRVRVIVMVRVIVMTVEVFDEBSUAZUBUCUDUEVHVMVIUFUGUHUIVLVJAELZBKVNAKZBKVOVJABE
      UKWAWBBVJAEUJULVNBAUMUNVAVKVDAEVMVJVDBVMVHVIVDVMVIVRVHVDVRVIVMVTUOVHVDVRV
      SUPUQURUSUTVB $.

    ${
      elsnres.1 $e |- C e. _V $.
      $( Membership in restriction to a singleton.  (Contributed by Scott
         Fenton, 17-Mar-2011.) $)
      elsnres $p |- ( A e. ( B |` { C } )
            <-> E. y ( A = <. C , y >. /\ <. C , y >. e. B ) ) $=
        ( vx csn cres wcel cv cop wceq wa wex elres rexcom4 opeq1 eqeq2d eleq1d
        wrex anbi12d rexsn exbii 3bitri ) BCDGZHIBFJZAJZKZLZUHCIZMZANFUETUKFUET
        ZANBDUGKZLZUMCIZMZANFABCUEOUKFAUEPULUPAUKUPFDEUFDLZUIUNUJUOUQUHUMBUFDUG
        QZRUQUHUMCURSUAUBUCUD $.
    $}

    $( Simplification law for restriction.  (Contributed by NM,
       16-Aug-1994.) $)
    relssres $p |- ( ( Rel A /\ dom A C_ B ) -> ( A |` B ) = A ) $=
      ( vx vy wrel cdm wss wa cres wceq simpl cv cop wcel vex opeldm ssel ancrd
      wi syl5 opelresi syl6ibr adantl relssdv resss jctil eqss sylibr ) AEZAFZB
      GZHZABIZAGZAUMGZHUMAJULUOUNULCDAUMUIUKKUKCLZDLZMZANZURUMNZSUIUKUSUPBNZUSH
      UTUKUSVAUSUPUJNUKVAUPUQACODOZPUJBUPQTRBUPUQAVBUAUBUCUDABUEUFUMAUGUH $.
  $}

  $( The domain of a restriction to a singleton is a singleton.  (Contributed
     by Alexander van der Vekens, 2-Jul-2017.) $)
  dmressnsn $p |- ( A e. dom F -> dom ( F |` { A } ) = { A } ) $=
    ( cdm wcel csn cres cin dmres wss wceq snssi df-ss sylib syl5eq ) ABCZDZBAE
    ZFCQOGZQBQHPQOIRQJAOKQOLMN $.

  $( The element of the domain of a restriction to a singleton is the element
     of the singleton.  (Contributed by Alexander van der Vekens,
     2-Jul-2017.) $)
  eldmressnsn $p |- ( A e. dom F -> A e. dom ( F |` { A } ) ) $=
    ( cdm wcel csn cres snidg dmressnsn eleqtrrd ) ABCZDAAEZBKFCAJGABHI $.

  $( An element of the domain (of a relation) is an element of the domain of
     the restriction (of the relation) to the singleton containing this
     element.  (Contributed by Alexander van der Vekens, 22-Jul-2018.) $)
  eldmeldmressn $p |- ( X e. dom F <-> X e. dom ( F |` { X } ) ) $=
    ( cdm wcel csn cres eldmressnsn cin elinel2 dmres eleq2s impbii ) BACZDZBAB
    EZFCZDBAGNBOMHPBOMIAOJKL $.

  $( A relation restricted to its domain equals itself.  (Contributed by NM,
     12-Dec-2006.) $)
  resdm $p |- ( Rel A -> ( A |` dom A ) = A ) $=
    ( wrel cdm wss cres wceq ssid relssres mpan2 ) ABACZJDAJEAFJGAJHI $.

  $( The restriction of a set is a set.  (Contributed by NM, 28-Mar-1998.)
     (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
  resexg $p |- ( A e. V -> ( A |` B ) e. _V ) $=
    ( cres wss wcel cvv resss ssexg mpan ) ABDZAEACFKGFABHKACIJ $.

  ${
    resex.1 $e |- A e. _V $.
    $( The restriction of a set is a set.  (Contributed by Jeff Madsen,
       19-Jun-2011.) $)
    resex $p |- ( A |` B ) e. _V $=
      ( cvv wcel cres resexg ax-mp ) ADEABFDECABDGH $.
  $}

  $( When restricting a relation, intersecting with the domain of the relation
     has no effect.  (Contributed by FL, 6-Oct-2008.) $)
  resindm $p |- ( Rel A -> ( A |` ( B i^i dom A ) ) = ( A |` B ) ) $=
    ( wrel cres cdm cin resdm resindi incom inres inidm reseq1i 3eqtrri 3eqtr4g
    ineq2d ) ACZABDZAAEZDZFQAFZABRFDQPSAQAGOABRHTAQFAAFZBDQQAIAABJUAABAKLMN $.

  $( Restricting a relation to its domain without a set is the same as
     restricting the relation to the universe without this set.  (Contributed
     by AV, 2-Dec-2018.) $)
  resdmdfsn $p |- ( Rel R -> ( R |` ( _V \ { X } ) )
                             = ( R |` ( dom R \ { X } ) ) ) $=
    ( wrel cdm csn cdif cres cvv cin indif1 incom eqtri difeq1i reseq2i resindm
    inv1 syl5reqr ) ACAADZBEZFZGAHSFZRIZGAUAGUBTAUBHRIZSFTHRSJUCRSUCRHIRHRKRPLM
    LNAUAOQ $.

  ${
    $d x y A $.
    $( Restriction of a class abstraction of ordered pairs.  (Contributed by
       NM, 5-Nov-2002.) $)
    resopab $p |- ( { <. x , y >. | ph } |` A ) =
                  { <. x , y >. | ( x e. A /\ ph ) } $=
      ( copab cres cvv cxp cin cv wa df-res df-xp biantru opabbii eqtr4i ineq2i
      wcel vex eqtri incom inopab ) ABCEZDFUCDGHZIZBJDRZAKBCEZUCDLUEUFBCEZUCIZU
      GUEUCUHIUIUDUHUCUDUFCJGRZKZBCEUHBCDGMUFUKBCUJUFCSNOPQUCUHUATUFABCUBTT $.

    $( A subclass of the identity function is the identity function restricted
       to its domain.  (Contributed by NM, 13-Dec-2003.)  (Proof shortened by
       Andrew Salmon, 27-Aug-2011.) $)
    iss $p |- ( A C_ _I <-> A = ( _I |` dom A ) ) $=
      ( vx vy cid wss cdm cres wceq cv cop wcel wb wal wa vex opeldm a1i syl5bi
      wi wrel ssel jcad wbr df-br bitr3i wex eldm2 opeq2 eleq1d biimprcd sylcom
      ideq exlimdv imbi2d syl5ibcom impcomd impbid opelresi alrimivv reli relss
      syl6bbr mpi relres eqrel sylancl mpbird resss sseq1 mpbiri impbii ) ADEZA
      DAFZGZHZVLVOBIZCIZJZAKZVRVNKZLZCMBMZVLWABCVLVSVPVMKZVRDKZNZVTVLVSWEVLVSWC
      WDVSWCSVLVPVQABOZCOZPQADVRUAZUBVLWDWCVSWDVPVQHZVLWCVSSZWDVPVQDUCWIVPVQDUD
      VPVQWGULUEZVLWCVPVPJZAKZSWIWJWCVSCUFVLWMCVPAWFUGVLVSWMCVLVSWDWMWHWDWIVSWM
      WKWIWMVSWIWLVRAVPVQVPUHUIZUJRUKUMRWIWMVSWCWNUNUORUPUQVMVPVQDWGURVBUSVLATZ
      VNTVOWBLVLDTWOUTADVAVCDVMVDBCAVNVEVFVGVOVLVNDEDVMVHAVNDVIVJVK $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d y C $.
    $( Restriction of a class abstraction of ordered pairs.  (Contributed by
       NM, 24-Aug-2007.) $)
    resopab2 $p |- ( A C_ B -> ( { <. x , y >. | ( x e. B /\ ph ) } |` A ) =
                  { <. x , y >. | ( x e. A /\ ph ) } ) $=
      ( wss cv wcel wa copab cres resopab pm4.71d anbi1d anass syl6rbb opabbidv
      ssel syl5eq ) DEFZBGZEHZAIZBCJDKUADHZUCIZBCJUDAIZBCJUCBCDLTUEUFBCTUFUDUBI
      ZAIUETUDUGATUDUBDEUARMNUDUBAOPQS $.

    $( Restriction of the mapping operation.  (Contributed by Mario Carneiro,
       15-Jul-2013.) $)
    resmpt $p |- ( B C_ A -> ( ( x e. A |-> C ) |` B ) = ( x e. B |-> C ) ) $=
      ( vy wss cv wcel wceq wa copab cres cmpt resopab2 df-mpt reseq1i 3eqtr4g
      ) CBFAGZBHEGDIZJAEKZCLRCHSJAEKABDMZCLACDMSAECBNUATCAEBDOPAECDOQ $.

    $( Unconditional restriction of the mapping operation.  (Contributed by
       Stefan O'Rear, 24-Jan-2015.)  (Proof shortened by Mario Carneiro,
       22-Mar-2015.) $)
    resmpt3 $p |- ( ( x e. A |-> C ) |` B ) = ( x e. ( A i^i B ) |-> C ) $=
      ( cmpt cres cin resres wss wceq ssid resmpt ax-mp reseq1i inss1 3eqtr3i )
      ABDEZBFZCFQBCGZFZQCFASDEZQBCHRQCBBIRQJBKABBDLMNSBITUAJBCOABSDLMP $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.  $d y C $.
    resmptf.a $e |- F/_ x A $.
    resmptf.b $e |- F/_ x B $.
    $( Restriction of the mapping operation.  (Contributed by Thierry Arnoux,
       28-Mar-2017.) $)
    resmptf $p |- ( B C_ A -> ( ( x e. A |-> C ) |` B ) = ( x e. B |-> C ) ) $=
      ( vy wss cv cmpt cres resmpt nfcv nfcsb1v csbeq1a cbvmptf reseq1i 3eqtr4g
      csb ) CBHGBAGIZDSZJZCKGCUAJABDJZCKACDJGBCUALUCUBCAGBDUAEGBMGDMZATDNZATDOZ
      PQAGCDUAFGCMUDUEUFPR $.
  $}

  ${
    $d A x $.  $d B x $.
    resmptd.b $e |- ( ph -> B C_ A ) $.
    $( Restriction of the mapping operation, deduction form.  (Contributed by
       Glauco Siliprandi, 11-Dec-2019.) $)
    resmptd $p |- ( ph -> ( ( x e. A |-> C ) |` B ) = ( x e. B |-> C ) ) $=
      ( wss cmpt cres wceq resmpt syl ) ADCGBCEHDIBDEHJFBCDEKL $.
  $}

  ${
    $d w x y z A $.  $d w x y z R $.
    $( Alternate definition of the restriction operation.  (Contributed by
       Mario Carneiro, 5-Nov-2013.) $)
    dfres2 $p |- ( R |` A ) = { <. x , y >. | ( x e. A /\ x R y ) } $=
      ( vz vw cres cv wcel wbr wa copab relres relopab cop vex weq eleq1w breq1
      anbi12d breq2 anbi2d opelopab brresi df-br 3bitr2ri eqrelriiv ) EFDCGZAHZ
      CIZUIBHZDJZKZABLZDCMUMABNEHZFHZOZUNIUOCIZUOUPDJZKZUOUPUHJUQUHIUMURUOUKDJZ
      KUTABUOUPEPFPZAEQUJURULVAAECRUIUOUKDSTBFQVAUSURUKUPUODUAUBUCCUOUPDVBUDUOU
      PUHUEUFUG $.
  $}

  ${
    $d A x $.  $d B x $.
    $( Sufficient condition for inclusion in maps-to notation.  (Contributed by
       Glauco Siliprandi, 17-Aug-2020.) $)
    mptss $p |- ( A C_ B -> ( x e. A |-> C ) C_ ( x e. B |-> C ) ) $=
      ( wss cmpt cres resmpt resss syl6eqssr ) BCEABDFACDFZBGKACBDHKBIJ $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.
    $( Characterization of elements of the intersection of identity relation
       with Cartesian product.  (Contributed by Peter Mazsa, 9-Sep-2022.) $)
    elidinxp $p |- ( C e. ( _I i^i ( A X. B ) ) <->
                       E. x e. ( A i^i B ) C = <. x , x >. ) $=
      ( vy cv wcel cop wceq wa cid cin cxp risset anbi2ci r19.42v opeq2 equcoms
      wrex rexbii eqeq2d pm5.32ri wbr ideq equcom 3bitr3i anbi2i bitr4i 3bitr2i
      vex df-br rexin elinxp 3bitr4ri ) AFZCGZDUOUOHZIZJZABSDUOEFZHZIZVAKGZJZEC
      SZABSURABCLSDKBCMLGUSVEABUSURUTUOIZECSZJURVFJZECSVEUPVGUREUOCNOURVFECPVHV
      DECVHVBVFJVDVFURVBVFUQVADUQVAIAEUOUTUOQRUAUBVCVFVBUOUTKUCUOUTIVCVFUOUTEUJ
      UDUOUTKUKAEUEUFUGUHTUITURABCULAEBCDKUMUN $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Characterization of elements of the intersection of identity relation
       with square Cartesian product.  (Contributed by Peter Mazsa,
       9-Sep-2022.) $)
    elidinxpid $p |- ( B e. ( _I i^i ( A X. A ) ) <->
                       E. x e. A B = <. x , x >. ) $=
      ( cid cxp cin wcel cv cop wceq wrex elidinxp inidm rexeqi bitri ) CDBBEFG
      CAHZPIJZABBFZKQABKABBCLQARBBMNO $.
  $}

  ${
    $d x A $.  $d x X $.
    $( Characterization of the elements of a restricted identity relation.
       (Contributed by BJ, 28-Aug-2022.)  (Proof shortened by Peter Mazsa,
       9-Sep-2022.) $)
    elrid $p |- ( A e. ( _I |` X ) <-> E. x e. X A = <. x , x >. ) $=
      ( cid cres wcel cvv cxp cin cop wceq df-res eleq2i elidinxp rexeqi 3bitri
      cv wrex inv1 ) BDCEZFBDCGHIZFBAQZUBJKZACGIZRUCACRTUABDCLMACGBNUCAUDCCSOP
      $.
  $}

  ${
    $d x y A $.  $d x y X $.
    $( Obsolete proof of ~ elrid as of 15-Sep-2022.  (Contributed by BJ,
       28-Aug-2022.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    elridOLD $p |- ( A e. ( _I |` X ) <-> E. x e. X A = <. x , x >. ) $=
      ( vy cid cres wcel cv cop wceq wa wex elres weq opeq2 eqeq2d pm5.32ri wbr
      wrex bitr3i df-br vex ideq anbi2i bitr4i exbii ax6evr 19.42v rexbii bitri
      mpbiran2 ) BECFGBAHZDHZIZJZUNEGZKZDLZACSBULULIZJZACSADBECMURUTACURUTADNZK
      ZDLZUTVBUQDVBUOVAKUQVAUTUOVAUSUNBULUMULOPQUPVAUOUPULUMERVAULUMEUAULUMDUBU
      CTUDUEUFVCUTVADLDAUGUTVADUHUKTUIUJ $.
  $}

  ${
    $d x y A $.
    $( The intersection of the identity function with a square cross product.
       (Contributed by FL, 2-Aug-2009.)  (Proof shortened by Peter Mazsa,
       9-Sep-2022.) $)
    idinxpres $p |- ( _I i^i ( A X. A ) ) = ( _I |` A ) $=
      ( vy vx cid cxp cin cres wcel cop wceq wrex elidinxpid elrid bitr4i eqriv
      cv ) BDAAEFZDAGZBPZQHSCPZTIJCAKSRHCASLCSAMNO $.
  $}

  $( A diagonal set as a subset of a Cartesian product.  (Contributed by
     Thierry Arnoux, 29-Dec-2019.)  (Proof shortened by BJ, 9-Sep-2022.) $)
  idssxp $p |- ( _I |` A ) C_ ( A X. A ) $=
    ( cid cres cxp cin idinxpres inss2 eqsstr3i ) BACBAADZEIAFBIGH $.

  ${
    $d A x y $.
    $( The restricted identity expressed with the class builder.  (Contributed
       by FL, 25-Apr-2012.) $)
    opabresid $p |- { <. x , y >. | ( x e. A /\ y = x ) } = ( _I |` A ) $=
      ( weq copab cres cv wcel cid resopab equcom opabbii eqtr4i reseq1i eqtr3i
      wa df-id ) BADZABEZCFAGCHRPABEICFRABCJSICSABDZABEIRTABBAKLABQMNO $.
  $}

  ${
    $d A x y $.
    $( The restricted identity expressed with the maps-to notation.
       (Contributed by FL, 25-Apr-2012.) $)
    mptresid $p |- ( x e. A |-> x ) = ( _I |` A ) $=
      ( vy cv cmpt wcel weq wa copab cid cres df-mpt opabresid eqtri ) ABADZEOB
      FCAGHACIJBKACBOLACBMN $.
  $}

  $( The domain of a restricted identity function.  (Contributed by NM,
     27-Aug-2004.) $)
  dmresi $p |- dom ( _I |` A ) = A $=
    ( cid cdm wss cres wceq cvv ssv dmi sseqtr4i ssdmres mpbi ) ABCZDBAECAFAGMA
    HIJABKL $.

  ${
    $d A x y $.
    $( Restriction of the identity to a singleton.  (Contributed by FL,
       2-Aug-2009.)  (Proof shortened by JJ, 25-Aug-2021.)  (Proof shortened by
       Peter Mazsa, 6-Oct-2022.) $)
    restidsing $p |- ( _I |` { A } ) = ( { A } X. { A } ) $=
      ( vx vy cid csn cres cxp relres relxp cv wcel cop wa wceq wbr anbi12i vex
      velsn ideq eqeq1 eqcom syl6bb bitri df-br anbi2i 3bitr2ri opelresi opelxp
      pm5.32i 3bitr4i eqrelriiv ) BCDAEZFZULULGZDULHULULIBJZULKZUOCJZLZDKZMZUPU
      QULKZMZURUMKURUNKVBUOANZUQANZMZUPUOUQDOZMZUTUPVCVAVDBARZCARPVGVCUOUQNZMVE
      UPVCVFVIVHUOUQCQZSPVCVIVDVCVIAUQNVDUOAUQTAUQUAUBUIUCVFUSUPUOUQDUDUEUFULUO
      UQDVJUGUOUQULULUHUJUK $.
  $}

  $( Equality theorem for image.  (Contributed by NM, 14-Aug-1994.) $)
  imaeq1 $p |- ( A = B -> ( A " C ) = ( B " C ) ) $=
    ( wceq cres crn cima reseq1 rneqd df-ima 3eqtr4g ) ABDZACEZFBCEZFACGBCGLMNA
    BCHIACJBCJK $.

  $( Equality theorem for image.  (Contributed by NM, 14-Aug-1994.) $)
  imaeq2 $p |- ( A = B -> ( C " A ) = ( C " B ) ) $=
    ( wceq cres crn cima reseq2 rneqd df-ima 3eqtr4g ) ABDZCAEZFCBEZFCAGCBGLMNA
    BCHICAJCBJK $.

  ${
    imaeq1i.1 $e |- A = B $.
    $( Equality theorem for image.  (Contributed by NM, 21-Dec-2008.) $)
    imaeq1i $p |- ( A " C ) = ( B " C ) $=
      ( wceq cima imaeq1 ax-mp ) ABEACFBCFEDABCGH $.

    $( Equality theorem for image.  (Contributed by NM, 21-Dec-2008.) $)
    imaeq2i $p |- ( C " A ) = ( C " B ) $=
      ( wceq cima imaeq2 ax-mp ) ABECAFCBFEDABCGH $.
  $}

  ${
    imaeq1d.1 $e |- ( ph -> A = B ) $.
    $( Equality theorem for image.  (Contributed by FL, 15-Dec-2006.) $)
    imaeq1d $p |- ( ph -> ( A " C ) = ( B " C ) ) $=
      ( wceq cima imaeq1 syl ) ABCFBDGCDGFEBCDHI $.

    $( Equality theorem for image.  (Contributed by FL, 15-Dec-2006.) $)
    imaeq2d $p |- ( ph -> ( C " A ) = ( C " B ) ) $=
      ( wceq cima imaeq2 syl ) ABCFDBGDCGFEBCDHI $.

    imaeq12d.2 $e |- ( ph -> C = D ) $.
    $( Equality theorem for image.  (Contributed by Mario Carneiro,
       4-Dec-2016.) $)
    imaeq12d $p |- ( ph -> ( A " C ) = ( B " D ) ) $=
      ( cima imaeq1d imaeq2d eqtrd ) ABDHCDHCEHABCDFIADECGJK $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( Alternate definition of image.  Compare definition (d) of [Enderton]
       p. 44.  (Contributed by NM, 19-Apr-2004.)  (Proof shortened by Andrew
       Salmon, 27-Aug-2011.)  (Proof shortened by Peter Mazsa, 2-Oct-2022.) $)
    dfima2 $p |- ( A " B ) = { y | E. x e. B x A y } $=
      ( cima cres crn cv wbr wex cab wrex df-ima dfrn2 wcel wa wb cvv brres elv
      exbii df-rex bitr4i abbii 3eqtri ) CDECDFZGAHZBHZUFIZAJZBKUGUHCIZADLZBKCD
      MABUFNUJULBUJUGDOUKPZAJULUIUMAUIUMQBDUGUHCRSTUAUKADUBUCUDUE $.

    $( Alternate definition of image.  Compare definition (d) of [Enderton]
       p. 44.  (Contributed by NM, 14-Aug-1994.)  (Proof shortened by Andrew
       Salmon, 27-Aug-2011.) $)
    dfima3 $p |- ( A " B ) = { y | E. x ( x e. B /\ <. x , y >. e. A ) } $=
      ( cima cv wbr wrex cab wcel cop wa dfima2 df-br rexbii df-rex bitri abbii
      wex eqtri ) CDEAFZBFZCGZADHZBIUADJUAUBKCJZLASZBIABCDMUDUFBUDUEADHUFUCUEAD
      UAUBCNOUEADPQRT $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.
    $( Membership in an image.  Theorem 34 of [Suppes] p. 65.  (Contributed by
       NM, 20-Jan-2007.) $)
    elimag $p |- ( A e. V -> ( A e. ( B " C ) <-> E. x e. C x B A ) ) $=
      ( vy cv wbr wrex cima wceq breq2 rexbidv dfima2 elab2g ) AGZFGZCHZADIPBCH
      ZADIFBCDJEQBKRSADQBPCLMAFCDNO $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    elima.1 $e |- A e. _V $.
    $( Membership in an image.  Theorem 34 of [Suppes] p. 65.  (Contributed by
       NM, 19-Apr-2004.) $)
    elima $p |- ( A e. ( B " C ) <-> E. x e. C x B A ) $=
      ( cvv wcel cima cv wbr wrex wb elimag ax-mp ) BFGBCDHGAIBCJADKLEABCDFMN
      $.

    $( Membership in an image.  Theorem 34 of [Suppes] p. 65.  (Contributed by
       NM, 11-Aug-2004.) $)
    elima2 $p |- ( A e. ( B " C ) <-> E. x ( x e. C /\ x B A ) ) $=
      ( cima wcel cv wbr wrex wa wex elima df-rex bitri ) BCDFGAHZBCIZADJPDGQKA
      LABCDEMQADNO $.

    $( Membership in an image.  Theorem 34 of [Suppes] p. 65.  (Contributed by
       NM, 14-Aug-1994.) $)
    elima3 $p |- ( A e. ( B " C ) <-> E. x ( x e. C /\ <. x , A >. e. B ) ) $=
      ( cima wcel cv wbr wa wex cop elima2 df-br anbi2i exbii bitri ) BCDFGAHZD
      GZRBCIZJZAKSRBLCGZJZAKABCDEMUAUCATUBSRBCNOPQ $.
  $}

  ${
    nfima.1 $e |- F/_ x A $.
    nfima.2 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for image.  (Contributed by NM,
       30-Dec-1996.)  (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
    nfima $p |- F/_ x ( A " B ) $=
      ( cima cres crn df-ima nfres nfrn nfcxfr ) ABCFBCGZHBCIAMABCDEJKL $.
  $}

  ${
    $d x z $.  $d B z $.  $d A z $.
    nfimad.2 $e |- ( ph -> F/_ x A ) $.
    nfimad.3 $e |- ( ph -> F/_ x B ) $.
    $( Deduction version of bound-variable hypothesis builder ~ nfima .
       (Contributed by FL, 15-Dec-2006.)  (Revised by Mario Carneiro,
       15-Oct-2016.) $)
    nfimad $p |- ( ph -> F/_ x ( A " B ) ) $=
      ( vz cv wcel wal cab cima wnfc nfaba1 nfima wb wa nfnfc1 nfan abidnf
      imaeq1d imaeq2d sylan9eq nfceqdf syl2anc mpbii ) ABGHZCIZBJGKZUGDIZBJGKZL
      ZMZBCDLZMZBUIUKUHBGNUJBGNOABCMZBDMZUMUOPEFUPUQQBULUNUPUQBBCRBDRSUPUQULCUK
      LUNUPUICUKBGCTUAUQUKDCBGDTUBUCUDUEUF $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( The image of the domain of a class is the range of the class.
       (Contributed by NM, 14-Aug-1994.) $)
    imadmrn $p |- ( A " dom A ) = ran A $=
      ( vx vy cv cdm wcel cop wa wex cab cima crn vex opeldm ancom bitr2i exbii
      pm4.71i abbii dfima3 dfrn3 3eqtr4i ) BDZAEZFZUCCDZGAFZHZBIZCJUGBIZCJAUDKA
      LUIUJCUHUGBUGUGUEHUHUGUEUCUFABMCMNRUGUEOPQSBCAUDTBCAUAUB $.

    $( The image of a class is a subset of its range.  Theorem 3.16(xi) of
       [Monk1] p. 39.  (Contributed by NM, 31-Mar-1995.) $)
    imassrn $p |- ( A " B ) C_ ran A $=
      ( vx vy cv wcel cop wex cab cima crn exsimpr ss2abi dfima3 dfrn3 3sstr4i
      wa ) CEZBFZRDEGAFZQCHZDITCHZDIABJAKUAUBDSTCLMCDABNCDAOP $.
  $}

  ${
    $d x y A $.
    $( Image under the identity relation.  Theorem 3.16(viii) of [Monk1] p. 38.
       (Contributed by NM, 30-Apr-1998.) $)
    imai $p |- ( _I " A ) = A $=
      ( vx vy cid cima cv wcel cop wex cab dfima3 weq wbr df-br vex ideq bitr3i
      wa anbi1ci exbii eleq1w equsexvw bitri abbii abid2 3eqtri ) DAEBFZAGZUGCF
      ZHDGZRZBIZCJUIAGZCJABCDAKULUMCULBCLZUHRZBIUMUKUOBUJUNUHUJUGUIDMUNUGUIDNUG
      UICOPQSTUHUMBCBCAUAUBUCUDCAUEUF $.
  $}

  $( The range of the restricted identity function.  (Contributed by NM,
     27-Aug-2004.) $)
  rnresi $p |- ran ( _I |` A ) = A $=
    ( cid cima cres crn df-ima imai eqtr3i ) BACBADEABAFAGH $.

  $( The image of a restriction of the identity function.  (Contributed by FL,
     31-Dec-2006.) $)
  resiima $p |- ( B C_ A -> ( ( _I |` A ) " B ) = B ) $=
    ( wss cid cres cima crn wceq df-ima a1i resabs1 rneqd rnresi 3eqtrd ) BACZD
    AEZBFZPBEZGZDBEZGZBQSHOPBIJORTDBAKLUABHOBMJN $.

  $( Image of the empty set.  Theorem 3.16(ii) of [Monk1] p. 38.  (Contributed
     by NM, 20-May-1998.) $)
  ima0 $p |- ( A " (/) ) = (/) $=
    ( c0 cima cres crn df-ima res0 rneqi rn0 3eqtri ) ABCABDZEBEBABFKBAGHIJ $.

  $( Image under the empty relation.  (Contributed by FL, 11-Jan-2007.) $)
  0ima $p |- ( (/) " A ) = (/) $=
    ( c0 cima crn imassrn rn0 sseqtri 0ss eqssi ) BACZBJBDBBAEFGJHI $.

  ${
    $d A y $.  $d B y $.  $d x y $.  $d F y $.
    $( Move class substitution in and out of the image of a function.
       (Contributed by FL, 15-Dec-2006.)  (Revised by NM, 20-Aug-2018.) $)
    csbima12 $p |- [_ A / x ]_ ( F " B ) = ( [_ A / x ]_ F " [_ A / x ]_ B ) $=
      ( vy cvv wcel cima csb wceq csbeq1 imaeq12d eqeq12d nfcsb1v nfima csbeq1a
      cv vex c0 csbprc weq csbief vtoclg wn imaeq2d ima0 syl6req eqtrd pm2.61i
      ) BFGZABDCHZIZABDIZABCIZHZJZAEQZUKIZAUQDIZAUQCIZHZJUPEBFUQBJZURULVAUOAUQB
      UKKVBUSUMUTUNAUQBDKAUQBCKLMAUQUKVAERAUSUTAUQDNAUQCNOAEUADUSCUTAUQDPAUQCPL
      UBUCUJUDZULSUOABUKTVCUOUMSHSVCUNSUMABCTUEUMUFUGUHUI $.
  $}

  $( A class whose image under another is empty is disjoint with the other's
     domain.  (Contributed by FL, 24-Jan-2007.) $)
  imadisj $p |- ( ( A " B ) = (/) <-> ( dom A i^i B ) = (/) ) $=
    ( cima wceq cres crn cdm cin df-ima eqeq1i dm0rn0 dmres incom eqtri 3bitr2i
    c0 ) ABCZPDABEZFZPDRGZPDAGZBHZPDQSPABIJRKTUBPTBUAHUBABLBUAMNJO $.

  $( A preimage under any class is included in the domain of the class.
     (Contributed by FL, 29-Jan-2007.) $)
  cnvimass $p |- ( `' A " B ) C_ dom A $=
    ( ccnv cima crn cdm imassrn dfdm4 sseqtr4i ) ACZBDJEAFJBGAHI $.

  $( The preimage of the range of a class is the domain of the class.
     (Contributed by Jeff Hankins, 15-Jul-2009.) $)
  cnvimarndm $p |- ( `' A " ran A ) = dom A $=
    ( ccnv cdm cima crn imadmrn df-rn imaeq2i dfdm4 3eqtr4i ) ABZKCZDKEKAEZDACK
    FMLKAGHAIJ $.

  ${
    $d x y A $.  $d x B $.  $d x y R $.
    $( The image of a singleton.  (Contributed by NM, 8-May-2005.) $)
    imasng $p |- ( A e. B -> ( R " { A } ) = { y | A R y } ) $=
      ( vx wcel cvv csn cima wbr cab wceq elex wrex dfima2 rexsng abbidv syl5eq
      cv breq1 syl ) BCFBGFZDBHZIZBASZDJZAKZLBCMUBUDESZUEDJZEUCNZAKUGEADUCOUBUJ
      UFAUIUFEBGUHBUEDTPQRUA $.

    $( The image of a singleton.  (Contributed by NM, 20-May-1998.) $)
    relimasn $p |- ( Rel R -> ( R " { A } ) = { y | A R y } ) $=
      ( wrel cvv wcel csn cima cv wbr cab wceq wn wa c0 snprc imaeq2 sylbi ima0
      syl6eq adantl wex brrelex1 stoic1a nexdv abn0 necon1bbii eqtr4d ex imasng
      sylib pm2.61d2 ) CDZBEFZCBGZHZBAIZCJZAKZLZUMUNMZUTUMVANZUPOUSVAUPOLUMVAUP
      COHZOVAUOOLUPVCLBPUOOCQRCSTUAVBURAUBZMUSOLVBURAUMURUNBUQCUCUDUEVDUSOURAUF
      UGUKUHUIABECUJUL $.

    $( Elementhood in the image of a singleton.  (Contributed by Mario
       Carneiro, 3-Nov-2015.) $)
    elrelimasn $p |- ( Rel R -> ( B e. ( R " { A } ) <-> A R B ) ) $=
      ( vx wrel csn cima cv wbr cab relimasn eleq2d cvv wi wb brrelex2 ex breq2
      wcel elab3g syl bitrd ) CEZBCAFGZSBADHZCIZDJZSZABCIZUCUDUGBDACKLUCUIBMSZN
      UHUIOUCUIUJABCPQUFUIDBMUEBACRTUAUB $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    elimasn.1 $e |- B e. _V $.
    elimasn.2 $e |- C e. _V $.
    $( Membership in an image of a singleton.  (Contributed by NM,
       15-Mar-2004.)  (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
    elimasn $p |- ( C e. ( A " { B } ) <-> <. B , C >. e. A ) $=
      ( vx csn cima wcel wbr cop cv breq2 cvv cab wceq imasng ax-mp elab2 df-br
      bitri ) CABGHZIBCAJZBCKAIBFLZAJZUCFCUBEUDCBAMBNIUBUEFOPDFBNAQRSBCATUA $.
  $}

  ${
    $d A y z $.  $d B y z $.  $d C y z $.
    $( Membership in an image of a singleton.  (Contributed by Raph Levien,
       21-Oct-2006.) $)
    elimasng $p |- ( ( B e. V /\ C e. W ) ->
                   ( C e. ( A " { B } ) <-> <. B , C >. e. A ) ) $=
      ( vz vy cv csn cima wcel cop wceq sneq imaeq2d eleq2d eleq1d bibi12d vex
      wb opeq1 eleq1 opeq2 elimasn vtocl2g ) FHZAGHZIZJZKZUGUFLZAKZTUFABIZJZKZB
      UFLZAKZTCUNKZBCLZAKZTGFBCDEUGBMZUJUOULUQVAUIUNUFVAUHUMAUGBNOPVAUKUPAUGBUF
      UAQRUFCMZUOURUQUTUFCUNUBVBUPUSAUFCBUCQRAUGUFGSFSUDUE $.
  $}

  $( Membership in an image of a singleton.  (Contributed by NM,
     5-Aug-2010.) $)
  elimasni $p |- ( C e. ( A " { B } ) -> B A C ) $=
    ( cvv wcel wa csn cima wbr wn c0 noel wceq snprc biimpi imaeq2d ima0 syl6eq
    eleq2d mtbiri con4i elex jca cop elimasng df-br syl6bbr biimpd mpcom ) BDEZ
    CDEZFZCABGZHZEZBCAIZUOUJUKUJUOUJJZUOCKECLUQUNKCUQUNAKHKUQUMKAUQUMKMBNOPAQRS
    TUACUNUBUCULUOUPULUOBCUDAEUPABCDDUEBCAUFUGUHUI $.

  ${
    $d y F $.  $d x y $.
    $( Two ways to express the class of unique-valued arguments of ` F ` ,
       which is the same as the domain of ` F ` whenever ` F ` is a function.
       The left-hand side of the equality is from Definition 10.2 of [Quine]
       p. 65.  Quine uses the notation "arg ` F ` " for this class (for which
       we have no separate notation).  Observe the resemblance to the alternate
       definition ~ dffv4 of function value, which is based on the idea in
       Quine's definition.  (Contributed by NM, 8-May-2005.) $)
    args $p |- { x | E. y ( F " { x } ) = { y } } = { x | E! y x F y } $=
      ( csn cima wceq wex wbr weu cab cvv imasng elv eqeq1i exbii euabsn bitr4i
      cv abbii ) CARZDEZBRZDZFZBGZTUBCHZBIZAUEUFBJZUCFZBGUGUDUIBUAUHUCUAUHFABTK
      CLMNOUFBPQS $.
  $}

  ${
    eliniseg.1 $e |- C e. _V $.
    $( Membership in an initial segment.  The idiom ` ( ``' A " { B } ) ` ,
       meaning ` { x | x A B } ` , is used to specify an initial segment in
       (for example) Definition 6.21 of [TakeutiZaring] p. 30.  (Contributed by
       NM, 28-Apr-2004.)  (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
    eliniseg $p |- ( B e. V -> ( C e. ( `' A " { B } ) <-> C A B ) ) $=
      ( wcel cvv ccnv csn cima wbr wb wa cop elimasng df-br syl6bbr bitrd mpan2
      brcnvg ) BDFZCGFZCAHZBIJFZCBAKZLEUAUBMZUDBCUCKZUEUFUDBCNUCFUGUCBCDGOBCUCP
      QBCDGATRS $.
  $}

  ${
    $d A x $.
    epini.1 $e |- A e. _V $.
    $( Any set is equal to its preimage under the converse epsilon relation.
       (Contributed by Mario Carneiro, 9-Mar-2013.) $)
    epini $p |- ( `' _E " { A } ) = A $=
      ( vx cep ccnv csn cima cv wbr cvv wb vex eliniseg ax-mp epeli bitri eqriv
      wcel ) CDEAFGZACHZSRZTADIZTARAJRUAUBKBDATJCLMNTABOPQ $.
  $}

  ${
    $d x A $.  $d x B $.
    $( An idiom that signifies an initial segment of an ordering, used, for
       example, in Definition 6.21 of [TakeutiZaring] p. 30.  (Contributed by
       NM, 28-Apr-2004.) $)
    iniseg $p |- ( B e. V -> ( `' A " { B } ) = { x | x A B } ) $=
      ( wcel cvv ccnv csn cima cv wbr cab wceq elex vex eliniseg abbi2dv syl )
      CDECFEZBGCHIZAJZCBKZALMCDNSUBATBCUAFAOPQR $.
  $}

  ${
    $d F a b $.  $d A a b $.
    $( Nonemptiness of an initial segment in terms of range.  (Contributed by
       Stefan O'Rear, 18-Jan-2015.) $)
    inisegn0 $p |- ( A e. ran F <-> ( `' F " { A } ) =/= (/) ) $=
      ( va vb crn wcel cvv ccnv csn cima c0 wne elex wn wceq snprc imaeq2d ima0
      biimpi cv syl6eq necon1ai eleq1 sneq neeq1d wbr cab wex iniseg elv neeq1i
      abn0 vex elrn 3bitr4ri vtoclbg pm5.21nii ) ABEZFZAGFZBHZAIZJZKLZAURMUTVCK
      UTNZVCVAKJKVEVBKVAVEVBKOAPSQVARUAUBCTZURFZVAVFIZJZKLZUSVDCAGVFAURUCVFAOZV
      IVCKVKVHVBVAVFAUDQUEDTVFBUFZDUGZKLVLDUHVJVGVLDULVIVMKVIVMOCDBVFGUIUJUKDVF
      BCUMUNUOUPUQ $.
  $}

  ${
    $d x y z A $.  $d x y z R $.
    $( Alternate definition of well-founded relation.  Definition 6.21 of
       [TakeutiZaring] p. 30.  (Contributed by NM, 23-Apr-2004.)  (Revised by
       Mario Carneiro, 23-Jun-2015.) $)
    dffr3 $p |- ( R Fr A <-> A. x ( ( x C_ A /\ x =/= (/) ) ->
                E. y e. x ( x i^i ( `' R " { y } ) ) = (/) ) ) $=
      ( vz wfr cv wss c0 wne wa wbr crab wceq wrex wi wal ccnv csn cin cima cab
      dffr2 cvv iniseg ineq2i dfrab3 eqtr4i eqeq1i rexbii imbi2i albii bitr4i
      elv ) CDFAGZCHUOIJKZEGBGZDLZEUOMZINZBUOOZPZAQUPUODRUQSUAZTZINZBUOOZPZAQAB
      ECDUCVGVBAVFVAUPVEUTBUOVDUSIVDUOUREUBZTUSVCVHUOVCVHNBEDUQUDUEUNUFUREUOUGU
      HUIUJUKULUM $.
  $}

  ${
    $d x y A $.  $d x y R $.
    $( Alternate definition of set-like relation.  (Contributed by Mario
       Carneiro, 23-Jun-2015.) $)
    dfse2 $p |- ( R Se A <-> A. x e. A ( A i^i ( `' R " { x } ) ) e. _V ) $=
      ( vy wse wbr crab cvv wcel wral ccnv csn cima cin df-se cab dfrab3 iniseg
      cv wceq elv ineq2i eqtr4i eleq1i ralbii bitri ) BCEDSASZCFZDBGZHIZABJBCKU
      GLMZNZHIZABJADBCOUJUMABUIULHUIBUHDPZNULUHDBQUKUNBUKUNTADCUGHRUAUBUCUDUEUF
      $.
  $}

  $( Subset theorem for image.  (Contributed by NM, 16-Mar-2004.) $)
  imass1 $p |- ( A C_ B -> ( A " C ) C_ ( B " C ) ) $=
    ( wss cres crn cima ssres rnss syl df-ima 3sstr4g ) ABDZACEZFZBCEZFZACGBCGM
    NPDOQDABCHNPIJACKBCKL $.

  $( Subset theorem for image.  Exercise 22(a) of [Enderton] p. 53.
     (Contributed by NM, 22-Mar-1998.) $)
  imass2 $p |- ( A C_ B -> ( C " A ) C_ ( C " B ) ) $=
    ( wss cres crn cima ssres2 rnss syl df-ima 3sstr4g ) ABDZCAEZFZCBEZFZCAGCBG
    MNPDOQDABCHNPIJCAKCBKL $.

  $( The image of a singleton outside the domain is empty.  (Contributed by NM,
     22-May-1998.)  (Proof shortened by OpenAI, 3-Jul-2020.) $)
  ndmima $p |- ( -. A e. dom B -> ( B " { A } ) = (/) ) $=
    ( csn cima c0 wceq cdm cin wcel wn imadisj disjsn sylbbr ) BACZDEFBGZNHEFAO
    IJBNKOALM $.

  ${
    $d x y A $.
    $( A converse is a relation.  Theorem 12 of [Suppes] p. 62.  (Contributed
       by NM, 29-Oct-1996.) $)
    relcnv $p |- Rel `' A $=
      ( vy vx cv wbr ccnv df-cnv relopabi ) BDCDAECBAFCBAGH $.
  $}

  $( When ` R ` is a relation, the sethood assumptions on ~ brcnv can be
     omitted.  (Contributed by Mario Carneiro, 28-Apr-2015.) $)
  relbrcnvg $p |- ( Rel R -> ( A `' R B <-> B R A ) ) $=
    ( wrel cvv wcel wa ccnv wbr wi relcnv brrelex12i a1i brrelex12 ancomd ex wb
    brcnvg pm5.21ndd ) CDZAEFZBEFZGZABCHZIZBACIZUEUCJTABUDCKLMTUFUCTUFGUBUABACN
    OPUCUEUFQJTABEECRMS $.

  $( Eliminate the class existence constraint in ~ eliniseg .  (Contributed by
     Mario Carneiro, 5-Dec-2014.)  (Revised by Mario Carneiro, 17-Nov-2015.) $)
  eliniseg2 $p |- ( Rel A -> ( C e. ( `' A " { B } ) <-> C A B ) ) $=
    ( ccnv csn cima wcel wbr wrel wb relcnv elrelimasn ax-mp relbrcnvg syl5bb )
    CADZBEFGZBCPHZAICBAHPIQRJAKBCPLMBCANO $.

  ${
    relbrcnv.1 $e |- Rel R $.
    $( When ` R ` is a relation, the sethood assumptions on ~ brcnv can be
       omitted.  (Contributed by Mario Carneiro, 28-Apr-2015.) $)
    relbrcnv $p |- ( A `' R B <-> B R A ) $=
      ( wrel ccnv wbr wb relbrcnvg ax-mp ) CEABCFGBACGHDABCIJ $.
  $}

  ${
    $d x y z A $.  $d x y z B $.  $d x y z C $.
    $( Two ways of saying that the composition of two relations is included in
       a third relation.  See its special instance ~ cotr for the main
       application.  (Contributed by NM, 27-Dec-1996.)  (Proof shortened by
       Andrew Salmon, 27-Aug-2011.)  Generalized from its special instance
       ~ cotr .  (Revised by Richard Penner, 24-Dec-2019.) $)
    cotrg $p |-
      ( ( A o. B ) C_ C <-> A. x A. y A. z ( ( x B y /\ y A z ) -> x C z ) ) $=
      ( ccom wss cv cop wcel wi wal wbr wa wrel wb vex albii bitri wex relopabi
      df-co ssrel ax-mp opelco df-br bicomi imbi12i 19.23v bitr4i alcom ) DEGZF
      HZAIZCIZJZUMKZUQFKZLZCMZAMZUOBIZENVCUPDNOZUOUPFNZLZCMBMZAMUMPUNVBQVDBUAZA
      CUMACBDEUCUBACUMFUDUEVAVGAVAVFBMZCMVGUTVICUTVHVELVIURVHUSVEBUOUPDEARCRUFV
      EUSUOUPFUGUHUIVDVEBUJUKSVFCBULTST $.
  $}

  ${
    $d x y z R $.
    $( Two ways of saying a relation is transitive.  Definition of transitivity
       in [Schechter] p. 51.  Special instance of ~ cotrg .  (Contributed by
       NM, 27-Dec-1996.) $)
    cotr $p |-
      ( ( R o. R ) C_ R <-> A. x A. y A. z ( ( x R y /\ y R z ) -> x R z ) ) $=
      ( cotrg ) ABCDDDE $.
  $}

  ${
    $d x y R $.  $d x y A $.
    $( Alternate proof of ~ idref not relying on definitions related to
       functions.  Two ways to state that a relation is reflexive on a class.
       (Contributed by FL, 15-Jan-2012.)  (Proof shortened by Mario Carneiro,
       3-Nov-2015.)  (Revised by NM, 30-Mar-2016.)  (Proof shortened by BJ,
       28-Aug-2022.)  The "proof modification is discouraged" tag is here only
       because this is an *ALT result.  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    idrefALT $p |- ( ( _I |` A ) C_ R <-> A. x e. A x R x ) $=
      ( vy cid cres wss cv wcel wal wbr wral dfss2 cop wceq wrex ralbii 3bitr2i
      wi elrid imbi1i r19.23v eleq1 df-br syl6bbr pm5.74i albii ralcom4 ceqsalv
      opex biidd bitri ) EBFZCGDHZUMIZUNCIZSZDJZAHZUSCKZABLZDUMCMURUNUSUSNZOZUT
      SZABLZDJVDDJZABLVAUQVEDUQVCABPZUPSVCUPSZABLVEUOVGUPAUNBTUAVCUPABUBVHVDABV
      CUPUTVCUPVBCIUTUNVBCUCUSUSCUDUEUFQRUGVDADBUHVFUTABUTUTDVBUSUSUJVCUTUKUIQR
      UL $.
  $}

  ${
    $d x y z A $.  $d x y z B $.  $d x y z R $.  $d x y z S $.  $d z V $.
    $d z W $.
    $( Obsolete version of ~ idref and ~ idrefALT as of 27-Aug-2022.
       (Contributed by FL, 15-Jan-2012.)  (Revised by NM, 30-Mar-2016.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    idrefOLD $p |- ( ( _I |` A ) C_ R <-> A. x e. A x R x ) $=
      ( vy vz cv wbr wral wcel wal cop cid wss df-ral cvv opelidres ax-mp sylbi
      wi vex cres wb df-br bicomi imbi12i albii ralidm ralv bitri cxp pm2.27 wa
      opelresgOLD2 weq ideq opeq2 eleq1d biimpcd syl6 syl6bir pm2.43i com3r imp
      sylbir syl6bi ralrimiv ralimi wceq eleq1 imbi12d ralxp sylibr wrel relres
      sps df-rel mpbi sseli ancri pm3.31 syl5 alimi dfss2 ssel alrimiv 3bitr2ri
      syl impbii ) AFZWICGZABHWIBIZWJSZAJWIWIKZLBUAZIZWMCIZSZAJZWNCMZWJABNWQWLA
      WOWKWPWJWIOIZWOWKUBATZWIBOPQWJWPWIWICUCUDUEUFWRWSWRDFZWNIZXBCIZSZDJZWSWRW
      QAOHZAOHZXFXHXGWRWQAOUGWQAUHUIXHXEDOOUJZHZXFXHWIEFZKZWNIZXLCIZSZEOHZAOHXJ
      XGXPAOXGWTWQSZAJXPWQAONXQXPAWTXQXPSXAWTXQWQXPWTWQUKWQXOEOXKOIZXMWQXNXRXMX
      LLIZWKULWQXNSZWIXKLBOUMXSWKXTXSWIXKLGZWKXTSZWIXKLUCYAAEUNZYBWIXKETUOWKWQY
      CXNWKWQYCXNSZSZWKWKWOYEWIBBPWOWQWPYDWOWPUKYCWPXNYCWMXLCWIXKWIUPUQURUSUTVA
      VBRVDVCVEVBVFUSQVORVGXEXODAEOOXBXLVHXCXMXDXNXBXLWNVIXBXLCVIVJVKVLXJXBXIIZ
      XESZDJXFXEDXINYGXEDXCYFXCULYGXDXCYFWNXIXBWNVMWNXIMLBVNWNVPVQVRVSYFXCXDVTW
      AWBRWGVDDWNCWCVLWSWQAWNCWMWDWEWHWF $.

    $( Two ways of saying a relation is symmetric.  Similar to definition of
       symmetry in [Schechter] p. 51.  (Contributed by NM, 28-Dec-1996.)
       (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
    cnvsym $p |- ( `' R C_ R <-> A. x A. y ( x R y -> y R x ) ) $=
      ( cv cop ccnv wcel wi wal wss wbr alcom wrel relcnv ssrel ax-mp vex brcnv
      wb df-br bitr3i imbi12i 2albii 3bitr4i ) BDZADZEZCFZGZUGCGZHZAIBIZUKBIAIU
      HCJZUFUECKZUEUFCKZHZBIAIUKBALUHMUMULSCNBAUHCOPUPUKABUNUIUOUJUNUEUFUHKUIUE
      UFCBQAQRUEUFUHTUAUEUFCTUBUCUD $.

    $( Two ways of saying a relation is antisymmetric.  Definition of
       antisymmetry in [Schechter] p. 51.  (Contributed by NM, 9-Sep-2004.)
       (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
    intasym $p |- ( ( R i^i `' R ) C_ _I <->
                  A. x A. y ( ( x R y /\ y R x ) -> x = y ) ) $=
      ( ccnv cin cid wss cv cop wcel wi wal wbr wa weq wrel wb df-br vex bitr3i
      relcnv relin2 ssrel mp2b elin brcnv anbi12i bitr4i imbi12i 2albii bitri
      ideq ) CCDZEZFGZAHZBHZIZUNJZURFJZKZBLALZUPUQCMZUQUPCMZNZABOZKZBLALUMPUNPU
      OVBQCUACUMUBABUNFUCUDVAVGABUSVEUTVFUSURCJZURUMJZNVEURCUMUEVCVHVDVIUPUQCRV
      DUPUQUMMVIUPUQCASBSZUFUPUQUMRTUGUHUTUPUQFMVFUPUQFRUPUQVJULTUIUJUK $.

    $( Two ways of saying a relation is antisymmetric and reflexive.
       ` U. U. R ` is the field of a relation by ~ relfld .  (Contributed by
       NM, 6-May-2008.)  (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
    asymref $p |- ( ( R i^i `' R ) = ( _I |` U. U. R ) <->
       A. x e. U. U. R A. y ( ( x R y /\ y R x ) <-> x = y ) ) $=
      ( cv wcel cid cuni wb wal wbr wa wceq wi df-br bitr3i bitri 3bitr4i albii
      vex wrel cop ccnv cin cres wral opeluu simpld adantr pm4.71ri bibi1i elin
      sylbi brcnv anbi12i bitr4i ideq anbi2i bibi12i pm5.32 19.21v relcnv ax-mp
      opelresi relin2 relres eqrel mp2an df-ral ) ADZBDZUAZCCUBZUCZEZVKFCGGZUDZ
      EZHZBIZAIZVIVOEZVIVJCJZVJVICJZKZVIVJLZHZBIZMZAIVMVPLZWGAVOUEVSWHAVSWAWFMZ
      BIWHVRWJBWDWAWEKZHWAWDKZWKHVRWJWDWLWKWDWAWBWAWCWBWAVJVOEZWBVKCEZWAWMKVIVJ
      CNZVIVJCASZBSZUFULUGUHUIUJVNWDVQWKVNWNVKVLEZKWDVKCVLUKWBWNWCWRWOWCVIVJVLJ
      WRVIVJCWPWQUMVIVJVLNOUNUOVQWAVKFEZKWKVOVIVJFWQVCWSWEWAWSVIVJFJWEVIVJFNVIV
      JWQUPOUQPURWAWDWEUSQRWAWFBUTPRVMTZVPTWIVTHVLTWTCVACVLVDVBFVOVEABVMVPVFVGW
      GAVOVHQ $.

    $( Two ways of saying a relation is antisymmetric and reflexive.
       (Contributed by NM, 6-May-2008.)  (Proof shortened by Mario Carneiro,
       4-Dec-2016.) $)
    asymref2 $p |- ( ( R i^i `' R ) = ( _I |` U. U. R ) <->
   ( A. x e. U. U. R x R x /\ A. x A. y ( ( x R y /\ y R x ) -> x = y ) ) ) $=
      ( ccnv cin cid cuni wceq cv wbr wa wral wi ralbii albii bitri wcel 3bitri
      wal vex cres asymref albiim r19.26 ancom equcom breq2 breq1 anbi12d anidm
      wb imbi1i syl6bb equsalvw df-ral wn cop df-br opeluu simpld sylbi pm2.24d
      adantr com12 alrimiv id ja ax-1 impbii anbi12i ) CCDEFCGGZUAHAIZBIZCJZVMV
      LCJZKZVLVMHZUKBSZAVKLVPVQMZBSZVQVPMZBSZKZAVKLZVLVLCJZAVKLZVTASZKZABCUBVRW
      CAVKVPVQBUCNWDVTAVKLZWBAVKLZKWJWIKWHVTWBAVKUDWIWJUEWJWFWIWGWBWEAVKWBVMVLH
      ZVPMZBSWEWAWLBVQWKVPABUFULOVPWEBAWKVPWEWEKWEWKVNWEVOWEVMVLVLCUGVMVLVLCUHU
      IWEUJUMUNPNWIVLVKQZVTMZASWGVTAVKUOWNVTAWNVTWMVTVTWMUPZVSBVPWOVQVPWMVQVNWM
      VOVNVLVMUQCQZWMVLVMCURWPWMVMVKQVLVMCATBTUSUTVAVCVBVDVEVTVFVGVTWMVHVIOPVJR
      R $.

    $( Two ways of saying a relation is irreflexive.  Definition of
       irreflexivity in [Schechter] p. 51.  (Contributed by NM, 9-Sep-2004.)
       (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
    intirr $p |- ( ( R i^i _I ) = (/) <-> A. x -. x R x ) $=
      ( vy cid cin c0 wceq cv cop wcel cvv cdif wi wal wbr wn wss incom 3bitr2i
      df-br eqeq1i disj2 wrel wb reli ssrel ax-mp 3bitri equcom vex wa biantrur
      ideq eldif bitr4i xchnxbir imbi12i 2albii breq2 notbid equsalvw albii
      opex ) BDEZFGZAHZCHZIZDJZVHKBLZJZMZCNANZVGVFGZVFVGBOZPZMZCNZANVFVFBOZPZAN
      VEDBEZFGDVJQZVMVDWAFBDRUADBUBDUCWBVMUDUEACDVJUFUGUHVQVLACVNVIVPVKVNVFVGGV
      FVGDOVICAUIVFVGCUJUMVFVGDTSVHBJZVKVOWCPZVHKJZWDUKVKWEWDVFVGVCULVHKBUNUOVF
      VGBTUPUQURVRVTAVPVTCAVNVOVSVGVFVFBUSUTVAVBS $.

    $( Two ways of saying that two elements have an upper bound.  (Contributed
       by Mario Carneiro, 3-Nov-2015.) $)
    brcodir $p |- ( ( A e. V /\ B e. W ) ->
      ( A ( `' R o. R ) B <-> E. z ( A R z /\ B R z ) ) ) $=
      ( wcel wa ccnv ccom wbr cv wex brcog wb cvv vex brcnvg mpan anbi2d adantl
      exbidv bitrd ) BEGZCFGZHZBCDIZDJKBALZDKZUHCUGKZHZAMUICUHDKZHZAMABCUGDEFNU
      FUKUMAUEUKUMOUDUEUJULUIUHPGUEUJULOAQUHCPFDRSTUAUBUC $.

    $( Two ways of saying a relation is directed.  (Contributed by Mario
       Carneiro, 22-Nov-2013.) $)
    codir $p |- ( ( A X. B ) C_ ( `' R o. R ) <-> A. x e. A A. y e. B
      E. z ( x R z /\ y R z ) ) $=
      ( cv cop cxp wcel ccnv ccom wi wal wa wbr wex wral wb cvv wss opelxp el2v
      df-br brcodir bitr3i imbi12i 2albii wrel relxp ssrel ax-mp r2al 3bitr4i )
      AGZBGZHZDEIZJZUQFKFLZJZMZBNANZUODJUPEJOZUOCGZFPUPVEFPOCQZMZBNANURUTUAZVFB
      ERADRVBVGABUSVDVAVFUOUPDEUBVAUOUPUTPZVFUOUPUTUDVIVFSABCUOUPFTTUEUCUFUGUHU
      RUIVHVCSDEUJABURUTUKULVFABDEUMUN $.

    $( A quantifier-free way of expressing the total order predicate.
       (Contributed by Mario Carneiro, 22-Nov-2013.) $)
    qfto $p |- ( ( A X. B ) C_ ( R u. `' R ) <->
                 A. x e. A A. y e. B ( x R y \/ y R x ) ) $=
      ( cv cop cxp wcel ccnv cun wi wal wa wbr wo wss wral opelxp vex brun wrel
      df-br brcnv orbi2i 3bitr3i imbi12i 2albii relxp ssrel ax-mp r2al 3bitr4i
      wb ) AFZBFZGZCDHZIZUQEEJZKZIZLZBMAMZUOCIUPDINZUOUPEOZUPUOEOZPZLZBMAMURVAQ
      ZVHBDRACRVCVIABUSVEVBVHUOUPCDSUOUPVAOVFUOUPUTOZPVBVHUOUPEUTUAUOUPVAUCVKVG
      VFUOUPEATBTUDUEUFUGUHURUBVJVDUNCDUIABURVAUJUKVHABCDULUM $.

    $( A square Cartesian product ` ( A X. A ) ` is a transitive relation.
       (Contributed by FL, 31-Jul-2009.) $)
    xpidtr $p |- ( ( A X. A ) o. ( A X. A ) ) C_ ( A X. A ) $=
      ( vx vy vz cxp ccom wss cv wbr wa wi wal wcel simplbi2com simplbiim com12
      brxp adantr sylbi imp ax-gen gen2 cotr mpbir ) AAEZUEFUEGBHZCHZUEIZUGDHZU
      EIZJUFUIUEIZKZDLZCLBLUMBCULDUHUJUKUHUFAMZUGAMZJUJUKKZUFUGAAQUNUPUOUJUNUKU
      JUOUIAMZUNUKKUGUIAAQUKUNUQUFUIAAQNOPRSTUAUBBCDUEUCUD $.

    $( The intersection of two transitive classes is transitive.  (Contributed
       by FL, 31-Jul-2009.) $)
    trin2 $p |- ( ( ( R o. R ) C_ R /\ ( S o. S ) C_ S )
      -> ( ( R i^i S ) o. ( R i^i S ) ) C_ ( R i^i S ) ) $=
      ( vx vy vz ccom wss wa cv cin wbr wal cotr brin simpr simpl com12 alanimi
      wi sylbi anim12d an4s syl2anb syl6ibr ex imp sylibr ) AAFAGZBBFBGZHCIZDIZ
      ABJZKZUKEIZULKZHZUJUNULKZSZELZDLZCLZULULFULGUHUIVAUHUJUKAKZUKUNAKZHZUJUNA
      KZSZELZDLZCLZUIVASCDEAMUIVIVAUIUJUKBKZUKUNBKZHZUJUNBKZSZELZDLZCLZVIVASCDE
      BMVQVIVAVPVHUTCVOVGUSDVNVFUREVNVFHZUPVEVMHZUQUPVRVSUMVBVJHVCVKHVRVSSZUOUJ
      UKABNUKUNABNVBVCVJVKVTVRVDVLHVSVRVDVEVLVMVNVFOVNVFPUAQUBUCQUJUNABNUDRRRUE
      TQTUFCDEULMUG $.

    $( A partial order relation is irreflexive.  (Contributed by Mario
       Carneiro, 2-Nov-2015.)  (Proof shortened by Peter Mazsa, 2-Oct-2022.) $)
    poirr2 $p |- ( R Po A -> ( R i^i ( _I |` A ) ) = (/) ) $=
      ( vx vy wpo cid cres cin c0 wss wceq wrel relres relin2 cv wcel wbr wa wn
      syl5bi mp1i cop df-br brin bitr3i wi vex brresi poirr wb ideq breq2 sylbi
      notbid syl5ibcom expimpd con2d imnan sylib pm2.21d relssdv ss0 syl ) ABEZ
      BFAGZHZIJVFIKVDCDVFIVELVFLVDFAMBVENUACOZDOZUBZVFPZVGVHBQZVGVHVEQZRZVDVIIP
      ZVJVGVHVFQVMVGVHVFUCVGVHBVEUDUEVDVMVNVDVKVLSUFVMSVDVLVKVLVGAPZVGVHFQZRVDV
      KSZAVGVHFDUGZUHVDVOVPVQVDVORVGVGBQZSVPVQAVGBUIVPVSVKVPVGVHKVSVKUJVGVHVRUK
      VGVHVGBULUMUNUOUPTUQVKVLURUSUTTVAVFVBVC $.
  $}

  $( The relation induced by a transitive relation on a part of its field is
     transitive.  (Taking the intersection of a relation with a square
     Cartesian product is a way to restrict it to a subset of its field.)
     (Contributed by FL, 31-Jul-2009.) $)
  trinxp $p |- ( ( R o. R ) C_ R ->
  ( ( R i^i ( A X. A ) ) o. ( R i^i ( A X. A ) ) ) C_ ( R i^i ( A X. A ) ) ) $=
    ( ccom wss cxp cin xpidtr trin2 mpan2 ) BBCBDAAEZJCJDBJFZKCKDAGBJHI $.

  ${
    soi.1 $e |- R Or S $.
    soi.2 $e |- R C_ ( S X. S ) $.
    $( A strict order relation is irreflexive.  (Contributed by NM,
       10-Feb-1996.)  (Revised by Mario Carneiro, 10-May-2013.) $)
    soirri $p |- -. A R A $=
      ( wcel wa wbr wn wor sonr mpan adantl brel con3i pm2.61i ) ACFZQGZAABHZIZ
      QTQCBJQTDCABKLMSRAACCBENOP $.

    $( A strict order relation is a transitive relation.  (Contributed by NM,
       10-Feb-1996.)  (Revised by Mario Carneiro, 10-May-2013.) $)
    sotri $p |- ( ( A R B /\ B R C ) -> A R C ) $=
      ( wcel wa wbr brel simpld anim12i wi wor w3a sotr mpan 3expb mpcom ) AEHZ
      BEHZCEHZIZIABDJZBCDJZIZACDJZUEUAUFUDUEUAUBABEEDGKLBCEEDGKMUAUBUCUGUHNZEDO
      UAUBUCPUIFEABCDQRST $.

    $( A strict order relation has no 2-cycle loops.  (Contributed by NM,
       10-Feb-1996.)  (Revised by Mario Carneiro, 10-May-2013.) $)
    son2lpi $p |- -. ( A R B /\ B R A ) $=
      ( wbr wa soirri sotri mto ) ABCGBACGHAACGACDEFIABACDEFJK $.

    $( A transitivity relation.  (Read ` A <_ B ` and ` B < C ` implies
       ` A < C ` .)  (Contributed by Mario Carneiro, 10-May-2013.) $)
    sotri2 $p |- ( ( A e. S /\ -. B R A /\ B R C ) -> A R C ) $=
      ( wbr wcel wn wi brel simpld wa wceq wo wor wb sotric mpan con2bid biimpd
      breq1 sotri ex jaoi syl6bir com3r mpand 3imp231 ) BCDHZAEIZBADHZJZACDHZUK
      BEIZULUNUOKUKUPCEIBCEEDGLMUPULNZUNUKUOUQUNBAOZABDHZPZUKUOKZUQUMUTEDQUQUMU
      TJRFEBADSTUAURVAUSURUKUOBACDUCUBUSUKUOABCDEFGUDUEUFUGUHUIUJ $.

    $( A transitivity relation.  (Read ` A < B ` and ` B <_ C ` implies
       ` A < C ` .)  (Contributed by Mario Carneiro, 10-May-2013.) $)
    sotri3 $p |- ( ( C e. S /\ A R B /\ -. C R B ) -> A R C ) $=
      ( wbr wcel wn wi brel simprd wa wceq wo wor wb sotric mpan con2bid expcom
      breq2 biimprd sotri jaoi syl6bir com3r mpan2d 3imp21 ) ABDHZCEIZCBDHZJZAC
      DHZUKULBEIZUNUOKUKAEIUPABEEDGLMULUPNZUNUKUOUQUNCBOZBCDHZPZUKUOKZUQUMUTEDQ
      UQUMUTJRFECBDSTUAURVAUSURUOUKCBADUCUDUKUSUOABCDEFGUEUBUFUGUHUIUJ $.
  $}

  $( Express "less than or equals" for general strict orders.  (Contributed by
     Stefan O'Rear, 17-Jan-2015.) $)
  poleloe $p |- ( B e. V -> ( A ( R u. _I ) B <-> ( A R B \/ A = B ) ) ) $=
    ( cid cun wbr wo wcel wceq brun ideqg orbi2d syl5bb ) ABCEFGABCGZABEGZHBDIZ
    OABJZHABCEKQPROABDLMN $.

  $( Transitive law for general strict orders.  (Contributed by Stefan O'Rear,
     17-Jan-2015.) $)
  poltletr $p |- ( ( R Po X /\ ( A e. X /\ B e. X /\ C e. X ) ) ->
      ( ( A R B /\ B ( R u. _I ) C ) -> A R C ) ) $=
    ( wpo wcel w3a wa wbr cid cun wceq wo poleloe 3ad2ant3 adantl anbi2d com12
    wb wi potr breq2 biimpac a1d jaodan sylbid ) EDFZAEGZBEGZCEGZHZIZABDJZBCDKL
    JZIUNBCDJZBCMZNZIZACDJZUMUOURUNULUOURTZUHUKUIVAUJBCDEOPQRUSUMUTUNUPUMUTUAUQ
    UMUNUPIUTEABCDUBSUNUQIUTUMUQUNUTBCADUCUDUEUFSUG $.

  $( Property of a minimum in a strict order.  (Contributed by Stefan O'Rear,
     17-Jan-2015.) $)
  somin1 $p |- ( ( R Or X /\ ( A e. X /\ B e. X ) ) ->
      if ( A R B , A , B ) ( R u. _I ) A ) $=
    ( wor wcel wa wbr cif cid cun wceq wo iftrue olcd adantl wn sotric mpbird
    wb orcom eqcom orbi2i bitri notbii syl6bb con2bid biimpar iffalse breq1 syl
    eqeq1 orbi12d pm2.61dan poleloe ad2antrl ) DCEZADFZBDFZGGZABCHZABIZACJKHZVB
    ACHZVBALZMZUTVAVFVAVFUTVAVEVDVAABNOPUTVAQZGVFBACHZBALZMZUTVJVGUTVAVJUTVAABL
    ZVHMZQVJQDABCRVLVJVLVHVKMVJVKVHUAVKVIVHABUBUCUDUEUFUGUHVGVFVJTZUTVGVBBLZVMV
    AABUIVNVDVHVEVIVBBACUJVBBAULUMUKPSUNURVCVFTUQUSVBACDUOUPS $.

  $( Commutativity of minimum in a total order.  (Contributed by Stefan O'Rear,
     17-Jan-2015.) $)
  somincom $p |- ( ( R Or X /\ ( A e. X /\ B e. X ) ) ->
      if ( A R B , A , B ) = if ( B R A , B , A ) ) $=
    ( wor wcel wa wbr cif wn so2nr nan mpbi iffalsed eqcomd wceq sotric con2bid
    wi wo ifeq2 ifid syl6req iftrue jaoi syl6bir imp ifeqda ) DCEADFBDFGGZABCHZ
    ABBACHZBAIZUIUJGZULAUMUKBAUIUJUKGJSUMUKJSDABCKUIUJUKLMNOUIUJJZBULPZUIUNABPZ
    UKTZUOUIUJUQDABCQRUPUOUKUPULUKBBIBUKABBUAUKBUBUCUKULBUKBAUDOUEUFUGUH $.

  $( Property of a minimum in a strict order.  (Contributed by Stefan O'Rear,
     17-Jan-2015.) $)
  somin2 $p |- ( ( R Or X /\ ( A e. X /\ B e. X ) ) ->
      if ( A R B , A , B ) ( R u. _I ) B ) $=
    ( wor wcel wa wbr cif cid cun somincom somin1 ancom2s eqbrtrd ) DCEZADFZBDF
    ZGGABCHABIBACHBAIZBCJKZABCDLPRQSBTHBACDMNO $.

  $( Being less than a minimum, for a general total order.  (Contributed by
     Stefan O'Rear, 17-Jan-2015.) $)
  soltmin $p |- ( ( R Or X /\ ( A e. X /\ B e. X /\ C e. X ) ) ->
      ( A R if ( B R C , B , C ) <-> ( A R B /\ A R C ) ) ) $=
    ( wor wcel w3a wa wbr cif wpo cid cun 3jca syl12anc poltletr syl22anc breq2
    imp sopo ad2antrr simplr1 simplr2 simplr3 ifcld simpll somin1 somin2 jca ex
    simpr ifboth impbid1 ) EDFZAEGZBEGZCEGZHZIZABCDJZBCKZDJZABDJZACDJZIZUTVCVFU
    TVCIZVDVEVGEDLZUPVBEGZUQHZVCVBBDMNZJZVDUOVHUSVCEDUAUBZVGUPVIUQUPUQURUOVCUCZ
    VGVABCEUPUQURUOVCUDZUPUQURUOVCUEZUFZVOOUTVCULZVGUOUQURVLUOUSVCUGZVOVPBCDEUH
    PVHVJIVCVLIVDAVBBDEQTRVGVHUPVIURHZVCVBCVKJZVEVMVGUPVIURVNVQVPOVRVGUOUQURWAV
    SVOVPBCDEUIPVHVTIVCWAIVEAVBCDEQTRUJUKVAVDVEVCBCBVBADSCVBADSUMUN $.

  ${
    $d x y z w $.  $d z w ph $.
    $( The converse of a class abstraction of ordered pairs.  (Contributed by
       NM, 11-Dec-2003.)  (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
    cnvopab $p |- `' { <. x , y >. | ph } = { <. y , x >. | ph } $=
      ( vz vw copab ccnv relcnv relopab cop wcel wsb opelopabsbALT sbcom2 bitri
      cv vex opelcnv 3bitr4i eqrelriiv ) DEABCFZGZACBFZUAHACBIEPZDPZJUAKZACDLBE
      LZUEUDJZUBKUHUCKUFABELCDLUGABCEDMABECDNOUEUDUADQEQRACBDEMST $.
  $}

  ${
    $d x y ph $.  $d x C $.  $d x D $.  $d y A $.  $d y B $.
    mptcnv.1 $e |- ( ph -> ( ( x e. A /\ y = B ) <-> ( y e. C /\ x = D ) ) ) $.
    $( The converse of a mapping function.  (Contributed by Thierry Arnoux,
       16-Jan-2017.) $)
    mptcnv $p |- ( ph -> `' ( x e. A |-> B ) = ( y e. C |-> D ) ) $=
      ( cv wcel wceq wa copab cmpt ccnv opabbidv df-mpt cnveqi cnvopab eqtri
      3eqtr4g ) ABIZDJCIZEKLZCBMZUCFJUBGKLZCBMBDENZOZCFGNAUDUFCBHPUHUDBCMZOUEUG
      UIBCDEQRUDBCSTCBFGQUA $.
  $}

  ${
    $d x y z $.
    $( The converse of the empty set.  (Contributed by NM, 6-Apr-1998.)  Remove
       dependency on ~ ax-sep , ~ ax-nul , ~ ax-pr .  (Revised by KP,
       25-Oct-2021.) $)
    cnv0 $p |- `' (/) = (/) $=
      ( vx vz vy c0 ccnv cv wcel cop wbr wa wex br0 intnan nex copab cab df-cnv
      wceq df-opab eqtri abeq2i mtbir nel0 ) ADEZAFZUDGUEBFZCFZHRZUGUFDIZJZCKZB
      KZUKBUJCUIUHUGUFLMNNULAUDUDUIBCOULAPBCDQUIBCASTUAUBUC $.

    $( The converse of the identity relation.  Theorem 3.7(ii) of [Monk1]
       p. 36.  (Contributed by NM, 26-Apr-1998.)  (Proof shortened by Andrew
       Salmon, 27-Aug-2011.) $)
    cnvi $p |- `' _I = _I $=
      ( vy vx cid wbr copab weq ccnv vex ideq equcom bitri opabbii df-cnv df-id
      cv 3eqtr4i ) AOZBOZCDZBAEBAFZBAECGCSTBASABFTQRBHIABJKLBACMBANP $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( The converse of a union is the union of converses.  Theorem 16 of
       [Suppes] p. 62.  (Contributed by NM, 25-Mar-1998.)  (Proof shortened by
       Andrew Salmon, 27-Aug-2011.) $)
    cnvun $p |- `' ( A u. B ) = ( `' A u. `' B ) $=
      ( vy vx cun ccnv cv wbr copab df-cnv unopab brun opabbii eqtr4i uneq12i
      wo ) ABEZFZCGZDGZAHZDCIZSTBHZDCIZEZAFZBFZERSTQHZDCIZUEDCQJUEUAUCPZDCIUIUA
      UCDCKUHUJDCSTABLMNNUFUBUGUDDCAJDCBJON $.

    $( Distributive law for converse over class difference.  (Contributed by
       Mario Carneiro, 26-Jun-2014.) $)
    cnvdif $p |- `' ( A \ B ) = ( `' A \ `' B ) $=
      ( vx vy cdif ccnv relcnv wss wrel difss relss mp2 cv cop wcel wn wa eldif
      vex opelcnv notbii anbi12i bitri 3bitr4i eqrelriiv ) CDABEZFZAFZBFZEZUFGU
      JUHHUHIUJIUHUIJAGUJUHKLDMZCMZNZUFOUMAOZUMBOZPZQZULUKNZUGOURUJOZUMABRULUKU
      FCSZDSZTUSURUHOZURUIOZPZQUQURUHUIRVBUNVDUPULUKAUTVATVCUOULUKBUTVATUAUBUCU
      DUE $.

    $( Distributive law for converse over intersection.  Theorem 15 of [Suppes]
       p. 62.  (Contributed by NM, 25-Mar-1998.)  (Revised by Mario Carneiro,
       26-Jun-2014.) $)
    cnvin $p |- `' ( A i^i B ) = ( `' A i^i `' B ) $=
      ( cdif ccnv cin cnvdif difeq2i eqtri dfin4 cnveqi 3eqtr4i ) AABCZCZDZADZO
      BDZCZCZABEZDOPENOLDZCRALFTQOABFGHSMABIJOPIK $.
  $}

  $( Distributive law for range over union.  Theorem 8 of [Suppes] p. 60.
     (Contributed by NM, 24-Mar-1998.) $)
  rnun $p |- ran ( A u. B ) = ( ran A u. ran B ) $=
    ( cun ccnv cdm crn cnvun dmeqi dmun eqtri df-rn uneq12i 3eqtr4i ) ABCZDZEZA
    DZEZBDZEZCZNFAFZBFZCPQSCZEUAOUDABGHQSIJNKUBRUCTAKBKLM $.

  $( The range of an intersection belongs the intersection of ranges.  Theorem
     9 of [Suppes] p. 60.  (Contributed by NM, 15-Sep-2004.) $)
  rnin $p |- ran ( A i^i B ) C_ ( ran A i^i ran B ) $=
    ( cin ccnv cdm crn cnvin dmeqi dmin eqsstri df-rn ineq12i 3sstr4i ) ABCZDZE
    ZADZEZBDZEZCZNFAFZBFZCPQSCZEUAOUDABGHQSIJNKUBRUCTAKBKLM $.

  ${
    $d x y z $.  $d y z A $.  $d y z B $.
    $( The range of an indexed union.  (Contributed by Mario Carneiro,
       29-May-2015.) $)
    rniun $p |- ran U_ x e. A B = U_ x e. A ran B $=
      ( vz vy ciun crn cv cop wcel wex wrex rexcom4 elrn2 rexbii eliun 3bitr4ri
      vex exbii 3bitr4i eqriv ) DABCFZGZABCGZFZEHDHZIZUBJZEKZUFUDJZABLZUFUCJUFU
      EJUGCJZEKZABLULABLZEKUKUIULAEBMUJUMABEUFCDRZNOUHUNEAUGBCPSQEUFUBUONAUFBUD
      PTUA $.

    $d x A $.
    $( The range of a union.  Part of Exercise 8 of [Enderton] p. 41.
       (Contributed by NM, 17-Mar-2004.)  (Revised by Mario Carneiro,
       29-May-2015.) $)
    rnuni $p |- ran U. A = U_ x e. A ran x $=
      ( cuni crn cv ciun uniiun rneqi rniun eqtri ) BCZDABAEZFZDABLDFKMABGHABLI
      J $.
  $}

  $( Distributive law for image over union.  Theorem 35 of [Suppes] p. 65.
     (Contributed by NM, 30-Sep-2002.) $)
  imaundi $p |- ( A " ( B u. C ) ) = ( ( A " B ) u. ( A " C ) ) $=
    ( cun cres crn cima resundi rneqi rnun eqtri df-ima uneq12i 3eqtr4i ) ABCDZ
    EZFZABEZFZACEZFZDZAOGABGZACGZDQRTDZFUBPUEABCHIRTJKAOLUCSUDUAABLACLMN $.

  $( The image of a union.  (Contributed by Jeff Hoffman, 17-Feb-2008.) $)
  imaundir $p |- ( ( A u. B ) " C ) = ( ( A " C ) u. ( B " C ) ) $=
    ( cun cima cres crn df-ima resundir rneqi rnun 3eqtri uneq12i eqtr4i ) ABDZ
    CEZACFZGZBCFZGZDZACEZBCEZDPOCFZGQSDZGUAOCHUDUEABCIJQSKLUBRUCTACHBCHMN $.

  ${
    $d x y A $.  $d x y B $.  $d x y R $.
    $( An upper bound for intersection with a domain.  Theorem 40 of [Suppes]
       p. 66, who calls it "somewhat surprising."  (Contributed by NM,
       11-Aug-2004.) $)
    dminss $p |- ( dom R i^i A ) C_ ( `' R " ( R " A ) ) $=
      ( vx vy cdm cin ccnv cima cv wbr wcel wa 19.8a ancoms elima2 sylibr simpl
      wex vex brcnv jca eximi eldm anbi1i elin 19.41v 3bitr4i 3imtr4i ssriv ) C
      BEZAFZBGZBAHZHZCIZDIZBJZUOAKZLZDRZUPUMKZUPUOULJZLZDRUOUKKZUOUNKUSVCDUSVAV
      BUSURUQLZCRZVAURUQVFVECMNCUPBADSZOPUSUQVBUQURQUPUOBVGCSZTPUAUBUOUJKZURLUQ
      DRZURLVDUTVIVJURDUOBVHUCUDUOUJAUEUQURDUFUGDUOULUMVHOUHUI $.

    $( An upper bound for intersection with an image.  Theorem 41 of [Suppes]
       p. 66.  (Contributed by NM, 11-Aug-2004.) $)
    imainss $p |- ( ( R " A ) i^i B ) C_ ( R " ( A i^i ( `' R " B ) ) ) $=
      ( vy vx cima cin ccnv cv wcel wbr wa wex brcnv 19.8a sylan2br elin elima2
      vex anbi1i ancoms anim2i simprl anassrs anbi2i bitri sylibr eximi 3bitr4i
      jca 19.41v 3imtr4i ssriv ) DCAFZBGZCACHZBFZGZFZEIZAJZUTDIZCKZLZVBBJZLZEMZ
      UTURJZVCLZEMVBUOJZVBUSJVFVIEVFVAVEVBUTUPKZLZDMZLZVCLZVIVAVCVEVOVAVCVELZLV
      NVCVPVMVAVEVCVMVCVEVKVMVBUTCDSZESZNVLDOPUAUBVAVCVEUCUJUDVHVNVCVHVAUTUQJZL
      VNUTAUQQVSVMVADUTUPBVRRUEUFTUGUHVBUNJZVELVDEMZVELVJVGVTWAVEEVBCAVQRTVBUNB
      QVDVEEUKUIEVBCURVQRULUM $.
  $}

  $( The image of an intersection.  (Contributed by Thierry Arnoux,
     16-Dec-2017.) $)
  inimass $p |- ( ( A i^i B ) " C ) C_ ( ( A " C ) i^i ( B " C ) ) $=
    ( cres cin crn cima rnin df-ima resindir rneqi eqtri ineq12i 3sstr4i ) ACDZ
    BCDZEZFZOFZPFZEABEZCGZACGZBCGZEOPHUBUACDZFRUACIUEQABCJKLUCSUDTACIBCIMN $.

  ${
    $d x A $.  $d x B $.  $d x C $.  $d x V $.
    $( The intersection of the image of singleton.  (Contributed by Thierry
       Arnoux, 16-Dec-2017.) $)
    inimasn $p |- ( C e. V
      -> ( ( A i^i B ) " { C } ) = ( ( A " { C } ) i^i ( B " { C } ) ) ) $=
      ( vx wcel cin csn cima cv elin cop a1i cvv elimasng elvd anbi12d 3bitr4rd
      wa wb syl5rbb eqrdv ) CDFZEABGZCHZIZAUEIZBUEIZGZEJZUIFUJUGFZUJUHFZSZUCUJU
      FFZUJUGUHKUCCUJLZUDFZUOAFZUOBFZSZUNUMUPUSTUCUOABKMUCUNUPTEUDCUJDNOPUCUKUQ
      ULURUCUKUQTEACUJDNOPUCULURTEBCUJDNOPQRUAUB $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( The converse of a Cartesian product.  Exercise 11 of [Suppes] p. 67.
       (Contributed by NM, 14-Aug-1999.)  (Proof shortened by Andrew Salmon,
       27-Aug-2011.) $)
    cnvxp $p |- `' ( A X. B ) = ( B X. A ) $=
      ( vy vx cv wcel copab ccnv cxp cnvopab ancom opabbii eqtri cnveqi 3eqtr4i
      wa df-xp ) CEAFZDEBFZPZCDGZHZSRPZDCGZABIZHBAIUBTDCGUDTCDJTUCDCRSKLMUEUACD
      ABQNDCBAQO $.
  $}

  $( The Cartesian product with the empty set is empty.  Part of Theorem
     3.13(ii) of [Monk1] p. 37.  (Contributed by NM, 12-Apr-2004.) $)
  xp0 $p |- ( A X. (/) ) = (/) $=
    ( c0 cxp ccnv 0xp cnveqi cnvxp cnv0 3eqtr3i ) BACZDBDABCBJBAEFBAGHI $.

  ${
    $d x y z A $.  $d x y z B $.
    $( The Cartesian product of nonempty classes is nonempty.  (Variation of a
       theorem contributed by Raph Levien, 30-Jun-2006.)  (Contributed by NM,
       30-Jun-2006.) $)
    xpnz $p |- ( ( A =/= (/) /\ B =/= (/) ) <-> ( A X. B ) =/= (/) ) $=
      ( vx vy vz c0 wne wa cxp wcel wex anbi12i exdistrv bitr4i cop wceq syl6eq
      cv n0 necon3i eleq1 opelxp syl6bb spcev sylibr exlimivv sylbi xpeq1 xpeq2
      opex 0xp xp0 jca impbii ) AFGZBFGZHZABIZFGZUQCRZAJZDRZBJZHZDKCKZUSUQVACKZ
      VCDKZHVEUOVFUPVGCASDBSLVAVCCDMNVDUSCDVDERZURJZEKUSVIVDEUTVBOZUTVBUJVHVJPV
      IVJURJVDVHVJURUAUTVBABUBUCUDEURSUEUFUGUSUOUPAFURFAFPURFBIFAFBUHBUKQTBFURF
      BFPURAFIFBFAUIAULQTUMUN $.
  $}

  $( At least one member of an empty Cartesian product is empty.  (Contributed
     by NM, 27-Aug-2006.) $)
  xpeq0 $p |- ( ( A X. B ) = (/) <-> ( A = (/) \/ B = (/) ) ) $=
    ( cxp c0 wceq wne wa wn wo xpnz necon2bbii ianor nne orbi12i 3bitri ) ABCZD
    EADFZBDFZGZHQHZRHZIADEZBDEZISPDABJKQRLTUBUAUCADMBDMNO $.

  $( Cartesian products with disjoint sets are disjoint.  (Contributed by NM,
     13-Sep-2004.) $)
  xpdisj1 $p |- ( ( A i^i B ) = (/) -> ( ( A X. C ) i^i ( B X. D ) ) = (/) ) $=
    ( cin c0 wceq cxp xpeq1 inxp 0xp eqcomi 3eqtr4g ) ABEZFGNCDEZHFOHZACHBDHEFN
    FOIACBDJPFOKLM $.

  $( Cartesian products with disjoint sets are disjoint.  (Contributed by NM,
     13-Sep-2004.) $)
  xpdisj2 $p |- ( ( A i^i B ) = (/) -> ( ( C X. A ) i^i ( D X. B ) ) = (/) ) $=
    ( cin c0 wceq cxp xpeq2 inxp xp0 eqcomi 3eqtr4g ) ABEZFGCDEZNHOFHZCAHDBHEFN
    FOICADBJPFOKLM $.

  $( Cartesian products with two different singletons are disjoint.
     (Contributed by NM, 28-Jul-2004.) $)
  xpsndisj $p |- ( B =/= D -> ( ( A X. { B } ) i^i ( C X. { D } ) ) = (/) ) $=
    ( wne csn cin c0 wceq cxp disjsn2 xpdisj2 syl ) BDEBFZDFZGHIANJCOJGHIBDKNOA
    CLM $.

  ${
    $d A x y $.  $d B x y $.  $d C x y $.  $d D x y $.
    $( Difference of Cartesian products, expressed in terms of a union of
       Cartesian products of differences.  (Contributed by Jeff Madsen,
       2-Sep-2009.)  (Revised by Mario Carneiro, 26-Jun-2014.) $)
    difxp $p |- ( ( C X. D ) \ ( A X. B ) ) =
                ( ( ( C \ A ) X. D ) u. ( C X. ( D \ B ) ) ) $=
      ( vx vy cxp cdif wrel relxp cv wn wa wo anbi2i bitri opelxp eldif 3bitr4i
      wcel cun wss difss relss mp2 relun mpbir2an cop ianor andi notbii anbi12i
      anbi1i an32 anass orbi12i elun eqrelriiv ) EFCDGZABGZHZCAHZDGZCDBHZGZUAZV
      AUSUBUSIVAIUSUTUCCDJVAUSUDUEVFIVCIVEIVBDJCVDJVCVEUFUGEKZFKZUHZUSTZVIUTTZL
      ZMZVIVCTZVIVETZNZVIVATVIVFTVGCTZVHDTZMZVGATZVHBTZMZLZMZVSVTLZMZVSWALZMZNZ
      VMVPWDVSWEWGNZMWIWCWJVSVTWAUIOVSWEWGUJPVJVSVLWCVGVHCDQVKWBVGVHABQUKULVNWF
      VOWHVNVGVBTZVRMZWFVGVHVBDQWLVQWEMZVRMWFWKWMVRVGCARUMVQWEVRUNPPVQVHVDTZMVQ
      VRWGMZMVOWHWNWOVQVHDBROVGVHCVDQVQVRWGUOSUPSVIUSUTRVIVCVEUQSUR $.
  $}

  $( Difference law for Cartesian product.  (Contributed by Scott Fenton,
     18-Feb-2013.)  (Revised by Mario Carneiro, 26-Jun-2014.) $)
  difxp1 $p |- ( ( A \ B ) X. C ) = ( ( A X. C ) \ ( B X. C ) ) $=
    ( cxp cdif cun c0 difxp difid xpeq2i xp0 eqtri uneq2i un0 3eqtrri ) ACDBCDE
    ABECDZACCEZDZFPGFPBCACHRGPRAGDGQGACIJAKLMPNO $.

  $( Difference law for Cartesian product.  (Contributed by Scott Fenton,
     18-Feb-2013.)  (Revised by Mario Carneiro, 26-Jun-2014.) $)
  difxp2 $p |- ( A X. ( B \ C ) ) = ( ( A X. B ) \ ( A X. C ) ) $=
    ( cxp cdif cun c0 difxp difid xpeq1i 0xp eqtri uneq1i uncom un0 3eqtrri ) A
    BDACDEAAEZBDZABCEDZFGSFZSACABHRGSRGBDGQGBAIJBKLMTSGFSGSNSOLP $.

  ${
    $d x A $.  $d y B $.
    $( Disjoint unions with disjoint index sets are disjoint.  (Contributed by
       Stefan O'Rear, 21-Nov-2014.) $)
    djudisj $p |- ( ( A i^i B ) = (/) -> ( U_ x e. A ( { x } X. C ) i^i
            U_ y e. B ( { y } X. D ) ) = (/) ) $=
      ( cin c0 wceq cv csn cxp ciun cvv wss djussxp incom syl5eq ssdisj sylancr
      xpdisj1 ) CDGHIZACAJKELMZCNLZOUDBDBJKFLMZGZHIUCUEGHIACEPUBUFUEUDGZHUDUEQU
      BUEDNLZOUHUDGZHIUGHIBDFPUBUIUDUHGHUHUDQCDNNUARUEUHUDSTRUCUDUEST $.
  $}

  ${
    $d A i j p x y $.  $d B i j p x y $.
    $( The set of distinct couples in a Cartesian product.  (Contributed by
       Thierry Arnoux, 25-May-2019.) $)
    xpdifid $p |- U_ x e. A ( { x } X. ( B \ { x } ) ) = ( ( A X. B ) \ _I ) $=
      ( vi vj vy cv csn cdif cid wcel wrex wceq wa wex wne wn necon3bbii eleq2d
      velsn vp cxp ciun cop elxp rexbii rexcom4 exbii 3bitri eliun eldif opelxp
      wbr df-br vex ideq bitr3i anbi12i bitri anbi2i 2exbii eldifi elxpi 2eximi
      simpl 3syl ancli 19.42vv sylibr ancom eleq1 adantl pm5.32da 2exbidv mpbid
      syl5bb biimpar impbii r19.42v simprl sylib eqeltrd simprr eldifad eldifbd
      exlimivv necomd eqnetrd jca31 adantll sneq difeq2d anbi12d cbvrexv biimpi
      wb r19.29a simpll vsnid simplr simpr eldifd rspcev syl12anc 3bitr4i eqriv
      a1i ) UAABAGZHZCXIIZUBZUCZBCUBZJIZUAGZXKKZABLZXODGZEGZUDZMZXRXIKZXSXJKZNZ
      NZABLZEOZDOZXOXLKXOXNKZXQYEEOZDOZABLYJABLZDOYHXPYKABDEXOXIXJUEUFYJADBUGYL
      YGDYEAEBUGUHUIAXOBXKUJYAXTXNKZNZEODOZYAXRBKZXSCKZNZXRXSPZNZNZEODOYIYHYNUU
      ADEYMYTYAYMXTXMKZXTJKZQZNYTXTXMJUKUUBYRUUDYSXRXSBCULUUCXRXSUUCXRXSJUMXRXS
      MXRXSJUNXRXSEUOUPUQRURUSUTVAYIYOYIYIYANZEODOZYOYIYIYAEODOZNUUFYIUUGYIXOXM
      KYAYRNZEODOUUGXOXMJVBDEXOBCVCUUHYADEYAYRVEVDVFVGYIYADEVHVIYIUUEYNDEUUEYAY
      INYIYNYIYAVJYIYAYIYMYAYIYMWPYIXOXTXNVKZVLVMVPVNVOYNYIDEYAYIYMUUIVQWFVRYFU
      UADEYFYAYDABLZNUUAYAYDABVSUUJYTYAUUJYTUUJXRFGZHZKZXSCUULIZKZNZYTFBUUKBKZU
      UPYTUUJUUQUUPNZYPYQYSUURXRUUKBUURUUMXRUUKMUUQUUMUUOVTDUUKTWAZUUQUUPVEWBUU
      RXSCUULUUQUUMUUOWCZWDUURXRUUKXSUUSUURXSUUKUURXSUULKZQXSUUKPUURXSCUULUUTWE
      UVAXSUUKEUUKTRWAWGWHWIWJUUJUUPFBLYDUUPAFBXHUUKMZYBUUMYCUUOUVBXIUULXRXHUUK
      WKZSUVBXJUUNXSUVBXIUULCUVCWLSWMWNWOWQYTYPXRXRHZKZXSCUVDIZKZUUJYPYQYSWRUVE
      YTDWSXGYTXSCUVDYPYQYSWTYTXSXRPXSUVDKZQYTXRXSYRYSXAWGUVHXSXREXRTRVIXBYDUVE
      UVGNAXRBXHXRMZYBUVEYCUVGUVIXIUVDXRXHXRWKZSUVIXJUVFXSUVIXIUVDCUVJWLSWMXCXD
      VRUTUSVAXEXEXF $.
  $}

  $( A double restriction to disjoint classes is the empty set.  (Contributed
     by NM, 7-Oct-2004.)  (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
  resdisj $p |- ( ( A i^i B ) = (/) -> ( ( C |` A ) |` B ) = (/) ) $=
    ( cin c0 wceq cres reseq2 resres res0 eqcomi 3eqtr4g ) ABDZEFCMGCEGZCAGBGEM
    ECHCABINECJKL $.

  $( The range of a Cartesian product.  Part of Theorem 3.13(x) of [Monk1]
     p. 37.  (Contributed by NM, 12-Apr-2004.) $)
  rnxp $p |- ( A =/= (/) -> ran ( A X. B ) = B ) $=
    ( c0 wne cxp crn cdm ccnv df-rn cnvxp dmeqi eqtri dmxp syl5eq ) ACDABEZFZBA
    EZGZBPOHZGROISQABJKLBAMN $.

  $( The domain of a Cartesian product is a subclass of the first factor.
     (Contributed by NM, 19-Mar-2007.) $)
  dmxpss $p |- dom ( A X. B ) C_ A $=
    ( cxp cdm wss c0 wceq xpeq2 xp0 syl6eq dm0 0ss syl6eqss wne dmxp eqimss syl
    dmeqd pm2.61ine ) ABCZDZAEZBFBFGZUAFAUCUAFDFUCTFUCTAFCFBFAHAIJRKJALMBFNUAAG
    UBABOUAAPQS $.

  $( The range of a Cartesian product is a subclass of the second factor.
     (Contributed by NM, 16-Jan-2006.)  (Proof shortened by Andrew Salmon,
     27-Aug-2011.) $)
  rnxpss $p |- ran ( A X. B ) C_ B $=
    ( cxp crn ccnv cdm df-rn cnvxp dmeqi dmxpss eqsstri ) ABCZDLEZFZBLGNBACZFBM
    OABHIBAJKK $.

  $( The range of a square Cartesian product.  (Contributed by FL,
     17-May-2010.) $)
  rnxpid $p |- ran ( A X. A ) = A $=
    ( cxp crn wceq c0 rn0 xpeq2 xp0 syl6eq rneqd id 3eqtr4a rnxp pm2.61ine ) AA
    BZCZADAEAEDZECEPAFQOEQOAEBEAEAGAHIJQKLAAMN $.

  $( A Cartesian product subclass relationship is equivalent to the
     relationship for it components.  (Contributed by NM, 17-Dec-2008.) $)
  ssxpb $p |- ( ( A X. B ) =/= (/) -> ( ( A X. B ) C_ ( C X. D ) <->
              ( A C_ C /\ B C_ D ) ) ) $=
    ( cxp c0 wne wss wa cdm wceq xpnz dmxp adantl sylbir adantr eqsstr3d syl6ss
    dmss crn dmxpss rnxp rnss rnxpss jca ex xpss12 impbid1 ) ABEZFGZUICDEZHZACH
    ZBDHZIZUJULUOUJULIZUMUNUPAUKJZCUPAUIJZUQUJURAKZULUJAFGZBFGZIZUSABLZVAUSUTAB
    MNOPULURUQHUJUIUKSNQCDUARUPBUKTZDUPBUITZVDUJVEBKZULUJVBVFVCUTVFVAABUBPOPULV
    EVDHUJUIUKUCNQCDUDRUEUFACBDUGUH $.

  $( The Cartesian product of nonempty classes is one-to-one.  (Contributed by
     NM, 31-May-2008.) $)
  xp11 $p |- ( ( A =/= (/) /\ B =/= (/) )
      -> ( ( A X. B ) = ( C X. D ) <-> ( A = C /\ B = D ) ) ) $=
    ( c0 wne wa cxp wceq wi xpnz anidm neeq1 anbi2d syl5bbr wss ssxpb syl5ibcom
    eqimss eqss eqimss2 anim12d anbi12i bitr4i syl6ib sylbid com12 sylbi xpeq12
    an4 impbid1 ) AEFBEFGZABHZCDHZIZACIZBDIZGZULUMEFZUOURJABKUOUSURUOUSUSUNEFZG
    ZURUSUSUSGUOVAUSLUOUSUTUSUMUNEMNOUOVAACPZBDPZGZCAPZDBPZGZGZURUOUSVDUTVGUOUM
    UNPUSVDUMUNSABCDQRUOUNUMPUTVGUNUMUACDABQRUBVHVBVEGZVCVFGZGURVBVCVEVFUJUPVIU
    QVJACTBDTUCUDUEUFUGUHACBDUIUK $.

  $( Cancellation law for Cartesian product.  (Contributed by NM,
     30-Aug-2011.) $)
  xpcan $p |- ( C =/= (/) -> ( ( C X. A ) = ( C X. B ) <-> A = B ) ) $=
    ( c0 wne cxp wceq wb wa xp11 eqid biantrur syl6bbr wn wi simpr xpeq2 syl6eq
    nne xp0 eqeq1d eqcom syl6bb adantl df-ne wo xpeq0 orel1 syl5bi sylbi adantr
    sylbid eqtr3 syl6an sylan2b impbid1 pm2.61dan ) CDEZADEZCAFZCBFZGZABGZHURUS
    IVBCCGZVCIVCCACBJVDVCCKLMURUSNZIVBVCVEURADGZVBVCOADSURVFIZVFVBBDGZVCURVFPVG
    VBVADGZVHVFVBVIHURVFVBDVAGVIVFUTDVAVFUTCDFDADCQCTRUADVAUBUCUDURVIVHOZVFURCD
    GZNZVJCDUEVIVKVHUFVLVHCBUGVKVHUHUIUJUKULABDUMUNUOABCQUPUQ $.

  $( Cancellation law for Cartesian product.  (Contributed by NM,
     30-Aug-2011.) $)
  xpcan2 $p |- ( C =/= (/) -> ( ( A X. C ) = ( B X. C ) <-> A = B ) ) $=
    ( c0 wne cxp wceq wb wa xp11 eqid biantru syl6bbr wn nne simpl xpeq1 syl6eq
    0xp eqeq1d eqcom syl6bb adantr wi df-ne wo xpeq0 orel2 syl5bi adantl sylbid
    sylbi eqtr3 syl6an impbid1 sylanb pm2.61ian ) ADEZCDEZACFZBCFZGZABGZHZURUSI
    VBVCCCGZIVCACBCJVEVCCKLMURNADGZUSVDADOVFUSIZVBVCVGVFVBBDGZVCVFUSPVGVBVADGZV
    HVFVBVIHUSVFVBDVAGVIVFUTDVAVFUTDCFDADCQCSRTDVAUAUBUCUSVIVHUDZVFUSCDGZNZVJCD
    UEVIVHVKUFVLVHBCUGVKVHUHUIULUJUKABDUMUNABCQUOUPUQ $.

  ${
    $d x y A $.  $d x y B $.  $d x y C $.
    $( Subset of the range of a restriction.  (Contributed by NM, 16-Jan-2006.)
       (Proof shortened by Peter Mazsa, 2-Oct-2022.) $)
    ssrnres $p |- ( B C_ ran ( C |` A ) <-> ran ( C i^i ( A X. B ) ) = B ) $=
      ( vy vx cxp cin crn wceq wss cres inss2 rnssi rnxpss sstri cv wcel wex wa
      elrn2 eqss mpbiran inxpssres sstr mpan2 cop ssel syl6ib opelinxp opelresi
      vex ancld bianassc bitr4i exbii 19.42v 3bitri syl6ibr ssrdv impbii bitr2i
      ) CABFZGZHZBIZBVDJZBCAKZHZJZVEVDBJVFVDVBHBVCVBCVBLMABNOVDBUAUBVFVIVFVDVHJ
      VIVCVGABCUCMBVDVHUDUEVIDBVDVIDPZBQZVKEPZVJUFZVGQZERZSZVJVDQZVIVKVOVIVKVJV
      HQVOBVHVJUGEVJVGDUKZTUHULVQVMVCQZERVKVNSZERVPEVJVCVRTVSVTEVSVLAQZVKSVMCQZ
      SVTABVLVJCUIVNWAWBVKAVLVJCVRUJUMUNUOVKVNEUPUQURUSUTVA $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x y C $.
    $( Range of the intersection with a Cartesian product.  (Contributed by NM,
       17-Jan-2006.)  (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
    rninxp $p |- ( ran ( C i^i ( A X. B ) ) = B <->
                 A. y e. B E. x e. A x C y ) $=
      ( cres crn wss wcel wral cxp cin wceq wbr wrex dfss3 ssrnres cima df-ima
      cv eleq2i vex elima bitr3i ralbii 3bitr3i ) DECFGZHBTZUGIZBDJECDKLGDMATUH
      ENACOZBDJBDUGPCDEQUIUJBDUIUHECRZIUJUKUGUHECSUAAUHECBUBUCUDUEUF $.
  $}

  ${
    $d x A $.  $d x y B $.  $d x y C $.
    $( Domain of the intersection with a Cartesian product.  (Contributed by
       NM, 17-Jan-2006.) $)
    dminxp $p |- ( dom ( C i^i ( A X. B ) ) = A <->
                 A. x e. A E. y e. B x C y ) $=
      ( cxp cin cdm wceq ccnv crn cv wbr wrex wral dfdm4 cnvin cnvxp eqtri vex
      ineq2i rneqi eqeq1i rninxp brcnv rexbii ralbii 3bitri ) ECDFZGZHZCIEJZDCF
      ZGZKZCIBLZALZULMZBDNZACOUQUPEMZBDNZACOUKUOCUKUJJZKUOUJPVBUNVBULUIJZGUNEUI
      QVCUMULCDRUASUBSUCBADCULUDUSVAACURUTBDUPUQEBTATUEUFUGUH $.
  $}

  $( Image of a relation restricted to a rectangular region.  (Contributed by
     Stefan O'Rear, 19-Feb-2015.) $)
  imainrect $p |- ( ( G i^i ( A X. B ) ) " Y ) =
      ( ( G " ( Y i^i A ) ) i^i B ) $=
    ( cxp cin cres crn cima df-res rneqi df-ima eqtri ineq1i ccnv ineq2i eqtr4i
    cvv cdm 3eqtr4ri cnvin inxp inv1 incom xpeq12i eqtr2i xpindir inass 3eqtr4i
    in32 cnveqi cnvxp dmeqi dmres df-rn ) CABEZFZDGZHUQDREZFZHZUQDICDAFZIZBFZUR
    UTUQDJKUQDLVDCVBREZFZHZBFZVAVCVGBVCCVBGZHVGCVBLVIVFCVBJKMNVFOZBGZSZUTOZSVHV
    AVKVMVFRBEZFZOVJVNOZFZVMVKVFVNUAUTVOCUSFZUPFVRAREZVNFZFZUTVOUPVTVRVTARFZRBF
    ZEUPARRBUBWBAWCBAUCWCBRFBRBUDBUCMUEUFPCUPUSUJVOVRVSFZVNFWAVFWDVNVFCUSVSFZFW
    DVEWECDARUGPCUSVSUHQNVRVSVNUHMUIUKVKVJBREZFVQVJBJVPWFVJRBULPQTUMBVJSZFWGBFV
    LVHBWGUDVJBUNVGWGBVFUONTUTUOTQUI $.

  $( The image by a constant function (or other Cartesian product).
     (Contributed by Thierry Arnoux, 4-Feb-2017.) $)
  xpima $p |- ( ( A X. B ) " C ) = if ( ( A i^i C ) = (/) , (/) , B ) $=
    ( cxp cima cin c0 wceq cif wa wn wo exmid crn cvv rneqi syl6eq syl5eq ancli
    cres df-ima df-res eqtri inxp inv1 xpeq2i 3eqtri xpeq1 0xp rneqd df-ne rnxp
    rn0 wne sylbir orim12i ax-mp eqif mpbir ) ABDZCEZACFZGHZGBIHVCVAGHZJZVCKZVA
    BHZJZLZVCVFLVIVCMVCVEVFVHVCVDVCVAVBBDZNZGVAUTCODFZNZVBBOFZDZNVKVAUTCTZNVMUT
    CUAVPVLUTCUBPUCVLVOABCOUDPVOVJVNBVBBUEUFPUGZVCVKGNGVCVJGVCVJGBDGVBGBUHBUIQU
    JUMQRSVFVGVFVAVKBVQVFVBGUNVKBHVBGUKVBBULUORSUPUQVCVAGBURUS $.

  $( The image by a Cartesian product.  (Contributed by Thierry Arnoux,
     16-Dec-2017.) $)
  xpima1 $p |- ( ( A i^i C ) = (/) -> ( ( A X. B ) " C ) = (/) ) $=
    ( cin c0 wceq cxp cima cif xpima iftrue syl5eq ) ACDEFZABGCHMEBIEABCJMEBKL
    $.

  $( The image by a Cartesian product.  (Contributed by Thierry Arnoux,
     16-Dec-2017.) $)
  xpima2 $p |- ( ( A i^i C ) =/= (/) -> ( ( A X. B ) " C ) = B ) $=
    ( cin c0 wne cxp cima wceq cif xpima ifnefalse syl5eq ) ACDZEFABGCHNEIEBJBA
    BCKNEEBLM $.

  $( The image of a singleton by a Cartesian product.  (Contributed by Thierry
     Arnoux, 14-Jan-2018.)  (Proof shortened by BJ, 6-Apr-2019.) $)
  xpimasn $p |- ( X e. A -> ( ( A X. B ) " { X } ) = B ) $=
    ( wcel csn cin c0 wne cxp cima wceq disjsn necon3abii notnotb bitr4i xpima2
    wn sylbir ) CADZACEZFZGHZABITJBKUBSQZQSUCUAGACLMSNOABTPR $.

  ${
    $d x y A $.  $d x B $.  $d x y R $.
    $( The base set of a strict order is contained in the field of the
       relation, except possibly for one element (note that ` (/) Or { B } ` ).
       (Contributed by Mario Carneiro, 27-Apr-2015.) $)
    sossfld $p |- ( ( R Or A /\ B e. A ) ->
      ( A \ { B } ) C_ ( dom R u. ran R ) ) $=
      ( vx wor wcel wa csn cdif cdm crn cun cv wne eldifsn wbr wo wb wi 3expia
      sotrieq necon2abid breldmg ancoms brelrng orim12d syl6ibr adantll sylbird
      anass1rs elun expimpd syl5bi ssrdv ) ACEZBAFZGZDABHIZCJZCKZLZDMZURFVBAFZV
      BBNZGUQVBVAFZVBABOUQVCVDVEUQVCGVDVBBCPZBVBCPZQZVEUOVCUPVHVDRUOVCUPGGVHVBB
      AVBBCUAUBUJUPVCVHVESUOUPVCGZVHVBUSFZVBUTFZQVEVIVFVJVGVKVCUPVFVJSVCUPVFVJV
      BBAACUCTUDUPVCVGVKBVBCAAUETUFVBUSUTUKUGUHUIULUMUN $.

    $( The base set of a nonempty strict order is the same as the field of the
       relation.  (Contributed by Mario Carneiro, 15-May-2015.) $)
    sofld $p |- ( ( R Or A /\ R C_ ( A X. A ) /\ R =/= (/) ) ->
      A = ( dom R u. ran R ) ) $=
      ( vx vy wor cxp wss c0 cdm crn wa wrel ad2antlr wcel ssun1 syl6sseq unssd
      cun cv ex wne w3a wn wceq relxp relss mpi cop wbr df-br csn cdif sseqtr4i
      undif1 simpll dmxpid releldm sylancom sseldd sossfld syl2anc sseldi snssd
      dmss syl5ss syl5bir con3dimp pm2.21d relssdv ss0 syl necon1ad 3impia rnss
      rnxpid 3ad2ant2 eqssd ) ABEZBAAFZGZBHUAZUBABIZBJZRZVRVTWAAWDGZVRVTKZWEBHW
      FWEUCZBHUDZWFWGKZBHGWHWICDBHVTBLZVRWGVTVSLWJAAUEBVSUFUGZMWICSZDSZUHZBNZWN
      HNWFWOWEWOWLWMBUIZWFWEWLWMBUJWFWPWEWFWPKZAAWLUKZULZWRRZWDAAWRRWTAWROAWRUN
      UMWQWSWRWDWQVRWLANWSWDGVRVTWPUOWQWBAWLVTWBAGVRWPVTWBVSIABVSVDAUPPZMWFWPWJ
      WLWBNVTWJVRWPWKMWLWMBUQURZUSAWLBUTVAWQWLWDWQWBWDWLWBWCOXBVBVCQVETVFVGVHVI
      BVJVKTVLVMVTVRWDAGWAVTWBWCAXAVTWCVSJABVSVNAVOPQVPVQ $.
  $}

  ${
    $d x y R $.
    $( The set of all ordered pairs in a class is the same as the double
       converse.  (Contributed by Mario Carneiro, 16-Aug-2015.) $)
    cnvcnv3 $p |- `' `' R = { <. x , y >. | x R y } $=
      ( ccnv cv wbr copab df-cnv vex brcnv opabbii eqtri ) CDZDBEZAEZMFZABGONCF
      ZABGABMHPQABNOCBIAIJKL $.

    $( Alternate definition of relation.  Exercise 2 of [TakeutiZaring] p. 25.
       (Contributed by NM, 29-Dec-1996.) $)
    dfrel2 $p |- ( Rel R <-> `' `' R = R ) $=
      ( vx vy wrel ccnv wceq relcnv cv cop wcel vex opelcnv bitri eqrelriv mpan
      releq mpbii impbii ) ADZAEZEZAFZUADZSUBTGZBCUAABHZCHZIZUAJUFUEITJUGAJUEUF
      TBKZCKZLUFUEAUIUHLMNOUBUCSUDUAAPQR $.

    $( A relation can be expressed as the set of ordered pairs in it.  An
       analogue of ~ dffn5 for relations.  (Contributed by Mario Carneiro,
       16-Aug-2015.) $)
    dfrel4v $p |- ( Rel R <-> R = { <. x , y >. | x R y } ) $=
      ( wrel ccnv wceq cv wbr copab dfrel2 eqcom cnvcnv3 eqeq2i 3bitri ) CDCEEZ
      CFCOFCAGBGCHABIZFCJOCKOPCABCLMN $.
  $}

  ${
    $d a b x y $.  $d a b R $.
    dfrel4.1 $e |- F/_ x R $.
    dfrel4.2 $e |- F/_ y R $.
    $( A relation can be expressed as the set of ordered pairs in it.  An
       analogue of ~ dffn5 for relations.  (Contributed by Mario Carneiro,
       16-Aug-2015.)  (Revised by Thierry Arnoux, 11-May-2017.) $)
    dfrel4 $p |- ( Rel R <-> R = { <. x , y >. | x R y } ) $=
      ( va vb wrel cv wbr copab wceq dfrel4v nfcv nfbr nfv breq12 cbvopab bitri
      eqeq2i ) CHCFIZGIZCJZFGKZLCAIZBIZCJZABKZLFGCMUDUHCUCUGFGABAUAUBCAUANDAUBN
      OBUAUBCBUANEBUBNOUGFPUGGPUAUEUBUFCQRTS $.
  $}

  $( The double converse of a class strips out all elements that are not
     ordered pairs.  (Contributed by NM, 8-Dec-2003.)  (Proof shortened by BJ,
     26-Nov-2021.) $)
  cnvcnv $p |- `' `' A = ( A i^i ( _V X. _V ) ) $=
    ( ccnv cvv cxp cin cnvin cnveqi wceq wrel relcnv df-rel mpbi relxp sseqtr4i
    wss dfrel2 dfss 3eqtr4ri relinxp eqtri ) ABZBZACCDZEZBZBZUDUAUCBZEZBUBUGBZE
    ZUFUBUAUGFUEUHAUCFGUBUIOUBUJHUBUCUIUBIUBUCOUAJUBKLUCIUIUCHCCMUCPLNUBUIQLRUD
    IUFUDHCCASUDPLT $.

  $( The double converse of a class equals its restriction to the universe.
     (Contributed by NM, 8-Oct-2007.) $)
  cnvcnv2 $p |- `' `' A = ( A |` _V ) $=
    ( ccnv cvv cxp cin cres cnvcnv df-res eqtr4i ) ABBACCDEACFAGACHI $.

  $( The double converse of a class is a subclass.  Exercise 2 of
     [TakeutiZaring] p. 25.  (Contributed by NM, 23-Jul-2004.) $)
  cnvcnvss $p |- `' `' A C_ A $=
    ( ccnv cvv cxp cin cnvcnv inss1 eqsstri ) ABBACCDZEAAFAIGH $.

  $( Equality theorem for converse.  (Contributed by FL, 19-Sep-2011.) $)
  cnveqb $p |- ( ( Rel A /\ Rel B ) -> ( A = B <-> `' A = `' B ) ) $=
    ( wrel wa wceq ccnv cnveq wi dfrel2 eqeq2 syl5ibr eqcoms sylbi eqeq1 imbi2d
    imp impbid2 ) ACZBCZDABEZAFZBFZEZABGRSUCTHZRUAFZAESUDHZAIUFAUESUDAUEEZUCUEB
    EZHZSUBFZBEUIBIUIBUJUCUHBUJEUEUJEUAUBGBUJUEJKLMUGTUHUCAUEBNOKLMPQ $.

  $( A relation empty iff its converse is empty.  (Contributed by FL,
     19-Sep-2011.) $)
  cnveq0 $p |- ( Rel A -> ( A = (/) <-> `' A = (/) ) ) $=
    ( c0 ccnv wceq wrel wb wi cnv0 rel0 cnveqb mpan2 eqeq2 bibi2d syl5ibr ax-mp
    eqcoms ) BCZBDAEZABDZACZBDZFZGZHUCBQRUBBQDZSTQDZFZRBEUFIABJKUDUAUESBQTLMNPO
    $.

  $( Alternate definition of relation.  (Contributed by NM, 14-May-2008.) $)
  dfrel3 $p |- ( Rel R <-> ( R |` _V ) = R ) $=
    ( wrel ccnv wceq cvv cres dfrel2 cnvcnv2 eqeq1i bitri ) ABACCZADAEFZADAGKLA
    AHIJ $.

  ${
    $d x A $.
    $( Characterization of the elements of the identity relation.  TODO:
       reorder theorems to move this theorem and ~ dfrel3 after ~ elrid .
       (Contributed by BJ, 28-Aug-2022.) $)
    elid $p |- ( A e. _I <-> E. x A = <. x , x >. ) $=
      ( cid wcel cvv cres cop wceq wrex wex wrel reli dfrel3 mpbi eqcomi eleq2i
      cv elrid rexv 3bitri ) BCDBCEFZDBAQZUBGHZAEIUCAJCUABUACCKUACHLCMNOPABERUC
      AST $.
  $}

  $( The domain of a universal restriction.  (Contributed by NM,
     14-May-2008.) $)
  dmresv $p |- dom ( A |` _V ) = dom A $=
    ( cvv cres cdm cin dmres incom inv1 3eqtri ) ABCDBADZEJBEJABFBJGJHI $.

  $( The range of a universal restriction.  (Contributed by NM,
     14-May-2008.) $)
  rnresv $p |- ran ( A |` _V ) = ran A $=
    ( ccnv crn cvv cres cnvcnv2 rneqi rncnvcnv eqtr3i ) ABBZCADEZCACJKAFGAHI $.

  $( Range defined in terms of image.  (Contributed by NM, 14-May-2008.) $)
  dfrn4 $p |- ran A = ( A " _V ) $=
    ( cvv cima cres crn df-ima rnresv eqtr2i ) ABCABDEAEABFAGH $.

  $( Distribute proper substitution through the range of a class.  (Contributed
     by Alan Sare, 10-Nov-2012.) $)
  csbrn $p |- [_ A / x ]_ ran B = ran [_ A / x ]_ B $=
    ( cvv cima csb crn csbima12 wcel wceq csbconstg imaeq2d wn c0 eqcomi csbprc
    0ima imaeq1d syl6eq dfrn4 3eqtr4a pm2.61i eqtri csbeq2i 3eqtr4i ) ABCDEZFZA
    BCFZDEZABCGZFUHGUGUHABDFZEZUIABDCHBDIZULUIJUMUKDUHABDDKLUMMZNNDEZULUIUONDQO
    UNULNUKENUNUHNUKABCPZRUKQSUNUHNDUPRUAUBUCABUJUFCTUDUHTUE $.

  $( The restriction of the double converse of a class.  (Contributed by NM,
     8-Apr-2007.)  (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
  rescnvcnv $p |- ( `' `' A |` B ) = ( A |` B ) $=
    ( ccnv cres cvv cin cnvcnv2 reseq1i resres wss wceq ssv sseqin2 mpbi 3eqtri
    reseq2i ) ACCZBDAEDZBDAEBFZDABDQRBAGHAEBISBABEJSBKBLBEMNPO $.

  $( The double converse of the restriction of a class.  (Contributed by NM,
     3-Jun-2007.) $)
  cnvcnvres $p |- `' `' ( A |` B ) = ( `' `' A |` B ) $=
    ( cres ccnv wrel wceq relres dfrel2 mpbi rescnvcnv eqtr4i ) ABCZDDZLADDBCLE
    MLFABGLHIABJK $.

  $( The image of the double converse of a class.  (Contributed by NM,
     8-Apr-2007.) $)
  imacnvcnv $p |- ( `' `' A " B ) = ( A " B ) $=
    ( ccnv cres crn cima rescnvcnv rneqi df-ima 3eqtr4i ) ACCZBDZEABDZEKBFABFLM
    ABGHKBIABIJ $.

  ${
    $d x y A $.
    $( The domain of a singleton is nonzero iff the singleton argument is an
       ordered pair.  (Contributed by NM, 14-Dec-2008.)  (Proof shortened by
       Andrew Salmon, 27-Aug-2011.) $)
    dmsnn0 $p |- ( A e. ( _V X. _V ) <-> dom { A } =/= (/) ) $=
      ( vx vy cv cop wceq wex csn cdm wcel cvv cxp wne wbr vex eldm df-br exbii
      c0 opex elsn eqcom 3bitri bitr2i elvv n0 3bitr4i ) ABDZCDZEZFZCGZBGUHAHZI
      ZJZBGAKKLJUNSMULUOBUOUHUIUMNZCGULCUHUMBOPUPUKCUPUJUMJUJAFUKUHUIUMQUJAUHUI
      TUAUJAUBUCRUDRBCAUEBUNUFUG $.
  $}

  $( The range of a singleton is nonzero iff the singleton argument is an
     ordered pair.  (Contributed by NM, 14-Dec-2008.) $)
  rnsnn0 $p |- ( A e. ( _V X. _V ) <-> ran { A } =/= (/) ) $=
    ( cvv cxp wcel csn cdm c0 wne crn dmsnn0 dm0rn0 necon3bii bitri ) ABBCDAEZF
    ZGHNIZGHAJOGPGNKLM $.

  $( The domain of the singleton of the empty set is empty.  (Contributed by
     NM, 30-Jan-2004.) $)
  dmsn0 $p |- dom { (/) } = (/) $=
    ( c0 csn cdm wceq cvv cxp wcel wn 0nelxp dmsnn0 necon2bbii mpbir ) ABCZADAE
    EFGZHEEINMAAJKL $.

  $( The converse of the singleton of the empty set is empty.  (Contributed by
     Mario Carneiro, 30-Aug-2015.) $)
  cnvsn0 $p |- `' { (/) } = (/) $=
    ( c0 csn ccnv wceq crn dfdm4 dmsn0 eqtr3i wrel wb relcnv relrn0 ax-mp mpbir
    cdm ) ABZCZADZQEZADZPOSAPFGHQIRTJPKQLMN $.

  $( The domain of a singleton is empty if the singleton's argument contains
     the empty set.  (Contributed by NM, 15-Dec-2008.) $)
  dmsn0el $p |- ( (/) e. A -> dom { A } = (/) ) $=
    ( c0 wcel csn cdm wne cvv cxp wn dmsnn0 0nelelxp sylbir necon4ai ) BACZADEZ
    BOBFAGGHCNIAJGGAKLM $.

  $( A singleton is a relation iff it has a nonempty domain.  (Contributed by
     NM, 25-Sep-2013.)  Make hypothesis an antecedent.  (Revised by BJ,
     12-Feb-2022.) $)
  relsn2 $p |- ( A e. V -> ( Rel { A } <-> dom { A } =/= (/) ) ) $=
    ( wcel csn wrel cvv cxp cdm c0 wne relsng dmsnn0 syl6bb ) ABCADZEAFFGCNHIJA
    BKALM $.

  ${
    $d x y A $.  $d x y B $.  $d x V $.
    $( The domain of a singleton of an ordered pair is the singleton of the
       first member.  (Contributed by Mario Carneiro, 26-Apr-2015.) $)
    dmsnopg $p |- ( B e. V -> dom { <. A , B >. } = { A } ) $=
      ( vx vy wcel cop csn cdm cv wceq wex vex opth1 exlimiv opeq1 opeq2 eqeq1d
      spcegv syl5 impbid2 eldm2 opex elsn exbii bitri velsn 3bitr4g eqrdv ) BCF
      ZDABGZHZIZAHZUJDJZEJZGZUKKZELZUOAKZUOUMFZUOUNFUJUSUTURUTEUOUPABDMZEMNOUTU
      OBGZUKKZUJUSUOABPURVDEBCUPBKUQVCUKUPBUOQRSTUAVAUQULFZELUSEUOULVBUBVEUREUQ
      UKUOUPUCUDUEUFDAUGUHUI $.

    $( The domain of a singleton of an ordered pair is a subset of the
       singleton of the first member (with no sethood assumptions on ` B ` ).
       (Contributed by Mario Carneiro, 30-Apr-2015.) $)
    dmsnopss $p |- dom { <. A , B >. } C_ { A } $=
      ( cvv wcel cop csn cdm wss dmsnopg eqimss syl wn opprc2 sneqd dmeqd dmsn0
      wceq c0 syl6eq 0ss syl6eqss pm2.61i ) BCDZABEZFZGZAFZHZUCUFUGQUHABCIUFUGJ
      KUCLZUFRUGUIUFRFZGRUIUEUJUIUDRABMNOPSUGTUAUB $.

    $( The domain of an unordered pair of ordered pairs.  (Contributed by Mario
       Carneiro, 26-Apr-2015.) $)
    dmpropg $p |- ( ( B e. V /\ D e. W ) ->
        dom { <. A , B >. , <. C , D >. } = { A , C } ) $=
      ( wcel wa cop csn cdm cun cpr wceq dmsnopg uneq12 syl2an df-pr dmeqi dmun
      eqtri 3eqtr4g ) BEGZDFGZHABIZJZKZCDIZJZKZLZAJZCJZLZUEUHMZKZACMUCUGULNUJUM
      NUKUNNUDABEOCDFOUGULUJUMPQUPUFUILZKUKUOUQUEUHRSUFUITUAACRUB $.
  $}

  ${
    dmsnop.1 $e |- B e. _V $.
    $( The domain of a singleton of an ordered pair is the singleton of the
       first member.  (Contributed by NM, 30-Jan-2004.)  (Proof shortened by
       Andrew Salmon, 27-Aug-2011.)  (Revised by Mario Carneiro,
       26-Apr-2015.) $)
    dmsnop $p |- dom { <. A , B >. } = { A } $=
      ( cvv wcel cop csn cdm wceq dmsnopg ax-mp ) BDEABFGHAGICABDJK $.

    dmprop.1 $e |- D e. _V $.
    $( The domain of an unordered pair of ordered pairs.  (Contributed by NM,
       13-Sep-2011.) $)
    dmprop $p |- dom { <. A , B >. , <. C , D >. } = { A , C } $=
      ( cvv wcel cop cpr cdm wceq dmpropg mp2an ) BGHDGHABICDIJKACJLEFABCDGGMN
      $.

    dmtpop.1 $e |- F e. _V $.
    $( The domain of an unordered triple of ordered pairs.  (Contributed by NM,
       14-Sep-2011.) $)
    dmtpop $p |- dom { <. A , B >. , <. C , D >. , <. E , F >. }
                        = { A , C , E } $=
      ( cop ctp cdm cpr csn cun df-tp dmeqi dmun dmprop dmsnop uneq12i 3eqtri
      eqtr4i ) ABJZCDJZEFJZKZLZACMZENZOZACEKUHUDUEMZUFNZOZLULLZUMLZOUKUGUNUDUEU
      FPQULUMRUOUIUPUJABCDGHSEFITUAUBACEPUC $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( Double converse of a singleton of an ordered pair.  (Unlike ~ cnvsn ,
       this does not need any sethood assumptions on ` A ` and ` B ` .)
       (Contributed by Mario Carneiro, 26-Apr-2015.) $)
    cnvcnvsn $p |- `' `' { <. A , B >. } = `' { <. B , A >. } $=
      ( vx vy cop csn ccnv relcnv cv wcel vex opelcnv wceq wa opth 3bitr4i opex
      ancom elsn bitri eqrelriiv ) CDABEZFZGZGZBAEZFZGZUDHUGHCIZDIZEZUEJUJUIEZU
      DJZUKUHJZUIUJUDCKZDKZLUKUCJZULUGJZUMUNUKUBMZULUFMZUQURUIAMZUJBMZNVBVANUSU
      TVAVBRUIUJABUOUPOUJUIBAUPUOOPUKUBUIUJQSULUFUJUIQSPUJUIUCUPUOLUIUJUGUOUPLP
      TUA $.

    $( The domain of the singleton of the singleton of a singleton.
       (Contributed by NM, 15-Sep-2004.)  (Revised by Mario Carneiro,
       26-Apr-2015.) $)
    dmsnsnsn $p |- dom { { { A } } } = { A } $=
      ( vx cvv wcel csn cdm wceq cv cop vex opid sneq sneqd syl5eq dmeqd dmsnop
      eqeq12d vtoclg wn c0 0ex snid dmsn0el ax-mp snprc biimpi 3eqtr4a pm2.61i
      ) ACDZAEZEZEZFZUJGZBHZUOIZEZFZUOEZGUNBACUOAGZURUMUSUJUTUQULUTUPUKUTUPUSEU
      KUOBJZKUTUSUJUOALZMNMOVBQUOUOVAPRUISZTEZEZFZTUMUJTVDDVFTGTUAUBVDUCUDVCULV
      EVCUKVDVCUJTVCUJTGAUEUFZMMOVGUGUH $.
  $}

  $( The range of a singleton of an ordered pair is the singleton of the second
     member.  (Contributed by NM, 24-Jul-2004.)  (Revised by Mario Carneiro,
     30-Apr-2015.) $)
  rnsnopg $p |- ( A e. V -> ran { <. A , B >. } = { B } ) $=
    ( wcel cop csn crn cdm ccnv df-rn dfdm4 cnvcnvsn dmeqi 3eqtri eqtr4i syl5eq
    dmsnopg ) ACDABEFZGZBAEFZHZBFSRIZHZUARJUATIZGUDIZHUCTKUDJUEUBBALMNOBACQP $.

  $( The range of a pair of ordered pairs is the pair of second members.
     (Contributed by Thierry Arnoux, 3-Jan-2017.) $)
  rnpropg $p |- ( ( A e. V /\ B e. W )
    -> ran { <. A , C >. , <. B , D >. } = { C , D } ) $=
    ( wcel cop cpr crn csn cun df-pr rneqi wceq rnsnopg adantr adantl uneq12d
    wa rnun 3eqtr4g syl5eq ) AEGZBFGZTZACHZBDHZIZJUGKZUHKZLZJZCDIZUIULUGUHMNUFU
    JJZUKJZLCKZDKZLUMUNUFUOUQUPURUDUOUQOUEACEPQUEUPUROUDBDFPRSUJUKUACDMUBUC $.

  $( Converse of a singleton of an ordered pair.  (Contributed by NM,
     23-Jan-2015.)  (Proof shortened by BJ, 12-Feb-2022.) $)
  cnvsng $p |-
            ( ( A e. V /\ B e. W ) -> `' { <. A , B >. } = { <. B , A >. } ) $=
    ( wcel cop csn ccnv cnvcnvsn wrel wceq relsnopg ancoms dfrel2 sylib syl5eqr
    wa ) ACEZBDEZQZABFGHBAFGZHHZUABAITUAJZUBUAKSRUCBADCLMUANOP $.

  ${
    cnvsn.1 $e |- A e. _V $.
    $( The range of a singleton of an ordered pair is the singleton of the
       second member.  (Contributed by NM, 24-Jul-2004.)  (Revised by Mario
       Carneiro, 26-Apr-2015.) $)
    rnsnop $p |- ran { <. A , B >. } = { B } $=
      ( cvv wcel cop csn crn wceq rnsnopg ax-mp ) ADEABFGHBGICABDJK $.

    cnvsn.2 $e |- B e. _V $.
    $( Extract the first member of an ordered pair.  (See ~ op2nda to extract
       the second member, ~ op1stb for an alternate version, and ~ op1st for
       the preferred version.)  (Contributed by Raph Levien, 4-Dec-2003.) $)
    op1sta $p |- U. dom { <. A , B >. } = A $=
      ( cop csn cdm cuni dmsnop unieqi unisn eqtri ) ABEFGZHAFZHAMNABDIJACKL $.

    $( Converse of a singleton of an ordered pair.  (Contributed by NM,
       11-May-1998.)  (Revised by Mario Carneiro, 26-Apr-2015.)  (Proof
       shortened by BJ, 12-Feb-2022.) $)
    cnvsn $p |- `' { <. A , B >. } = { <. B , A >. } $=
      ( cvv wcel cop csn ccnv wceq cnvsng mp2an ) AEFBEFABGHIBAGHJCDABEEKL $.

    $( Extract the second member of an ordered pair.  Theorem 5.12(ii) of
       [Monk1] p. 52.  (See ~ op1stb to extract the first member, ~ op2nda for
       an alternate version, and ~ op2nd for the preferred version.)
       (Contributed by NM, 25-Nov-2003.) $)
    op2ndb $p |- |^| |^| |^| `' { <. A , B >. } = B $=
      ( cop csn ccnv cint cnvsn inteqi opex intsn eqtri op1stb ) ABEFGZHZHZHBAE
      ZHZHBQSPRPRFZHROTABCDIJRBAKLMJJBADCNM $.

    $( Extract the second member of an ordered pair.  (See ~ op1sta to extract
       the first member, ~ op2ndb for an alternate version, and ~ op2nd for the
       preferred version.)  (Contributed by NM, 17-Feb-2004.)  (Proof shortened
       by Andrew Salmon, 27-Aug-2011.) $)
    op2nda $p |- U. ran { <. A , B >. } = B $=
      ( cop csn crn cuni rnsnop unieqi unisn eqtri ) ABEFGZHBFZHBMNABCIJBDKL $.
  $}

  $( Swap the members of an ordered pair.  (Contributed by NM, 14-Dec-2008.)
     (Revised by Mario Carneiro, 30-Aug-2015.) $)
  opswap $p |- U. `' { <. A , B >. } = <. B , A >. $=
    ( cvv wcel wa cop ccnv cuni wceq cnvsng unieqd opex unisn syl6eq wn c0 uni0
    csn opprc sneqd cnveqd cnvsn0 ancom sylnbi 3eqtr4a pm2.61i ) ACDZBCDZEZABFZ
    RZGZHZBAFZIUIUMUNRZHUNUIULUOABCCJKUNBALMNUIOZPHPUMUNQUPULPUPULPRZGPUPUKUQUP
    UJPABSTUAUBNKUIUHUGEUNPIUGUHUCBASUDUEUF $.

  ${
    $d s t A $.  $d s t B $.  $d s t F $.
    $( An image under the converse of a restriction.  (Contributed by Jeff
       Hankins, 12-Jul-2009.) $)
    cnvresima $p |- ( `' ( F |` A ) " B ) = ( ( `' F " B ) i^i A ) $=
      ( vt vs cres ccnv cima cin cv wcel cop wa wex 19.41v vex opelresi opelcnv
      3bitr4i elima3 anbi2ci bianass exbii anbi1i elin eqriv ) DCAFZGZBHZCGZBHZ
      AIZEJZBKZUMDJZLZUHKZMZENZUOUKKZUOAKZMZUOUIKUOULKUNUPUJKZMZVAMZENVDENZVAMU
      SVBVDVAEOURVEEUQVCVAUNUOUMLZUGKVAVGCKZMUQVCVAMAUOUMCEPZQUMUOUGVIDPZRVCVHV
      AUMUOCVIVJRUASUBUCUTVFVAEUOUJBVJTUDSEUOUHBVJTUOUKAUESUF $.
  $}

  $( A class restricted to its domain equals its double converse.  (Contributed
     by NM, 8-Apr-2007.) $)
  resdm2 $p |- ( A |` dom A ) = `' `' A $=
    ( ccnv cdm cres rescnvcnv wrel relcnv resdm ax-mp dmcnvcnv reseq2i 3eqtr3ri
    wceq ) ABZBZOCZDZAPDOAACZDAPEOFQOMNGOHIPRAAJKL $.

  $( Restriction to the domain of a restriction.  (Contributed by NM,
     8-Apr-2007.) $)
  resdmres $p |- ( A |` dom ( A |` B ) ) = ( A |` B ) $=
    ( cres cdm ccnv cvv cxp in12 df-res resdm2 eqtr3i ineq2i incom 3eqtri dmres
    cin xpeq1i xpindir eqtri 3eqtr4i rescnvcnv ) AABCZDZCZAEEZBCZUBABFGZADZFGZP
    ZPZUEUGPZUDUFUKUGAUIPZPUGUEPULAUGUIHUMUEUGAUHCUMUEAUHIAJKLUGUEMNUDAUCFGZPUK
    AUCIUNUJAUNBUHPZFGUJUCUOFABOQBUHFRSLSUEBITABUAS $.

  $( A restriction by an arbitrary set is a restriction by its domain.
     (Contributed by AV, 16-Nov-2020.) $)
  resresdm $p |- ( F = ( E |` A ) -> F = ( E |` dom F ) ) $=
    ( cres wceq cdm id dmeq reseq2d resdmres syl6req eqtrd ) CBADZEZCMBCFZDZNGN
    PBMFZDMNOQBCMHIBAJKL $.

  $( The image of the domain of a restriction.  (Contributed by NM,
     8-Apr-2007.) $)
  imadmres $p |- ( A " dom ( A |` B ) ) = ( A " B ) $=
    ( cres cdm crn cima resdmres rneqi df-ima 3eqtr4i ) AABCZDZCZEKEALFABFMKABG
    HALIABIJ $.

  ${
    $d x y C $.  $d y A $.  $d y B $.  $d y F $.  $d x V $.
    dmmpt.1 $e |- F = ( x e. A |-> B ) $.
    $( The preimage of a function in maps-to notation.  (Contributed by Stefan
       O'Rear, 25-Jan-2015.) $)
    mptpreima $p |- ( `' F " C ) = { x e. A | B e. C } $=
      ( vy ccnv cima cv wcel wceq wa copab crab eqtri crn wex cab bitri cnvopab
      cmpt df-mpt cnveqi imaeq1i df-ima resopab rneqi ancom anass exbii df-clel
      cres 19.42v bicomi anbi2i abbii rnopab df-rab 3eqtr4i ) EHZDIAJBKZGJZCLZM
      ZGANZDIZCDKZABOZVAVFDVAVEAGNZHVFEVJEABCUBVJFAGBCUCPUDVEAGUAPUEVGVFDUMZQZV
      IVFDUFVLVCDKZVEMZGANZQZVIVKVOVEGADUGUHVNGRZASVBVHMZASVPVIVQVRAVQVBVDVMMZM
      ZGRZVRVNVTGVNVEVMMVTVMVEUIVBVDVMUJTUKWAVBVSGRZMVRVBVSGUNWBVHVBVHWBGCDULUO
      UPTTUQVNGAURVHABUSUTPPP $.

    $( Converse singleton image of a function defined by maps-to.  (Contributed
       by Stefan O'Rear, 25-Jan-2015.) $)
    mptiniseg $p |- ( C e. V -> ( `' F " { C } ) = { x e. A | B = C } ) $=
      ( wcel ccnv csn cima crab wceq mptpreima elsn2g rabbidv syl5eq ) DFHZEIDJ
      ZKCSHZABLCDMZABLABCSEGNRTUAABCDFOPQ $.

    $( The domain of the mapping operation in general.  (Contributed by NM,
       16-May-1995.)  (Revised by Mario Carneiro, 22-Mar-2015.) $)
    dmmpt $p |- dom F = { x e. A | B e. _V } $=
      ( cdm ccnv crn cvv cima wcel crab dfdm4 dfrn4 mptpreima 3eqtri ) DFDGZHQI
      JCIKABLDMQNABCIDEOP $.

    $d x A $.
    $( The domain of a mapping is a subset of its base class.  (Contributed by
       Scott Fenton, 17-Jun-2013.) $)
    dmmptss $p |- dom F C_ A $=
      ( cvv wcel cdm dmmpt ssrab3 ) CFGABDHABCDEIJ $.
  $}

  ${
    $d A x $.
    $( The domain of the mapping operation is the stated domain, if the
       function value is always a set.  (Contributed by Mario Carneiro,
       9-Feb-2013.)  (Revised by Mario Carneiro, 14-Sep-2013.) $)
    dmmptg $p |- ( A. x e. A B e. V -> dom ( x e. A |-> B ) = A ) $=
      ( wcel wral cvv crab cmpt cdm wceq elex ralimi rabid2 eqid dmmpt syl6reqr
      sylibr ) CDEZABFZBCGEZABHZABCIZJTUAABFBUBKSUAABCDLMUAABNRABCUCUCOPQ $.
  $}

  ${
    $d w x y z A $.  $d w x y z B $.  $d w x y z C $.
    $( A composition is a relation.  Exercise 24 of [TakeutiZaring] p. 25.
       (Contributed by NM, 26-Jan-1997.) $)
    relco $p |- Rel ( A o. B ) $=
      ( vx vz vy cv wbr wa wex ccom df-co relopabi ) CFDFZBGMEFAGHDICEABJCEDABK
      L $.

    $( Alternate definition of a class composition, using only one bound
       variable.  (Contributed by NM, 19-Dec-2008.) $)
    dfco2 $p |- ( A o. B )
                = U_ x e. _V ( ( `' B " { x } ) X. ( A " { x } ) ) $=
      ( vy vz ccom cvv ccnv cv csn cima cxp wrel wcel cop wex vex elimasn bitri
      wa ciun relco reliun relxp a1i mprgbir wb opelco2g el2v wrex eliun opelxp
      rexv opelcnv anbi12i exbii 3bitrri eqrelriiv ) DEBCFZAGCHZAIZJZKZBVBKZLZU
      AZBCUBVFMVEMZAGAGVEUCVGVAGNVCVDUDUEUFDIZEIZOZUSNZVHVAOCNZVAVIOBNZTZAPZVJV
      FNZVKVOUGDEAVHVIBCGGUHUIVPVJVENZAGUJVQAPVOAVJGVEUKVQAUMVQVNAVQVHVCNZVIVDN
      ZTVNVHVIVCVDULVRVLVSVMVRVAVHOUTNVLUTVAVHAQZDQZRVAVHCVTWAUNSBVAVIVTEQRUOSU
      PUQSUR $.

    $( Generalization of ~ dfco2 , where ` C ` can have any value between
       ` dom A i^i ran B ` and ` _V ` .  (Contributed by NM, 21-Dec-2008.)
       (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
    dfco2a $p |- ( ( dom A i^i ran B ) C_ C -> ( A o. B )
         = U_ x e. C ( ( `' B " { x } ) X. ( A " { x } ) ) ) $=
      ( vy vz vw cvv cv cima ciun wcel wrex wex wa cop vex sylbi 3bitr4g eliun
      cdm crn cin wss ccom ccnv csn cxp wceq wbr wb eliniseg elv brelrn elimasn
      dfco2 opeldm anim12ci adantl exlimivv elxp elin ssel syl5 pm4.71rd exbidv
      3imtr4i rexv df-rex eqrdv syl5eq ) BUAZCUBZUCZDUDZBCUEAHCUFAIZUGZJZBVQJZU
      HZKZADVTKZABCUPVOEWAWBVOEIZVTLZAHMZWDADMZWCWALWCWBLVOWDANVPDLZWDOZANWEWFV
      OWDWHAVOWDWGWDVPVNLZVOWGWCFIZGIZPUIZWJVRLZWKVSLZOZOZGNFNVPVLLZVPVMLZOZWDW
      IWPWSFGWOWSWLWMWRWNWQWMWJVPCUJZWRWMWTUKACVPWJHFQZULUMWJVPCXAAQZUNRWNVPWKP
      BLWQBVPWKXBGQZUOVPWKBXBXCUQRURUSUTFGWCVRVSVAVPVLVMVBVGVNDVPVCVDVEVFWDAVHW
      DADVISAWCHVTTAWCDVTTSVJVK $.

    $( Class composition distributes over union.  (Contributed by NM,
       21-Dec-2008.)  (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
    coundi $p |- ( A o. ( B u. C ) ) = ( ( A o. B ) u. ( A o. C ) ) $=
      ( vx vz vy cv wbr wa wex copab cun ccom wo unopab brun anbi1i andir bitri
      df-co exbii 19.43 bitr2i opabbii eqtri uneq12i 3eqtr4ri ) DGZEGZBHZUIFGAH
      ZIZEJZDFKZUHUICHZUKIZEJZDFKZLZUHUIBCLZHZUKIZEJZDFKZABMZACMZLAUTMUSUMUQNZD
      FKVDUMUQDFOVGVCDFVCULUPNZEJVGVBVHEVBUJUONZUKIVHVAVIUKUHUIBCPQUJUOUKRSUAUL
      UPEUBUCUDUEVEUNVFURDFEABTDFEACTUFDFEAUTTUG $.

    $( Class composition distributes over union.  (Contributed by NM,
       21-Dec-2008.)  (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
    coundir $p |- ( ( A u. B ) o. C ) = ( ( A o. C ) u. ( B o. C ) ) $=
      ( vx vy vz cv wbr wa wex copab cun ccom wo unopab brun anbi2i bitri df-co
      andi exbii 19.43 bitr2i opabbii eqtri uneq12i 3eqtr4ri ) DGEGZCHZUHFGZAHZ
      IZEJZDFKZUIUHUJBHZIZEJZDFKZLZUIUHUJABLZHZIZEJZDFKZACMZBCMZLUTCMUSUMUQNZDF
      KVDUMUQDFOVGVCDFVCULUPNZEJVGVBVHEVBUIUKUONZIVHVAVIUIUHUJABPQUIUKUOTRUAULU
      PEUBUCUDUEVEUNVFURDFEACSDFEBCSUFDFEUTCSUG $.

    $( Restricted first member of a class composition.  (Contributed by NM,
       12-Oct-2004.)  (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
    cores $p |- ( ran B C_ C -> ( ( A |` C ) o. B ) = ( A o. B ) ) $=
      ( vz vy vx crn wss cv wbr cres wa wex copab ccom wcel wb vex brelrn df-co
      ssel brresi baib syl56 pm5.32d exbidv opabbidv 3eqtr4g ) BGZCHZDIZEIZBJZU
      LFIZACKZJZLZEMZDFNUMULUNAJZLZEMZDFNUOBOABOUJURVADFUJUQUTEUJUMUPUSUMULUIPU
      JULCPZUPUSQUKULBDRERSUICULUAUPVBUSCULUNAFRUBUCUDUEUFUGDFEUOBTDFEABTUH $.

    $( Associative law for the restriction of a composition.  (Contributed by
       NM, 12-Dec-2006.) $)
    resco $p |- ( ( A o. B ) |` C ) = ( A o. ( B |` C ) ) $=
      ( vx vy vz ccom cres relres relco cv wcel wbr wa wex anbi2i 19.42v brresi
      vex brco anbi1i anass bitr2i exbii 3bitr2i 3bitr4i eqbrriv ) DEABGZCHZABC
      HZGZUHCIAUJJDKZCLZULEKZUHMZNZULFKZUJMZUQUNAMZNZFOZULUNUIMULUNUKMUPUMULUQB
      MZUSNZFOZNUMVCNZFOVAUOVDUMFULUNABDSZESZTPUMVCFQVEUTFUTUMVBNZUSNVEURVHUSCU
      LUQBFSRUAUMVBUSUBUCUDUECULUNUHVGRFULUNAUJVFVGTUFUG $.

    $( Image of the composition of two classes.  (Contributed by Jason
       Orendorff, 12-Dec-2006.) $)
    imaco $p |- ( ( A o. B ) " C ) = ( A " ( B " C ) ) $=
      ( vx vy vz ccom cima cv wbr wrex wcel wa wex df-rex vex elima exbii bitri
      rexcom4 r19.41v brco rexbii anbi1i 3bitr4i 3bitr4ri eqriv ) DABGZCHZABCHZ
      HZEIZDIZAJZEUJKULUJLZUNMZENZUMUKLUMUILZUNEUJOEUMAUJDPZQFIZULBJZUNMZENZFCK
      ZVAFCKZUNMZENZURUQVDVBFCKZENVGVBFECTVHVFEVAUNFCUARSURUTUMUHJZFCKVDFUMUHCU
      SQVIVCFCEUTUMABFPUSUBUCSUPVFEUOVEUNFULBCEPQUDRUEUFUG $.

    $( The range of the composition of two classes.  (Contributed by NM,
       12-Dec-2006.)  (Proof shortened by Peter Mazsa, 2-Oct-2022.) $)
    rnco $p |- ran ( A o. B ) = ran ( A |` ran B ) $=
      ( vy vx vz ccom crn cres cv wbr wex wcel vex brco exbii excom elrn anbi1i
      wa brresi 19.41v 3bitr4ri 3bitri 3bitr4i eqriv ) CABFZGZABGZHZGZDIZCIZUFJ
      ZDKZEIZULUIJZEKZULUGLULUJLUNUKUOBJZUOULAJZSZEKZDKUTDKZEKUQUMVADEUKULABDMC
      MZNOUTDEPVBUPEUOUHLZUSSURDKZUSSUPVBVDVEUSDUOBEMQRUHUOULAVCTURUSDUAUBOUCDU
      LUFVCQEULUIVCQUDUE $.
  $}

  $( The range of the composition of two classes.  (Contributed by NM,
     27-Mar-2008.) $)
  rnco2 $p |- ran ( A o. B ) = ( A " ran B ) $=
    ( ccom crn cres cima rnco df-ima eqtr4i ) ABCDABDZEDAJFABGAJHI $.

  $( The domain of a composition.  Exercise 27 of [Enderton] p. 53.
     (Contributed by NM, 4-Feb-2004.) $)
  dmco $p |- dom ( A o. B ) = ( `' B " dom A ) $=
    ( ccom cdm ccnv crn cima dfdm4 cnvco rneqi rnco2 imaeq2i eqtr4i 3eqtri ) AB
    CZDOEZFBEZAEZCZFZQADZGZOHPSABIJTQRFZGUBQRKUAUCQAHLMN $.

  $( A composition of two relations is empty iff there is no overlap between
     the range of the second and the domain of the first.  Useful in
     combination with ~ coundi and ~ coundir to prune meaningless terms in the
     result.  (Contributed by Stefan O'Rear, 8-Oct-2014.) $)
  coeq0 $p |- ( ( A o. B ) = (/) <-> ( dom A i^i ran B ) = (/) ) $=
    ( ccom c0 wceq crn cres cdm wrel wb relco relrn0 ax-mp eqeq1i relres reldm0
    cin rnco dmres incom eqtri 3bitr3i 3bitri ) ABCZDEZUDFZDEZABFZGZFZDEZAHZUHQ
    ZDEZUDIUEUGJABKUDLMUFUJDABRNUIDEZUIHZDEZUKUNUIIZUOUQJAUHOZUIPMURUOUKJUSUILM
    UPUMDUPUHULQUMAUHSUHULTUANUBUC $.

  ${
    $d w x y z A $.  $d w y z B $.  $d w y z C $.
    $( Composition with an indexed union.  (Contributed by NM, 21-Dec-2008.) $)
    coiun $p |- ( A o. U_ x e. C B ) = U_ x e. C ( A o. B ) $=
      ( vy vz vw ciun ccom relco wrel cv wcel cop wrex wbr wa wex eliun bitr4i
      reliun a1i mprgbir df-br rexbii 3bitr4i anbi1i r19.41v rexcom4 vex opelco
      exbii eqrelriiv ) EFBADCHZIZADBCIZHZBUNJUQKUPKZADADUPUAURALDMBCJUBUCELZFL
      ZNZUOMZVAUPMZADOZVAUQMUSGLZUNPZVEUTBPZQZGRZUSVECPZVGQZGRZADOZVBVDVIVKADOZ
      GRVMVHVNGVHVJADOZVGQVNVFVOVGUSVENZUNMVPCMZADOVFVOAVPDCSUSVEUNUDVJVQADUSVE
      CUDUEUFUGVJVGADUHTULVKAGDUITGUSUTBUNEUJZFUJZUKVCVLADGUSUTBCVRVSUKUEUFAVAD
      UPSTUM $.
  $}

  $( A composition is not affected by a double converse of its first argument.
     (Contributed by NM, 8-Oct-2007.) $)
  cocnvcnv1 $p |- ( `' `' A o. B ) = ( A o. B ) $=
    ( ccnv ccom cvv cres cnvcnv2 coeq1i crn wss wceq ssv cores ax-mp eqtri ) AC
    CZBDAEFZBDZABDZPQBAGHBIZEJRSKTLABEMNO $.

  $( A composition is not affected by a double converse of its second argument.
     (Contributed by NM, 8-Oct-2007.) $)
  cocnvcnv2 $p |- ( A o. `' `' B ) = ( A o. B ) $=
    ( ccnv ccom cres cnvcnv2 coeq2i resco wrel wceq relco dfrel3 mpbi 3eqtr2i
    cvv ) ABCCZDABOEZDABDZOEZRPQABFGABOHRISRJABKRLMN $.

  $( Absorption of a reverse (preimage) restriction of the second member of a
     class composition.  (Contributed by NM, 11-Dec-2006.) $)
  cores2 $p |- ( dom A C_ C -> ( A o. `' ( `' B |` C ) ) = ( A o. B ) ) $=
    ( cdm wss ccnv cres ccom wceq dfdm4 sseq1i cores sylbi cnvco cocnvcnv1 wrel
    crn relco dfrel2 mpbi eqtri 3eqtr4g cnveqd 3eqtr3g ) ADZCEZABFZCGZFZHZFZFZA
    BHZFZFZUJUMUFUKUNUFUHAFZHZUGUPHZUKUNUFUPQZCEUQURIUEUSCAJKUGUPCLMUKUIFUPHUQA
    UINUHUPOUAABNUBUCUJPULUJIAUIRUJSTUMPUOUMIABRUMSTUD $.

  ${
    $d x y z A $.
    $( Composition with the empty set.  Theorem 20 of [Suppes] p. 63.
       (Contributed by NM, 24-Apr-2004.) $)
    co02 $p |- ( A o. (/) ) = (/) $=
      ( vx vy vz c0 ccom relco rel0 cop wcel wbr wex br0 intnanr nex vex opelco
      cv wa mtbir noel 2false eqrelriiv ) BCAEFZEAEGHBRZCRZIZUDJZUGEJUHUEDRZEKZ
      UIUFAKZSZDLULDUJUKUEUIMNODUEUFAEBPCPQTUGUAUBUC $.

    $( Composition with the empty set.  (Contributed by NM, 24-Apr-2004.) $)
    co01 $p |- ( (/) o. A ) = (/) $=
      ( c0 ccnv ccom cnv0 cnvco coeq2i co02 3eqtri eqtr4i cnveqi wrel wceq rel0
      dfrel2 mpbi relco 3eqtr3ri ) BCZCZBADZCZCZBUASUBSBUBEUBACZSDUDBDBBAFSBUDE
      GUDHIJKBLTBMNBOPUALUCUAMBAQUAOPR $.

    $( Composition with the identity relation.  Part of Theorem 3.7(i) of
       [Monk1] p. 36.  (Contributed by NM, 22-Apr-2004.) $)
    coi1 $p |- ( Rel A -> ( A o. _I ) = A ) $=
      ( vx vy vz cid ccom wrel wceq relco cv cop wcel wbr wex vex opelco equcom
      wa ideq bitri anbi1i exbii breq1 equsexvw df-br eqrelriv mpan ) AEFZGAGUH
      AHAEIBCUHABJZCJZKZUHLZUIUJAMZUKALULUIDJZEMZUNUJAMZRZDNZUMDUIUJAEBOCOPURUN
      UIHZUPRZDNUMUQUTDUOUSUPUOUIUNHUSUIUNDOSBDQTUAUBUPUMDBUNUIUJAUCUDTTUIUJAUE
      TUFUG $.

    $( Composition with the identity relation.  Part of Theorem 3.7(i) of
       [Monk1] p. 36.  (Contributed by NM, 22-Apr-2004.) $)
    coi2 $p |- ( Rel A -> ( _I o. A ) = A ) $=
      ( wrel ccnv wceq ccom dfrel2 cnvco relcnv ax-mp cnveqi eqtr3i coeq2 coeq1
      cid coi1 cnvi sylan9eq mpan2 id 3eqtr3a sylbi ) ABACZCZADZNAEZADAFUDNCZUC
      EZUCUEAUBNEZCUGUCUBNGUHUBUBBUHUBDAHUBOIJKUDUFNDZUGUEDPUDUIUGUFAEUEUCAUFLU
      FNAMQRUDSTUA $.
  $}

  $( Composition with a restricted identity relation.  (Contributed by FL,
     19-Jun-2011.)  (Revised by Stefan O'Rear, 7-Mar-2015.) $)
  coires1 $p |- ( A o. ( _I |` B ) ) = ( A |` B ) $=
    ( ccnv cres ccom cocnvcnv1 wrel wceq relcnv coi1 ax-mp eqtr3i reseq1i resco
    cid rescnvcnv ) ACZCZBDZAOBDEZABDAOEZBDSTUARBROEZUARAOFRGUBRHQIRJKLMAOBNLAB
    PL $.

  ${
    $d x y z w A $.  $d x y z w B $.  $d x y z w C $.
    $( Associative law for class composition.  Theorem 27 of [Suppes] p. 64.
       Also Exercise 21 of [Enderton] p. 53.  Interestingly, this law holds for
       any classes whatsoever, not just functions or even relations.
       (Contributed by NM, 27-Jan-1997.) $)
    coass $p |- ( ( A o. B ) o. C ) = ( A o. ( B o. C ) ) $=
      ( vx vy vz vw ccom relco cv wbr wa wex cop wcel brco exbii opelco 3bitr4i
      vex excom anass 2exbii bitr4i anbi2i exdistr anbi1i 19.41v eqrelriiv ) DE
      ABHZCHZABCHZHZUJCIAULIDJZFJZCKZUOGJZBKZUQEJZAKZLZLZGMFMZUPURLZUTLZFMZGMZU
      NUSNZUKOZVHUMOZVCVBFMGMVGVBFGUAVEVBGFUPURUTUBUCUDUPUOUSUJKZLZFMUPVAGMZLZF
      MVIVCVLVNFVKVMUPGUOUSABFTETZPUEQFUNUSUJCDTZVORUPVAFGUFSUNUQULKZUTLZGMVDFM
      ZUTLZGMVJVGVRVTGVQVSUTFUNUQBCVPGTPUGQGUNUSAULVPVORVFVTGVDUTFUHQSSUI $.
  $}

  $( A relation is transitive iff its converse is transitive.  (Contributed by
     FL, 19-Sep-2011.) $)
  relcnvtr $p |- ( Rel R ->
     ( ( R o. R ) C_ R <-> ( `' R o. `' R ) C_ `' R ) ) $=
    ( wrel ccom wss ccnv cnvco cnvss syl5eqssr wceq wi sseq1 dfrel2 coeq1 coeq2
    eqtrd id sseq12d biimpd sylbi com12 syl6bi mpsyl impbid2 ) ABZAACZADZAEZUGC
    ZUGDZUFUHUEEUGAAFUEAGHUIUDUFUHEZUGEZUKCZIZUIUJUKDZUDUFJZUGUGFUHUGGUMUNULUKD
    ZUOUJULUKKUDUPUFUDUKAIZUPUFJALUQUPUFUQULUEUKAUQULAUKCUEUKAUKMUKAANOUQPQRSTU
    AUBTUC $.

  ${
    $d x y A $.
    $( A relation is included in the Cartesian product of its domain and range.
       Exercise 4.12(t) of [Mendelson] p. 235.  (Contributed by NM,
       3-Aug-1994.) $)
    relssdmrn $p |- ( Rel A -> A C_ ( dom A X. ran A ) ) $=
      ( vx vy wrel cdm crn cxp id cv cop wi wex 19.8a wa opelxp vex eldm2 elrn2
      wcel anbi12i bitri sylanbrc a1i relssdv ) ADZBCAAEZAFZGZUEHBIZCIZJZASZUKU
      HSZKUEULULCLZULBLZUMULCMULBMUMUIUFSZUJUGSZNUNUONUIUJUFUGOUPUNUQUOCUIABPQB
      UJACPRTUAUBUCUD $.
  $}

  $( The converse is a subset of the cartesian product of range and domain.
     (Contributed by Mario Carneiro, 2-Jan-2017.) $)
  cnvssrndm $p |- `' A C_ ( ran A X. dom A ) $=
    ( ccnv cdm crn cxp wrel relcnv relssdmrn ax-mp df-rn dfdm4 xpeq12i sseqtr4i
    wss ) ABZOCZODZEZADZACZEOFORNAGOHISPTQAJAKLM $.

  $( Composition as a subset of the Cartesian product of factors.  (Contributed
     by Mario Carneiro, 12-Jan-2017.) $)
  cossxp $p |- ( A o. B ) C_ ( dom B X. ran A ) $=
    ( ccom cdm crn cxp wrel wss relco relssdmrn ax-mp dmcoss rncoss mp2an sstri
    xpss12 ) ABCZQDZQEZFZBDZAEZFZQGQTHABIQJKRUAHSUBHTUCHABLABMRUASUBPNO $.

  $( Two ways to describe the structure of a two-place operation.  (Contributed
     by NM, 17-Dec-2008.) $)
  relrelss $p |- ( ( Rel A /\ Rel dom A ) <-> A C_ ( ( _V X. _V ) X. _V ) ) $=
    ( wrel cdm wa cvv cxp wss df-rel anbi2i crn relssdmrn xpss12 mpan2 sylan9ss
    ssv xpss sstr sylibr dmss c0 wne wceq vn0 dmxp ax-mp syl6sseq impbii bitri
    jca ) ABZACZBZDUJUKEEFZGZDZAUMEFZGZULUNUJUKHIUOUQUJUNAUKAJZFZUPAKUNUREGUSUP
    GUROUKUMURELMNUQUJUNUQAUMGZUJUQUPUMGUTUMEPAUPUMQMAHRUQUKUPCZUMAUPSETUAVAUMU
    BUCUMEUDUEUFUIUGUH $.

  ${
    $d x y A $.  $d x y R $.
    $( The membership relation for a relation is inherited by class union.
       (Contributed by NM, 17-Sep-2006.) $)
    unielrel $p |- ( ( Rel R /\ A e. R ) -> U. A e. U. R ) $=
      ( vx vy wrel wcel wa cv cop wceq wex elrel simpr wi vex uniopel a1i eleq1
      cuni unieq eleq1d 3imtr4d exlimivv sylc ) BEZABFZGACHZDHZIZJZDKCKUFASZBSZ
      FZCDABLUEUFMUJUFUMNCDUJUIBFZUISZULFZUFUMUNUPNUJUGUHBCODOPQAUIBRUJUKUOULAU
      ITUAUBUCUD $.
  $}

  $( The double union of a relation is its field.  (Contributed by NM,
     17-Sep-2006.) $)
  relfld $p |- ( Rel R -> U. U. R = ( dom R u. ran R ) ) $=
    ( wrel cuni cdm crn cun cxp wss relssdmrn 3syl unixpss syl6ss dmrnssfld a1i
    uniss eqssd ) ABZACZCZADZAEZFZQSTUAGZCZCZUBQAUCHRUDHSUEHAIAUCORUDOJTUAKLUBS
    HQAMNP $.

  $( Restriction of a relation to its field.  (Contributed by FL,
     15-Apr-2012.) $)
  relresfld $p |- ( Rel R -> ( R |` U. U. R ) = R ) $=
    ( wrel cuni cres wceq cdm crn wi relfld reseq2d resundi wa eqtr resss resdm
    cun wss ssequn2 uneq1 eqeq2d ex syl6bi com3r sylbi syl5com sylancl pm2.43i
    mpsyl ) ABZAACCZDZAEZUIUKAAFZAGZPZDZEZUPAUMDZAUNDZPZEZUIULHUIUJUOAAIJAUMUNK
    UQVALUKUTEZUIULUKUPUTMUSAQZUIURAEZVBULHZAUNNAOVCAUSPZAEZVDVEHUSARVDVBVGULVD
    VBUKVFEZVGULHVDUTVFUKURAUSSTVHVGULUKVFAMUAUBUCUDUHUEUFUG $.

  $( Composition with the identity relation restricted to a relation's field.
     (Contributed by FL, 2-May-2011.) $)
  relcoi2 $p |- ( Rel R -> ( ( _I |` U. U. R ) o. R ) = R ) $=
    ( wrel cid cuni cres ccom cdm crn cun wss wceq dmrnssfld simpr sylbir cores
    wa unss mp2b coi2 syl5eq ) ABCADDZEAFZCAFZAAGZAHZIUAJZUEUAJZUBUCKALUFUDUAJZ
    UGPUGUDUEUAQUHUGMNCAUAORAST $.

  $( Composition with the identity relation restricted to a relation's field.
     (Contributed by FL, 8-May-2011.)  (Proof shortened by OpenAI,
     3-Jul-2020.) $)
  relcoi1 $p |- ( Rel R -> ( R o. ( _I |` U. U. R ) ) = R ) $=
    ( wrel cid cuni cres ccom coires1 relresfld syl5eq ) ABACADDZEFAJEAAJGAHI
    $.

  $( The double union of the converse of a class is its field.  (Contributed by
     NM, 4-Jun-2008.) $)
  unidmrn $p |- U. U. `' A = ( dom A u. ran A ) $=
    ( ccnv cuni crn cdm cun wrel wceq relcnv ax-mp equncomi dfdm4 df-rn uneq12i
    relfld eqtr4i ) ABZCCZQDZQEZFAEZADZFRTSQGRTSFHAIQOJKUASUBTALAMNP $.

  $( if ` R ` is a relation, its double union equals the double union of its
     converse.  (Contributed by FL, 5-Jan-2009.) $)
  relcnvfld $p |- ( Rel R -> U. U. R = U. U. `' R ) $=
    ( wrel cuni cdm crn cun ccnv relfld unidmrn syl6eqr ) ABACCADAEFAGCCAHAIJ
    $.

  $( Alternate definition of domain ~ df-dm that doesn't require dummy
     variables.  (Contributed by NM, 2-Aug-2010.) $)
  dfdm2 $p |- dom A = U. U. ( `' A o. A ) $=
    ( ccnv ccom cuni cdm crn cun cnvco cocnvcnv2 eqtri unieqi eqtr3i wceq df-rn
    unidmrn eqcomi dmcoeq ax-mp rncoeq dfdm4 eqtr4i uneq12i unidm 3eqtrri ) ABZ
    ACZDZDZUFEZUFFZGZAEZULGULUFBZDZDUHUKUNUGUMUFUMUEUEBCUFUEAHUEAIJKKUFOLUIULUJ
    ULUEEZAFZMZUIULMUPUOANPZUEAQRUJUEFZULUQUJUSMURUEASRATUAUBULUCUD $.

  $( The double class union of a nonempty Cartesian product is the union of it
     members.  (Contributed by NM, 17-Sep-2006.) $)
  unixp $p |- ( ( A X. B ) =/= (/) -> U. U. ( A X. B ) = ( A u. B ) ) $=
    ( cxp c0 wne cuni cdm crn cun wrel wceq relxp relfld ax-mp xpeq2 xp0 syl6eq
    necon3i xpeq1 0xp dmxp rnxp uneq12 syl2an syl2anc syl5eq ) ABCZDEZUGFFZUGGZ
    UGHZIZABIZUGJUIULKABLUGMNUHBDEZADEZULUMKZBDUGDBDKUGADCDBDAOAPQRADUGDADKUGDB
    CDADBSBTQRUNUJAKUKBKUPUOABUAABUBUJAUKBUCUDUEUF $.

  ${
    $d x y z A $.  $d x y z B $.
    $( A Cartesian product is empty iff its union is empty.  (Contributed by
       NM, 20-Sep-2006.) $)
    unixp0 $p |- ( ( A X. B ) = (/) <-> U. ( A X. B ) = (/) ) $=
      ( vz vx vy cxp c0 wceq cuni unieq uni0 syl6eq wne cv wex n0 cop vex sylbi
      wcel elxp3 wss elssuni opnzi ssn0 sylancl adantl exlimivv exlimiv necon4i
      wa impbii ) ABFZGHZUMIZGHUNUOGIGUMGJKLUMGUOGUMGMCNZUMTZCOUOGMZCUMPUQURCUQ
      DNZENZQZUPHZVAUMTZUKZEODOURDEUPABUAVDURDEVCURVBVCVAUOUBVAGMURVAUMUCUSUTDR
      ERUDVAUOUEUFUGUHSUISUJUL $.
  $}

  $( Field of a square Cartesian product.  (Contributed by FL, 10-Oct-2009.) $)
  unixpid $p |- U. U. ( A X. A ) = A $=
    ( c0 wceq cxp cuni xpeq1 syl6eq wi unieq unieqd uni0 unieqi eqtri wa expcom
    0xp eqtr eqcoms syl5com wne sylancl mpcom wn df-ne cun unixp unidm sylancbr
    xpnz sylbi pm2.61i ) ABCZAADZEZEZACZUMBCZULUPULUMBADBABAFAPGUQUOBEZEZCZUSBC
    ZULUPHUQUNURUMBIJUSURBURBKLKMUTVANUOBCZULUPUOUSBQVBUPHBAVBBACUPUOBAQORSUAUB
    ULUCABTZVCUPABUDZVDVCVCNUMBTZUPAAUIVEUOAAUEAAAUFAUGGUJUHUK $.

  ${
    $d x y A $.  $d x y B $.
    $( Restriction of a class to a singleton.  (Contributed by Mario Carneiro,
       28-Dec-2014.)  (Proof shortened by Peter Mazsa, 2-Oct-2022.) $)
    ressn $p |- ( A |` { B } ) = ( { B } X. ( A " { B } ) ) $=
      ( vx vy csn cres cima cxp relres relxp cv wcel cop wa elimasn elsni sneqd
      vex imaeq2d eleq2d syl5bbr pm5.32i opelresi opelxp 3bitr4i eqrelriiv ) CD
      ABEZFZUGAUGGZHZAUGIUGUIJCKZUGLZUKDKZMZALZNULUMUILZNUNUHLUNUJLULUOUPUOUMAU
      KEZGZLULUPAUKUMCRDRZOULURUIUMULUQUGAULUKBUKBPQSTUAUBUGUKUMAUSUCUKUMUGUIUD
      UEUF $.
  $}

  ${
    $d A a b x $.  $d B a b $.
    $( The converse of an intersection is the intersection of the converse.
       (Contributed by FL, 15-Oct-2012.) $)
    cnviin $p |- ( A =/= (/) -> `' |^|_ x e. A B = |^|_ x e. A `' B ) $=
      ( va vb ciin ccnv wrel relcnv cvv wss wral df-rel cv cop wcel eliin ax-mp
      wb opex c0 wne wceq cxp wrex mpbi rgenw r19.2z mpan2 iinss syl sylibr vex
      opelcnv ralbii bitri 3bitr4i eqrelriv sylancr ) BUAUBZABCFZGZHABCGZFZHZVB
      VDUCVAIUTVDJJUDZKZVEUTVCVFKZABUEZVGUTVHABLVIVHABVCHVHCIVCMUFUGVHABUHUIABV
      CVFUJUKVDMULDEVBVDENZDNZOZVAPZVLCPZABLZVKVJOZVBPVPVDPZVLJPVMVOSVJVKTAVLBC
      JQRVKVJVADUMZEUMZUNVQVPVCPZABLZVOVPJPVQWASVKVJTAVPBVCJQRVTVNABVKVJCVRVSUN
      UOUPUQURUS $.
  $}

  ${
    $d x y z A $.  $d x y z R $.
    $( The converse of a partial order relation is a partial order relation.
       (Contributed by NM, 15-Jun-2005.) $)
    cnvpo $p |- ( R Po A <-> `' R Po A ) $=
      ( vx vy vz cv wbr wn wa wi wral wpo r19.26 brcnv ralbii bitr2i c0 3bitr4i
      vex ralcom ccnv id breq12d syl5bb notbid cbvralv anbi12ci imbi12i anbi12i
      weq ralidm wb wceq rzal wne r19.3rzv ralbidv pm2.61ine anbi1i bitri df-po
      2thd ) CFZVCBGZHZVCDFZBGZVFEFZBGZIZVCVHBGZJZIEAKZDAKCAKZVHVHBUAZGZHZVHVFV
      OGZVFVCVOGZIZVHVCVOGZJZIZCAKZDAKEAKZABLAVOLVMCAKZDAKWDEAKZDAKVNWEWFWGDAVE
      CAKZVLEAKZIZCAKZWCEAKZCAKWFWGWJWLCAWLVQEAKZWBEAKZIWJVQWBEAMWMWHWNWIVQVEEC
      AECUJZVPVDVPVHVHBGWOVDVHVHBESZWPNWOVHVCVHVCBWOUBZWQUCUDUEUFWBVLEAVTVJWAVK
      VRVIVSVGVHVFBWPDSZNVFVCBWRCSZNUGVHVCBWPWSNUHOUIPOVEEAKZWIIZCAKZWHCAKZWICA
      KZIZWFWKXBWTCAKZXDIXEWTWICAMXFXCXDXCWHXFVECAUKWHXFULAQAQUMWHXFVECAUNWTCAU
      NVBAQUOVEWTCAVEEAUPUQURPUSUTVMXACAVEVLEAMOWHWICAMRWCECAATROVMCDAATWDEDAAT
      RCDEABVAEDCAVOVAR $.

    $( The converse of a strict order relation is a strict order relation.
       (Contributed by NM, 15-Jun-2005.) $)
    cnvso $p |- ( R Or A <-> `' R Or A ) $=
      ( vx vy wpo cv wbr weq w3o wral wa ccnv wor cnvpo ralcom vex brcnv equcom
      3orbi123i df-so 2ralbii bitr4i anbi12i 3bitr4i ) ABEZCFZDFZBGZCDHZUGUFBGZ
      IZDAJCAJZKABLZEZUGUFUMGZDCHZUFUGUMGZIZCAJDAJZKABMAUMMUEUNULUSABNULUKCAJDA
      JUSUKCDAAOURUKDCAAUOUHUPUIUQUJUGUFBDPZCPZQDCRUFUGBVAUTQSUAUBUCCDABTDCAUMT
      UD $.
  $}

  ${
    $d x y z A $.  $d x y z B $.  $d x y z C $.
    $( Composition of two Cartesian products.  (Contributed by Thierry Arnoux,
       17-Nov-2017.) $)
    xpco $p |- ( B =/= (/) -> ( ( B X. C ) o. ( A X. B ) ) = ( A X. C ) ) $=
      ( vx vy vz c0 wne cv cxp wbr wa wex copab wcel ccom biimpi biantrurd brxp
      n0 ancom anbi1i anbi12i anandi 3bitr4i exbii 19.41v bitr2i opabbidv df-co
      syl6rbb df-xp 3eqtr4g ) BGHZDIZEIZABJZKZUPFIZBCJZKZLZEMZDFNUOAOZUSCOZLZDF
      NUTUQPACJUNVCVFDFUNVFUPBOZEMZVFLZVCUNVHVFUNVHEBTQRVCVGVFLZEMVIVBVJEVDVGLZ
      VGVELZLVGVDLZVLLVBVJVKVMVLVDVGUAUBURVKVAVLUOUPABSUPUSBCSUCVGVDVEUDUEUFVGV
      FEUGUHUKUIDFEUTUQUJDFACULUM $.
  $}

  $( Composition of two square Cartesian products.  (Contributed by Thierry
     Arnoux, 14-Jan-2018.) $)
  xpcoid $p |- ( ( A X. A ) o. ( A X. A ) ) = ( A X. A ) $=
    ( cxp ccom wceq c0 co01 sqxpeqd 0xp syl6eq coeq12d 3eqtr4a xpco pm2.61ine
    id ) AABZOCZODAEAEDZEECEPOEFQOEOEQOEEBEQAEQNGEHIZRJRKAAALM $.

  ${
    $d A x y $.  $d V y $.  $d X x y $.  $d Z x y $.
    $( Elementhood to a cartesian product with a singleton.  (Contributed by
       Thierry Arnoux, 10-Apr-2020.)  (Proof shortened by JJ, 14-Jul-2021.) $)
    elsnxp $p |- ( X e. V -> ( Z e. ( { X } X. A )
      <-> E. y e. A Z = <. X , y >. ) ) $=
      ( vx wcel csn cxp cv cop wceq wrex wa wex elxp df-rex an13 exbii bitr4i
      elsni opeq1d eqeq2d biimpa reximi exlimiv sylbi snidg opelxpi sylan eleq1
      sylbir syl5ibrcom rexlimdva impbid2 ) DCGZEDHZBIZGZEDAJZKZLZABMZUSEFJZUTK
      ZLZVDUQGZUTBGZNNZAOZFOVCFAEUQBPVJVCFVJVGVFNZABMZVCVLVHVKNZAOVJVKABQVIVMAV
      FVGVHRSTVKVBABVGVFVBVGVEVAEVGVDDUTVDDUAUBUCUDUEULUFUGUPVBUSABUPVHNUSVBVAU
      RGZUPDUQGVHVNDCUHDUTUQBUIUJEVAURUKUMUNUO $.
  $}

  ${
    $d X a b p q $.  $d X p q x y $.  $d Y a b p q $.  $d Y p q x y $.
    $d ps a b q x y $.  $d ch p $.
    reu3op.a $e |- ( p = <. a , b >. -> ( ps <-> ch ) ) $.
    $( There is a unique ordered pair fulfilling a wff iff there are uniquely
       two sets fulfilling a corresponding wff.  (Contributed by AV,
       1-Jul-2023.) $)
    reu3op $p |- ( E! p e. ( X X. Y ) ps
                  <-> ( E. a e. X E. b e. Y ch
                     /\ E. x e. X E. y e. Y A. a e. X A. b e. Y
                                     ( ch -> <. x , y >. = <. a , b >. ) ) ) $=
      ( vq wrex wi wral wa cv cop wceq rexxp wcel cxp wreu eqeq2 imbi2d ralbidv
      weq reu3 eqeq1 imbi12d ralxp wb eqcom a1i 2ralbidva syl5bb 2rexbiia bitri
      anbi12i ) AGEFUAZUBAGUSLZAGKUFZMZGUSNZKUSLZOBIFLHELZBCPZDPZQZHPZIPZQZRZMZ
      IFNHENZDFLCELZOAGKUSUGUTVEVDVOABGHIEFJSVDAGPZVHRZMZGUSNZDFLCELVOVCVSKCDEF
      KPZVHRZVBVRGUSWAVAVQAVTVHVPUCUDUESVSVNCDEFVSBVKVHRZMZIFNHENVFETVGFTOZVNVR
      WCGHIEFVPVKRABVQWBJVPVKVHUHUIUJWDWCVMHIEFWDVIETVJFTOOZWBVLBWBVLUKWEVKVHUL
      UMUDUNUOUPUQURUQ $.

    $d X a b c d p q x y $.  $d X p q w $.  $d Y c d $.  $d Y w $.
    $d c d ps $.  $d c ch d q $.  $d c d p q th $.  $d ps q w $.
    reuop.x $e |- ( p = <. x , y >. -> ( ps <-> th ) ) $.
    $( There is a unique ordered pair fulfilling a wff iff there are uniquely
       two sets fulfilling a corresponding wff.  (Contributed by AV,
       23-Jun-2023.) $)
    reuop $p |- ( E! p e. ( X X. Y ) ps
                  <-> E. a e. X E. b e. Y ( ch /\ A. x e. X A. y e. Y
                                     ( th -> <. x , y >. = <. a , b >. ) ) ) $=
      ( vq cv wsbc wceq wi wa wrex wcel vw vc cxp wreu wral cop nfsbc1v sbceq1a
      vd dfsbcq reu8nf elxp2 biimpcd adantr imp opelxpi wb eqeq2 imbi12d adantl
      rspcdv opex sbcie pm2.27 sylbir eqcom syl6ibr com12 eqcoms syl5ibrcom a1d
      imbi2d syl6 expimpd imp4c impcom ralrimivva jca ex reximdvva sylbi simprl
      rexlimiv nfv nfim opeq1 eqeq1d opeq2 rspc2 ad2antlr sbcop impd rexlimdvva
      expcom biimpi impel ralrimiva nfcv nfral nfan eqeq1 ralbidv anbi12d rspce
      syl12anc rexlimivv impbii bitri ) AHFGUCZUDAAHMNZOZHNZXJPZQZMXIUEZRZHXISZ
      BCDNZENZUFZINZJNZUFZPZQZEGUEDFUEZRZJGSIFSZAXKAHUANZOHMUAXIAHXJUGZAHYIUGAH
      YIUHAHYIXJUJUKXQYHXPYHHXIXLXITXLYCPZJGSIFSZXPYHQIJXLFGULXPYLYHXPYKYGIJFGX
      PYAFTYBGTRZRZYKYGYNYKRZBYFYNYKBXPYKBQZYMAYPXOYKABKUMUNUNUOYOYEDEFGXRFTXSG
      TRZYOYEYQXPYMYKYEYQAXOYMYKYEQZQZYQARXOAHXTOZXLXTPZQZYSYQXOUUBQAYQXNUUBMXT
      XIXRXSFGUPXJXTPZXNUUBUQYQUUCXKYTXMUUAAHXJXTUJXJXTXLURUSUTVAUNUUBYRYMUUBYE
      YKCXTXLPZQCUUBUUDCUUBUUAUUDCYTUUBUUAQACHXTXRXSVBLVCYTUUAVDVEXTXLVFVGVHYKY
      DUUDCYDUUDUQYCXLYCXLXTURVIVLVJVKVMVNVOVPVQVRVSVTVHWAWCYGXQIJFGYMYGXQYMYGR
      ZYCXITZBXKYCXJPZQZMXIUEZXQYMUUFYGYAYBFGUPUNYMBYFWBUUEUUHMXIUUEXJUBNZUINZU
      FZPZUIGSUBFSZUUHXJXITZUUEUUMUUHUBUIFGUUEUUJFTUUKGTRZRUUHUUMAHUULOZYCUULPZ
      QZUUPUUEUUSUUPYMYGUUSYMUUPYGUUSQYMUUPRZBYFUUSUUTBRYFCDUUJOZEUUKOZUULYCPZQ
      ZUUSUUPYFUVDQYMBYEUVDUVAUUJXSUFZYCPZQDEUUJUUKFGUVAUVFDCDUUJUGUVFDWDWEUVBU
      VCEUVAEUUKUGUVCEWDWEXRUUJPZCUVAYDUVFCDUUJUHUVGXTUVEYCXRUUJXSWFWGUSXSUUKPZ
      UVAUVBUVFUVCUVAEUUKUHUVHUVEUULYCXSUUKUUJWHWGUSWIWJUUQUVDUURUUQUVDUVCUURUU
      QUVBUVDUVCQACDEHUBUILWKUVBUVCVDVEYCUULVFVGVHVMVNWNWLVPUUMXKUUQUUGUURAHXJU
      ULUJXJUULYCURUSVJWMUUOUUNUBUIXJFGULWOWPWQXPBUUIRHYCXIBUUIHBHWDUUHHMXIHXIW
      RXKUUGHYJUUGHWDWEWSWTYKABXOUUIKYKXNUUHMXIYKXMUUGXKXLYCXJXAVLXBXCXDXEVSXFX
      GXH $.
  $}

  ${
    $d A a b p x y $.  $d B a b p x y $.  $d ph a b x y $.  $d ch p x y $.
    opreu2reurex.a $e |- ( p = <. a , b >. -> ( ph <-> ch ) ) $.
    $( There is a unique ordered pair fulfilling a wff iff there are uniquely
       two sets fulfilling a corresponding wff.  (Contributed by AV,
       24-Jun-2023.)  (Revised by AV, 1-Jul-2023.) $)
    opreu2reurex $p |- ( E! p e. ( A X. B ) ph
                  <-> ( E! a e. A E. b e. B ch /\ E! b e. B E. a e. A ch ) ) $=
      ( vx vy wrex cv cop wceq wi wral wa weq wreu wcel cxp wb eqcom opth bitri
      vex imbi2i a1i 2ralbidva 2rexbiia anbi2i reu3op 2reu4 3bitr4i ) BGDKZFCKZ
      BILZJLZMZFLZGLZMZNZOZGDPFCPZJDKICKZQUPBFIRGJRQZOZGDPFCPZJDKICKZQAECDUASUO
      FCSBFCKGDSQVFVJUPVEVIIJCDUQCTURDTQZVDVHFGCDVDVHUBVKUTCTVADTQQVCVGBVCVBUSN
      VGUSVBUCUTVAUQURFUFGUFUDUEUGUHUIUJUKABIJCDEFGHULBFGIJCDUMUN $.

    $( If there is a unique ordered pair fulfilling a wff, then there is a
       double restricted unique existential qualification fulfilling a
       corresponding wff.  (Contributed by AV, 25-Jun-2023.)  (Revised by AV,
       2-Jul-2023.) $)
    opreu2reu $p |- ( E! p e. ( A X. B ) ph -> E! a e. A E! b e. B ch ) $=
      ( cxp wreu wrex wa opreu2reurex 2rexreu sylbi ) AECDIJBGDKFCJBFCKGDJLBGDJ
      FCJABCDEFGHMBFGCDNO $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  The Predecessor Class
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $c Pred $.
  $( The predecessors symbol. $)
  cpred $a class Pred ( R , A , X ) $.

  $( Define the predecessor class of a relationship.  This is the class of all
     elements ` y ` of ` A ` such that ` y R X ` (see ~ elpred ) .
     (Contributed by Scott Fenton, 29-Jan-2011.) $)
  df-pred $a |- Pred ( R , A , X ) = ( A i^i ( `' R " { X } ) ) $.

  $( Equality theorem for the predecessor class.  (Contributed by Scott Fenton,
     13-Jun-2018.) $)
  predeq123 $p |- ( ( R = S /\ A = B /\ X = Y ) ->
                    Pred ( R , A , X ) = Pred ( S , B , Y ) ) $=
    ( wceq w3a ccnv csn cima cin cpred simp2 3ad2ant1 3ad2ant3 imaeq12d df-pred
    cnveq sneq ineq12d 3eqtr4g ) CDGZABGZEFGZHZACIZEJZKZLBDIZFJZKZLACEMBDFMUFAB
    UIULUCUDUENUFUGUJUHUKUCUDUGUJGUECDSOUEUCUHUKGUDEFTPQUAACERBDFRUB $.

  $( Equality theorem for the predecessor class.  (Contributed by Scott Fenton,
     2-Feb-2011.) $)
  predeq1 $p |- ( R = S -> Pred ( R , A , X ) = Pred ( S , A , X ) ) $=
    ( wceq cpred eqid predeq123 mp3an23 ) BCEAAEDDEABDFACDFEAGDGAABCDDHI $.

  $( Equality theorem for the predecessor class.  (Contributed by Scott Fenton,
     2-Feb-2011.) $)
  predeq2 $p |- ( A = B -> Pred ( R , A , X ) = Pred ( R , B , X ) ) $=
    ( wceq cpred eqid predeq123 mp3an13 ) CCEABEDDEACDFBCDFECGDGABCCDDHI $.

  $( Equality theorem for the predecessor class.  (Contributed by Scott Fenton,
     2-Feb-2011.) $)
  predeq3 $p |- ( X = Y -> Pred ( R , A , X ) = Pred ( R , A , Y ) ) $=
    ( wceq cpred eqid predeq123 mp3an12 ) BBEAAECDEABCFABDFEBGAGAABBCDHI $.

  ${
    nfpred.1 $e |- F/_ x R $.
    nfpred.2 $e |- F/_ x A $.
    nfpred.3 $e |- F/_ x X $.
    $( Bound-variable hypothesis builder for the predecessor class.
       (Contributed by Scott Fenton, 9-Jun-2018.) $)
    nfpred $p |- F/_ x Pred ( R , A , X ) $=
      ( cpred ccnv csn cima cin df-pred nfcnv nfsn nfima nfin nfcxfr ) ABCDHBCI
      ZDJZKZLBCDMABUAFASTACENADGOPQR $.
  $}

  $( If ` A ` is a subset of ` B ` , then their predecessor classes are also
     subsets.  (Contributed by Scott Fenton, 2-Feb-2011.) $)
  predpredss $p |- ( A C_ B -> Pred ( R , A , X ) C_ Pred ( R , B , X ) ) $=
    ( wss ccnv csn cima cin cpred ssrin df-pred 3sstr4g ) ABEACFDGHZIBNIACDJBCD
    JABNKACDLBCDLM $.

  $( The predecessor class of ` A ` is a subset of ` A ` .  (Contributed by
     Scott Fenton, 2-Feb-2011.) $)
  predss $p |- Pred ( R , A , X ) C_ A $=
    ( cpred ccnv csn cima cin df-pred inss1 eqsstri ) ABCDABECFGZHAABCIALJK $.

  $( Another subset/predecessor class relationship.  (Contributed by Scott
     Fenton, 6-Feb-2011.) $)
  sspred $p |- ( ( B C_ A /\ Pred ( R , A , X ) C_ B ) ->
                 Pred ( R , A , X ) = Pred ( R , B , X ) ) $=
    ( wss cin wceq ccnv csn cima cpred sseqin2 df-pred sseq1i df-ss in32 eqeq1i
    3bitri wa ineq1 eqeq1d biimpa 3eqtr4g eqcomd syl2anb ) BAEABFZBGZUFCHDIJZFZ
    AUHFZGZACDKZBCDKZGULBEZBALUNUJBEUJBFZUJGUKULUJBACDMZNUJBOUOUIUJAUHBPQRUGUKS
    ZUMULUQBUHFZUJUMULUGUKURUJGUGUIURUJUFBUHTUAUBBCDMUPUCUDUE $.

  ${
    $d R y $.  $d X y $.
    dfpred2.1 $e |- X e. _V $.
    $( An alternate definition of predecessor class when ` X ` is a set.
       (Contributed by Scott Fenton, 8-Feb-2011.) $)
    dfpred2 $p |- Pred ( R , A , X ) = ( A i^i { y | y R X } ) $=
      ( cpred ccnv csn cima cin cv wbr cab df-pred cvv wcel iniseg ax-mp ineq2i
      wceq eqtri ) BCDFBCGDHIZJBAKDCLAMZJBCDNUBUCBDOPUBUCTEACDOQRSUA $.

    $d A y $.
    $( An alternate definition of predecessor class when ` X ` is a set.
       (Contributed by Scott Fenton, 13-Jun-2018.) $)
    dfpred3 $p |- Pred ( R , A , X ) = { y e. A | y R X } $=
      ( cv wbr cab cin cpred crab incom dfpred2 dfrab2 3eqtr4i ) BAFDCGZAHZIQBI
      BCDJPABKBQLABCDEMPABNO $.
  $}

  ${
    $d R x y $.  $d A x y $.  $d X x y $.
    $( An alternate definition of predecessor class when ` X ` is a set.
       (Contributed by Scott Fenton, 13-Jun-2018.) $)
    dfpred3g $p |- ( X e. V -> Pred ( R , A , X ) = { y e. A | y R X } ) $=
      ( vx cpred wbr crab wceq predeq3 breq2 rabbidv eqeq12d vex dfpred3 vtoclg
      cv ) BCFRZGZARZSCHZABIZJBCEGZUAECHZABIZJFEDSEJZTUDUCUFBCSEKUGUBUEABSEUACL
      MNABCSFOPQ $.
  $}

  ${
    elpredim.1 $e |- X e. _V $.
    $( Membership in a predecessor class - implicative version.  (Contributed
       by Scott Fenton, 9-May-2012.) $)
    elpredim $p |- ( Y e. Pred ( R , A , X ) -> Y R X ) $=
      ( cpred wcel ccnv csn cima wbr df-pred elin2 cop cvv wb elimasng opelcnvg
      wa bitrd mpan ibi df-br sylibr simplbiim ) DABCFZGDAGDBHZCIJZGZDCBKZDAUHU
      FABCLMUIDCNBGZUJUIUKCOGZUIUIUKPEULUISUICDNUGGUKUGCDOUHQCDOUHBRTUAUBDCBUCU
      DUE $.
  $}

  ${
    elpred.1 $e |- Y e. _V $.
    $( Membership in a predecessor class.  (Contributed by Scott Fenton,
       4-Feb-2011.) $)
    elpred $p |- ( X e. D -> ( Y e. Pred ( R , A , X ) <->
                                ( Y e. A /\ Y R X ) ) ) $=
      ( cpred wcel ccnv csn cima wa wbr df-pred elin2 eliniseg anbi2d syl5bb )
      EACDGZHEAHZECIDJKZHZLDBHZTEDCMZLEAUASACDNOUCUBUDTCDEBFPQR $.
  $}

  $( Membership in a predecessor class.  (Contributed by Scott Fenton,
     17-Apr-2011.) $)
  elpredg $p |- ( ( X e. B /\ Y e. A ) ->
                  ( Y e. Pred ( R , A , X ) <-> Y R X ) ) $=
    ( wcel wa cpred ccnv csn cima wbr wb df-pred elin2 baib adantl cop elimasng
    df-br syl6bbr brcnvg 3bitrd ) DBFZEAFZGZEACDHZFZECIZDJKZFZDEUILZEDCLUEUHUKM
    UDUHUEUKEAUJUGACDNOPQUFUKDERUIFULUIDEBASDEUITUADEBACUBUC $.

  ${
    predasetex.1 $e |- A e. _V $.
    $( The predecessor class exists when ` A ` does.  (Contributed by Scott
       Fenton, 8-Feb-2011.) $)
    predasetex $p |- Pred ( R , A , X ) e. _V $=
      ( cpred ccnv csn cima cin cvv df-pred inex1 eqeltri ) ABCEABFCGHZIJABCKAN
      DLM $.
  $}

  ${
    $d x y A $.  $d x y R $.
    $( Alternate definition of well-founded relation.  (Contributed by Scott
       Fenton, 2-Feb-2011.) $)
    dffr4 $p |- ( R Fr A <->
                   A. x ( ( x C_ A /\ x =/= (/) )
                          -> E. y e. x Pred ( R , x , y ) = (/) ) ) $=
      ( wfr cv wss c0 wne wa ccnv csn cima cin wceq wrex wi wal cpred dffr3
      df-pred eqeq1i rexbii imbi2i albii bitr4i ) CDEAFZCGUGHIJZUGDKBFZLMNZHOZB
      UGPZQZARUHUGDUISZHOZBUGPZQZARABCDTUQUMAUPULUHUOUKBUGUNUJHUGDUIUAUBUCUDUEU
      F $.
  $}

  $( Membership in the predecessor class implies membership in the base class.
     (Contributed by Scott Fenton, 11-Feb-2011.) $)
  predel $p |- ( Y e. Pred ( R , A , X ) -> Y e. A ) $=
    ( wcel ccnv csn cima cin cpred elinel1 df-pred eleq2s ) DAEDABFCGHZIABCJDAN
    KABCLM $.

  ${
    $d R z $.  $d A z $.  $d X z $.  $d Y z $.
    $( Property of the precessor class for partial orderings.  (Contributed by
       Scott Fenton, 28-Apr-2012.) $)
    predpo $p |- ( ( R Po A /\ X e. A ) ->
                   ( Y e. Pred ( R , A , X ) ->
                     Pred ( R , A , Y ) C_ Pred ( R , A , X ) ) ) $=
      ( vz wpo wcel wa cpred wss predel w3a cv wbr wi wb elpredg adantll elpred
      ex potr 3exp2 com24 imp31 com13 com14 sylbid com23 imdistand vex 3ad2ant3
      3imp adantl 3ad2ant1 3imtr4d ssrdv 3exp mpdi ) ABFZCAGZHZDABCIZGZDAGZABDI
      ZVBJZABCDKVAVCVDVFVAVCVDLZEVEVBVGEMZAGZVHDBNZHZVIVHCBNZHZVHVEGZVHVBGZVGVI
      VJVLVAVCVDVIVJVLOOZVAVDVCVPVAVDVCVPOVAVDHZVCDCBNZVPUTVDVCVRPUSAABCDQRVJVR
      VIVQVLVJVRVIVQVLOOVQVIVJVRHZVLUSUTVDVIVSVLOZOUSVIVDUTVTUSVIVDUTVTAVHDCBUA
      UBUCUDUETUFUGTUHULUIVDVAVNVKPVCAABDVHEUJZSUKVAVCVOVMPZVDUTWBUSAABCVHWASUM
      UNUOUPUQUR $.
  $}

  $( Property of the predecessor class for strict orderings.  (Contributed by
     Scott Fenton, 11-Feb-2011.) $)
  predso $p |- ( ( R Or A /\ X e. A ) ->
                  ( Y e. Pred ( R , A , X ) ->
                    Pred ( R , A , Y ) C_ Pred ( R , A , X ) ) ) $=
    ( wor wpo wcel cpred wss wi sopo predpo sylan ) ABEABFCAGDABCHZGABDHNIJABKA
    BCDLM $.

  ${
    $d x A $.  $d x R $.  $d x X $.  $d x Y $.
    $( Closed form of ~ elpredim .  (Contributed by Scott Fenton, 13-Apr-2011.)
       (Revised by NM, 5-Apr-2016.) $)
    predbrg $p |- ( ( X e. V /\ Y e. Pred ( R , A , X ) ) -> Y R X ) $=
      ( vx wcel cpred wbr cv wi wceq predeq3 eleq2d imbi12d vex elpredim vtoclg
      breq2 imp ) DCGEABDHZGZEDBIZEABFJZHZGZEUDBIZKUBUCKFDCUDDLZUFUBUGUCUHUEUAE
      ABUDDMNUDDEBSOABUDEFPQRT $.
  $}

  ${
    $d R x $.  $d A x $.  $d X x $.
    $( If ` R ` is set-like in ` A ` , then all predecessors classes of
       elements of ` A ` exist.  (Contributed by Scott Fenton, 20-Feb-2011.)
       (Revised by Mario Carneiro, 26-Jun-2015.) $)
    setlikespec $p |- ( ( X e. A /\ R Se A ) -> Pred ( R , A , X ) e. _V ) $=
      ( vx wcel wse wa cv wbr crab cpred cvv wceq cab vex elpred abbi2dv df-rab
      syl6reqr adantr seex ancoms eqeltrrd ) CAEZABFZGDHZCBIZDAJZABCKZLUDUHUIMU
      EUDUIUFAEUGGZDNUHUDUJDUIAABCUFDOPQUGDARSTUEUDUHLEDACBUAUBUC $.
  $}

  $( Idempotent law for the predecessor class.  (Contributed by Scott Fenton,
     29-Mar-2011.) $)
  predidm $p |- Pred ( R , Pred ( R , A , X ) , X ) = Pred ( R , A , X ) $=
    ( cpred ccnv csn cima cin df-pred inidm ineq2i eqtr4i inass ineq1i ) ABCDZB
    CDOBECFGZHZOOBCIOAPHZPHZQOAPPHZHZSORUAABCIZTPAPJKLAPPMLORPUBNLL $.

  $( Intersection law for predecessor classes.  (Contributed by Scott Fenton,
     29-Mar-2011.) $)
  predin $p |- Pred ( R , ( A i^i B ) , X ) =
               ( Pred ( R , A , X ) i^i Pred ( R , B , X ) ) $=
    ( cin ccnv csn cima cpred inindir df-pred ineq12i 3eqtr4i ) ABEZCFDGHZEAOEZ
    BOEZENCDIACDIZBCDIZEABOJNCDKRPSQACDKBCDKLM $.

  $( Union law for predecessor classes.  (Contributed by Scott Fenton,
     29-Mar-2011.) $)
  predun $p |- Pred ( R , ( A u. B ) , X ) =
               ( Pred ( R , A , X ) u. Pred ( R , B , X ) ) $=
    ( cun ccnv csn cima cin cpred indir df-pred uneq12i 3eqtr4i ) ABEZCFDGHZIAP
    IZBPIZEOCDJACDJZBCDJZEABPKOCDLSQTRACDLBCDLMN $.

  $( Difference law for predecessor classes.  (Contributed by Scott Fenton,
     14-Apr-2011.) $)
  preddif $p |- Pred ( R , ( A \ B ) , X ) =
                  ( Pred ( R , A , X ) \ Pred ( R , B , X ) ) $=
    ( cdif ccnv csn cima cin cpred indifdir df-pred difeq12i 3eqtr4i ) ABEZCFDG
    HZIAPIZBPIZEOCDJACDJZBCDJZEABPKOCDLSQTRACDLBCDLMN $.

  ${
    $d X y $.  $d B y $.
    $( The predecessor under the epsilon relationship is equivalent to an
       intersection.  (Contributed by Scott Fenton, 27-Mar-2011.)  (Proof
       shortened by Andrew Salmon, 27-Aug-2011.) $)
    predep $p |- ( X e. B -> Pred ( _E , A , X ) = ( A i^i X ) ) $=
      ( vy wcel cep cpred ccnv csn cima cin df-pred cv wbr cab wrel wceq relcnv
      relimasn syl5eq ax-mp wb cvv brcnvg elvd epelg bitrd abbi1dv ineq2d ) CBE
      ZAFCGAFHZCIJZKACKAFCLUJULCAUJULCDMZUKNZDOZCUKPULUOQFRDCUKSUAUJUNDCUJUNUMC
      FNZUMCEUJUNUPUBDCUMBUCFUDUEUMCBUFUGUHTUIT $.
  $}

  ${
    $d A x y z $.  $d B x y z $.  $d R x y z $.  $d X y $.
    $( A property of classes that are downward closed under predecessor.
       (Contributed by Scott Fenton, 13-Apr-2011.) $)
    preddowncl $p |- ( ( B C_ A /\ A. x e. B Pred ( R , A , x ) C_ B ) ->
                        ( X e. B ->
                          Pred ( R , B , X ) = Pred ( R , A , X ) ) ) $=
      ( vy vz wss cv cpred wral wa wcel wceq eleq1 predeq3 eqeq12d imbi2d vex
      wi imbi12d predpredss ad2antrr wbr weq sseq1d rspccva sseld elpredim jca2
      wb elpred adantl mpbird ssrdv adantll eqssd ex vtoclg pm2.43b ) CBHZBDAIZ
      JZCHZACKZLZECMZCDEJZBDEJZNZVFFIZCMZCDVKJZBDVKJZNZTZTVFVGVJTZTFECVKENZVPVQ
      VFVRVLVGVOVJVKECOVRVMVHVNVICDVKEPBDVKEPQUARVFVLVOVFVLLVMVNVAVMVNHVEVLCBDV
      KUBUCVEVLVNVMHVAVEVLLZGVNVMVSGIZVNMZVTVMMZTZWAVTCMZVTVKDUDZLZTZVSWAWDWEVS
      VNCVTVDVNCHAVKCAFUEVCVNCBDVBVKPUFUGUHBDVKVTFSUIUJVLWCWGUKVEVLWBWFWACCDVKV
      TGSULRUMUNUOUPUQURUSUT $.
  $}

  $( Given a partial ordering, ` X ` is not a member of its predecessor class.
     (Contributed by Scott Fenton, 17-Apr-2011.) $)
  predpoirr $p |- ( R Po A -> -. X e. Pred ( R , A , X ) ) $=
    ( wpo wcel cpred wn wa wbr poirr elpredg anidms notbid syl5ibr expd pm2.43b
    wb predel con3i pm2.61d1 ) ABDZCAEZCABCFEZGZUAUBUDUBUAUBUDUAUBHUDUBCCBIZGAC
    BJUBUCUEUBUCUEQAABCCKLMNOPUCUBABCCRST $.

  $( Given a well-founded relationship, ` X ` is not a member of its
     predecessor class.  (Contributed by Scott Fenton, 22-Apr-2011.) $)
  predfrirr $p |- ( R Fr A -> -. X e. Pred ( R , A , X ) ) $=
    ( wfr wcel cpred wn wa wbr frirr elpredg anidms notbid syl5ibr expd pm2.43b
    wb predel con3i pm2.61d1 ) ABDZCAEZCABCFEZGZUAUBUDUBUAUBUDUAUBHUDUBCCBIZGAC
    BJUBUCUEUBUCUEQAABCCKLMNOPUCUBABCCRST $.

  $( The predecessor class over ` (/) ` is always ` (/) ` .  (Contributed by
     Scott Fenton, 16-Apr-2011.)  (Proof shortened by AV, 11-Jun-2021.) $)
  pred0 $p |- Pred ( R , (/) , X ) = (/) $=
    ( c0 cpred ccnv csn cima cin df-pred 0in eqtri ) CABDCAEBFGZHCCABILJK $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Well-founded induction
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    $d x y A $.  $d x y B $.  $d x y R $.
    $( All nonempty (possibly proper) subclasses of ` A ` , which has a
       well-founded relation ` R ` , have ` R `-minimal elements.  Proposition
       6.26 of [TakeutiZaring] p. 31.  (Contributed by Scott Fenton,
       29-Jan-2011.)  (Revised by Mario Carneiro, 26-Jun-2015.) $)
    tz6.26 $p |- ( ( ( R We A /\ R Se A ) /\ ( B C_ A /\ B =/= (/) ) ) ->
                    E. y e. B Pred ( R , B , y ) = (/) ) $=
      ( vx wwe wse wa wss c0 wne cv wbr wn wral wrex cpred wceq wreu wereu2 syl
      reurex crab rabeq0 cab cin dfrab3 vex dfpred2 eqtr4i eqeq1i bitr3i rexbii
      sylib ) BDFBDGHCBICJKHHZELALZDMZNECOZACPZCDUPQZJRZACPUOURACSUSAEBCDTURACU
      BUAURVAACURUQECUCZJRVAUQECUDVBUTJVBCUQEUEUFUTUQECUGECDUPAUHUIUJUKULUMUN
      $.
  $}

  ${
    $d A y $.  $d B y $.  $d R y $.
    tz6.26i.1 $e |- R We A $.
    tz6.26i.2 $e |- R Se A $.
    $( All nonempty (possibly proper) subclasses of ` A ` , which has a
       well-founded relation ` R ` , have ` R `-minimal elements.  Proposition
       6.26 of [TakeutiZaring] p. 31.  (Contributed by Scott Fenton,
       14-Apr-2011.)  (Revised by Mario Carneiro, 26-Jun-2015.) $)
    tz6.26i $p |- ( ( B C_ A /\ B =/= (/) ) ->
                    E. y e. B Pred ( R , B , y ) = (/) ) $=
      ( wwe wse wss c0 wne wa cv cpred wceq wrex tz6.26 mpanl12 ) BDGBDHCBICJKL
      CDAMNJOACPEFABCDQR $.
  $}

  ${
    $d A y $.  $d B y $.  $d R y $.
    $( The Principle of Well-Founded Induction.  Theorem 6.27 of
       [TakeutiZaring] p. 32.  This principle states that if ` B ` is a
       subclass of a well-ordered class ` A ` with the property that every
       element of ` B ` whose inital segment is included in ` A ` is itself
       equal to ` A ` .  (Contributed by Scott Fenton, 29-Jan-2011.)  (Revised
       by Mario Carneiro, 26-Jun-2015.) $)
    wfi $p |- ( ( ( R We A /\ R Se A ) /\
                    ( B C_ A /\
                      A. y e. A ( Pred ( R , A , y ) C_ B -> y e. B ) ) )
                  -> A = B ) $=
      ( wwe wse wa wss cpred wcel wn cdif c0 ssdif0 wceq wrex cin df-pred incom
      eqtri cv wi wral wne necon3bbii difss tz6.26 eldif anbi1i anass ccnv cima
      indif2 difeq1i 3eqtr4i eqeq1i bitr4i anbi1ci anbi2i 3bitri rexanali bitri
      csn rexbii2 sylib ex mpani syl5bi con4d imp adantrl simprl eqssd ) BDEBDF
      GZCBHZBDAUAZIZCHZVPCJZUBABUCZGGBCVNVTBCHZVOVNVTWAVNWAVTWAKBCLZMUDZVNVTKZW
      AWBMBCNUEVNWBBHZWCWDBCUFVNWEWCGZWDVNWFGWBDVPIZMOZAWBPZWDABWBDUGWIVRVSKZGZ
      ABPWDWHWKAWBBVPWBJZWHGVPBJZWJGZWHGWMWJWHGZGWMWKGWLWNWHVPBCUHUIWMWJWHUJWOW
      KWMWHVRWJWHVQCLZMOVRWGWPMDUKVPVCULZWBQZWQBQZCLWGWPWQBCUMWGWBWQQWRWBDVPRWB
      WQSTVQWSCVQBWQQWSBDVPRBWQSTUNUOUPVQCNUQURUSUTVDVRVSABVAVBVEVFVGVHVIVJVKVN
      VOVTVLVM $.
  $}

  ${
    $d A y $.  $d B y $.  $d R y $.
    wfi.1 $e |- R We A $.
    wfi.2 $e |- R Se A $.
    $( The Principle of Well-Founded Induction.  Theorem 6.27 of
       [TakeutiZaring] p. 32.  This principle states that if ` B ` is a
       subclass of a well-ordered class ` A ` with the property that every
       element of ` B ` whose inital segment is included in ` A ` is itself
       equal to ` A ` .  (Contributed by Scott Fenton, 29-Jan-2011.)  (Revised
       by Mario Carneiro, 26-Jun-2015.) $)
    wfii $p |- ( ( B C_ A /\
                    A. y e. A ( Pred ( R , A , y ) C_ B -> y e. B ) )
                  -> A = B ) $=
      ( wwe wse wss cv cpred wcel wi wral wa wceq wfi mpanl12 ) BDGBDHCBIBDAJZK
      CISCLMABNOBCPEFABCDQR $.
  $}

  ${
    $d A w y $.  $d A z $.  $d ph w $.  $d ph z $.  $d R w y $.  $d R z $.
    $d w y z $.
    wfisg.1 $e |- ( y e. A ->
                       ( A. z e. Pred ( R , A , y ) [. z / y ]. ph -> ph ) ) $.
    $( Well-Founded Induction Schema.  If a property passes from all elements
       less than ` y ` of a well-founded class ` A ` to ` y ` itself (induction
       hypothesis), then the property holds for all elements of ` A ` .
       (Contributed by Scott Fenton, 11-Feb-2011.) $)
    wfisg $p |- ( ( R We A /\ R Se A ) -> A. y e. A ph ) $=
      ( vw wa wceq wral wss cv cpred wcel wi wsbc nfcv elrabsf nfsbc1v nfim wwe
      wse crab ssrab2 dfss3 simprbi ralimi sylbi eleq1w predeq3 raleqdv sbceq1a
      nfv nfral imbi12d chvar syl5 anc2li syl6ibr rgen wfi mpanr12 rabid2 sylib
      ) DEUADEUBHZDABDUCZIZABDJVEVFDKDEGLZMZVFKZVHVFNZOZGDJVGABDUDVLGDVHDNZVJVM
      ABVHPZHVKVMVJVNVJABCLZPZCVIJZVMVNVJVOVFNZCVIJVQCVIVFUEVRVPCVIVRVODNVPABVO
      DBDQZRUFUGUHBLZDNZVPCDEVTMZJZAOZOVMVQVNOZOBGVMWEBVMBUMVQVNBVPBCVIBVIQABVO
      SUNABVHSTTVTVHIZWAVMWDWEBGDUIWFWCVQAVNWFVPCWBVIDEVTVHUJUKABVHULUOUOFUPUQU
      RABVHDVSRUSUTGDVFEVAVBABDVCVD $.
  $}

  ${
    $d A y z $.  $d ph z $.  $d R y z $.
    wfis.1 $e |- R We A $.
    wfis.2 $e |- R Se A $.
    wfis.3 $e |- ( y e. A ->
                    ( A. z e. Pred ( R , A , y ) [. z / y ]. ph -> ph ) ) $.
    $( Well-Founded Induction Schema.  If all elements less than a given set
       ` x ` of the well-founded class ` A ` have a property (induction
       hypothesis), then all elements of ` A ` have that property.
       (Contributed by Scott Fenton, 29-Jan-2011.) $)
    wfis $p |- ( y e. A -> ph ) $=
      ( wwe wse wral wfisg mp2an rspec ) ABDDEIDEJABDKFGABCDEHLMN $.
  $}

  ${
    $d A y z $.  $d ph z $.  $d R y z $.
    wfis2fg.1 $e |- F/ y ps $.
    wfis2fg.2 $e |- ( y = z -> ( ph <-> ps ) ) $.
    wfis2fg.3 $e |- ( y e. A -> ( A. z e. Pred ( R , A , y ) ps -> ph ) ) $.
    $( Well-Founded Induction Schema, using implicit substitution.
       (Contributed by Scott Fenton, 11-Feb-2011.) $)
    wfis2fg $p |- ( ( R We A /\ R Se A ) -> A. y e. A ph ) $=
      ( cv wsbc cpred wral wcel wsb sbsbc sbie bitr3i ralbii syl5bi wfisg ) ACD
      EFACDJKZDEFCJZLZMBDUDMUCENAUBBDUDUBACDOBACDPABCDGHQRSITUA $.
  $}

  ${
    $d A y z $.  $d ph z $.  $d R y z $.
    wfis2f.1 $e |- R We A $.
    wfis2f.2 $e |- R Se A $.
    wfis2f.3 $e |- F/ y ps $.
    wfis2f.4 $e |- ( y = z -> ( ph <-> ps ) ) $.
    wfis2f.5 $e |- ( y e. A -> ( A. z e. Pred ( R , A , y ) ps -> ph ) ) $.
    $( Well Founded Induction schema, using implicit substitution.
       (Contributed by Scott Fenton, 29-Jan-2011.) $)
    wfis2f $p |- ( y e. A -> ph ) $=
      ( wwe wse wral wfis2fg mp2an rspec ) ACEEFLEFMACENGHABCDEFIJKOPQ $.
  $}

  ${
    $d A y z $.  $d ph z $.  $d ps y $.  $d R y z $.
    wfis2g.1 $e |- ( y = z -> ( ph <-> ps ) ) $.
    wfis2g.2 $e |- ( y e. A -> ( A. z e. Pred ( R , A , y ) ps -> ph ) ) $.
    $( Well-Founded Induction Schema, using implicit substitution.
       (Contributed by Scott Fenton, 11-Feb-2011.) $)
    wfis2g $p |- ( ( R We A /\ R Se A ) -> A. y e. A ph ) $=
      ( nfv wfis2fg ) ABCDEFBCIGHJ $.
  $}

  ${
    $d A y z $.  $d ph z $.  $d ps y $.  $d R y z $.
    wfis2.1 $e |- R We A $.
    wfis2.2 $e |- R Se A $.
    wfis2.3 $e |- ( y = z -> ( ph <-> ps ) ) $.
    wfis2.4 $e |- ( y e. A -> ( A. z e. Pred ( R , A , y ) ps -> ph ) ) $.
    $( Well Founded Induction schema, using implicit substitution.
       (Contributed by Scott Fenton, 29-Jan-2011.) $)
    wfis2 $p |- ( y e. A -> ph ) $=
      ( wwe wse wral wfis2g mp2an rspec ) ACEEFKEFLACEMGHABCDEFIJNOP $.
  $}

  ${
    $d A y z $.  $d B y $.  $d ch y $.  $d ph z $.  $d ps y $.  $d R y z $.
    wfis3.1 $e |- R We A $.
    wfis3.2 $e |- R Se A $.
    wfis3.3 $e |- ( y = z -> ( ph <-> ps ) ) $.
    wfis3.4 $e |- ( y = B -> ( ph <-> ch ) ) $.
    wfis3.5 $e |- ( y e. A -> ( A. z e. Pred ( R , A , y ) ps -> ph ) ) $.
    $( Well Founded Induction schema, using implicit substitution.
       (Contributed by Scott Fenton, 29-Jan-2011.) $)
    wfis3 $p |- ( B e. A -> ch ) $=
      ( wfis2 vtoclga ) ACDGFLABDEFHIJKMNO $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Ordinals
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Introduce new constant symbols. $)
  $c Ord $.  $( Ordinal predicate $)
  $c On $.  $( The class of ordinal numbers $)
  $c Lim $.  $( Limit ordinal predicate $)
  $c suc $.  $( Successor function (read:  "successor of") $)

  $( Extend the definition of a wff to include the ordinal predicate. $)
  word $a wff Ord A $.

  $( Extend the definition of a class to include the class of all ordinal
     numbers.  (The 0 in the name prevents creating a file called con.html,
     which causes problems in Windows.) $)
  con0 $a class On $.

  $( Extend the definition of a wff to include the limit ordinal predicate. $)
  wlim $a wff Lim A $.

  $( Extend class notation to include the successor function. $)
  csuc $a class suc A $.

  $( Define the ordinal predicate, which is true for a class that is transitive
     and is well-ordered by the epsilon relation.  Variant of definition of
     [BellMachover] p. 468.  (Contributed by NM, 17-Sep-1993.) $)
  df-ord $a |- ( Ord A <-> ( Tr A /\ _E We A ) ) $.

  $( Define the class of all ordinal numbers.  Definition 7.11 of
     [TakeutiZaring] p. 38.  (Contributed by NM, 5-Jun-1994.) $)
  df-on $a |- On = { x | Ord x } $.

  $( Define the limit ordinal predicate, which is true for a nonempty ordinal
     that is not a successor (i.e. that is the union of itself).  Our
     definition combines the definition of Lim of [BellMachover] p. 471 and
     Exercise 1 of [TakeutiZaring] p. 42.  See ~ dflim2 , ~ dflim3 , and dflim4
     for alternate definitions.  (Contributed by NM, 22-Apr-1994.) $)
  df-lim $a |- ( Lim A <-> ( Ord A /\ A =/= (/) /\ A = U. A ) ) $.

  $( Define the successor of a class.  When applied to an ordinal number, the
     successor means the same thing as "plus 1" (see ~ oa1suc ).  Definition
     7.22 of [TakeutiZaring] p. 41, who use "+ 1" to denote this function.
     Ordinal natural numbers defined using this successor function and 0 as the
     empty set are also called von Neumann ordinals; 0 is the empty set {}, 1
     is {0, {0}}, 2 is {1, {1}}, and so on.  Our definition is a generalization
     to classes.  Although it is not conventional to use it with proper
     classes, it has no effect on a proper class ( ~ sucprc ), so that the
     successor of any ordinal class is still an ordinal class ( ~ ordsuc ),
     simplifying certain proofs.  Some authors denote the successor operation
     with a prime (apostrophe-like) symbol, such as Definition 6 of [Suppes]
     p. 134 and the definition of successor in [Mendelson] p. 246 (who uses the
     symbol "Suc" as a predicate to mean "is a successor ordinal").  The
     definition of successor of [Enderton] p. 68 denotes the operation with a
     plus-sign superscript.  (Contributed by NM, 30-Aug-1993.) $)
  df-suc $a |- suc A = ( A u. { A } ) $.

  $( Equality theorem for the ordinal predicate.  (Contributed by NM,
     17-Sep-1993.) $)
  ordeq $p |- ( A = B -> ( Ord A <-> Ord B ) ) $=
    ( wceq wtr cep wwe wa word treq weeq2 anbi12d df-ord 3bitr4g ) ABCZADZAEFZG
    BDZBEFZGAHBHNOQPRABIABEJKALBLM $.

  ${
    $d x A $.
    $( An ordinal number is an ordinal set.  (Contributed by NM,
       5-Jun-1994.) $)
    elong $p |- ( A e. V -> ( A e. On <-> Ord A ) ) $=
      ( vx cv word con0 ordeq df-on elab2g ) CDZEAECAFBJAGCHI $.
  $}

  ${
    elon.1 $e |- A e. _V $.
    $( An ordinal number is an ordinal set.  (Contributed by NM,
       5-Jun-1994.) $)
    elon $p |- ( A e. On <-> Ord A ) $=
      ( cvv wcel con0 word wb elong ax-mp ) ACDAEDAFGBACHI $.
  $}

  $( An ordinal number has the ordinal property.  (Contributed by NM,
     5-Jun-1994.) $)
  eloni $p |- ( A e. On -> Ord A ) $=
    ( con0 wcel word elong ibi ) ABCADABEF $.

  $( An ordinal number is an ordinal set.  (Contributed by NM, 8-Feb-2004.) $)
  elon2 $p |- ( A e. On <-> ( Ord A /\ A e. _V ) ) $=
    ( con0 wcel word cvv elex elong biadanii biancomi ) ABCZADZAECZJLKABFAEGHI
    $.

  $( Equality theorem for the limit predicate.  (Contributed by NM,
     22-Apr-1994.)  (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
  limeq $p |- ( A = B -> ( Lim A <-> Lim B ) ) $=
    ( wceq word c0 wne cuni w3a wlim ordeq neeq1 unieq eqeq12d 3anbi123d df-lim
    id 3bitr4g ) ABCZADZAEFZAAGZCZHBDZBEFZBBGZCZHAIBIRSUCTUDUBUFABJABEKRABUAUER
    PABLMNAOBOQ $.

  $( Epsilon well-orders every ordinal.  Proposition 7.4 of [TakeutiZaring]
     p. 36.  (Contributed by NM, 3-Apr-1994.) $)
  ordwe $p |- ( Ord A -> _E We A ) $=
    ( word wtr cep wwe df-ord simprbi ) ABACADEAFG $.

  $( An ordinal class is transitive.  (Contributed by NM, 3-Apr-1994.) $)
  ordtr $p |- ( Ord A -> Tr A ) $=
    ( word wtr cep wwe df-ord simplbi ) ABACADEAFG $.

  $( Epsilon is well-founded on an ordinal class.  (Contributed by NM,
     22-Apr-1994.) $)
  ordfr $p |- ( Ord A -> _E Fr A ) $=
    ( word cep wwe wfr ordwe wefr syl ) ABACDACEAFACGH $.

  $( An element of an ordinal class is a subset of it.  (Contributed by NM,
     30-May-1994.) $)
  ordelss $p |- ( ( Ord A /\ B e. A ) -> B C_ A ) $=
    ( word wtr wcel wss ordtr trss imp sylan ) ACADZBAEZBAFZAGKLMABHIJ $.

  $( A transitive subclass of an ordinal class is ordinal.  (Contributed by NM,
     29-May-1994.) $)
  trssord $p |- ( ( Tr A /\ A C_ B /\ Ord B ) -> Ord A ) $=
    ( wtr wss word w3a cep wwe wa wess ordwe impel anim2i 3impb df-ord sylibr )
    ACZABDZBEZFQAGHZIZAEQRSUARSITQRBGHTSABGJBKLMNAOP $.

  $( Epsilon irreflexivity of ordinals: no ordinal class is a member of itself.
     Theorem 2.2(i) of [BellMachover] p. 469, generalized to classes.  We prove
     this without invoking the Axiom of Regularity.  (Contributed by NM,
     2-Jan-1994.) $)
  ordirr $p |- ( Ord A -> -. A e. A ) $=
    ( word cep wfr wcel wn ordfr efrirr syl ) ABACDAAEFAGAHI $.
  $( $j usage 'ordirr' avoids 'ax-reg'; $)

  $( A member of an ordinal class is not equal to it.  (Contributed by NM,
     25-May-1998.) $)
  nordeq $p |- ( ( Ord A /\ B e. A ) -> A =/= B ) $=
    ( word wcel wne wn wceq ordirr eleq1 notbid syl5ibcom necon2ad imp ) ACZBAD
    ZABENOABNAADZFABGZOFAHQPOABAIJKLM $.

  $( An ordinal class cannot be an element of one of its members.  Variant of
     first part of Theorem 2.2(vii) of [BellMachover] p. 469.  (Contributed by
     NM, 3-Apr-1994.) $)
  ordn2lp $p |- ( Ord A -> -. ( A e. B /\ B e. A ) ) $=
    ( word wcel wa ordirr wtr wi ordtr trel syl mtod ) ACZABDBADEZAADZAFMAGNOHA
    IAABJKL $.

  ${
    $d x B $.
    $( A nonempty subclass of an ordinal class has a minimal element.
       Proposition 7.5 of [TakeutiZaring] p. 36.  (Contributed by NM,
       18-Feb-2004.)  (Revised by David Abernethy, 16-Mar-2011.) $)
    tz7.5 $p |- ( ( Ord A /\ B C_ A /\ B =/= (/) ) ->
               E. x e. B ( B i^i x ) = (/) ) $=
      ( word cep wwe wss c0 wne cv cin wceq wrex ordwe wefrc syl3an1 ) BDBEFCBG
      CHICAJKHLACMBNABCOP $.
  $}

  ${
    $d x y z A $.  $d x y z B $.
    $( An element of an ordinal class is ordinal.  Proposition 7.6 of
       [TakeutiZaring] p. 36.  (Contributed by NM, 23-Apr-1994.) $)
    ordelord $p |- ( ( Ord A /\ B e. A ) -> Ord B ) $=
      ( vx vz vy word wcel cv wa wceq eleq1 anbi2d wtr cep wwe wel wal w3a syl
      wi ordeq imbi12d simpll 3anrot 3anass ordtr trel3 syl5bir impl trel imp31
      bitr3i expcomd adantrl simplr ordwe sylan syl13anc pm2.43d alrimivv dftr2
      wetrep ex sylibr wss trss wess syl6ci imp df-ord sylanbrc vtoclg anabsi7
      ) AFZBAGZBFZVNCHZAGZIZVQFZTVNVOIZVPTCBAVQBJZVSWAVTVPWBVRVOVNVQBAKLVQBUAUB
      VSVQMZVQNOZVTVSDEPZECPZIZDCPZTZEQDQWCVSWIDEVSWGWHVSWGWIVSWGIVNDHZAGZEHZAG
      ZVRWIVNVRWGUCVNVRWGWKVRWGIZWEWFVRRZVNWKWOVRWEWFRWNVRWEWFUDVRWEWFUEULVNAMZ
      WOWKTAUFZAWJWLVQUGSUHUIVSWFWMWEVNVRWFWMVNWFVRWMVNWPWFVRIWMTWQAWLVQUJSUMUK
      UNVNVRWGUOVNANOZWKWMVRRWIAUPZDECAVBUQURVCUSUTDEVQVAVDVNVRWDVNVRVQAVEZWRWD
      VNWPVRWTTWQAVQVFSWSVQANVGVHVIVQVJVKVLVM $.
  $}

  ${
    $d x y $.
    $( The class of all ordinal numbers is transitive.  (Contributed by NM,
       4-May-2009.) $)
    tron $p |- Tr On $=
      ( vx vy con0 wtr cv wss dftr3 wcel word vex elon ordelord sylanb ex ssrdv
      syl6ibr mprgbir ) CDAEZCFACACGRCHZBRCSBEZRHZTIZTCHSUAUBSRIUAUBRAJKRTLMNTB
      JKPOQ $.
  $}

  $( An element of an ordinal class is an ordinal number.  (Contributed by NM,
     26-Oct-2003.) $)
  ordelon $p |- ( ( Ord A /\ B e. A ) -> B e. On ) $=
    ( word wcel wa con0 ordelord wb elong adantl mpbird ) ACZBADZEBFDZBCZABGMNO
    HLBAIJK $.

  $( An element of an ordinal number is an ordinal number.  Theorem 2.2(iii) of
     [BellMachover] p. 469.  (Contributed by NM, 26-Oct-2003.) $)
  onelon $p |- ( ( A e. On /\ B e. A ) -> B e. On ) $=
    ( con0 wcel word eloni ordelon sylan ) ACDAEBADBCDAFABGH $.

  ${
    $d x y A $.  $d x y B $.
    $( A transitive class belongs to an ordinal class iff it is strictly
       included in it.  Proposition 7.7 of [TakeutiZaring] p. 37.  (Contributed
       by NM, 5-May-1994.) $)
    tz7.7 $p |- ( ( Ord A /\ Tr B ) ->
                ( B e. A <-> ( B C_ A /\ B =/= A ) ) ) $=
      ( vx vy word wtr wa wcel wss wne wi cep c0 cv wceq imp32 wn nsyli adantll
      imp wfr ordtr ordfr tz7.2 3exp sylc adantr cdif pssdifn0 wrex difss tz7.5
      cin mp3an2 eldifi difin0ss com12 syl56 syl ad2antrr eleq1w biimpcd eldifn
      trss adantl expcomd ex adantld w3o wwe ordwe ssel2 anim12i wecmpep syl2an
      trel adantlr ecase23d exp44 com34 imp31 ssrdv adantrr ad2antrl rexlimdvaa
      eqssd eqeltrrd syl5 exp4b com23 adantrd pm2.43i syl7 exp4a pm2.43d impbid
      impd ) AEZBFZGZBAHZBAIZBAJZGZWRXAXDKZWSWRAFZALUAZXEAUBZAUCXFXGXAXDABUDUEU
      FUGWTXBXCXAWTXBXCXAKWTXBXBXCXAXDABUHZMJZWTXBXABAUIWTXBXJXAKZKZWTWRXLWSWTX
      BWRXKWTXBWRXJXAWRXJGXICNZUMMOZCXIUJZWTXBGZXAWRXIAIXJXOABUKCAXIULUNXPXNXAC
      XIXPXMXIHZXNGGZXMBAXRXMBXPXQXNXMBIZWRXQXNXSKZKZWSXBWRXFYAXHXQXMAHZXFXMAIZ
      XTXMABUOZAXMVDXNYCXSABXMUPUQURUSUTPXPXQBXMIXNXPXQGDBXMWTXBXQDNZBHZYEXMHZK
      WTXBYFXQYGWTXBYFXQYGWTXBYFGZXQGZGYGYEXMOZXMYEHZYIYJQZWTYFXQYLXBYFXQYLYFYJ
      XMBHZXQYJYFYMDCBVAVBXMABVCZRTSVEWSYIYKQZWRWSYHXQYOWSYFXQYOKZXBWSYFYPWSYFG
      YKYMXQWSYFYKYMKWSYKYFYMBXMYEVPVFTYNRVGVHPSWRYIYGYJYKVIZWSWRALVJYEAHZYBGYQ
      YIAVKYHYRXQYBBAYEVLYDVMDCAVNVOVQVRVSVTWAWBWCWFXQYBXPXNYDWDWGWEWHWIWJWKWLW
      MWNWOWQWP $.
  $}

  $( For ordinal classes, membership is equivalent to strict inclusion.
     Corollary 7.8 of [TakeutiZaring] p. 37.  (Contributed by NM,
     25-Nov-1995.) $)
  ordelssne $p |- ( ( Ord A /\ Ord B ) ->
              ( A e. B <-> ( A C_ B /\ A =/= B ) ) ) $=
    ( word wcel wss wne wa wb wtr ordtr tz7.7 sylan2 ancoms ) BCZACZABDABEABFGH
    ZONAIPAJBAKLM $.

  $( For ordinal classes, membership is equivalent to strict inclusion.
     Corollary 7.8 of [TakeutiZaring] p. 37.  (Contributed by NM,
     17-Jun-1998.) $)
  ordelpss $p |- ( ( Ord A /\ Ord B ) -> ( A e. B <-> A C. B ) ) $=
    ( word wa wcel wss wne wpss ordelssne df-pss syl6bbr ) ACBCDABEABFABGDABHAB
    IABJK $.

  $( For ordinal classes, inclusion is equivalent to membership or equality.
     (Contributed by NM, 25-Nov-1995.)  (Proof shortened by Andrew Salmon,
     25-Jul-2011.) $)
  ordsseleq $p |- ( ( Ord A /\ Ord B ) ->
                  ( A C_ B <-> ( A e. B \/ A = B ) ) ) $=
    ( word wa wcel wceq wo wpss wss ordelpss orbi1d sspss syl6rbbr ) ACBCDZABEZ
    ABFZGABHZPGABINOQPABJKABLM $.

  $( The intersection of two ordinal classes is ordinal.  Proposition 7.9 of
     [TakeutiZaring] p. 37.  (Contributed by NM, 9-May-1994.) $)
  ordin $p |- ( ( Ord A /\ Ord B ) -> Ord ( A i^i B ) ) $=
    ( word cin wtr ordtr trin syl2an wss inss2 trssord mp3an2 sylancom ) ACZBCZ
    ABDZEZPCZNAEBEQOAFBFABGHQPBIORABJPBKLM $.

  $( The intersection of two ordinal numbers is an ordinal number.
     (Contributed by NM, 7-Apr-1995.) $)
  onin $p |- ( ( A e. On /\ B e. On ) -> ( A i^i B ) e. On ) $=
    ( con0 wcel wa cin word eloni ordin syl2an cvv wb simpl inex1g elong mpbird
    3syl ) ACDZBCDZEZABFZCDZUAGZRAGBGUCSAHBHABIJTRUAKDUBUCLRSMABCNUAKOQP $.

  $( A trichotomy law for ordinals.  Proposition 7.10 of [TakeutiZaring] p. 38.
     (Contributed by NM, 10-May-1994.)  (Proof shortened by Andrew Salmon,
     25-Jul-2011.) $)
  ordtri3or $p |- ( ( Ord A /\ Ord B ) -> ( A e. B \/ A = B \/ B e. A ) ) $=
    ( word wa wcel wceq w3o wpss wss wo ordin sylib inss1 ordsseleq mpbii sylan
    cin wn ord df-ss ordirr syl ianor elin incom eleq1i anbi2i xchnxbir anabss1
    bitri syl6ibr anabss4 orim12d mpd sspsstri ordelpss ancoms 3orbi123d mpbird
    biidd wb ) ACZBCZDZABEZABFZBAEZGABHZVFBAHZGZVDABIZBAIZJZVJVDABQZAEZRZBAQZBE
    ZRZJZVMVDVNVNEZRZVTVDVNCZWBABKZVNUAUBVOVRDZVTWAVOVRUCWAVOVNBEZDWEVNABUDWFVR
    VOVNVQBABUEUFUGUJUHLVDVPVKVSVLVDVPVNAFZVKVDVOWGVBVCVOWGJZVDWCVBWHWDWCVBDVNA
    IWHABMVNANOPUISABTUKVDVSVQBFZVLVDVRWIVBVCVRWIJZVCVBDVQCZVCWJBAKWKVCDVQBIWJB
    AMVQBNOPULSBATUKUMUNABUOLVDVEVHVFVFVGVIABUPVDVFUTVCVBVGVIVABAUPUQURUS $.

  $( A trichotomy law for ordinals.  (Contributed by NM, 25-Mar-1995.)  (Proof
     shortened by Andrew Salmon, 25-Jul-2011.) $)
  ordtri1 $p |- ( ( Ord A /\ Ord B ) -> ( A C_ B <-> -. B e. A ) ) $=
    ( word wa wss wcel wceq wo wn ordsseleq wi imnan sylibr ordirr eleq2 notbid
    ordn2lp syl5ibrcom jaao w3o ordtri3or df-3or sylib orcomd ord impbid bitrd
    ) ACZBCZDZABEABFZABGZHZBAFZIZABJUJUMUOUHUKUOUIULUHUKUNDIUKUOKABQUKUNLMUIUOU
    LBBFZIBNULUNUPABBOPRSUJUNUMUJUMUNUJUKULUNTUMUNHABUAUKULUNUBUCUDUEUFUG $.

  $( A trichotomy law for ordinal numbers.  (Contributed by NM, 6-Nov-2003.) $)
  ontri1 $p |- ( ( A e. On /\ B e. On ) -> ( A C_ B <-> -. B e. A ) ) $=
    ( con0 wcel word wss wn wb eloni ordtri1 syl2an ) ACDAEBEABFBADGHBCDAIBIABJ
    K $.

  $( A trichotomy law for ordinals.  (Contributed by NM, 25-Nov-1995.) $)
  ordtri2 $p |- ( ( Ord A /\ Ord B ) ->
               ( A e. B <-> -. ( A = B \/ B e. A ) ) ) $=
    ( word wa wceq wcel wo wn wb wss ordsseleq eqcom orbi2i orcom bitri ordtri1
    syl6bb bitr3d ancoms con2bid ) ACZBCZDABEZBAFZGZABFZUBUAUEUFHZIUBUADZBAJZUE
    UGUHUIUDBAEZGZUEBAKUKUDUCGUEUJUCUDBALMUDUCNOQBAPRST $.

  $( A trichotomy law for ordinals.  (Contributed by NM, 18-Oct-1995.)  (Proof
     shortened by Andrew Salmon, 25-Jul-2011.)  (Proof shortened by JJ,
     24-Sep-2021.) $)
  ordtri3 $p |- ( ( Ord A /\ Ord B ) ->
               ( A = B <-> -. ( A e. B \/ B e. A ) ) ) $=
    ( word wa wceq wcel wo ordirr adantl eleq2 notbid syl5ibrcom pm4.71d pm5.61
    wn pm4.52 bitr3i syl6bb ordtri2 orbi1d bitr4d ) ACZBCZDZABEZUEBAFZGZOZUFGZO
    ZABFZUFGZOUDUEUEUFOZDZUJUDUEUMUDUMUEBBFZOZUCUPUBBHIUEUFUOABBJKLMUNUGUMDUJUE
    UFNUGUFPQRUDULUIUDUKUHUFABSTKUA $.

  $( A trichotomy law for ordinals.  (Contributed by NM, 1-Nov-2003.)  (Proof
     shortened by Andrew Salmon, 25-Jul-2011.) $)
  ordtri4 $p |- ( ( Ord A /\ Ord B ) ->
               ( A = B <-> ( A C_ B /\ -. A e. B ) ) ) $=
    ( wceq wss wa word wcel wn eqss wb ordtri1 ancoms anbi2d syl5bb ) ABCABDZBA
    DZEAFZBFZEZOABGHZEABISPTORQPTJBAKLMN $.

  $( An ordinal class and its singleton are disjoint.  (Contributed by NM,
     19-May-1998.) $)
  orddisj $p |- ( Ord A -> ( A i^i { A } ) = (/) ) $=
    ( word wcel wn csn cin c0 wceq ordirr disjsn sylibr ) ABAACDAAEFGHAIAAJK $.

  ${
    $d x y z $.
    $( The ordinal class is well-founded.  This lemma is needed for ~ ordon in
       order to eliminate the need for the Axiom of Regularity.  (Contributed
       by NM, 17-May-1994.) $)
    onfr $p |- _E Fr On $=
      ( vx vz vy con0 cep wfr cv wss c0 wne cin wceq wrex dfepfr wel wex eqeq1d
      wa wi wcel n0 ineq2 rspcev adantll inss1 word ssel2 eloni ordfr inss2 vex
      3syl inex1 epfrc mp3an2 sylan wb inass syl elinel2 ordelss syl2an sseqin2
      sylib ineq2d syl5eq rexbidva adantr mpbid ssrexv mpsyl pm2.61dane exlimdv
      ex syl5bi imp mpgbir ) DEFAGZDHZVRIJZRVRBGZKZILZBVRMZSAABDNVSVTWDVTCAOZCP
      VSWDCVRUAVSWEWDCVSWEWDVSWERZWDVRCGZKZIWEWHILZWDVSWCWIBWGVRWAWGLWBWHIWAWGV
      RUBQUCUDWHVRHWFWHIJZRZWCBWHMZWDVRWGUEWKWHWAKZILZBWHMZWLWFWGEFZWJWOWFWGDTZ
      WGUFZWPVRDWGUGZWGUHZWGUIULWPWHWGHWJWOVRWGUJBWGWHVRWGAUKUMUNUOUPWFWOWLUQWJ
      WFWNWCBWHWFWAWHTZRZWMWBIXBWMVRWGWAKZKWBVRWGWAURXBXCWAVRXBWAWGHZXCWALWFWRB
      COXDXAWFWQWRWSWTUSWAVRWGUTWGWAVAVBWAWGVCVDVEVFQVGVHVIWCBWHVRVJVKVLVNVMVOV
      PVQ $.
    $( $j usage 'onfr' avoids 'ax-reg'; $)
  $}

  $( Relationship between membership and proper subset of an ordinal number.
     (Contributed by NM, 15-Sep-1995.) $)
  onelpss $p |- ( ( A e. On /\ B e. On ) ->
               ( A e. B <-> ( A C_ B /\ A =/= B ) ) ) $=
    ( con0 wcel word wss wne wa wb eloni ordelssne syl2an ) ACDAEBEABDABFABGHIB
    CDAJBJABKL $.

  $( Relationship between subset and membership of an ordinal number.
     (Contributed by NM, 15-Sep-1995.) $)
  onsseleq $p |- ( ( A e. On /\ B e. On ) ->
                 ( A C_ B <-> ( A e. B \/ A = B ) ) ) $=
    ( con0 wcel word wss wceq wo wb eloni ordsseleq syl2an ) ACDAEBEABFABDABGHI
    BCDAJBJABKL $.

  $( An element of an ordinal number is a subset of the number.  (Contributed
     by NM, 5-Jun-1994.)  (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
  onelss $p |- ( A e. On -> ( B e. A -> B C_ A ) ) $=
    ( con0 wcel word wss wi eloni ordelss ex syl ) ACDAEZBADZBAFZGAHLMNABIJK $.

  $( Transitive law for ordinal classes.  (Contributed by NM, 12-Dec-2004.) $)
  ordtr1 $p |- ( Ord C -> ( ( A e. B /\ B e. C ) -> A e. C ) ) $=
    ( word wtr wcel wa wi ordtr trel syl ) CDCEABFBCFGACFHCICABJK $.

  $( Transitive law for ordinal classes.  (Contributed by NM, 12-Dec-2004.)
     (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
  ordtr2 $p |- ( ( Ord A /\ Ord C ) -> ( ( A C_ B /\ B e. C ) -> A e. C ) ) $=
    ( word wa wss wcel wpss wi ordelord ex ancld anc2li ordelpss sspsstr expcom
    syl6bi com23 imp32 com12 syl9 impd adantl sylibrd ) ADZCDZEABFZBCGZEZACHZAC
    GUFUIUJIUEUFUGUHUJUFUHUFUHBDZEZEZUGUJUFUHULUFUHUKUFUHUKCBJKLMUMUGUJUFUHUKUG
    UJIZUFUKUHUNUKUFUHUNIUKUFEUHBCHZUNBCNUGUOUJABCOPQPRSTUAUBUCACNUD $.

  $( Transitive law for ordinal classes.  (Contributed by Mario Carneiro,
     30-Dec-2014.)  (Proof shortened by JJ, 24-Sep-2021.) $)
  ordtr3 $p |- ( ( Ord B /\ Ord C ) -> ( A e. B -> ( A e. C \/ C e. B ) ) ) $=
    ( word wa wcel wo wn wss nelss adantl wb ordtri1 con2bid adantr mpbird expr
    orrd ex ) BDCDEZABFZACFZCBFZGTUAEUBUCTUAUBHZUCTUAUDEZEUCBCIZHZUEUGTABCJKTUC
    UGLUETUFUCBCMNOPQRS $.

  $( Transitive law for ordinal numbers.  Theorem 7M(b) of [Enderton] p. 192.
     (Contributed by NM, 11-Aug-1994.) $)
  ontr1 $p |- ( C e. On -> ( ( A e. B /\ B e. C ) -> A e. C ) ) $=
    ( con0 wcel word wa wi eloni ordtr1 syl ) CDECFABEBCEGACEHCIABCJK $.

  $( Transitive law for ordinal numbers.  Exercise 3 of [TakeutiZaring] p. 40.
     (Contributed by NM, 6-Nov-2003.) $)
  ontr2 $p |- ( ( A e. On /\ C e. On ) ->
              ( ( A C_ B /\ B e. C ) -> A e. C ) ) $=
    ( con0 wcel word wss wa wi eloni ordtr2 syl2an ) ADEAFCFABGBCEHACEICDEAJCJA
    BCKL $.

  ${
    $d x y A $.  $d x y B $.
    $( The union of an ordinal stays the same if a subset equal to one of its
       elements is removed.  (Contributed by NM, 10-Dec-2004.) $)
    ordunidif $p |- ( ( Ord A /\ B e. A ) -> U. ( A \ B ) = U. A ) $=
      ( vx vy word wcel wa cv wss cdif wrex wi syl wn eldif adantl sseq2 rspcev
      cuni syl6 wral wceq con0 ordelon onelss eloni ordirr simplbi2 syl5 jctild
      mpd adantr biimpri ssid jctir ex pm2.61d ralrimiva unidif ) AEZBAFZGZCHZD
      HZIZDABJZKZCAUAVFSASUBVBVGCAVBVCAFZGZVCBFZVGVIVJBVFFZVCBIZGZVGVBVJVMLVHVB
      VJVLVKVBBUCFZVJVLLABUDZBVCUEMVBVNVKVOVAVNVKLUTVNBBFNZVAVKVNBEVPBUFBUGMVKV
      AVPBABOUHUIPUKUJULVEVLDBVFVDBVCQRTVHVJNZVGLVBVHVQVCVFFZVCVCIZGZVGVHVQVTVH
      VQGZVRVSVRWAVCABOUMVCUNUOUPVEVSDVCVFVDVCVCQRTPUQURCDABUSM $.

    $( If ` B ` is smaller than ` A ` , then it equals the intersection of the
       difference.  Exercise 11 in [TakeutiZaring] p. 44.  (Contributed by
       Andrew Salmon, 14-Nov-2011.) $)
    ordintdif $p |- ( ( Ord A /\ Ord B /\ ( A \ B ) =/= (/) )
      -> B = |^| ( A \ B ) ) $=
      ( vx cdif c0 wne word wss wn cint wceq ssdif0 necon3bbii w3a cv wcel crab
      dfdif2 wa ordtri1 inteqi con2bid wb ordelord an32s rabbidva inteqd intmin
      id syl2anr sylan9req ex sylbird 3impia syl5req syl3an3br ) ABDZEFAGZBGZAB
      HZIZBUQJZKUTUQEABLMURUSVANVBCOZBPIZCAQZJZBUQVECABRUAURUSVAVFBKZURUSSZVABA
      PZVGVHUTVIABTUBVHVIVGVHVIVFBVCHZCAQZJBVHVKVEVHVJVDCAURVCAPZUSVJVDUCZUSUSV
      CGVMURVLSUSUIAVCUDBVCTUJUEUFUGCBAUHUKULUMUNUOUP $.
  $}

  ${
    $d x ps $.  $d x A $.
    onintss.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( If a property is true for an ordinal number, then the minimum ordinal
       number for which it is true is smaller or equal.  Theorem Schema 61 of
       [Suppes] p. 228.  (Contributed by NM, 3-Oct-2003.) $)
    onintss $p |- ( A e. On -> ( ps -> |^| { x e. On | ph } C_ A ) ) $=
      ( con0 wcel crab cint wss intminss ex ) DFGBACFHIDJABCDFEKL $.
  $}

  ${
    $d x A $.  $d x B $.
    $( A way to show that an ordinal number equals the minimum of a collection
       of ordinal numbers: it must be in the collection, and it must not be
       larger than any member of the collection.  (Contributed by NM,
       14-Nov-2003.) $)
    oneqmini $p |- ( B C_ On -> ( ( A e. B /\ A. x e. A -. x e. B )
                    -> A = |^| B ) ) $=
      ( con0 wss wcel cv wn wral wa cint wceq ssint wi ssel anim12d ontri1 syl6
      wb expdimp pm5.74d con2b syl6bb syl5bb biimprd expimpd intss1 a1i adantrd
      ralbidv2 jcad eqss syl6ibr ) CDEZBCFZAGZCFZHZABIZJZBCKZEZVABEZJBVALUNUTVB
      VCUNUOUSVBUNUOJZVBUSVBBUPEZACIVDUSABCMVDVEURACBVDUQVENUQUPBFZHZNVFURNVDUQ
      VEVGUNUOUQVEVGSZUNUOUQJBDFZUPDFZJVHUNUOVIUQVJCDBOCDUPOPBUPQRTUAUQVFUBUCUJ
      UDUEUFUNUOVCUSUOVCNUNBCUGUHUIUKBVAULUM $.
  $}

  $( The empty set is an ordinal class.  (Contributed by NM, 11-May-1994.) $)
  ord0 $p |- Ord (/) $=
    ( c0 word wtr cep wwe tr0 we0 df-ord mpbir2an ) ABACADEFDGAHI $.

  $( The empty set is an ordinal number.  Corollary 7N(b) of [Enderton] p. 193.
     (Contributed by NM, 17-Sep-1993.) $)
  0elon $p |- (/) e. On $=
    ( c0 con0 wcel word ord0 0ex elon mpbir ) ABCADEAFGH $.

  $( A nonempty ordinal contains the empty set.  (Contributed by NM,
     25-Nov-1995.) $)
  ord0eln0 $p |- ( Ord A -> ( (/) e. A <-> A =/= (/) ) ) $=
    ( word c0 wcel ne0i wceq wo wi ord0 wa wn noel ordtri2 con2bid mpbiri mpan2
    wne neor sylib impbid2 ) ABZCADZACQZACEUAACFUBGZUCUBHUACBZUDIUAUEJZUDACDZKA
    LUFUGUDACMNOPUBACRST $.

  $( An ordinal number contains zero iff it is nonzero.  (Contributed by NM,
     6-Dec-2004.) $)
  on0eln0 $p |- ( A e. On -> ( (/) e. A <-> A =/= (/) ) ) $=
    ( con0 wcel word c0 wne wb eloni ord0eln0 syl ) ABCADEACAEFGAHAIJ $.

  $( An alternate definition of a limit ordinal.  (Contributed by NM,
     4-Nov-2004.) $)
  dflim2 $p |- ( Lim A <-> ( Ord A /\ (/) e. A /\ A = U. A ) ) $=
    ( wlim word c0 wne cuni wceq w3a wcel df-lim ord0eln0 anbi1d pm5.32i 3anass
    wa 3bitr4i bitr4i ) ABACZADEZAAFGZHZRDAIZTHZAJRUBTOZORSTOZOUCUARUDUERUBSTAK
    LMRUBTNRSTNPQ $.

  $( The intersection of the class of ordinal numbers is the empty set.
     (Contributed by NM, 20-Oct-2003.) $)
  inton $p |- |^| On = (/) $=
    ( c0 con0 wcel cint wceq 0elon int0el ax-mp ) ABCBDAEFBGH $.

  $( The empty set is not a limit ordinal.  (Contributed by NM, 24-Mar-1995.)
     (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
  nlim0 $p |- -. Lim (/) $=
    ( c0 wlim word wcel cuni wceq w3a noel simp2 mto dflim2 mtbir ) ABACZAADZAA
    EFZGZPNAHMNOIJAKL $.

  $( A limit ordinal is ordinal.  (Contributed by NM, 4-May-1995.) $)
  limord $p |- ( Lim A -> Ord A ) $=
    ( wlim word c0 wne cuni wceq df-lim simp1bi ) ABACADEAAFGAHI $.

  $( A limit ordinal is its own supremum (union).  (Contributed by NM,
     4-May-1995.) $)
  limuni $p |- ( Lim A -> A = U. A ) $=
    ( wlim word c0 wne cuni wceq df-lim simp3bi ) ABACADEAAFGAHI $.

  $( The union of a limit ordinal is a limit ordinal.  (Contributed by NM,
     19-Sep-2006.) $)
  limuni2 $p |- ( Lim A -> Lim U. A ) $=
    ( wlim cuni wceq wb limuni limeq syl ibi ) ABZACZBZJAKDJLEAFAKGHI $.

  $( A limit ordinal contains the empty set.  (Contributed by NM,
     15-May-1994.) $)
  0ellim $p |- ( Lim A -> (/) e. A ) $=
    ( wlim c0 wcel wne wceq nlim0 limeq mtbiri necon2ai word wb limord ord0eln0
    syl mpbird ) ABZCADZACEZQACACFQCBGACHIJQAKRSLAMANOP $.

  $( A limit ordinal class that is also a set is an ordinal number.
     (Contributed by NM, 26-Apr-2004.) $)
  limelon $p |- ( ( A e. B /\ Lim A ) -> A e. On ) $=
    ( wcel wlim con0 word limord elong syl5ibr imp ) ABCZADZAECZLMKAFAGABHIJ $.

  $( The class of all ordinal numbers is not empty.  (Contributed by NM,
     17-Sep-1995.) $)
  onn0 $p |- On =/= (/) $=
    ( c0 con0 0elon ne0ii ) ABCD $.

  $( Equality of successors.  (Contributed by NM, 30-Aug-1993.)  (Proof
     shortened by Andrew Salmon, 25-Jul-2011.) $)
  suceq $p |- ( A = B -> suc A = suc B ) $=
    ( wceq csn cun csuc id sneq uneq12d df-suc 3eqtr4g ) ABCZAADZEBBDZEAFBFLABM
    NLGABHIAJBJK $.

  $( Membership in a successor.  This one-way implication does not require that
     either ` A ` or ` B ` be sets.  (Contributed by NM, 6-Jun-1994.) $)
  elsuci $p |- ( A e. suc B -> ( A e. B \/ A = B ) ) $=
    ( csuc wcel csn wo wceq cun df-suc eleq2i elun bitri elsni orim2i sylbi ) A
    BCZDZABDZABEZDZFZRABGZFQABSHZDUAPUCABIJABSKLTUBRABMNO $.

  $( Membership in a successor.  Exercise 5 of [TakeutiZaring] p. 17.
     (Contributed by NM, 15-Sep-1995.) $)
  elsucg $p |- ( A e. V -> ( A e. suc B <-> ( A e. B \/ A = B ) ) ) $=
    ( csuc wcel csn wo wceq cun df-suc eleq2i elun bitri elsng orbi2d syl5bb )
    ABDZEZABEZABFZEZGZACEZSABHZGRABTIZEUBQUEABJKABTLMUCUAUDSABCNOP $.

  $( Variant of membership in a successor, requiring that ` B ` rather than
     ` A ` be a set.  (Contributed by NM, 28-Oct-2003.) $)
  elsuc2g $p |- ( B e. V -> ( A e. suc B <-> ( A e. B \/ A = B ) ) ) $=
    ( csuc wcel csn cun wceq wo df-suc eleq2i elun elsn2g orbi2d syl5bb ) ABDZE
    ABBFZGZEZBCEZABEZABHZIZPRABJKSUAAQEZITUCABQLTUDUBUAABCMNOO $.

  ${
    elsuc.1 $e |- A e. _V $.
    $( Membership in a successor.  Exercise 5 of [TakeutiZaring] p. 17.
       (Contributed by NM, 15-Sep-2003.) $)
    elsuc $p |- ( A e. suc B <-> ( A e. B \/ A = B ) ) $=
      ( cvv wcel csuc wceq wo wb elsucg ax-mp ) ADEABFEABEABGHICABDJK $.

    $( Membership in a successor.  (Contributed by NM, 15-Sep-2003.) $)
    elsuc2 $p |- ( B e. suc A <-> ( B e. A \/ B = A ) ) $=
      ( cvv wcel csuc wceq wo wb elsuc2g ax-mp ) ADEBAFEBAEBAGHICBADJK $.
  $}

  ${
    nfsuc.1 $e |- F/_ x A $.
    $( Bound-variable hypothesis builder for successor.  (Contributed by NM,
       15-Sep-2003.) $)
    nfsuc $p |- F/_ x suc A $=
      ( csuc csn cun df-suc nfsn nfun nfcxfr ) ABDBBEZFBGABKCABCHIJ $.
  $}

  $( Membership in a successor.  (Contributed by NM, 20-Jun-1998.) $)
  elelsuc $p |- ( A e. B -> A e. suc B ) $=
    ( wcel csuc wceq wo orc elsucg mpbird ) ABCZABDCJABEZFJKGABBHI $.

  ${
    $d x y A $.  $d x B $.
    $( Membership of a successor in another class.  (Contributed by NM,
       29-Jun-2004.) $)
    sucel $p |- ( suc A e. B <->
                E. x e. B A. y ( y e. x <-> ( y e. A \/ y = A ) ) ) $=
      ( csuc wcel cv wceq wrex wo wb wal risset dfcleq elsuc bibi2i albii bitri
      vex rexbii ) CEZDFAGZUAHZADIBGZUBFZUDCFUDCHJZKZBLZADIAUADMUCUHADUCUEUDUAF
      ZKZBLUHBUBUANUJUGBUIUFUEUDCBSOPQRTR $.
  $}

  $( The successor of the empty set.  (Contributed by NM, 1-Feb-2005.) $)
  suc0 $p |- suc (/) = { (/) } $=
    ( c0 csuc csn cun df-suc uncom un0 3eqtri ) ABAACZDIADIAEAIFIGH $.

  $( A proper class is its own successor.  (Contributed by NM, 3-Apr-1995.) $)
  sucprc $p |- ( -. A e. _V -> suc A = A ) $=
    ( cvv wcel wn csn cun c0 csuc snprc biimpi uneq2d df-suc un0 eqcomi 3eqtr4g
    wceq ) ABCDZAAEZFAGFZAHAQRGAQRGPAIJKALSAAMNO $.

  ${
    unisuc.1 $e |- A e. _V $.
    $( A transitive class is equal to the union of its successor.  Combines
       Theorem 4E of [Enderton] p. 72 and Exercise 6 of [Enderton] p. 73.
       (Contributed by NM, 30-Aug-1993.) $)
    unisuc $p |- ( Tr A <-> U. suc A = A ) $=
      ( cuni wss cun wceq wtr csuc ssequn1 df-tr csn df-suc unieqi uniun uneq2i
      unisn 3eqtri eqeq1i 3bitr4i ) ACZADTAEZAFAGAHZCZAFTAIAJUCUAAUCAAKZEZCTUDC
      ZEUAUBUEALMAUDNUFATABPOQRS $.
  $}

  $( A class is included in its own successor.  Part of Proposition 7.23 of
     [TakeutiZaring] p. 41 (generalized to arbitrary classes).  (Contributed by
     NM, 31-May-1994.) $)
  sssucid $p |- A C_ suc A $=
    ( csn cun csuc ssun1 df-suc sseqtr4i ) AAABZCADAHEAFG $.

  $( Part of Proposition 7.23 of [TakeutiZaring] p. 41 (generalized).
     (Contributed by NM, 25-Mar-1995.)  (Proof shortened by Scott Fenton,
     20-Feb-2012.) $)
  sucidg $p |- ( A e. V -> A e. suc A ) $=
    ( wcel csuc wceq wo eqid olci elsucg mpbiri ) ABCAADCAACZAAEZFLKAGHAABIJ $.

  ${
    sucid.1 $e |- A e. _V $.
    $( A set belongs to its successor.  (Contributed by NM, 22-Jun-1994.)
       (Proof shortened by Alan Sare, 18-Feb-2012.)  (Proof shortened by Scott
       Fenton, 20-Feb-2012.) $)
    sucid $p |- A e. suc A $=
      ( cvv wcel csuc sucidg ax-mp ) ACDAAEDBACFG $.
  $}

  $( No successor is empty.  (Contributed by NM, 3-Apr-1995.) $)
  nsuceq0 $p |- suc A =/= (/) $=
    ( csuc c0 cvv wcel wceq wn noel sucidg eleq2 syl5ibcom mtoi 0ex eleq1 con3i
    mpbiri sucprc eqeq1d mtbird pm2.61i neir ) ABZCADEZUBCFZGUCUDACEZAHUCAUBEUD
    UEADIUBCAJKLUCGZUDACFZUGUCUGUCCDEMACDNPOUFUBACAQRSTUA $.

  ${
    eqelsuc.1 $e |- A e. _V $.
    $( A set belongs to the successor of an equal set.  (Contributed by NM,
       18-Aug-1994.) $)
    eqelsuc $p |- ( A = B -> A e. suc B ) $=
      ( wceq csuc sucid suceq syl5eleq ) ABDAAEBEACFABGH $.
  $}

  ${
    $d A x $.  $d C x $.
    iunsuc.1 $e |- A e. _V $.
    iunsuc.2 $e |- ( x = A -> B = C ) $.
    $( Inductive definition for the indexed union at a successor.  (Contributed
       by Mario Carneiro, 4-Feb-2013.)  (Proof shortened by Mario Carneiro,
       18-Nov-2016.) $)
    iunsuc $p |- U_ x e. suc A B = ( U_ x e. A B u. C ) $=
      ( csuc ciun csn cun wceq df-suc iuneq1 ax-mp iunxun iunxsn uneq2i 3eqtri
      ) ABGZCHZABBIZJZCHZABCHZAUACHZJUDDJSUBKTUCKBLASUBCMNABUACOUEDUDABCDEFPQR
      $.
  $}

  ${
    $d y z A $.
    $( The successor of a transitive class is transitive.  (Contributed by Alan
       Sare, 11-Apr-2009.)  (Proof shortened by JJ, 24-Sep-2021.) $)
    suctr $p |- ( Tr A -> Tr suc A ) $=
      ( vz vy wtr cv wcel csuc wa wi wal wceq elsuci trel expdimp eleq2 biimpcd
      wo adantl jaod syl5 expimpd elelsuc syl6 alrimivv dftr2 sylibr ) ADZBEZCE
      ZFZUIAGZFZHZUHUKFZIZCJBJUKDUGUOBCUGUMUHAFZUNUGUJULUPULUIAFZUIAKZQUGUJHZUP
      UIALUSUQUPURUGUJUQUPAUHUIMNUJURUPIUGURUJUPUIAUHOPRSTUAUHAUBUCUDBCUKUEUF
      $.
  $}

  $( A set whose successor belongs to a transitive class also belongs.
     (Contributed by NM, 5-Sep-2003.)  (Proof shortened by Andrew Salmon,
     12-Aug-2011.) $)
  trsuc $p |- ( ( Tr A /\ suc B e. A ) -> B e. A ) $=
    ( wtr csuc wcel wa trel cvv wss sssucid ssexg mpan sucidg syl ancri impel )
    ACBBDZEZQAEZFBAESABQGSRSBHEZRBQISTBJBQAKLBHMNOP $.

  $( A member of the successor of a transitive class is a subclass of it.
     (Contributed by NM, 4-Oct-2003.) $)
  trsucss $p |- ( Tr A -> ( B e. suc A -> B C_ A ) ) $=
    ( csuc wcel wceq wo wtr wss elsuci trss wi eqimss a1i jaod syl5 ) BACDBADZB
    AEZFAGZBAHZBAIRPSQABJQSKRBALMNO $.

  $( An ordinal is a subset of another ordinal if and only if it belongs to its
     successor.  (Contributed by NM, 28-Nov-2003.) $)
  ordsssuc $p |- ( ( A e. On /\ Ord B ) -> ( A C_ B <-> A e. suc B ) ) $=
    ( con0 wcel word wa wss wceq wo csuc wb eloni ordsseleq sylan elsucg adantr
    bitr4d ) ACDZBEZFABGZABDABHIZABJDZRAESTUAKALABMNRUBUAKSABCOPQ $.

  $( A subset of an ordinal number belongs to its successor.  (Contributed by
     NM, 15-Sep-1995.) $)
  onsssuc $p |- ( ( A e. On /\ B e. On ) -> ( A C_ B <-> A e. suc B ) ) $=
    ( con0 wcel word wss csuc wb eloni ordsssuc sylan2 ) BCDACDBEABFABGDHBIABJK
    $.

  $( An ordinal subset of an ordinal number belongs to its successor.
     (Contributed by NM, 1-Feb-2005.)  (Proof shortened by Andrew Salmon,
     12-Aug-2011.) $)
  ordsssuc2 $p |- ( ( Ord A /\ B e. On ) -> ( A C_ B <-> A e. suc B ) ) $=
    ( cvv wcel word con0 wa wss csuc wb wi elong biimprd anim1d onsssuc syl6 wn
    annim ssexg ex elex a1d pm5.21ni sylbi expcom adantld pm2.61i ) ACDZAEZBFDZ
    GZABHZABIZDZJZKUHUKAFDZUJGUOUHUIUPUJUHUPUIACLMNABOPUHQZUJUOUIUJUQUOUJUQGUJU
    HKZQUOUJUHRULURUNULUJUHABFSTUNUHUJAUMUAUBUCUDUEUFUG $.

  ${
    $d x A $.  $d x B $.
    $( When its successor is subtracted from a class of ordinal numbers, an
       ordinal number is less than the minimum of the resulting subclass.
       (Contributed by NM, 1-Dec-2003.) $)
    onmindif $p |- ( ( A C_ On /\ B e. On ) -> B e. |^| ( A \ suc B ) ) $=
      ( vx con0 wss wcel wa csuc cdif cint cv wral wn eldif wi wb ssel2 onsssuc
      ontri1 bitr3d con1bid sylan biimpd exp31 com23 imp4b syl5bi elintg adantl
      ralrimiv mpbird ) ADEZBDFZGZBABHZIZJFZBCKZFZCUPLZUNUSCUPURUPFURAFZURUOFZM
      ZGUNUSURAUONULUMVAVCUSULVAUMVCUSOZULVAUMVDULVAGZUMGVCUSVEURDFZUMVCUSPADUR
      QVFUMGZUSVBVGURBEUSMVBURBSURBRTUAUBUCUDUEUFUGUJUMUQUTPULCBUPDUHUIUK $.
  $}

  $( There is no set between an ordinal class and its successor.  Generalized
     Proposition 7.25 of [TakeutiZaring] p. 41.  (Contributed by NM,
     21-Jun-1998.)  (Proof shortened by JJ, 24-Sep-2021.) $)
  ordnbtwn $p |- ( Ord A -> -. ( A e. B /\ B e. suc A ) ) $=
    ( word wcel wceq wo wa ordirr wn ordn2lp wi pm2.24 eleq2 biimpac a1d jaodan
    csuc syl5com mtod elsuci anim2i nsyl ) ACZABDZBADZBAEZFZGZUDBAQDZGUCUHAADZA
    HUCUDUEGZIZUHUJABJUDUEULUJKUFUKUJLUDUFGUJULUFUDUJBAAMNOPRSUIUGUDBATUAUB $.

  $( There is no set between an ordinal number and its successor.  Proposition
     7.25 of [TakeutiZaring] p. 41.  (Contributed by NM, 9-Jun-1994.) $)
  onnbtwn $p |- ( A e. On -> -. ( A e. B /\ B e. suc A ) ) $=
    ( con0 wcel word csuc wa wn eloni ordnbtwn syl ) ACDAEABDBAFDGHAIABJK $.

  $( A set whose successor is a subset of another class is a member of that
     class.  (Contributed by NM, 16-Sep-1995.) $)
  sucssel $p |- ( A e. V -> ( suc A C_ B -> A e. B ) ) $=
    ( wcel csuc wss sucidg ssel syl5com ) ACDAAEZDJBFABDACGJBAHI $.

  $( Ordinal derived from its successor.  (Contributed by NM, 20-May-1998.) $)
  orddif $p |- ( Ord A -> A = ( suc A \ { A } ) ) $=
    ( word csn cin wceq csuc cdif orddisj disj3 cun df-suc difeq1i difun2 eqtri
    c0 eqeq2i bitr4i sylib ) ABAACZDOEZAAFZSGZEZAHTAASGZEUCASIUBUDAUBASJZSGUDUA
    UESAKLASMNPQR $.

  $( An ordinal class includes its union.  (Contributed by NM, 13-Sep-2003.) $)
  orduniss $p |- ( Ord A -> U. A C_ A ) $=
    ( word wtr cuni wss ordtr df-tr sylib ) ABACADAEAFAGH $.

  $( A trichotomy law for ordinal classes.  (Contributed by NM, 13-Sep-2003.)
     (Proof shortened by Andrew Salmon, 12-Aug-2011.) $)
  ordtri2or $p |- ( ( Ord A /\ Ord B ) -> ( A e. B \/ B C_ A ) ) $=
    ( word wa wcel wss wn wb ordtri1 ancoms biimprd orrd ) ACZBCZDZABEZBAFZOQPG
    ZNMQRHBAIJKL $.

  $( A trichotomy law for ordinal classes.  (Contributed by NM, 2-Nov-2003.) $)
  ordtri2or2 $p |- ( ( Ord A /\ Ord B ) -> ( A C_ B \/ B C_ A ) ) $=
    ( word wa wcel wss wo ordtri2or wi ordelss ex orim1d adantl mpd ) ACZBCZDAB
    EZBAFZGZABFZRGZABHPSUAIOPQTRPQTBAJKLMN $.

  $( A consequence of total ordering for ordinal classes.  Similar to
     ~ ordtri2or2 .  (Contributed by David Moews, 1-May-2017.) $)
  ordtri2or3 $p |- ( ( Ord A /\ Ord B ) ->
                     ( A = ( A i^i B ) \/ B = ( A i^i B ) ) ) $=
    ( word wa wss wo cin wceq ordtri2or2 dfss sseqin2 eqcom bitri orbi12i sylib
    ) ACBCDABEZBAEZFAABGZHZBRHZFABIPSQTABJQRBHTBAKRBLMNO $.

  $( The intersection of two ordinal classes is an element of a third if and
     only if either one of them is.  (Contributed by David Moews, 1-May-2017.)
     (Proof shortened by JJ, 24-Sep-2021.) $)
  ordelinel $p |- ( ( Ord A /\ Ord B /\ Ord C ) ->
                    ( ( A i^i B ) e. C <-> ( A e. C \/ B e. C ) ) ) $=
    ( word w3a cin wcel wo wceq ordtri2or3 3adant3 eleq1a orim12d syl5com ordin
    wi wa wss ordtr2 mpani inss1 inss2 jaod stoic3 impbid ) ADZBDZCDZEZABFZCGZA
    CGZBCGZHZUIAUJIZBUJIZHZUKUNUFUGUQUHABJKUKUOULUPUMUJCALUJCBLMNUFUGUJDZUHUNUK
    PABOURUHQZULUKUMUSUJARULUKABUAUJACSTUSUJBRUMUKABUBUJBCSTUCUDUE $.

  $( Property of a subclass of the maximum (i.e. union) of two ordinals.
     (Contributed by NM, 28-Nov-2003.) $)
  ordssun $p |- ( ( Ord B /\ Ord C ) ->
               ( A C_ ( B u. C ) <-> ( A C_ B \/ A C_ C ) ) ) $=
    ( word wa cun wss wo wi ordtri2or2 wceq wb ssequn1 sseq2 olc syl6bi ssequn2
    sylbi orc jaoi syl ssun impbid1 ) BDCDEZABCFZGZABGZACGZHZUDBCGZCBGZHUFUIIZB
    CJUJULUKUJUFUHUIUJUECKUFUHLBCMUECANRUHUGOPUKUFUGUIUKUEBKUFUGLCBQUEBANRUGUHS
    PTUAABCUBUC $.

  $( The maximum (i.e. union) of two ordinals is either one or the other.
     Similar to Exercise 14 of [TakeutiZaring] p. 40.  (Contributed by NM,
     28-Nov-2003.) $)
  ordequn $p |- ( ( Ord B /\ Ord C ) ->
               ( A = ( B u. C ) -> ( A = B \/ A = C ) ) ) $=
    ( word wa wss wo cun wceq ordtri2or2 eqeq1 ssequn2 syl6rbbr ssequn1 orbi12d
    orcomd syl5ibcom ) BDCDEZCBFZBCFZGABCHZIZABIZACIZGRTSBCJPUBSUCTUDUBUCUABISA
    UABKCBLMUBUDUACITAUACKBCNMOQ $.

  $( The maximum (i.e. union) of two ordinals is ordinal.  Exercise 12 of
     [TakeutiZaring] p. 40.  (Contributed by NM, 28-Nov-2003.) $)
  ordun $p |- ( ( Ord A /\ Ord B ) -> Ord ( A u. B ) ) $=
    ( word wa cun wceq wo eqid ordequn mpi ordeq biimprcd jaao mpd ) ACZBCZDZAB
    EZAFZRBFZGZRCZQRRFUARHRABIJOSUBPTSUBORAKLTUBPRBKLMN $.

  ${
    $d x A $.  $d x B $.
    $( A subclass relationship for union and successor of ordinal classes.
       (Contributed by NM, 28-Nov-2003.) $)
    ordunisssuc $p |- ( ( A C_ On /\ Ord B ) ->
                      ( U. A C_ B <-> A C_ suc B ) ) $=
      ( vx con0 word wa cv wral csuc wcel cuni wb ssel2 ordsssuc sylan ralbidva
      wss an32s unissb dfss3 3bitr4g ) ADQZBEZFZCGZBQZCAHUEBIZJZCAHAKBQAUGQUDUF
      UHCAUBUEAJZUCUFUHLZUBUIFUEDJUCUJADUEMUEBNORPCABSCAUGTUA $.
  $}

  $( The successor operation behaves like a one-to-one function.  Compare
     Exercise 16 of [Enderton] p. 194.  (Contributed by NM, 3-Sep-2003.) $)
  suc11 $p |- ( ( A e. On /\ B e. On ) -> ( suc A = suc B <-> A = B ) ) $=
    ( con0 wcel wa csuc wceq wn wo wi word eloni ordn2lp wss sucssel elsuci ord
    syl5 com12 syl9 pm3.13 3syl adantr eqimss eqimss2 eqcom syl6ib jaao impbid1
    mpd suceq ) ACDZBCDZEZAFZBFZGZABGZUNABDZHZBADZHZIZUQURJZULVCUMULAKUSVAEHVCA
    LABMUSVAUAUBUCULUTVDUMVBULUQAUPDZUTURUQUOUPNULVEUOUPUDAUPCORVEUTURVEUSURABP
    QSTUMUQBUODZVBURUQUPUONUMVFUPUOUEBUOCORVFVBURVFVBBAGZURVFVAVGBAPQBAUFUGSTUH
    UJABUKUI $.

  ${
    on.1 $e |- A e. On $.
    $( An ordinal number is an ordinal class.  (Contributed by NM,
       11-Jun-1994.) $)
    onordi $p |- Ord A $=
      ( con0 wcel word eloni ax-mp ) ACDAEBAFG $.

    $( An ordinal number is a transitive class.  (Contributed by NM,
       11-Jun-1994.) $)
    ontrci $p |- Tr A $=
      ( word wtr onordi ordtr ax-mp ) ACADABEAFG $.

    $( An ordinal number is not a member of itself.  Theorem 7M(c) of
       [Enderton] p. 192.  (Contributed by NM, 11-Jun-1994.) $)
    onirri $p |- -. A e. A $=
      ( word wcel wn onordi ordirr ax-mp ) ACAADEABFAGH $.

    $( A member of an ordinal number is an ordinal number.  Theorem 7M(a) of
       [Enderton] p. 192.  (Contributed by NM, 11-Jun-1994.) $)
    oneli $p |- ( B e. A -> B e. On ) $=
      ( con0 wcel onelon mpan ) ADEBAEBDECABFG $.

    $( A member of an ordinal number is a subset of it.  (Contributed by NM,
       11-Aug-1994.) $)
    onelssi $p |- ( B e. A -> B C_ A ) $=
      ( con0 wcel wss wi onelss ax-mp ) ADEBAEBAFGCABHI $.

    $( An ordering law for ordinal numbers.  (Contributed by NM,
       13-Jun-1994.) $)
    onssneli $p |- ( A C_ B -> -. B e. A ) $=
      ( wss wcel ssel con0 word wn oneli eloni ordirr 3syl nsyli pm2.01d ) ABDZ
      BAEZPQBBEZQABBFQBGEBHRIABCJBKBLMNO $.

    $( An ordering law for ordinal numbers.  (Contributed by NM,
       13-Jun-1994.) $)
    onssnel2i $p |- ( B C_ A -> -. A e. B ) $=
      ( wss wcel onirri ssel mtoi ) BADABEAAEACFBAAGH $.

    $( An element of an ordinal number equals the intersection with it.
       (Contributed by NM, 11-Jun-1994.) $)
    onelini $p |- ( B e. A -> B = ( B i^i A ) ) $=
      ( wcel wss cin wceq onelssi dfss sylib ) BADBAEBBAFGABCHBAIJ $.

    $( An ordinal number equals its union with any element.  (Contributed by
       NM, 13-Jun-1994.) $)
    oneluni $p |- ( B e. A -> ( A u. B ) = A ) $=
      ( wcel wss cun wceq onelssi ssequn2 sylib ) BADBAEABFAGABCHBAIJ $.

    $( An ordinal number is equal to the union of its successor.  (Contributed
       by NM, 12-Jun-1994.) $)
    onunisuci $p |- U. suc A = A $=
      ( wtr csuc cuni wceq ontrci con0 elexi unisuc mpbi ) ACADEAFABGAAHBIJK $.

    ${
      on.2 $e |- B e. On $.
      $( Subset is equivalent to membership or equality for ordinal numbers.
         (Contributed by NM, 15-Sep-1995.) $)
      onsseli $p |- ( A C_ B <-> ( A e. B \/ A = B ) ) $=
        ( con0 wcel wss wceq wo wb onsseleq mp2an ) AEFBEFABGABFABHIJCDABKL $.

      $( The union of two ordinal numbers is an ordinal number.  (Contributed
         by NM, 13-Jun-1994.) $)
      onun2i $p |- ( A u. B ) e. On $=
        ( wcel wss wo con0 word onordi ordtri2or mp2an oneluni syl6eqel ssequn1
        cun wceq eleq1 mpbiri sylbi jaoi ax-mp ) BAEZABFZGZABPZHEZBIAIUEBDJACJB
        AKLUCUGUDUCUFAHABCMCNUDUFBQZUGABOUHUGBHEDUFBHRSTUAUB $.
    $}
  $}

  $( An ordinal equal to its own union is either zero or a limit ordinal.
     (Contributed by NM, 1-Oct-2003.) $)
  unizlim $p |- ( Ord A -> ( A = U. A <-> ( A = (/) \/ Lim A ) ) ) $=
    ( word cuni wceq c0 wlim wo wa wn wne df-ne w3a df-lim biimpri 3exp syl5bir
    wi com23 imp orrd ex uni0 eqcomi id unieq 3eqtr4a limuni jaoi impbid1 ) ABZ
    AACZDZAEDZAFZGZUJULUOUJULHUMUNUJULUMIZUNQUJUPULUNUPAEJZUJULUNQAEKUJUQULUNUN
    UJUQULLAMNOPRSTUAUMULUNUMEECZAUKUREUBUCUMUDAEUEUFAUGUHUI $.

  $( An ordinal number either equals zero or contains zero.  (Contributed by
     NM, 1-Jun-2004.) $)
  on0eqel $p |- ( A e. On -> ( A = (/) \/ (/) e. A ) ) $=
    ( con0 wcel c0 wceq wo wss 0ss 0elon onsseleq mpan mpbii eqcom orbi2i orcom
    wb bitri sylib ) ABCZDACZDAEZFZADEZTFZSDAGZUBAHDBCSUEUBPIDAJKLUBTUCFUDUAUCT
    DAMNTUCOQR $.

  $( The singleton of the singleton of the empty set is not an ordinal (nor a
     natural number by ~ omsson ).  It can be used to represent an "undefined"
     value for a partial operation on natural or ordinal numbers.  See also
     ~ onxpdisj .  (Contributed by NM, 21-May-2004.)  (Proof shortened by
     Andrew Salmon, 12-Aug-2011.) $)
  snsn0non $p |- -. { { (/) } } e. On $=
    ( c0 csn con0 wcel wceq snex snid n0ii 0ex eqcom mtbir elsn pm3.2ni on0eqel
    wo mto ) ABZBZCDRAEZARDZOSTQRQAFGHTAQEZUAQAEAQAIGHAQJKAQILKMRNP $.

  $( Ordinal numbers and ordered pairs are disjoint collections.  This theorem
     can be used if we want to extend a set of ordinal numbers or ordered pairs
     with disjoint elements.  See also ~ snsn0non .  (Contributed by NM,
     1-Jun-2004.)  (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
  onxpdisj $p |- ( On i^i ( _V X. _V ) ) = (/) $=
    ( vx con0 cvv cxp cin c0 wceq cv wcel wn disj on0eqel 0nelxp eleq1 0nelelxp
    wo mtbiri con2i jaoi syl mprgbir ) BCCDZEFGAHZUBIZJZABABUBKUCBIUCFGZFUCIZPU
    EUCLUFUEUGUFUDFUBICCMUCFUBNQUDUGCCUCORSTUA $.

  $( The class of ordinal numbers is not equal to the universe.  (Contributed
     by NM, 16-Jun-2007.)  (Proof shortened by Mario Carneiro, 10-Jan-2013.) $)
  onnev $p |- On =/= _V $=
    ( c0 csn con0 wcel wn cvv wne snsn0non wceq snex syl5eleqr necon3bi ax-mp
    id ) ABZBZCDZECFGHQCFCFIZPFCOJRNKLM $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Definite description binder (inverted iota)
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $c iota $.
  $( Extend class notation with Russell's definition description binder
     (inverted iota). $)
  cio $a class ( iota x ph ) $.

  ${
    $d w x z $.  $d ph w z $.  $d ph w y $.  $d x y $.
    $( Soundness justification theorem for ~ df-iota .  (Contributed by Andrew
       Salmon, 29-Jun-2011.) $)
    iotajust $p |- U. { y | { x | ph } = { y } } =
                   U. { z | { x | ph } = { z } } $=
      ( vw cab cv csn wceq sneq eqeq2d cbvabv eqtri unieqi ) ABFZCGZHZIZCFZODGZ
      HZIZDFZSOEGZHZIZEFUCRUFCEPUDIQUEOPUDJKLUFUBEDUDTIUEUAOUDTJKLMN $.
  $}

  ${
    $d y x $.  $d y ph $.
    $( Define Russell's definition description binder, which can be read as
       "the unique ` x ` such that ` ph ` ", where ` ph ` ordinarily contains
       ` x ` as a free variable.  Our definition is meaningful only when there
       is exactly one ` x ` such that ` ph ` is true (see ~ iotaval );
       otherwise, it evaluates to the empty set (see ~ iotanul ).  Russell used
       the inverted iota symbol ` iota ` to represent the binder.

       Sometimes proofs need to expand an iota-based definition.  That is,
       given "X = the x for which ... x ... x ..." holds, the proof needs to
       get to "...  X ...  X ...".  A general strategy to do this is to use
       ~ riotacl2 (or ~ iotacl for unbounded iota), as demonstrated in the
       proof of ~ supub .  This can be easier than applying ~ riotasbc or a
       version that applies an explicit substitution, because substituting an
       iota into its own property always has a bound variable clash which must
       be first renamed or else guarded with NF.

       (Contributed by Andrew Salmon, 30-Jun-2011.) $)
    df-iota $a |- ( iota x ph ) = U. { y | { x | ph } = { y } } $.
  $}

  ${
    $d x y $.  $d y ph $.
    $( Alternate definition for descriptions.  Definition 8.18 in [Quine]
       p. 56.  (Contributed by Andrew Salmon, 30-Jun-2011.) $)
    dfiota2 $p |- ( iota x ph ) = U. { y | A. x ( ph <-> x = y ) } $=
      ( cio cab cv csn wceq cuni wb wal df-iota absn abbii unieqi eqtri ) ABDAB
      ECFZGHZCEZIABFQHJBKZCEZIABCLSUARTCABQMNOP $.
  $}

  ${
    $d x y $.  $d y ph $.
    $( Bound-variable hypothesis builder for the ` iota ` class.  (Contributed
       by Andrew Salmon, 11-Jul-2011.)  (Revised by Mario Carneiro,
       15-Oct-2016.) $)
    nfiota1 $p |- F/_ x ( iota x ph ) $=
      ( vy cio weq wb wal cab cuni dfiota2 nfaba1 nfuni nfcxfr ) BABDABCEFZBGCH
      ZIABCJBONBCKLM $.
  $}

  ${
    $d z ps $.  $d z ph $.  $d x z $.  $d y z $.
    nfiotad.1 $e |- F/ y ph $.
    nfiotad.2 $e |- ( ph -> F/ x ps ) $.
    $( Deduction version of ~ nfiota .  (Contributed by NM, 18-Feb-2013.) $)
    nfiotad $p |- ( ph -> F/_ x ( iota y ps ) ) $=
      ( vz cio weq wb wal cab cuni dfiota2 nfv wn wa wnf adantr nfeqf1 nfcxfrd
      adantl nfbid nfald2 nfabd nfunid ) ACBDHBDGIZJZDKZGLZMBDGNACUJAUICGAGOAUH
      CDEACDICKPZQBUGCABCRUKFSUKUGCRACDGTUBUCUDUEUFUA $.
  $}

  ${
    nfiota.1 $e |- F/ x ph $.
    $( Bound-variable hypothesis builder for the ` iota ` class.  (Contributed
       by NM, 23-Aug-2011.) $)
    nfiota $p |- F/_ x ( iota y ph ) $=
      ( cio wnfc wtru nftru wnf a1i nfiotad mptru ) BACEFGABCCHABIGDJKL $.
  $}

  ${
    $d z w x $.  $d z w y $.  $d z w ph $.  $d z w ps $.
    cbviota.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    cbviota.2 $e |- F/ y ph $.
    cbviota.3 $e |- F/ x ps $.
    $( Change bound variables in a description binder.  (Contributed by Andrew
       Salmon, 1-Aug-2011.) $)
    cbviota $p |- ( iota x ph ) = ( iota y ps ) $=
      ( vw vz weq wb wal cab cuni cio wsb nfv nfbi equequ1 bibi12d sbequ12 nfsb
      nfs1v cbvalv1 sbequ sbie syl6bb bitri abbii unieqi dfiota2 3eqtr4i ) ACHJ
      ZKZCLZHMZNBDHJZKZDLZHMZNACOBDOUPUTUOUSHUOACIPZIHJZKZILUSUNVCCIUNIQVAVBCAC
      IUCVBCQRCIJAVAUMVBACIUACIHSTUDVCURIDVAVBDACIDFUBVBDQRURIQIDJZVABVBUQVDVAA
      CDPBAIDCUEABCDGEUFUGIDHSTUDUHUIUJACHUKBDHUKUL $.
  $}

  ${
    $d ph y $.  $d ps x $.
    cbviotav.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Change bound variables in a description binder.  (Contributed by Andrew
       Salmon, 1-Aug-2011.) $)
    cbviotav $p |- ( iota x ph ) = ( iota y ps ) $=
      ( nfv cbviota ) ABCDEADFBCFG $.
  $}

  ${
    $d w z ph $.  $d w z x $.  $d w z y $.
    sb8iota.1 $e |- F/ y ph $.
    $( Variable substitution in description binder.  Compare ~ sb8eu .
       (Contributed by NM, 18-Mar-2013.) $)
    sb8iota $p |- ( iota x ph ) = ( iota y [ y / x ] ph ) $=
      ( vz vw weq wal cab cuni wsb cio nfv sb8 sbbi nfsb equsb3 nfxfr dfiota2
      wb nfbi sbequ cbvalv1 sblbis albii 3bitri abbii unieqi 3eqtr4i ) ABEGZTZB
      HZEIZJABCKZCEGZTZCHZEIZJABLUNCLUMURULUQEULUKBFKZFHUKBCKZCHUQUKBFUKFMNUSUT
      FCUSABFKZUJBFKZTCAUJBFOVAVBCABFCDPVBFEGZCFBEQVCCMRUARUTFMUKFCBUBUCUTUPCUJ
      UOABCCBEQUDUEUFUGUHABESUNCESUI $.
  $}

  ${
    $d y z $.  $d x z $.  $d ph z $.
    $( Equality theorem for descriptions.  (Contributed by Andrew Salmon,
       30-Jun-2011.) $)
    iotaeq $p |- ( A. x x = y -> ( iota x ph ) = ( iota y ph ) ) $=
      ( vz cv wceq wal cab csn cuni cio wcel drsb1 df-clab 3bitr4g eqrdv eqeq1d
      wsb abbidv df-iota unieqd 3eqtr4g ) BECEFBGZABHZDEZIZFZDHZJACHZUFFZDHZJAB
      KACKUCUHUKUCUGUJDUCUDUIUFUCDUDUIUCABDRACDRUEUDLUEUILABCDMADBNADCNOPQSUAAB
      DTACDTUB $.
  $}

  ${
    $d ph z $.  $d ps z $.  $d x y z $.
    $( Equivalence theorem for descriptions.  (Contributed by Andrew Salmon,
       30-Jun-2011.) $)
    iotabi $p |- ( A. x ( ph <-> ps ) -> ( iota x ph ) = ( iota x ps ) ) $=
      ( vz wb wal cab cv csn wceq cuni abbi biimpi eqeq1d abbidv unieqd df-iota
      cio 3eqtr4g ) ABECFZACGZDHIZJZDGZKBCGZUBJZDGZKACRBCRTUDUGTUCUFDTUAUEUBTUA
      UEJABCLMNOPACDQBCDQS $.

    $( Part of Theorem 8.17 in [Quine] p. 56.  This theorem serves as a lemma
       for the fundamental property of iota.  (Contributed by Andrew Salmon,
       11-Jul-2011.) $)
    uniabio $p |- ( A. x ( ph <-> x = y ) -> U. { x | ph } = y ) $=
      ( cv wceq wb wal cab cuni csn abbi biimpi df-sn syl6eqr unieqd vex syl6eq
      unisn ) ABDCDZEZFBGZABHZISJZISUAUBUCUAUBTBHZUCUAUBUDEATBKLBSMNOSCPRQ $.

    $( Theorem 8.19 in [Quine] p. 57.  This theorem is the fundamental property
       of iota.  (Contributed by Andrew Salmon, 11-Jul-2011.) $)
    iotaval $p |- ( A. x ( ph <-> x = y ) -> ( iota x ph ) = y ) $=
      ( vz weq wb wal cio cab cuni cv dfiota2 wceq wa wi cvv sbeqalb ex equequ2
      elv bibi2d biimpd alimdv impbid equcom syl6bb alrimiv uniabio syl syl5eq
      com12 ) ABCEZFZBGZABHABDEZFZBGZDIJZCKZABDLUNUQDCEZFZDGURUSMUNVADUNUQCDEZU
      TUNUQVBUNUQVBUNUQNVBOCABUSDKPQTRVBUNUQVBUMUPBVBUMUPVBULUOACDBSUAUBUCUKUDC
      DUEUFUGUQDCUHUIUJ $.

    $( Equivalence between two different forms of ` iota ` .  (Contributed by
       Andrew Salmon, 12-Jul-2011.) $)
    iotauni $p |- ( E! x ph -> ( iota x ph ) = U. { x | ph } ) $=
      ( vz weu cv wceq wb wal wex cio cab cuni eu6 iotaval uniabio eqtr4d sylbi
      exlimiv ) ABDABECEZFGBHZCIABJZABKLZFZABCMTUCCTUASUBABCNABCOPRQ $.

    $( Equivalence between two different forms of ` iota ` .  (Contributed by
       Mario Carneiro, 24-Dec-2016.) $)
    iotaint $p |- ( E! x ph -> ( iota x ph ) = |^| { x | ph } ) $=
      ( weu cio cab cuni cint iotauni wceq uniintab biimpi eqtrd ) ABCZABDABEZF
      ZNGZABHMOPIABJKL $.

    $( Property of iota.  (Contributed by NM, 23-Aug-2011.)  (Revised by Mario
       Carneiro, 23-Dec-2016.) $)
    iota1 $p |- ( E! x ph -> ( ph <-> ( iota x ph ) = x ) ) $=
      ( vz weu cv wceq wb wal wex cio eu6 sp iotaval eqeq2d bitr4d eqcom syl6bb
      exlimiv sylbi ) ABDABEZCEZFZGZBHZCIAABJZTFZGZABCKUDUGCUDATUEFZUFUDAUBUHUC
      BLUDUEUATABCMNOTUEPQRS $.

    $( Theorem 8.22 in [Quine] p. 57.  This theorem is the result if there
       isn't exactly one ` x ` that satisfies ` ph ` .  (Contributed by Andrew
       Salmon, 11-Jul-2011.) $)
    iotanul $p |- ( -. E! x ph -> ( iota x ph ) = (/) ) $=
      ( vz weu weq wb wal wex cio c0 wceq eu6 wn cab dfiota2 alnex dfnul2 equid
      cuni tbt biimpi con1bid alimi abbi sylib sylbir unieqd uni0 syl6eq syl5eq
      syl5req sylnbi ) ABDABCEFBGZCHZABIZJKABCLUNMZUOUMCNZSZJABCOUPURJSJUPUQJUP
      UMMZCGZUQJKUMCPUTJCCEZMZCNZUQCQUTVBUMFZCGVCUQKUSVDCUSUMVAUSUSVAFVAUSCRTUA
      UBUCVBUMCUDUEUKUFUGUHUIUJUL $.

    $( The ` iota ` class is a subset of the union of all elements satisfying
       ` ph ` .  (Contributed by Mario Carneiro, 24-Dec-2016.) $)
    iotassuni $p |- ( iota x ph ) C_ U. { x | ph } $=
      ( weu cio cab cuni wss wceq iotauni eqimss syl wn c0 iotanul 0ss syl6eqss
      pm2.61i ) ABCZABDZABEFZGZRSTHUAABISTJKRLSMTABNTOPQ $.

    $( Theorem 8.23 in [Quine] p. 58.  This theorem proves the existence of the
       ` iota ` class under our definition.  (Contributed by Andrew Salmon,
       11-Jul-2011.) $)
    iotaex $p |- ( iota x ph ) e. _V $=
      ( vz weu cio cvv wcel cv wceq wb wal wex iotaval eqcomd eximi eu6 3imtr4i
      isset wn c0 iotanul 0ex syl6eqel pm2.61i ) ABDZABEZFGZABHCHZIJBKZCLUHUFIZ
      CLUEUGUIUJCUIUFUHABCMNOABCPCUFRQUESUFTFABUAUBUCUD $.

    $( Theorem *14.22 in [WhiteheadRussell] p. 190.  (Contributed by Andrew
       Salmon, 12-Jul-2011.) $)
    iota4 $p |- ( E! x ph -> [. ( iota x ph ) / x ]. ph ) $=
      ( vz weu weq wb wal wex cio eu6 wsb wi biimpr alimi sb6 sylibr cv iotaval
      wsbc wceq eqcomd dfsbcq2 syl mpbid exlimiv sylbi ) ABDABCEZFZBGZCHABABIZS
      ZABCJUIUKCUIABCKZUKUIUGALZBGULUHUMBAUGMNABCOPUICQZUJTULUKFUIUJUNABCRUAABC
      UJUBUCUDUEUF $.
  $}

  $( Theorem *14.23 in [WhiteheadRussell] p. 191.  (Contributed by Andrew
     Salmon, 12-Jul-2011.) $)
  iota4an $p |- ( E! x ( ph /\ ps )
            -> [. ( iota x ( ph /\ ps ) ) / x ]. ph ) $=
    ( wa weu cio wsbc iota4 wi cvv wcel iotaex simpl sbcth ax-mp wb sbcimg mpbi
    syl ) ABDZCETCTCFZGZACUAGZTCHTAIZCUAGZUBUCIZUAJKZUETCLZUDCUAJABMNOUGUEUFPUH
    TACUAJQORS $.

  ${
    $d x y A $.  $d x V $.  $d x ph $.  $d y ps $.
    iota5.1 $e |- ( ( ph /\ A e. V ) -> ( ps <-> x = A ) ) $.
    $( A method for computing iota.  (Contributed by NM, 17-Sep-2013.) $)
    iota5 $p |- ( ( ph /\ A e. V ) -> ( iota x ps ) = A ) $=
      ( vy wcel wa cv wceq wb wal cio alrimiv wi eqeq2 bibi2d albidv imbi12d
      iotaval vtoclg adantl mpd ) ADEHZIZBCJZDKZLZCMZBCNZDKZUFUICFOUEUJULPZABUG
      GJZKZLZCMZUKUNKZPUMGDEUNDKZUQUJURULUSUPUICUSUOUHBUNDUGQRSUNDUKQTBCGUAUBUC
      UD $.
  $}

  ${
    $d x ph $.
    iotabidv.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Formula-building deduction for iota.  (Contributed by NM,
       20-Aug-2011.) $)
    iotabidv $p |- ( ph -> ( iota x ps ) = ( iota x ch ) ) $=
      ( wb wal cio wceq alrimiv iotabi syl ) ABCFZDGBDHCDHIAMDEJBCDKL $.
  $}

  ${
    iotabii.1 $e |- ( ph <-> ps ) $.
    $( Formula-building deduction for iota.  (Contributed by Mario Carneiro,
       2-Oct-2015.) $)
    iotabii $p |- ( iota x ph ) = ( iota x ps ) $=
      ( wb cio wceq iotabi mpg ) ABEACFBCFGCABCHDI $.
  $}

  $( Membership law for descriptions.

     This can be useful for expanding an unbounded iota-based definition (see
     ~ df-iota ).  If you have a bounded iota-based definition, ~ riotacl2 may
     be useful.

     (Contributed by Andrew Salmon, 1-Aug-2011.) $)
  iotacl $p |- ( E! x ph -> ( iota x ph ) e. { x | ph } ) $=
    ( weu cio wsbc cab wcel iota4 df-sbc sylib ) ABCABABDZEKABFGABHABKIJ $.

  ${
    iota2df.1 $e |- ( ph -> B e. V ) $.
    iota2df.2 $e |- ( ph -> E! x ps ) $.
    iota2df.3 $e |- ( ( ph /\ x = B ) -> ( ps <-> ch ) ) $.
    ${
      iota2df.4 $e |- F/ x ph $.
      iota2df.5 $e |- ( ph -> F/ x ch ) $.
      iota2df.6 $e |- ( ph -> F/_ x B ) $.
      $( A condition that allows us to represent "the unique element such that
         ` ph ` " with a class expression ` A ` .  (Contributed by NM,
         30-Dec-2014.) $)
      iota2df $p |- ( ph -> ( ch <-> ( iota x ps ) = B ) ) $=
        ( cio cv wceq wb wa simpr eqeq2d bibi12d weu iota1 syl wnfc nfiota1 a1i
        nfeqd nfbid vtocldf ) ABBDMZDNZOZPZCUJEOZPDEFGAUKEOZQZBCULUNIUPUKEUJAUO
        RSTABDUAUMHBDUBUCJLACUNDKADUJEDUJUDABDUEUFLUGUHUI $.
    $}

    $d x B $.  $d x ph $.  $d x ch $.
    $( A condition that allows us to represent "the unique element such that
       ` ph ` " with a class expression ` A ` .  (Contributed by NM,
       30-Dec-2014.) $)
    iota2d $p |- ( ph -> ( ch <-> ( iota x ps ) = B ) ) $=
      ( nfv nfvd nfcvd iota2df ) ABCDEFGHIADJACDKADELM $.
  $}

  ${
    $d A x $.  $d ps x $.
    iota2.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( The unique element such that ` ph ` .  (Contributed by Jeff Madsen,
       1-Jun-2011.)  (Revised by Mario Carneiro, 23-Dec-2016.) $)
    iota2 $p |- ( ( A e. B /\ E! x ph ) -> ( ps <-> ( iota x ph ) = A ) ) $=
      ( wcel cvv weu cio wceq wb elex wa simpl simpr cv adantl nfv nfeu1 nfcvd
      nfan nfvd iota2df sylan ) DEGDHGZACIZBACJDKLDEMUFUGNZABCDHUFUGOUFUGPCQDKA
      BLUHFRUFUGCUFCSACTUBUHBCUCUHCDUAUDUE $.
  $}

  $( A class abstraction with a unique member can be expressed as a singleton.
     (Contributed by Mario Carneiro, 23-Dec-2016.) $)
  sniota $p |- ( E! x ph -> { x | ph } = { ( iota x ph ) } ) $=
    ( weu cab cio nfeu1 nfab1 nfiota1 nfsn cv wceq wcel iota1 eqcom syl6bb abid
    csn velsn 3bitr4g eqrd ) ABCZBABDZABEZQZABFABGBUCABHIUAABJZUCKZUEUBLUEUDLUA
    AUCUEKUFABMUCUENOABPBUCRST $.

  $( The ` iota ` operation using the ` if ` operator.  (Contributed by Scott
     Fenton, 6-Oct-2017.)  (Proof shortened by JJ, 28-Oct-2021.) $)
  dfiota4 $p |- ( iota x ph ) = if ( E! x ph , U. { x | ph } , (/) ) $=
    ( cio weu cab cuni c0 cif wceq wi wn iotauni iotanul ifval mpbir2an ) ABCZA
    BDZABEFZGHIQPRIJQKPGIJABLABMQPRGNO $.

  ${
    $d A y z $.  $d x y z $.  $d ph z $.
    $( Class substitution within a description binder.  (Contributed by Scott
       Fenton, 6-Oct-2017.)  (Revised by NM, 23-Aug-2018.) $)
    csbiota $p |- [_ A / x ]_ ( iota y ph ) = ( iota y [. A / x ]. ph ) $=
      ( vz cvv wcel cio csb wsbc wceq cv wsb csbeq1 dfsbcq2 iotabidv eqeq12d wn
      c0 con3i vex nfs1v nfiota weq sbequ12 csbief vtoclg csbprc wex sbcex euex
      weu nexdv iotanul 3syl eqtr4d pm2.61i ) DFGZBDACHZIZABDJZCHZKZBELZUSIZABE
      MZCHZKVCEDFVDDKZVEUTVGVBBVDDUSNVHVFVACABEDOPQBVDUSVGEUAVFBCABEUBUCBEUDAVF
      CABEUEPUFUGURRZUTSVBBDUSUHVIVACUIZRVACULZRVBSKVIVACVAURABDUJTUMVKVJVACUKT
      VACUNUOUPUQ $.
  $}
